
SmartTaxi_firmware_ver4.1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e1c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08018ed8  08018ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080196bc  080196bc  0001b504  2**0
                  CONTENTS
  4 .ARM          00000008  080196bc  080196bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080196c4  080196c4  0001b504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080196c4  080196c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080196c8  080196c8  0001a6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000504  20000000  080196cc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030ec  20000504  08019bd0  0001b504  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200035f0  08019bd0  0001b5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001b504  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e44f  00000000  00000000  0001b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b37  00000000  00000000  0003997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001482  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005004  00000000  00000000  00040332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241d5  00000000  00000000  00045336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9b96  00000000  00000000  0006950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001130a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a0  00000000  00000000  001130e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00119a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000504 	.word	0x20000504
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018ec0 	.word	0x08018ec0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000508 	.word	0x20000508
 8000100:	08018ec0 	.word	0x08018ec0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 ffc5 	bl	80023b4 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 ff05 	bl	8002244 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 ffb7 	bl	80023b4 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 ffad 	bl	80023b4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff2f 	bl	80022cc <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff25 	bl	80022cc <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cfrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0008      	movs	r0, r1
 8000494:	4661      	mov	r1, ip
 8000496:	e7ff      	b.n	8000498 <__aeabi_cfcmpeq>

08000498 <__aeabi_cfcmpeq>:
 8000498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049a:	f000 fc77 	bl	8000d8c <__lesf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d401      	bmi.n	80004a6 <__aeabi_cfcmpeq+0xe>
 80004a2:	2100      	movs	r1, #0
 80004a4:	42c8      	cmn	r0, r1
 80004a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004a8 <__aeabi_fcmpeq>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fbf7 	bl	8000c9c <__eqsf2>
 80004ae:	4240      	negs	r0, r0
 80004b0:	3001      	adds	r0, #1
 80004b2:	bd10      	pop	{r4, pc}

080004b4 <__aeabi_fcmplt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fc69 	bl	8000d8c <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	db01      	blt.n	80004c2 <__aeabi_fcmplt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)

080004c8 <__aeabi_fcmple>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fc5f 	bl	8000d8c <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dd01      	ble.n	80004d6 <__aeabi_fcmple+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmpgt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc05 	bl	8000cec <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dc01      	bgt.n	80004ea <__aeabi_fcmpgt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpge>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fbfb 	bl	8000cec <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	da01      	bge.n	80004fe <__aeabi_fcmpge+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_uldivmod>:
 8000504:	2b00      	cmp	r3, #0
 8000506:	d111      	bne.n	800052c <__aeabi_uldivmod+0x28>
 8000508:	2a00      	cmp	r2, #0
 800050a:	d10f      	bne.n	800052c <__aeabi_uldivmod+0x28>
 800050c:	2900      	cmp	r1, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_uldivmod+0xe>
 8000510:	2800      	cmp	r0, #0
 8000512:	d002      	beq.n	800051a <__aeabi_uldivmod+0x16>
 8000514:	2100      	movs	r1, #0
 8000516:	43c9      	mvns	r1, r1
 8000518:	0008      	movs	r0, r1
 800051a:	b407      	push	{r0, r1, r2}
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <__aeabi_uldivmod+0x24>)
 800051e:	a102      	add	r1, pc, #8	@ (adr r1, 8000528 <__aeabi_uldivmod+0x24>)
 8000520:	1840      	adds	r0, r0, r1
 8000522:	9002      	str	r0, [sp, #8]
 8000524:	bd03      	pop	{r0, r1, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	fffffee9 	.word	0xfffffee9
 800052c:	b403      	push	{r0, r1}
 800052e:	4668      	mov	r0, sp
 8000530:	b501      	push	{r0, lr}
 8000532:	9802      	ldr	r0, [sp, #8]
 8000534:	f000 f83c 	bl	80005b0 <__udivmoddi4>
 8000538:	9b01      	ldr	r3, [sp, #4]
 800053a:	469e      	mov	lr, r3
 800053c:	b002      	add	sp, #8
 800053e:	bc0c      	pop	{r2, r3}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	@ 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f7ff ffd0 	bl	80004f0 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 ff49 	bl	80013ec <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fd9f 	bl	80010a4 <__aeabi_fsub>
 8000566:	f000 ff41 	bl	80013ec <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	@ 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__aeabi_d2uiz>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	2200      	movs	r2, #0
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <__aeabi_d2uiz+0x38>)
 800057a:	0004      	movs	r4, r0
 800057c:	000d      	movs	r5, r1
 800057e:	f7ff ff7d 	bl	800047c <__aeabi_dcmpge>
 8000582:	2800      	cmp	r0, #0
 8000584:	d104      	bne.n	8000590 <__aeabi_d2uiz+0x1c>
 8000586:	0020      	movs	r0, r4
 8000588:	0029      	movs	r1, r5
 800058a:	f002 fde9 	bl	8003160 <__aeabi_d2iz>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <__aeabi_d2uiz+0x38>)
 8000592:	2200      	movs	r2, #0
 8000594:	0020      	movs	r0, r4
 8000596:	0029      	movs	r1, r5
 8000598:	f002 fa46 	bl	8002a28 <__aeabi_dsub>
 800059c:	f002 fde0 	bl	8003160 <__aeabi_d2iz>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	469c      	mov	ip, r3
 80005a6:	4460      	add	r0, ip
 80005a8:	e7f1      	b.n	800058e <__aeabi_d2uiz+0x1a>
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	41e00000 	.word	0x41e00000

080005b0 <__udivmoddi4>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	4657      	mov	r7, sl
 80005b4:	464e      	mov	r6, r9
 80005b6:	4645      	mov	r5, r8
 80005b8:	46de      	mov	lr, fp
 80005ba:	b5e0      	push	{r5, r6, r7, lr}
 80005bc:	0004      	movs	r4, r0
 80005be:	000d      	movs	r5, r1
 80005c0:	4692      	mov	sl, r2
 80005c2:	4699      	mov	r9, r3
 80005c4:	b083      	sub	sp, #12
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d830      	bhi.n	800062c <__udivmoddi4+0x7c>
 80005ca:	d02d      	beq.n	8000628 <__udivmoddi4+0x78>
 80005cc:	4649      	mov	r1, r9
 80005ce:	4650      	mov	r0, sl
 80005d0:	f002 ff3e 	bl	8003450 <__clzdi2>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0006      	movs	r6, r0
 80005d8:	0020      	movs	r0, r4
 80005da:	f002 ff39 	bl	8003450 <__clzdi2>
 80005de:	1a33      	subs	r3, r6, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	3b20      	subs	r3, #32
 80005e4:	d434      	bmi.n	8000650 <__udivmoddi4+0xa0>
 80005e6:	469b      	mov	fp, r3
 80005e8:	4653      	mov	r3, sl
 80005ea:	465a      	mov	r2, fp
 80005ec:	4093      	lsls	r3, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	001f      	movs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d83b      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d100      	bne.n	8000602 <__udivmoddi4+0x52>
 8000600:	e079      	b.n	80006f6 <__udivmoddi4+0x146>
 8000602:	465b      	mov	r3, fp
 8000604:	1ba4      	subs	r4, r4, r6
 8000606:	41bd      	sbcs	r5, r7
 8000608:	2b00      	cmp	r3, #0
 800060a:	da00      	bge.n	800060e <__udivmoddi4+0x5e>
 800060c:	e076      	b.n	80006fc <__udivmoddi4+0x14c>
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	465a      	mov	r2, fp
 800061a:	4093      	lsls	r3, r2
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	4642      	mov	r2, r8
 8000622:	4093      	lsls	r3, r2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	e029      	b.n	800067c <__udivmoddi4+0xcc>
 8000628:	4282      	cmp	r2, r0
 800062a:	d9cf      	bls.n	80005cc <__udivmoddi4+0x1c>
 800062c:	2200      	movs	r2, #0
 800062e:	2300      	movs	r3, #0
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <__udivmoddi4+0x8e>
 800063a:	601c      	str	r4, [r3, #0]
 800063c:	605d      	str	r5, [r3, #4]
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	b003      	add	sp, #12
 8000644:	bcf0      	pop	{r4, r5, r6, r7}
 8000646:	46bb      	mov	fp, r7
 8000648:	46b2      	mov	sl, r6
 800064a:	46a9      	mov	r9, r5
 800064c:	46a0      	mov	r8, r4
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	4642      	mov	r2, r8
 8000652:	469b      	mov	fp, r3
 8000654:	2320      	movs	r3, #32
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	4652      	mov	r2, sl
 800065a:	40da      	lsrs	r2, r3
 800065c:	4641      	mov	r1, r8
 800065e:	0013      	movs	r3, r2
 8000660:	464a      	mov	r2, r9
 8000662:	408a      	lsls	r2, r1
 8000664:	0017      	movs	r7, r2
 8000666:	4642      	mov	r2, r8
 8000668:	431f      	orrs	r7, r3
 800066a:	4653      	mov	r3, sl
 800066c:	4093      	lsls	r3, r2
 800066e:	001e      	movs	r6, r3
 8000670:	42af      	cmp	r7, r5
 8000672:	d9c3      	bls.n	80005fc <__udivmoddi4+0x4c>
 8000674:	2200      	movs	r2, #0
 8000676:	2300      	movs	r3, #0
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	4643      	mov	r3, r8
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0d8      	beq.n	8000634 <__udivmoddi4+0x84>
 8000682:	07fb      	lsls	r3, r7, #31
 8000684:	0872      	lsrs	r2, r6, #1
 8000686:	431a      	orrs	r2, r3
 8000688:	4646      	mov	r6, r8
 800068a:	087b      	lsrs	r3, r7, #1
 800068c:	e00e      	b.n	80006ac <__udivmoddi4+0xfc>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d101      	bne.n	8000696 <__udivmoddi4+0xe6>
 8000692:	42a2      	cmp	r2, r4
 8000694:	d80c      	bhi.n	80006b0 <__udivmoddi4+0x100>
 8000696:	1aa4      	subs	r4, r4, r2
 8000698:	419d      	sbcs	r5, r3
 800069a:	2001      	movs	r0, #1
 800069c:	1924      	adds	r4, r4, r4
 800069e:	416d      	adcs	r5, r5
 80006a0:	2100      	movs	r1, #0
 80006a2:	3e01      	subs	r6, #1
 80006a4:	1824      	adds	r4, r4, r0
 80006a6:	414d      	adcs	r5, r1
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d006      	beq.n	80006ba <__udivmoddi4+0x10a>
 80006ac:	42ab      	cmp	r3, r5
 80006ae:	d9ee      	bls.n	800068e <__udivmoddi4+0xde>
 80006b0:	3e01      	subs	r6, #1
 80006b2:	1924      	adds	r4, r4, r4
 80006b4:	416d      	adcs	r5, r5
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d1f8      	bne.n	80006ac <__udivmoddi4+0xfc>
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	465b      	mov	r3, fp
 80006c0:	1900      	adds	r0, r0, r4
 80006c2:	4169      	adcs	r1, r5
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db24      	blt.n	8000712 <__udivmoddi4+0x162>
 80006c8:	002b      	movs	r3, r5
 80006ca:	465a      	mov	r2, fp
 80006cc:	4644      	mov	r4, r8
 80006ce:	40d3      	lsrs	r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	40e2      	lsrs	r2, r4
 80006d4:	001c      	movs	r4, r3
 80006d6:	465b      	mov	r3, fp
 80006d8:	0015      	movs	r5, r2
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db2a      	blt.n	8000734 <__udivmoddi4+0x184>
 80006de:	0026      	movs	r6, r4
 80006e0:	409e      	lsls	r6, r3
 80006e2:	0033      	movs	r3, r6
 80006e4:	0026      	movs	r6, r4
 80006e6:	4647      	mov	r7, r8
 80006e8:	40be      	lsls	r6, r7
 80006ea:	0032      	movs	r2, r6
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4199      	sbcs	r1, r3
 80006f0:	9000      	str	r0, [sp, #0]
 80006f2:	9101      	str	r1, [sp, #4]
 80006f4:	e79e      	b.n	8000634 <__udivmoddi4+0x84>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d8bc      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80006fa:	e782      	b.n	8000602 <__udivmoddi4+0x52>
 80006fc:	4642      	mov	r2, r8
 80006fe:	2320      	movs	r3, #32
 8000700:	2100      	movs	r1, #0
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	2200      	movs	r2, #0
 8000706:	9100      	str	r1, [sp, #0]
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	40da      	lsrs	r2, r3
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	e785      	b.n	800061e <__udivmoddi4+0x6e>
 8000712:	4642      	mov	r2, r8
 8000714:	2320      	movs	r3, #32
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	002a      	movs	r2, r5
 800071a:	4646      	mov	r6, r8
 800071c:	409a      	lsls	r2, r3
 800071e:	0023      	movs	r3, r4
 8000720:	40f3      	lsrs	r3, r6
 8000722:	4644      	mov	r4, r8
 8000724:	4313      	orrs	r3, r2
 8000726:	002a      	movs	r2, r5
 8000728:	40e2      	lsrs	r2, r4
 800072a:	001c      	movs	r4, r3
 800072c:	465b      	mov	r3, fp
 800072e:	0015      	movs	r5, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	dad4      	bge.n	80006de <__udivmoddi4+0x12e>
 8000734:	4642      	mov	r2, r8
 8000736:	002f      	movs	r7, r5
 8000738:	2320      	movs	r3, #32
 800073a:	0026      	movs	r6, r4
 800073c:	4097      	lsls	r7, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	40de      	lsrs	r6, r3
 8000742:	003b      	movs	r3, r7
 8000744:	4333      	orrs	r3, r6
 8000746:	e7cd      	b.n	80006e4 <__udivmoddi4+0x134>

08000748 <__aeabi_fadd>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	46ce      	mov	lr, r9
 800074c:	4647      	mov	r7, r8
 800074e:	0243      	lsls	r3, r0, #9
 8000750:	0a5a      	lsrs	r2, r3, #9
 8000752:	024e      	lsls	r6, r1, #9
 8000754:	0045      	lsls	r5, r0, #1
 8000756:	0fc4      	lsrs	r4, r0, #31
 8000758:	0048      	lsls	r0, r1, #1
 800075a:	4691      	mov	r9, r2
 800075c:	0e2d      	lsrs	r5, r5, #24
 800075e:	0a72      	lsrs	r2, r6, #9
 8000760:	0e00      	lsrs	r0, r0, #24
 8000762:	4694      	mov	ip, r2
 8000764:	b580      	push	{r7, lr}
 8000766:	099b      	lsrs	r3, r3, #6
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	09b6      	lsrs	r6, r6, #6
 800076c:	1a2a      	subs	r2, r5, r0
 800076e:	428c      	cmp	r4, r1
 8000770:	d021      	beq.n	80007b6 <__aeabi_fadd+0x6e>
 8000772:	2a00      	cmp	r2, #0
 8000774:	dd0d      	ble.n	8000792 <__aeabi_fadd+0x4a>
 8000776:	2800      	cmp	r0, #0
 8000778:	d12d      	bne.n	80007d6 <__aeabi_fadd+0x8e>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x38>
 800077e:	e08d      	b.n	800089c <__aeabi_fadd+0x154>
 8000780:	1e51      	subs	r1, r2, #1
 8000782:	2a01      	cmp	r2, #1
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x40>
 8000786:	e11d      	b.n	80009c4 <__aeabi_fadd+0x27c>
 8000788:	2aff      	cmp	r2, #255	@ 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x46>
 800078c:	e0ab      	b.n	80008e6 <__aeabi_fadd+0x19e>
 800078e:	000a      	movs	r2, r1
 8000790:	e027      	b.n	80007e2 <__aeabi_fadd+0x9a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d04d      	beq.n	8000832 <__aeabi_fadd+0xea>
 8000796:	1b42      	subs	r2, r0, r5
 8000798:	2d00      	cmp	r5, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x56>
 800079c:	e0cc      	b.n	8000938 <__aeabi_fadd+0x1f0>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x5c>
 80007a2:	e079      	b.n	8000898 <__aeabi_fadd+0x150>
 80007a4:	1e54      	subs	r4, r2, #1
 80007a6:	2a01      	cmp	r2, #1
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x64>
 80007aa:	e128      	b.n	80009fe <__aeabi_fadd+0x2b6>
 80007ac:	2aff      	cmp	r2, #255	@ 0xff
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fadd+0x6a>
 80007b0:	e097      	b.n	80008e2 <__aeabi_fadd+0x19a>
 80007b2:	0022      	movs	r2, r4
 80007b4:	e0c5      	b.n	8000942 <__aeabi_fadd+0x1fa>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0x74>
 80007ba:	e096      	b.n	80008ea <__aeabi_fadd+0x1a2>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d04f      	beq.n	8000860 <__aeabi_fadd+0x118>
 80007c0:	2dff      	cmp	r5, #255	@ 0xff
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x7e>
 80007c4:	e08f      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	04c9      	lsls	r1, r1, #19
 80007ca:	430e      	orrs	r6, r1
 80007cc:	2a1b      	cmp	r2, #27
 80007ce:	dd51      	ble.n	8000874 <__aeabi_fadd+0x12c>
 80007d0:	002a      	movs	r2, r5
 80007d2:	3301      	adds	r3, #1
 80007d4:	e018      	b.n	8000808 <__aeabi_fadd+0xc0>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x94>
 80007da:	e084      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	04c9      	lsls	r1, r1, #19
 80007e0:	430e      	orrs	r6, r1
 80007e2:	2101      	movs	r1, #1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc08      	bgt.n	80007fa <__aeabi_fadd+0xb2>
 80007e8:	0031      	movs	r1, r6
 80007ea:	2020      	movs	r0, #32
 80007ec:	40d1      	lsrs	r1, r2
 80007ee:	1a82      	subs	r2, r0, r2
 80007f0:	4096      	lsls	r6, r2
 80007f2:	0032      	movs	r2, r6
 80007f4:	1e50      	subs	r0, r2, #1
 80007f6:	4182      	sbcs	r2, r0
 80007f8:	4311      	orrs	r1, r2
 80007fa:	1a5b      	subs	r3, r3, r1
 80007fc:	015a      	lsls	r2, r3, #5
 80007fe:	d459      	bmi.n	80008b4 <__aeabi_fadd+0x16c>
 8000800:	2107      	movs	r1, #7
 8000802:	002a      	movs	r2, r5
 8000804:	4019      	ands	r1, r3
 8000806:	d049      	beq.n	800089c <__aeabi_fadd+0x154>
 8000808:	210f      	movs	r1, #15
 800080a:	4019      	ands	r1, r3
 800080c:	2904      	cmp	r1, #4
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0xca>
 8000810:	3304      	adds	r3, #4
 8000812:	0159      	lsls	r1, r3, #5
 8000814:	d542      	bpl.n	800089c <__aeabi_fadd+0x154>
 8000816:	1c50      	adds	r0, r2, #1
 8000818:	2afe      	cmp	r2, #254	@ 0xfe
 800081a:	d03a      	beq.n	8000892 <__aeabi_fadd+0x14a>
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	b2c0      	uxtb	r0, r0
 8000820:	0a5b      	lsrs	r3, r3, #9
 8000822:	05c0      	lsls	r0, r0, #23
 8000824:	4318      	orrs	r0, r3
 8000826:	07e4      	lsls	r4, r4, #31
 8000828:	4320      	orrs	r0, r4
 800082a:	bcc0      	pop	{r6, r7}
 800082c:	46b9      	mov	r9, r7
 800082e:	46b0      	mov	r8, r6
 8000830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000832:	20fe      	movs	r0, #254	@ 0xfe
 8000834:	4680      	mov	r8, r0
 8000836:	1c6f      	adds	r7, r5, #1
 8000838:	0038      	movs	r0, r7
 800083a:	4647      	mov	r7, r8
 800083c:	4207      	tst	r7, r0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0xfa>
 8000840:	e08e      	b.n	8000960 <__aeabi_fadd+0x218>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x100>
 8000846:	e0b4      	b.n	80009b2 <__aeabi_fadd+0x26a>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x106>
 800084c:	e0db      	b.n	8000a06 <__aeabi_fadd+0x2be>
 800084e:	2e00      	cmp	r6, #0
 8000850:	d06c      	beq.n	800092c <__aeabi_fadd+0x1e4>
 8000852:	1b98      	subs	r0, r3, r6
 8000854:	0145      	lsls	r5, r0, #5
 8000856:	d400      	bmi.n	800085a <__aeabi_fadd+0x112>
 8000858:	e0f7      	b.n	8000a4a <__aeabi_fadd+0x302>
 800085a:	000c      	movs	r4, r1
 800085c:	1af3      	subs	r3, r6, r3
 800085e:	e03d      	b.n	80008dc <__aeabi_fadd+0x194>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d01b      	beq.n	800089c <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x124>
 800086a:	e082      	b.n	8000972 <__aeabi_fadd+0x22a>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d03a      	beq.n	80008e6 <__aeabi_fadd+0x19e>
 8000870:	000a      	movs	r2, r1
 8000872:	e7ab      	b.n	80007cc <__aeabi_fadd+0x84>
 8000874:	0031      	movs	r1, r6
 8000876:	2020      	movs	r0, #32
 8000878:	40d1      	lsrs	r1, r2
 800087a:	1a82      	subs	r2, r0, r2
 800087c:	4096      	lsls	r6, r2
 800087e:	0032      	movs	r2, r6
 8000880:	1e50      	subs	r0, r2, #1
 8000882:	4182      	sbcs	r2, r0
 8000884:	430a      	orrs	r2, r1
 8000886:	189b      	adds	r3, r3, r2
 8000888:	015a      	lsls	r2, r3, #5
 800088a:	d5b9      	bpl.n	8000800 <__aeabi_fadd+0xb8>
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000890:	d175      	bne.n	800097e <__aeabi_fadd+0x236>
 8000892:	20ff      	movs	r0, #255	@ 0xff
 8000894:	2300      	movs	r3, #0
 8000896:	e7c4      	b.n	8000822 <__aeabi_fadd+0xda>
 8000898:	000c      	movs	r4, r1
 800089a:	0033      	movs	r3, r6
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	2aff      	cmp	r2, #255	@ 0xff
 80008a0:	d146      	bne.n	8000930 <__aeabi_fadd+0x1e8>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0f5      	beq.n	8000892 <__aeabi_fadd+0x14a>
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	4313      	orrs	r3, r2
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	20ff      	movs	r0, #255	@ 0xff
 80008b0:	0a5b      	lsrs	r3, r3, #9
 80008b2:	e7b6      	b.n	8000822 <__aeabi_fadd+0xda>
 80008b4:	019f      	lsls	r7, r3, #6
 80008b6:	09bf      	lsrs	r7, r7, #6
 80008b8:	0038      	movs	r0, r7
 80008ba:	f002 fdab 	bl	8003414 <__clzsi2>
 80008be:	3805      	subs	r0, #5
 80008c0:	4087      	lsls	r7, r0
 80008c2:	4285      	cmp	r5, r0
 80008c4:	dc24      	bgt.n	8000910 <__aeabi_fadd+0x1c8>
 80008c6:	003b      	movs	r3, r7
 80008c8:	2120      	movs	r1, #32
 80008ca:	1b42      	subs	r2, r0, r5
 80008cc:	3201      	adds	r2, #1
 80008ce:	40d3      	lsrs	r3, r2
 80008d0:	1a8a      	subs	r2, r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	1e7a      	subs	r2, r7, #1
 80008d6:	4197      	sbcs	r7, r2
 80008d8:	2200      	movs	r2, #0
 80008da:	433b      	orrs	r3, r7
 80008dc:	0759      	lsls	r1, r3, #29
 80008de:	d193      	bne.n	8000808 <__aeabi_fadd+0xc0>
 80008e0:	e797      	b.n	8000812 <__aeabi_fadd+0xca>
 80008e2:	000c      	movs	r4, r1
 80008e4:	0033      	movs	r3, r6
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	e7db      	b.n	80008a2 <__aeabi_fadd+0x15a>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	d014      	beq.n	8000918 <__aeabi_fadd+0x1d0>
 80008ee:	1b42      	subs	r2, r0, r5
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d14b      	bne.n	800098c <__aeabi_fadd+0x244>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0d0      	beq.n	800089a <__aeabi_fadd+0x152>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1b8>
 80008fe:	e09e      	b.n	8000a3e <__aeabi_fadd+0x2f6>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d0ef      	beq.n	80008e4 <__aeabi_fadd+0x19c>
 8000904:	000a      	movs	r2, r1
 8000906:	2a1b      	cmp	r2, #27
 8000908:	dd5f      	ble.n	80009ca <__aeabi_fadd+0x282>
 800090a:	0002      	movs	r2, r0
 800090c:	1c73      	adds	r3, r6, #1
 800090e:	e77b      	b.n	8000808 <__aeabi_fadd+0xc0>
 8000910:	4b50      	ldr	r3, [pc, #320]	@ (8000a54 <__aeabi_fadd+0x30c>)
 8000912:	1a2a      	subs	r2, r5, r0
 8000914:	403b      	ands	r3, r7
 8000916:	e7e1      	b.n	80008dc <__aeabi_fadd+0x194>
 8000918:	21fe      	movs	r1, #254	@ 0xfe
 800091a:	1c6a      	adds	r2, r5, #1
 800091c:	4211      	tst	r1, r2
 800091e:	d13b      	bne.n	8000998 <__aeabi_fadd+0x250>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d15d      	bne.n	80009e0 <__aeabi_fadd+0x298>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d07f      	beq.n	8000a28 <__aeabi_fadd+0x2e0>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d17f      	bne.n	8000a2c <__aeabi_fadd+0x2e4>
 800092c:	2200      	movs	r2, #0
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	b2d0      	uxtb	r0, r2
 8000936:	e774      	b.n	8000822 <__aeabi_fadd+0xda>
 8000938:	28ff      	cmp	r0, #255	@ 0xff
 800093a:	d0d2      	beq.n	80008e2 <__aeabi_fadd+0x19a>
 800093c:	2480      	movs	r4, #128	@ 0x80
 800093e:	04e4      	lsls	r4, r4, #19
 8000940:	4323      	orrs	r3, r4
 8000942:	2401      	movs	r4, #1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dc07      	bgt.n	8000958 <__aeabi_fadd+0x210>
 8000948:	001c      	movs	r4, r3
 800094a:	2520      	movs	r5, #32
 800094c:	40d4      	lsrs	r4, r2
 800094e:	1aaa      	subs	r2, r5, r2
 8000950:	4093      	lsls	r3, r2
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	4193      	sbcs	r3, r2
 8000956:	431c      	orrs	r4, r3
 8000958:	1b33      	subs	r3, r6, r4
 800095a:	0005      	movs	r5, r0
 800095c:	000c      	movs	r4, r1
 800095e:	e74d      	b.n	80007fc <__aeabi_fadd+0xb4>
 8000960:	1b9f      	subs	r7, r3, r6
 8000962:	017a      	lsls	r2, r7, #5
 8000964:	d422      	bmi.n	80009ac <__aeabi_fadd+0x264>
 8000966:	2f00      	cmp	r7, #0
 8000968:	d1a6      	bne.n	80008b8 <__aeabi_fadd+0x170>
 800096a:	2400      	movs	r4, #0
 800096c:	2000      	movs	r0, #0
 800096e:	2300      	movs	r3, #0
 8000970:	e757      	b.n	8000822 <__aeabi_fadd+0xda>
 8000972:	199b      	adds	r3, r3, r6
 8000974:	2501      	movs	r5, #1
 8000976:	3201      	adds	r2, #1
 8000978:	0159      	lsls	r1, r3, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fadd+0x236>
 800097c:	e740      	b.n	8000800 <__aeabi_fadd+0xb8>
 800097e:	2101      	movs	r1, #1
 8000980:	4835      	ldr	r0, [pc, #212]	@ (8000a58 <__aeabi_fadd+0x310>)
 8000982:	4019      	ands	r1, r3
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	4003      	ands	r3, r0
 8000988:	430b      	orrs	r3, r1
 800098a:	e7a7      	b.n	80008dc <__aeabi_fadd+0x194>
 800098c:	28ff      	cmp	r0, #255	@ 0xff
 800098e:	d0a9      	beq.n	80008e4 <__aeabi_fadd+0x19c>
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	04c9      	lsls	r1, r1, #19
 8000994:	430b      	orrs	r3, r1
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0x1be>
 8000998:	2aff      	cmp	r2, #255	@ 0xff
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0x256>
 800099c:	e779      	b.n	8000892 <__aeabi_fadd+0x14a>
 800099e:	199b      	adds	r3, r3, r6
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	0759      	lsls	r1, r3, #29
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fadd+0x260>
 80009a6:	e72f      	b.n	8000808 <__aeabi_fadd+0xc0>
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	e7c1      	b.n	8000930 <__aeabi_fadd+0x1e8>
 80009ac:	000c      	movs	r4, r1
 80009ae:	1af7      	subs	r7, r6, r3
 80009b0:	e782      	b.n	80008b8 <__aeabi_fadd+0x170>
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12c      	bne.n	8000a10 <__aeabi_fadd+0x2c8>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d193      	bne.n	80008e2 <__aeabi_fadd+0x19a>
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	2400      	movs	r4, #0
 80009be:	20ff      	movs	r0, #255	@ 0xff
 80009c0:	03db      	lsls	r3, r3, #15
 80009c2:	e72e      	b.n	8000822 <__aeabi_fadd+0xda>
 80009c4:	2501      	movs	r5, #1
 80009c6:	1b9b      	subs	r3, r3, r6
 80009c8:	e718      	b.n	80007fc <__aeabi_fadd+0xb4>
 80009ca:	0019      	movs	r1, r3
 80009cc:	2520      	movs	r5, #32
 80009ce:	40d1      	lsrs	r1, r2
 80009d0:	1aaa      	subs	r2, r5, r2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	4193      	sbcs	r3, r2
 80009d8:	430b      	orrs	r3, r1
 80009da:	0005      	movs	r5, r0
 80009dc:	199b      	adds	r3, r3, r6
 80009de:	e753      	b.n	8000888 <__aeabi_fadd+0x140>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x29e>
 80009e4:	e77e      	b.n	80008e4 <__aeabi_fadd+0x19c>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fadd+0x2a4>
 80009ea:	e77c      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	03d2      	lsls	r2, r2, #15
 80009f0:	4591      	cmp	r9, r2
 80009f2:	d302      	bcc.n	80009fa <__aeabi_fadd+0x2b2>
 80009f4:	4594      	cmp	ip, r2
 80009f6:	d200      	bcs.n	80009fa <__aeabi_fadd+0x2b2>
 80009f8:	0033      	movs	r3, r6
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e753      	b.n	80008a6 <__aeabi_fadd+0x15e>
 80009fe:	000c      	movs	r4, r1
 8000a00:	1af3      	subs	r3, r6, r3
 8000a02:	3501      	adds	r5, #1
 8000a04:	e6fa      	b.n	80007fc <__aeabi_fadd+0xb4>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d0af      	beq.n	800096a <__aeabi_fadd+0x222>
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	0033      	movs	r3, r6
 8000a0e:	e78d      	b.n	800092c <__aeabi_fadd+0x1e4>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x2ce>
 8000a14:	e767      	b.n	80008e6 <__aeabi_fadd+0x19e>
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	03d2      	lsls	r2, r2, #15
 8000a1a:	4591      	cmp	r9, r2
 8000a1c:	d3ed      	bcc.n	80009fa <__aeabi_fadd+0x2b2>
 8000a1e:	4594      	cmp	ip, r2
 8000a20:	d2eb      	bcs.n	80009fa <__aeabi_fadd+0x2b2>
 8000a22:	000c      	movs	r4, r1
 8000a24:	0033      	movs	r3, r6
 8000a26:	e7e8      	b.n	80009fa <__aeabi_fadd+0x2b2>
 8000a28:	0033      	movs	r3, r6
 8000a2a:	e77f      	b.n	800092c <__aeabi_fadd+0x1e4>
 8000a2c:	199b      	adds	r3, r3, r6
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d5b9      	bpl.n	80009a8 <__aeabi_fadd+0x260>
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <__aeabi_fadd+0x30c>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	e778      	b.n	8000930 <__aeabi_fadd+0x1e8>
 8000a3e:	199b      	adds	r3, r3, r6
 8000a40:	3201      	adds	r2, #1
 8000a42:	3501      	adds	r5, #1
 8000a44:	0159      	lsls	r1, r3, #5
 8000a46:	d49a      	bmi.n	800097e <__aeabi_fadd+0x236>
 8000a48:	e6da      	b.n	8000800 <__aeabi_fadd+0xb8>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d08d      	beq.n	800096a <__aeabi_fadd+0x222>
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e76e      	b.n	8000930 <__aeabi_fadd+0x1e8>
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	fbffffff 	.word	0xfbffffff
 8000a58:	7dffffff 	.word	0x7dffffff

08000a5c <__aeabi_fdiv>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	464f      	mov	r7, r9
 8000a60:	4646      	mov	r6, r8
 8000a62:	46d6      	mov	lr, sl
 8000a64:	0244      	lsls	r4, r0, #9
 8000a66:	b5c0      	push	{r6, r7, lr}
 8000a68:	0047      	lsls	r7, r0, #1
 8000a6a:	1c0e      	adds	r6, r1, #0
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0e3f      	lsrs	r7, r7, #24
 8000a70:	0fc5      	lsrs	r5, r0, #31
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d03c      	beq.n	8000af0 <__aeabi_fdiv+0x94>
 8000a76:	2fff      	cmp	r7, #255	@ 0xff
 8000a78:	d042      	beq.n	8000b00 <__aeabi_fdiv+0xa4>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	4699      	mov	r9, r3
 8000a80:	469a      	mov	sl, r3
 8000a82:	00e4      	lsls	r4, r4, #3
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	4314      	orrs	r4, r2
 8000a88:	3f7f      	subs	r7, #127	@ 0x7f
 8000a8a:	0273      	lsls	r3, r6, #9
 8000a8c:	0a5b      	lsrs	r3, r3, #9
 8000a8e:	4698      	mov	r8, r3
 8000a90:	0073      	lsls	r3, r6, #1
 8000a92:	0e1b      	lsrs	r3, r3, #24
 8000a94:	0ff6      	lsrs	r6, r6, #31
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01b      	beq.n	8000ad2 <__aeabi_fdiv+0x76>
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d013      	beq.n	8000ac6 <__aeabi_fdiv+0x6a>
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	04c9      	lsls	r1, r1, #19
 8000aa6:	4311      	orrs	r1, r2
 8000aa8:	4688      	mov	r8, r1
 8000aaa:	2000      	movs	r0, #0
 8000aac:	3b7f      	subs	r3, #127	@ 0x7f
 8000aae:	0029      	movs	r1, r5
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	464b      	mov	r3, r9
 8000ab4:	4071      	eors	r1, r6
 8000ab6:	b2c9      	uxtb	r1, r1
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d900      	bls.n	8000abe <__aeabi_fdiv+0x62>
 8000abc:	e0b5      	b.n	8000c2a <__aeabi_fdiv+0x1ce>
 8000abe:	4a74      	ldr	r2, [pc, #464]	@ (8000c90 <__aeabi_fdiv+0x234>)
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	58d3      	ldr	r3, [r2, r3]
 8000ac4:	469f      	mov	pc, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d13f      	bne.n	8000b4c <__aeabi_fdiv+0xf0>
 8000acc:	3fff      	subs	r7, #255	@ 0xff
 8000ace:	3302      	adds	r3, #2
 8000ad0:	e003      	b.n	8000ada <__aeabi_fdiv+0x7e>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d12d      	bne.n	8000b34 <__aeabi_fdiv+0xd8>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	0029      	movs	r1, r5
 8000adc:	464a      	mov	r2, r9
 8000ade:	4071      	eors	r1, r6
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	2a0e      	cmp	r2, #14
 8000ae6:	d838      	bhi.n	8000b5a <__aeabi_fdiv+0xfe>
 8000ae8:	486a      	ldr	r0, [pc, #424]	@ (8000c94 <__aeabi_fdiv+0x238>)
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	5882      	ldr	r2, [r0, r2]
 8000aee:	4697      	mov	pc, r2
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d113      	bne.n	8000b1c <__aeabi_fdiv+0xc0>
 8000af4:	2304      	movs	r3, #4
 8000af6:	4699      	mov	r9, r3
 8000af8:	3b03      	subs	r3, #3
 8000afa:	2700      	movs	r7, #0
 8000afc:	469a      	mov	sl, r3
 8000afe:	e7c4      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d105      	bne.n	8000b10 <__aeabi_fdiv+0xb4>
 8000b04:	2308      	movs	r3, #8
 8000b06:	4699      	mov	r9, r3
 8000b08:	3b06      	subs	r3, #6
 8000b0a:	27ff      	movs	r7, #255	@ 0xff
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	e7bc      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	27ff      	movs	r7, #255	@ 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e7b6      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f002 fc79 	bl	8003414 <__clzsi2>
 8000b22:	2776      	movs	r7, #118	@ 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409c      	lsls	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a3f      	subs	r7, r7, r0
 8000b32:	e7aa      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b34:	4640      	mov	r0, r8
 8000b36:	f002 fc6d 	bl	8003414 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	2376      	movs	r3, #118	@ 0x76
 8000b42:	425b      	negs	r3, r3
 8000b44:	1a1b      	subs	r3, r3, r0
 8000b46:	4690      	mov	r8, r2
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7b0      	b.n	8000aae <__aeabi_fdiv+0x52>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	464a      	mov	r2, r9
 8000b50:	431a      	orrs	r2, r3
 8000b52:	4691      	mov	r9, r2
 8000b54:	2003      	movs	r0, #3
 8000b56:	33fc      	adds	r3, #252	@ 0xfc
 8000b58:	e7a9      	b.n	8000aae <__aeabi_fdiv+0x52>
 8000b5a:	000d      	movs	r5, r1
 8000b5c:	20ff      	movs	r0, #255	@ 0xff
 8000b5e:	2200      	movs	r2, #0
 8000b60:	05c0      	lsls	r0, r0, #23
 8000b62:	07ed      	lsls	r5, r5, #31
 8000b64:	4310      	orrs	r0, r2
 8000b66:	4328      	orrs	r0, r5
 8000b68:	bce0      	pop	{r5, r6, r7}
 8000b6a:	46ba      	mov	sl, r7
 8000b6c:	46b1      	mov	r9, r6
 8000b6e:	46a8      	mov	r8, r5
 8000b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b72:	000d      	movs	r5, r1
 8000b74:	2000      	movs	r0, #0
 8000b76:	2200      	movs	r2, #0
 8000b78:	e7f2      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d0ed      	beq.n	8000b5c <__aeabi_fdiv+0x100>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d033      	beq.n	8000bec <__aeabi_fdiv+0x190>
 8000b84:	46a0      	mov	r8, r4
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d105      	bne.n	8000b96 <__aeabi_fdiv+0x13a>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e7e7      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000b90:	0035      	movs	r5, r6
 8000b92:	2803      	cmp	r0, #3
 8000b94:	d07a      	beq.n	8000c8c <__aeabi_fdiv+0x230>
 8000b96:	003b      	movs	r3, r7
 8000b98:	337f      	adds	r3, #127	@ 0x7f
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dd2d      	ble.n	8000bfa <__aeabi_fdiv+0x19e>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	0752      	lsls	r2, r2, #29
 8000ba2:	d007      	beq.n	8000bb4 <__aeabi_fdiv+0x158>
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	4641      	mov	r1, r8
 8000ba8:	400a      	ands	r2, r1
 8000baa:	2a04      	cmp	r2, #4
 8000bac:	d002      	beq.n	8000bb4 <__aeabi_fdiv+0x158>
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	44e0      	add	r8, ip
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	d505      	bpl.n	8000bc6 <__aeabi_fdiv+0x16a>
 8000bba:	4642      	mov	r2, r8
 8000bbc:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <__aeabi_fdiv+0x23c>)
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	4690      	mov	r8, r2
 8000bc4:	3380      	adds	r3, #128	@ 0x80
 8000bc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bc8:	dcc8      	bgt.n	8000b5c <__aeabi_fdiv+0x100>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	0192      	lsls	r2, r2, #6
 8000bce:	0a52      	lsrs	r2, r2, #9
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	e7c5      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	03d2      	lsls	r2, r2, #15
 8000bdc:	e7c0      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	03d2      	lsls	r2, r2, #15
 8000be2:	4214      	tst	r4, r2
 8000be4:	d002      	beq.n	8000bec <__aeabi_fdiv+0x190>
 8000be6:	4643      	mov	r3, r8
 8000be8:	4213      	tst	r3, r2
 8000bea:	d049      	beq.n	8000c80 <__aeabi_fdiv+0x224>
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	03d2      	lsls	r2, r2, #15
 8000bf0:	4322      	orrs	r2, r4
 8000bf2:	0252      	lsls	r2, r2, #9
 8000bf4:	20ff      	movs	r0, #255	@ 0xff
 8000bf6:	0a52      	lsrs	r2, r2, #9
 8000bf8:	e7b2      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b1b      	cmp	r3, #27
 8000c00:	dcc3      	bgt.n	8000b8a <__aeabi_fdiv+0x12e>
 8000c02:	4642      	mov	r2, r8
 8000c04:	40da      	lsrs	r2, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	379e      	adds	r7, #158	@ 0x9e
 8000c0a:	40bb      	lsls	r3, r7
 8000c0c:	1e59      	subs	r1, r3, #1
 8000c0e:	418b      	sbcs	r3, r1
 8000c10:	431a      	orrs	r2, r3
 8000c12:	0753      	lsls	r3, r2, #29
 8000c14:	d004      	beq.n	8000c20 <__aeabi_fdiv+0x1c4>
 8000c16:	230f      	movs	r3, #15
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fdiv+0x1c4>
 8000c1e:	3204      	adds	r2, #4
 8000c20:	0153      	lsls	r3, r2, #5
 8000c22:	d529      	bpl.n	8000c78 <__aeabi_fdiv+0x21c>
 8000c24:	2001      	movs	r0, #1
 8000c26:	2200      	movs	r2, #0
 8000c28:	e79a      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	0163      	lsls	r3, r4, #5
 8000c2e:	0155      	lsls	r5, r2, #5
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d215      	bcs.n	8000c60 <__aeabi_fdiv+0x204>
 8000c34:	201b      	movs	r0, #27
 8000c36:	2200      	movs	r2, #0
 8000c38:	3f01      	subs	r7, #1
 8000c3a:	2601      	movs	r6, #1
 8000c3c:	001c      	movs	r4, r3
 8000c3e:	0052      	lsls	r2, r2, #1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	db01      	blt.n	8000c4a <__aeabi_fdiv+0x1ee>
 8000c46:	429d      	cmp	r5, r3
 8000c48:	d801      	bhi.n	8000c4e <__aeabi_fdiv+0x1f2>
 8000c4a:	1b5b      	subs	r3, r3, r5
 8000c4c:	4332      	orrs	r2, r6
 8000c4e:	3801      	subs	r0, #1
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d1f3      	bne.n	8000c3c <__aeabi_fdiv+0x1e0>
 8000c54:	1e58      	subs	r0, r3, #1
 8000c56:	4183      	sbcs	r3, r0
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	000d      	movs	r5, r1
 8000c5e:	e79a      	b.n	8000b96 <__aeabi_fdiv+0x13a>
 8000c60:	201a      	movs	r0, #26
 8000c62:	2201      	movs	r2, #1
 8000c64:	1b5b      	subs	r3, r3, r5
 8000c66:	e7e8      	b.n	8000c3a <__aeabi_fdiv+0x1de>
 8000c68:	3b02      	subs	r3, #2
 8000c6a:	425a      	negs	r2, r3
 8000c6c:	4153      	adcs	r3, r2
 8000c6e:	425b      	negs	r3, r3
 8000c70:	0035      	movs	r5, r6
 8000c72:	2200      	movs	r2, #0
 8000c74:	b2d8      	uxtb	r0, r3
 8000c76:	e773      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c78:	0192      	lsls	r2, r2, #6
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	0a52      	lsrs	r2, r2, #9
 8000c7e:	e76f      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c80:	431a      	orrs	r2, r3
 8000c82:	0252      	lsls	r2, r2, #9
 8000c84:	0035      	movs	r5, r6
 8000c86:	20ff      	movs	r0, #255	@ 0xff
 8000c88:	0a52      	lsrs	r2, r2, #9
 8000c8a:	e769      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	e7ad      	b.n	8000bec <__aeabi_fdiv+0x190>
 8000c90:	08019420 	.word	0x08019420
 8000c94:	08019460 	.word	0x08019460
 8000c98:	f7ffffff 	.word	0xf7ffffff

08000c9c <__eqsf2>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	0042      	lsls	r2, r0, #1
 8000ca0:	024e      	lsls	r6, r1, #9
 8000ca2:	004c      	lsls	r4, r1, #1
 8000ca4:	0245      	lsls	r5, r0, #9
 8000ca6:	0a6d      	lsrs	r5, r5, #9
 8000ca8:	0e12      	lsrs	r2, r2, #24
 8000caa:	0fc3      	lsrs	r3, r0, #31
 8000cac:	0a76      	lsrs	r6, r6, #9
 8000cae:	0e24      	lsrs	r4, r4, #24
 8000cb0:	0fc9      	lsrs	r1, r1, #31
 8000cb2:	2aff      	cmp	r2, #255	@ 0xff
 8000cb4:	d010      	beq.n	8000cd8 <__eqsf2+0x3c>
 8000cb6:	2cff      	cmp	r4, #255	@ 0xff
 8000cb8:	d00c      	beq.n	8000cd4 <__eqsf2+0x38>
 8000cba:	2001      	movs	r0, #1
 8000cbc:	42a2      	cmp	r2, r4
 8000cbe:	d10a      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cc0:	42b5      	cmp	r5, r6
 8000cc2:	d108      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d00f      	beq.n	8000ce8 <__eqsf2+0x4c>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d104      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000ccc:	0028      	movs	r0, r5
 8000cce:	1e43      	subs	r3, r0, #1
 8000cd0:	4198      	sbcs	r0, r3
 8000cd2:	e000      	b.n	8000cd6 <__eqsf2+0x3a>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	2001      	movs	r0, #1
 8000cda:	2cff      	cmp	r4, #255	@ 0xff
 8000cdc:	d1fb      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cde:	4335      	orrs	r5, r6
 8000ce0:	d1f9      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000ce2:	404b      	eors	r3, r1
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	e7f6      	b.n	8000cd6 <__eqsf2+0x3a>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7f4      	b.n	8000cd6 <__eqsf2+0x3a>

08000cec <__gesf2>:
 8000cec:	b530      	push	{r4, r5, lr}
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0244      	lsls	r4, r0, #9
 8000cf2:	024d      	lsls	r5, r1, #9
 8000cf4:	0fc3      	lsrs	r3, r0, #31
 8000cf6:	0048      	lsls	r0, r1, #1
 8000cf8:	0a64      	lsrs	r4, r4, #9
 8000cfa:	0e12      	lsrs	r2, r2, #24
 8000cfc:	0a6d      	lsrs	r5, r5, #9
 8000cfe:	0e00      	lsrs	r0, r0, #24
 8000d00:	0fc9      	lsrs	r1, r1, #31
 8000d02:	2aff      	cmp	r2, #255	@ 0xff
 8000d04:	d019      	beq.n	8000d3a <__gesf2+0x4e>
 8000d06:	28ff      	cmp	r0, #255	@ 0xff
 8000d08:	d00b      	beq.n	8000d22 <__gesf2+0x36>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d11e      	bne.n	8000d4c <__gesf2+0x60>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d10b      	bne.n	8000d2a <__gesf2+0x3e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d027      	beq.n	8000d66 <__gesf2+0x7a>
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d134      	bne.n	8000d84 <__gesf2+0x98>
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	d02f      	beq.n	8000d7e <__gesf2+0x92>
 8000d1e:	0008      	movs	r0, r1
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d128      	bne.n	8000d78 <__gesf2+0x8c>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d101      	bne.n	8000d2e <__gesf2+0x42>
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d0f5      	beq.n	8000d1a <__gesf2+0x2e>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d107      	bne.n	8000d42 <__gesf2+0x56>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d023      	beq.n	8000d7e <__gesf2+0x92>
 8000d36:	0018      	movs	r0, r3
 8000d38:	e7f2      	b.n	8000d20 <__gesf2+0x34>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d11c      	bne.n	8000d78 <__gesf2+0x8c>
 8000d3e:	28ff      	cmp	r0, #255	@ 0xff
 8000d40:	d014      	beq.n	8000d6c <__gesf2+0x80>
 8000d42:	1e58      	subs	r0, r3, #1
 8000d44:	2302      	movs	r3, #2
 8000d46:	4018      	ands	r0, r3
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7e9      	b.n	8000d20 <__gesf2+0x34>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d0f8      	beq.n	8000d42 <__gesf2+0x56>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d1f6      	bne.n	8000d42 <__gesf2+0x56>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	dcf4      	bgt.n	8000d42 <__gesf2+0x56>
 8000d58:	dbeb      	blt.n	8000d32 <__gesf2+0x46>
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	d8f1      	bhi.n	8000d42 <__gesf2+0x56>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	42ac      	cmp	r4, r5
 8000d62:	d2dd      	bcs.n	8000d20 <__gesf2+0x34>
 8000d64:	e7e5      	b.n	8000d32 <__gesf2+0x46>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d0da      	beq.n	8000d20 <__gesf2+0x34>
 8000d6a:	e7ea      	b.n	8000d42 <__gesf2+0x56>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d103      	bne.n	8000d78 <__gesf2+0x8c>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d1e6      	bne.n	8000d42 <__gesf2+0x56>
 8000d74:	2000      	movs	r0, #0
 8000d76:	e7d3      	b.n	8000d20 <__gesf2+0x34>
 8000d78:	2002      	movs	r0, #2
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	e7d0      	b.n	8000d20 <__gesf2+0x34>
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4240      	negs	r0, r0
 8000d82:	e7cd      	b.n	8000d20 <__gesf2+0x34>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d0e8      	beq.n	8000d5a <__gesf2+0x6e>
 8000d88:	e7db      	b.n	8000d42 <__gesf2+0x56>
 8000d8a:	46c0      	nop			@ (mov r8, r8)

08000d8c <__lesf2>:
 8000d8c:	b530      	push	{r4, r5, lr}
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0244      	lsls	r4, r0, #9
 8000d92:	024d      	lsls	r5, r1, #9
 8000d94:	0fc3      	lsrs	r3, r0, #31
 8000d96:	0048      	lsls	r0, r1, #1
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0e12      	lsrs	r2, r2, #24
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	0e00      	lsrs	r0, r0, #24
 8000da0:	0fc9      	lsrs	r1, r1, #31
 8000da2:	2aff      	cmp	r2, #255	@ 0xff
 8000da4:	d01a      	beq.n	8000ddc <__lesf2+0x50>
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d00e      	beq.n	8000dc8 <__lesf2+0x3c>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d11e      	bne.n	8000dec <__lesf2+0x60>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d10e      	bne.n	8000dd0 <__lesf2+0x44>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d02a      	beq.n	8000e0c <__lesf2+0x80>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d00c      	beq.n	8000dd4 <__lesf2+0x48>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d01d      	beq.n	8000dfa <__lesf2+0x6e>
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	4018      	ands	r0, r3
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	e010      	b.n	8000dea <__lesf2+0x5e>
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d10d      	bne.n	8000de8 <__lesf2+0x5c>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d120      	bne.n	8000e12 <__lesf2+0x86>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d11e      	bne.n	8000e12 <__lesf2+0x86>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d023      	beq.n	8000e20 <__lesf2+0x94>
 8000dd8:	0008      	movs	r0, r1
 8000dda:	e006      	b.n	8000dea <__lesf2+0x5e>
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d103      	bne.n	8000de8 <__lesf2+0x5c>
 8000de0:	28ff      	cmp	r0, #255	@ 0xff
 8000de2:	d1ec      	bne.n	8000dbe <__lesf2+0x32>
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	d017      	beq.n	8000e18 <__lesf2+0x8c>
 8000de8:	2002      	movs	r0, #2
 8000dea:	bd30      	pop	{r4, r5, pc}
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d0e6      	beq.n	8000dbe <__lesf2+0x32>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d1e4      	bne.n	8000dbe <__lesf2+0x32>
 8000df4:	4282      	cmp	r2, r0
 8000df6:	dce2      	bgt.n	8000dbe <__lesf2+0x32>
 8000df8:	db04      	blt.n	8000e04 <__lesf2+0x78>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d8df      	bhi.n	8000dbe <__lesf2+0x32>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	42ac      	cmp	r4, r5
 8000e02:	d2f2      	bcs.n	8000dea <__lesf2+0x5e>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00b      	beq.n	8000e20 <__lesf2+0x94>
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e7ee      	b.n	8000dea <__lesf2+0x5e>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d0ec      	beq.n	8000dea <__lesf2+0x5e>
 8000e10:	e7d5      	b.n	8000dbe <__lesf2+0x32>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d1d3      	bne.n	8000dbe <__lesf2+0x32>
 8000e16:	e7f5      	b.n	8000e04 <__lesf2+0x78>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d0e5      	beq.n	8000dea <__lesf2+0x5e>
 8000e1e:	e7ce      	b.n	8000dbe <__lesf2+0x32>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7e1      	b.n	8000dea <__lesf2+0x5e>
 8000e26:	46c0      	nop			@ (mov r8, r8)

08000e28 <__aeabi_fmul>:
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	464f      	mov	r7, r9
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	0243      	lsls	r3, r0, #9
 8000e32:	0a5b      	lsrs	r3, r3, #9
 8000e34:	0045      	lsls	r5, r0, #1
 8000e36:	b5c0      	push	{r6, r7, lr}
 8000e38:	4699      	mov	r9, r3
 8000e3a:	1c0f      	adds	r7, r1, #0
 8000e3c:	0e2d      	lsrs	r5, r5, #24
 8000e3e:	0fc6      	lsrs	r6, r0, #31
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fmul+0x1e>
 8000e44:	e088      	b.n	8000f58 <__aeabi_fmul+0x130>
 8000e46:	2dff      	cmp	r5, #255	@ 0xff
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fmul+0x24>
 8000e4a:	e08d      	b.n	8000f68 <__aeabi_fmul+0x140>
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	04d2      	lsls	r2, r2, #19
 8000e52:	431a      	orrs	r2, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	4691      	mov	r9, r2
 8000e58:	4698      	mov	r8, r3
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	3d7f      	subs	r5, #127	@ 0x7f
 8000e5e:	027c      	lsls	r4, r7, #9
 8000e60:	007b      	lsls	r3, r7, #1
 8000e62:	0a64      	lsrs	r4, r4, #9
 8000e64:	0e1b      	lsrs	r3, r3, #24
 8000e66:	0fff      	lsrs	r7, r7, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d068      	beq.n	8000f3e <__aeabi_fmul+0x116>
 8000e6c:	2bff      	cmp	r3, #255	@ 0xff
 8000e6e:	d021      	beq.n	8000eb4 <__aeabi_fmul+0x8c>
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	00e4      	lsls	r4, r4, #3
 8000e74:	04d2      	lsls	r2, r2, #19
 8000e76:	4314      	orrs	r4, r2
 8000e78:	4642      	mov	r2, r8
 8000e7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000e7c:	195b      	adds	r3, r3, r5
 8000e7e:	2100      	movs	r1, #0
 8000e80:	1c5d      	adds	r5, r3, #1
 8000e82:	2a0a      	cmp	r2, #10
 8000e84:	dc2e      	bgt.n	8000ee4 <__aeabi_fmul+0xbc>
 8000e86:	407e      	eors	r6, r7
 8000e88:	4642      	mov	r2, r8
 8000e8a:	2a02      	cmp	r2, #2
 8000e8c:	dc23      	bgt.n	8000ed6 <__aeabi_fmul+0xae>
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	2a01      	cmp	r2, #1
 8000e92:	d900      	bls.n	8000e96 <__aeabi_fmul+0x6e>
 8000e94:	e0bd      	b.n	8001012 <__aeabi_fmul+0x1ea>
 8000e96:	2902      	cmp	r1, #2
 8000e98:	d06e      	beq.n	8000f78 <__aeabi_fmul+0x150>
 8000e9a:	2901      	cmp	r1, #1
 8000e9c:	d12c      	bne.n	8000ef8 <__aeabi_fmul+0xd0>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	05c0      	lsls	r0, r0, #23
 8000ea4:	07f6      	lsls	r6, r6, #31
 8000ea6:	4310      	orrs	r0, r2
 8000ea8:	4330      	orrs	r0, r6
 8000eaa:	bce0      	pop	{r5, r6, r7}
 8000eac:	46ba      	mov	sl, r7
 8000eae:	46b1      	mov	r9, r6
 8000eb0:	46a8      	mov	r8, r5
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	002b      	movs	r3, r5
 8000eb6:	33ff      	adds	r3, #255	@ 0xff
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d065      	beq.n	8000f88 <__aeabi_fmul+0x160>
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	4311      	orrs	r1, r2
 8000ec2:	0032      	movs	r2, r6
 8000ec4:	3501      	adds	r5, #1
 8000ec6:	4688      	mov	r8, r1
 8000ec8:	407a      	eors	r2, r7
 8000eca:	35ff      	adds	r5, #255	@ 0xff
 8000ecc:	290a      	cmp	r1, #10
 8000ece:	dd00      	ble.n	8000ed2 <__aeabi_fmul+0xaa>
 8000ed0:	e0d8      	b.n	8001084 <__aeabi_fmul+0x25c>
 8000ed2:	0016      	movs	r6, r2
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4082      	lsls	r2, r0
 8000edc:	20a6      	movs	r0, #166	@ 0xa6
 8000ede:	00c0      	lsls	r0, r0, #3
 8000ee0:	4202      	tst	r2, r0
 8000ee2:	d020      	beq.n	8000f26 <__aeabi_fmul+0xfe>
 8000ee4:	4653      	mov	r3, sl
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d046      	beq.n	8000f78 <__aeabi_fmul+0x150>
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fmul+0xc8>
 8000eee:	e0bb      	b.n	8001068 <__aeabi_fmul+0x240>
 8000ef0:	4651      	mov	r1, sl
 8000ef2:	464c      	mov	r4, r9
 8000ef4:	2901      	cmp	r1, #1
 8000ef6:	d0d2      	beq.n	8000e9e <__aeabi_fmul+0x76>
 8000ef8:	002b      	movs	r3, r5
 8000efa:	337f      	adds	r3, #127	@ 0x7f
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd70      	ble.n	8000fe2 <__aeabi_fmul+0x1ba>
 8000f00:	0762      	lsls	r2, r4, #29
 8000f02:	d004      	beq.n	8000f0e <__aeabi_fmul+0xe6>
 8000f04:	220f      	movs	r2, #15
 8000f06:	4022      	ands	r2, r4
 8000f08:	2a04      	cmp	r2, #4
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fmul+0xe6>
 8000f0c:	3404      	adds	r4, #4
 8000f0e:	0122      	lsls	r2, r4, #4
 8000f10:	d503      	bpl.n	8000f1a <__aeabi_fmul+0xf2>
 8000f12:	4b63      	ldr	r3, [pc, #396]	@ (80010a0 <__aeabi_fmul+0x278>)
 8000f14:	401c      	ands	r4, r3
 8000f16:	002b      	movs	r3, r5
 8000f18:	3380      	adds	r3, #128	@ 0x80
 8000f1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f1c:	dc2c      	bgt.n	8000f78 <__aeabi_fmul+0x150>
 8000f1e:	01a2      	lsls	r2, r4, #6
 8000f20:	0a52      	lsrs	r2, r2, #9
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	e7bd      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f26:	2090      	movs	r0, #144	@ 0x90
 8000f28:	0080      	lsls	r0, r0, #2
 8000f2a:	4202      	tst	r2, r0
 8000f2c:	d127      	bne.n	8000f7e <__aeabi_fmul+0x156>
 8000f2e:	38b9      	subs	r0, #185	@ 0xb9
 8000f30:	38ff      	subs	r0, #255	@ 0xff
 8000f32:	4210      	tst	r0, r2
 8000f34:	d06d      	beq.n	8001012 <__aeabi_fmul+0x1ea>
 8000f36:	003e      	movs	r6, r7
 8000f38:	46a1      	mov	r9, r4
 8000f3a:	468a      	mov	sl, r1
 8000f3c:	e7d2      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f3e:	2c00      	cmp	r4, #0
 8000f40:	d141      	bne.n	8000fc6 <__aeabi_fmul+0x19e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	4642      	mov	r2, r8
 8000f46:	431a      	orrs	r2, r3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	002b      	movs	r3, r5
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	2101      	movs	r1, #1
 8000f50:	1c5d      	adds	r5, r3, #1
 8000f52:	2a0a      	cmp	r2, #10
 8000f54:	dd97      	ble.n	8000e86 <__aeabi_fmul+0x5e>
 8000f56:	e7c5      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d126      	bne.n	8000faa <__aeabi_fmul+0x182>
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	4698      	mov	r8, r3
 8000f60:	3b03      	subs	r3, #3
 8000f62:	2500      	movs	r5, #0
 8000f64:	469a      	mov	sl, r3
 8000f66:	e77a      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d118      	bne.n	8000f9e <__aeabi_fmul+0x176>
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	4698      	mov	r8, r3
 8000f70:	3b06      	subs	r3, #6
 8000f72:	25ff      	movs	r5, #255	@ 0xff
 8000f74:	469a      	mov	sl, r3
 8000f76:	e772      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000f78:	20ff      	movs	r0, #255	@ 0xff
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	e791      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	2600      	movs	r6, #0
 8000f82:	20ff      	movs	r0, #255	@ 0xff
 8000f84:	03d2      	lsls	r2, r2, #15
 8000f86:	e78c      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f88:	4641      	mov	r1, r8
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	4688      	mov	r8, r1
 8000f92:	35ff      	adds	r5, #255	@ 0xff
 8000f94:	290a      	cmp	r1, #10
 8000f96:	dca5      	bgt.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f98:	2102      	movs	r1, #2
 8000f9a:	407e      	eors	r6, r7
 8000f9c:	e774      	b.n	8000e88 <__aeabi_fmul+0x60>
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	3b09      	subs	r3, #9
 8000fa4:	25ff      	movs	r5, #255	@ 0xff
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	e759      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fa32 	bl	8003414 <__clzsi2>
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	1f43      	subs	r3, r0, #5
 8000fb4:	2576      	movs	r5, #118	@ 0x76
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	426d      	negs	r5, r5
 8000fbc:	4691      	mov	r9, r2
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	1a2d      	subs	r5, r5, r0
 8000fc4:	e74b      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f002 fa24 	bl	8003414 <__clzsi2>
 8000fcc:	4642      	mov	r2, r8
 8000fce:	1f43      	subs	r3, r0, #5
 8000fd0:	409c      	lsls	r4, r3
 8000fd2:	1a2b      	subs	r3, r5, r0
 8000fd4:	3b76      	subs	r3, #118	@ 0x76
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	1c5d      	adds	r5, r3, #1
 8000fda:	2a0a      	cmp	r2, #10
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_fmul+0x1b8>
 8000fde:	e752      	b.n	8000e86 <__aeabi_fmul+0x5e>
 8000fe0:	e780      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b1b      	cmp	r3, #27
 8000fe8:	dd00      	ble.n	8000fec <__aeabi_fmul+0x1c4>
 8000fea:	e758      	b.n	8000e9e <__aeabi_fmul+0x76>
 8000fec:	359e      	adds	r5, #158	@ 0x9e
 8000fee:	0022      	movs	r2, r4
 8000ff0:	40ac      	lsls	r4, r5
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	1e63      	subs	r3, r4, #1
 8000ff6:	419c      	sbcs	r4, r3
 8000ff8:	4322      	orrs	r2, r4
 8000ffa:	0753      	lsls	r3, r2, #29
 8000ffc:	d004      	beq.n	8001008 <__aeabi_fmul+0x1e0>
 8000ffe:	230f      	movs	r3, #15
 8001000:	4013      	ands	r3, r2
 8001002:	2b04      	cmp	r3, #4
 8001004:	d000      	beq.n	8001008 <__aeabi_fmul+0x1e0>
 8001006:	3204      	adds	r2, #4
 8001008:	0153      	lsls	r3, r2, #5
 800100a:	d537      	bpl.n	800107c <__aeabi_fmul+0x254>
 800100c:	2001      	movs	r0, #1
 800100e:	2200      	movs	r2, #0
 8001010:	e747      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001012:	0c21      	lsrs	r1, r4, #16
 8001014:	464a      	mov	r2, r9
 8001016:	0424      	lsls	r4, r4, #16
 8001018:	0c24      	lsrs	r4, r4, #16
 800101a:	0027      	movs	r7, r4
 800101c:	0c10      	lsrs	r0, r2, #16
 800101e:	0412      	lsls	r2, r2, #16
 8001020:	0c12      	lsrs	r2, r2, #16
 8001022:	4344      	muls	r4, r0
 8001024:	4357      	muls	r7, r2
 8001026:	4348      	muls	r0, r1
 8001028:	4351      	muls	r1, r2
 800102a:	0c3a      	lsrs	r2, r7, #16
 800102c:	1909      	adds	r1, r1, r4
 800102e:	1852      	adds	r2, r2, r1
 8001030:	4294      	cmp	r4, r2
 8001032:	d903      	bls.n	800103c <__aeabi_fmul+0x214>
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	0249      	lsls	r1, r1, #9
 8001038:	468c      	mov	ip, r1
 800103a:	4460      	add	r0, ip
 800103c:	043f      	lsls	r7, r7, #16
 800103e:	0411      	lsls	r1, r2, #16
 8001040:	0c3f      	lsrs	r7, r7, #16
 8001042:	19c9      	adds	r1, r1, r7
 8001044:	018c      	lsls	r4, r1, #6
 8001046:	1e67      	subs	r7, r4, #1
 8001048:	41bc      	sbcs	r4, r7
 800104a:	0c12      	lsrs	r2, r2, #16
 800104c:	0e89      	lsrs	r1, r1, #26
 800104e:	1812      	adds	r2, r2, r0
 8001050:	430c      	orrs	r4, r1
 8001052:	0192      	lsls	r2, r2, #6
 8001054:	4314      	orrs	r4, r2
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	d50e      	bpl.n	8001078 <__aeabi_fmul+0x250>
 800105a:	2301      	movs	r3, #1
 800105c:	0862      	lsrs	r2, r4, #1
 800105e:	401c      	ands	r4, r3
 8001060:	4314      	orrs	r4, r2
 8001062:	e749      	b.n	8000ef8 <__aeabi_fmul+0xd0>
 8001064:	003e      	movs	r6, r7
 8001066:	46a1      	mov	r9, r4
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	464b      	mov	r3, r9
 800106c:	03d2      	lsls	r2, r2, #15
 800106e:	431a      	orrs	r2, r3
 8001070:	0252      	lsls	r2, r2, #9
 8001072:	20ff      	movs	r0, #255	@ 0xff
 8001074:	0a52      	lsrs	r2, r2, #9
 8001076:	e714      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001078:	001d      	movs	r5, r3
 800107a:	e73d      	b.n	8000ef8 <__aeabi_fmul+0xd0>
 800107c:	0192      	lsls	r2, r2, #6
 800107e:	2000      	movs	r0, #0
 8001080:	0a52      	lsrs	r2, r2, #9
 8001082:	e70e      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001084:	290f      	cmp	r1, #15
 8001086:	d1ed      	bne.n	8001064 <__aeabi_fmul+0x23c>
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	464b      	mov	r3, r9
 800108c:	03d2      	lsls	r2, r2, #15
 800108e:	4213      	tst	r3, r2
 8001090:	d0ea      	beq.n	8001068 <__aeabi_fmul+0x240>
 8001092:	4214      	tst	r4, r2
 8001094:	d1e8      	bne.n	8001068 <__aeabi_fmul+0x240>
 8001096:	003e      	movs	r6, r7
 8001098:	20ff      	movs	r0, #255	@ 0xff
 800109a:	4322      	orrs	r2, r4
 800109c:	e701      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	f7ffffff 	.word	0xf7ffffff

080010a4 <__aeabi_fsub>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	4647      	mov	r7, r8
 80010a8:	46ce      	mov	lr, r9
 80010aa:	024e      	lsls	r6, r1, #9
 80010ac:	0243      	lsls	r3, r0, #9
 80010ae:	0045      	lsls	r5, r0, #1
 80010b0:	0a72      	lsrs	r2, r6, #9
 80010b2:	0fc4      	lsrs	r4, r0, #31
 80010b4:	0048      	lsls	r0, r1, #1
 80010b6:	b580      	push	{r7, lr}
 80010b8:	4694      	mov	ip, r2
 80010ba:	0a5f      	lsrs	r7, r3, #9
 80010bc:	0e2d      	lsrs	r5, r5, #24
 80010be:	099b      	lsrs	r3, r3, #6
 80010c0:	0e00      	lsrs	r0, r0, #24
 80010c2:	0fc9      	lsrs	r1, r1, #31
 80010c4:	09b6      	lsrs	r6, r6, #6
 80010c6:	28ff      	cmp	r0, #255	@ 0xff
 80010c8:	d024      	beq.n	8001114 <__aeabi_fsub+0x70>
 80010ca:	2201      	movs	r2, #1
 80010cc:	4051      	eors	r1, r2
 80010ce:	1a2a      	subs	r2, r5, r0
 80010d0:	428c      	cmp	r4, r1
 80010d2:	d00f      	beq.n	80010f4 <__aeabi_fsub+0x50>
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_fsub+0x36>
 80010d8:	e16a      	b.n	80013b0 <__aeabi_fsub+0x30c>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d135      	bne.n	800114a <__aeabi_fsub+0xa6>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x40>
 80010e2:	e0a2      	b.n	800122a <__aeabi_fsub+0x186>
 80010e4:	1e51      	subs	r1, r2, #1
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x48>
 80010ea:	e124      	b.n	8001336 <__aeabi_fsub+0x292>
 80010ec:	2aff      	cmp	r2, #255	@ 0xff
 80010ee:	d021      	beq.n	8001134 <__aeabi_fsub+0x90>
 80010f0:	000a      	movs	r2, r1
 80010f2:	e02f      	b.n	8001154 <__aeabi_fsub+0xb0>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_fsub+0x56>
 80010f8:	e167      	b.n	80013ca <__aeabi_fsub+0x326>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d05e      	beq.n	80011bc <__aeabi_fsub+0x118>
 80010fe:	2dff      	cmp	r5, #255	@ 0xff
 8001100:	d018      	beq.n	8001134 <__aeabi_fsub+0x90>
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	04c9      	lsls	r1, r1, #19
 8001106:	430e      	orrs	r6, r1
 8001108:	2a1b      	cmp	r2, #27
 800110a:	dc00      	bgt.n	800110e <__aeabi_fsub+0x6a>
 800110c:	e076      	b.n	80011fc <__aeabi_fsub+0x158>
 800110e:	002a      	movs	r2, r5
 8001110:	3301      	adds	r3, #1
 8001112:	e032      	b.n	800117a <__aeabi_fsub+0xd6>
 8001114:	002a      	movs	r2, r5
 8001116:	3aff      	subs	r2, #255	@ 0xff
 8001118:	4691      	mov	r9, r2
 800111a:	2e00      	cmp	r6, #0
 800111c:	d042      	beq.n	80011a4 <__aeabi_fsub+0x100>
 800111e:	428c      	cmp	r4, r1
 8001120:	d055      	beq.n	80011ce <__aeabi_fsub+0x12a>
 8001122:	464a      	mov	r2, r9
 8001124:	2a00      	cmp	r2, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x86>
 8001128:	e09c      	b.n	8001264 <__aeabi_fsub+0x1c0>
 800112a:	2d00      	cmp	r5, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x8c>
 800112e:	e077      	b.n	8001220 <__aeabi_fsub+0x17c>
 8001130:	000c      	movs	r4, r1
 8001132:	0033      	movs	r3, r6
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x98>
 800113a:	e06e      	b.n	800121a <__aeabi_fsub+0x176>
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	03d2      	lsls	r2, r2, #15
 8001140:	4313      	orrs	r3, r2
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	20ff      	movs	r0, #255	@ 0xff
 8001146:	0a5b      	lsrs	r3, r3, #9
 8001148:	e024      	b.n	8001194 <__aeabi_fsub+0xf0>
 800114a:	2dff      	cmp	r5, #255	@ 0xff
 800114c:	d0f2      	beq.n	8001134 <__aeabi_fsub+0x90>
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	04c9      	lsls	r1, r1, #19
 8001152:	430e      	orrs	r6, r1
 8001154:	2101      	movs	r1, #1
 8001156:	2a1b      	cmp	r2, #27
 8001158:	dc08      	bgt.n	800116c <__aeabi_fsub+0xc8>
 800115a:	0031      	movs	r1, r6
 800115c:	2020      	movs	r0, #32
 800115e:	40d1      	lsrs	r1, r2
 8001160:	1a82      	subs	r2, r0, r2
 8001162:	4096      	lsls	r6, r2
 8001164:	0032      	movs	r2, r6
 8001166:	1e50      	subs	r0, r2, #1
 8001168:	4182      	sbcs	r2, r0
 800116a:	4311      	orrs	r1, r2
 800116c:	1a5b      	subs	r3, r3, r1
 800116e:	015a      	lsls	r2, r3, #5
 8001170:	d460      	bmi.n	8001234 <__aeabi_fsub+0x190>
 8001172:	2107      	movs	r1, #7
 8001174:	002a      	movs	r2, r5
 8001176:	4019      	ands	r1, r3
 8001178:	d057      	beq.n	800122a <__aeabi_fsub+0x186>
 800117a:	210f      	movs	r1, #15
 800117c:	4019      	ands	r1, r3
 800117e:	2904      	cmp	r1, #4
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0xe0>
 8001182:	3304      	adds	r3, #4
 8001184:	0159      	lsls	r1, r3, #5
 8001186:	d550      	bpl.n	800122a <__aeabi_fsub+0x186>
 8001188:	1c50      	adds	r0, r2, #1
 800118a:	2afe      	cmp	r2, #254	@ 0xfe
 800118c:	d045      	beq.n	800121a <__aeabi_fsub+0x176>
 800118e:	019b      	lsls	r3, r3, #6
 8001190:	b2c0      	uxtb	r0, r0
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	05c0      	lsls	r0, r0, #23
 8001196:	4318      	orrs	r0, r3
 8001198:	07e4      	lsls	r4, r4, #31
 800119a:	4320      	orrs	r0, r4
 800119c:	bcc0      	pop	{r6, r7}
 800119e:	46b9      	mov	r9, r7
 80011a0:	46b0      	mov	r8, r6
 80011a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a4:	2201      	movs	r2, #1
 80011a6:	4051      	eors	r1, r2
 80011a8:	428c      	cmp	r4, r1
 80011aa:	d1ba      	bne.n	8001122 <__aeabi_fsub+0x7e>
 80011ac:	464a      	mov	r2, r9
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d010      	beq.n	80011d4 <__aeabi_fsub+0x130>
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x114>
 80011b6:	e098      	b.n	80012ea <__aeabi_fsub+0x246>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e7bb      	b.n	8001134 <__aeabi_fsub+0x90>
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d034      	beq.n	800122a <__aeabi_fsub+0x186>
 80011c0:	1e51      	subs	r1, r2, #1
 80011c2:	2a01      	cmp	r2, #1
 80011c4:	d06e      	beq.n	80012a4 <__aeabi_fsub+0x200>
 80011c6:	2aff      	cmp	r2, #255	@ 0xff
 80011c8:	d0b4      	beq.n	8001134 <__aeabi_fsub+0x90>
 80011ca:	000a      	movs	r2, r1
 80011cc:	e79c      	b.n	8001108 <__aeabi_fsub+0x64>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d000      	beq.n	80011d4 <__aeabi_fsub+0x130>
 80011d2:	e088      	b.n	80012e6 <__aeabi_fsub+0x242>
 80011d4:	20fe      	movs	r0, #254	@ 0xfe
 80011d6:	1c6a      	adds	r2, r5, #1
 80011d8:	4210      	tst	r0, r2
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x13a>
 80011dc:	e092      	b.n	8001304 <__aeabi_fsub+0x260>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x140>
 80011e2:	e0a4      	b.n	800132e <__aeabi_fsub+0x28a>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_fsub+0x146>
 80011e8:	e0cb      	b.n	8001382 <__aeabi_fsub+0x2de>
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d000      	beq.n	80011f0 <__aeabi_fsub+0x14c>
 80011ee:	e0ca      	b.n	8001386 <__aeabi_fsub+0x2e2>
 80011f0:	2200      	movs	r2, #0
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	0a5b      	lsrs	r3, r3, #9
 80011f8:	b2d0      	uxtb	r0, r2
 80011fa:	e7cb      	b.n	8001194 <__aeabi_fsub+0xf0>
 80011fc:	0031      	movs	r1, r6
 80011fe:	2020      	movs	r0, #32
 8001200:	40d1      	lsrs	r1, r2
 8001202:	1a82      	subs	r2, r0, r2
 8001204:	4096      	lsls	r6, r2
 8001206:	0032      	movs	r2, r6
 8001208:	1e50      	subs	r0, r2, #1
 800120a:	4182      	sbcs	r2, r0
 800120c:	430a      	orrs	r2, r1
 800120e:	189b      	adds	r3, r3, r2
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	d5ae      	bpl.n	8001172 <__aeabi_fsub+0xce>
 8001214:	1c6a      	adds	r2, r5, #1
 8001216:	2dfe      	cmp	r5, #254	@ 0xfe
 8001218:	d14a      	bne.n	80012b0 <__aeabi_fsub+0x20c>
 800121a:	20ff      	movs	r0, #255	@ 0xff
 800121c:	2300      	movs	r3, #0
 800121e:	e7b9      	b.n	8001194 <__aeabi_fsub+0xf0>
 8001220:	22ff      	movs	r2, #255	@ 0xff
 8001222:	2b00      	cmp	r3, #0
 8001224:	d14b      	bne.n	80012be <__aeabi_fsub+0x21a>
 8001226:	000c      	movs	r4, r1
 8001228:	0033      	movs	r3, r6
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	2aff      	cmp	r2, #255	@ 0xff
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x18e>
 8001230:	e781      	b.n	8001136 <__aeabi_fsub+0x92>
 8001232:	e7df      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001234:	019f      	lsls	r7, r3, #6
 8001236:	09bf      	lsrs	r7, r7, #6
 8001238:	0038      	movs	r0, r7
 800123a:	f002 f8eb 	bl	8003414 <__clzsi2>
 800123e:	3805      	subs	r0, #5
 8001240:	4087      	lsls	r7, r0
 8001242:	4285      	cmp	r5, r0
 8001244:	dc21      	bgt.n	800128a <__aeabi_fsub+0x1e6>
 8001246:	003b      	movs	r3, r7
 8001248:	2120      	movs	r1, #32
 800124a:	1b42      	subs	r2, r0, r5
 800124c:	3201      	adds	r2, #1
 800124e:	40d3      	lsrs	r3, r2
 8001250:	1a8a      	subs	r2, r1, r2
 8001252:	4097      	lsls	r7, r2
 8001254:	1e7a      	subs	r2, r7, #1
 8001256:	4197      	sbcs	r7, r2
 8001258:	2200      	movs	r2, #0
 800125a:	433b      	orrs	r3, r7
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x1be>
 8001260:	e78b      	b.n	800117a <__aeabi_fsub+0xd6>
 8001262:	e78f      	b.n	8001184 <__aeabi_fsub+0xe0>
 8001264:	20fe      	movs	r0, #254	@ 0xfe
 8001266:	1c6a      	adds	r2, r5, #1
 8001268:	4210      	tst	r0, r2
 800126a:	d112      	bne.n	8001292 <__aeabi_fsub+0x1ee>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d152      	bne.n	8001316 <__aeabi_fsub+0x272>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d07c      	beq.n	800136e <__aeabi_fsub+0x2ca>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d0bb      	beq.n	80011f0 <__aeabi_fsub+0x14c>
 8001278:	1b9a      	subs	r2, r3, r6
 800127a:	0150      	lsls	r0, r2, #5
 800127c:	d400      	bmi.n	8001280 <__aeabi_fsub+0x1dc>
 800127e:	e08b      	b.n	8001398 <__aeabi_fsub+0x2f4>
 8001280:	2401      	movs	r4, #1
 8001282:	2200      	movs	r2, #0
 8001284:	1af3      	subs	r3, r6, r3
 8001286:	400c      	ands	r4, r1
 8001288:	e7e8      	b.n	800125c <__aeabi_fsub+0x1b8>
 800128a:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <__aeabi_fsub+0x340>)
 800128c:	1a2a      	subs	r2, r5, r0
 800128e:	403b      	ands	r3, r7
 8001290:	e7e4      	b.n	800125c <__aeabi_fsub+0x1b8>
 8001292:	1b9f      	subs	r7, r3, r6
 8001294:	017a      	lsls	r2, r7, #5
 8001296:	d446      	bmi.n	8001326 <__aeabi_fsub+0x282>
 8001298:	2f00      	cmp	r7, #0
 800129a:	d1cd      	bne.n	8001238 <__aeabi_fsub+0x194>
 800129c:	2400      	movs	r4, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	2300      	movs	r3, #0
 80012a2:	e777      	b.n	8001194 <__aeabi_fsub+0xf0>
 80012a4:	199b      	adds	r3, r3, r6
 80012a6:	2501      	movs	r5, #1
 80012a8:	3201      	adds	r2, #1
 80012aa:	0159      	lsls	r1, r3, #5
 80012ac:	d400      	bmi.n	80012b0 <__aeabi_fsub+0x20c>
 80012ae:	e760      	b.n	8001172 <__aeabi_fsub+0xce>
 80012b0:	2101      	movs	r1, #1
 80012b2:	484d      	ldr	r0, [pc, #308]	@ (80013e8 <__aeabi_fsub+0x344>)
 80012b4:	4019      	ands	r1, r3
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	4003      	ands	r3, r0
 80012ba:	430b      	orrs	r3, r1
 80012bc:	e7ce      	b.n	800125c <__aeabi_fsub+0x1b8>
 80012be:	1e57      	subs	r7, r2, #1
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d05a      	beq.n	800137a <__aeabi_fsub+0x2d6>
 80012c4:	000c      	movs	r4, r1
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d033      	beq.n	8001332 <__aeabi_fsub+0x28e>
 80012ca:	2201      	movs	r2, #1
 80012cc:	2f1b      	cmp	r7, #27
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_fsub+0x23c>
 80012d0:	2120      	movs	r1, #32
 80012d2:	1bc9      	subs	r1, r1, r7
 80012d4:	001a      	movs	r2, r3
 80012d6:	408b      	lsls	r3, r1
 80012d8:	40fa      	lsrs	r2, r7
 80012da:	1e59      	subs	r1, r3, #1
 80012dc:	418b      	sbcs	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	0005      	movs	r5, r0
 80012e2:	1ab3      	subs	r3, r6, r2
 80012e4:	e743      	b.n	800116e <__aeabi_fsub+0xca>
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d123      	bne.n	8001332 <__aeabi_fsub+0x28e>
 80012ea:	22ff      	movs	r2, #255	@ 0xff
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d09b      	beq.n	8001228 <__aeabi_fsub+0x184>
 80012f0:	1e51      	subs	r1, r2, #1
 80012f2:	2a01      	cmp	r2, #1
 80012f4:	d0d6      	beq.n	80012a4 <__aeabi_fsub+0x200>
 80012f6:	2aff      	cmp	r2, #255	@ 0xff
 80012f8:	d01b      	beq.n	8001332 <__aeabi_fsub+0x28e>
 80012fa:	291b      	cmp	r1, #27
 80012fc:	dd2c      	ble.n	8001358 <__aeabi_fsub+0x2b4>
 80012fe:	0002      	movs	r2, r0
 8001300:	1c73      	adds	r3, r6, #1
 8001302:	e73a      	b.n	800117a <__aeabi_fsub+0xd6>
 8001304:	2aff      	cmp	r2, #255	@ 0xff
 8001306:	d088      	beq.n	800121a <__aeabi_fsub+0x176>
 8001308:	199b      	adds	r3, r3, r6
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	0759      	lsls	r1, r3, #29
 800130e:	d000      	beq.n	8001312 <__aeabi_fsub+0x26e>
 8001310:	e733      	b.n	800117a <__aeabi_fsub+0xd6>
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	e76e      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d110      	bne.n	800133c <__aeabi_fsub+0x298>
 800131a:	2e00      	cmp	r6, #0
 800131c:	d043      	beq.n	80013a6 <__aeabi_fsub+0x302>
 800131e:	2401      	movs	r4, #1
 8001320:	0033      	movs	r3, r6
 8001322:	400c      	ands	r4, r1
 8001324:	e706      	b.n	8001134 <__aeabi_fsub+0x90>
 8001326:	2401      	movs	r4, #1
 8001328:	1af7      	subs	r7, r6, r3
 800132a:	400c      	ands	r4, r1
 800132c:	e784      	b.n	8001238 <__aeabi_fsub+0x194>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <__aeabi_fsub+0x298>
 8001332:	0033      	movs	r3, r6
 8001334:	e6fe      	b.n	8001134 <__aeabi_fsub+0x90>
 8001336:	2501      	movs	r5, #1
 8001338:	1b9b      	subs	r3, r3, r6
 800133a:	e718      	b.n	800116e <__aeabi_fsub+0xca>
 800133c:	2e00      	cmp	r6, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_fsub+0x29e>
 8001340:	e6f8      	b.n	8001134 <__aeabi_fsub+0x90>
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	03d2      	lsls	r2, r2, #15
 8001346:	4297      	cmp	r7, r2
 8001348:	d304      	bcc.n	8001354 <__aeabi_fsub+0x2b0>
 800134a:	4594      	cmp	ip, r2
 800134c:	d202      	bcs.n	8001354 <__aeabi_fsub+0x2b0>
 800134e:	2401      	movs	r4, #1
 8001350:	0033      	movs	r3, r6
 8001352:	400c      	ands	r4, r1
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	e6f1      	b.n	800113c <__aeabi_fsub+0x98>
 8001358:	001a      	movs	r2, r3
 800135a:	2520      	movs	r5, #32
 800135c:	40ca      	lsrs	r2, r1
 800135e:	1a69      	subs	r1, r5, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	418b      	sbcs	r3, r1
 8001366:	4313      	orrs	r3, r2
 8001368:	0005      	movs	r5, r0
 800136a:	199b      	adds	r3, r3, r6
 800136c:	e750      	b.n	8001210 <__aeabi_fsub+0x16c>
 800136e:	2e00      	cmp	r6, #0
 8001370:	d094      	beq.n	800129c <__aeabi_fsub+0x1f8>
 8001372:	2401      	movs	r4, #1
 8001374:	0033      	movs	r3, r6
 8001376:	400c      	ands	r4, r1
 8001378:	e73a      	b.n	80011f0 <__aeabi_fsub+0x14c>
 800137a:	000c      	movs	r4, r1
 800137c:	2501      	movs	r5, #1
 800137e:	1af3      	subs	r3, r6, r3
 8001380:	e6f5      	b.n	800116e <__aeabi_fsub+0xca>
 8001382:	0033      	movs	r3, r6
 8001384:	e734      	b.n	80011f0 <__aeabi_fsub+0x14c>
 8001386:	199b      	adds	r3, r3, r6
 8001388:	2200      	movs	r2, #0
 800138a:	0159      	lsls	r1, r3, #5
 800138c:	d5c1      	bpl.n	8001312 <__aeabi_fsub+0x26e>
 800138e:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <__aeabi_fsub+0x340>)
 8001390:	4013      	ands	r3, r2
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	2201      	movs	r2, #1
 8001396:	e72d      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x2fa>
 800139c:	e77e      	b.n	800129c <__aeabi_fsub+0x1f8>
 800139e:	0013      	movs	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	e726      	b.n	80011f4 <__aeabi_fsub+0x150>
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	2400      	movs	r4, #0
 80013aa:	20ff      	movs	r0, #255	@ 0xff
 80013ac:	03db      	lsls	r3, r3, #15
 80013ae:	e6f1      	b.n	8001194 <__aeabi_fsub+0xf0>
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x312>
 80013b4:	e756      	b.n	8001264 <__aeabi_fsub+0x1c0>
 80013b6:	1b47      	subs	r7, r0, r5
 80013b8:	003a      	movs	r2, r7
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_fsub+0x31c>
 80013be:	e730      	b.n	8001222 <__aeabi_fsub+0x17e>
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	04d2      	lsls	r2, r2, #19
 80013c4:	000c      	movs	r4, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	e77f      	b.n	80012ca <__aeabi_fsub+0x226>
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x32c>
 80013ce:	e701      	b.n	80011d4 <__aeabi_fsub+0x130>
 80013d0:	1b41      	subs	r1, r0, r5
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d101      	bne.n	80013da <__aeabi_fsub+0x336>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e788      	b.n	80012ec <__aeabi_fsub+0x248>
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	04d2      	lsls	r2, r2, #19
 80013de:	4313      	orrs	r3, r2
 80013e0:	e78b      	b.n	80012fa <__aeabi_fsub+0x256>
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	fbffffff 	.word	0xfbffffff
 80013e8:	7dffffff 	.word	0x7dffffff

080013ec <__aeabi_f2iz>:
 80013ec:	0241      	lsls	r1, r0, #9
 80013ee:	0042      	lsls	r2, r0, #1
 80013f0:	0fc3      	lsrs	r3, r0, #31
 80013f2:	0a49      	lsrs	r1, r1, #9
 80013f4:	2000      	movs	r0, #0
 80013f6:	0e12      	lsrs	r2, r2, #24
 80013f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80013fa:	dd03      	ble.n	8001404 <__aeabi_f2iz+0x18>
 80013fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80013fe:	dd02      	ble.n	8001406 <__aeabi_f2iz+0x1a>
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <__aeabi_f2iz+0x3c>)
 8001402:	1898      	adds	r0, r3, r2
 8001404:	4770      	bx	lr
 8001406:	2080      	movs	r0, #128	@ 0x80
 8001408:	0400      	lsls	r0, r0, #16
 800140a:	4301      	orrs	r1, r0
 800140c:	2a95      	cmp	r2, #149	@ 0x95
 800140e:	dc07      	bgt.n	8001420 <__aeabi_f2iz+0x34>
 8001410:	2096      	movs	r0, #150	@ 0x96
 8001412:	1a82      	subs	r2, r0, r2
 8001414:	40d1      	lsrs	r1, r2
 8001416:	4248      	negs	r0, r1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f3      	bne.n	8001404 <__aeabi_f2iz+0x18>
 800141c:	0008      	movs	r0, r1
 800141e:	e7f1      	b.n	8001404 <__aeabi_f2iz+0x18>
 8001420:	3a96      	subs	r2, #150	@ 0x96
 8001422:	4091      	lsls	r1, r2
 8001424:	e7f7      	b.n	8001416 <__aeabi_f2iz+0x2a>
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	7fffffff 	.word	0x7fffffff

0800142c <__aeabi_i2f>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	2800      	cmp	r0, #0
 8001430:	d013      	beq.n	800145a <__aeabi_i2f+0x2e>
 8001432:	17c3      	asrs	r3, r0, #31
 8001434:	18c5      	adds	r5, r0, r3
 8001436:	405d      	eors	r5, r3
 8001438:	0fc4      	lsrs	r4, r0, #31
 800143a:	0028      	movs	r0, r5
 800143c:	f001 ffea 	bl	8003414 <__clzsi2>
 8001440:	239e      	movs	r3, #158	@ 0x9e
 8001442:	0001      	movs	r1, r0
 8001444:	1a1b      	subs	r3, r3, r0
 8001446:	2b96      	cmp	r3, #150	@ 0x96
 8001448:	dc0f      	bgt.n	800146a <__aeabi_i2f+0x3e>
 800144a:	2808      	cmp	r0, #8
 800144c:	d034      	beq.n	80014b8 <__aeabi_i2f+0x8c>
 800144e:	3908      	subs	r1, #8
 8001450:	408d      	lsls	r5, r1
 8001452:	026d      	lsls	r5, r5, #9
 8001454:	0a6d      	lsrs	r5, r5, #9
 8001456:	b2d8      	uxtb	r0, r3
 8001458:	e002      	b.n	8001460 <__aeabi_i2f+0x34>
 800145a:	2400      	movs	r4, #0
 800145c:	2000      	movs	r0, #0
 800145e:	2500      	movs	r5, #0
 8001460:	05c0      	lsls	r0, r0, #23
 8001462:	4328      	orrs	r0, r5
 8001464:	07e4      	lsls	r4, r4, #31
 8001466:	4320      	orrs	r0, r4
 8001468:	bd70      	pop	{r4, r5, r6, pc}
 800146a:	2b99      	cmp	r3, #153	@ 0x99
 800146c:	dc16      	bgt.n	800149c <__aeabi_i2f+0x70>
 800146e:	1f42      	subs	r2, r0, #5
 8001470:	2805      	cmp	r0, #5
 8001472:	d000      	beq.n	8001476 <__aeabi_i2f+0x4a>
 8001474:	4095      	lsls	r5, r2
 8001476:	002a      	movs	r2, r5
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <__aeabi_i2f+0x94>)
 800147a:	4002      	ands	r2, r0
 800147c:	076e      	lsls	r6, r5, #29
 800147e:	d009      	beq.n	8001494 <__aeabi_i2f+0x68>
 8001480:	260f      	movs	r6, #15
 8001482:	4035      	ands	r5, r6
 8001484:	2d04      	cmp	r5, #4
 8001486:	d005      	beq.n	8001494 <__aeabi_i2f+0x68>
 8001488:	3204      	adds	r2, #4
 800148a:	0155      	lsls	r5, r2, #5
 800148c:	d502      	bpl.n	8001494 <__aeabi_i2f+0x68>
 800148e:	239f      	movs	r3, #159	@ 0x9f
 8001490:	4002      	ands	r2, r0
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	0192      	lsls	r2, r2, #6
 8001496:	0a55      	lsrs	r5, r2, #9
 8001498:	b2d8      	uxtb	r0, r3
 800149a:	e7e1      	b.n	8001460 <__aeabi_i2f+0x34>
 800149c:	2205      	movs	r2, #5
 800149e:	1a12      	subs	r2, r2, r0
 80014a0:	0028      	movs	r0, r5
 80014a2:	40d0      	lsrs	r0, r2
 80014a4:	0002      	movs	r2, r0
 80014a6:	0008      	movs	r0, r1
 80014a8:	301b      	adds	r0, #27
 80014aa:	4085      	lsls	r5, r0
 80014ac:	0028      	movs	r0, r5
 80014ae:	1e45      	subs	r5, r0, #1
 80014b0:	41a8      	sbcs	r0, r5
 80014b2:	4302      	orrs	r2, r0
 80014b4:	0015      	movs	r5, r2
 80014b6:	e7de      	b.n	8001476 <__aeabi_i2f+0x4a>
 80014b8:	026d      	lsls	r5, r5, #9
 80014ba:	2096      	movs	r0, #150	@ 0x96
 80014bc:	0a6d      	lsrs	r5, r5, #9
 80014be:	e7cf      	b.n	8001460 <__aeabi_i2f+0x34>
 80014c0:	fbffffff 	.word	0xfbffffff

080014c4 <__aeabi_ui2f>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	1e04      	subs	r4, r0, #0
 80014c8:	d00e      	beq.n	80014e8 <__aeabi_ui2f+0x24>
 80014ca:	f001 ffa3 	bl	8003414 <__clzsi2>
 80014ce:	239e      	movs	r3, #158	@ 0x9e
 80014d0:	0001      	movs	r1, r0
 80014d2:	1a1b      	subs	r3, r3, r0
 80014d4:	2b96      	cmp	r3, #150	@ 0x96
 80014d6:	dc0c      	bgt.n	80014f2 <__aeabi_ui2f+0x2e>
 80014d8:	2808      	cmp	r0, #8
 80014da:	d02f      	beq.n	800153c <__aeabi_ui2f+0x78>
 80014dc:	3908      	subs	r1, #8
 80014de:	408c      	lsls	r4, r1
 80014e0:	0264      	lsls	r4, r4, #9
 80014e2:	0a64      	lsrs	r4, r4, #9
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	e001      	b.n	80014ec <__aeabi_ui2f+0x28>
 80014e8:	2000      	movs	r0, #0
 80014ea:	2400      	movs	r4, #0
 80014ec:	05c0      	lsls	r0, r0, #23
 80014ee:	4320      	orrs	r0, r4
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
 80014f2:	2b99      	cmp	r3, #153	@ 0x99
 80014f4:	dc16      	bgt.n	8001524 <__aeabi_ui2f+0x60>
 80014f6:	1f42      	subs	r2, r0, #5
 80014f8:	2805      	cmp	r0, #5
 80014fa:	d000      	beq.n	80014fe <__aeabi_ui2f+0x3a>
 80014fc:	4094      	lsls	r4, r2
 80014fe:	0022      	movs	r2, r4
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <__aeabi_ui2f+0x80>)
 8001502:	4002      	ands	r2, r0
 8001504:	0765      	lsls	r5, r4, #29
 8001506:	d009      	beq.n	800151c <__aeabi_ui2f+0x58>
 8001508:	250f      	movs	r5, #15
 800150a:	402c      	ands	r4, r5
 800150c:	2c04      	cmp	r4, #4
 800150e:	d005      	beq.n	800151c <__aeabi_ui2f+0x58>
 8001510:	3204      	adds	r2, #4
 8001512:	0154      	lsls	r4, r2, #5
 8001514:	d502      	bpl.n	800151c <__aeabi_ui2f+0x58>
 8001516:	239f      	movs	r3, #159	@ 0x9f
 8001518:	4002      	ands	r2, r0
 800151a:	1a5b      	subs	r3, r3, r1
 800151c:	0192      	lsls	r2, r2, #6
 800151e:	0a54      	lsrs	r4, r2, #9
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	e7e3      	b.n	80014ec <__aeabi_ui2f+0x28>
 8001524:	0002      	movs	r2, r0
 8001526:	0020      	movs	r0, r4
 8001528:	321b      	adds	r2, #27
 800152a:	4090      	lsls	r0, r2
 800152c:	0002      	movs	r2, r0
 800152e:	1e50      	subs	r0, r2, #1
 8001530:	4182      	sbcs	r2, r0
 8001532:	2005      	movs	r0, #5
 8001534:	1a40      	subs	r0, r0, r1
 8001536:	40c4      	lsrs	r4, r0
 8001538:	4314      	orrs	r4, r2
 800153a:	e7e0      	b.n	80014fe <__aeabi_ui2f+0x3a>
 800153c:	0264      	lsls	r4, r4, #9
 800153e:	2096      	movs	r0, #150	@ 0x96
 8001540:	0a64      	lsrs	r4, r4, #9
 8001542:	e7d3      	b.n	80014ec <__aeabi_ui2f+0x28>
 8001544:	fbffffff 	.word	0xfbffffff

08001548 <__aeabi_dadd>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4657      	mov	r7, sl
 800154c:	464e      	mov	r6, r9
 800154e:	4645      	mov	r5, r8
 8001550:	46de      	mov	lr, fp
 8001552:	b5e0      	push	{r5, r6, r7, lr}
 8001554:	b083      	sub	sp, #12
 8001556:	9000      	str	r0, [sp, #0]
 8001558:	9101      	str	r1, [sp, #4]
 800155a:	030c      	lsls	r4, r1, #12
 800155c:	004f      	lsls	r7, r1, #1
 800155e:	0fce      	lsrs	r6, r1, #31
 8001560:	0a61      	lsrs	r1, r4, #9
 8001562:	9c00      	ldr	r4, [sp, #0]
 8001564:	031d      	lsls	r5, r3, #12
 8001566:	0f64      	lsrs	r4, r4, #29
 8001568:	430c      	orrs	r4, r1
 800156a:	9900      	ldr	r1, [sp, #0]
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	00c8      	lsls	r0, r1, #3
 8001572:	0059      	lsls	r1, r3, #1
 8001574:	0d4b      	lsrs	r3, r1, #21
 8001576:	4699      	mov	r9, r3
 8001578:	9a00      	ldr	r2, [sp, #0]
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	0a6d      	lsrs	r5, r5, #9
 800157e:	0fd9      	lsrs	r1, r3, #31
 8001580:	0f53      	lsrs	r3, r2, #29
 8001582:	432b      	orrs	r3, r5
 8001584:	469a      	mov	sl, r3
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	0d7f      	lsrs	r7, r7, #21
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	4694      	mov	ip, r2
 800158e:	464a      	mov	r2, r9
 8001590:	46b0      	mov	r8, r6
 8001592:	1aba      	subs	r2, r7, r2
 8001594:	428e      	cmp	r6, r1
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x52>
 8001598:	e0b0      	b.n	80016fc <__aeabi_dadd+0x1b4>
 800159a:	2a00      	cmp	r2, #0
 800159c:	dc00      	bgt.n	80015a0 <__aeabi_dadd+0x58>
 800159e:	e078      	b.n	8001692 <__aeabi_dadd+0x14a>
 80015a0:	4649      	mov	r1, r9
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x60>
 80015a6:	e0e9      	b.n	800177c <__aeabi_dadd+0x234>
 80015a8:	49c9      	ldr	r1, [pc, #804]	@ (80018d0 <__aeabi_dadd+0x388>)
 80015aa:	428f      	cmp	r7, r1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x68>
 80015ae:	e195      	b.n	80018dc <__aeabi_dadd+0x394>
 80015b0:	2501      	movs	r5, #1
 80015b2:	2a38      	cmp	r2, #56	@ 0x38
 80015b4:	dc16      	bgt.n	80015e4 <__aeabi_dadd+0x9c>
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	4653      	mov	r3, sl
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	430b      	orrs	r3, r1
 80015be:	469a      	mov	sl, r3
 80015c0:	2a1f      	cmp	r2, #31
 80015c2:	dd00      	ble.n	80015c6 <__aeabi_dadd+0x7e>
 80015c4:	e1e7      	b.n	8001996 <__aeabi_dadd+0x44e>
 80015c6:	2120      	movs	r1, #32
 80015c8:	4655      	mov	r5, sl
 80015ca:	1a8b      	subs	r3, r1, r2
 80015cc:	4661      	mov	r1, ip
 80015ce:	409d      	lsls	r5, r3
 80015d0:	40d1      	lsrs	r1, r2
 80015d2:	430d      	orrs	r5, r1
 80015d4:	4661      	mov	r1, ip
 80015d6:	4099      	lsls	r1, r3
 80015d8:	1e4b      	subs	r3, r1, #1
 80015da:	4199      	sbcs	r1, r3
 80015dc:	4653      	mov	r3, sl
 80015de:	40d3      	lsrs	r3, r2
 80015e0:	430d      	orrs	r5, r1
 80015e2:	1ae4      	subs	r4, r4, r3
 80015e4:	1b45      	subs	r5, r0, r5
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	4240      	negs	r0, r0
 80015ec:	1a24      	subs	r4, r4, r0
 80015ee:	0223      	lsls	r3, r4, #8
 80015f0:	d400      	bmi.n	80015f4 <__aeabi_dadd+0xac>
 80015f2:	e10f      	b.n	8001814 <__aeabi_dadd+0x2cc>
 80015f4:	0264      	lsls	r4, r4, #9
 80015f6:	0a64      	lsrs	r4, r4, #9
 80015f8:	2c00      	cmp	r4, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0xb6>
 80015fc:	e139      	b.n	8001872 <__aeabi_dadd+0x32a>
 80015fe:	0020      	movs	r0, r4
 8001600:	f001 ff08 	bl	8003414 <__clzsi2>
 8001604:	0003      	movs	r3, r0
 8001606:	3b08      	subs	r3, #8
 8001608:	2120      	movs	r1, #32
 800160a:	0028      	movs	r0, r5
 800160c:	1aca      	subs	r2, r1, r3
 800160e:	40d0      	lsrs	r0, r2
 8001610:	409c      	lsls	r4, r3
 8001612:	0002      	movs	r2, r0
 8001614:	409d      	lsls	r5, r3
 8001616:	4322      	orrs	r2, r4
 8001618:	429f      	cmp	r7, r3
 800161a:	dd00      	ble.n	800161e <__aeabi_dadd+0xd6>
 800161c:	e173      	b.n	8001906 <__aeabi_dadd+0x3be>
 800161e:	1bd8      	subs	r0, r3, r7
 8001620:	3001      	adds	r0, #1
 8001622:	1a09      	subs	r1, r1, r0
 8001624:	002c      	movs	r4, r5
 8001626:	408d      	lsls	r5, r1
 8001628:	40c4      	lsrs	r4, r0
 800162a:	1e6b      	subs	r3, r5, #1
 800162c:	419d      	sbcs	r5, r3
 800162e:	0013      	movs	r3, r2
 8001630:	40c2      	lsrs	r2, r0
 8001632:	408b      	lsls	r3, r1
 8001634:	4325      	orrs	r5, r4
 8001636:	2700      	movs	r7, #0
 8001638:	0014      	movs	r4, r2
 800163a:	431d      	orrs	r5, r3
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d009      	beq.n	8001654 <__aeabi_dadd+0x10c>
 8001640:	230f      	movs	r3, #15
 8001642:	402b      	ands	r3, r5
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <__aeabi_dadd+0x10c>
 8001648:	1d2b      	adds	r3, r5, #4
 800164a:	42ab      	cmp	r3, r5
 800164c:	41ad      	sbcs	r5, r5
 800164e:	426d      	negs	r5, r5
 8001650:	1964      	adds	r4, r4, r5
 8001652:	001d      	movs	r5, r3
 8001654:	0223      	lsls	r3, r4, #8
 8001656:	d400      	bmi.n	800165a <__aeabi_dadd+0x112>
 8001658:	e12d      	b.n	80018b6 <__aeabi_dadd+0x36e>
 800165a:	4a9d      	ldr	r2, [pc, #628]	@ (80018d0 <__aeabi_dadd+0x388>)
 800165c:	3701      	adds	r7, #1
 800165e:	4297      	cmp	r7, r2
 8001660:	d100      	bne.n	8001664 <__aeabi_dadd+0x11c>
 8001662:	e0d3      	b.n	800180c <__aeabi_dadd+0x2c4>
 8001664:	4646      	mov	r6, r8
 8001666:	499b      	ldr	r1, [pc, #620]	@ (80018d4 <__aeabi_dadd+0x38c>)
 8001668:	08ed      	lsrs	r5, r5, #3
 800166a:	4021      	ands	r1, r4
 800166c:	074a      	lsls	r2, r1, #29
 800166e:	432a      	orrs	r2, r5
 8001670:	057c      	lsls	r4, r7, #21
 8001672:	024d      	lsls	r5, r1, #9
 8001674:	0b2d      	lsrs	r5, r5, #12
 8001676:	0d64      	lsrs	r4, r4, #21
 8001678:	0524      	lsls	r4, r4, #20
 800167a:	432c      	orrs	r4, r5
 800167c:	07f6      	lsls	r6, r6, #31
 800167e:	4334      	orrs	r4, r6
 8001680:	0010      	movs	r0, r2
 8001682:	0021      	movs	r1, r4
 8001684:	b003      	add	sp, #12
 8001686:	bcf0      	pop	{r4, r5, r6, r7}
 8001688:	46bb      	mov	fp, r7
 800168a:	46b2      	mov	sl, r6
 800168c:	46a9      	mov	r9, r5
 800168e:	46a0      	mov	r8, r4
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	2a00      	cmp	r2, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x150>
 8001696:	e084      	b.n	80017a2 <__aeabi_dadd+0x25a>
 8001698:	464a      	mov	r2, r9
 800169a:	1bd2      	subs	r2, r2, r7
 800169c:	2f00      	cmp	r7, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x15a>
 80016a0:	e16d      	b.n	800197e <__aeabi_dadd+0x436>
 80016a2:	0025      	movs	r5, r4
 80016a4:	4305      	orrs	r5, r0
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x162>
 80016a8:	e127      	b.n	80018fa <__aeabi_dadd+0x3b2>
 80016aa:	1e56      	subs	r6, r2, #1
 80016ac:	2a01      	cmp	r2, #1
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x16a>
 80016b0:	e23b      	b.n	8001b2a <__aeabi_dadd+0x5e2>
 80016b2:	4d87      	ldr	r5, [pc, #540]	@ (80018d0 <__aeabi_dadd+0x388>)
 80016b4:	42aa      	cmp	r2, r5
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x172>
 80016b8:	e26a      	b.n	8001b90 <__aeabi_dadd+0x648>
 80016ba:	2501      	movs	r5, #1
 80016bc:	2e38      	cmp	r6, #56	@ 0x38
 80016be:	dc12      	bgt.n	80016e6 <__aeabi_dadd+0x19e>
 80016c0:	0032      	movs	r2, r6
 80016c2:	2a1f      	cmp	r2, #31
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dadd+0x180>
 80016c6:	e1f8      	b.n	8001aba <__aeabi_dadd+0x572>
 80016c8:	2620      	movs	r6, #32
 80016ca:	0025      	movs	r5, r4
 80016cc:	1ab6      	subs	r6, r6, r2
 80016ce:	0007      	movs	r7, r0
 80016d0:	4653      	mov	r3, sl
 80016d2:	40b0      	lsls	r0, r6
 80016d4:	40d4      	lsrs	r4, r2
 80016d6:	40b5      	lsls	r5, r6
 80016d8:	40d7      	lsrs	r7, r2
 80016da:	1e46      	subs	r6, r0, #1
 80016dc:	41b0      	sbcs	r0, r6
 80016de:	1b1b      	subs	r3, r3, r4
 80016e0:	469a      	mov	sl, r3
 80016e2:	433d      	orrs	r5, r7
 80016e4:	4305      	orrs	r5, r0
 80016e6:	4662      	mov	r2, ip
 80016e8:	1b55      	subs	r5, r2, r5
 80016ea:	45ac      	cmp	ip, r5
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	4653      	mov	r3, sl
 80016f0:	4252      	negs	r2, r2
 80016f2:	000e      	movs	r6, r1
 80016f4:	464f      	mov	r7, r9
 80016f6:	4688      	mov	r8, r1
 80016f8:	1a9c      	subs	r4, r3, r2
 80016fa:	e778      	b.n	80015ee <__aeabi_dadd+0xa6>
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dadd+0x1ba>
 8001700:	e08e      	b.n	8001820 <__aeabi_dadd+0x2d8>
 8001702:	4649      	mov	r1, r9
 8001704:	2900      	cmp	r1, #0
 8001706:	d175      	bne.n	80017f4 <__aeabi_dadd+0x2ac>
 8001708:	4661      	mov	r1, ip
 800170a:	4653      	mov	r3, sl
 800170c:	4319      	orrs	r1, r3
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x1ca>
 8001710:	e0f6      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001712:	1e51      	subs	r1, r2, #1
 8001714:	2a01      	cmp	r2, #1
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x1d2>
 8001718:	e191      	b.n	8001a3e <__aeabi_dadd+0x4f6>
 800171a:	4d6d      	ldr	r5, [pc, #436]	@ (80018d0 <__aeabi_dadd+0x388>)
 800171c:	42aa      	cmp	r2, r5
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x1da>
 8001720:	e0dc      	b.n	80018dc <__aeabi_dadd+0x394>
 8001722:	2501      	movs	r5, #1
 8001724:	2938      	cmp	r1, #56	@ 0x38
 8001726:	dc14      	bgt.n	8001752 <__aeabi_dadd+0x20a>
 8001728:	000a      	movs	r2, r1
 800172a:	2a1f      	cmp	r2, #31
 800172c:	dd00      	ble.n	8001730 <__aeabi_dadd+0x1e8>
 800172e:	e1a2      	b.n	8001a76 <__aeabi_dadd+0x52e>
 8001730:	2120      	movs	r1, #32
 8001732:	4653      	mov	r3, sl
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	408b      	lsls	r3, r1
 8001738:	001d      	movs	r5, r3
 800173a:	4663      	mov	r3, ip
 800173c:	40d3      	lsrs	r3, r2
 800173e:	431d      	orrs	r5, r3
 8001740:	4663      	mov	r3, ip
 8001742:	408b      	lsls	r3, r1
 8001744:	0019      	movs	r1, r3
 8001746:	1e4b      	subs	r3, r1, #1
 8001748:	4199      	sbcs	r1, r3
 800174a:	4653      	mov	r3, sl
 800174c:	40d3      	lsrs	r3, r2
 800174e:	430d      	orrs	r5, r1
 8001750:	18e4      	adds	r4, r4, r3
 8001752:	182d      	adds	r5, r5, r0
 8001754:	4285      	cmp	r5, r0
 8001756:	4180      	sbcs	r0, r0
 8001758:	4240      	negs	r0, r0
 800175a:	1824      	adds	r4, r4, r0
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	d559      	bpl.n	8001814 <__aeabi_dadd+0x2cc>
 8001760:	4b5b      	ldr	r3, [pc, #364]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001762:	3701      	adds	r7, #1
 8001764:	429f      	cmp	r7, r3
 8001766:	d051      	beq.n	800180c <__aeabi_dadd+0x2c4>
 8001768:	2101      	movs	r1, #1
 800176a:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <__aeabi_dadd+0x38c>)
 800176c:	086a      	lsrs	r2, r5, #1
 800176e:	401c      	ands	r4, r3
 8001770:	4029      	ands	r1, r5
 8001772:	430a      	orrs	r2, r1
 8001774:	07e5      	lsls	r5, r4, #31
 8001776:	4315      	orrs	r5, r2
 8001778:	0864      	lsrs	r4, r4, #1
 800177a:	e75f      	b.n	800163c <__aeabi_dadd+0xf4>
 800177c:	4661      	mov	r1, ip
 800177e:	4653      	mov	r3, sl
 8001780:	4319      	orrs	r1, r3
 8001782:	d100      	bne.n	8001786 <__aeabi_dadd+0x23e>
 8001784:	e0bc      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001786:	1e51      	subs	r1, r2, #1
 8001788:	2a01      	cmp	r2, #1
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x246>
 800178c:	e164      	b.n	8001a58 <__aeabi_dadd+0x510>
 800178e:	4d50      	ldr	r5, [pc, #320]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001790:	42aa      	cmp	r2, r5
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x24e>
 8001794:	e16a      	b.n	8001a6c <__aeabi_dadd+0x524>
 8001796:	2501      	movs	r5, #1
 8001798:	2938      	cmp	r1, #56	@ 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dadd+0x256>
 800179c:	e722      	b.n	80015e4 <__aeabi_dadd+0x9c>
 800179e:	000a      	movs	r2, r1
 80017a0:	e70e      	b.n	80015c0 <__aeabi_dadd+0x78>
 80017a2:	4a4d      	ldr	r2, [pc, #308]	@ (80018d8 <__aeabi_dadd+0x390>)
 80017a4:	1c7d      	adds	r5, r7, #1
 80017a6:	4215      	tst	r5, r2
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x264>
 80017aa:	e0d0      	b.n	800194e <__aeabi_dadd+0x406>
 80017ac:	0025      	movs	r5, r4
 80017ae:	4662      	mov	r2, ip
 80017b0:	4653      	mov	r3, sl
 80017b2:	4305      	orrs	r5, r0
 80017b4:	431a      	orrs	r2, r3
 80017b6:	2f00      	cmp	r7, #0
 80017b8:	d000      	beq.n	80017bc <__aeabi_dadd+0x274>
 80017ba:	e137      	b.n	8001a2c <__aeabi_dadd+0x4e4>
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x27a>
 80017c0:	e1a8      	b.n	8001b14 <__aeabi_dadd+0x5cc>
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dadd+0x280>
 80017c6:	e16a      	b.n	8001a9e <__aeabi_dadd+0x556>
 80017c8:	4663      	mov	r3, ip
 80017ca:	1ac5      	subs	r5, r0, r3
 80017cc:	4653      	mov	r3, sl
 80017ce:	1ae2      	subs	r2, r4, r3
 80017d0:	42a8      	cmp	r0, r5
 80017d2:	419b      	sbcs	r3, r3
 80017d4:	425b      	negs	r3, r3
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	d400      	bmi.n	80017de <__aeabi_dadd+0x296>
 80017dc:	e203      	b.n	8001be6 <__aeabi_dadd+0x69e>
 80017de:	4663      	mov	r3, ip
 80017e0:	1a1d      	subs	r5, r3, r0
 80017e2:	45ac      	cmp	ip, r5
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4653      	mov	r3, sl
 80017e8:	4252      	negs	r2, r2
 80017ea:	1b1c      	subs	r4, r3, r4
 80017ec:	000e      	movs	r6, r1
 80017ee:	4688      	mov	r8, r1
 80017f0:	1aa4      	subs	r4, r4, r2
 80017f2:	e723      	b.n	800163c <__aeabi_dadd+0xf4>
 80017f4:	4936      	ldr	r1, [pc, #216]	@ (80018d0 <__aeabi_dadd+0x388>)
 80017f6:	428f      	cmp	r7, r1
 80017f8:	d070      	beq.n	80018dc <__aeabi_dadd+0x394>
 80017fa:	2501      	movs	r5, #1
 80017fc:	2a38      	cmp	r2, #56	@ 0x38
 80017fe:	dca8      	bgt.n	8001752 <__aeabi_dadd+0x20a>
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	4653      	mov	r3, sl
 8001804:	0409      	lsls	r1, r1, #16
 8001806:	430b      	orrs	r3, r1
 8001808:	469a      	mov	sl, r3
 800180a:	e78e      	b.n	800172a <__aeabi_dadd+0x1e2>
 800180c:	003c      	movs	r4, r7
 800180e:	2500      	movs	r5, #0
 8001810:	2200      	movs	r2, #0
 8001812:	e731      	b.n	8001678 <__aeabi_dadd+0x130>
 8001814:	2307      	movs	r3, #7
 8001816:	402b      	ands	r3, r5
 8001818:	2b00      	cmp	r3, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dadd+0x2d6>
 800181c:	e710      	b.n	8001640 <__aeabi_dadd+0xf8>
 800181e:	e093      	b.n	8001948 <__aeabi_dadd+0x400>
 8001820:	2a00      	cmp	r2, #0
 8001822:	d074      	beq.n	800190e <__aeabi_dadd+0x3c6>
 8001824:	464a      	mov	r2, r9
 8001826:	1bd2      	subs	r2, r2, r7
 8001828:	2f00      	cmp	r7, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x2e6>
 800182c:	e0c7      	b.n	80019be <__aeabi_dadd+0x476>
 800182e:	4928      	ldr	r1, [pc, #160]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001830:	4589      	cmp	r9, r1
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x2ee>
 8001834:	e185      	b.n	8001b42 <__aeabi_dadd+0x5fa>
 8001836:	2501      	movs	r5, #1
 8001838:	2a38      	cmp	r2, #56	@ 0x38
 800183a:	dc12      	bgt.n	8001862 <__aeabi_dadd+0x31a>
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0409      	lsls	r1, r1, #16
 8001840:	430c      	orrs	r4, r1
 8001842:	2a1f      	cmp	r2, #31
 8001844:	dd00      	ble.n	8001848 <__aeabi_dadd+0x300>
 8001846:	e1ab      	b.n	8001ba0 <__aeabi_dadd+0x658>
 8001848:	2120      	movs	r1, #32
 800184a:	0025      	movs	r5, r4
 800184c:	1a89      	subs	r1, r1, r2
 800184e:	0007      	movs	r7, r0
 8001850:	4088      	lsls	r0, r1
 8001852:	408d      	lsls	r5, r1
 8001854:	40d7      	lsrs	r7, r2
 8001856:	1e41      	subs	r1, r0, #1
 8001858:	4188      	sbcs	r0, r1
 800185a:	40d4      	lsrs	r4, r2
 800185c:	433d      	orrs	r5, r7
 800185e:	4305      	orrs	r5, r0
 8001860:	44a2      	add	sl, r4
 8001862:	4465      	add	r5, ip
 8001864:	4565      	cmp	r5, ip
 8001866:	4192      	sbcs	r2, r2
 8001868:	4252      	negs	r2, r2
 800186a:	4452      	add	r2, sl
 800186c:	0014      	movs	r4, r2
 800186e:	464f      	mov	r7, r9
 8001870:	e774      	b.n	800175c <__aeabi_dadd+0x214>
 8001872:	0028      	movs	r0, r5
 8001874:	f001 fdce 	bl	8003414 <__clzsi2>
 8001878:	0003      	movs	r3, r0
 800187a:	3318      	adds	r3, #24
 800187c:	2b1f      	cmp	r3, #31
 800187e:	dc00      	bgt.n	8001882 <__aeabi_dadd+0x33a>
 8001880:	e6c2      	b.n	8001608 <__aeabi_dadd+0xc0>
 8001882:	002a      	movs	r2, r5
 8001884:	3808      	subs	r0, #8
 8001886:	4082      	lsls	r2, r0
 8001888:	429f      	cmp	r7, r3
 800188a:	dd00      	ble.n	800188e <__aeabi_dadd+0x346>
 800188c:	e0a9      	b.n	80019e2 <__aeabi_dadd+0x49a>
 800188e:	1bdb      	subs	r3, r3, r7
 8001890:	1c58      	adds	r0, r3, #1
 8001892:	281f      	cmp	r0, #31
 8001894:	dc00      	bgt.n	8001898 <__aeabi_dadd+0x350>
 8001896:	e1ac      	b.n	8001bf2 <__aeabi_dadd+0x6aa>
 8001898:	0015      	movs	r5, r2
 800189a:	3b1f      	subs	r3, #31
 800189c:	40dd      	lsrs	r5, r3
 800189e:	2820      	cmp	r0, #32
 80018a0:	d005      	beq.n	80018ae <__aeabi_dadd+0x366>
 80018a2:	2340      	movs	r3, #64	@ 0x40
 80018a4:	1a1b      	subs	r3, r3, r0
 80018a6:	409a      	lsls	r2, r3
 80018a8:	1e53      	subs	r3, r2, #1
 80018aa:	419a      	sbcs	r2, r3
 80018ac:	4315      	orrs	r5, r2
 80018ae:	2307      	movs	r3, #7
 80018b0:	2700      	movs	r7, #0
 80018b2:	402b      	ands	r3, r5
 80018b4:	e7b0      	b.n	8001818 <__aeabi_dadd+0x2d0>
 80018b6:	08ed      	lsrs	r5, r5, #3
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <__aeabi_dadd+0x388>)
 80018ba:	0762      	lsls	r2, r4, #29
 80018bc:	432a      	orrs	r2, r5
 80018be:	08e4      	lsrs	r4, r4, #3
 80018c0:	429f      	cmp	r7, r3
 80018c2:	d00f      	beq.n	80018e4 <__aeabi_dadd+0x39c>
 80018c4:	0324      	lsls	r4, r4, #12
 80018c6:	0b25      	lsrs	r5, r4, #12
 80018c8:	057c      	lsls	r4, r7, #21
 80018ca:	0d64      	lsrs	r4, r4, #21
 80018cc:	e6d4      	b.n	8001678 <__aeabi_dadd+0x130>
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	ff7fffff 	.word	0xff7fffff
 80018d8:	000007fe 	.word	0x000007fe
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	0762      	lsls	r2, r4, #29
 80018e0:	4302      	orrs	r2, r0
 80018e2:	08e4      	lsrs	r4, r4, #3
 80018e4:	0013      	movs	r3, r2
 80018e6:	4323      	orrs	r3, r4
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x3a4>
 80018ea:	e186      	b.n	8001bfa <__aeabi_dadd+0x6b2>
 80018ec:	2580      	movs	r5, #128	@ 0x80
 80018ee:	032d      	lsls	r5, r5, #12
 80018f0:	4325      	orrs	r5, r4
 80018f2:	032d      	lsls	r5, r5, #12
 80018f4:	4cc3      	ldr	r4, [pc, #780]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80018f6:	0b2d      	lsrs	r5, r5, #12
 80018f8:	e6be      	b.n	8001678 <__aeabi_dadd+0x130>
 80018fa:	4660      	mov	r0, ip
 80018fc:	4654      	mov	r4, sl
 80018fe:	000e      	movs	r6, r1
 8001900:	0017      	movs	r7, r2
 8001902:	08c5      	lsrs	r5, r0, #3
 8001904:	e7d8      	b.n	80018b8 <__aeabi_dadd+0x370>
 8001906:	4cc0      	ldr	r4, [pc, #768]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 8001908:	1aff      	subs	r7, r7, r3
 800190a:	4014      	ands	r4, r2
 800190c:	e696      	b.n	800163c <__aeabi_dadd+0xf4>
 800190e:	4abf      	ldr	r2, [pc, #764]	@ (8001c0c <__aeabi_dadd+0x6c4>)
 8001910:	1c79      	adds	r1, r7, #1
 8001912:	4211      	tst	r1, r2
 8001914:	d16b      	bne.n	80019ee <__aeabi_dadd+0x4a6>
 8001916:	0022      	movs	r2, r4
 8001918:	4302      	orrs	r2, r0
 800191a:	2f00      	cmp	r7, #0
 800191c:	d000      	beq.n	8001920 <__aeabi_dadd+0x3d8>
 800191e:	e0db      	b.n	8001ad8 <__aeabi_dadd+0x590>
 8001920:	2a00      	cmp	r2, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x3de>
 8001924:	e12d      	b.n	8001b82 <__aeabi_dadd+0x63a>
 8001926:	4662      	mov	r2, ip
 8001928:	4653      	mov	r3, sl
 800192a:	431a      	orrs	r2, r3
 800192c:	d100      	bne.n	8001930 <__aeabi_dadd+0x3e8>
 800192e:	e0b6      	b.n	8001a9e <__aeabi_dadd+0x556>
 8001930:	4663      	mov	r3, ip
 8001932:	18c5      	adds	r5, r0, r3
 8001934:	4285      	cmp	r5, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	4454      	add	r4, sl
 800193a:	4240      	negs	r0, r0
 800193c:	1824      	adds	r4, r4, r0
 800193e:	0223      	lsls	r3, r4, #8
 8001940:	d502      	bpl.n	8001948 <__aeabi_dadd+0x400>
 8001942:	000f      	movs	r7, r1
 8001944:	4bb0      	ldr	r3, [pc, #704]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 8001946:	401c      	ands	r4, r3
 8001948:	003a      	movs	r2, r7
 800194a:	0028      	movs	r0, r5
 800194c:	e7d8      	b.n	8001900 <__aeabi_dadd+0x3b8>
 800194e:	4662      	mov	r2, ip
 8001950:	1a85      	subs	r5, r0, r2
 8001952:	42a8      	cmp	r0, r5
 8001954:	4192      	sbcs	r2, r2
 8001956:	4653      	mov	r3, sl
 8001958:	4252      	negs	r2, r2
 800195a:	4691      	mov	r9, r2
 800195c:	1ae3      	subs	r3, r4, r3
 800195e:	001a      	movs	r2, r3
 8001960:	464b      	mov	r3, r9
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	4691      	mov	r9, r2
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	d454      	bmi.n	8001a16 <__aeabi_dadd+0x4ce>
 800196c:	464a      	mov	r2, r9
 800196e:	464c      	mov	r4, r9
 8001970:	432a      	orrs	r2, r5
 8001972:	d000      	beq.n	8001976 <__aeabi_dadd+0x42e>
 8001974:	e640      	b.n	80015f8 <__aeabi_dadd+0xb0>
 8001976:	2600      	movs	r6, #0
 8001978:	2400      	movs	r4, #0
 800197a:	2500      	movs	r5, #0
 800197c:	e67c      	b.n	8001678 <__aeabi_dadd+0x130>
 800197e:	4da1      	ldr	r5, [pc, #644]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 8001980:	45a9      	cmp	r9, r5
 8001982:	d100      	bne.n	8001986 <__aeabi_dadd+0x43e>
 8001984:	e090      	b.n	8001aa8 <__aeabi_dadd+0x560>
 8001986:	2501      	movs	r5, #1
 8001988:	2a38      	cmp	r2, #56	@ 0x38
 800198a:	dd00      	ble.n	800198e <__aeabi_dadd+0x446>
 800198c:	e6ab      	b.n	80016e6 <__aeabi_dadd+0x19e>
 800198e:	2580      	movs	r5, #128	@ 0x80
 8001990:	042d      	lsls	r5, r5, #16
 8001992:	432c      	orrs	r4, r5
 8001994:	e695      	b.n	80016c2 <__aeabi_dadd+0x17a>
 8001996:	0011      	movs	r1, r2
 8001998:	4655      	mov	r5, sl
 800199a:	3920      	subs	r1, #32
 800199c:	40cd      	lsrs	r5, r1
 800199e:	46a9      	mov	r9, r5
 80019a0:	2a20      	cmp	r2, #32
 80019a2:	d006      	beq.n	80019b2 <__aeabi_dadd+0x46a>
 80019a4:	2140      	movs	r1, #64	@ 0x40
 80019a6:	4653      	mov	r3, sl
 80019a8:	1a8a      	subs	r2, r1, r2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	4662      	mov	r2, ip
 80019ae:	431a      	orrs	r2, r3
 80019b0:	4694      	mov	ip, r2
 80019b2:	4665      	mov	r5, ip
 80019b4:	1e6b      	subs	r3, r5, #1
 80019b6:	419d      	sbcs	r5, r3
 80019b8:	464b      	mov	r3, r9
 80019ba:	431d      	orrs	r5, r3
 80019bc:	e612      	b.n	80015e4 <__aeabi_dadd+0x9c>
 80019be:	0021      	movs	r1, r4
 80019c0:	4301      	orrs	r1, r0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x47e>
 80019c4:	e0c4      	b.n	8001b50 <__aeabi_dadd+0x608>
 80019c6:	1e51      	subs	r1, r2, #1
 80019c8:	2a01      	cmp	r2, #1
 80019ca:	d100      	bne.n	80019ce <__aeabi_dadd+0x486>
 80019cc:	e0fb      	b.n	8001bc6 <__aeabi_dadd+0x67e>
 80019ce:	4d8d      	ldr	r5, [pc, #564]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80019d0:	42aa      	cmp	r2, r5
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dadd+0x48e>
 80019d4:	e0b5      	b.n	8001b42 <__aeabi_dadd+0x5fa>
 80019d6:	2501      	movs	r5, #1
 80019d8:	2938      	cmp	r1, #56	@ 0x38
 80019da:	dd00      	ble.n	80019de <__aeabi_dadd+0x496>
 80019dc:	e741      	b.n	8001862 <__aeabi_dadd+0x31a>
 80019de:	000a      	movs	r2, r1
 80019e0:	e72f      	b.n	8001842 <__aeabi_dadd+0x2fa>
 80019e2:	4c89      	ldr	r4, [pc, #548]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 80019e4:	1aff      	subs	r7, r7, r3
 80019e6:	4014      	ands	r4, r2
 80019e8:	0762      	lsls	r2, r4, #29
 80019ea:	08e4      	lsrs	r4, r4, #3
 80019ec:	e76a      	b.n	80018c4 <__aeabi_dadd+0x37c>
 80019ee:	4a85      	ldr	r2, [pc, #532]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80019f0:	4291      	cmp	r1, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dadd+0x4ae>
 80019f4:	e0e3      	b.n	8001bbe <__aeabi_dadd+0x676>
 80019f6:	4663      	mov	r3, ip
 80019f8:	18c2      	adds	r2, r0, r3
 80019fa:	4282      	cmp	r2, r0
 80019fc:	4180      	sbcs	r0, r0
 80019fe:	0023      	movs	r3, r4
 8001a00:	4240      	negs	r0, r0
 8001a02:	4453      	add	r3, sl
 8001a04:	181b      	adds	r3, r3, r0
 8001a06:	07dd      	lsls	r5, r3, #31
 8001a08:	085c      	lsrs	r4, r3, #1
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	0852      	lsrs	r2, r2, #1
 8001a0e:	4315      	orrs	r5, r2
 8001a10:	000f      	movs	r7, r1
 8001a12:	402b      	ands	r3, r5
 8001a14:	e700      	b.n	8001818 <__aeabi_dadd+0x2d0>
 8001a16:	4663      	mov	r3, ip
 8001a18:	1a1d      	subs	r5, r3, r0
 8001a1a:	45ac      	cmp	ip, r5
 8001a1c:	4192      	sbcs	r2, r2
 8001a1e:	4653      	mov	r3, sl
 8001a20:	4252      	negs	r2, r2
 8001a22:	1b1c      	subs	r4, r3, r4
 8001a24:	000e      	movs	r6, r1
 8001a26:	4688      	mov	r8, r1
 8001a28:	1aa4      	subs	r4, r4, r2
 8001a2a:	e5e5      	b.n	80015f8 <__aeabi_dadd+0xb0>
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dadd+0x4ea>
 8001a30:	e091      	b.n	8001b56 <__aeabi_dadd+0x60e>
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d138      	bne.n	8001aa8 <__aeabi_dadd+0x560>
 8001a36:	2480      	movs	r4, #128	@ 0x80
 8001a38:	2600      	movs	r6, #0
 8001a3a:	0324      	lsls	r4, r4, #12
 8001a3c:	e756      	b.n	80018ec <__aeabi_dadd+0x3a4>
 8001a3e:	4663      	mov	r3, ip
 8001a40:	18c5      	adds	r5, r0, r3
 8001a42:	4285      	cmp	r5, r0
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	4454      	add	r4, sl
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1824      	adds	r4, r4, r0
 8001a4c:	2701      	movs	r7, #1
 8001a4e:	0223      	lsls	r3, r4, #8
 8001a50:	d400      	bmi.n	8001a54 <__aeabi_dadd+0x50c>
 8001a52:	e6df      	b.n	8001814 <__aeabi_dadd+0x2cc>
 8001a54:	2702      	movs	r7, #2
 8001a56:	e687      	b.n	8001768 <__aeabi_dadd+0x220>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	1ac5      	subs	r5, r0, r3
 8001a5c:	42a8      	cmp	r0, r5
 8001a5e:	4180      	sbcs	r0, r0
 8001a60:	4653      	mov	r3, sl
 8001a62:	4240      	negs	r0, r0
 8001a64:	1ae4      	subs	r4, r4, r3
 8001a66:	2701      	movs	r7, #1
 8001a68:	1a24      	subs	r4, r4, r0
 8001a6a:	e5c0      	b.n	80015ee <__aeabi_dadd+0xa6>
 8001a6c:	0762      	lsls	r2, r4, #29
 8001a6e:	08c0      	lsrs	r0, r0, #3
 8001a70:	4302      	orrs	r2, r0
 8001a72:	08e4      	lsrs	r4, r4, #3
 8001a74:	e736      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001a76:	0011      	movs	r1, r2
 8001a78:	4653      	mov	r3, sl
 8001a7a:	3920      	subs	r1, #32
 8001a7c:	40cb      	lsrs	r3, r1
 8001a7e:	4699      	mov	r9, r3
 8001a80:	2a20      	cmp	r2, #32
 8001a82:	d006      	beq.n	8001a92 <__aeabi_dadd+0x54a>
 8001a84:	2140      	movs	r1, #64	@ 0x40
 8001a86:	4653      	mov	r3, sl
 8001a88:	1a8a      	subs	r2, r1, r2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	4662      	mov	r2, ip
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	4694      	mov	ip, r2
 8001a92:	4665      	mov	r5, ip
 8001a94:	1e6b      	subs	r3, r5, #1
 8001a96:	419d      	sbcs	r5, r3
 8001a98:	464b      	mov	r3, r9
 8001a9a:	431d      	orrs	r5, r3
 8001a9c:	e659      	b.n	8001752 <__aeabi_dadd+0x20a>
 8001a9e:	0762      	lsls	r2, r4, #29
 8001aa0:	08c0      	lsrs	r0, r0, #3
 8001aa2:	4302      	orrs	r2, r0
 8001aa4:	08e4      	lsrs	r4, r4, #3
 8001aa6:	e70d      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001aa8:	4653      	mov	r3, sl
 8001aaa:	075a      	lsls	r2, r3, #29
 8001aac:	4663      	mov	r3, ip
 8001aae:	08d8      	lsrs	r0, r3, #3
 8001ab0:	4653      	mov	r3, sl
 8001ab2:	000e      	movs	r6, r1
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	08dc      	lsrs	r4, r3, #3
 8001ab8:	e714      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001aba:	0015      	movs	r5, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	3d20      	subs	r5, #32
 8001ac0:	40ee      	lsrs	r6, r5
 8001ac2:	2a20      	cmp	r2, #32
 8001ac4:	d003      	beq.n	8001ace <__aeabi_dadd+0x586>
 8001ac6:	2540      	movs	r5, #64	@ 0x40
 8001ac8:	1aaa      	subs	r2, r5, r2
 8001aca:	4094      	lsls	r4, r2
 8001acc:	4320      	orrs	r0, r4
 8001ace:	1e42      	subs	r2, r0, #1
 8001ad0:	4190      	sbcs	r0, r2
 8001ad2:	0005      	movs	r5, r0
 8001ad4:	4335      	orrs	r5, r6
 8001ad6:	e606      	b.n	80016e6 <__aeabi_dadd+0x19e>
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d07c      	beq.n	8001bd6 <__aeabi_dadd+0x68e>
 8001adc:	4662      	mov	r2, ip
 8001ade:	4653      	mov	r3, sl
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dadd+0x5a0>
 8001ae6:	e6fa      	b.n	80018de <__aeabi_dadd+0x396>
 8001ae8:	0762      	lsls	r2, r4, #29
 8001aea:	4310      	orrs	r0, r2
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	08e4      	lsrs	r4, r4, #3
 8001af0:	0312      	lsls	r2, r2, #12
 8001af2:	4214      	tst	r4, r2
 8001af4:	d008      	beq.n	8001b08 <__aeabi_dadd+0x5c0>
 8001af6:	08d9      	lsrs	r1, r3, #3
 8001af8:	4211      	tst	r1, r2
 8001afa:	d105      	bne.n	8001b08 <__aeabi_dadd+0x5c0>
 8001afc:	4663      	mov	r3, ip
 8001afe:	08d8      	lsrs	r0, r3, #3
 8001b00:	4653      	mov	r3, sl
 8001b02:	000c      	movs	r4, r1
 8001b04:	075b      	lsls	r3, r3, #29
 8001b06:	4318      	orrs	r0, r3
 8001b08:	0f42      	lsrs	r2, r0, #29
 8001b0a:	00c0      	lsls	r0, r0, #3
 8001b0c:	08c0      	lsrs	r0, r0, #3
 8001b0e:	0752      	lsls	r2, r2, #29
 8001b10:	4302      	orrs	r2, r0
 8001b12:	e6e7      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x5d2>
 8001b18:	e72d      	b.n	8001976 <__aeabi_dadd+0x42e>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	08d8      	lsrs	r0, r3, #3
 8001b1e:	4653      	mov	r3, sl
 8001b20:	075a      	lsls	r2, r3, #29
 8001b22:	000e      	movs	r6, r1
 8001b24:	4302      	orrs	r2, r0
 8001b26:	08dc      	lsrs	r4, r3, #3
 8001b28:	e6cc      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	1a1d      	subs	r5, r3, r0
 8001b2e:	45ac      	cmp	ip, r5
 8001b30:	4192      	sbcs	r2, r2
 8001b32:	4653      	mov	r3, sl
 8001b34:	4252      	negs	r2, r2
 8001b36:	1b1c      	subs	r4, r3, r4
 8001b38:	000e      	movs	r6, r1
 8001b3a:	4688      	mov	r8, r1
 8001b3c:	1aa4      	subs	r4, r4, r2
 8001b3e:	3701      	adds	r7, #1
 8001b40:	e555      	b.n	80015ee <__aeabi_dadd+0xa6>
 8001b42:	4663      	mov	r3, ip
 8001b44:	08d9      	lsrs	r1, r3, #3
 8001b46:	4653      	mov	r3, sl
 8001b48:	075a      	lsls	r2, r3, #29
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	08dc      	lsrs	r4, r3, #3
 8001b4e:	e6c9      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001b50:	4660      	mov	r0, ip
 8001b52:	4654      	mov	r4, sl
 8001b54:	e6d4      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001b56:	08c0      	lsrs	r0, r0, #3
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x616>
 8001b5c:	e6bf      	b.n	80018de <__aeabi_dadd+0x396>
 8001b5e:	0762      	lsls	r2, r4, #29
 8001b60:	4310      	orrs	r0, r2
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	0312      	lsls	r2, r2, #12
 8001b68:	4214      	tst	r4, r2
 8001b6a:	d0cd      	beq.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b6c:	08dd      	lsrs	r5, r3, #3
 8001b6e:	4215      	tst	r5, r2
 8001b70:	d1ca      	bne.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b72:	4663      	mov	r3, ip
 8001b74:	08d8      	lsrs	r0, r3, #3
 8001b76:	4653      	mov	r3, sl
 8001b78:	075b      	lsls	r3, r3, #29
 8001b7a:	000e      	movs	r6, r1
 8001b7c:	002c      	movs	r4, r5
 8001b7e:	4318      	orrs	r0, r3
 8001b80:	e7c2      	b.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b82:	4663      	mov	r3, ip
 8001b84:	08d9      	lsrs	r1, r3, #3
 8001b86:	4653      	mov	r3, sl
 8001b88:	075a      	lsls	r2, r3, #29
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	08dc      	lsrs	r4, r3, #3
 8001b8e:	e699      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	075a      	lsls	r2, r3, #29
 8001b98:	000e      	movs	r6, r1
 8001b9a:	4302      	orrs	r2, r0
 8001b9c:	08dc      	lsrs	r4, r3, #3
 8001b9e:	e6a1      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0027      	movs	r7, r4
 8001ba4:	3920      	subs	r1, #32
 8001ba6:	40cf      	lsrs	r7, r1
 8001ba8:	2a20      	cmp	r2, #32
 8001baa:	d003      	beq.n	8001bb4 <__aeabi_dadd+0x66c>
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	1a8a      	subs	r2, r1, r2
 8001bb0:	4094      	lsls	r4, r2
 8001bb2:	4320      	orrs	r0, r4
 8001bb4:	1e42      	subs	r2, r0, #1
 8001bb6:	4190      	sbcs	r0, r2
 8001bb8:	0005      	movs	r5, r0
 8001bba:	433d      	orrs	r5, r7
 8001bbc:	e651      	b.n	8001862 <__aeabi_dadd+0x31a>
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	e558      	b.n	8001678 <__aeabi_dadd+0x130>
 8001bc6:	4460      	add	r0, ip
 8001bc8:	4560      	cmp	r0, ip
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	4454      	add	r4, sl
 8001bce:	4252      	negs	r2, r2
 8001bd0:	0005      	movs	r5, r0
 8001bd2:	18a4      	adds	r4, r4, r2
 8001bd4:	e73a      	b.n	8001a4c <__aeabi_dadd+0x504>
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	075a      	lsls	r2, r3, #29
 8001bda:	4663      	mov	r3, ip
 8001bdc:	08d9      	lsrs	r1, r3, #3
 8001bde:	4653      	mov	r3, sl
 8001be0:	430a      	orrs	r2, r1
 8001be2:	08dc      	lsrs	r4, r3, #3
 8001be4:	e67e      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001be6:	001a      	movs	r2, r3
 8001be8:	001c      	movs	r4, r3
 8001bea:	432a      	orrs	r2, r5
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_dadd+0x6a8>
 8001bee:	e6ab      	b.n	8001948 <__aeabi_dadd+0x400>
 8001bf0:	e6c1      	b.n	8001976 <__aeabi_dadd+0x42e>
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	1a09      	subs	r1, r1, r0
 8001bf8:	e519      	b.n	800162e <__aeabi_dadd+0xe6>
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4c01      	ldr	r4, [pc, #4]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 8001c00:	e53a      	b.n	8001678 <__aeabi_dadd+0x130>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	000007ff 	.word	0x000007ff
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	000007fe 	.word	0x000007fe

08001c10 <__aeabi_ddiv>:
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	46de      	mov	lr, fp
 8001c14:	4645      	mov	r5, r8
 8001c16:	4657      	mov	r7, sl
 8001c18:	464e      	mov	r6, r9
 8001c1a:	b5e0      	push	{r5, r6, r7, lr}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	030b      	lsls	r3, r1, #12
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	469b      	mov	fp, r3
 8001c28:	0fca      	lsrs	r2, r1, #31
 8001c2a:	004b      	lsls	r3, r1, #1
 8001c2c:	0004      	movs	r4, r0
 8001c2e:	4680      	mov	r8, r0
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x28>
 8001c36:	e16a      	b.n	8001f0e <__aeabi_ddiv+0x2fe>
 8001c38:	4ad4      	ldr	r2, [pc, #848]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_ddiv+0x30>
 8001c3e:	e18c      	b.n	8001f5a <__aeabi_ddiv+0x34a>
 8001c40:	4659      	mov	r1, fp
 8001c42:	0f42      	lsrs	r2, r0, #29
 8001c44:	00c9      	lsls	r1, r1, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0409      	lsls	r1, r1, #16
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	00c2      	lsls	r2, r0, #3
 8001c50:	4690      	mov	r8, r2
 8001c52:	4acf      	ldr	r2, [pc, #828]	@ (8001f90 <__aeabi_ddiv+0x380>)
 8001c54:	4689      	mov	r9, r1
 8001c56:	4692      	mov	sl, r2
 8001c58:	449a      	add	sl, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	9e00      	ldr	r6, [sp, #0]
 8001c62:	9f01      	ldr	r7, [sp, #4]
 8001c64:	033b      	lsls	r3, r7, #12
 8001c66:	0b1b      	lsrs	r3, r3, #12
 8001c68:	469b      	mov	fp, r3
 8001c6a:	007b      	lsls	r3, r7, #1
 8001c6c:	0030      	movs	r0, r6
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	0ffd      	lsrs	r5, r7, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x68>
 8001c76:	e128      	b.n	8001eca <__aeabi_ddiv+0x2ba>
 8001c78:	4ac4      	ldr	r2, [pc, #784]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x70>
 8001c7e:	e177      	b.n	8001f70 <__aeabi_ddiv+0x360>
 8001c80:	4659      	mov	r1, fp
 8001c82:	0f72      	lsrs	r2, r6, #29
 8001c84:	00c9      	lsls	r1, r1, #3
 8001c86:	430a      	orrs	r2, r1
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	468b      	mov	fp, r1
 8001c90:	49bf      	ldr	r1, [pc, #764]	@ (8001f90 <__aeabi_ddiv+0x380>)
 8001c92:	00f2      	lsls	r2, r6, #3
 8001c94:	468c      	mov	ip, r1
 8001c96:	4651      	mov	r1, sl
 8001c98:	4463      	add	r3, ip
 8001c9a:	1acb      	subs	r3, r1, r3
 8001c9c:	469a      	mov	sl, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9e02      	ldr	r6, [sp, #8]
 8001ca2:	406e      	eors	r6, r5
 8001ca4:	2c0f      	cmp	r4, #15
 8001ca6:	d827      	bhi.n	8001cf8 <__aeabi_ddiv+0xe8>
 8001ca8:	49ba      	ldr	r1, [pc, #744]	@ (8001f94 <__aeabi_ddiv+0x384>)
 8001caa:	00a4      	lsls	r4, r4, #2
 8001cac:	5909      	ldr	r1, [r1, r4]
 8001cae:	468f      	mov	pc, r1
 8001cb0:	46cb      	mov	fp, r9
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	9e02      	ldr	r6, [sp, #8]
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d016      	beq.n	8001cea <__aeabi_ddiv+0xda>
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0xb2>
 8001cc0:	e2a6      	b.n	8002210 <__aeabi_ddiv+0x600>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_ddiv+0xb8>
 8001cc6:	e0df      	b.n	8001e88 <__aeabi_ddiv+0x278>
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2400      	movs	r4, #0
 8001cce:	4690      	mov	r8, r2
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	07f6      	lsls	r6, r6, #31
 8001cd6:	4333      	orrs	r3, r6
 8001cd8:	4640      	mov	r0, r8
 8001cda:	0019      	movs	r1, r3
 8001cdc:	b007      	add	sp, #28
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	46bb      	mov	fp, r7
 8001ce2:	46b2      	mov	sl, r6
 8001ce4:	46a9      	mov	r9, r5
 8001ce6:	46a0      	mov	r8, r4
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cea:	2200      	movs	r2, #0
 8001cec:	2400      	movs	r4, #0
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001cf2:	e7ed      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001cf4:	002e      	movs	r6, r5
 8001cf6:	e7df      	b.n	8001cb8 <__aeabi_ddiv+0xa8>
 8001cf8:	45cb      	cmp	fp, r9
 8001cfa:	d200      	bcs.n	8001cfe <__aeabi_ddiv+0xee>
 8001cfc:	e1d4      	b.n	80020a8 <__aeabi_ddiv+0x498>
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0xf2>
 8001d00:	e1cf      	b.n	80020a2 <__aeabi_ddiv+0x492>
 8001d02:	2301      	movs	r3, #1
 8001d04:	425b      	negs	r3, r3
 8001d06:	469c      	mov	ip, r3
 8001d08:	4644      	mov	r4, r8
 8001d0a:	4648      	mov	r0, r9
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	44e2      	add	sl, ip
 8001d10:	465b      	mov	r3, fp
 8001d12:	0e15      	lsrs	r5, r2, #24
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	431d      	orrs	r5, r3
 8001d18:	0c19      	lsrs	r1, r3, #16
 8001d1a:	042b      	lsls	r3, r5, #16
 8001d1c:	0212      	lsls	r2, r2, #8
 8001d1e:	9500      	str	r5, [sp, #0]
 8001d20:	0c1d      	lsrs	r5, r3, #16
 8001d22:	4691      	mov	r9, r2
 8001d24:	9102      	str	r1, [sp, #8]
 8001d26:	9503      	str	r5, [sp, #12]
 8001d28:	f7fe fa84 	bl	8000234 <__aeabi_uidivmod>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	436a      	muls	r2, r5
 8001d30:	040b      	lsls	r3, r1, #16
 8001d32:	0c21      	lsrs	r1, r4, #16
 8001d34:	4680      	mov	r8, r0
 8001d36:	4319      	orrs	r1, r3
 8001d38:	428a      	cmp	r2, r1
 8001d3a:	d909      	bls.n	8001d50 <__aeabi_ddiv+0x140>
 8001d3c:	9d00      	ldr	r5, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	46ac      	mov	ip, r5
 8001d42:	425b      	negs	r3, r3
 8001d44:	4461      	add	r1, ip
 8001d46:	469c      	mov	ip, r3
 8001d48:	44e0      	add	r8, ip
 8001d4a:	428d      	cmp	r5, r1
 8001d4c:	d800      	bhi.n	8001d50 <__aeabi_ddiv+0x140>
 8001d4e:	e1fb      	b.n	8002148 <__aeabi_ddiv+0x538>
 8001d50:	1a88      	subs	r0, r1, r2
 8001d52:	9902      	ldr	r1, [sp, #8]
 8001d54:	f7fe fa6e 	bl	8000234 <__aeabi_uidivmod>
 8001d58:	9a03      	ldr	r2, [sp, #12]
 8001d5a:	0424      	lsls	r4, r4, #16
 8001d5c:	4342      	muls	r2, r0
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	0c24      	lsrs	r4, r4, #16
 8001d62:	0003      	movs	r3, r0
 8001d64:	430c      	orrs	r4, r1
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d906      	bls.n	8001d78 <__aeabi_ddiv+0x168>
 8001d6a:	9900      	ldr	r1, [sp, #0]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	468c      	mov	ip, r1
 8001d70:	4464      	add	r4, ip
 8001d72:	42a1      	cmp	r1, r4
 8001d74:	d800      	bhi.n	8001d78 <__aeabi_ddiv+0x168>
 8001d76:	e1e1      	b.n	800213c <__aeabi_ddiv+0x52c>
 8001d78:	1aa0      	subs	r0, r4, r2
 8001d7a:	4642      	mov	r2, r8
 8001d7c:	0412      	lsls	r2, r2, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	4693      	mov	fp, r2
 8001d82:	464b      	mov	r3, r9
 8001d84:	4659      	mov	r1, fp
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	001d      	movs	r5, r3
 8001d8a:	9304      	str	r3, [sp, #16]
 8001d8c:	040b      	lsls	r3, r1, #16
 8001d8e:	4649      	mov	r1, r9
 8001d90:	0409      	lsls	r1, r1, #16
 8001d92:	0c09      	lsrs	r1, r1, #16
 8001d94:	000c      	movs	r4, r1
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	435c      	muls	r4, r3
 8001d9a:	0c12      	lsrs	r2, r2, #16
 8001d9c:	436b      	muls	r3, r5
 8001d9e:	4688      	mov	r8, r1
 8001da0:	4351      	muls	r1, r2
 8001da2:	436a      	muls	r2, r5
 8001da4:	0c25      	lsrs	r5, r4, #16
 8001da6:	46ac      	mov	ip, r5
 8001da8:	185b      	adds	r3, r3, r1
 8001daa:	4463      	add	r3, ip
 8001dac:	4299      	cmp	r1, r3
 8001dae:	d903      	bls.n	8001db8 <__aeabi_ddiv+0x1a8>
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	0249      	lsls	r1, r1, #9
 8001db4:	468c      	mov	ip, r1
 8001db6:	4462      	add	r2, ip
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	0424      	lsls	r4, r4, #16
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	0c24      	lsrs	r4, r4, #16
 8001dc0:	188a      	adds	r2, r1, r2
 8001dc2:	191c      	adds	r4, r3, r4
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d302      	bcc.n	8001dce <__aeabi_ddiv+0x1be>
 8001dc8:	d116      	bne.n	8001df8 <__aeabi_ddiv+0x1e8>
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	d214      	bcs.n	8001df8 <__aeabi_ddiv+0x1e8>
 8001dce:	465b      	mov	r3, fp
 8001dd0:	9d00      	ldr	r5, [sp, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	444f      	add	r7, r9
 8001dd6:	9305      	str	r3, [sp, #20]
 8001dd8:	454f      	cmp	r7, r9
 8001dda:	419b      	sbcs	r3, r3
 8001ddc:	46ac      	mov	ip, r5
 8001dde:	425b      	negs	r3, r3
 8001de0:	4463      	add	r3, ip
 8001de2:	18c0      	adds	r0, r0, r3
 8001de4:	4285      	cmp	r5, r0
 8001de6:	d300      	bcc.n	8001dea <__aeabi_ddiv+0x1da>
 8001de8:	e1a1      	b.n	800212e <__aeabi_ddiv+0x51e>
 8001dea:	4282      	cmp	r2, r0
 8001dec:	d900      	bls.n	8001df0 <__aeabi_ddiv+0x1e0>
 8001dee:	e1f6      	b.n	80021de <__aeabi_ddiv+0x5ce>
 8001df0:	d100      	bne.n	8001df4 <__aeabi_ddiv+0x1e4>
 8001df2:	e1f1      	b.n	80021d8 <__aeabi_ddiv+0x5c8>
 8001df4:	9b05      	ldr	r3, [sp, #20]
 8001df6:	469b      	mov	fp, r3
 8001df8:	1b3c      	subs	r4, r7, r4
 8001dfa:	42a7      	cmp	r7, r4
 8001dfc:	41bf      	sbcs	r7, r7
 8001dfe:	9d00      	ldr	r5, [sp, #0]
 8001e00:	1a80      	subs	r0, r0, r2
 8001e02:	427f      	negs	r7, r7
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	4285      	cmp	r5, r0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_ddiv+0x1fc>
 8001e0a:	e1d0      	b.n	80021ae <__aeabi_ddiv+0x59e>
 8001e0c:	9902      	ldr	r1, [sp, #8]
 8001e0e:	f7fe fa11 	bl	8000234 <__aeabi_uidivmod>
 8001e12:	9a03      	ldr	r2, [sp, #12]
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	4342      	muls	r2, r0
 8001e18:	0c21      	lsrs	r1, r4, #16
 8001e1a:	0007      	movs	r7, r0
 8001e1c:	4319      	orrs	r1, r3
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x214>
 8001e22:	e178      	b.n	8002116 <__aeabi_ddiv+0x506>
 8001e24:	1a88      	subs	r0, r1, r2
 8001e26:	9902      	ldr	r1, [sp, #8]
 8001e28:	f7fe fa04 	bl	8000234 <__aeabi_uidivmod>
 8001e2c:	9a03      	ldr	r2, [sp, #12]
 8001e2e:	0424      	lsls	r4, r4, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0409      	lsls	r1, r1, #16
 8001e34:	0c24      	lsrs	r4, r4, #16
 8001e36:	0003      	movs	r3, r0
 8001e38:	430c      	orrs	r4, r1
 8001e3a:	42a2      	cmp	r2, r4
 8001e3c:	d900      	bls.n	8001e40 <__aeabi_ddiv+0x230>
 8001e3e:	e15d      	b.n	80020fc <__aeabi_ddiv+0x4ec>
 8001e40:	4641      	mov	r1, r8
 8001e42:	1aa4      	subs	r4, r4, r2
 8001e44:	043a      	lsls	r2, r7, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	9d04      	ldr	r5, [sp, #16]
 8001e4a:	0413      	lsls	r3, r2, #16
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	4359      	muls	r1, r3
 8001e50:	4647      	mov	r7, r8
 8001e52:	436b      	muls	r3, r5
 8001e54:	469c      	mov	ip, r3
 8001e56:	0c10      	lsrs	r0, r2, #16
 8001e58:	4347      	muls	r7, r0
 8001e5a:	0c0b      	lsrs	r3, r1, #16
 8001e5c:	44bc      	add	ip, r7
 8001e5e:	4463      	add	r3, ip
 8001e60:	4368      	muls	r0, r5
 8001e62:	429f      	cmp	r7, r3
 8001e64:	d903      	bls.n	8001e6e <__aeabi_ddiv+0x25e>
 8001e66:	2580      	movs	r5, #128	@ 0x80
 8001e68:	026d      	lsls	r5, r5, #9
 8001e6a:	46ac      	mov	ip, r5
 8001e6c:	4460      	add	r0, ip
 8001e6e:	0c1f      	lsrs	r7, r3, #16
 8001e70:	0409      	lsls	r1, r1, #16
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	0c09      	lsrs	r1, r1, #16
 8001e76:	183f      	adds	r7, r7, r0
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	42bc      	cmp	r4, r7
 8001e7c:	d200      	bcs.n	8001e80 <__aeabi_ddiv+0x270>
 8001e7e:	e102      	b.n	8002086 <__aeabi_ddiv+0x476>
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x274>
 8001e82:	e0fd      	b.n	8002080 <__aeabi_ddiv+0x470>
 8001e84:	2301      	movs	r3, #1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <__aeabi_ddiv+0x388>)
 8001e8a:	4453      	add	r3, sl
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_ddiv+0x282>
 8001e90:	e0ae      	b.n	8001ff0 <__aeabi_ddiv+0x3e0>
 8001e92:	0751      	lsls	r1, r2, #29
 8001e94:	d000      	beq.n	8001e98 <__aeabi_ddiv+0x288>
 8001e96:	e198      	b.n	80021ca <__aeabi_ddiv+0x5ba>
 8001e98:	4659      	mov	r1, fp
 8001e9a:	01c9      	lsls	r1, r1, #7
 8001e9c:	d506      	bpl.n	8001eac <__aeabi_ddiv+0x29c>
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <__aeabi_ddiv+0x38c>)
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	468b      	mov	fp, r1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4453      	add	r3, sl
 8001eac:	493c      	ldr	r1, [pc, #240]	@ (8001fa0 <__aeabi_ddiv+0x390>)
 8001eae:	428b      	cmp	r3, r1
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_ddiv+0x2a4>
 8001eb2:	e71a      	b.n	8001cea <__aeabi_ddiv+0xda>
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	08d2      	lsrs	r2, r2, #3
 8001eb8:	0749      	lsls	r1, r1, #29
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	465a      	mov	r2, fp
 8001ebe:	055b      	lsls	r3, r3, #21
 8001ec0:	0254      	lsls	r4, r2, #9
 8001ec2:	4688      	mov	r8, r1
 8001ec4:	0b24      	lsrs	r4, r4, #12
 8001ec6:	0d5b      	lsrs	r3, r3, #21
 8001ec8:	e702      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001eca:	465a      	mov	r2, fp
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x2c4>
 8001ed2:	e07e      	b.n	8001fd2 <__aeabi_ddiv+0x3c2>
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_ddiv+0x2cc>
 8001eda:	e100      	b.n	80020de <__aeabi_ddiv+0x4ce>
 8001edc:	4658      	mov	r0, fp
 8001ede:	f001 fa99 	bl	8003414 <__clzsi2>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	3a0b      	subs	r2, #11
 8001ee8:	271d      	movs	r7, #29
 8001eea:	9e00      	ldr	r6, [sp, #0]
 8001eec:	1aba      	subs	r2, r7, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	4658      	mov	r0, fp
 8001ef2:	40d6      	lsrs	r6, r2
 8001ef4:	3908      	subs	r1, #8
 8001ef6:	4088      	lsls	r0, r1
 8001ef8:	0032      	movs	r2, r6
 8001efa:	4302      	orrs	r2, r0
 8001efc:	4693      	mov	fp, r2
 8001efe:	9a00      	ldr	r2, [sp, #0]
 8001f00:	408a      	lsls	r2, r1
 8001f02:	4928      	ldr	r1, [pc, #160]	@ (8001fa4 <__aeabi_ddiv+0x394>)
 8001f04:	4453      	add	r3, sl
 8001f06:	468a      	mov	sl, r1
 8001f08:	449a      	add	sl, r3
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e6c8      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001f0e:	465b      	mov	r3, fp
 8001f10:	4303      	orrs	r3, r0
 8001f12:	4699      	mov	r9, r3
 8001f14:	d056      	beq.n	8001fc4 <__aeabi_ddiv+0x3b4>
 8001f16:	465b      	mov	r3, fp
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x30e>
 8001f1c:	e0cd      	b.n	80020ba <__aeabi_ddiv+0x4aa>
 8001f1e:	4658      	mov	r0, fp
 8001f20:	f001 fa78 	bl	8003414 <__clzsi2>
 8001f24:	230b      	movs	r3, #11
 8001f26:	425b      	negs	r3, r3
 8001f28:	469c      	mov	ip, r3
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	4484      	add	ip, r0
 8001f2e:	4666      	mov	r6, ip
 8001f30:	231d      	movs	r3, #29
 8001f32:	1b9b      	subs	r3, r3, r6
 8001f34:	0026      	movs	r6, r4
 8001f36:	0011      	movs	r1, r2
 8001f38:	4658      	mov	r0, fp
 8001f3a:	40de      	lsrs	r6, r3
 8001f3c:	3908      	subs	r1, #8
 8001f3e:	4088      	lsls	r0, r1
 8001f40:	0033      	movs	r3, r6
 8001f42:	4303      	orrs	r3, r0
 8001f44:	4699      	mov	r9, r3
 8001f46:	0023      	movs	r3, r4
 8001f48:	408b      	lsls	r3, r1
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <__aeabi_ddiv+0x398>)
 8001f4e:	2400      	movs	r4, #0
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	469a      	mov	sl, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	e682      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001f5a:	465a      	mov	r2, fp
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	4691      	mov	r9, r2
 8001f60:	d12a      	bne.n	8001fb8 <__aeabi_ddiv+0x3a8>
 8001f62:	2200      	movs	r2, #0
 8001f64:	469a      	mov	sl, r3
 8001f66:	2302      	movs	r3, #2
 8001f68:	4690      	mov	r8, r2
 8001f6a:	2408      	movs	r4, #8
 8001f6c:	9303      	str	r3, [sp, #12]
 8001f6e:	e677      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001f70:	465a      	mov	r2, fp
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <__aeabi_ddiv+0x39c>)
 8001f78:	469c      	mov	ip, r3
 8001f7a:	44e2      	add	sl, ip
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d117      	bne.n	8001fb0 <__aeabi_ddiv+0x3a0>
 8001f80:	2302      	movs	r3, #2
 8001f82:	431c      	orrs	r4, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	469b      	mov	fp, r3
 8001f88:	3302      	adds	r3, #2
 8001f8a:	e689      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001f8c:	000007ff 	.word	0x000007ff
 8001f90:	fffffc01 	.word	0xfffffc01
 8001f94:	0801949c 	.word	0x0801949c
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	feffffff 	.word	0xfeffffff
 8001fa0:	000007fe 	.word	0x000007fe
 8001fa4:	000003f3 	.word	0x000003f3
 8001fa8:	fffffc0d 	.word	0xfffffc0d
 8001fac:	fffff801 	.word	0xfffff801
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	0032      	movs	r2, r6
 8001fb4:	431c      	orrs	r4, r3
 8001fb6:	e673      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001fb8:	469a      	mov	sl, r3
 8001fba:	2303      	movs	r3, #3
 8001fbc:	46d9      	mov	r9, fp
 8001fbe:	240c      	movs	r4, #12
 8001fc0:	9303      	str	r3, [sp, #12]
 8001fc2:	e64d      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	469a      	mov	sl, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	2404      	movs	r4, #4
 8001fce:	9303      	str	r3, [sp, #12]
 8001fd0:	e646      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	431c      	orrs	r4, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	469b      	mov	fp, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	e660      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2480      	movs	r4, #128	@ 0x80
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	4b92      	ldr	r3, [pc, #584]	@ (8002230 <__aeabi_ddiv+0x620>)
 8001fe8:	0324      	lsls	r4, r4, #12
 8001fea:	e671      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001fec:	2201      	movs	r2, #1
 8001fee:	4252      	negs	r2, r2
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	1ac9      	subs	r1, r1, r3
 8001ff4:	2938      	cmp	r1, #56	@ 0x38
 8001ff6:	dd00      	ble.n	8001ffa <__aeabi_ddiv+0x3ea>
 8001ff8:	e666      	b.n	8001cc8 <__aeabi_ddiv+0xb8>
 8001ffa:	291f      	cmp	r1, #31
 8001ffc:	dc00      	bgt.n	8002000 <__aeabi_ddiv+0x3f0>
 8001ffe:	e0ab      	b.n	8002158 <__aeabi_ddiv+0x548>
 8002000:	201f      	movs	r0, #31
 8002002:	4240      	negs	r0, r0
 8002004:	1ac3      	subs	r3, r0, r3
 8002006:	4658      	mov	r0, fp
 8002008:	40d8      	lsrs	r0, r3
 800200a:	0003      	movs	r3, r0
 800200c:	2920      	cmp	r1, #32
 800200e:	d004      	beq.n	800201a <__aeabi_ddiv+0x40a>
 8002010:	4658      	mov	r0, fp
 8002012:	4988      	ldr	r1, [pc, #544]	@ (8002234 <__aeabi_ddiv+0x624>)
 8002014:	4451      	add	r1, sl
 8002016:	4088      	lsls	r0, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	1e51      	subs	r1, r2, #1
 800201c:	418a      	sbcs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	2307      	movs	r3, #7
 8002022:	0019      	movs	r1, r3
 8002024:	2400      	movs	r4, #0
 8002026:	4011      	ands	r1, r2
 8002028:	4213      	tst	r3, r2
 800202a:	d00c      	beq.n	8002046 <__aeabi_ddiv+0x436>
 800202c:	230f      	movs	r3, #15
 800202e:	4013      	ands	r3, r2
 8002030:	2b04      	cmp	r3, #4
 8002032:	d100      	bne.n	8002036 <__aeabi_ddiv+0x426>
 8002034:	e0f9      	b.n	800222a <__aeabi_ddiv+0x61a>
 8002036:	1d11      	adds	r1, r2, #4
 8002038:	4291      	cmp	r1, r2
 800203a:	419b      	sbcs	r3, r3
 800203c:	000a      	movs	r2, r1
 800203e:	425b      	negs	r3, r3
 8002040:	0759      	lsls	r1, r3, #29
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	0b1c      	lsrs	r4, r3, #12
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	430a      	orrs	r2, r1
 800204a:	4690      	mov	r8, r2
 800204c:	2300      	movs	r3, #0
 800204e:	e63f      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002050:	2480      	movs	r4, #128	@ 0x80
 8002052:	464b      	mov	r3, r9
 8002054:	0324      	lsls	r4, r4, #12
 8002056:	4223      	tst	r3, r4
 8002058:	d009      	beq.n	800206e <__aeabi_ddiv+0x45e>
 800205a:	465b      	mov	r3, fp
 800205c:	4223      	tst	r3, r4
 800205e:	d106      	bne.n	800206e <__aeabi_ddiv+0x45e>
 8002060:	431c      	orrs	r4, r3
 8002062:	0324      	lsls	r4, r4, #12
 8002064:	002e      	movs	r6, r5
 8002066:	4690      	mov	r8, r2
 8002068:	4b71      	ldr	r3, [pc, #452]	@ (8002230 <__aeabi_ddiv+0x620>)
 800206a:	0b24      	lsrs	r4, r4, #12
 800206c:	e630      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 800206e:	2480      	movs	r4, #128	@ 0x80
 8002070:	464b      	mov	r3, r9
 8002072:	0324      	lsls	r4, r4, #12
 8002074:	431c      	orrs	r4, r3
 8002076:	0324      	lsls	r4, r4, #12
 8002078:	9e02      	ldr	r6, [sp, #8]
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <__aeabi_ddiv+0x620>)
 800207c:	0b24      	lsrs	r4, r4, #12
 800207e:	e627      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d100      	bne.n	8002086 <__aeabi_ddiv+0x476>
 8002084:	e700      	b.n	8001e88 <__aeabi_ddiv+0x278>
 8002086:	9800      	ldr	r0, [sp, #0]
 8002088:	1e51      	subs	r1, r2, #1
 800208a:	4684      	mov	ip, r0
 800208c:	4464      	add	r4, ip
 800208e:	4284      	cmp	r4, r0
 8002090:	d200      	bcs.n	8002094 <__aeabi_ddiv+0x484>
 8002092:	e084      	b.n	800219e <__aeabi_ddiv+0x58e>
 8002094:	42bc      	cmp	r4, r7
 8002096:	d200      	bcs.n	800209a <__aeabi_ddiv+0x48a>
 8002098:	e0ae      	b.n	80021f8 <__aeabi_ddiv+0x5e8>
 800209a:	d100      	bne.n	800209e <__aeabi_ddiv+0x48e>
 800209c:	e0c1      	b.n	8002222 <__aeabi_ddiv+0x612>
 800209e:	000a      	movs	r2, r1
 80020a0:	e6f0      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80020a2:	4542      	cmp	r2, r8
 80020a4:	d900      	bls.n	80020a8 <__aeabi_ddiv+0x498>
 80020a6:	e62c      	b.n	8001d02 <__aeabi_ddiv+0xf2>
 80020a8:	464b      	mov	r3, r9
 80020aa:	07dc      	lsls	r4, r3, #31
 80020ac:	0858      	lsrs	r0, r3, #1
 80020ae:	4643      	mov	r3, r8
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	431c      	orrs	r4, r3
 80020b4:	4643      	mov	r3, r8
 80020b6:	07df      	lsls	r7, r3, #31
 80020b8:	e62a      	b.n	8001d10 <__aeabi_ddiv+0x100>
 80020ba:	f001 f9ab 	bl	8003414 <__clzsi2>
 80020be:	2315      	movs	r3, #21
 80020c0:	469c      	mov	ip, r3
 80020c2:	4484      	add	ip, r0
 80020c4:	0002      	movs	r2, r0
 80020c6:	4663      	mov	r3, ip
 80020c8:	3220      	adds	r2, #32
 80020ca:	2b1c      	cmp	r3, #28
 80020cc:	dc00      	bgt.n	80020d0 <__aeabi_ddiv+0x4c0>
 80020ce:	e72e      	b.n	8001f2e <__aeabi_ddiv+0x31e>
 80020d0:	0023      	movs	r3, r4
 80020d2:	3808      	subs	r0, #8
 80020d4:	4083      	lsls	r3, r0
 80020d6:	4699      	mov	r9, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	4698      	mov	r8, r3
 80020dc:	e736      	b.n	8001f4c <__aeabi_ddiv+0x33c>
 80020de:	f001 f999 	bl	8003414 <__clzsi2>
 80020e2:	0002      	movs	r2, r0
 80020e4:	0003      	movs	r3, r0
 80020e6:	3215      	adds	r2, #21
 80020e8:	3320      	adds	r3, #32
 80020ea:	2a1c      	cmp	r2, #28
 80020ec:	dc00      	bgt.n	80020f0 <__aeabi_ddiv+0x4e0>
 80020ee:	e6fb      	b.n	8001ee8 <__aeabi_ddiv+0x2d8>
 80020f0:	9900      	ldr	r1, [sp, #0]
 80020f2:	3808      	subs	r0, #8
 80020f4:	4081      	lsls	r1, r0
 80020f6:	2200      	movs	r2, #0
 80020f8:	468b      	mov	fp, r1
 80020fa:	e702      	b.n	8001f02 <__aeabi_ddiv+0x2f2>
 80020fc:	9900      	ldr	r1, [sp, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	468c      	mov	ip, r1
 8002102:	4464      	add	r4, ip
 8002104:	42a1      	cmp	r1, r4
 8002106:	d900      	bls.n	800210a <__aeabi_ddiv+0x4fa>
 8002108:	e69a      	b.n	8001e40 <__aeabi_ddiv+0x230>
 800210a:	42a2      	cmp	r2, r4
 800210c:	d800      	bhi.n	8002110 <__aeabi_ddiv+0x500>
 800210e:	e697      	b.n	8001e40 <__aeabi_ddiv+0x230>
 8002110:	1e83      	subs	r3, r0, #2
 8002112:	4464      	add	r4, ip
 8002114:	e694      	b.n	8001e40 <__aeabi_ddiv+0x230>
 8002116:	46ac      	mov	ip, r5
 8002118:	4461      	add	r1, ip
 800211a:	3f01      	subs	r7, #1
 800211c:	428d      	cmp	r5, r1
 800211e:	d900      	bls.n	8002122 <__aeabi_ddiv+0x512>
 8002120:	e680      	b.n	8001e24 <__aeabi_ddiv+0x214>
 8002122:	428a      	cmp	r2, r1
 8002124:	d800      	bhi.n	8002128 <__aeabi_ddiv+0x518>
 8002126:	e67d      	b.n	8001e24 <__aeabi_ddiv+0x214>
 8002128:	1e87      	subs	r7, r0, #2
 800212a:	4461      	add	r1, ip
 800212c:	e67a      	b.n	8001e24 <__aeabi_ddiv+0x214>
 800212e:	4285      	cmp	r5, r0
 8002130:	d000      	beq.n	8002134 <__aeabi_ddiv+0x524>
 8002132:	e65f      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 8002134:	45b9      	cmp	r9, r7
 8002136:	d900      	bls.n	800213a <__aeabi_ddiv+0x52a>
 8002138:	e65c      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 800213a:	e656      	b.n	8001dea <__aeabi_ddiv+0x1da>
 800213c:	42a2      	cmp	r2, r4
 800213e:	d800      	bhi.n	8002142 <__aeabi_ddiv+0x532>
 8002140:	e61a      	b.n	8001d78 <__aeabi_ddiv+0x168>
 8002142:	1e83      	subs	r3, r0, #2
 8002144:	4464      	add	r4, ip
 8002146:	e617      	b.n	8001d78 <__aeabi_ddiv+0x168>
 8002148:	428a      	cmp	r2, r1
 800214a:	d800      	bhi.n	800214e <__aeabi_ddiv+0x53e>
 800214c:	e600      	b.n	8001d50 <__aeabi_ddiv+0x140>
 800214e:	46ac      	mov	ip, r5
 8002150:	1e83      	subs	r3, r0, #2
 8002152:	4698      	mov	r8, r3
 8002154:	4461      	add	r1, ip
 8002156:	e5fb      	b.n	8001d50 <__aeabi_ddiv+0x140>
 8002158:	4837      	ldr	r0, [pc, #220]	@ (8002238 <__aeabi_ddiv+0x628>)
 800215a:	0014      	movs	r4, r2
 800215c:	4450      	add	r0, sl
 800215e:	4082      	lsls	r2, r0
 8002160:	465b      	mov	r3, fp
 8002162:	0017      	movs	r7, r2
 8002164:	4083      	lsls	r3, r0
 8002166:	40cc      	lsrs	r4, r1
 8002168:	1e7a      	subs	r2, r7, #1
 800216a:	4197      	sbcs	r7, r2
 800216c:	4323      	orrs	r3, r4
 800216e:	433b      	orrs	r3, r7
 8002170:	001a      	movs	r2, r3
 8002172:	465b      	mov	r3, fp
 8002174:	40cb      	lsrs	r3, r1
 8002176:	0751      	lsls	r1, r2, #29
 8002178:	d009      	beq.n	800218e <__aeabi_ddiv+0x57e>
 800217a:	210f      	movs	r1, #15
 800217c:	4011      	ands	r1, r2
 800217e:	2904      	cmp	r1, #4
 8002180:	d005      	beq.n	800218e <__aeabi_ddiv+0x57e>
 8002182:	1d11      	adds	r1, r2, #4
 8002184:	4291      	cmp	r1, r2
 8002186:	4192      	sbcs	r2, r2
 8002188:	4252      	negs	r2, r2
 800218a:	189b      	adds	r3, r3, r2
 800218c:	000a      	movs	r2, r1
 800218e:	0219      	lsls	r1, r3, #8
 8002190:	d400      	bmi.n	8002194 <__aeabi_ddiv+0x584>
 8002192:	e755      	b.n	8002040 <__aeabi_ddiv+0x430>
 8002194:	2200      	movs	r2, #0
 8002196:	2301      	movs	r3, #1
 8002198:	2400      	movs	r4, #0
 800219a:	4690      	mov	r8, r2
 800219c:	e598      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 800219e:	000a      	movs	r2, r1
 80021a0:	42bc      	cmp	r4, r7
 80021a2:	d000      	beq.n	80021a6 <__aeabi_ddiv+0x596>
 80021a4:	e66e      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80021a6:	454b      	cmp	r3, r9
 80021a8:	d000      	beq.n	80021ac <__aeabi_ddiv+0x59c>
 80021aa:	e66b      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80021ac:	e66c      	b.n	8001e88 <__aeabi_ddiv+0x278>
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <__aeabi_ddiv+0x62c>)
 80021b0:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <__aeabi_ddiv+0x630>)
 80021b2:	4453      	add	r3, sl
 80021b4:	4592      	cmp	sl, r2
 80021b6:	da00      	bge.n	80021ba <__aeabi_ddiv+0x5aa>
 80021b8:	e718      	b.n	8001fec <__aeabi_ddiv+0x3dc>
 80021ba:	2101      	movs	r1, #1
 80021bc:	4249      	negs	r1, r1
 80021be:	1d0a      	adds	r2, r1, #4
 80021c0:	428a      	cmp	r2, r1
 80021c2:	4189      	sbcs	r1, r1
 80021c4:	4249      	negs	r1, r1
 80021c6:	448b      	add	fp, r1
 80021c8:	e666      	b.n	8001e98 <__aeabi_ddiv+0x288>
 80021ca:	210f      	movs	r1, #15
 80021cc:	4011      	ands	r1, r2
 80021ce:	2904      	cmp	r1, #4
 80021d0:	d100      	bne.n	80021d4 <__aeabi_ddiv+0x5c4>
 80021d2:	e661      	b.n	8001e98 <__aeabi_ddiv+0x288>
 80021d4:	0011      	movs	r1, r2
 80021d6:	e7f2      	b.n	80021be <__aeabi_ddiv+0x5ae>
 80021d8:	42bc      	cmp	r4, r7
 80021da:	d800      	bhi.n	80021de <__aeabi_ddiv+0x5ce>
 80021dc:	e60a      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 80021de:	2302      	movs	r3, #2
 80021e0:	425b      	negs	r3, r3
 80021e2:	469c      	mov	ip, r3
 80021e4:	9900      	ldr	r1, [sp, #0]
 80021e6:	444f      	add	r7, r9
 80021e8:	454f      	cmp	r7, r9
 80021ea:	419b      	sbcs	r3, r3
 80021ec:	44e3      	add	fp, ip
 80021ee:	468c      	mov	ip, r1
 80021f0:	425b      	negs	r3, r3
 80021f2:	4463      	add	r3, ip
 80021f4:	18c0      	adds	r0, r0, r3
 80021f6:	e5ff      	b.n	8001df8 <__aeabi_ddiv+0x1e8>
 80021f8:	4649      	mov	r1, r9
 80021fa:	9d00      	ldr	r5, [sp, #0]
 80021fc:	0048      	lsls	r0, r1, #1
 80021fe:	4548      	cmp	r0, r9
 8002200:	4189      	sbcs	r1, r1
 8002202:	46ac      	mov	ip, r5
 8002204:	4249      	negs	r1, r1
 8002206:	4461      	add	r1, ip
 8002208:	4681      	mov	r9, r0
 800220a:	3a02      	subs	r2, #2
 800220c:	1864      	adds	r4, r4, r1
 800220e:	e7c7      	b.n	80021a0 <__aeabi_ddiv+0x590>
 8002210:	2480      	movs	r4, #128	@ 0x80
 8002212:	465b      	mov	r3, fp
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	431c      	orrs	r4, r3
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	4690      	mov	r8, r2
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__aeabi_ddiv+0x620>)
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	e556      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002222:	4599      	cmp	r9, r3
 8002224:	d3e8      	bcc.n	80021f8 <__aeabi_ddiv+0x5e8>
 8002226:	000a      	movs	r2, r1
 8002228:	e7bd      	b.n	80021a6 <__aeabi_ddiv+0x596>
 800222a:	2300      	movs	r3, #0
 800222c:	e708      	b.n	8002040 <__aeabi_ddiv+0x430>
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	000007ff 	.word	0x000007ff
 8002234:	0000043e 	.word	0x0000043e
 8002238:	0000041e 	.word	0x0000041e
 800223c:	000003ff 	.word	0x000003ff
 8002240:	fffffc02 	.word	0xfffffc02

08002244 <__eqdf2>:
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	4657      	mov	r7, sl
 8002248:	46de      	mov	lr, fp
 800224a:	464e      	mov	r6, r9
 800224c:	4645      	mov	r5, r8
 800224e:	b5e0      	push	{r5, r6, r7, lr}
 8002250:	000d      	movs	r5, r1
 8002252:	0004      	movs	r4, r0
 8002254:	0fe8      	lsrs	r0, r5, #31
 8002256:	4683      	mov	fp, r0
 8002258:	0309      	lsls	r1, r1, #12
 800225a:	0fd8      	lsrs	r0, r3, #31
 800225c:	0b09      	lsrs	r1, r1, #12
 800225e:	4682      	mov	sl, r0
 8002260:	4819      	ldr	r0, [pc, #100]	@ (80022c8 <__eqdf2+0x84>)
 8002262:	468c      	mov	ip, r1
 8002264:	031f      	lsls	r7, r3, #12
 8002266:	0069      	lsls	r1, r5, #1
 8002268:	005e      	lsls	r6, r3, #1
 800226a:	0d49      	lsrs	r1, r1, #21
 800226c:	0b3f      	lsrs	r7, r7, #12
 800226e:	0d76      	lsrs	r6, r6, #21
 8002270:	4281      	cmp	r1, r0
 8002272:	d018      	beq.n	80022a6 <__eqdf2+0x62>
 8002274:	4286      	cmp	r6, r0
 8002276:	d00f      	beq.n	8002298 <__eqdf2+0x54>
 8002278:	2001      	movs	r0, #1
 800227a:	42b1      	cmp	r1, r6
 800227c:	d10d      	bne.n	800229a <__eqdf2+0x56>
 800227e:	45bc      	cmp	ip, r7
 8002280:	d10b      	bne.n	800229a <__eqdf2+0x56>
 8002282:	4294      	cmp	r4, r2
 8002284:	d109      	bne.n	800229a <__eqdf2+0x56>
 8002286:	45d3      	cmp	fp, sl
 8002288:	d01c      	beq.n	80022c4 <__eqdf2+0x80>
 800228a:	2900      	cmp	r1, #0
 800228c:	d105      	bne.n	800229a <__eqdf2+0x56>
 800228e:	4660      	mov	r0, ip
 8002290:	4320      	orrs	r0, r4
 8002292:	1e43      	subs	r3, r0, #1
 8002294:	4198      	sbcs	r0, r3
 8002296:	e000      	b.n	800229a <__eqdf2+0x56>
 8002298:	2001      	movs	r0, #1
 800229a:	bcf0      	pop	{r4, r5, r6, r7}
 800229c:	46bb      	mov	fp, r7
 800229e:	46b2      	mov	sl, r6
 80022a0:	46a9      	mov	r9, r5
 80022a2:	46a0      	mov	r8, r4
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	2001      	movs	r0, #1
 80022a8:	428e      	cmp	r6, r1
 80022aa:	d1f6      	bne.n	800229a <__eqdf2+0x56>
 80022ac:	4661      	mov	r1, ip
 80022ae:	4339      	orrs	r1, r7
 80022b0:	000f      	movs	r7, r1
 80022b2:	4317      	orrs	r7, r2
 80022b4:	4327      	orrs	r7, r4
 80022b6:	d1f0      	bne.n	800229a <__eqdf2+0x56>
 80022b8:	465b      	mov	r3, fp
 80022ba:	4652      	mov	r2, sl
 80022bc:	1a98      	subs	r0, r3, r2
 80022be:	1e43      	subs	r3, r0, #1
 80022c0:	4198      	sbcs	r0, r3
 80022c2:	e7ea      	b.n	800229a <__eqdf2+0x56>
 80022c4:	2000      	movs	r0, #0
 80022c6:	e7e8      	b.n	800229a <__eqdf2+0x56>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__gedf2>:
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	4657      	mov	r7, sl
 80022d0:	464e      	mov	r6, r9
 80022d2:	4645      	mov	r5, r8
 80022d4:	46de      	mov	lr, fp
 80022d6:	b5e0      	push	{r5, r6, r7, lr}
 80022d8:	000d      	movs	r5, r1
 80022da:	030f      	lsls	r7, r1, #12
 80022dc:	0b39      	lsrs	r1, r7, #12
 80022de:	b083      	sub	sp, #12
 80022e0:	0004      	movs	r4, r0
 80022e2:	4680      	mov	r8, r0
 80022e4:	9101      	str	r1, [sp, #4]
 80022e6:	0058      	lsls	r0, r3, #1
 80022e8:	0fe9      	lsrs	r1, r5, #31
 80022ea:	4f31      	ldr	r7, [pc, #196]	@ (80023b0 <__gedf2+0xe4>)
 80022ec:	0d40      	lsrs	r0, r0, #21
 80022ee:	468c      	mov	ip, r1
 80022f0:	006e      	lsls	r6, r5, #1
 80022f2:	0319      	lsls	r1, r3, #12
 80022f4:	4682      	mov	sl, r0
 80022f6:	4691      	mov	r9, r2
 80022f8:	0d76      	lsrs	r6, r6, #21
 80022fa:	0b09      	lsrs	r1, r1, #12
 80022fc:	0fd8      	lsrs	r0, r3, #31
 80022fe:	42be      	cmp	r6, r7
 8002300:	d01f      	beq.n	8002342 <__gedf2+0x76>
 8002302:	45ba      	cmp	sl, r7
 8002304:	d00f      	beq.n	8002326 <__gedf2+0x5a>
 8002306:	2e00      	cmp	r6, #0
 8002308:	d12f      	bne.n	800236a <__gedf2+0x9e>
 800230a:	4655      	mov	r5, sl
 800230c:	9e01      	ldr	r6, [sp, #4]
 800230e:	4334      	orrs	r4, r6
 8002310:	2d00      	cmp	r5, #0
 8002312:	d127      	bne.n	8002364 <__gedf2+0x98>
 8002314:	430a      	orrs	r2, r1
 8002316:	d03a      	beq.n	800238e <__gedf2+0xc2>
 8002318:	2c00      	cmp	r4, #0
 800231a:	d145      	bne.n	80023a8 <__gedf2+0xdc>
 800231c:	2800      	cmp	r0, #0
 800231e:	d11a      	bne.n	8002356 <__gedf2+0x8a>
 8002320:	2001      	movs	r0, #1
 8002322:	4240      	negs	r0, r0
 8002324:	e017      	b.n	8002356 <__gedf2+0x8a>
 8002326:	4311      	orrs	r1, r2
 8002328:	d13b      	bne.n	80023a2 <__gedf2+0xd6>
 800232a:	2e00      	cmp	r6, #0
 800232c:	d102      	bne.n	8002334 <__gedf2+0x68>
 800232e:	9f01      	ldr	r7, [sp, #4]
 8002330:	4327      	orrs	r7, r4
 8002332:	d0f3      	beq.n	800231c <__gedf2+0x50>
 8002334:	4584      	cmp	ip, r0
 8002336:	d109      	bne.n	800234c <__gedf2+0x80>
 8002338:	4663      	mov	r3, ip
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <__gedf2+0x54>
 800233e:	4660      	mov	r0, ip
 8002340:	e009      	b.n	8002356 <__gedf2+0x8a>
 8002342:	9f01      	ldr	r7, [sp, #4]
 8002344:	4327      	orrs	r7, r4
 8002346:	d12c      	bne.n	80023a2 <__gedf2+0xd6>
 8002348:	45b2      	cmp	sl, r6
 800234a:	d024      	beq.n	8002396 <__gedf2+0xca>
 800234c:	4663      	mov	r3, ip
 800234e:	2002      	movs	r0, #2
 8002350:	3b01      	subs	r3, #1
 8002352:	4018      	ands	r0, r3
 8002354:	3801      	subs	r0, #1
 8002356:	b003      	add	sp, #12
 8002358:	bcf0      	pop	{r4, r5, r6, r7}
 800235a:	46bb      	mov	fp, r7
 800235c:	46b2      	mov	sl, r6
 800235e:	46a9      	mov	r9, r5
 8002360:	46a0      	mov	r8, r4
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	2c00      	cmp	r4, #0
 8002366:	d0d9      	beq.n	800231c <__gedf2+0x50>
 8002368:	e7e4      	b.n	8002334 <__gedf2+0x68>
 800236a:	4654      	mov	r4, sl
 800236c:	2c00      	cmp	r4, #0
 800236e:	d0ed      	beq.n	800234c <__gedf2+0x80>
 8002370:	4584      	cmp	ip, r0
 8002372:	d1eb      	bne.n	800234c <__gedf2+0x80>
 8002374:	4556      	cmp	r6, sl
 8002376:	dce9      	bgt.n	800234c <__gedf2+0x80>
 8002378:	dbde      	blt.n	8002338 <__gedf2+0x6c>
 800237a:	9b01      	ldr	r3, [sp, #4]
 800237c:	428b      	cmp	r3, r1
 800237e:	d8e5      	bhi.n	800234c <__gedf2+0x80>
 8002380:	d1da      	bne.n	8002338 <__gedf2+0x6c>
 8002382:	45c8      	cmp	r8, r9
 8002384:	d8e2      	bhi.n	800234c <__gedf2+0x80>
 8002386:	2000      	movs	r0, #0
 8002388:	45c8      	cmp	r8, r9
 800238a:	d2e4      	bcs.n	8002356 <__gedf2+0x8a>
 800238c:	e7d4      	b.n	8002338 <__gedf2+0x6c>
 800238e:	2000      	movs	r0, #0
 8002390:	2c00      	cmp	r4, #0
 8002392:	d0e0      	beq.n	8002356 <__gedf2+0x8a>
 8002394:	e7da      	b.n	800234c <__gedf2+0x80>
 8002396:	4311      	orrs	r1, r2
 8002398:	d103      	bne.n	80023a2 <__gedf2+0xd6>
 800239a:	4584      	cmp	ip, r0
 800239c:	d1d6      	bne.n	800234c <__gedf2+0x80>
 800239e:	2000      	movs	r0, #0
 80023a0:	e7d9      	b.n	8002356 <__gedf2+0x8a>
 80023a2:	2002      	movs	r0, #2
 80023a4:	4240      	negs	r0, r0
 80023a6:	e7d6      	b.n	8002356 <__gedf2+0x8a>
 80023a8:	4584      	cmp	ip, r0
 80023aa:	d0e6      	beq.n	800237a <__gedf2+0xae>
 80023ac:	e7ce      	b.n	800234c <__gedf2+0x80>
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	000007ff 	.word	0x000007ff

080023b4 <__ledf2>:
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	4657      	mov	r7, sl
 80023b8:	464e      	mov	r6, r9
 80023ba:	4645      	mov	r5, r8
 80023bc:	46de      	mov	lr, fp
 80023be:	b5e0      	push	{r5, r6, r7, lr}
 80023c0:	000d      	movs	r5, r1
 80023c2:	030f      	lsls	r7, r1, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	0fe8      	lsrs	r0, r5, #31
 80023ca:	0b39      	lsrs	r1, r7, #12
 80023cc:	4684      	mov	ip, r0
 80023ce:	b083      	sub	sp, #12
 80023d0:	0058      	lsls	r0, r3, #1
 80023d2:	4f30      	ldr	r7, [pc, #192]	@ (8002494 <__ledf2+0xe0>)
 80023d4:	0d40      	lsrs	r0, r0, #21
 80023d6:	9101      	str	r1, [sp, #4]
 80023d8:	031e      	lsls	r6, r3, #12
 80023da:	0069      	lsls	r1, r5, #1
 80023dc:	4682      	mov	sl, r0
 80023de:	4691      	mov	r9, r2
 80023e0:	0d49      	lsrs	r1, r1, #21
 80023e2:	0b36      	lsrs	r6, r6, #12
 80023e4:	0fd8      	lsrs	r0, r3, #31
 80023e6:	42b9      	cmp	r1, r7
 80023e8:	d020      	beq.n	800242c <__ledf2+0x78>
 80023ea:	45ba      	cmp	sl, r7
 80023ec:	d00f      	beq.n	800240e <__ledf2+0x5a>
 80023ee:	2900      	cmp	r1, #0
 80023f0:	d12b      	bne.n	800244a <__ledf2+0x96>
 80023f2:	9901      	ldr	r1, [sp, #4]
 80023f4:	430c      	orrs	r4, r1
 80023f6:	4651      	mov	r1, sl
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d137      	bne.n	800246c <__ledf2+0xb8>
 80023fc:	4332      	orrs	r2, r6
 80023fe:	d038      	beq.n	8002472 <__ledf2+0xbe>
 8002400:	2c00      	cmp	r4, #0
 8002402:	d144      	bne.n	800248e <__ledf2+0xda>
 8002404:	2800      	cmp	r0, #0
 8002406:	d119      	bne.n	800243c <__ledf2+0x88>
 8002408:	2001      	movs	r0, #1
 800240a:	4240      	negs	r0, r0
 800240c:	e016      	b.n	800243c <__ledf2+0x88>
 800240e:	4316      	orrs	r6, r2
 8002410:	d113      	bne.n	800243a <__ledf2+0x86>
 8002412:	2900      	cmp	r1, #0
 8002414:	d102      	bne.n	800241c <__ledf2+0x68>
 8002416:	9f01      	ldr	r7, [sp, #4]
 8002418:	4327      	orrs	r7, r4
 800241a:	d0f3      	beq.n	8002404 <__ledf2+0x50>
 800241c:	4584      	cmp	ip, r0
 800241e:	d020      	beq.n	8002462 <__ledf2+0xae>
 8002420:	4663      	mov	r3, ip
 8002422:	2002      	movs	r0, #2
 8002424:	3b01      	subs	r3, #1
 8002426:	4018      	ands	r0, r3
 8002428:	3801      	subs	r0, #1
 800242a:	e007      	b.n	800243c <__ledf2+0x88>
 800242c:	9f01      	ldr	r7, [sp, #4]
 800242e:	4327      	orrs	r7, r4
 8002430:	d103      	bne.n	800243a <__ledf2+0x86>
 8002432:	458a      	cmp	sl, r1
 8002434:	d1f4      	bne.n	8002420 <__ledf2+0x6c>
 8002436:	4316      	orrs	r6, r2
 8002438:	d01f      	beq.n	800247a <__ledf2+0xc6>
 800243a:	2002      	movs	r0, #2
 800243c:	b003      	add	sp, #12
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	4654      	mov	r4, sl
 800244c:	2c00      	cmp	r4, #0
 800244e:	d0e7      	beq.n	8002420 <__ledf2+0x6c>
 8002450:	4584      	cmp	ip, r0
 8002452:	d1e5      	bne.n	8002420 <__ledf2+0x6c>
 8002454:	4551      	cmp	r1, sl
 8002456:	dce3      	bgt.n	8002420 <__ledf2+0x6c>
 8002458:	db03      	blt.n	8002462 <__ledf2+0xae>
 800245a:	9b01      	ldr	r3, [sp, #4]
 800245c:	42b3      	cmp	r3, r6
 800245e:	d8df      	bhi.n	8002420 <__ledf2+0x6c>
 8002460:	d00f      	beq.n	8002482 <__ledf2+0xce>
 8002462:	4663      	mov	r3, ip
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0cf      	beq.n	8002408 <__ledf2+0x54>
 8002468:	4660      	mov	r0, ip
 800246a:	e7e7      	b.n	800243c <__ledf2+0x88>
 800246c:	2c00      	cmp	r4, #0
 800246e:	d0c9      	beq.n	8002404 <__ledf2+0x50>
 8002470:	e7d4      	b.n	800241c <__ledf2+0x68>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e1      	beq.n	800243c <__ledf2+0x88>
 8002478:	e7d2      	b.n	8002420 <__ledf2+0x6c>
 800247a:	4584      	cmp	ip, r0
 800247c:	d1d0      	bne.n	8002420 <__ledf2+0x6c>
 800247e:	2000      	movs	r0, #0
 8002480:	e7dc      	b.n	800243c <__ledf2+0x88>
 8002482:	45c8      	cmp	r8, r9
 8002484:	d8cc      	bhi.n	8002420 <__ledf2+0x6c>
 8002486:	2000      	movs	r0, #0
 8002488:	45c8      	cmp	r8, r9
 800248a:	d2d7      	bcs.n	800243c <__ledf2+0x88>
 800248c:	e7e9      	b.n	8002462 <__ledf2+0xae>
 800248e:	4584      	cmp	ip, r0
 8002490:	d0e3      	beq.n	800245a <__ledf2+0xa6>
 8002492:	e7c5      	b.n	8002420 <__ledf2+0x6c>
 8002494:	000007ff 	.word	0x000007ff

08002498 <__aeabi_dmul>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	46de      	mov	lr, fp
 800249e:	464e      	mov	r6, r9
 80024a0:	4645      	mov	r5, r8
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	001f      	movs	r7, r3
 80024a6:	030b      	lsls	r3, r1, #12
 80024a8:	0b1b      	lsrs	r3, r3, #12
 80024aa:	0016      	movs	r6, r2
 80024ac:	469a      	mov	sl, r3
 80024ae:	0fca      	lsrs	r2, r1, #31
 80024b0:	004b      	lsls	r3, r1, #1
 80024b2:	0004      	movs	r4, r0
 80024b4:	4693      	mov	fp, r2
 80024b6:	b087      	sub	sp, #28
 80024b8:	0d5b      	lsrs	r3, r3, #21
 80024ba:	d100      	bne.n	80024be <__aeabi_dmul+0x26>
 80024bc:	e0d5      	b.n	800266a <__aeabi_dmul+0x1d2>
 80024be:	4abb      	ldr	r2, [pc, #748]	@ (80027ac <__aeabi_dmul+0x314>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dmul+0x2e>
 80024c4:	e0f8      	b.n	80026b8 <__aeabi_dmul+0x220>
 80024c6:	4651      	mov	r1, sl
 80024c8:	0f42      	lsrs	r2, r0, #29
 80024ca:	00c9      	lsls	r1, r1, #3
 80024cc:	430a      	orrs	r2, r1
 80024ce:	2180      	movs	r1, #128	@ 0x80
 80024d0:	0409      	lsls	r1, r1, #16
 80024d2:	4311      	orrs	r1, r2
 80024d4:	00c2      	lsls	r2, r0, #3
 80024d6:	4691      	mov	r9, r2
 80024d8:	4ab5      	ldr	r2, [pc, #724]	@ (80027b0 <__aeabi_dmul+0x318>)
 80024da:	468a      	mov	sl, r1
 80024dc:	189d      	adds	r5, r3, r2
 80024de:	2300      	movs	r3, #0
 80024e0:	4698      	mov	r8, r3
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	033c      	lsls	r4, r7, #12
 80024e6:	007b      	lsls	r3, r7, #1
 80024e8:	0ffa      	lsrs	r2, r7, #31
 80024ea:	0030      	movs	r0, r6
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	0d5b      	lsrs	r3, r3, #21
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x5e>
 80024f4:	e096      	b.n	8002624 <__aeabi_dmul+0x18c>
 80024f6:	4aad      	ldr	r2, [pc, #692]	@ (80027ac <__aeabi_dmul+0x314>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <__aeabi_dmul+0xc8>
 80024fc:	0f72      	lsrs	r2, r6, #29
 80024fe:	00e4      	lsls	r4, r4, #3
 8002500:	4322      	orrs	r2, r4
 8002502:	2480      	movs	r4, #128	@ 0x80
 8002504:	0424      	lsls	r4, r4, #16
 8002506:	4314      	orrs	r4, r2
 8002508:	4aa9      	ldr	r2, [pc, #676]	@ (80027b0 <__aeabi_dmul+0x318>)
 800250a:	00f0      	lsls	r0, r6, #3
 800250c:	4694      	mov	ip, r2
 800250e:	4463      	add	r3, ip
 8002510:	195b      	adds	r3, r3, r5
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	4642      	mov	r2, r8
 8002518:	2600      	movs	r6, #0
 800251a:	2a0a      	cmp	r2, #10
 800251c:	dc42      	bgt.n	80025a4 <__aeabi_dmul+0x10c>
 800251e:	465a      	mov	r2, fp
 8002520:	9900      	ldr	r1, [sp, #0]
 8002522:	404a      	eors	r2, r1
 8002524:	4693      	mov	fp, r2
 8002526:	4642      	mov	r2, r8
 8002528:	2a02      	cmp	r2, #2
 800252a:	dc32      	bgt.n	8002592 <__aeabi_dmul+0xfa>
 800252c:	3a01      	subs	r2, #1
 800252e:	2a01      	cmp	r2, #1
 8002530:	d900      	bls.n	8002534 <__aeabi_dmul+0x9c>
 8002532:	e149      	b.n	80027c8 <__aeabi_dmul+0x330>
 8002534:	2e02      	cmp	r6, #2
 8002536:	d100      	bne.n	800253a <__aeabi_dmul+0xa2>
 8002538:	e0ca      	b.n	80026d0 <__aeabi_dmul+0x238>
 800253a:	2e01      	cmp	r6, #1
 800253c:	d13d      	bne.n	80025ba <__aeabi_dmul+0x122>
 800253e:	2300      	movs	r3, #0
 8002540:	2400      	movs	r4, #0
 8002542:	2200      	movs	r2, #0
 8002544:	0010      	movs	r0, r2
 8002546:	465a      	mov	r2, fp
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	4323      	orrs	r3, r4
 800254c:	07d2      	lsls	r2, r2, #31
 800254e:	4313      	orrs	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	b007      	add	sp, #28
 8002554:	bcf0      	pop	{r4, r5, r6, r7}
 8002556:	46bb      	mov	fp, r7
 8002558:	46b2      	mov	sl, r6
 800255a:	46a9      	mov	r9, r5
 800255c:	46a0      	mov	r8, r4
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	4b92      	ldr	r3, [pc, #584]	@ (80027ac <__aeabi_dmul+0x314>)
 8002562:	4326      	orrs	r6, r4
 8002564:	18eb      	adds	r3, r5, r3
 8002566:	2e00      	cmp	r6, #0
 8002568:	d100      	bne.n	800256c <__aeabi_dmul+0xd4>
 800256a:	e0bb      	b.n	80026e4 <__aeabi_dmul+0x24c>
 800256c:	2203      	movs	r2, #3
 800256e:	4641      	mov	r1, r8
 8002570:	4311      	orrs	r1, r2
 8002572:	465a      	mov	r2, fp
 8002574:	4688      	mov	r8, r1
 8002576:	9900      	ldr	r1, [sp, #0]
 8002578:	404a      	eors	r2, r1
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	0109      	lsls	r1, r1, #4
 800257e:	468c      	mov	ip, r1
 8002580:	0029      	movs	r1, r5
 8002582:	4461      	add	r1, ip
 8002584:	9101      	str	r1, [sp, #4]
 8002586:	4641      	mov	r1, r8
 8002588:	290a      	cmp	r1, #10
 800258a:	dd00      	ble.n	800258e <__aeabi_dmul+0xf6>
 800258c:	e233      	b.n	80029f6 <__aeabi_dmul+0x55e>
 800258e:	4693      	mov	fp, r2
 8002590:	2603      	movs	r6, #3
 8002592:	4642      	mov	r2, r8
 8002594:	2701      	movs	r7, #1
 8002596:	4097      	lsls	r7, r2
 8002598:	21a6      	movs	r1, #166	@ 0xa6
 800259a:	003a      	movs	r2, r7
 800259c:	00c9      	lsls	r1, r1, #3
 800259e:	400a      	ands	r2, r1
 80025a0:	420f      	tst	r7, r1
 80025a2:	d031      	beq.n	8002608 <__aeabi_dmul+0x170>
 80025a4:	9e02      	ldr	r6, [sp, #8]
 80025a6:	2e02      	cmp	r6, #2
 80025a8:	d100      	bne.n	80025ac <__aeabi_dmul+0x114>
 80025aa:	e235      	b.n	8002a18 <__aeabi_dmul+0x580>
 80025ac:	2e03      	cmp	r6, #3
 80025ae:	d100      	bne.n	80025b2 <__aeabi_dmul+0x11a>
 80025b0:	e1d2      	b.n	8002958 <__aeabi_dmul+0x4c0>
 80025b2:	4654      	mov	r4, sl
 80025b4:	4648      	mov	r0, r9
 80025b6:	2e01      	cmp	r6, #1
 80025b8:	d0c1      	beq.n	800253e <__aeabi_dmul+0xa6>
 80025ba:	9a01      	ldr	r2, [sp, #4]
 80025bc:	4b7d      	ldr	r3, [pc, #500]	@ (80027b4 <__aeabi_dmul+0x31c>)
 80025be:	4694      	mov	ip, r2
 80025c0:	4463      	add	r3, ip
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dmul+0x130>
 80025c6:	e0c0      	b.n	800274a <__aeabi_dmul+0x2b2>
 80025c8:	0742      	lsls	r2, r0, #29
 80025ca:	d009      	beq.n	80025e0 <__aeabi_dmul+0x148>
 80025cc:	220f      	movs	r2, #15
 80025ce:	4002      	ands	r2, r0
 80025d0:	2a04      	cmp	r2, #4
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dmul+0x148>
 80025d4:	1d02      	adds	r2, r0, #4
 80025d6:	4282      	cmp	r2, r0
 80025d8:	4180      	sbcs	r0, r0
 80025da:	4240      	negs	r0, r0
 80025dc:	1824      	adds	r4, r4, r0
 80025de:	0010      	movs	r0, r2
 80025e0:	01e2      	lsls	r2, r4, #7
 80025e2:	d506      	bpl.n	80025f2 <__aeabi_dmul+0x15a>
 80025e4:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <__aeabi_dmul+0x320>)
 80025e6:	9a01      	ldr	r2, [sp, #4]
 80025e8:	401c      	ands	r4, r3
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	4694      	mov	ip, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4463      	add	r3, ip
 80025f2:	4a72      	ldr	r2, [pc, #456]	@ (80027bc <__aeabi_dmul+0x324>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	dc6b      	bgt.n	80026d0 <__aeabi_dmul+0x238>
 80025f8:	0762      	lsls	r2, r4, #29
 80025fa:	08c0      	lsrs	r0, r0, #3
 80025fc:	0264      	lsls	r4, r4, #9
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	4302      	orrs	r2, r0
 8002602:	0b24      	lsrs	r4, r4, #12
 8002604:	0d5b      	lsrs	r3, r3, #21
 8002606:	e79d      	b.n	8002544 <__aeabi_dmul+0xac>
 8002608:	2190      	movs	r1, #144	@ 0x90
 800260a:	0089      	lsls	r1, r1, #2
 800260c:	420f      	tst	r7, r1
 800260e:	d163      	bne.n	80026d8 <__aeabi_dmul+0x240>
 8002610:	2288      	movs	r2, #136	@ 0x88
 8002612:	423a      	tst	r2, r7
 8002614:	d100      	bne.n	8002618 <__aeabi_dmul+0x180>
 8002616:	e0d7      	b.n	80027c8 <__aeabi_dmul+0x330>
 8002618:	9b00      	ldr	r3, [sp, #0]
 800261a:	46a2      	mov	sl, r4
 800261c:	469b      	mov	fp, r3
 800261e:	4681      	mov	r9, r0
 8002620:	9602      	str	r6, [sp, #8]
 8002622:	e7bf      	b.n	80025a4 <__aeabi_dmul+0x10c>
 8002624:	0023      	movs	r3, r4
 8002626:	4333      	orrs	r3, r6
 8002628:	d100      	bne.n	800262c <__aeabi_dmul+0x194>
 800262a:	e07f      	b.n	800272c <__aeabi_dmul+0x294>
 800262c:	2c00      	cmp	r4, #0
 800262e:	d100      	bne.n	8002632 <__aeabi_dmul+0x19a>
 8002630:	e1ad      	b.n	800298e <__aeabi_dmul+0x4f6>
 8002632:	0020      	movs	r0, r4
 8002634:	f000 feee 	bl	8003414 <__clzsi2>
 8002638:	0002      	movs	r2, r0
 800263a:	0003      	movs	r3, r0
 800263c:	3a0b      	subs	r2, #11
 800263e:	201d      	movs	r0, #29
 8002640:	0019      	movs	r1, r3
 8002642:	1a82      	subs	r2, r0, r2
 8002644:	0030      	movs	r0, r6
 8002646:	3908      	subs	r1, #8
 8002648:	40d0      	lsrs	r0, r2
 800264a:	408c      	lsls	r4, r1
 800264c:	4304      	orrs	r4, r0
 800264e:	0030      	movs	r0, r6
 8002650:	4088      	lsls	r0, r1
 8002652:	4a5b      	ldr	r2, [pc, #364]	@ (80027c0 <__aeabi_dmul+0x328>)
 8002654:	1aeb      	subs	r3, r5, r3
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	9201      	str	r2, [sp, #4]
 800265e:	4642      	mov	r2, r8
 8002660:	2600      	movs	r6, #0
 8002662:	2a0a      	cmp	r2, #10
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x1d0>
 8002666:	e75a      	b.n	800251e <__aeabi_dmul+0x86>
 8002668:	e79c      	b.n	80025a4 <__aeabi_dmul+0x10c>
 800266a:	4653      	mov	r3, sl
 800266c:	4303      	orrs	r3, r0
 800266e:	4699      	mov	r9, r3
 8002670:	d054      	beq.n	800271c <__aeabi_dmul+0x284>
 8002672:	4653      	mov	r3, sl
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dmul+0x1e2>
 8002678:	e177      	b.n	800296a <__aeabi_dmul+0x4d2>
 800267a:	4650      	mov	r0, sl
 800267c:	f000 feca 	bl	8003414 <__clzsi2>
 8002680:	230b      	movs	r3, #11
 8002682:	425b      	negs	r3, r3
 8002684:	469c      	mov	ip, r3
 8002686:	0002      	movs	r2, r0
 8002688:	4484      	add	ip, r0
 800268a:	0011      	movs	r1, r2
 800268c:	4650      	mov	r0, sl
 800268e:	3908      	subs	r1, #8
 8002690:	4088      	lsls	r0, r1
 8002692:	231d      	movs	r3, #29
 8002694:	4680      	mov	r8, r0
 8002696:	4660      	mov	r0, ip
 8002698:	1a1b      	subs	r3, r3, r0
 800269a:	0020      	movs	r0, r4
 800269c:	40d8      	lsrs	r0, r3
 800269e:	0003      	movs	r3, r0
 80026a0:	4640      	mov	r0, r8
 80026a2:	4303      	orrs	r3, r0
 80026a4:	469a      	mov	sl, r3
 80026a6:	0023      	movs	r3, r4
 80026a8:	408b      	lsls	r3, r1
 80026aa:	4699      	mov	r9, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	4d44      	ldr	r5, [pc, #272]	@ (80027c0 <__aeabi_dmul+0x328>)
 80026b0:	4698      	mov	r8, r3
 80026b2:	1aad      	subs	r5, r5, r2
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	e715      	b.n	80024e4 <__aeabi_dmul+0x4c>
 80026b8:	4652      	mov	r2, sl
 80026ba:	4302      	orrs	r2, r0
 80026bc:	4691      	mov	r9, r2
 80026be:	d126      	bne.n	800270e <__aeabi_dmul+0x276>
 80026c0:	2200      	movs	r2, #0
 80026c2:	001d      	movs	r5, r3
 80026c4:	2302      	movs	r3, #2
 80026c6:	4692      	mov	sl, r2
 80026c8:	3208      	adds	r2, #8
 80026ca:	4690      	mov	r8, r2
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	e709      	b.n	80024e4 <__aeabi_dmul+0x4c>
 80026d0:	2400      	movs	r4, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <__aeabi_dmul+0x314>)
 80026d6:	e735      	b.n	8002544 <__aeabi_dmul+0xac>
 80026d8:	2300      	movs	r3, #0
 80026da:	2480      	movs	r4, #128	@ 0x80
 80026dc:	469b      	mov	fp, r3
 80026de:	0324      	lsls	r4, r4, #12
 80026e0:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <__aeabi_dmul+0x314>)
 80026e2:	e72f      	b.n	8002544 <__aeabi_dmul+0xac>
 80026e4:	2202      	movs	r2, #2
 80026e6:	4641      	mov	r1, r8
 80026e8:	4311      	orrs	r1, r2
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	4694      	mov	ip, r2
 80026f0:	002a      	movs	r2, r5
 80026f2:	4462      	add	r2, ip
 80026f4:	4688      	mov	r8, r1
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	290a      	cmp	r1, #10
 80026fa:	dd00      	ble.n	80026fe <__aeabi_dmul+0x266>
 80026fc:	e752      	b.n	80025a4 <__aeabi_dmul+0x10c>
 80026fe:	465a      	mov	r2, fp
 8002700:	2000      	movs	r0, #0
 8002702:	9900      	ldr	r1, [sp, #0]
 8002704:	0004      	movs	r4, r0
 8002706:	404a      	eors	r2, r1
 8002708:	4693      	mov	fp, r2
 800270a:	2602      	movs	r6, #2
 800270c:	e70b      	b.n	8002526 <__aeabi_dmul+0x8e>
 800270e:	220c      	movs	r2, #12
 8002710:	001d      	movs	r5, r3
 8002712:	2303      	movs	r3, #3
 8002714:	4681      	mov	r9, r0
 8002716:	4690      	mov	r8, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	e6e3      	b.n	80024e4 <__aeabi_dmul+0x4c>
 800271c:	2300      	movs	r3, #0
 800271e:	469a      	mov	sl, r3
 8002720:	3304      	adds	r3, #4
 8002722:	4698      	mov	r8, r3
 8002724:	3b03      	subs	r3, #3
 8002726:	2500      	movs	r5, #0
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	e6db      	b.n	80024e4 <__aeabi_dmul+0x4c>
 800272c:	4642      	mov	r2, r8
 800272e:	3301      	adds	r3, #1
 8002730:	431a      	orrs	r2, r3
 8002732:	002b      	movs	r3, r5
 8002734:	4690      	mov	r8, r2
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	4642      	mov	r2, r8
 800273c:	2400      	movs	r4, #0
 800273e:	2000      	movs	r0, #0
 8002740:	2601      	movs	r6, #1
 8002742:	2a0a      	cmp	r2, #10
 8002744:	dc00      	bgt.n	8002748 <__aeabi_dmul+0x2b0>
 8002746:	e6ea      	b.n	800251e <__aeabi_dmul+0x86>
 8002748:	e72c      	b.n	80025a4 <__aeabi_dmul+0x10c>
 800274a:	2201      	movs	r2, #1
 800274c:	1ad2      	subs	r2, r2, r3
 800274e:	2a38      	cmp	r2, #56	@ 0x38
 8002750:	dd00      	ble.n	8002754 <__aeabi_dmul+0x2bc>
 8002752:	e6f4      	b.n	800253e <__aeabi_dmul+0xa6>
 8002754:	2a1f      	cmp	r2, #31
 8002756:	dc00      	bgt.n	800275a <__aeabi_dmul+0x2c2>
 8002758:	e12a      	b.n	80029b0 <__aeabi_dmul+0x518>
 800275a:	211f      	movs	r1, #31
 800275c:	4249      	negs	r1, r1
 800275e:	1acb      	subs	r3, r1, r3
 8002760:	0021      	movs	r1, r4
 8002762:	40d9      	lsrs	r1, r3
 8002764:	000b      	movs	r3, r1
 8002766:	2a20      	cmp	r2, #32
 8002768:	d005      	beq.n	8002776 <__aeabi_dmul+0x2de>
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <__aeabi_dmul+0x32c>)
 800276c:	9d01      	ldr	r5, [sp, #4]
 800276e:	4694      	mov	ip, r2
 8002770:	4465      	add	r5, ip
 8002772:	40ac      	lsls	r4, r5
 8002774:	4320      	orrs	r0, r4
 8002776:	1e42      	subs	r2, r0, #1
 8002778:	4190      	sbcs	r0, r2
 800277a:	4318      	orrs	r0, r3
 800277c:	2307      	movs	r3, #7
 800277e:	0019      	movs	r1, r3
 8002780:	2400      	movs	r4, #0
 8002782:	4001      	ands	r1, r0
 8002784:	4203      	tst	r3, r0
 8002786:	d00c      	beq.n	80027a2 <__aeabi_dmul+0x30a>
 8002788:	230f      	movs	r3, #15
 800278a:	4003      	ands	r3, r0
 800278c:	2b04      	cmp	r3, #4
 800278e:	d100      	bne.n	8002792 <__aeabi_dmul+0x2fa>
 8002790:	e140      	b.n	8002a14 <__aeabi_dmul+0x57c>
 8002792:	1d03      	adds	r3, r0, #4
 8002794:	4283      	cmp	r3, r0
 8002796:	41a4      	sbcs	r4, r4
 8002798:	0018      	movs	r0, r3
 800279a:	4264      	negs	r4, r4
 800279c:	0761      	lsls	r1, r4, #29
 800279e:	0264      	lsls	r4, r4, #9
 80027a0:	0b24      	lsrs	r4, r4, #12
 80027a2:	08c2      	lsrs	r2, r0, #3
 80027a4:	2300      	movs	r3, #0
 80027a6:	430a      	orrs	r2, r1
 80027a8:	e6cc      	b.n	8002544 <__aeabi_dmul+0xac>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	000003ff 	.word	0x000003ff
 80027b8:	feffffff 	.word	0xfeffffff
 80027bc:	000007fe 	.word	0x000007fe
 80027c0:	fffffc0d 	.word	0xfffffc0d
 80027c4:	0000043e 	.word	0x0000043e
 80027c8:	4649      	mov	r1, r9
 80027ca:	464a      	mov	r2, r9
 80027cc:	0409      	lsls	r1, r1, #16
 80027ce:	0c09      	lsrs	r1, r1, #16
 80027d0:	000d      	movs	r5, r1
 80027d2:	0c16      	lsrs	r6, r2, #16
 80027d4:	0c02      	lsrs	r2, r0, #16
 80027d6:	0400      	lsls	r0, r0, #16
 80027d8:	0c00      	lsrs	r0, r0, #16
 80027da:	4345      	muls	r5, r0
 80027dc:	46ac      	mov	ip, r5
 80027de:	0005      	movs	r5, r0
 80027e0:	4375      	muls	r5, r6
 80027e2:	46a8      	mov	r8, r5
 80027e4:	0015      	movs	r5, r2
 80027e6:	000f      	movs	r7, r1
 80027e8:	4375      	muls	r5, r6
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	9502      	str	r5, [sp, #8]
 80027ee:	002a      	movs	r2, r5
 80027f0:	9d00      	ldr	r5, [sp, #0]
 80027f2:	436f      	muls	r7, r5
 80027f4:	4665      	mov	r5, ip
 80027f6:	0c2d      	lsrs	r5, r5, #16
 80027f8:	46a9      	mov	r9, r5
 80027fa:	4447      	add	r7, r8
 80027fc:	444f      	add	r7, r9
 80027fe:	45b8      	cmp	r8, r7
 8002800:	d905      	bls.n	800280e <__aeabi_dmul+0x376>
 8002802:	0015      	movs	r5, r2
 8002804:	2280      	movs	r2, #128	@ 0x80
 8002806:	0252      	lsls	r2, r2, #9
 8002808:	4690      	mov	r8, r2
 800280a:	4445      	add	r5, r8
 800280c:	9502      	str	r5, [sp, #8]
 800280e:	0c3d      	lsrs	r5, r7, #16
 8002810:	9503      	str	r5, [sp, #12]
 8002812:	4665      	mov	r5, ip
 8002814:	042d      	lsls	r5, r5, #16
 8002816:	043f      	lsls	r7, r7, #16
 8002818:	0c2d      	lsrs	r5, r5, #16
 800281a:	46ac      	mov	ip, r5
 800281c:	003d      	movs	r5, r7
 800281e:	4465      	add	r5, ip
 8002820:	9504      	str	r5, [sp, #16]
 8002822:	0c25      	lsrs	r5, r4, #16
 8002824:	0424      	lsls	r4, r4, #16
 8002826:	0c24      	lsrs	r4, r4, #16
 8002828:	46ac      	mov	ip, r5
 800282a:	0025      	movs	r5, r4
 800282c:	4375      	muls	r5, r6
 800282e:	46a8      	mov	r8, r5
 8002830:	4665      	mov	r5, ip
 8002832:	000f      	movs	r7, r1
 8002834:	4369      	muls	r1, r5
 8002836:	4441      	add	r1, r8
 8002838:	4689      	mov	r9, r1
 800283a:	4367      	muls	r7, r4
 800283c:	0c39      	lsrs	r1, r7, #16
 800283e:	4449      	add	r1, r9
 8002840:	436e      	muls	r6, r5
 8002842:	4588      	cmp	r8, r1
 8002844:	d903      	bls.n	800284e <__aeabi_dmul+0x3b6>
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	0252      	lsls	r2, r2, #9
 800284a:	4690      	mov	r8, r2
 800284c:	4446      	add	r6, r8
 800284e:	0c0d      	lsrs	r5, r1, #16
 8002850:	46a8      	mov	r8, r5
 8002852:	0035      	movs	r5, r6
 8002854:	4445      	add	r5, r8
 8002856:	9505      	str	r5, [sp, #20]
 8002858:	9d03      	ldr	r5, [sp, #12]
 800285a:	043f      	lsls	r7, r7, #16
 800285c:	46a8      	mov	r8, r5
 800285e:	0c3f      	lsrs	r7, r7, #16
 8002860:	0409      	lsls	r1, r1, #16
 8002862:	19c9      	adds	r1, r1, r7
 8002864:	4488      	add	r8, r1
 8002866:	4645      	mov	r5, r8
 8002868:	9503      	str	r5, [sp, #12]
 800286a:	4655      	mov	r5, sl
 800286c:	042e      	lsls	r6, r5, #16
 800286e:	0c36      	lsrs	r6, r6, #16
 8002870:	0c2f      	lsrs	r7, r5, #16
 8002872:	0035      	movs	r5, r6
 8002874:	4345      	muls	r5, r0
 8002876:	4378      	muls	r0, r7
 8002878:	4681      	mov	r9, r0
 800287a:	0038      	movs	r0, r7
 800287c:	46a8      	mov	r8, r5
 800287e:	0c2d      	lsrs	r5, r5, #16
 8002880:	46aa      	mov	sl, r5
 8002882:	9a00      	ldr	r2, [sp, #0]
 8002884:	4350      	muls	r0, r2
 8002886:	4372      	muls	r2, r6
 8002888:	444a      	add	r2, r9
 800288a:	4452      	add	r2, sl
 800288c:	4591      	cmp	r9, r2
 800288e:	d903      	bls.n	8002898 <__aeabi_dmul+0x400>
 8002890:	2580      	movs	r5, #128	@ 0x80
 8002892:	026d      	lsls	r5, r5, #9
 8002894:	46a9      	mov	r9, r5
 8002896:	4448      	add	r0, r9
 8002898:	0c15      	lsrs	r5, r2, #16
 800289a:	46a9      	mov	r9, r5
 800289c:	4645      	mov	r5, r8
 800289e:	042d      	lsls	r5, r5, #16
 80028a0:	0c2d      	lsrs	r5, r5, #16
 80028a2:	46a8      	mov	r8, r5
 80028a4:	4665      	mov	r5, ip
 80028a6:	437d      	muls	r5, r7
 80028a8:	0412      	lsls	r2, r2, #16
 80028aa:	4448      	add	r0, r9
 80028ac:	4490      	add	r8, r2
 80028ae:	46a9      	mov	r9, r5
 80028b0:	0032      	movs	r2, r6
 80028b2:	4665      	mov	r5, ip
 80028b4:	4362      	muls	r2, r4
 80028b6:	436e      	muls	r6, r5
 80028b8:	437c      	muls	r4, r7
 80028ba:	0c17      	lsrs	r7, r2, #16
 80028bc:	1936      	adds	r6, r6, r4
 80028be:	19bf      	adds	r7, r7, r6
 80028c0:	42bc      	cmp	r4, r7
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x434>
 80028c4:	2480      	movs	r4, #128	@ 0x80
 80028c6:	0264      	lsls	r4, r4, #9
 80028c8:	46a4      	mov	ip, r4
 80028ca:	44e1      	add	r9, ip
 80028cc:	9c02      	ldr	r4, [sp, #8]
 80028ce:	9e03      	ldr	r6, [sp, #12]
 80028d0:	46a4      	mov	ip, r4
 80028d2:	9d05      	ldr	r5, [sp, #20]
 80028d4:	4466      	add	r6, ip
 80028d6:	428e      	cmp	r6, r1
 80028d8:	4189      	sbcs	r1, r1
 80028da:	46ac      	mov	ip, r5
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	043c      	lsls	r4, r7, #16
 80028e0:	0c12      	lsrs	r2, r2, #16
 80028e2:	18a2      	adds	r2, r4, r2
 80028e4:	4462      	add	r2, ip
 80028e6:	4249      	negs	r1, r1
 80028e8:	1854      	adds	r4, r2, r1
 80028ea:	4446      	add	r6, r8
 80028ec:	46a4      	mov	ip, r4
 80028ee:	4546      	cmp	r6, r8
 80028f0:	41a4      	sbcs	r4, r4
 80028f2:	4682      	mov	sl, r0
 80028f4:	4264      	negs	r4, r4
 80028f6:	46a0      	mov	r8, r4
 80028f8:	42aa      	cmp	r2, r5
 80028fa:	4192      	sbcs	r2, r2
 80028fc:	458c      	cmp	ip, r1
 80028fe:	4189      	sbcs	r1, r1
 8002900:	44e2      	add	sl, ip
 8002902:	44d0      	add	r8, sl
 8002904:	4249      	negs	r1, r1
 8002906:	4252      	negs	r2, r2
 8002908:	430a      	orrs	r2, r1
 800290a:	45a0      	cmp	r8, r4
 800290c:	41a4      	sbcs	r4, r4
 800290e:	4582      	cmp	sl, r0
 8002910:	4189      	sbcs	r1, r1
 8002912:	4264      	negs	r4, r4
 8002914:	4249      	negs	r1, r1
 8002916:	430c      	orrs	r4, r1
 8002918:	4641      	mov	r1, r8
 800291a:	0c3f      	lsrs	r7, r7, #16
 800291c:	19d2      	adds	r2, r2, r7
 800291e:	1912      	adds	r2, r2, r4
 8002920:	0dcc      	lsrs	r4, r1, #23
 8002922:	9904      	ldr	r1, [sp, #16]
 8002924:	0270      	lsls	r0, r6, #9
 8002926:	4308      	orrs	r0, r1
 8002928:	1e41      	subs	r1, r0, #1
 800292a:	4188      	sbcs	r0, r1
 800292c:	4641      	mov	r1, r8
 800292e:	444a      	add	r2, r9
 8002930:	0df6      	lsrs	r6, r6, #23
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	4330      	orrs	r0, r6
 8002936:	0249      	lsls	r1, r1, #9
 8002938:	4314      	orrs	r4, r2
 800293a:	4308      	orrs	r0, r1
 800293c:	01d2      	lsls	r2, r2, #7
 800293e:	d535      	bpl.n	80029ac <__aeabi_dmul+0x514>
 8002940:	2201      	movs	r2, #1
 8002942:	0843      	lsrs	r3, r0, #1
 8002944:	4002      	ands	r2, r0
 8002946:	4313      	orrs	r3, r2
 8002948:	07e0      	lsls	r0, r4, #31
 800294a:	4318      	orrs	r0, r3
 800294c:	0864      	lsrs	r4, r4, #1
 800294e:	e634      	b.n	80025ba <__aeabi_dmul+0x122>
 8002950:	9b00      	ldr	r3, [sp, #0]
 8002952:	46a2      	mov	sl, r4
 8002954:	469b      	mov	fp, r3
 8002956:	4681      	mov	r9, r0
 8002958:	2480      	movs	r4, #128	@ 0x80
 800295a:	4653      	mov	r3, sl
 800295c:	0324      	lsls	r4, r4, #12
 800295e:	431c      	orrs	r4, r3
 8002960:	0324      	lsls	r4, r4, #12
 8002962:	464a      	mov	r2, r9
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002966:	0b24      	lsrs	r4, r4, #12
 8002968:	e5ec      	b.n	8002544 <__aeabi_dmul+0xac>
 800296a:	f000 fd53 	bl	8003414 <__clzsi2>
 800296e:	2315      	movs	r3, #21
 8002970:	469c      	mov	ip, r3
 8002972:	4484      	add	ip, r0
 8002974:	0002      	movs	r2, r0
 8002976:	4663      	mov	r3, ip
 8002978:	3220      	adds	r2, #32
 800297a:	2b1c      	cmp	r3, #28
 800297c:	dc00      	bgt.n	8002980 <__aeabi_dmul+0x4e8>
 800297e:	e684      	b.n	800268a <__aeabi_dmul+0x1f2>
 8002980:	2300      	movs	r3, #0
 8002982:	4699      	mov	r9, r3
 8002984:	0023      	movs	r3, r4
 8002986:	3808      	subs	r0, #8
 8002988:	4083      	lsls	r3, r0
 800298a:	469a      	mov	sl, r3
 800298c:	e68e      	b.n	80026ac <__aeabi_dmul+0x214>
 800298e:	f000 fd41 	bl	8003414 <__clzsi2>
 8002992:	0002      	movs	r2, r0
 8002994:	0003      	movs	r3, r0
 8002996:	3215      	adds	r2, #21
 8002998:	3320      	adds	r3, #32
 800299a:	2a1c      	cmp	r2, #28
 800299c:	dc00      	bgt.n	80029a0 <__aeabi_dmul+0x508>
 800299e:	e64e      	b.n	800263e <__aeabi_dmul+0x1a6>
 80029a0:	0002      	movs	r2, r0
 80029a2:	0034      	movs	r4, r6
 80029a4:	3a08      	subs	r2, #8
 80029a6:	2000      	movs	r0, #0
 80029a8:	4094      	lsls	r4, r2
 80029aa:	e652      	b.n	8002652 <__aeabi_dmul+0x1ba>
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	e604      	b.n	80025ba <__aeabi_dmul+0x122>
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <__aeabi_dmul+0x58c>)
 80029b2:	0021      	movs	r1, r4
 80029b4:	469c      	mov	ip, r3
 80029b6:	0003      	movs	r3, r0
 80029b8:	9d01      	ldr	r5, [sp, #4]
 80029ba:	40d3      	lsrs	r3, r2
 80029bc:	4465      	add	r5, ip
 80029be:	40a9      	lsls	r1, r5
 80029c0:	4319      	orrs	r1, r3
 80029c2:	0003      	movs	r3, r0
 80029c4:	40ab      	lsls	r3, r5
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	4183      	sbcs	r3, r0
 80029ca:	4319      	orrs	r1, r3
 80029cc:	0008      	movs	r0, r1
 80029ce:	40d4      	lsrs	r4, r2
 80029d0:	074b      	lsls	r3, r1, #29
 80029d2:	d009      	beq.n	80029e8 <__aeabi_dmul+0x550>
 80029d4:	230f      	movs	r3, #15
 80029d6:	400b      	ands	r3, r1
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d005      	beq.n	80029e8 <__aeabi_dmul+0x550>
 80029dc:	1d0b      	adds	r3, r1, #4
 80029de:	428b      	cmp	r3, r1
 80029e0:	4180      	sbcs	r0, r0
 80029e2:	4240      	negs	r0, r0
 80029e4:	1824      	adds	r4, r4, r0
 80029e6:	0018      	movs	r0, r3
 80029e8:	0223      	lsls	r3, r4, #8
 80029ea:	d400      	bmi.n	80029ee <__aeabi_dmul+0x556>
 80029ec:	e6d6      	b.n	800279c <__aeabi_dmul+0x304>
 80029ee:	2301      	movs	r3, #1
 80029f0:	2400      	movs	r4, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	e5a6      	b.n	8002544 <__aeabi_dmul+0xac>
 80029f6:	290f      	cmp	r1, #15
 80029f8:	d1aa      	bne.n	8002950 <__aeabi_dmul+0x4b8>
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	4652      	mov	r2, sl
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	421a      	tst	r2, r3
 8002a02:	d0a9      	beq.n	8002958 <__aeabi_dmul+0x4c0>
 8002a04:	421c      	tst	r4, r3
 8002a06:	d1a7      	bne.n	8002958 <__aeabi_dmul+0x4c0>
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	9b00      	ldr	r3, [sp, #0]
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	469b      	mov	fp, r3
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002a12:	e597      	b.n	8002544 <__aeabi_dmul+0xac>
 8002a14:	2400      	movs	r4, #0
 8002a16:	e6c1      	b.n	800279c <__aeabi_dmul+0x304>
 8002a18:	2400      	movs	r4, #0
 8002a1a:	4b01      	ldr	r3, [pc, #4]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	e591      	b.n	8002544 <__aeabi_dmul+0xac>
 8002a20:	000007ff 	.word	0x000007ff
 8002a24:	0000041e 	.word	0x0000041e

08002a28 <__aeabi_dsub>:
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	464e      	mov	r6, r9
 8002a2c:	4645      	mov	r5, r8
 8002a2e:	46de      	mov	lr, fp
 8002a30:	4657      	mov	r7, sl
 8002a32:	b5e0      	push	{r5, r6, r7, lr}
 8002a34:	b085      	sub	sp, #20
 8002a36:	9000      	str	r0, [sp, #0]
 8002a38:	9101      	str	r1, [sp, #4]
 8002a3a:	030c      	lsls	r4, r1, #12
 8002a3c:	004f      	lsls	r7, r1, #1
 8002a3e:	0fce      	lsrs	r6, r1, #31
 8002a40:	0a61      	lsrs	r1, r4, #9
 8002a42:	9c00      	ldr	r4, [sp, #0]
 8002a44:	46b0      	mov	r8, r6
 8002a46:	0f64      	lsrs	r4, r4, #29
 8002a48:	430c      	orrs	r4, r1
 8002a4a:	9900      	ldr	r1, [sp, #0]
 8002a4c:	0d7f      	lsrs	r7, r7, #21
 8002a4e:	00c8      	lsls	r0, r1, #3
 8002a50:	0011      	movs	r1, r2
 8002a52:	001a      	movs	r2, r3
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	469c      	mov	ip, r3
 8002a58:	9100      	str	r1, [sp, #0]
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	0051      	lsls	r1, r2, #1
 8002a5e:	0d4b      	lsrs	r3, r1, #21
 8002a60:	4699      	mov	r9, r3
 8002a62:	9b01      	ldr	r3, [sp, #4]
 8002a64:	9d00      	ldr	r5, [sp, #0]
 8002a66:	0fd9      	lsrs	r1, r3, #31
 8002a68:	4663      	mov	r3, ip
 8002a6a:	0f6a      	lsrs	r2, r5, #29
 8002a6c:	0a5b      	lsrs	r3, r3, #9
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	00ea      	lsls	r2, r5, #3
 8002a72:	4694      	mov	ip, r2
 8002a74:	4693      	mov	fp, r2
 8002a76:	4ac1      	ldr	r2, [pc, #772]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002a78:	9003      	str	r0, [sp, #12]
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	4591      	cmp	r9, r2
 8002a7e:	d100      	bne.n	8002a82 <__aeabi_dsub+0x5a>
 8002a80:	e0cd      	b.n	8002c1e <__aeabi_dsub+0x1f6>
 8002a82:	2501      	movs	r5, #1
 8002a84:	4069      	eors	r1, r5
 8002a86:	464d      	mov	r5, r9
 8002a88:	1b7d      	subs	r5, r7, r5
 8002a8a:	46aa      	mov	sl, r5
 8002a8c:	428e      	cmp	r6, r1
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x6a>
 8002a90:	e080      	b.n	8002b94 <__aeabi_dsub+0x16c>
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	dc00      	bgt.n	8002a98 <__aeabi_dsub+0x70>
 8002a96:	e335      	b.n	8003104 <__aeabi_dsub+0x6dc>
 8002a98:	4649      	mov	r1, r9
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x78>
 8002a9e:	e0df      	b.n	8002c60 <__aeabi_dsub+0x238>
 8002aa0:	4297      	cmp	r7, r2
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x7e>
 8002aa4:	e194      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002aa6:	4652      	mov	r2, sl
 8002aa8:	2501      	movs	r5, #1
 8002aaa:	2a38      	cmp	r2, #56	@ 0x38
 8002aac:	dc19      	bgt.n	8002ae2 <__aeabi_dsub+0xba>
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	0412      	lsls	r2, r2, #16
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	4652      	mov	r2, sl
 8002aba:	2a1f      	cmp	r2, #31
 8002abc:	dd00      	ble.n	8002ac0 <__aeabi_dsub+0x98>
 8002abe:	e1e3      	b.n	8002e88 <__aeabi_dsub+0x460>
 8002ac0:	4653      	mov	r3, sl
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4661      	mov	r1, ip
 8002ac6:	9d02      	ldr	r5, [sp, #8]
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	4095      	lsls	r5, r2
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	430d      	orrs	r5, r1
 8002ad0:	4661      	mov	r1, ip
 8002ad2:	4091      	lsls	r1, r2
 8002ad4:	000a      	movs	r2, r1
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	4315      	orrs	r5, r2
 8002adc:	9a02      	ldr	r2, [sp, #8]
 8002ade:	40da      	lsrs	r2, r3
 8002ae0:	1aa4      	subs	r4, r4, r2
 8002ae2:	1b45      	subs	r5, r0, r5
 8002ae4:	42a8      	cmp	r0, r5
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4240      	negs	r0, r0
 8002aea:	1a24      	subs	r4, r4, r0
 8002aec:	0223      	lsls	r3, r4, #8
 8002aee:	d400      	bmi.n	8002af2 <__aeabi_dsub+0xca>
 8002af0:	e13d      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002af2:	0264      	lsls	r4, r4, #9
 8002af4:	0a64      	lsrs	r4, r4, #9
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0xd4>
 8002afa:	e147      	b.n	8002d8c <__aeabi_dsub+0x364>
 8002afc:	0020      	movs	r0, r4
 8002afe:	f000 fc89 	bl	8003414 <__clzsi2>
 8002b02:	0003      	movs	r3, r0
 8002b04:	3b08      	subs	r3, #8
 8002b06:	2120      	movs	r1, #32
 8002b08:	0028      	movs	r0, r5
 8002b0a:	1aca      	subs	r2, r1, r3
 8002b0c:	40d0      	lsrs	r0, r2
 8002b0e:	409c      	lsls	r4, r3
 8002b10:	0002      	movs	r2, r0
 8002b12:	409d      	lsls	r5, r3
 8002b14:	4322      	orrs	r2, r4
 8002b16:	429f      	cmp	r7, r3
 8002b18:	dd00      	ble.n	8002b1c <__aeabi_dsub+0xf4>
 8002b1a:	e177      	b.n	8002e0c <__aeabi_dsub+0x3e4>
 8002b1c:	1bd8      	subs	r0, r3, r7
 8002b1e:	3001      	adds	r0, #1
 8002b20:	1a09      	subs	r1, r1, r0
 8002b22:	002c      	movs	r4, r5
 8002b24:	408d      	lsls	r5, r1
 8002b26:	40c4      	lsrs	r4, r0
 8002b28:	1e6b      	subs	r3, r5, #1
 8002b2a:	419d      	sbcs	r5, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	40c2      	lsrs	r2, r0
 8002b30:	408b      	lsls	r3, r1
 8002b32:	4325      	orrs	r5, r4
 8002b34:	2700      	movs	r7, #0
 8002b36:	0014      	movs	r4, r2
 8002b38:	431d      	orrs	r5, r3
 8002b3a:	076b      	lsls	r3, r5, #29
 8002b3c:	d009      	beq.n	8002b52 <__aeabi_dsub+0x12a>
 8002b3e:	230f      	movs	r3, #15
 8002b40:	402b      	ands	r3, r5
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d005      	beq.n	8002b52 <__aeabi_dsub+0x12a>
 8002b46:	1d2b      	adds	r3, r5, #4
 8002b48:	42ab      	cmp	r3, r5
 8002b4a:	41ad      	sbcs	r5, r5
 8002b4c:	426d      	negs	r5, r5
 8002b4e:	1964      	adds	r4, r4, r5
 8002b50:	001d      	movs	r5, r3
 8002b52:	0223      	lsls	r3, r4, #8
 8002b54:	d400      	bmi.n	8002b58 <__aeabi_dsub+0x130>
 8002b56:	e140      	b.n	8002dda <__aeabi_dsub+0x3b2>
 8002b58:	4a88      	ldr	r2, [pc, #544]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002b5a:	3701      	adds	r7, #1
 8002b5c:	4297      	cmp	r7, r2
 8002b5e:	d100      	bne.n	8002b62 <__aeabi_dsub+0x13a>
 8002b60:	e101      	b.n	8002d66 <__aeabi_dsub+0x33e>
 8002b62:	2601      	movs	r6, #1
 8002b64:	4643      	mov	r3, r8
 8002b66:	4986      	ldr	r1, [pc, #536]	@ (8002d80 <__aeabi_dsub+0x358>)
 8002b68:	08ed      	lsrs	r5, r5, #3
 8002b6a:	4021      	ands	r1, r4
 8002b6c:	074a      	lsls	r2, r1, #29
 8002b6e:	432a      	orrs	r2, r5
 8002b70:	057c      	lsls	r4, r7, #21
 8002b72:	024d      	lsls	r5, r1, #9
 8002b74:	0b2d      	lsrs	r5, r5, #12
 8002b76:	0d64      	lsrs	r4, r4, #21
 8002b78:	401e      	ands	r6, r3
 8002b7a:	0524      	lsls	r4, r4, #20
 8002b7c:	432c      	orrs	r4, r5
 8002b7e:	07f6      	lsls	r6, r6, #31
 8002b80:	4334      	orrs	r4, r6
 8002b82:	0010      	movs	r0, r2
 8002b84:	0021      	movs	r1, r4
 8002b86:	b005      	add	sp, #20
 8002b88:	bcf0      	pop	{r4, r5, r6, r7}
 8002b8a:	46bb      	mov	fp, r7
 8002b8c:	46b2      	mov	sl, r6
 8002b8e:	46a9      	mov	r9, r5
 8002b90:	46a0      	mov	r8, r4
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	dc00      	bgt.n	8002b9a <__aeabi_dsub+0x172>
 8002b98:	e2d0      	b.n	800313c <__aeabi_dsub+0x714>
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	2900      	cmp	r1, #0
 8002b9e:	d000      	beq.n	8002ba2 <__aeabi_dsub+0x17a>
 8002ba0:	e0d4      	b.n	8002d4c <__aeabi_dsub+0x324>
 8002ba2:	4661      	mov	r1, ip
 8002ba4:	9b02      	ldr	r3, [sp, #8]
 8002ba6:	4319      	orrs	r1, r3
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x184>
 8002baa:	e12b      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002bac:	1e69      	subs	r1, r5, #1
 8002bae:	2d01      	cmp	r5, #1
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dsub+0x18c>
 8002bb2:	e1d9      	b.n	8002f68 <__aeabi_dsub+0x540>
 8002bb4:	4295      	cmp	r5, r2
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x192>
 8002bb8:	e10a      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002bba:	2501      	movs	r5, #1
 8002bbc:	2938      	cmp	r1, #56	@ 0x38
 8002bbe:	dc17      	bgt.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002bc0:	468a      	mov	sl, r1
 8002bc2:	4653      	mov	r3, sl
 8002bc4:	2b1f      	cmp	r3, #31
 8002bc6:	dd00      	ble.n	8002bca <__aeabi_dsub+0x1a2>
 8002bc8:	e1e7      	b.n	8002f9a <__aeabi_dsub+0x572>
 8002bca:	2220      	movs	r2, #32
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	9b02      	ldr	r3, [sp, #8]
 8002bd0:	4661      	mov	r1, ip
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	001d      	movs	r5, r3
 8002bd6:	4653      	mov	r3, sl
 8002bd8:	40d9      	lsrs	r1, r3
 8002bda:	4663      	mov	r3, ip
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	430d      	orrs	r5, r1
 8002be2:	1e51      	subs	r1, r2, #1
 8002be4:	418a      	sbcs	r2, r1
 8002be6:	4653      	mov	r3, sl
 8002be8:	4315      	orrs	r5, r2
 8002bea:	9a02      	ldr	r2, [sp, #8]
 8002bec:	40da      	lsrs	r2, r3
 8002bee:	18a4      	adds	r4, r4, r2
 8002bf0:	182d      	adds	r5, r5, r0
 8002bf2:	4285      	cmp	r5, r0
 8002bf4:	4180      	sbcs	r0, r0
 8002bf6:	4240      	negs	r0, r0
 8002bf8:	1824      	adds	r4, r4, r0
 8002bfa:	0223      	lsls	r3, r4, #8
 8002bfc:	d400      	bmi.n	8002c00 <__aeabi_dsub+0x1d8>
 8002bfe:	e0b6      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002c00:	4b5e      	ldr	r3, [pc, #376]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002c02:	3701      	adds	r7, #1
 8002c04:	429f      	cmp	r7, r3
 8002c06:	d100      	bne.n	8002c0a <__aeabi_dsub+0x1e2>
 8002c08:	e0ad      	b.n	8002d66 <__aeabi_dsub+0x33e>
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002d80 <__aeabi_dsub+0x358>)
 8002c0e:	086a      	lsrs	r2, r5, #1
 8002c10:	401c      	ands	r4, r3
 8002c12:	4029      	ands	r1, r5
 8002c14:	430a      	orrs	r2, r1
 8002c16:	07e5      	lsls	r5, r4, #31
 8002c18:	4315      	orrs	r5, r2
 8002c1a:	0864      	lsrs	r4, r4, #1
 8002c1c:	e78d      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002c1e:	4a59      	ldr	r2, [pc, #356]	@ (8002d84 <__aeabi_dsub+0x35c>)
 8002c20:	9b02      	ldr	r3, [sp, #8]
 8002c22:	4692      	mov	sl, r2
 8002c24:	4662      	mov	r2, ip
 8002c26:	44ba      	add	sl, r7
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	d02c      	beq.n	8002c86 <__aeabi_dsub+0x25e>
 8002c2c:	428e      	cmp	r6, r1
 8002c2e:	d02e      	beq.n	8002c8e <__aeabi_dsub+0x266>
 8002c30:	4652      	mov	r2, sl
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d060      	beq.n	8002cf8 <__aeabi_dsub+0x2d0>
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_dsub+0x214>
 8002c3a:	e0db      	b.n	8002df4 <__aeabi_dsub+0x3cc>
 8002c3c:	4663      	mov	r3, ip
 8002c3e:	000e      	movs	r6, r1
 8002c40:	9c02      	ldr	r4, [sp, #8]
 8002c42:	08d8      	lsrs	r0, r3, #3
 8002c44:	0762      	lsls	r2, r4, #29
 8002c46:	4302      	orrs	r2, r0
 8002c48:	08e4      	lsrs	r4, r4, #3
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	4323      	orrs	r3, r4
 8002c4e:	d100      	bne.n	8002c52 <__aeabi_dsub+0x22a>
 8002c50:	e254      	b.n	80030fc <__aeabi_dsub+0x6d4>
 8002c52:	2580      	movs	r5, #128	@ 0x80
 8002c54:	032d      	lsls	r5, r5, #12
 8002c56:	4325      	orrs	r5, r4
 8002c58:	032d      	lsls	r5, r5, #12
 8002c5a:	4c48      	ldr	r4, [pc, #288]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002c5c:	0b2d      	lsrs	r5, r5, #12
 8002c5e:	e78c      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002c60:	4661      	mov	r1, ip
 8002c62:	9b02      	ldr	r3, [sp, #8]
 8002c64:	4319      	orrs	r1, r3
 8002c66:	d100      	bne.n	8002c6a <__aeabi_dsub+0x242>
 8002c68:	e0cc      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002c6a:	0029      	movs	r1, r5
 8002c6c:	3901      	subs	r1, #1
 8002c6e:	2d01      	cmp	r5, #1
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x24c>
 8002c72:	e188      	b.n	8002f86 <__aeabi_dsub+0x55e>
 8002c74:	4295      	cmp	r5, r2
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x252>
 8002c78:	e0aa      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002c7a:	2501      	movs	r5, #1
 8002c7c:	2938      	cmp	r1, #56	@ 0x38
 8002c7e:	dd00      	ble.n	8002c82 <__aeabi_dsub+0x25a>
 8002c80:	e72f      	b.n	8002ae2 <__aeabi_dsub+0xba>
 8002c82:	468a      	mov	sl, r1
 8002c84:	e718      	b.n	8002ab8 <__aeabi_dsub+0x90>
 8002c86:	2201      	movs	r2, #1
 8002c88:	4051      	eors	r1, r2
 8002c8a:	428e      	cmp	r6, r1
 8002c8c:	d1d0      	bne.n	8002c30 <__aeabi_dsub+0x208>
 8002c8e:	4653      	mov	r3, sl
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d100      	bne.n	8002c96 <__aeabi_dsub+0x26e>
 8002c94:	e0be      	b.n	8002e14 <__aeabi_dsub+0x3ec>
 8002c96:	2f00      	cmp	r7, #0
 8002c98:	d000      	beq.n	8002c9c <__aeabi_dsub+0x274>
 8002c9a:	e138      	b.n	8002f0e <__aeabi_dsub+0x4e6>
 8002c9c:	46ca      	mov	sl, r9
 8002c9e:	0022      	movs	r2, r4
 8002ca0:	4302      	orrs	r2, r0
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x27e>
 8002ca4:	e1e2      	b.n	800306c <__aeabi_dsub+0x644>
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	1e59      	subs	r1, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x288>
 8002cae:	e20d      	b.n	80030cc <__aeabi_dsub+0x6a4>
 8002cb0:	4a32      	ldr	r2, [pc, #200]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002cb2:	4592      	cmp	sl, r2
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x290>
 8002cb6:	e1d2      	b.n	800305e <__aeabi_dsub+0x636>
 8002cb8:	2701      	movs	r7, #1
 8002cba:	2938      	cmp	r1, #56	@ 0x38
 8002cbc:	dc13      	bgt.n	8002ce6 <__aeabi_dsub+0x2be>
 8002cbe:	291f      	cmp	r1, #31
 8002cc0:	dd00      	ble.n	8002cc4 <__aeabi_dsub+0x29c>
 8002cc2:	e1ee      	b.n	80030a2 <__aeabi_dsub+0x67a>
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	9b02      	ldr	r3, [sp, #8]
 8002cc8:	1a52      	subs	r2, r2, r1
 8002cca:	0025      	movs	r5, r4
 8002ccc:	0007      	movs	r7, r0
 8002cce:	469a      	mov	sl, r3
 8002cd0:	40cc      	lsrs	r4, r1
 8002cd2:	4090      	lsls	r0, r2
 8002cd4:	4095      	lsls	r5, r2
 8002cd6:	40cf      	lsrs	r7, r1
 8002cd8:	44a2      	add	sl, r4
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	4190      	sbcs	r0, r2
 8002cde:	4653      	mov	r3, sl
 8002ce0:	432f      	orrs	r7, r5
 8002ce2:	4307      	orrs	r7, r0
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	003d      	movs	r5, r7
 8002ce8:	4465      	add	r5, ip
 8002cea:	4565      	cmp	r5, ip
 8002cec:	4192      	sbcs	r2, r2
 8002cee:	9b02      	ldr	r3, [sp, #8]
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	464f      	mov	r7, r9
 8002cf4:	18d4      	adds	r4, r2, r3
 8002cf6:	e780      	b.n	8002bfa <__aeabi_dsub+0x1d2>
 8002cf8:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <__aeabi_dsub+0x360>)
 8002cfa:	1c7d      	adds	r5, r7, #1
 8002cfc:	4215      	tst	r5, r2
 8002cfe:	d000      	beq.n	8002d02 <__aeabi_dsub+0x2da>
 8002d00:	e0aa      	b.n	8002e58 <__aeabi_dsub+0x430>
 8002d02:	4662      	mov	r2, ip
 8002d04:	0025      	movs	r5, r4
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	4305      	orrs	r5, r0
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	d000      	beq.n	8002d12 <__aeabi_dsub+0x2ea>
 8002d10:	e0f5      	b.n	8002efe <__aeabi_dsub+0x4d6>
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	d100      	bne.n	8002d18 <__aeabi_dsub+0x2f0>
 8002d16:	e16b      	b.n	8002ff0 <__aeabi_dsub+0x5c8>
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d100      	bne.n	8002d1e <__aeabi_dsub+0x2f6>
 8002d1c:	e152      	b.n	8002fc4 <__aeabi_dsub+0x59c>
 8002d1e:	4663      	mov	r3, ip
 8002d20:	1ac5      	subs	r5, r0, r3
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	1ae2      	subs	r2, r4, r3
 8002d26:	42a8      	cmp	r0, r5
 8002d28:	419b      	sbcs	r3, r3
 8002d2a:	425b      	negs	r3, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	021a      	lsls	r2, r3, #8
 8002d30:	d400      	bmi.n	8002d34 <__aeabi_dsub+0x30c>
 8002d32:	e1d5      	b.n	80030e0 <__aeabi_dsub+0x6b8>
 8002d34:	4663      	mov	r3, ip
 8002d36:	1a1d      	subs	r5, r3, r0
 8002d38:	45ac      	cmp	ip, r5
 8002d3a:	4192      	sbcs	r2, r2
 8002d3c:	2601      	movs	r6, #1
 8002d3e:	9b02      	ldr	r3, [sp, #8]
 8002d40:	4252      	negs	r2, r2
 8002d42:	1b1c      	subs	r4, r3, r4
 8002d44:	4688      	mov	r8, r1
 8002d46:	1aa4      	subs	r4, r4, r2
 8002d48:	400e      	ands	r6, r1
 8002d4a:	e6f6      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002d4c:	4297      	cmp	r7, r2
 8002d4e:	d03f      	beq.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002d50:	4652      	mov	r2, sl
 8002d52:	2501      	movs	r5, #1
 8002d54:	2a38      	cmp	r2, #56	@ 0x38
 8002d56:	dd00      	ble.n	8002d5a <__aeabi_dsub+0x332>
 8002d58:	e74a      	b.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	9b02      	ldr	r3, [sp, #8]
 8002d5e:	0412      	lsls	r2, r2, #16
 8002d60:	4313      	orrs	r3, r2
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	e72d      	b.n	8002bc2 <__aeabi_dsub+0x19a>
 8002d66:	003c      	movs	r4, r7
 8002d68:	2500      	movs	r5, #0
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	e705      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	402b      	ands	r3, r5
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d000      	beq.n	8002d78 <__aeabi_dsub+0x350>
 8002d76:	e6e2      	b.n	8002b3e <__aeabi_dsub+0x116>
 8002d78:	e06b      	b.n	8002e52 <__aeabi_dsub+0x42a>
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	000007ff 	.word	0x000007ff
 8002d80:	ff7fffff 	.word	0xff7fffff
 8002d84:	fffff801 	.word	0xfffff801
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	f000 fb41 	bl	8003414 <__clzsi2>
 8002d92:	0003      	movs	r3, r0
 8002d94:	3318      	adds	r3, #24
 8002d96:	2b1f      	cmp	r3, #31
 8002d98:	dc00      	bgt.n	8002d9c <__aeabi_dsub+0x374>
 8002d9a:	e6b4      	b.n	8002b06 <__aeabi_dsub+0xde>
 8002d9c:	002a      	movs	r2, r5
 8002d9e:	3808      	subs	r0, #8
 8002da0:	4082      	lsls	r2, r0
 8002da2:	429f      	cmp	r7, r3
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x380>
 8002da6:	e0b9      	b.n	8002f1c <__aeabi_dsub+0x4f4>
 8002da8:	1bdb      	subs	r3, r3, r7
 8002daa:	1c58      	adds	r0, r3, #1
 8002dac:	281f      	cmp	r0, #31
 8002dae:	dc00      	bgt.n	8002db2 <__aeabi_dsub+0x38a>
 8002db0:	e1a0      	b.n	80030f4 <__aeabi_dsub+0x6cc>
 8002db2:	0015      	movs	r5, r2
 8002db4:	3b1f      	subs	r3, #31
 8002db6:	40dd      	lsrs	r5, r3
 8002db8:	2820      	cmp	r0, #32
 8002dba:	d005      	beq.n	8002dc8 <__aeabi_dsub+0x3a0>
 8002dbc:	2340      	movs	r3, #64	@ 0x40
 8002dbe:	1a1b      	subs	r3, r3, r0
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	1e53      	subs	r3, r2, #1
 8002dc4:	419a      	sbcs	r2, r3
 8002dc6:	4315      	orrs	r5, r2
 8002dc8:	2307      	movs	r3, #7
 8002dca:	2700      	movs	r7, #0
 8002dcc:	402b      	ands	r3, r5
 8002dce:	e7d0      	b.n	8002d72 <__aeabi_dsub+0x34a>
 8002dd0:	08c0      	lsrs	r0, r0, #3
 8002dd2:	0762      	lsls	r2, r4, #29
 8002dd4:	4302      	orrs	r2, r0
 8002dd6:	08e4      	lsrs	r4, r4, #3
 8002dd8:	e737      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002dda:	08ea      	lsrs	r2, r5, #3
 8002ddc:	0763      	lsls	r3, r4, #29
 8002dde:	431a      	orrs	r2, r3
 8002de0:	4bd3      	ldr	r3, [pc, #844]	@ (8003130 <__aeabi_dsub+0x708>)
 8002de2:	08e4      	lsrs	r4, r4, #3
 8002de4:	429f      	cmp	r7, r3
 8002de6:	d100      	bne.n	8002dea <__aeabi_dsub+0x3c2>
 8002de8:	e72f      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002dea:	0324      	lsls	r4, r4, #12
 8002dec:	0b25      	lsrs	r5, r4, #12
 8002dee:	057c      	lsls	r4, r7, #21
 8002df0:	0d64      	lsrs	r4, r4, #21
 8002df2:	e6c2      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002df4:	46ca      	mov	sl, r9
 8002df6:	0022      	movs	r2, r4
 8002df8:	4302      	orrs	r2, r0
 8002dfa:	d158      	bne.n	8002eae <__aeabi_dsub+0x486>
 8002dfc:	4663      	mov	r3, ip
 8002dfe:	000e      	movs	r6, r1
 8002e00:	9c02      	ldr	r4, [sp, #8]
 8002e02:	9303      	str	r3, [sp, #12]
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	4657      	mov	r7, sl
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	e7e7      	b.n	8002ddc <__aeabi_dsub+0x3b4>
 8002e0c:	4cc9      	ldr	r4, [pc, #804]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002e0e:	1aff      	subs	r7, r7, r3
 8002e10:	4014      	ands	r4, r2
 8002e12:	e692      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002e14:	4dc8      	ldr	r5, [pc, #800]	@ (8003138 <__aeabi_dsub+0x710>)
 8002e16:	1c7a      	adds	r2, r7, #1
 8002e18:	422a      	tst	r2, r5
 8002e1a:	d000      	beq.n	8002e1e <__aeabi_dsub+0x3f6>
 8002e1c:	e084      	b.n	8002f28 <__aeabi_dsub+0x500>
 8002e1e:	0022      	movs	r2, r4
 8002e20:	4302      	orrs	r2, r0
 8002e22:	2f00      	cmp	r7, #0
 8002e24:	d000      	beq.n	8002e28 <__aeabi_dsub+0x400>
 8002e26:	e0ef      	b.n	8003008 <__aeabi_dsub+0x5e0>
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x406>
 8002e2c:	e0e5      	b.n	8002ffa <__aeabi_dsub+0x5d2>
 8002e2e:	4662      	mov	r2, ip
 8002e30:	9902      	ldr	r1, [sp, #8]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	d100      	bne.n	8002e38 <__aeabi_dsub+0x410>
 8002e36:	e0c5      	b.n	8002fc4 <__aeabi_dsub+0x59c>
 8002e38:	4663      	mov	r3, ip
 8002e3a:	18c5      	adds	r5, r0, r3
 8002e3c:	468c      	mov	ip, r1
 8002e3e:	4285      	cmp	r5, r0
 8002e40:	4180      	sbcs	r0, r0
 8002e42:	4464      	add	r4, ip
 8002e44:	4240      	negs	r0, r0
 8002e46:	1824      	adds	r4, r4, r0
 8002e48:	0223      	lsls	r3, r4, #8
 8002e4a:	d502      	bpl.n	8002e52 <__aeabi_dsub+0x42a>
 8002e4c:	4bb9      	ldr	r3, [pc, #740]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002e4e:	3701      	adds	r7, #1
 8002e50:	401c      	ands	r4, r3
 8002e52:	46ba      	mov	sl, r7
 8002e54:	9503      	str	r5, [sp, #12]
 8002e56:	e7d5      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002e58:	4662      	mov	r2, ip
 8002e5a:	1a85      	subs	r5, r0, r2
 8002e5c:	42a8      	cmp	r0, r5
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	4252      	negs	r2, r2
 8002e62:	4691      	mov	r9, r2
 8002e64:	9b02      	ldr	r3, [sp, #8]
 8002e66:	1ae3      	subs	r3, r4, r3
 8002e68:	001a      	movs	r2, r3
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1ad2      	subs	r2, r2, r3
 8002e6e:	0013      	movs	r3, r2
 8002e70:	4691      	mov	r9, r2
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	d46c      	bmi.n	8002f50 <__aeabi_dsub+0x528>
 8002e76:	464a      	mov	r2, r9
 8002e78:	464c      	mov	r4, r9
 8002e7a:	432a      	orrs	r2, r5
 8002e7c:	d000      	beq.n	8002e80 <__aeabi_dsub+0x458>
 8002e7e:	e63a      	b.n	8002af6 <__aeabi_dsub+0xce>
 8002e80:	2600      	movs	r6, #0
 8002e82:	2400      	movs	r4, #0
 8002e84:	2500      	movs	r5, #0
 8002e86:	e678      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002e88:	9902      	ldr	r1, [sp, #8]
 8002e8a:	4653      	mov	r3, sl
 8002e8c:	000d      	movs	r5, r1
 8002e8e:	3a20      	subs	r2, #32
 8002e90:	40d5      	lsrs	r5, r2
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d006      	beq.n	8002ea4 <__aeabi_dsub+0x47c>
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	1ad2      	subs	r2, r2, r3
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	4662      	mov	r2, ip
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	4693      	mov	fp, r2
 8002ea4:	465b      	mov	r3, fp
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	4193      	sbcs	r3, r2
 8002eaa:	431d      	orrs	r5, r3
 8002eac:	e619      	b.n	8002ae2 <__aeabi_dsub+0xba>
 8002eae:	4653      	mov	r3, sl
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x490>
 8002eb6:	e0c6      	b.n	8003046 <__aeabi_dsub+0x61e>
 8002eb8:	4e9d      	ldr	r6, [pc, #628]	@ (8003130 <__aeabi_dsub+0x708>)
 8002eba:	45b2      	cmp	sl, r6
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x498>
 8002ebe:	e6bd      	b.n	8002c3c <__aeabi_dsub+0x214>
 8002ec0:	4688      	mov	r8, r1
 8002ec2:	000e      	movs	r6, r1
 8002ec4:	2501      	movs	r5, #1
 8002ec6:	2a38      	cmp	r2, #56	@ 0x38
 8002ec8:	dc10      	bgt.n	8002eec <__aeabi_dsub+0x4c4>
 8002eca:	2a1f      	cmp	r2, #31
 8002ecc:	dc7f      	bgt.n	8002fce <__aeabi_dsub+0x5a6>
 8002ece:	2120      	movs	r1, #32
 8002ed0:	0025      	movs	r5, r4
 8002ed2:	1a89      	subs	r1, r1, r2
 8002ed4:	0007      	movs	r7, r0
 8002ed6:	4088      	lsls	r0, r1
 8002ed8:	408d      	lsls	r5, r1
 8002eda:	40d7      	lsrs	r7, r2
 8002edc:	40d4      	lsrs	r4, r2
 8002ede:	1e41      	subs	r1, r0, #1
 8002ee0:	4188      	sbcs	r0, r1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	433d      	orrs	r5, r7
 8002ee6:	1b1b      	subs	r3, r3, r4
 8002ee8:	4305      	orrs	r5, r0
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	4662      	mov	r2, ip
 8002eee:	1b55      	subs	r5, r2, r5
 8002ef0:	45ac      	cmp	ip, r5
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	9b02      	ldr	r3, [sp, #8]
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	464f      	mov	r7, r9
 8002efa:	1a9c      	subs	r4, r3, r2
 8002efc:	e5f6      	b.n	8002aec <__aeabi_dsub+0xc4>
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	d000      	beq.n	8002f04 <__aeabi_dsub+0x4dc>
 8002f02:	e0b7      	b.n	8003074 <__aeabi_dsub+0x64c>
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	d100      	bne.n	8002f0a <__aeabi_dsub+0x4e2>
 8002f08:	e0f0      	b.n	80030ec <__aeabi_dsub+0x6c4>
 8002f0a:	2601      	movs	r6, #1
 8002f0c:	400e      	ands	r6, r1
 8002f0e:	4663      	mov	r3, ip
 8002f10:	9802      	ldr	r0, [sp, #8]
 8002f12:	08d9      	lsrs	r1, r3, #3
 8002f14:	0742      	lsls	r2, r0, #29
 8002f16:	430a      	orrs	r2, r1
 8002f18:	08c4      	lsrs	r4, r0, #3
 8002f1a:	e696      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002f1c:	4c85      	ldr	r4, [pc, #532]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002f1e:	1aff      	subs	r7, r7, r3
 8002f20:	4014      	ands	r4, r2
 8002f22:	0762      	lsls	r2, r4, #29
 8002f24:	08e4      	lsrs	r4, r4, #3
 8002f26:	e760      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8002f28:	4981      	ldr	r1, [pc, #516]	@ (8003130 <__aeabi_dsub+0x708>)
 8002f2a:	428a      	cmp	r2, r1
 8002f2c:	d100      	bne.n	8002f30 <__aeabi_dsub+0x508>
 8002f2e:	e0c9      	b.n	80030c4 <__aeabi_dsub+0x69c>
 8002f30:	4663      	mov	r3, ip
 8002f32:	18c1      	adds	r1, r0, r3
 8002f34:	4281      	cmp	r1, r0
 8002f36:	4180      	sbcs	r0, r0
 8002f38:	9b02      	ldr	r3, [sp, #8]
 8002f3a:	4240      	negs	r0, r0
 8002f3c:	18e3      	adds	r3, r4, r3
 8002f3e:	181b      	adds	r3, r3, r0
 8002f40:	07dd      	lsls	r5, r3, #31
 8002f42:	085c      	lsrs	r4, r3, #1
 8002f44:	2307      	movs	r3, #7
 8002f46:	0849      	lsrs	r1, r1, #1
 8002f48:	430d      	orrs	r5, r1
 8002f4a:	0017      	movs	r7, r2
 8002f4c:	402b      	ands	r3, r5
 8002f4e:	e710      	b.n	8002d72 <__aeabi_dsub+0x34a>
 8002f50:	4663      	mov	r3, ip
 8002f52:	1a1d      	subs	r5, r3, r0
 8002f54:	45ac      	cmp	ip, r5
 8002f56:	4192      	sbcs	r2, r2
 8002f58:	2601      	movs	r6, #1
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	4252      	negs	r2, r2
 8002f5e:	1b1c      	subs	r4, r3, r4
 8002f60:	4688      	mov	r8, r1
 8002f62:	1aa4      	subs	r4, r4, r2
 8002f64:	400e      	ands	r6, r1
 8002f66:	e5c6      	b.n	8002af6 <__aeabi_dsub+0xce>
 8002f68:	4663      	mov	r3, ip
 8002f6a:	18c5      	adds	r5, r0, r3
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4285      	cmp	r5, r0
 8002f70:	4180      	sbcs	r0, r0
 8002f72:	469c      	mov	ip, r3
 8002f74:	4240      	negs	r0, r0
 8002f76:	4464      	add	r4, ip
 8002f78:	1824      	adds	r4, r4, r0
 8002f7a:	2701      	movs	r7, #1
 8002f7c:	0223      	lsls	r3, r4, #8
 8002f7e:	d400      	bmi.n	8002f82 <__aeabi_dsub+0x55a>
 8002f80:	e6f5      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002f82:	2702      	movs	r7, #2
 8002f84:	e641      	b.n	8002c0a <__aeabi_dsub+0x1e2>
 8002f86:	4663      	mov	r3, ip
 8002f88:	1ac5      	subs	r5, r0, r3
 8002f8a:	42a8      	cmp	r0, r5
 8002f8c:	4180      	sbcs	r0, r0
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4240      	negs	r0, r0
 8002f92:	1ae4      	subs	r4, r4, r3
 8002f94:	2701      	movs	r7, #1
 8002f96:	1a24      	subs	r4, r4, r0
 8002f98:	e5a8      	b.n	8002aec <__aeabi_dsub+0xc4>
 8002f9a:	9d02      	ldr	r5, [sp, #8]
 8002f9c:	4652      	mov	r2, sl
 8002f9e:	002b      	movs	r3, r5
 8002fa0:	3a20      	subs	r2, #32
 8002fa2:	40d3      	lsrs	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	4653      	mov	r3, sl
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d006      	beq.n	8002fba <__aeabi_dsub+0x592>
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	002b      	movs	r3, r5
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	4662      	mov	r2, ip
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	4693      	mov	fp, r2
 8002fba:	465d      	mov	r5, fp
 8002fbc:	1e6b      	subs	r3, r5, #1
 8002fbe:	419d      	sbcs	r5, r3
 8002fc0:	430d      	orrs	r5, r1
 8002fc2:	e615      	b.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002fc4:	0762      	lsls	r2, r4, #29
 8002fc6:	08c0      	lsrs	r0, r0, #3
 8002fc8:	4302      	orrs	r2, r0
 8002fca:	08e4      	lsrs	r4, r4, #3
 8002fcc:	e70d      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0027      	movs	r7, r4
 8002fd2:	3920      	subs	r1, #32
 8002fd4:	40cf      	lsrs	r7, r1
 8002fd6:	2a20      	cmp	r2, #32
 8002fd8:	d005      	beq.n	8002fe6 <__aeabi_dsub+0x5be>
 8002fda:	2140      	movs	r1, #64	@ 0x40
 8002fdc:	1a8a      	subs	r2, r1, r2
 8002fde:	4094      	lsls	r4, r2
 8002fe0:	0025      	movs	r5, r4
 8002fe2:	4305      	orrs	r5, r0
 8002fe4:	9503      	str	r5, [sp, #12]
 8002fe6:	9d03      	ldr	r5, [sp, #12]
 8002fe8:	1e6a      	subs	r2, r5, #1
 8002fea:	4195      	sbcs	r5, r2
 8002fec:	433d      	orrs	r5, r7
 8002fee:	e77d      	b.n	8002eec <__aeabi_dsub+0x4c4>
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d100      	bne.n	8002ff6 <__aeabi_dsub+0x5ce>
 8002ff4:	e744      	b.n	8002e80 <__aeabi_dsub+0x458>
 8002ff6:	2601      	movs	r6, #1
 8002ff8:	400e      	ands	r6, r1
 8002ffa:	4663      	mov	r3, ip
 8002ffc:	08d9      	lsrs	r1, r3, #3
 8002ffe:	9b02      	ldr	r3, [sp, #8]
 8003000:	075a      	lsls	r2, r3, #29
 8003002:	430a      	orrs	r2, r1
 8003004:	08dc      	lsrs	r4, r3, #3
 8003006:	e6f0      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8003008:	2a00      	cmp	r2, #0
 800300a:	d028      	beq.n	800305e <__aeabi_dsub+0x636>
 800300c:	4662      	mov	r2, ip
 800300e:	9f02      	ldr	r7, [sp, #8]
 8003010:	08c0      	lsrs	r0, r0, #3
 8003012:	433a      	orrs	r2, r7
 8003014:	d100      	bne.n	8003018 <__aeabi_dsub+0x5f0>
 8003016:	e6dc      	b.n	8002dd2 <__aeabi_dsub+0x3aa>
 8003018:	0762      	lsls	r2, r4, #29
 800301a:	4310      	orrs	r0, r2
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	08e4      	lsrs	r4, r4, #3
 8003020:	0312      	lsls	r2, r2, #12
 8003022:	4214      	tst	r4, r2
 8003024:	d009      	beq.n	800303a <__aeabi_dsub+0x612>
 8003026:	08fd      	lsrs	r5, r7, #3
 8003028:	4215      	tst	r5, r2
 800302a:	d106      	bne.n	800303a <__aeabi_dsub+0x612>
 800302c:	4663      	mov	r3, ip
 800302e:	2601      	movs	r6, #1
 8003030:	002c      	movs	r4, r5
 8003032:	08d8      	lsrs	r0, r3, #3
 8003034:	077b      	lsls	r3, r7, #29
 8003036:	4318      	orrs	r0, r3
 8003038:	400e      	ands	r6, r1
 800303a:	0f42      	lsrs	r2, r0, #29
 800303c:	00c0      	lsls	r0, r0, #3
 800303e:	08c0      	lsrs	r0, r0, #3
 8003040:	0752      	lsls	r2, r2, #29
 8003042:	4302      	orrs	r2, r0
 8003044:	e601      	b.n	8002c4a <__aeabi_dsub+0x222>
 8003046:	4663      	mov	r3, ip
 8003048:	1a1d      	subs	r5, r3, r0
 800304a:	45ac      	cmp	ip, r5
 800304c:	4192      	sbcs	r2, r2
 800304e:	9b02      	ldr	r3, [sp, #8]
 8003050:	4252      	negs	r2, r2
 8003052:	1b1c      	subs	r4, r3, r4
 8003054:	000e      	movs	r6, r1
 8003056:	4688      	mov	r8, r1
 8003058:	2701      	movs	r7, #1
 800305a:	1aa4      	subs	r4, r4, r2
 800305c:	e546      	b.n	8002aec <__aeabi_dsub+0xc4>
 800305e:	4663      	mov	r3, ip
 8003060:	08d9      	lsrs	r1, r3, #3
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	075a      	lsls	r2, r3, #29
 8003066:	430a      	orrs	r2, r1
 8003068:	08dc      	lsrs	r4, r3, #3
 800306a:	e5ee      	b.n	8002c4a <__aeabi_dsub+0x222>
 800306c:	4663      	mov	r3, ip
 800306e:	9c02      	ldr	r4, [sp, #8]
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	e6c7      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8003074:	08c0      	lsrs	r0, r0, #3
 8003076:	2a00      	cmp	r2, #0
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x654>
 800307a:	e6aa      	b.n	8002dd2 <__aeabi_dsub+0x3aa>
 800307c:	0762      	lsls	r2, r4, #29
 800307e:	4310      	orrs	r0, r2
 8003080:	2280      	movs	r2, #128	@ 0x80
 8003082:	08e4      	lsrs	r4, r4, #3
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	4214      	tst	r4, r2
 8003088:	d0d7      	beq.n	800303a <__aeabi_dsub+0x612>
 800308a:	9f02      	ldr	r7, [sp, #8]
 800308c:	08fd      	lsrs	r5, r7, #3
 800308e:	4215      	tst	r5, r2
 8003090:	d1d3      	bne.n	800303a <__aeabi_dsub+0x612>
 8003092:	4663      	mov	r3, ip
 8003094:	2601      	movs	r6, #1
 8003096:	08d8      	lsrs	r0, r3, #3
 8003098:	077b      	lsls	r3, r7, #29
 800309a:	002c      	movs	r4, r5
 800309c:	4318      	orrs	r0, r3
 800309e:	400e      	ands	r6, r1
 80030a0:	e7cb      	b.n	800303a <__aeabi_dsub+0x612>
 80030a2:	000a      	movs	r2, r1
 80030a4:	0027      	movs	r7, r4
 80030a6:	3a20      	subs	r2, #32
 80030a8:	40d7      	lsrs	r7, r2
 80030aa:	2920      	cmp	r1, #32
 80030ac:	d005      	beq.n	80030ba <__aeabi_dsub+0x692>
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	1a52      	subs	r2, r2, r1
 80030b2:	4094      	lsls	r4, r2
 80030b4:	0025      	movs	r5, r4
 80030b6:	4305      	orrs	r5, r0
 80030b8:	9503      	str	r5, [sp, #12]
 80030ba:	9d03      	ldr	r5, [sp, #12]
 80030bc:	1e6a      	subs	r2, r5, #1
 80030be:	4195      	sbcs	r5, r2
 80030c0:	432f      	orrs	r7, r5
 80030c2:	e610      	b.n	8002ce6 <__aeabi_dsub+0x2be>
 80030c4:	0014      	movs	r4, r2
 80030c6:	2500      	movs	r5, #0
 80030c8:	2200      	movs	r2, #0
 80030ca:	e556      	b.n	8002b7a <__aeabi_dsub+0x152>
 80030cc:	9b02      	ldr	r3, [sp, #8]
 80030ce:	4460      	add	r0, ip
 80030d0:	4699      	mov	r9, r3
 80030d2:	4560      	cmp	r0, ip
 80030d4:	4192      	sbcs	r2, r2
 80030d6:	444c      	add	r4, r9
 80030d8:	4252      	negs	r2, r2
 80030da:	0005      	movs	r5, r0
 80030dc:	18a4      	adds	r4, r4, r2
 80030de:	e74c      	b.n	8002f7a <__aeabi_dsub+0x552>
 80030e0:	001a      	movs	r2, r3
 80030e2:	001c      	movs	r4, r3
 80030e4:	432a      	orrs	r2, r5
 80030e6:	d000      	beq.n	80030ea <__aeabi_dsub+0x6c2>
 80030e8:	e6b3      	b.n	8002e52 <__aeabi_dsub+0x42a>
 80030ea:	e6c9      	b.n	8002e80 <__aeabi_dsub+0x458>
 80030ec:	2480      	movs	r4, #128	@ 0x80
 80030ee:	2600      	movs	r6, #0
 80030f0:	0324      	lsls	r4, r4, #12
 80030f2:	e5ae      	b.n	8002c52 <__aeabi_dsub+0x22a>
 80030f4:	2120      	movs	r1, #32
 80030f6:	2500      	movs	r5, #0
 80030f8:	1a09      	subs	r1, r1, r0
 80030fa:	e517      	b.n	8002b2c <__aeabi_dsub+0x104>
 80030fc:	2200      	movs	r2, #0
 80030fe:	2500      	movs	r5, #0
 8003100:	4c0b      	ldr	r4, [pc, #44]	@ (8003130 <__aeabi_dsub+0x708>)
 8003102:	e53a      	b.n	8002b7a <__aeabi_dsub+0x152>
 8003104:	2d00      	cmp	r5, #0
 8003106:	d100      	bne.n	800310a <__aeabi_dsub+0x6e2>
 8003108:	e5f6      	b.n	8002cf8 <__aeabi_dsub+0x2d0>
 800310a:	464b      	mov	r3, r9
 800310c:	1bda      	subs	r2, r3, r7
 800310e:	4692      	mov	sl, r2
 8003110:	2f00      	cmp	r7, #0
 8003112:	d100      	bne.n	8003116 <__aeabi_dsub+0x6ee>
 8003114:	e66f      	b.n	8002df6 <__aeabi_dsub+0x3ce>
 8003116:	2a38      	cmp	r2, #56	@ 0x38
 8003118:	dc05      	bgt.n	8003126 <__aeabi_dsub+0x6fe>
 800311a:	2680      	movs	r6, #128	@ 0x80
 800311c:	0436      	lsls	r6, r6, #16
 800311e:	4334      	orrs	r4, r6
 8003120:	4688      	mov	r8, r1
 8003122:	000e      	movs	r6, r1
 8003124:	e6d1      	b.n	8002eca <__aeabi_dsub+0x4a2>
 8003126:	4688      	mov	r8, r1
 8003128:	000e      	movs	r6, r1
 800312a:	2501      	movs	r5, #1
 800312c:	e6de      	b.n	8002eec <__aeabi_dsub+0x4c4>
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	000007ff 	.word	0x000007ff
 8003134:	ff7fffff 	.word	0xff7fffff
 8003138:	000007fe 	.word	0x000007fe
 800313c:	2d00      	cmp	r5, #0
 800313e:	d100      	bne.n	8003142 <__aeabi_dsub+0x71a>
 8003140:	e668      	b.n	8002e14 <__aeabi_dsub+0x3ec>
 8003142:	464b      	mov	r3, r9
 8003144:	1bd9      	subs	r1, r3, r7
 8003146:	2f00      	cmp	r7, #0
 8003148:	d101      	bne.n	800314e <__aeabi_dsub+0x726>
 800314a:	468a      	mov	sl, r1
 800314c:	e5a7      	b.n	8002c9e <__aeabi_dsub+0x276>
 800314e:	2701      	movs	r7, #1
 8003150:	2938      	cmp	r1, #56	@ 0x38
 8003152:	dd00      	ble.n	8003156 <__aeabi_dsub+0x72e>
 8003154:	e5c7      	b.n	8002ce6 <__aeabi_dsub+0x2be>
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	0412      	lsls	r2, r2, #16
 800315a:	4314      	orrs	r4, r2
 800315c:	e5af      	b.n	8002cbe <__aeabi_dsub+0x296>
 800315e:	46c0      	nop			@ (mov r8, r8)

08003160 <__aeabi_d2iz>:
 8003160:	000b      	movs	r3, r1
 8003162:	0002      	movs	r2, r0
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	4d16      	ldr	r5, [pc, #88]	@ (80031c0 <__aeabi_d2iz+0x60>)
 8003168:	030c      	lsls	r4, r1, #12
 800316a:	b082      	sub	sp, #8
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	2000      	movs	r0, #0
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	0b24      	lsrs	r4, r4, #12
 8003176:	0d49      	lsrs	r1, r1, #21
 8003178:	0fde      	lsrs	r6, r3, #31
 800317a:	42a9      	cmp	r1, r5
 800317c:	dd04      	ble.n	8003188 <__aeabi_d2iz+0x28>
 800317e:	4811      	ldr	r0, [pc, #68]	@ (80031c4 <__aeabi_d2iz+0x64>)
 8003180:	4281      	cmp	r1, r0
 8003182:	dd03      	ble.n	800318c <__aeabi_d2iz+0x2c>
 8003184:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <__aeabi_d2iz+0x68>)
 8003186:	18f0      	adds	r0, r6, r3
 8003188:	b002      	add	sp, #8
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	2080      	movs	r0, #128	@ 0x80
 800318e:	0340      	lsls	r0, r0, #13
 8003190:	4320      	orrs	r0, r4
 8003192:	4c0e      	ldr	r4, [pc, #56]	@ (80031cc <__aeabi_d2iz+0x6c>)
 8003194:	1a64      	subs	r4, r4, r1
 8003196:	2c1f      	cmp	r4, #31
 8003198:	dd08      	ble.n	80031ac <__aeabi_d2iz+0x4c>
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <__aeabi_d2iz+0x70>)
 800319c:	1a5b      	subs	r3, r3, r1
 800319e:	40d8      	lsrs	r0, r3
 80031a0:	0003      	movs	r3, r0
 80031a2:	4258      	negs	r0, r3
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	d1ef      	bne.n	8003188 <__aeabi_d2iz+0x28>
 80031a8:	0018      	movs	r0, r3
 80031aa:	e7ed      	b.n	8003188 <__aeabi_d2iz+0x28>
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <__aeabi_d2iz+0x74>)
 80031ae:	9a00      	ldr	r2, [sp, #0]
 80031b0:	469c      	mov	ip, r3
 80031b2:	0003      	movs	r3, r0
 80031b4:	4461      	add	r1, ip
 80031b6:	408b      	lsls	r3, r1
 80031b8:	40e2      	lsrs	r2, r4
 80031ba:	4313      	orrs	r3, r2
 80031bc:	e7f1      	b.n	80031a2 <__aeabi_d2iz+0x42>
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	000003fe 	.word	0x000003fe
 80031c4:	0000041d 	.word	0x0000041d
 80031c8:	7fffffff 	.word	0x7fffffff
 80031cc:	00000433 	.word	0x00000433
 80031d0:	00000413 	.word	0x00000413
 80031d4:	fffffbed 	.word	0xfffffbed

080031d8 <__aeabi_i2d>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	2800      	cmp	r0, #0
 80031dc:	d016      	beq.n	800320c <__aeabi_i2d+0x34>
 80031de:	17c3      	asrs	r3, r0, #31
 80031e0:	18c5      	adds	r5, r0, r3
 80031e2:	405d      	eors	r5, r3
 80031e4:	0fc4      	lsrs	r4, r0, #31
 80031e6:	0028      	movs	r0, r5
 80031e8:	f000 f914 	bl	8003414 <__clzsi2>
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <__aeabi_i2d+0x58>)
 80031ee:	1a1b      	subs	r3, r3, r0
 80031f0:	055b      	lsls	r3, r3, #21
 80031f2:	0d5b      	lsrs	r3, r3, #21
 80031f4:	280a      	cmp	r0, #10
 80031f6:	dc14      	bgt.n	8003222 <__aeabi_i2d+0x4a>
 80031f8:	0002      	movs	r2, r0
 80031fa:	002e      	movs	r6, r5
 80031fc:	3215      	adds	r2, #21
 80031fe:	4096      	lsls	r6, r2
 8003200:	220b      	movs	r2, #11
 8003202:	1a12      	subs	r2, r2, r0
 8003204:	40d5      	lsrs	r5, r2
 8003206:	032d      	lsls	r5, r5, #12
 8003208:	0b2d      	lsrs	r5, r5, #12
 800320a:	e003      	b.n	8003214 <__aeabi_i2d+0x3c>
 800320c:	2400      	movs	r4, #0
 800320e:	2300      	movs	r3, #0
 8003210:	2500      	movs	r5, #0
 8003212:	2600      	movs	r6, #0
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	432b      	orrs	r3, r5
 8003218:	07e4      	lsls	r4, r4, #31
 800321a:	4323      	orrs	r3, r4
 800321c:	0030      	movs	r0, r6
 800321e:	0019      	movs	r1, r3
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	380b      	subs	r0, #11
 8003224:	4085      	lsls	r5, r0
 8003226:	032d      	lsls	r5, r5, #12
 8003228:	2600      	movs	r6, #0
 800322a:	0b2d      	lsrs	r5, r5, #12
 800322c:	e7f2      	b.n	8003214 <__aeabi_i2d+0x3c>
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	0000041e 	.word	0x0000041e

08003234 <__aeabi_ui2d>:
 8003234:	b510      	push	{r4, lr}
 8003236:	1e04      	subs	r4, r0, #0
 8003238:	d010      	beq.n	800325c <__aeabi_ui2d+0x28>
 800323a:	f000 f8eb 	bl	8003414 <__clzsi2>
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <__aeabi_ui2d+0x44>)
 8003240:	1a1b      	subs	r3, r3, r0
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	280a      	cmp	r0, #10
 8003248:	dc0f      	bgt.n	800326a <__aeabi_ui2d+0x36>
 800324a:	220b      	movs	r2, #11
 800324c:	0021      	movs	r1, r4
 800324e:	1a12      	subs	r2, r2, r0
 8003250:	40d1      	lsrs	r1, r2
 8003252:	3015      	adds	r0, #21
 8003254:	030a      	lsls	r2, r1, #12
 8003256:	4084      	lsls	r4, r0
 8003258:	0b12      	lsrs	r2, r2, #12
 800325a:	e001      	b.n	8003260 <__aeabi_ui2d+0x2c>
 800325c:	2300      	movs	r3, #0
 800325e:	2200      	movs	r2, #0
 8003260:	051b      	lsls	r3, r3, #20
 8003262:	4313      	orrs	r3, r2
 8003264:	0020      	movs	r0, r4
 8003266:	0019      	movs	r1, r3
 8003268:	bd10      	pop	{r4, pc}
 800326a:	0022      	movs	r2, r4
 800326c:	380b      	subs	r0, #11
 800326e:	4082      	lsls	r2, r0
 8003270:	0312      	lsls	r2, r2, #12
 8003272:	2400      	movs	r4, #0
 8003274:	0b12      	lsrs	r2, r2, #12
 8003276:	e7f3      	b.n	8003260 <__aeabi_ui2d+0x2c>
 8003278:	0000041e 	.word	0x0000041e

0800327c <__aeabi_f2d>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	0242      	lsls	r2, r0, #9
 8003280:	0043      	lsls	r3, r0, #1
 8003282:	0fc4      	lsrs	r4, r0, #31
 8003284:	20fe      	movs	r0, #254	@ 0xfe
 8003286:	0e1b      	lsrs	r3, r3, #24
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	0a55      	lsrs	r5, r2, #9
 800328c:	4208      	tst	r0, r1
 800328e:	d00c      	beq.n	80032aa <__aeabi_f2d+0x2e>
 8003290:	21e0      	movs	r1, #224	@ 0xe0
 8003292:	0089      	lsls	r1, r1, #2
 8003294:	468c      	mov	ip, r1
 8003296:	076d      	lsls	r5, r5, #29
 8003298:	0b12      	lsrs	r2, r2, #12
 800329a:	4463      	add	r3, ip
 800329c:	051b      	lsls	r3, r3, #20
 800329e:	4313      	orrs	r3, r2
 80032a0:	07e4      	lsls	r4, r4, #31
 80032a2:	4323      	orrs	r3, r4
 80032a4:	0028      	movs	r0, r5
 80032a6:	0019      	movs	r1, r3
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d114      	bne.n	80032d8 <__aeabi_f2d+0x5c>
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	d01b      	beq.n	80032ea <__aeabi_f2d+0x6e>
 80032b2:	0028      	movs	r0, r5
 80032b4:	f000 f8ae 	bl	8003414 <__clzsi2>
 80032b8:	280a      	cmp	r0, #10
 80032ba:	dc1c      	bgt.n	80032f6 <__aeabi_f2d+0x7a>
 80032bc:	230b      	movs	r3, #11
 80032be:	002a      	movs	r2, r5
 80032c0:	1a1b      	subs	r3, r3, r0
 80032c2:	40da      	lsrs	r2, r3
 80032c4:	0003      	movs	r3, r0
 80032c6:	3315      	adds	r3, #21
 80032c8:	409d      	lsls	r5, r3
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <__aeabi_f2d+0x88>)
 80032cc:	0312      	lsls	r2, r2, #12
 80032ce:	1a1b      	subs	r3, r3, r0
 80032d0:	055b      	lsls	r3, r3, #21
 80032d2:	0b12      	lsrs	r2, r2, #12
 80032d4:	0d5b      	lsrs	r3, r3, #21
 80032d6:	e7e1      	b.n	800329c <__aeabi_f2d+0x20>
 80032d8:	2d00      	cmp	r5, #0
 80032da:	d009      	beq.n	80032f0 <__aeabi_f2d+0x74>
 80032dc:	0b13      	lsrs	r3, r2, #12
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	0312      	lsls	r2, r2, #12
 80032e2:	431a      	orrs	r2, r3
 80032e4:	076d      	lsls	r5, r5, #29
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <__aeabi_f2d+0x8c>)
 80032e8:	e7d8      	b.n	800329c <__aeabi_f2d+0x20>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2200      	movs	r2, #0
 80032ee:	e7d5      	b.n	800329c <__aeabi_f2d+0x20>
 80032f0:	2200      	movs	r2, #0
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <__aeabi_f2d+0x8c>)
 80032f4:	e7d2      	b.n	800329c <__aeabi_f2d+0x20>
 80032f6:	0003      	movs	r3, r0
 80032f8:	002a      	movs	r2, r5
 80032fa:	3b0b      	subs	r3, #11
 80032fc:	409a      	lsls	r2, r3
 80032fe:	2500      	movs	r5, #0
 8003300:	e7e3      	b.n	80032ca <__aeabi_f2d+0x4e>
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	00000389 	.word	0x00000389
 8003308:	000007ff 	.word	0x000007ff

0800330c <__aeabi_d2f>:
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	004b      	lsls	r3, r1, #1
 8003310:	030f      	lsls	r7, r1, #12
 8003312:	0d5b      	lsrs	r3, r3, #21
 8003314:	4c3b      	ldr	r4, [pc, #236]	@ (8003404 <__aeabi_d2f+0xf8>)
 8003316:	0f45      	lsrs	r5, r0, #29
 8003318:	b083      	sub	sp, #12
 800331a:	0a7f      	lsrs	r7, r7, #9
 800331c:	1c5e      	adds	r6, r3, #1
 800331e:	432f      	orrs	r7, r5
 8003320:	9000      	str	r0, [sp, #0]
 8003322:	9101      	str	r1, [sp, #4]
 8003324:	0fca      	lsrs	r2, r1, #31
 8003326:	00c5      	lsls	r5, r0, #3
 8003328:	4226      	tst	r6, r4
 800332a:	d00b      	beq.n	8003344 <__aeabi_d2f+0x38>
 800332c:	4936      	ldr	r1, [pc, #216]	@ (8003408 <__aeabi_d2f+0xfc>)
 800332e:	185c      	adds	r4, r3, r1
 8003330:	2cfe      	cmp	r4, #254	@ 0xfe
 8003332:	dd13      	ble.n	800335c <__aeabi_d2f+0x50>
 8003334:	20ff      	movs	r0, #255	@ 0xff
 8003336:	2300      	movs	r3, #0
 8003338:	05c0      	lsls	r0, r0, #23
 800333a:	4318      	orrs	r0, r3
 800333c:	07d2      	lsls	r2, r2, #31
 800333e:	4310      	orrs	r0, r2
 8003340:	b003      	add	sp, #12
 8003342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <__aeabi_d2f+0x42>
 8003348:	2000      	movs	r0, #0
 800334a:	2300      	movs	r3, #0
 800334c:	e7f4      	b.n	8003338 <__aeabi_d2f+0x2c>
 800334e:	433d      	orrs	r5, r7
 8003350:	d0f0      	beq.n	8003334 <__aeabi_d2f+0x28>
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	03db      	lsls	r3, r3, #15
 8003356:	20ff      	movs	r0, #255	@ 0xff
 8003358:	433b      	orrs	r3, r7
 800335a:	e7ed      	b.n	8003338 <__aeabi_d2f+0x2c>
 800335c:	2c00      	cmp	r4, #0
 800335e:	dd14      	ble.n	800338a <__aeabi_d2f+0x7e>
 8003360:	9b00      	ldr	r3, [sp, #0]
 8003362:	00ff      	lsls	r7, r7, #3
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	4183      	sbcs	r3, r0
 800336a:	0f69      	lsrs	r1, r5, #29
 800336c:	433b      	orrs	r3, r7
 800336e:	430b      	orrs	r3, r1
 8003370:	0759      	lsls	r1, r3, #29
 8003372:	d041      	beq.n	80033f8 <__aeabi_d2f+0xec>
 8003374:	210f      	movs	r1, #15
 8003376:	4019      	ands	r1, r3
 8003378:	2904      	cmp	r1, #4
 800337a:	d028      	beq.n	80033ce <__aeabi_d2f+0xc2>
 800337c:	3304      	adds	r3, #4
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	d525      	bpl.n	80033ce <__aeabi_d2f+0xc2>
 8003382:	3401      	adds	r4, #1
 8003384:	2300      	movs	r3, #0
 8003386:	b2e0      	uxtb	r0, r4
 8003388:	e7d6      	b.n	8003338 <__aeabi_d2f+0x2c>
 800338a:	0021      	movs	r1, r4
 800338c:	3117      	adds	r1, #23
 800338e:	dbdb      	blt.n	8003348 <__aeabi_d2f+0x3c>
 8003390:	2180      	movs	r1, #128	@ 0x80
 8003392:	201e      	movs	r0, #30
 8003394:	0409      	lsls	r1, r1, #16
 8003396:	4339      	orrs	r1, r7
 8003398:	1b00      	subs	r0, r0, r4
 800339a:	281f      	cmp	r0, #31
 800339c:	dd1b      	ble.n	80033d6 <__aeabi_d2f+0xca>
 800339e:	2602      	movs	r6, #2
 80033a0:	4276      	negs	r6, r6
 80033a2:	1b34      	subs	r4, r6, r4
 80033a4:	000e      	movs	r6, r1
 80033a6:	40e6      	lsrs	r6, r4
 80033a8:	0034      	movs	r4, r6
 80033aa:	2820      	cmp	r0, #32
 80033ac:	d004      	beq.n	80033b8 <__aeabi_d2f+0xac>
 80033ae:	4817      	ldr	r0, [pc, #92]	@ (800340c <__aeabi_d2f+0x100>)
 80033b0:	4684      	mov	ip, r0
 80033b2:	4463      	add	r3, ip
 80033b4:	4099      	lsls	r1, r3
 80033b6:	430d      	orrs	r5, r1
 80033b8:	002b      	movs	r3, r5
 80033ba:	1e59      	subs	r1, r3, #1
 80033bc:	418b      	sbcs	r3, r1
 80033be:	4323      	orrs	r3, r4
 80033c0:	0759      	lsls	r1, r3, #29
 80033c2:	d015      	beq.n	80033f0 <__aeabi_d2f+0xe4>
 80033c4:	210f      	movs	r1, #15
 80033c6:	2400      	movs	r4, #0
 80033c8:	4019      	ands	r1, r3
 80033ca:	2904      	cmp	r1, #4
 80033cc:	d117      	bne.n	80033fe <__aeabi_d2f+0xf2>
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	b2e0      	uxtb	r0, r4
 80033d4:	e7b0      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033d6:	4c0e      	ldr	r4, [pc, #56]	@ (8003410 <__aeabi_d2f+0x104>)
 80033d8:	191c      	adds	r4, r3, r4
 80033da:	002b      	movs	r3, r5
 80033dc:	40a5      	lsls	r5, r4
 80033de:	40c3      	lsrs	r3, r0
 80033e0:	40a1      	lsls	r1, r4
 80033e2:	1e68      	subs	r0, r5, #1
 80033e4:	4185      	sbcs	r5, r0
 80033e6:	4329      	orrs	r1, r5
 80033e8:	430b      	orrs	r3, r1
 80033ea:	2400      	movs	r4, #0
 80033ec:	0759      	lsls	r1, r3, #29
 80033ee:	d1c1      	bne.n	8003374 <__aeabi_d2f+0x68>
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	2000      	movs	r0, #0
 80033f4:	0a5b      	lsrs	r3, r3, #9
 80033f6:	e79f      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	b2e0      	uxtb	r0, r4
 80033fc:	e79c      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033fe:	3304      	adds	r3, #4
 8003400:	e7e5      	b.n	80033ce <__aeabi_d2f+0xc2>
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	000007fe 	.word	0x000007fe
 8003408:	fffffc80 	.word	0xfffffc80
 800340c:	fffffca2 	.word	0xfffffca2
 8003410:	fffffc82 	.word	0xfffffc82

08003414 <__clzsi2>:
 8003414:	211c      	movs	r1, #28
 8003416:	2301      	movs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	4298      	cmp	r0, r3
 800341c:	d301      	bcc.n	8003422 <__clzsi2+0xe>
 800341e:	0c00      	lsrs	r0, r0, #16
 8003420:	3910      	subs	r1, #16
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	4298      	cmp	r0, r3
 8003426:	d301      	bcc.n	800342c <__clzsi2+0x18>
 8003428:	0a00      	lsrs	r0, r0, #8
 800342a:	3908      	subs	r1, #8
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	4298      	cmp	r0, r3
 8003430:	d301      	bcc.n	8003436 <__clzsi2+0x22>
 8003432:	0900      	lsrs	r0, r0, #4
 8003434:	3904      	subs	r1, #4
 8003436:	a202      	add	r2, pc, #8	@ (adr r2, 8003440 <__clzsi2+0x2c>)
 8003438:	5c10      	ldrb	r0, [r2, r0]
 800343a:	1840      	adds	r0, r0, r1
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	02020304 	.word	0x02020304
 8003444:	01010101 	.word	0x01010101
	...

08003450 <__clzdi2>:
 8003450:	b510      	push	{r4, lr}
 8003452:	2900      	cmp	r1, #0
 8003454:	d103      	bne.n	800345e <__clzdi2+0xe>
 8003456:	f7ff ffdd 	bl	8003414 <__clzsi2>
 800345a:	3020      	adds	r0, #32
 800345c:	e002      	b.n	8003464 <__clzdi2+0x14>
 800345e:	0008      	movs	r0, r1
 8003460:	f7ff ffd8 	bl	8003414 <__clzsi2>
 8003464:	bd10      	pop	{r4, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)

08003468 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800346c:	23a0      	movs	r3, #160	@ 0xa0
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	2200      	movs	r2, #0
 8003472:	2110      	movs	r1, #16
 8003474:	0018      	movs	r0, r3
 8003476:	f00b f89c 	bl	800e5b2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800347a:	2001      	movs	r0, #1
 800347c:	f00a facc 	bl	800da18 <HAL_Delay>
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800348a:	23a0      	movs	r3, #160	@ 0xa0
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	2201      	movs	r2, #1
 8003490:	2110      	movs	r1, #16
 8003492:	0018      	movs	r0, r3
 8003494:	f00b f88d 	bl	800e5b2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003498:	2001      	movs	r0, #1
 800349a:	f00a fabd 	bl	800da18 <HAL_Delay>
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	0002      	movs	r2, r0
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <SPI_TxByte+0x30>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d1f8      	bne.n	80034b2 <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034c0:	1df9      	adds	r1, r7, #7
 80034c2:	4804      	ldr	r0, [pc, #16]	@ (80034d4 <SPI_TxByte+0x30>)
 80034c4:	2364      	movs	r3, #100	@ 0x64
 80034c6:	2201      	movs	r2, #1
 80034c8:	f00d ff08 	bl	80112dc <HAL_SPI_Transmit>
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200008e8 	.word	0x200008e8

080034d8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	000a      	movs	r2, r1
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <SPI_TxBuffer+0x34>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2202      	movs	r2, #2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d1f8      	bne.n	80034e8 <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80034f6:	1cbb      	adds	r3, r7, #2
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4803      	ldr	r0, [pc, #12]	@ (800350c <SPI_TxBuffer+0x34>)
 80034fe:	2364      	movs	r3, #100	@ 0x64
 8003500:	f00d feec 	bl	80112dc <HAL_SPI_Transmit>
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200008e8 	.word	0x200008e8

08003510 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	22ff      	movs	r2, #255	@ 0xff
 800351a:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <SPI_RxByte+0x38>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d1f8      	bne.n	800351e <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800352c:	1dba      	adds	r2, r7, #6
 800352e:	1df9      	adds	r1, r7, #7
 8003530:	4805      	ldr	r0, [pc, #20]	@ (8003548 <SPI_RxByte+0x38>)
 8003532:	2364      	movs	r3, #100	@ 0x64
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	f00e f828 	bl	801158c <HAL_SPI_TransmitReceive>

	return data;
 800353c:	1dbb      	adds	r3, r7, #6
 800353e:	781b      	ldrb	r3, [r3, #0]
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200008e8 	.word	0x200008e8

0800354c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003554:	f7ff ffdc 	bl	8003510 <SPI_RxByte>
 8003558:	0003      	movs	r3, r0
 800355a:	001a      	movs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	701a      	strb	r2, [r3, #0]
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800356e:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <SD_ReadyWait+0x38>)
 8003570:	22fa      	movs	r2, #250	@ 0xfa
 8003572:	0052      	lsls	r2, r2, #1
 8003574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003576:	1dfc      	adds	r4, r7, #7
 8003578:	f7ff ffca 	bl	8003510 <SPI_RxByte>
 800357c:	0003      	movs	r3, r0
 800357e:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2bff      	cmp	r3, #255	@ 0xff
 8003586:	d004      	beq.n	8003592 <SD_ReadyWait+0x2a>
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <SD_ReadyWait+0x38>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <SD_ReadyWait+0xe>

	return res;
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b003      	add	sp, #12
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	20003460 	.word	0x20003460

080035a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <SD_PowerOn+0x88>)
 80035ac:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80035ae:	f7ff ff6a 	bl	8003486 <DESELECT>
	for(int i = 0; i < 10; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	e005      	b.n	80035c4 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 80035b8:	20ff      	movs	r0, #255	@ 0xff
 80035ba:	f7ff ff73 	bl	80034a4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	ddf6      	ble.n	80035b8 <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 80035ca:	f7ff ff4d 	bl	8003468 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80035ce:	003b      	movs	r3, r7
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 80035d4:	003b      	movs	r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 80035da:	003b      	movs	r3, r7
 80035dc:	2200      	movs	r2, #0
 80035de:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 80035e0:	003b      	movs	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 80035e6:	003b      	movs	r3, r7
 80035e8:	2200      	movs	r2, #0
 80035ea:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 80035ec:	003b      	movs	r3, r7
 80035ee:	2295      	movs	r2, #149	@ 0x95
 80035f0:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 80035f2:	003b      	movs	r3, r7
 80035f4:	2106      	movs	r1, #6
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff6e 	bl	80034d8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80035fc:	e002      	b.n	8003604 <SD_PowerOn+0x60>
	{
		cnt--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003604:	f7ff ff84 	bl	8003510 <SPI_RxByte>
 8003608:	0003      	movs	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d002      	beq.n	8003614 <SD_PowerOn+0x70>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f4      	bne.n	80035fe <SD_PowerOn+0x5a>
	}

	DESELECT();
 8003614:	f7ff ff37 	bl	8003486 <DESELECT>
	SPI_TxByte(0XFF);
 8003618:	20ff      	movs	r0, #255	@ 0xff
 800361a:	f7ff ff43 	bl	80034a4 <SPI_TxByte>

	PowerFlag = 1;
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <SD_PowerOn+0x8c>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00001fff 	.word	0x00001fff
 8003630:	20000521 	.word	0x20000521

08003634 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003638:	4b02      	ldr	r3, [pc, #8]	@ (8003644 <SD_PowerOff+0x10>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000521 	.word	0x20000521

08003648 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800364c:	4b02      	ldr	r3, [pc, #8]	@ (8003658 <SD_CheckPower+0x10>)
 800364e:	781b      	ldrb	r3, [r3, #0]
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	20000521 	.word	0x20000521

0800365c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003666:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <SD_RxDataBlock+0x64>)
 8003668:	22c8      	movs	r2, #200	@ 0xc8
 800366a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800366c:	250f      	movs	r5, #15
 800366e:	197c      	adds	r4, r7, r5
 8003670:	f7ff ff4e 	bl	8003510 <SPI_RxByte>
 8003674:	0003      	movs	r3, r0
 8003676:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 8003678:	197b      	adds	r3, r7, r5
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2bff      	cmp	r3, #255	@ 0xff
 800367e:	d104      	bne.n	800368a <SD_RxDataBlock+0x2e>
 8003680:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <SD_RxDataBlock+0x64>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2bfe      	cmp	r3, #254	@ 0xfe
 8003692:	d001      	beq.n	8003698 <SD_RxDataBlock+0x3c>
 8003694:	2300      	movs	r3, #0
 8003696:	e00f      	b.n	80036b8 <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff ff54 	bl	800354c <SPI_RxBytePtr>
	} while(len--);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	603a      	str	r2, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f4      	bne.n	8003698 <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 80036ae:	f7ff ff2f 	bl	8003510 <SPI_RxByte>
	SPI_RxByte();
 80036b2:	f7ff ff2d 	bl	8003510 <SPI_RxByte>

	return TRUE;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	2000345e 	.word	0x2000345e

080036c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	000a      	movs	r2, r1
 80036ce:	1cfb      	adds	r3, r7, #3
 80036d0:	701a      	strb	r2, [r3, #0]
	uint8_t resp;
	uint8_t i = 0;
 80036d2:	230e      	movs	r3, #14
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80036da:	f7ff ff45 	bl	8003568 <SD_ReadyWait>
 80036de:	0003      	movs	r3, r0
 80036e0:	2bff      	cmp	r3, #255	@ 0xff
 80036e2:	d001      	beq.n	80036e8 <SD_TxDataBlock+0x24>
 80036e4:	2300      	movs	r3, #0
 80036e6:	e03c      	b.n	8003762 <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 80036e8:	1cfb      	adds	r3, r7, #3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fed9 	bl	80034a4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80036f2:	1cfb      	adds	r3, r7, #3
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2bfd      	cmp	r3, #253	@ 0xfd
 80036f8:	d029      	beq.n	800374e <SD_TxDataBlock+0x8a>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	009a      	lsls	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fee8 	bl	80034d8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003708:	f7ff ff02 	bl	8003510 <SPI_RxByte>
		SPI_RxByte();
 800370c:	f7ff ff00 	bl	8003510 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003710:	e011      	b.n	8003736 <SD_TxDataBlock+0x72>
		{
			resp = SPI_RxByte();
 8003712:	250f      	movs	r5, #15
 8003714:	197c      	adds	r4, r7, r5
 8003716:	f7ff fefb 	bl	8003510 <SPI_RxByte>
 800371a:	0003      	movs	r3, r0
 800371c:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800371e:	197b      	adds	r3, r7, r5
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	221f      	movs	r2, #31
 8003724:	4013      	ands	r3, r2
 8003726:	2b05      	cmp	r3, #5
 8003728:	d00b      	beq.n	8003742 <SD_TxDataBlock+0x7e>
			i++;
 800372a:	210e      	movs	r1, #14
 800372c:	187b      	adds	r3, r7, r1
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	187b      	adds	r3, r7, r1
 8003732:	3201      	adds	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 8003736:	230e      	movs	r3, #14
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d9e8      	bls.n	8003712 <SD_TxDataBlock+0x4e>
 8003740:	e000      	b.n	8003744 <SD_TxDataBlock+0x80>
			if ((resp & 0x1F) == 0x05) break;
 8003742:	46c0      	nop			@ (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	f7ff fee3 	bl	8003510 <SPI_RxByte>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d0fb      	beq.n	8003746 <SD_TxDataBlock+0x82>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800374e:	230f      	movs	r3, #15
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	221f      	movs	r2, #31
 8003756:	4013      	ands	r3, r2
 8003758:	2b05      	cmp	r3, #5
 800375a:	d101      	bne.n	8003760 <SD_TxDataBlock+0x9c>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <SD_TxDataBlock+0x9e>

	return FALSE;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bdb0      	pop	{r4, r5, r7, pc}

0800376a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800376a:	b5b0      	push	{r4, r5, r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	0002      	movs	r2, r0
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003778:	f7ff fef6 	bl	8003568 <SD_ReadyWait>
 800377c:	0003      	movs	r3, r0
 800377e:	2bff      	cmp	r3, #255	@ 0xff
 8003780:	d001      	beq.n	8003786 <SD_SendCmd+0x1c>
 8003782:	23ff      	movs	r3, #255	@ 0xff
 8003784:	e059      	b.n	800383a <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	0018      	movs	r0, r3
 800378c:	f7ff fe8a 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff fe84 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7ff fe7e 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7ff fe78 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fe73 	bl	80034a4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d104      	bne.n	80037d0 <SD_SendCmd+0x66>
 80037c6:	230f      	movs	r3, #15
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2295      	movs	r2, #149	@ 0x95
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e00c      	b.n	80037ea <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b48      	cmp	r3, #72	@ 0x48
 80037d6:	d104      	bne.n	80037e2 <SD_SendCmd+0x78>
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2287      	movs	r2, #135	@ 0x87
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e003      	b.n	80037ea <SD_SendCmd+0x80>
	else crc = 1;
 80037e2:	230f      	movs	r3, #15
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 80037ea:	230f      	movs	r3, #15
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff fe57 	bl	80034a4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b4c      	cmp	r3, #76	@ 0x4c
 80037fc:	d101      	bne.n	8003802 <SD_SendCmd+0x98>
 80037fe:	f7ff fe87 	bl	8003510 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003802:	230e      	movs	r3, #14
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	220a      	movs	r2, #10
 8003808:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 800380a:	250d      	movs	r5, #13
 800380c:	197c      	adds	r4, r7, r5
 800380e:	f7ff fe7f 	bl	8003510 <SPI_RxByte>
 8003812:	0003      	movs	r3, r0
 8003814:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003816:	197b      	adds	r3, r7, r5
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b25b      	sxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	da09      	bge.n	8003834 <SD_SendCmd+0xca>
 8003820:	210e      	movs	r1, #14
 8003822:	187b      	adds	r3, r7, r1
 8003824:	187a      	adds	r2, r7, r1
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	3a01      	subs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	187b      	adds	r3, r7, r1
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <SD_SendCmd+0xa0>

	return res;
 8003834:	230d      	movs	r3, #13
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003844 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	0002      	movs	r2, r0
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <SD_disk_initialize+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e0f6      	b.n	8003a4a <SD_disk_initialize+0x206>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800385c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a54 <SD_disk_initialize+0x210>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	001a      	movs	r2, r3
 8003864:	2302      	movs	r3, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d003      	beq.n	8003872 <SD_disk_initialize+0x2e>
 800386a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a54 <SD_disk_initialize+0x210>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e0eb      	b.n	8003a4a <SD_disk_initialize+0x206>

	/* power on */
	SD_PowerOn();
 8003872:	f7ff fe97 	bl	80035a4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003876:	f7ff fdf7 	bl	8003468 <SELECT>

	/* check disk type */
	type = 0;
 800387a:	230e      	movs	r3, #14
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003882:	2100      	movs	r1, #0
 8003884:	2040      	movs	r0, #64	@ 0x40
 8003886:	f7ff ff70 	bl	800376a <SD_SendCmd>
 800388a:	0003      	movs	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d000      	beq.n	8003892 <SD_disk_initialize+0x4e>
 8003890:	e0c0      	b.n	8003a14 <SD_disk_initialize+0x1d0>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003892:	4b71      	ldr	r3, [pc, #452]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003894:	22fa      	movs	r2, #250	@ 0xfa
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800389a:	23d5      	movs	r3, #213	@ 0xd5
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	0019      	movs	r1, r3
 80038a0:	2048      	movs	r0, #72	@ 0x48
 80038a2:	f7ff ff62 	bl	800376a <SD_SendCmd>
 80038a6:	0003      	movs	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d000      	beq.n	80038ae <SD_disk_initialize+0x6a>
 80038ac:	e06d      	b.n	800398a <SD_disk_initialize+0x146>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80038ae:	230f      	movs	r3, #15
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e00e      	b.n	80038d6 <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 80038b8:	250f      	movs	r5, #15
 80038ba:	197b      	adds	r3, r7, r5
 80038bc:	781c      	ldrb	r4, [r3, #0]
 80038be:	f7ff fe27 	bl	8003510 <SPI_RxByte>
 80038c2:	0003      	movs	r3, r0
 80038c4:	001a      	movs	r2, r3
 80038c6:	2308      	movs	r3, #8
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 80038cc:	197b      	adds	r3, r7, r5
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	3201      	adds	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d9eb      	bls.n	80038b8 <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80038e0:	2208      	movs	r2, #8
 80038e2:	18bb      	adds	r3, r7, r2
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d000      	beq.n	80038ec <SD_disk_initialize+0xa8>
 80038ea:	e093      	b.n	8003a14 <SD_disk_initialize+0x1d0>
 80038ec:	18bb      	adds	r3, r7, r2
 80038ee:	78db      	ldrb	r3, [r3, #3]
 80038f0:	2baa      	cmp	r3, #170	@ 0xaa
 80038f2:	d000      	beq.n	80038f6 <SD_disk_initialize+0xb2>
 80038f4:	e08e      	b.n	8003a14 <SD_disk_initialize+0x1d0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038f6:	2100      	movs	r1, #0
 80038f8:	2077      	movs	r0, #119	@ 0x77
 80038fa:	f7ff ff36 	bl	800376a <SD_SendCmd>
 80038fe:	0003      	movs	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d807      	bhi.n	8003914 <SD_disk_initialize+0xd0>
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	05db      	lsls	r3, r3, #23
 8003908:	0019      	movs	r1, r3
 800390a:	2069      	movs	r0, #105	@ 0x69
 800390c:	f7ff ff2d 	bl	800376a <SD_SendCmd>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d005      	beq.n	8003920 <SD_disk_initialize+0xdc>
				} while (Timer1);
 8003914:	4b50      	ldr	r3, [pc, #320]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1eb      	bne.n	80038f6 <SD_disk_initialize+0xb2>
 800391e:	e000      	b.n	8003922 <SD_disk_initialize+0xde>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003920:	46c0      	nop			@ (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003922:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <SD_disk_initialize+0xea>
 800392c:	e072      	b.n	8003a14 <SD_disk_initialize+0x1d0>
 800392e:	2100      	movs	r1, #0
 8003930:	207a      	movs	r0, #122	@ 0x7a
 8003932:	f7ff ff1a 	bl	800376a <SD_SendCmd>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d000      	beq.n	800393c <SD_disk_initialize+0xf8>
 800393a:	e06b      	b.n	8003a14 <SD_disk_initialize+0x1d0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800393c:	230f      	movs	r3, #15
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e00e      	b.n	8003964 <SD_disk_initialize+0x120>
					{
						ocr[n] = SPI_RxByte();
 8003946:	250f      	movs	r5, #15
 8003948:	197b      	adds	r3, r7, r5
 800394a:	781c      	ldrb	r4, [r3, #0]
 800394c:	f7ff fde0 	bl	8003510 <SPI_RxByte>
 8003950:	0003      	movs	r3, r0
 8003952:	001a      	movs	r2, r3
 8003954:	2308      	movs	r3, #8
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 800395a:	197b      	adds	r3, r7, r5
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	197b      	adds	r3, r7, r5
 8003960:	3201      	adds	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d9eb      	bls.n	8003946 <SD_disk_initialize+0x102>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	001a      	movs	r2, r3
 8003976:	2340      	movs	r3, #64	@ 0x40
 8003978:	4013      	ands	r3, r2
 800397a:	d001      	beq.n	8003980 <SD_disk_initialize+0x13c>
 800397c:	220c      	movs	r2, #12
 800397e:	e000      	b.n	8003982 <SD_disk_initialize+0x13e>
 8003980:	2204      	movs	r2, #4
 8003982:	230e      	movs	r3, #14
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	e044      	b.n	8003a14 <SD_disk_initialize+0x1d0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800398a:	2100      	movs	r1, #0
 800398c:	2077      	movs	r0, #119	@ 0x77
 800398e:	f7ff feec 	bl	800376a <SD_SendCmd>
 8003992:	0003      	movs	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d808      	bhi.n	80039aa <SD_disk_initialize+0x166>
 8003998:	2100      	movs	r1, #0
 800399a:	2069      	movs	r0, #105	@ 0x69
 800399c:	f7ff fee5 	bl	800376a <SD_SendCmd>
 80039a0:	0003      	movs	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d801      	bhi.n	80039aa <SD_disk_initialize+0x166>
 80039a6:	2202      	movs	r2, #2
 80039a8:	e000      	b.n	80039ac <SD_disk_initialize+0x168>
 80039aa:	2201      	movs	r2, #1
 80039ac:	230e      	movs	r3, #14
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 80039b2:	230e      	movs	r3, #14
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d10d      	bne.n	80039d8 <SD_disk_initialize+0x194>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80039bc:	2100      	movs	r1, #0
 80039be:	2077      	movs	r0, #119	@ 0x77
 80039c0:	f7ff fed3 	bl	800376a <SD_SendCmd>
 80039c4:	0003      	movs	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d80c      	bhi.n	80039e4 <SD_disk_initialize+0x1a0>
 80039ca:	2100      	movs	r1, #0
 80039cc:	2069      	movs	r0, #105	@ 0x69
 80039ce:	f7ff fecc 	bl	800376a <SD_SendCmd>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d106      	bne.n	80039e4 <SD_disk_initialize+0x1a0>
 80039d6:	e00c      	b.n	80039f2 <SD_disk_initialize+0x1ae>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80039d8:	2100      	movs	r1, #0
 80039da:	2041      	movs	r0, #65	@ 0x41
 80039dc:	f7ff fec5 	bl	800376a <SD_SendCmd>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d005      	beq.n	80039f0 <SD_disk_initialize+0x1ac>
				}

			} while (Timer1);
 80039e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <SD_disk_initialize+0x214>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e1      	bne.n	80039b2 <SD_disk_initialize+0x16e>
 80039ee:	e000      	b.n	80039f2 <SD_disk_initialize+0x1ae>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80039f0:	46c0      	nop			@ (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80039f2:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <SD_disk_initialize+0x214>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <SD_disk_initialize+0x1c8>
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	0019      	movs	r1, r3
 8003a02:	2050      	movs	r0, #80	@ 0x50
 8003a04:	f7ff feb1 	bl	800376a <SD_SendCmd>
 8003a08:	1e03      	subs	r3, r0, #0
 8003a0a:	d003      	beq.n	8003a14 <SD_disk_initialize+0x1d0>
 8003a0c:	230e      	movs	r3, #14
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 8003a14:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <SD_disk_initialize+0x218>)
 8003a16:	240e      	movs	r4, #14
 8003a18:	193a      	adds	r2, r7, r4
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 8003a1e:	f7ff fd32 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003a22:	f7ff fd75 	bl	8003510 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <SD_disk_initialize+0x1fc>
	{
		Stat &= ~STA_NOINIT;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2201      	movs	r2, #1
 8003a36:	4393      	bics	r3, r2
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e001      	b.n	8003a44 <SD_disk_initialize+0x200>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003a40:	f7ff fdf8 	bl	8003634 <SD_PowerOff>
	}

	return Stat;
 8003a44:	4b03      	ldr	r3, [pc, #12]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	20000000 	.word	0x20000000
 8003a58:	2000345e 	.word	0x2000345e
 8003a5c:	20000520 	.word	0x20000520

08003a60 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	0002      	movs	r2, r0
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SD_disk_status+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e002      	b.n	8003a7e <SD_disk_status+0x1e>
	return Stat;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <SD_disk_status+0x28>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	20000000 	.word	0x20000000

08003a8c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	210f      	movs	r1, #15
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	1c02      	adds	r2, r0, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <SD_disk_read+0x22>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <SD_disk_read+0x26>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e053      	b.n	8003b5a <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b64 <SD_disk_read+0xd8>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	d001      	beq.n	8003ac4 <SD_disk_read+0x38>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e04a      	b.n	8003b5a <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <SD_disk_read+0xdc>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	001a      	movs	r2, r3
 8003aca:	2304      	movs	r3, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d102      	bne.n	8003ad6 <SD_disk_read+0x4a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	607b      	str	r3, [r7, #4]

	SELECT();
 8003ad6:	f7ff fcc7 	bl	8003468 <SELECT>

	if (count == 1)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d112      	bne.n	8003b06 <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2051      	movs	r0, #81	@ 0x51
 8003ae6:	f7ff fe40 	bl	800376a <SD_SendCmd>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d12d      	bne.n	8003b4a <SD_disk_read+0xbe>
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff fdb0 	bl	800365c <SD_RxDataBlock>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d024      	beq.n	8003b4a <SD_disk_read+0xbe>
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	e021      	b.n	8003b4a <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0019      	movs	r1, r3
 8003b0a:	2052      	movs	r0, #82	@ 0x52
 8003b0c:	f7ff fe2d 	bl	800376a <SD_SendCmd>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d11a      	bne.n	8003b4a <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff fd9d 	bl	800365c <SD_RxDataBlock>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d00c      	beq.n	8003b40 <SD_disk_read+0xb4>
				buff += 512;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4694      	mov	ip, r2
 8003b2e:	4463      	add	r3, ip
 8003b30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ea      	bne.n	8003b14 <SD_disk_read+0x88>
 8003b3e:	e000      	b.n	8003b42 <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003b40:	46c0      	nop			@ (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003b42:	2100      	movs	r1, #0
 8003b44:	204c      	movs	r0, #76	@ 0x4c
 8003b46:	f7ff fe10 	bl	800376a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003b4a:	f7ff fc9c 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003b4e:	f7ff fcdf 	bl	8003510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	4193      	sbcs	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	20000000 	.word	0x20000000
 8003b68:	20000520 	.word	0x20000520

08003b6c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	210f      	movs	r1, #15
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	1c02      	adds	r2, r0, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <SD_disk_write+0x22>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <SD_disk_write+0x26>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	e06b      	b.n	8003c6a <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003b92:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <SD_disk_write+0x108>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d001      	beq.n	8003ba4 <SD_disk_write+0x38>
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e062      	b.n	8003c6a <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003ba4:	4b33      	ldr	r3, [pc, #204]	@ (8003c74 <SD_disk_write+0x108>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	001a      	movs	r2, r3
 8003bac:	2304      	movs	r3, #4
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d001      	beq.n	8003bb6 <SD_disk_write+0x4a>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e059      	b.n	8003c6a <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003bb6:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <SD_disk_write+0x10c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	001a      	movs	r2, r3
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <SD_disk_write+0x5c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	025b      	lsls	r3, r3, #9
 8003bc6:	607b      	str	r3, [r7, #4]

	SELECT();
 8003bc8:	f7ff fc4e 	bl	8003468 <SELECT>

	if (count == 1)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d110      	bne.n	8003bf4 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	2058      	movs	r0, #88	@ 0x58
 8003bd8:	f7ff fdc7 	bl	800376a <SD_SendCmd>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d13c      	bne.n	8003c5a <SD_disk_write+0xee>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	21fe      	movs	r1, #254	@ 0xfe
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff fd6d 	bl	80036c4 <SD_TxDataBlock>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d035      	beq.n	8003c5a <SD_disk_write+0xee>
			count = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	e032      	b.n	8003c5a <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <SD_disk_write+0x10c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d008      	beq.n	8003c12 <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	2077      	movs	r0, #119	@ 0x77
 8003c04:	f7ff fdb1 	bl	800376a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	2057      	movs	r0, #87	@ 0x57
 8003c0e:	f7ff fdac 	bl	800376a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0019      	movs	r1, r3
 8003c16:	2059      	movs	r0, #89	@ 0x59
 8003c18:	f7ff fda7 	bl	800376a <SD_SendCmd>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d11c      	bne.n	8003c5a <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	21fc      	movs	r1, #252	@ 0xfc
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7ff fd4d 	bl	80036c4 <SD_TxDataBlock>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d00c      	beq.n	8003c48 <SD_disk_write+0xdc>
				buff += 512;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	4694      	mov	ip, r2
 8003c36:	4463      	add	r3, ip
 8003c38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ec      	bne.n	8003c20 <SD_disk_write+0xb4>
 8003c46:	e000      	b.n	8003c4a <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003c48:	46c0      	nop			@ (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003c4a:	21fd      	movs	r1, #253	@ 0xfd
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7ff fd39 	bl	80036c4 <SD_TxDataBlock>
 8003c52:	1e03      	subs	r3, r0, #0
 8003c54:	d101      	bne.n	8003c5a <SD_disk_write+0xee>
			{
				count = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003c5a:	f7ff fc14 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003c5e:	f7ff fc57 	bl	8003510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	4193      	sbcs	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000520 	.word	0x20000520

08003c7c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b08b      	sub	sp, #44	@ 0x2c
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	603a      	str	r2, [r7, #0]
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	1c02      	adds	r2, r0, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	1c0a      	adds	r2, r1, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SD_disk_ioctl+0x24>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e119      	b.n	8003ed4 <SD_disk_ioctl+0x258>
	res = RES_ERROR;
 8003ca0:	2327      	movs	r3, #39	@ 0x27
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d127      	bne.n	8003d00 <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d013      	beq.n	8003ce0 <SD_disk_ioctl+0x64>
 8003cb8:	dc1d      	bgt.n	8003cf6 <SD_disk_ioctl+0x7a>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <SD_disk_ioctl+0x48>
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d007      	beq.n	8003cd2 <SD_disk_ioctl+0x56>
 8003cc2:	e018      	b.n	8003cf6 <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003cc4:	f7ff fcb6 	bl	8003634 <SD_PowerOff>
			res = RES_OK;
 8003cc8:	2327      	movs	r3, #39	@ 0x27
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
			break;
 8003cd0:	e0fd      	b.n	8003ece <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn();		/* Power On */
 8003cd2:	f7ff fc67 	bl	80035a4 <SD_PowerOn>
			res = RES_OK;
 8003cd6:	2327      	movs	r3, #39	@ 0x27
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
			break;
 8003cde:	e0f6      	b.n	8003ece <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	1c5c      	adds	r4, r3, #1
 8003ce4:	f7ff fcb0 	bl	8003648 <SD_CheckPower>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003cec:	2327      	movs	r3, #39	@ 0x27
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
			break;
 8003cf4:	e0eb      	b.n	8003ece <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 8003cf6:	2327      	movs	r3, #39	@ 0x27
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e0e6      	b.n	8003ece <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d00:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <SD_disk_ioctl+0x260>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d001      	beq.n	8003d12 <SD_disk_ioctl+0x96>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0e0      	b.n	8003ed4 <SD_disk_ioctl+0x258>

		SELECT();
 8003d12:	f7ff fba9 	bl	8003468 <SELECT>

		switch (ctrl)
 8003d16:	1dbb      	adds	r3, r7, #6
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b0d      	cmp	r3, #13
 8003d1c:	d900      	bls.n	8003d20 <SD_disk_ioctl+0xa4>
 8003d1e:	e0c6      	b.n	8003eae <SD_disk_ioctl+0x232>
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <SD_disk_ioctl+0x264>)
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	2049      	movs	r0, #73	@ 0x49
 8003d2e:	f7ff fd1c 	bl	800376a <SD_SendCmd>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d000      	beq.n	8003d38 <SD_disk_ioctl+0xbc>
 8003d36:	e0bf      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
 8003d38:	240c      	movs	r4, #12
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	2110      	movs	r1, #16
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7ff fc8c 	bl	800365c <SD_RxDataBlock>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d100      	bne.n	8003d4a <SD_disk_ioctl+0xce>
 8003d48:	e0b6      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 8003d4a:	0022      	movs	r2, r4
 8003d4c:	18bb      	adds	r3, r7, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d113      	bne.n	8003d80 <SD_disk_ioctl+0x104>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003d58:	0011      	movs	r1, r2
 8003d5a:	18bb      	adds	r3, r7, r2
 8003d5c:	7a5b      	ldrb	r3, [r3, #9]
 8003d5e:	001a      	movs	r2, r3
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	7a1b      	ldrb	r3, [r3, #8]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	211e      	movs	r1, #30
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	3201      	adds	r2, #1
 8003d72:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	029a      	lsls	r2, r3, #10
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e039      	b.n	8003df4 <SD_disk_ioctl+0x178>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003d80:	200c      	movs	r0, #12
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	795b      	ldrb	r3, [r3, #5]
 8003d86:	220f      	movs	r2, #15
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	7a9b      	ldrb	r3, [r3, #10]
 8003d90:	09db      	lsrs	r3, r3, #7
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	18d3      	adds	r3, r2, r3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	7a5b      	ldrb	r3, [r3, #9]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2106      	movs	r1, #6
 8003da2:	400b      	ands	r3, r1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	18d3      	adds	r3, r2, r3
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	2426      	movs	r4, #38	@ 0x26
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	3202      	adds	r2, #2
 8003db0:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003db2:	183b      	adds	r3, r7, r0
 8003db4:	7a1b      	ldrb	r3, [r3, #8]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	001a      	movs	r2, r3
 8003dbc:	183b      	adds	r3, r7, r0
 8003dbe:	79db      	ldrb	r3, [r3, #7]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	183b      	adds	r3, r7, r0
 8003dca:	799b      	ldrb	r3, [r3, #6]
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	23c0      	movs	r3, #192	@ 0xc0
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	18d3      	adds	r3, r2, r3
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	211e      	movs	r1, #30
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	3201      	adds	r2, #1
 8003de2:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	881a      	ldrh	r2, [r3, #0]
 8003de8:	193b      	adds	r3, r7, r4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3b09      	subs	r3, #9
 8003dee:	409a      	lsls	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003df4:	2327      	movs	r3, #39	@ 0x27
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003dfc:	e05c      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003e06:	2327      	movs	r3, #39	@ 0x27
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
			break;
 8003e0e:	e05a      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003e10:	f7ff fbaa 	bl	8003568 <SD_ReadyWait>
 8003e14:	0003      	movs	r3, r0
 8003e16:	2bff      	cmp	r3, #255	@ 0xff
 8003e18:	d150      	bne.n	8003ebc <SD_disk_ioctl+0x240>
 8003e1a:	2327      	movs	r3, #39	@ 0x27
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
			break;
 8003e22:	e04b      	b.n	8003ebc <SD_disk_ioctl+0x240>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003e24:	2100      	movs	r1, #0
 8003e26:	2049      	movs	r0, #73	@ 0x49
 8003e28:	f7ff fc9f 	bl	800376a <SD_SendCmd>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d147      	bne.n	8003ec0 <SD_disk_ioctl+0x244>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2110      	movs	r1, #16
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff fc11 	bl	800365c <SD_RxDataBlock>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d040      	beq.n	8003ec0 <SD_disk_ioctl+0x244>
 8003e3e:	2327      	movs	r3, #39	@ 0x27
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
			break;
 8003e46:	e03b      	b.n	8003ec0 <SD_disk_ioctl+0x244>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003e48:	2100      	movs	r1, #0
 8003e4a:	204a      	movs	r0, #74	@ 0x4a
 8003e4c:	f7ff fc8d 	bl	800376a <SD_SendCmd>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d137      	bne.n	8003ec4 <SD_disk_ioctl+0x248>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2110      	movs	r1, #16
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fbff 	bl	800365c <SD_RxDataBlock>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d030      	beq.n	8003ec4 <SD_disk_ioctl+0x248>
 8003e62:	2327      	movs	r3, #39	@ 0x27
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
			break;
 8003e6a:	e02b      	b.n	8003ec4 <SD_disk_ioctl+0x248>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	207a      	movs	r0, #122	@ 0x7a
 8003e70:	f7ff fc7b 	bl	800376a <SD_SendCmd>
 8003e74:	1e03      	subs	r3, r0, #0
 8003e76:	d11a      	bne.n	8003eae <SD_disk_ioctl+0x232>
			{
				for (n = 0; n < 4; n++)
 8003e78:	2326      	movs	r3, #38	@ 0x26
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e00c      	b.n	8003e9c <SD_disk_ioctl+0x220>
				{
					*ptr++ = SPI_RxByte();
 8003e82:	6a3c      	ldr	r4, [r7, #32]
 8003e84:	1c63      	adds	r3, r4, #1
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	f7ff fb42 	bl	8003510 <SPI_RxByte>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003e90:	2126      	movs	r1, #38	@ 0x26
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	3201      	adds	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	2326      	movs	r3, #38	@ 0x26
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d9ed      	bls.n	8003e82 <SD_disk_ioctl+0x206>
				}
				res = RES_OK;
 8003ea6:	2327      	movs	r3, #39	@ 0x27
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 8003eae:	2327      	movs	r3, #39	@ 0x27
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e006      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	e004      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ebc:	46c0      	nop			@ (mov r8, r8)
 8003ebe:	e002      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	e000      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ec4:	46c0      	nop			@ (mov r8, r8)
		}

		DESELECT();
 8003ec6:	f7ff fade 	bl	8003486 <DESELECT>
		SPI_RxByte();
 8003eca:	f7ff fb21 	bl	8003510 <SPI_RxByte>
	}

	return res;
 8003ece:	2327      	movs	r3, #39	@ 0x27
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b00b      	add	sp, #44	@ 0x2c
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	080194dc 	.word	0x080194dc

08003ee4 <bufsize>:
	uint8_t len = strlen (string);
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);// transmit in blocking mode
}

int bufsize (char *buf)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	int i=0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8003ef0:	e002      	b.n	8003ef8 <bufsize+0x14>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f6      	bne.n	8003ef2 <bufsize+0xe>
	return i;
 8003f04:	68fb      	ldr	r3, [r7, #12]
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <clear_buffer>:

void clear_buffer (void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e007      	b.n	8003f2c <clear_buffer+0x1c>
	{
		buffer[i] = '\0';
 8003f1c:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <clear_buffer+0x30>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	429a      	cmp	r2, r3
 8003f34:	dbf2      	blt.n	8003f1c <clear_buffer+0xc>
	}
}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20002f30 	.word	0x20002f30

08003f44 <USER_UART_IDLECallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    HAL_UART_DMAStop(&huart1);
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc0 <USER_UART_IDLECallback+0x7c>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f00f f968 	bl	8013224 <HAL_UART_DMAStop>
    uint8_t data_length  = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8003f54:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <USER_UART_IDLECallback+0x80>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	1a8a      	subs	r2, r1, r2
 8003f64:	701a      	strb	r2, [r3, #0]

    memcpy(RxBuff,receive_buff,12);
 8003f66:	4b18      	ldr	r3, [pc, #96]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f68:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f6c:	c313      	stmia	r3!, {r0, r1, r4}
    //test
    if (RxBuff[0] == 0 && RxBuff[1] == 0)
 8003f6e:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <USER_UART_IDLECallback+0x42>
 8003f76:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <USER_UART_IDLECallback+0x42>
    {
    	HAL_UART_ErrorCallback(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 f847 	bl	8004014 <HAL_UART_ErrorCallback>
    }
    if (RxBuff[3] == 0x83)
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f88:	78db      	ldrb	r3, [r3, #3]
 8003f8a:	2b83      	cmp	r3, #131	@ 0x83
 8003f8c:	d102      	bne.n	8003f94 <USER_UART_IDLECallback+0x50>
    	RxFlag = TRUE;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <USER_UART_IDLECallback+0x8c>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
    memset(receive_buff,0,data_length);
 8003f94:	240f      	movs	r4, #15
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f014 fb10 	bl	80185c4 <memset>
    data_length = 0;
 8003fa4:	193b      	adds	r3, r7, r4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 64);
 8003faa:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003fac:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <USER_UART_IDLECallback+0x7c>)
 8003fae:	2240      	movs	r2, #64	@ 0x40
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f00f f8cd 	bl	8013150 <HAL_UART_Receive_DMA>
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b005      	add	sp, #20
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	2000064c 	.word	0x2000064c
 8003fc4:	2000088c 	.word	0x2000088c
 8003fc8:	20000a34 	.word	0x20000a34
 8003fcc:	20000a74 	.word	0x20000a74
 8003fd0:	20000a30 	.word	0x20000a30

08003fd4 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800400c <USER_UART_IRQHandler+0x38>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10e      	bne.n	8004004 <USER_UART_IRQHandler+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <USER_UART_IRQHandler+0x3c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2210      	movs	r2, #16
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d107      	bne.n	8004004 <USER_UART_IRQHandler+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <USER_UART_IRQHandler+0x3c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	621a      	str	r2, [r3, #32]
            USER_UART_IDLECallback(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff ffa0 	bl	8003f44 <USER_UART_IDLECallback>
        }
    }
}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40013800 	.word	0x40013800
 8004010:	2000064c 	.word	0x2000064c

08004014 <HAL_UART_ErrorCallback>:

//test
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
//	if(huart->ErrorCode&HAL_UART_ERROR_ORE)
//	{
//		__HAL_UART_CLEAR_OREFLAG(huart);
//	}
	if(huart->Instance == USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <HAL_UART_ErrorCallback+0x24>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d103      	bne.n	800402e <HAL_UART_ErrorCallback+0x1a>
	{
		HAL_UART_AbortReceive(&huart1);
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_UART_ErrorCallback+0x28>)
 8004028:	0018      	movs	r0, r3
 800402a:	f00f f98d 	bl	8013348 <HAL_UART_AbortReceive>
	}
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	40013800 	.word	0x40013800
 800403c:	2000064c 	.word	0x2000064c

08004040 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	static uint8_t RxBuffer[48];
	static uint16_t RxCount = 0;

	memcpy(ReplyBuffer, Type, sizeof(unsigned char)*2);
 8004048:	4b40      	ldr	r3, [pc, #256]	@ (800414c <HAL_UART_RxCpltCallback+0x10c>)
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	4b40      	ldr	r3, [pc, #256]	@ (8004150 <HAL_UART_RxCpltCallback+0x110>)
 800404e:	801a      	strh	r2, [r3, #0]
	memcpy(ReplyBuffer+2, plate_no, sizeof(unsigned char)*10);
 8004050:	4a40      	ldr	r2, [pc, #256]	@ (8004154 <HAL_UART_RxCpltCallback+0x114>)
 8004052:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <HAL_UART_RxCpltCallback+0x118>)
 8004054:	0010      	movs	r0, r2
 8004056:	0019      	movs	r1, r3
 8004058:	230a      	movs	r3, #10
 800405a:	001a      	movs	r2, r3
 800405c:	f014 fae6 	bl	801862c <memcpy>

	if(huart->Instance == USART3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3d      	ldr	r2, [pc, #244]	@ (800415c <HAL_UART_RxCpltCallback+0x11c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d165      	bne.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
	{
		if(Flag_Head == TRUE)
 800406a:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <HAL_UART_RxCpltCallback+0x120>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d156      	bne.n	8004120 <HAL_UART_RxCpltCallback+0xe0>
		{
			if(Receiving == TRUE)
 8004072:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <HAL_UART_RxCpltCallback+0x124>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d138      	bne.n	80040ec <HAL_UART_RxCpltCallback+0xac>
			{
				if((RxCount >= 46) && (rec_ch == 0xFF))
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_UART_RxCpltCallback+0x128>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004080:	d926      	bls.n	80040d0 <HAL_UART_RxCpltCallback+0x90>
 8004082:	4b3a      	ldr	r3, [pc, #232]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2bff      	cmp	r3, #255	@ 0xff
 8004088:	d122      	bne.n	80040d0 <HAL_UART_RxCpltCallback+0x90>
				{
					RxCount = 0;
 800408a:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <HAL_UART_RxCpltCallback+0x128>)
 800408c:	2200      	movs	r2, #0
 800408e:	801a      	strh	r2, [r3, #0]
					memset(WriteBuffer,0,48);
 8004090:	4b37      	ldr	r3, [pc, #220]	@ (8004170 <HAL_UART_RxCpltCallback+0x130>)
 8004092:	2230      	movs	r2, #48	@ 0x30
 8004094:	2100      	movs	r1, #0
 8004096:	0018      	movs	r0, r3
 8004098:	f014 fa94 	bl	80185c4 <memset>
					memcpy(WriteBuffer,RxBuffer,48);
 800409c:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <HAL_UART_RxCpltCallback+0x130>)
 800409e:	4a35      	ldr	r2, [pc, #212]	@ (8004174 <HAL_UART_RxCpltCallback+0x134>)
 80040a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040a2:	c313      	stmia	r3!, {r0, r1, r4}
 80040a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040a6:	c313      	stmia	r3!, {r0, r1, r4}
 80040a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040aa:	c313      	stmia	r3!, {r0, r1, r4}
 80040ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040ae:	c313      	stmia	r3!, {r0, r1, r4}
					memset(RxBuffer,0,48);
 80040b0:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <HAL_UART_RxCpltCallback+0x134>)
 80040b2:	2230      	movs	r2, #48	@ 0x30
 80040b4:	2100      	movs	r1, #0
 80040b6:	0018      	movs	r0, r3
 80040b8:	f014 fa84 	bl	80185c4 <memset>
					Flag_Para_W = TRUE;
 80040bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004178 <HAL_UART_RxCpltCallback+0x138>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
					Flag_Head = FALSE;
 80040c2:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <HAL_UART_RxCpltCallback+0x120>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
					Receiving = FALSE;
 80040c8:	4b26      	ldr	r3, [pc, #152]	@ (8004164 <HAL_UART_RxCpltCallback+0x124>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e032      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
				}
				else
				{
					RxBuffer[RxCount] = rec_ch;
 80040d0:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <HAL_UART_RxCpltCallback+0x128>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	001a      	movs	r2, r3
 80040d6:	4b25      	ldr	r3, [pc, #148]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 80040d8:	7819      	ldrb	r1, [r3, #0]
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <HAL_UART_RxCpltCallback+0x134>)
 80040dc:	5499      	strb	r1, [r3, r2]
					RxCount++;
 80040de:	4b22      	ldr	r3, [pc, #136]	@ (8004168 <HAL_UART_RxCpltCallback+0x128>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <HAL_UART_RxCpltCallback+0x128>)
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e024      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
				}
			}
			else
			{
				if(rec_ch == 0xBB)
 80040ec:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2bbb      	cmp	r3, #187	@ 0xbb
 80040f2:	d103      	bne.n	80040fc <HAL_UART_RxCpltCallback+0xbc>
				{
					//header - 0xAA 0xBB: start receiving parameters
					Receiving = TRUE;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_UART_RxCpltCallback+0x124>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e01c      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
				}
				else if(rec_ch == 0xCC)
 80040fc:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2bcc      	cmp	r3, #204	@ 0xcc
 8004102:	d109      	bne.n	8004118 <HAL_UART_RxCpltCallback+0xd8>
				{
					//header - 0xAA 0xCC: start reply taxi type & plate no.
					Receiving = FALSE;
 8004104:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <HAL_UART_RxCpltCallback+0x124>)
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, ReplyBuffer, 16, 0xff);
 800410a:	4911      	ldr	r1, [pc, #68]	@ (8004150 <HAL_UART_RxCpltCallback+0x110>)
 800410c:	481b      	ldr	r0, [pc, #108]	@ (800417c <HAL_UART_RxCpltCallback+0x13c>)
 800410e:	23ff      	movs	r3, #255	@ 0xff
 8004110:	2210      	movs	r2, #16
 8004112:	f00e ff07 	bl	8012f24 <HAL_UART_Transmit>
 8004116:	e00e      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
				}
				else
				{
					Receiving = FALSE;
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_UART_RxCpltCallback+0x124>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e00a      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
				}
			}
		}
		else
		{
			if(rec_ch == 0xAA)
 8004120:	4b12      	ldr	r3, [pc, #72]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2baa      	cmp	r3, #170	@ 0xaa
 8004126:	d103      	bne.n	8004130 <HAL_UART_RxCpltCallback+0xf0>
				Flag_Head = TRUE;
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_UART_RxCpltCallback+0x120>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e002      	b.n	8004136 <HAL_UART_RxCpltCallback+0xf6>
			else
				Flag_Head = FALSE;
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_UART_RxCpltCallback+0x120>)
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart3, &rec_ch, 1);
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <HAL_UART_RxCpltCallback+0x12c>)
 8004138:	4b10      	ldr	r3, [pc, #64]	@ (800417c <HAL_UART_RxCpltCallback+0x13c>)
 800413a:	2201      	movs	r2, #1
 800413c:	0018      	movs	r0, r3
 800413e:	f00e ff9d 	bl	801307c <HAL_UART_Receive_IT>
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b003      	add	sp, #12
 8004148:	bd90      	pop	{r4, r7, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	20000c04 	.word	0x20000c04
 8004150:	20000bf4 	.word	0x20000bf4
 8004154:	20000bf6 	.word	0x20000bf6
 8004158:	20000c08 	.word	0x20000c08
 800415c:	40004800 	.word	0x40004800
 8004160:	20000bef 	.word	0x20000bef
 8004164:	20000bf0 	.word	0x20000bf0
 8004168:	200033d2 	.word	0x200033d2
 800416c:	20000a6c 	.word	0x20000a6c
 8004170:	20000bbc 	.word	0x20000bbc
 8004174:	200033d4 	.word	0x200033d4
 8004178:	20000bee 	.word	0x20000bee
 800417c:	2000076c 	.word	0x2000076c

08004180 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	05db      	lsls	r3, r3, #23
 8004190:	429a      	cmp	r2, r3
 8004192:	d14d      	bne.n	8004230 <HAL_TIM_IC_CaptureCallback+0xb0>
	{
		if(Is_First_Captured == 0)
 8004194:	4b4e      	ldr	r3, [pc, #312]	@ (80042d0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d119      	bne.n	80041d0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2100      	movs	r1, #0
 80041a0:	0018      	movs	r0, r3
 80041a2:	f00e fb33 	bl	801280c <HAL_TIM_ReadCapturedValue>
 80041a6:	0002      	movs	r2, r0
 80041a8:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 80041aa:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 80041ac:	4b48      	ldr	r3, [pc, #288]	@ (80042d0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	210a      	movs	r1, #10
 80041be:	438a      	bics	r2, r1
 80041c0:	621a      	str	r2, [r3, #32]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a12      	ldr	r2, [r2, #32]
 80041cc:	621a      	str	r2, [r3, #32]
 80041ce:	e02f      	b.n	8004230 <HAL_TIM_IC_CaptureCallback+0xb0>
		}
		else if(Is_First_Captured == 1)
 80041d0:	4b3f      	ldr	r3, [pc, #252]	@ (80042d0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d12b      	bne.n	8004230 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2100      	movs	r1, #0
 80041dc:	0018      	movs	r0, r3
 80041de:	f00e fb15 	bl	801280c <HAL_TIM_ReadCapturedValue>
 80041e2:	0002      	movs	r2, r0
 80041e4:	4b3c      	ldr	r3, [pc, #240]	@ (80042d8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041e6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2200      	movs	r2, #0
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24

			if(IC_Val2 > IC_Val1)
 80041f0:	4b39      	ldr	r3, [pc, #228]	@ (80042d8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b37      	ldr	r3, [pc, #220]	@ (80042d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d906      	bls.n	800420a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Width = IC_Val2 - IC_Val1;
 80041fc:	4b36      	ldr	r3, [pc, #216]	@ (80042d8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b34      	ldr	r3, [pc, #208]	@ (80042d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1ad2      	subs	r2, r2, r3
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004208:	601a      	str	r2, [r3, #0]
			}

			Is_First_Captured = 0;
 800420a:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	210a      	movs	r1, #10
 800421c:	438a      	bics	r2, r1
 800421e:	621a      	str	r2, [r3, #32]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2102      	movs	r1, #2
 800422c:	430a      	orrs	r2, r1
 800422e:	621a      	str	r2, [r3, #32]
		}
	}

	if(htim->Instance== TIM1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2a      	ldr	r2, [pc, #168]	@ (80042e0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d146      	bne.n	80042c8 <HAL_TIM_IC_CaptureCallback+0x148>
	{
		if(Is_First_Captured_x == 0)
 800423a:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d110      	bne.n	8004264 <HAL_TIM_IC_CaptureCallback+0xe4>
		{
			IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2100      	movs	r1, #0
 8004246:	0018      	movs	r0, r3
 8004248:	f00e fae0 	bl	801280c <HAL_TIM_ReadCapturedValue>
 800424c:	0002      	movs	r2, r0
 800424e:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004250:	601a      	str	r2, [r3, #0]
			Is_First_Captured_x = 1;
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
			counter++;
 8004258:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_TIM_IC_CaptureCallback+0x16c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004260:	601a      	str	r2, [r3, #0]
				Difference = ((0xFFFF - IC_Val3) + IC_Val4) + 1;
			}
			Is_First_Captured_x = 0;
		}
	}
}
 8004262:	e031      	b.n	80042c8 <HAL_TIM_IC_CaptureCallback+0x148>
		else if(Is_First_Captured_x == 1)
 8004264:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d12d      	bne.n	80042c8 <HAL_TIM_IC_CaptureCallback+0x148>
			IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2100      	movs	r1, #0
 8004270:	0018      	movs	r0, r3
 8004272:	f00e facb 	bl	801280c <HAL_TIM_ReadCapturedValue>
 8004276:	0002      	movs	r2, r0
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <HAL_TIM_IC_CaptureCallback+0x170>)
 800427a:	601a      	str	r2, [r3, #0]
			counter++;
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_TIM_IC_CaptureCallback+0x16c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004284:	601a      	str	r2, [r3, #0]
			if(IC_Val4 > IC_Val3)
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <HAL_TIM_IC_CaptureCallback+0x168>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d907      	bls.n	80042a2 <HAL_TIM_IC_CaptureCallback+0x122>
				Difference = IC_Val4 - IC_Val3;
 8004292:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <HAL_TIM_IC_CaptureCallback+0x174>)
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e00f      	b.n	80042c2 <HAL_TIM_IC_CaptureCallback+0x142>
			else if(IC_Val4 < IC_Val3)
 80042a2:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d209      	bcs.n	80042c2 <HAL_TIM_IC_CaptureCallback+0x142>
				Difference = ((0xFFFF - IC_Val3) + IC_Val4) + 1;
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2280      	movs	r2, #128	@ 0x80
 80042ba:	0252      	lsls	r2, r2, #9
 80042bc:	189a      	adds	r2, r3, r2
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80042c0:	601a      	str	r2, [r3, #0]
			Is_First_Captured_x = 0;
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <HAL_TIM_IC_CaptureCallback+0x164>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	46c0      	nop			@ (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000cac 	.word	0x20000cac
 80042d4:	20000c94 	.word	0x20000c94
 80042d8:	20000c98 	.word	0x20000c98
 80042dc:	20000ca8 	.word	0x20000ca8
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	20000cb0 	.word	0x20000cb0
 80042e8:	20000c9c 	.word	0x20000c9c
 80042ec:	20000cdc 	.word	0x20000cdc
 80042f0:	20000ca0 	.word	0x20000ca0
 80042f4:	20000ca4 	.word	0x20000ca4

080042f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a06      	ldr	r2, [pc, #24]	@ (8004320 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if (test_f == 0)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			test_f = 1;
 8004312:	4b04      	ldr	r3, [pc, #16]	@ (8004324 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40000400 	.word	0x40000400
 8004324:	200033ce 	.word	0x200033ce

08004328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b093      	sub	sp, #76	@ 0x4c
 800432c:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800432e:	f009 faed 	bl	800d90c <HAL_Init>
  /* USER CODE BEGIN Init */
//  	HAL_Delay(2000); //Proposed to test the electricity.
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004332:	f000 f939 	bl	80045a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004336:	f000 fce3 	bl	8004d00 <MX_GPIO_Init>
  MX_DMA_Init();
 800433a:	f000 fcc3 	bl	8004cc4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800433e:	f000 fa5d 	bl	80047fc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004342:	f000 f98d 	bl	8004660 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004346:	f000 f9cb 	bl	80046e0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800434a:	f000 fa09 	bl	8004760 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800434e:	f000 faab 	bl	80048a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004352:	f000 faf7 	bl	8004944 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8004356:	f000 fb29 	bl	80049ac <MX_USART4_UART_Init>
  MX_SPI1_Init();
 800435a:	f000 fb5b 	bl	8004a14 <MX_SPI1_Init>
  MX_TIM1_Init();
 800435e:	f000 fb97 	bl	8004a90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004362:	f000 fbfb 	bl	8004b5c <MX_TIM2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8004366:	f011 f98d 	bl	8015684 <MX_FATFS_Init>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d001      	beq.n	8004372 <main+0x4a>
    Error_Handler();
 800436e:	f008 f973 	bl	800c658 <Error_Handler>
  }
  MX_TIM3_Init();
 8004372:	f000 fc4f 	bl	8004c14 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004376:	f000 f966 	bl	8004646 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800437a:	4b73      	ldr	r3, [pc, #460]	@ (8004548 <main+0x220>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b71      	ldr	r3, [pc, #452]	@ (8004548 <main+0x220>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2110      	movs	r1, #16
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 64);
 800438a:	4970      	ldr	r1, [pc, #448]	@ (800454c <main+0x224>)
 800438c:	4b6e      	ldr	r3, [pc, #440]	@ (8004548 <main+0x220>)
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	0018      	movs	r0, r3
 8004392:	f00e fedd 	bl	8013150 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart3, &rec_ch, 1);
 8004396:	496e      	ldr	r1, [pc, #440]	@ (8004550 <main+0x228>)
 8004398:	4b6e      	ldr	r3, [pc, #440]	@ (8004554 <main+0x22c>)
 800439a:	2201      	movs	r2, #1
 800439c:	0018      	movs	r0, r3
 800439e:	f00e fe6d 	bl	801307c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80043a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <main+0x230>)
 80043a4:	0018      	movs	r0, r3
 80043a6:	f00d fd99 	bl	8011edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80043aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004558 <main+0x230>)
 80043ac:	2100      	movs	r1, #0
 80043ae:	0018      	movs	r0, r3
 80043b0:	f00d fe48 	bl	8012044 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <main+0x234>)
 80043b6:	0018      	movs	r0, r3
 80043b8:	f00d fd90 	bl	8011edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80043bc:	4b67      	ldr	r3, [pc, #412]	@ (800455c <main+0x234>)
 80043be:	2100      	movs	r1, #0
 80043c0:	0018      	movs	r0, r3
 80043c2:	f00d fe3f 	bl	8012044 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80043c6:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <main+0x238>)
 80043c8:	0018      	movs	r0, r3
 80043ca:	f00d fd87 	bl	8011edc <HAL_TIM_Base_Start_IT>

  HAL_Delay(200); //changed by Edwin from 200 to 10000
 80043ce:	20c8      	movs	r0, #200	@ 0xc8
 80043d0:	f009 fb22 	bl	800da18 <HAL_Delay>

//  EEPROM_PageErase(3);
//  eeprom_w();
//  eeprom_check();
  eeprom_r();
 80043d4:	f004 fd54 	bl	8008e80 <eeprom_r>
  PCF2129_Init(hi2c1, RTC_WRITE_ADDR);
 80043d8:	4c62      	ldr	r4, [pc, #392]	@ (8004564 <main+0x23c>)
 80043da:	23a2      	movs	r3, #162	@ 0xa2
 80043dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043de:	466b      	mov	r3, sp
 80043e0:	0018      	movs	r0, r3
 80043e2:	0023      	movs	r3, r4
 80043e4:	3310      	adds	r3, #16
 80043e6:	223c      	movs	r2, #60	@ 0x3c
 80043e8:	0019      	movs	r1, r3
 80043ea:	f014 f91f 	bl	801862c <memcpy>
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	6861      	ldr	r1, [r4, #4]
 80043f2:	68a2      	ldr	r2, [r4, #8]
 80043f4:	68e3      	ldr	r3, [r4, #12]
 80043f6:	f008 f935 	bl	800c664 <PCF2129_Init>
//  rtc_set();


  //Mounting SD card
  fresult = f_mount(&fs, "/", 1);
 80043fa:	495b      	ldr	r1, [pc, #364]	@ (8004568 <main+0x240>)
 80043fc:	4b5b      	ldr	r3, [pc, #364]	@ (800456c <main+0x244>)
 80043fe:	2201      	movs	r2, #1
 8004400:	0018      	movs	r0, r3
 8004402:	f013 f8bf 	bl	8017584 <f_mount>
 8004406:	0003      	movs	r3, r0
 8004408:	001a      	movs	r2, r3
 800440a:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <main+0x248>)
 800440c:	701a      	strb	r2, [r3, #0]
  //Create the file with read write access and open it
//  fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
  fresult = f_open(&fil, "tripDATA.txt", FA_CREATE_NEW | FA_WRITE);
 800440e:	4959      	ldr	r1, [pc, #356]	@ (8004574 <main+0x24c>)
 8004410:	4b59      	ldr	r3, [pc, #356]	@ (8004578 <main+0x250>)
 8004412:	2206      	movs	r2, #6
 8004414:	0018      	movs	r0, r3
 8004416:	f013 f901 	bl	801761c <f_open>
 800441a:	0003      	movs	r3, r0
 800441c:	001a      	movs	r2, r3
 800441e:	4b54      	ldr	r3, [pc, #336]	@ (8004570 <main+0x248>)
 8004420:	701a      	strb	r2, [r3, #0]
  //Writing text
  strcpy (buffer, "vehicleNo meterNo startDate startTime endDate endTime waitTime journeyTime paidKM totalKM nonBusiness amount surCharge totalCharge\n");
 8004422:	4a56      	ldr	r2, [pc, #344]	@ (800457c <main+0x254>)
 8004424:	4b56      	ldr	r3, [pc, #344]	@ (8004580 <main+0x258>)
 8004426:	0010      	movs	r0, r2
 8004428:	0019      	movs	r1, r3
 800442a:	2384      	movs	r3, #132	@ 0x84
 800442c:	001a      	movs	r2, r3
 800442e:	f014 f8fd 	bl	801862c <memcpy>
  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8004432:	4b52      	ldr	r3, [pc, #328]	@ (800457c <main+0x254>)
 8004434:	0018      	movs	r0, r3
 8004436:	f7ff fd55 	bl	8003ee4 <bufsize>
 800443a:	0003      	movs	r3, r0
 800443c:	001a      	movs	r2, r3
 800443e:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <main+0x25c>)
 8004440:	494e      	ldr	r1, [pc, #312]	@ (800457c <main+0x254>)
 8004442:	484d      	ldr	r0, [pc, #308]	@ (8004578 <main+0x250>)
 8004444:	f013 faef 	bl	8017a26 <f_write>
 8004448:	0003      	movs	r3, r0
 800444a:	001a      	movs	r2, r3
 800444c:	4b48      	ldr	r3, [pc, #288]	@ (8004570 <main+0x248>)
 800444e:	701a      	strb	r2, [r3, #0]
  //Close file
  f_close(&fil);
 8004450:	4b49      	ldr	r3, [pc, #292]	@ (8004578 <main+0x250>)
 8004452:	0018      	movs	r0, r3
 8004454:	f013 fd0b 	bl	8017e6e <f_close>
  // clearing buffer to show that result obtained is from the file
  clear_buffer();
 8004458:	f7ff fd5a 	bl	8003f10 <clear_buffer>

  Voice_init();
 800445c:	f006 ffe0 	bl	800b420 <Voice_init>

//  E_read();

  SD_buffer[0] = plate_qr[6];
 8004460:	4b49      	ldr	r3, [pc, #292]	@ (8004588 <main+0x260>)
 8004462:	799a      	ldrb	r2, [r3, #6]
 8004464:	4b49      	ldr	r3, [pc, #292]	@ (800458c <main+0x264>)
 8004466:	701a      	strb	r2, [r3, #0]
  SD_buffer[1] = plate_qr[7];
 8004468:	4b47      	ldr	r3, [pc, #284]	@ (8004588 <main+0x260>)
 800446a:	79da      	ldrb	r2, [r3, #7]
 800446c:	4b47      	ldr	r3, [pc, #284]	@ (800458c <main+0x264>)
 800446e:	705a      	strb	r2, [r3, #1]
  SD_buffer[2] = plate_qr[8];
 8004470:	4b45      	ldr	r3, [pc, #276]	@ (8004588 <main+0x260>)
 8004472:	7a1a      	ldrb	r2, [r3, #8]
 8004474:	4b45      	ldr	r3, [pc, #276]	@ (800458c <main+0x264>)
 8004476:	709a      	strb	r2, [r3, #2]
  SD_buffer[3] = plate_qr[9];
 8004478:	4b43      	ldr	r3, [pc, #268]	@ (8004588 <main+0x260>)
 800447a:	7a5a      	ldrb	r2, [r3, #9]
 800447c:	4b43      	ldr	r3, [pc, #268]	@ (800458c <main+0x264>)
 800447e:	70da      	strb	r2, [r3, #3]
  SD_buffer[4] = plate_qr[10];
 8004480:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <main+0x260>)
 8004482:	7a9a      	ldrb	r2, [r3, #10]
 8004484:	4b41      	ldr	r3, [pc, #260]	@ (800458c <main+0x264>)
 8004486:	711a      	strb	r2, [r3, #4]
  SD_buffer[5] = plate_qr[11];
 8004488:	4b3f      	ldr	r3, [pc, #252]	@ (8004588 <main+0x260>)
 800448a:	7ada      	ldrb	r2, [r3, #11]
 800448c:	4b3f      	ldr	r3, [pc, #252]	@ (800458c <main+0x264>)
 800448e:	715a      	strb	r2, [r3, #5]
  SD_buffer[6] = 0x20;
 8004490:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <main+0x264>)
 8004492:	2220      	movs	r2, #32
 8004494:	719a      	strb	r2, [r3, #6]

  SD_buffer[7] = 0x41;
 8004496:	4b3d      	ldr	r3, [pc, #244]	@ (800458c <main+0x264>)
 8004498:	2241      	movs	r2, #65	@ 0x41
 800449a:	71da      	strb	r2, [r3, #7]
  SD_buffer[8] = 0x30;
 800449c:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <main+0x264>)
 800449e:	2230      	movs	r2, #48	@ 0x30
 80044a0:	721a      	strb	r2, [r3, #8]
  SD_buffer[9] = 0x30;
 80044a2:	4b3a      	ldr	r3, [pc, #232]	@ (800458c <main+0x264>)
 80044a4:	2230      	movs	r2, #48	@ 0x30
 80044a6:	725a      	strb	r2, [r3, #9]
  SD_buffer[10] = 0x30;
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <main+0x264>)
 80044aa:	2230      	movs	r2, #48	@ 0x30
 80044ac:	729a      	strb	r2, [r3, #10]
  SD_buffer[11] = 0x30;
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <main+0x264>)
 80044b0:	2230      	movs	r2, #48	@ 0x30
 80044b2:	72da      	strb	r2, [r3, #11]
  SD_buffer[12] = 0x31;
 80044b4:	4b35      	ldr	r3, [pc, #212]	@ (800458c <main+0x264>)
 80044b6:	2231      	movs	r2, #49	@ 0x31
 80044b8:	731a      	strb	r2, [r3, #12]
  SD_buffer[13] = 0x20;
 80044ba:	4b34      	ldr	r3, [pc, #208]	@ (800458c <main+0x264>)
 80044bc:	2220      	movs	r2, #32
 80044be:	735a      	strb	r2, [r3, #13]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_f)
 80044c0:	4b33      	ldr	r3, [pc, #204]	@ (8004590 <main+0x268>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0fb      	beq.n	80044c0 <main+0x198>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 80044c8:	4b32      	ldr	r3, [pc, #200]	@ (8004594 <main+0x26c>)
 80044ca:	2102      	movs	r1, #2
 80044cc:	0018      	movs	r0, r3
 80044ce:	f00a f853 	bl	800e578 <HAL_GPIO_ReadPin>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d127      	bne.n	8004526 <main+0x1fe>
		  {
			  if(Flag_Para_W)
 80044d6:	4b30      	ldr	r3, [pc, #192]	@ (8004598 <main+0x270>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <main+0x1ec>
			  {
				  Flag_Para_W = FALSE;
 80044de:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <main+0x270>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
				  eeprom_w();
 80044e4:	f004 fc78 	bl	8008dd8 <eeprom_w>
				  eeprom_check();
 80044e8:	f004 fc9c 	bl	8008e24 <eeprom_check>
				  eeprom_r();
 80044ec:	f004 fcc8 	bl	8008e80 <eeprom_r>
				  rtc_set();
 80044f0:	f004 fe64 	bl	80091bc <rtc_set>
				  memset(ReplyBuffer, 0, 16);
 80044f4:	4b29      	ldr	r3, [pc, #164]	@ (800459c <main+0x274>)
 80044f6:	2210      	movs	r2, #16
 80044f8:	2100      	movs	r1, #0
 80044fa:	0018      	movs	r0, r3
 80044fc:	f014 f862 	bl	80185c4 <memset>
				  unsigned char ok[1] = {0xDD};
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	4a27      	ldr	r2, [pc, #156]	@ (80045a0 <main+0x278>)
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, ok, 1, 0x02);
 8004508:	1d39      	adds	r1, r7, #4
 800450a:	4812      	ldr	r0, [pc, #72]	@ (8004554 <main+0x22c>)
 800450c:	2302      	movs	r3, #2
 800450e:	2201      	movs	r2, #1
 8004510:	f00e fd08 	bl	8012f24 <HAL_UART_Transmit>
			  }
			  time_update();
 8004514:	f004 fe88 	bl	8009228 <time_update>
			  HAL_UART_Transmit(&huart1, (uint8_t *) plate_qr, 14, 0x1C);
 8004518:	491b      	ldr	r1, [pc, #108]	@ (8004588 <main+0x260>)
 800451a:	480b      	ldr	r0, [pc, #44]	@ (8004548 <main+0x220>)
 800451c:	231c      	movs	r3, #28
 800451e:	220e      	movs	r2, #14
 8004520:	f00e fd00 	bl	8012f24 <HAL_UART_Transmit>
 8004524:	e00c      	b.n	8004540 <main+0x218>
		  }
		  else if(Flag_Protect)
 8004526:	4b1f      	ldr	r3, [pc, #124]	@ (80045a4 <main+0x27c>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <main+0x210>
		  {
			  DebugLog(); // Debug record every 3 sec
 800452e:	f005 fa03 	bl	8009938 <DebugLog>
			  //anti-tamper process
			  Anti_Tamper_Handle();
 8004532:	f006 fa13 	bl	800a95c <Anti_Tamper_Handle>
 8004536:	e003      	b.n	8004540 <main+0x218>
		  }
		  else
		  {
			  DebugLog(); // Debug record every 3 sec
 8004538:	f005 f9fe 	bl	8009938 <DebugLog>
			  //normal process
			  Status_Check();
 800453c:	f000 fcbe 	bl	8004ebc <Status_Check>
		  }

		  test_f = 0;
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <main+0x268>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
	  if (test_f)
 8004546:	e7bb      	b.n	80044c0 <main+0x198>
 8004548:	2000064c 	.word	0x2000064c
 800454c:	20000a74 	.word	0x20000a74
 8004550:	20000a6c 	.word	0x20000a6c
 8004554:	2000076c 	.word	0x2000076c
 8004558:	2000094c 	.word	0x2000094c
 800455c:	20000998 	.word	0x20000998
 8004560:	200009e4 	.word	0x200009e4
 8004564:	20000524 	.word	0x20000524
 8004568:	08018ed8 	.word	0x08018ed8
 800456c:	20000ec4 	.word	0x20000ec4
 8004570:	20002f28 	.word	0x20002f28
 8004574:	08018edc 	.word	0x08018edc
 8004578:	20001ef8 	.word	0x20001ef8
 800457c:	20002f30 	.word	0x20002f30
 8004580:	08018eec 	.word	0x08018eec
 8004584:	20002f2c 	.word	0x20002f2c
 8004588:	20000098 	.word	0x20000098
 800458c:	20003330 	.word	0x20003330
 8004590:	200033ce 	.word	0x200033ce
 8004594:	50000400 	.word	0x50000400
 8004598:	20000bee 	.word	0x20000bee
 800459c:	20000bf4 	.word	0x20000bf4
 80045a0:	08018f70 	.word	0x08018f70
 80045a4:	20000d31 	.word	0x20000d31

080045a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b093      	sub	sp, #76	@ 0x4c
 80045ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ae:	2410      	movs	r4, #16
 80045b0:	193b      	adds	r3, r7, r4
 80045b2:	0018      	movs	r0, r3
 80045b4:	2338      	movs	r3, #56	@ 0x38
 80045b6:	001a      	movs	r2, r3
 80045b8:	2100      	movs	r1, #0
 80045ba:	f014 f803 	bl	80185c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045be:	003b      	movs	r3, r7
 80045c0:	0018      	movs	r0, r3
 80045c2:	2310      	movs	r3, #16
 80045c4:	001a      	movs	r2, r3
 80045c6:	2100      	movs	r1, #0
 80045c8:	f013 fffc 	bl	80185c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	0018      	movs	r0, r3
 80045d2:	f00b fec3 	bl	801035c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	2202      	movs	r2, #2
 80045da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	0052      	lsls	r2, r2, #1
 80045e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80045e4:	193b      	adds	r3, r7, r4
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045ea:	193b      	adds	r3, r7, r4
 80045ec:	2240      	movs	r2, #64	@ 0x40
 80045ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	0018      	movs	r0, r3
 80045fa:	f00b fefb 	bl	80103f4 <HAL_RCC_OscConfig>
 80045fe:	1e03      	subs	r3, r0, #0
 8004600:	d001      	beq.n	8004606 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004602:	f008 f829 	bl	800c658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004606:	003b      	movs	r3, r7
 8004608:	2207      	movs	r2, #7
 800460a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800460c:	003b      	movs	r3, r7
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004612:	003b      	movs	r3, r7
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004618:	003b      	movs	r3, r7
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800461e:	003b      	movs	r3, r7
 8004620:	2100      	movs	r1, #0
 8004622:	0018      	movs	r0, r3
 8004624:	f00c fa00 	bl	8010a28 <HAL_RCC_ClockConfig>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d001      	beq.n	8004630 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800462c:	f008 f814 	bl	800c658 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8004630:	2380      	movs	r3, #128	@ 0x80
 8004632:	045b      	lsls	r3, r3, #17
 8004634:	2200      	movs	r2, #0
 8004636:	0019      	movs	r1, r3
 8004638:	2000      	movs	r0, #0
 800463a:	f00c fafd 	bl	8010c38 <HAL_RCC_MCOConfig>
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b013      	add	sp, #76	@ 0x4c
 8004644:	bd90      	pop	{r4, r7, pc}

08004646 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800464a:	2200      	movs	r2, #0
 800464c:	2102      	movs	r1, #2
 800464e:	201b      	movs	r0, #27
 8004650:	f009 fac8 	bl	800dbe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004654:	201b      	movs	r0, #27
 8004656:	f009 fada 	bl	800dc0e <HAL_NVIC_EnableIRQ>
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <MX_I2C1_Init+0x78>)
 8004668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <MX_I2C1_Init+0x74>)
 800466c:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <MX_I2C1_Init+0x7c>)
 800466e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004670:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004676:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004678:	2201      	movs	r2, #1
 800467a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800467c:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <MX_I2C1_Init+0x74>)
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004684:	2200      	movs	r2, #0
 8004686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004688:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <MX_I2C1_Init+0x74>)
 800468a:	2200      	movs	r2, #0
 800468c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800468e:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004690:	2200      	movs	r2, #0
 8004692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <MX_I2C1_Init+0x74>)
 8004696:	2200      	movs	r2, #0
 8004698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800469a:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <MX_I2C1_Init+0x74>)
 800469c:	0018      	movs	r0, r3
 800469e:	f009 ffa5 	bl	800e5ec <HAL_I2C_Init>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d001      	beq.n	80046aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80046a6:	f007 ffd7 	bl	800c658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046aa:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <MX_I2C1_Init+0x74>)
 80046ac:	2100      	movs	r1, #0
 80046ae:	0018      	movs	r0, r3
 80046b0:	f00b fdbc 	bl	801022c <HAL_I2CEx_ConfigAnalogFilter>
 80046b4:	1e03      	subs	r3, r0, #0
 80046b6:	d001      	beq.n	80046bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80046b8:	f007 ffce 	bl	800c658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <MX_I2C1_Init+0x74>)
 80046be:	2100      	movs	r1, #0
 80046c0:	0018      	movs	r0, r3
 80046c2:	f00b fdff 	bl	80102c4 <HAL_I2CEx_ConfigDigitalFilter>
 80046c6:	1e03      	subs	r3, r0, #0
 80046c8:	d001      	beq.n	80046ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80046ca:	f007 ffc5 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000524 	.word	0x20000524
 80046d8:	40005400 	.word	0x40005400
 80046dc:	00303d5b 	.word	0x00303d5b

080046e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <MX_I2C2_Init+0x74>)
 80046e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <MX_I2C2_Init+0x78>)
 80046e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <MX_I2C2_Init+0x74>)
 80046ec:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <MX_I2C2_Init+0x7c>)
 80046ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80046f0:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <MX_I2C2_Init+0x74>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046f6:	4b17      	ldr	r3, [pc, #92]	@ (8004754 <MX_I2C2_Init+0x74>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046fc:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <MX_I2C2_Init+0x74>)
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004702:	4b14      	ldr	r3, [pc, #80]	@ (8004754 <MX_I2C2_Init+0x74>)
 8004704:	2200      	movs	r2, #0
 8004706:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <MX_I2C2_Init+0x74>)
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <MX_I2C2_Init+0x74>)
 8004710:	2200      	movs	r2, #0
 8004712:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <MX_I2C2_Init+0x74>)
 8004716:	2200      	movs	r2, #0
 8004718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <MX_I2C2_Init+0x74>)
 800471c:	0018      	movs	r0, r3
 800471e:	f009 ff65 	bl	800e5ec <HAL_I2C_Init>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d001      	beq.n	800472a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004726:	f007 ff97 	bl	800c658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <MX_I2C2_Init+0x74>)
 800472c:	2100      	movs	r1, #0
 800472e:	0018      	movs	r0, r3
 8004730:	f00b fd7c 	bl	801022c <HAL_I2CEx_ConfigAnalogFilter>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004738:	f007 ff8e 	bl	800c658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <MX_I2C2_Init+0x74>)
 800473e:	2100      	movs	r1, #0
 8004740:	0018      	movs	r0, r3
 8004742:	f00b fdbf 	bl	80102c4 <HAL_I2CEx_ConfigDigitalFilter>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d001      	beq.n	800474e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800474a:	f007 ff85 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000570 	.word	0x20000570
 8004758:	40005800 	.word	0x40005800
 800475c:	00303d5b 	.word	0x00303d5b

08004760 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004764:	4b23      	ldr	r3, [pc, #140]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004766:	4a24      	ldr	r2, [pc, #144]	@ (80047f8 <MX_LPUART1_UART_Init+0x98>)
 8004768:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800476a:	4b22      	ldr	r3, [pc, #136]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 800476c:	2296      	movs	r2, #150	@ 0x96
 800476e:	0192      	lsls	r2, r2, #6
 8004770:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004772:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004778:	4b1e      	ldr	r3, [pc, #120]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800477e:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004784:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004786:	220c      	movs	r2, #12
 8004788:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800478a:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004790:	4b18      	ldr	r3, [pc, #96]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004792:	2200      	movs	r2, #0
 8004794:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004796:	4b17      	ldr	r3, [pc, #92]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800479c:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 800479e:	2200      	movs	r2, #0
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80047a2:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80047a8:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 80047aa:	0018      	movs	r0, r3
 80047ac:	f00e fb64 	bl	8012e78 <HAL_UART_Init>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80047b4:	f007 ff50 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047b8:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 80047ba:	2100      	movs	r1, #0
 80047bc:	0018      	movs	r0, r3
 80047be:	f010 fe81 	bl	80154c4 <HAL_UARTEx_SetTxFifoThreshold>
 80047c2:	1e03      	subs	r3, r0, #0
 80047c4:	d001      	beq.n	80047ca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80047c6:	f007 ff47 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	0018      	movs	r0, r3
 80047d0:	f010 feb8 	bl	8015544 <HAL_UARTEx_SetRxFifoThreshold>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d001      	beq.n	80047dc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80047d8:	f007 ff3e 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <MX_LPUART1_UART_Init+0x94>)
 80047de:	0018      	movs	r0, r3
 80047e0:	f010 fe36 	bl	8015450 <HAL_UARTEx_DisableFifoMode>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80047e8:	f007 ff36 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80047ec:	46c0      	nop			@ (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	200005bc 	.word	0x200005bc
 80047f8:	40008000 	.word	0x40008000

080047fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004800:	4b27      	ldr	r3, [pc, #156]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004802:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <MX_USART1_UART_Init+0xa8>)
 8004804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004806:	4b26      	ldr	r3, [pc, #152]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004808:	22e1      	movs	r2, #225	@ 0xe1
 800480a:	0252      	lsls	r2, r2, #9
 800480c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800480e:	4b24      	ldr	r3, [pc, #144]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004810:	2200      	movs	r2, #0
 8004812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004814:	4b22      	ldr	r3, [pc, #136]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004816:	2200      	movs	r2, #0
 8004818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800481a:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004822:	220c      	movs	r2, #12
 8004824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004826:	4b1e      	ldr	r3, [pc, #120]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800482c:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004832:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004834:	2200      	movs	r2, #0
 8004836:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004838:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 800483a:	2200      	movs	r2, #0
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800483e:	4b18      	ldr	r3, [pc, #96]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004840:	2230      	movs	r2, #48	@ 0x30
 8004842:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004844:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004846:	2280      	movs	r2, #128	@ 0x80
 8004848:	0152      	lsls	r2, r2, #5
 800484a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800484c:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 800484e:	2280      	movs	r2, #128	@ 0x80
 8004850:	0192      	lsls	r2, r2, #6
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004854:	4b12      	ldr	r3, [pc, #72]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004856:	0018      	movs	r0, r3
 8004858:	f00e fb0e 	bl	8012e78 <HAL_UART_Init>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d001      	beq.n	8004864 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004860:	f007 fefa 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004864:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004866:	2100      	movs	r1, #0
 8004868:	0018      	movs	r0, r3
 800486a:	f010 fe2b 	bl	80154c4 <HAL_UARTEx_SetTxFifoThreshold>
 800486e:	1e03      	subs	r3, r0, #0
 8004870:	d001      	beq.n	8004876 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004872:	f007 fef1 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004876:	4b0a      	ldr	r3, [pc, #40]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 8004878:	2100      	movs	r1, #0
 800487a:	0018      	movs	r0, r3
 800487c:	f010 fe62 	bl	8015544 <HAL_UARTEx_SetRxFifoThreshold>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d001      	beq.n	8004888 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004884:	f007 fee8 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <MX_USART1_UART_Init+0xa4>)
 800488a:	0018      	movs	r0, r3
 800488c:	f010 fde0 	bl	8015450 <HAL_UARTEx_DisableFifoMode>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d001      	beq.n	8004898 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 8004894:	f007 fee0 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004898:	46c0      	nop			@ (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	2000064c 	.word	0x2000064c
 80048a4:	40013800 	.word	0x40013800

080048a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048ac:	4b23      	ldr	r3, [pc, #140]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048ae:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <MX_USART2_UART_Init+0x98>)
 80048b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80048b2:	4b22      	ldr	r3, [pc, #136]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048b4:	2296      	movs	r2, #150	@ 0x96
 80048b6:	0192      	lsls	r2, r2, #6
 80048b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ba:	4b20      	ldr	r3, [pc, #128]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048ce:	220c      	movs	r2, #12
 80048d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048d2:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d8:	4b18      	ldr	r3, [pc, #96]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048de:	4b17      	ldr	r3, [pc, #92]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048e4:	4b15      	ldr	r3, [pc, #84]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ea:	4b14      	ldr	r3, [pc, #80]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048f0:	4b12      	ldr	r3, [pc, #72]	@ (800493c <MX_USART2_UART_Init+0x94>)
 80048f2:	0018      	movs	r0, r3
 80048f4:	f00e fac0 	bl	8012e78 <HAL_UART_Init>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d001      	beq.n	8004900 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80048fc:	f007 feac 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004900:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <MX_USART2_UART_Init+0x94>)
 8004902:	2100      	movs	r1, #0
 8004904:	0018      	movs	r0, r3
 8004906:	f010 fddd 	bl	80154c4 <HAL_UARTEx_SetTxFifoThreshold>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800490e:	f007 fea3 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004912:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <MX_USART2_UART_Init+0x94>)
 8004914:	2100      	movs	r1, #0
 8004916:	0018      	movs	r0, r3
 8004918:	f010 fe14 	bl	8015544 <HAL_UARTEx_SetRxFifoThreshold>
 800491c:	1e03      	subs	r3, r0, #0
 800491e:	d001      	beq.n	8004924 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004920:	f007 fe9a 	bl	800c658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <MX_USART2_UART_Init+0x94>)
 8004926:	0018      	movs	r0, r3
 8004928:	f010 fd92 	bl	8015450 <HAL_UARTEx_DisableFifoMode>
 800492c:	1e03      	subs	r3, r0, #0
 800492e:	d001      	beq.n	8004934 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004930:	f007 fe92 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004934:	46c0      	nop			@ (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	200006dc 	.word	0x200006dc
 8004940:	40004400 	.word	0x40004400

08004944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004948:	4b16      	ldr	r3, [pc, #88]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 800494a:	4a17      	ldr	r2, [pc, #92]	@ (80049a8 <MX_USART3_UART_Init+0x64>)
 800494c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800494e:	4b15      	ldr	r3, [pc, #84]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004950:	22e1      	movs	r2, #225	@ 0xe1
 8004952:	0252      	lsls	r2, r2, #9
 8004954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004956:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004964:	2200      	movs	r2, #0
 8004966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 800496a:	220c      	movs	r2, #12
 800496c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496e:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800497a:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 800497c:	2200      	movs	r2, #0
 800497e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004980:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004982:	2200      	movs	r2, #0
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 8004988:	2200      	movs	r2, #0
 800498a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <MX_USART3_UART_Init+0x60>)
 800498e:	0018      	movs	r0, r3
 8004990:	f00e fa72 	bl	8012e78 <HAL_UART_Init>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d001      	beq.n	800499c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004998:	f007 fe5e 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	2000076c 	.word	0x2000076c
 80049a8:	40004800 	.word	0x40004800

080049ac <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80049b0:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <MX_USART4_UART_Init+0x64>)
 80049b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80049b6:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049b8:	2296      	movs	r2, #150	@ 0x96
 80049ba:	0192      	lsls	r2, r2, #6
 80049bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80049be:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80049c4:	4b11      	ldr	r3, [pc, #68]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80049ca:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80049d0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049d2:	220c      	movs	r2, #12
 80049d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049e2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049e8:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ee:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <MX_USART4_UART_Init+0x60>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f00e fa3e 	bl	8012e78 <HAL_UART_Init>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d001      	beq.n	8004a04 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004a00:	f007 fe2a 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004a04:	46c0      	nop			@ (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	200007fc 	.word	0x200007fc
 8004a10:	40004c00 	.word	0x40004c00

08004a14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a8c <MX_SPI1_Init+0x78>)
 8004a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a20:	2282      	movs	r2, #130	@ 0x82
 8004a22:	0052      	lsls	r2, r2, #1
 8004a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a26:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a2e:	22e0      	movs	r2, #224	@ 0xe0
 8004a30:	00d2      	lsls	r2, r2, #3
 8004a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	4b14      	ldr	r3, [pc, #80]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a3a:	4b13      	ldr	r3, [pc, #76]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a42:	2280      	movs	r2, #128	@ 0x80
 8004a44:	0092      	lsls	r2, r2, #2
 8004a46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a62:	2207      	movs	r2, #7
 8004a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a66:	4b08      	ldr	r3, [pc, #32]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a6e:	2208      	movs	r2, #8
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a72:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <MX_SPI1_Init+0x74>)
 8004a74:	0018      	movs	r0, r3
 8004a76:	f00c fb79 	bl	801116c <HAL_SPI_Init>
 8004a7a:	1e03      	subs	r3, r0, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004a7e:	f007 fdeb 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200008e8 	.word	0x200008e8
 8004a8c:	40013000 	.word	0x40013000

08004a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a96:	2314      	movs	r3, #20
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f013 fd8f 	bl	80185c4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004aa6:	1d3b      	adds	r3, r7, #4
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	2310      	movs	r3, #16
 8004aac:	001a      	movs	r2, r3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f013 fd88 	bl	80185c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ab4:	4b25      	ldr	r3, [pc, #148]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ab6:	4a26      	ldr	r2, [pc, #152]	@ (8004b50 <MX_TIM1_Init+0xc0>)
 8004ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004abc:	4a25      	ldr	r2, [pc, #148]	@ (8004b54 <MX_TIM1_Init+0xc4>)
 8004abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac0:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ac6:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ac8:	4a23      	ldr	r2, [pc, #140]	@ (8004b58 <MX_TIM1_Init+0xc8>)
 8004aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004acc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004ade:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f00d fa57 	bl	8011f94 <HAL_TIM_IC_Init>
 8004ae6:	1e03      	subs	r3, r0, #0
 8004ae8:	d001      	beq.n	8004aee <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8004aea:	f007 fdb5 	bl	800c658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aee:	2114      	movs	r1, #20
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b02:	187a      	adds	r2, r7, r1
 8004b04:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f00e f92f 	bl	8012d6c <HAL_TIMEx_MasterConfigSynchronization>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8004b12:	f007 fda1 	bl	800c658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b16:	1d3b      	adds	r3, r7, #4
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	2201      	movs	r2, #1
 8004b20:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004b2e:	1d39      	adds	r1, r7, #4
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <MX_TIM1_Init+0xbc>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f00d fcef 	bl	8012518 <HAL_TIM_IC_ConfigChannel>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8004b3e:	f007 fd8b 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b008      	add	sp, #32
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	2000094c 	.word	0x2000094c
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	00003e7f 	.word	0x00003e7f
 8004b58:	0000ffff 	.word	0x0000ffff

08004b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b62:	2314      	movs	r3, #20
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	0018      	movs	r0, r3
 8004b68:	230c      	movs	r3, #12
 8004b6a:	001a      	movs	r2, r3
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	f013 fd29 	bl	80185c4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	0018      	movs	r0, r3
 8004b76:	2310      	movs	r3, #16
 8004b78:	001a      	movs	r2, r3
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	f013 fd22 	bl	80185c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b80:	4b23      	ldr	r3, [pc, #140]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004b82:	2280      	movs	r2, #128	@ 0x80
 8004b84:	05d2      	lsls	r2, r2, #23
 8004b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8004b88:	4b21      	ldr	r3, [pc, #132]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8e:	4b20      	ldr	r3, [pc, #128]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004b94:	4b1e      	ldr	r3, [pc, #120]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	4252      	negs	r2, r2
 8004b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004baa:	0018      	movs	r0, r3
 8004bac:	f00d f9f2 	bl	8011f94 <HAL_TIM_IC_Init>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004bb4:	f007 fd50 	bl	800c658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb8:	2114      	movs	r1, #20
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bc6:	187a      	adds	r2, r7, r1
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004bca:	0011      	movs	r1, r2
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f00e f8cd 	bl	8012d6c <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d001      	beq.n	8004bda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004bd6:	f007 fd3f 	bl	800c658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	2201      	movs	r2, #1
 8004be4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	2200      	movs	r2, #0
 8004bea:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004bf2:	1d39      	adds	r1, r7, #4
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <MX_TIM2_Init+0xb4>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f00d fc8d 	bl	8012518 <HAL_TIM_IC_ConfigChannel>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8004c02:	f007 fd29 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b008      	add	sp, #32
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	20000998 	.word	0x20000998

08004c14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	0018      	movs	r0, r3
 8004c20:	2310      	movs	r3, #16
 8004c22:	001a      	movs	r2, r3
 8004c24:	2100      	movs	r1, #0
 8004c26:	f013 fccd 	bl	80185c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	230c      	movs	r3, #12
 8004c30:	001a      	movs	r2, r3
 8004c32:	2100      	movs	r1, #0
 8004c34:	f013 fcc6 	bl	80185c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c38:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb8 <MX_TIM3_Init+0xa4>)
 8004c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c40:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <MX_TIM3_Init+0xa8>)
 8004c42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <MX_TIM3_Init+0xac>)
 8004c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c50:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f00d f8e4 	bl	8011e2c <HAL_TIM_Base_Init>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d001      	beq.n	8004c6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004c68:	f007 fcf6 	bl	800c658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	2280      	movs	r2, #128	@ 0x80
 8004c72:	0152      	lsls	r2, r2, #5
 8004c74:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c76:	187a      	adds	r2, r7, r1
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c7a:	0011      	movs	r1, r2
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f00d fcef 	bl	8012660 <HAL_TIM_ConfigClockSource>
 8004c82:	1e03      	subs	r3, r0, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004c86:	f007 fce7 	bl	800c658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c96:	1d3a      	adds	r2, r7, #4
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <MX_TIM3_Init+0xa0>)
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f00e f865 	bl	8012d6c <HAL_TIMEx_MasterConfigSynchronization>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004ca6:	f007 fcd7 	bl	800c658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b008      	add	sp, #32
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	200009e4 	.word	0x200009e4
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	00001f3f 	.word	0x00001f3f
 8004cc0:	000007cf 	.word	0x000007cf

08004cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cca:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <MX_DMA_Init+0x38>)
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <MX_DMA_Init+0x38>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cd6:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <MX_DMA_Init+0x38>)
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	2009      	movs	r0, #9
 8004ce8:	f008 ff7c 	bl	800dbe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004cec:	2009      	movs	r0, #9
 8004cee:	f008 ff8e 	bl	800dc0e <HAL_NVIC_EnableIRQ>

}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	40021000 	.word	0x40021000

08004d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b08b      	sub	sp, #44	@ 0x2c
 8004d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d06:	2414      	movs	r4, #20
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	2314      	movs	r3, #20
 8004d0e:	001a      	movs	r2, r3
 8004d10:	2100      	movs	r1, #0
 8004d12:	f013 fc57 	bl	80185c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d16:	4b64      	ldr	r3, [pc, #400]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d1c:	2104      	movs	r1, #4
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d22:	4b61      	ldr	r3, [pc, #388]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	2204      	movs	r2, #4
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d34:	2120      	movs	r1, #32
 8004d36:	430a      	orrs	r2, r1
 8004d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d46:	4b58      	ldr	r3, [pc, #352]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d52:	4b55      	ldr	r3, [pc, #340]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	2201      	movs	r2, #1
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5e:	4b52      	ldr	r3, [pc, #328]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d62:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d64:	2102      	movs	r1, #2
 8004d66:	430a      	orrs	r2, r1
 8004d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <MX_GPIO_Init+0x1a8>)
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6e:	2202      	movs	r2, #2
 8004d70:	4013      	ands	r3, r2
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004d76:	23a0      	movs	r3, #160	@ 0xa0
 8004d78:	05db      	lsls	r3, r3, #23
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f009 fc17 	bl	800e5b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8004d84:	4949      	ldr	r1, [pc, #292]	@ (8004eac <MX_GPIO_Init+0x1ac>)
 8004d86:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb0 <MX_GPIO_Init+0x1b0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f009 fc11 	bl	800e5b2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4846      	ldr	r0, [pc, #280]	@ (8004eb0 <MX_GPIO_Init+0x1b0>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	0019      	movs	r1, r3
 8004d9a:	f009 fc0a 	bl	800e5b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	2204      	movs	r2, #4
 8004da2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	2202      	movs	r2, #2
 8004da8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb4 <MX_GPIO_Init+0x1b4>)
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	f009 fa74 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	2210      	movs	r2, #16
 8004dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dce:	193b      	adds	r3, r7, r4
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de0:	193a      	adds	r2, r7, r4
 8004de2:	23a0      	movs	r3, #160	@ 0xa0
 8004de4:	05db      	lsls	r3, r3, #23
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f009 fa61 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	2202      	movs	r2, #2
 8004df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004df4:	193b      	adds	r3, r7, r4
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb0 <MX_GPIO_Init+0x1b0>)
 8004e04:	0019      	movs	r1, r3
 8004e06:	0010      	movs	r0, r2
 8004e08:	f009 fa52 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <MX_GPIO_Init+0x1ac>)
 8004e10:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	2201      	movs	r2, #1
 8004e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <MX_GPIO_Init+0x1b0>)
 8004e28:	0019      	movs	r1, r3
 8004e2a:	0010      	movs	r0, r2
 8004e2c:	f009 fa40 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	2280      	movs	r2, #128	@ 0x80
 8004e34:	0112      	lsls	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	2200      	movs	r2, #0
 8004e42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e44:	193a      	adds	r2, r7, r4
 8004e46:	23a0      	movs	r3, #160	@ 0xa0
 8004e48:	05db      	lsls	r3, r3, #23
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f009 fa2f 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e52:	0021      	movs	r1, r4
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	2280      	movs	r2, #128	@ 0x80
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e5c:	000c      	movs	r4, r1
 8004e5e:	193b      	adds	r3, r7, r4
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	4a12      	ldr	r2, [pc, #72]	@ (8004eb8 <MX_GPIO_Init+0x1b8>)
 8004e6e:	0019      	movs	r1, r3
 8004e70:	0010      	movs	r0, r2
 8004e72:	f009 fa1d 	bl	800e2b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e76:	0021      	movs	r1, r4
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	2280      	movs	r2, #128	@ 0x80
 8004e7c:	0052      	lsls	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	2201      	movs	r2, #1
 8004e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	2201      	movs	r2, #1
 8004e8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	2200      	movs	r2, #0
 8004e90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	4a06      	ldr	r2, [pc, #24]	@ (8004eb0 <MX_GPIO_Init+0x1b0>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	0010      	movs	r0, r2
 8004e9a:	f009 fa09 	bl	800e2b0 <HAL_GPIO_Init>

}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b00b      	add	sp, #44	@ 0x2c
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	0000e098 	.word	0x0000e098
 8004eb0:	50000400 	.word	0x50000400
 8004eb4:	50001400 	.word	0x50001400
 8004eb8:	50000800 	.word	0x50000800

08004ebc <Status_Check>:

/* USER CODE BEGIN 4 */
void Status_Check(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
	time_update();
 8004ec0:	f004 f9b2 	bl	8009228 <time_update>

	HAL_UART_Transmit(&huart1, (uint8_t *) plate_qr, 14, 0x1C);
 8004ec4:	49cb      	ldr	r1, [pc, #812]	@ (80051f4 <Status_Check+0x338>)
 8004ec6:	48cc      	ldr	r0, [pc, #816]	@ (80051f8 <Status_Check+0x33c>)
 8004ec8:	231c      	movs	r3, #28
 8004eca:	220e      	movs	r2, #14
 8004ecc:	f00e f82a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f008 fda1 	bl	800da18 <HAL_Delay>

	HAL_UART_Transmit(&huart1, unlock_clear, 12, 0x20);
 8004ed6:	49c9      	ldr	r1, [pc, #804]	@ (80051fc <Status_Check+0x340>)
 8004ed8:	48c7      	ldr	r0, [pc, #796]	@ (80051f8 <Status_Check+0x33c>)
 8004eda:	2320      	movs	r3, #32
 8004edc:	220c      	movs	r2, #12
 8004ede:	f00e f821 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f008 fd98 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, C_Fare_clear, 7, 0x20);
 8004ee8:	49c5      	ldr	r1, [pc, #788]	@ (8005200 <Status_Check+0x344>)
 8004eea:	48c3      	ldr	r0, [pc, #780]	@ (80051f8 <Status_Check+0x33c>)
 8004eec:	2320      	movs	r3, #32
 8004eee:	2207      	movs	r2, #7
 8004ef0:	f00e f818 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	f008 fd8f 	bl	800da18 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Hired, 7, 0x0E);
 8004efa:	49c2      	ldr	r1, [pc, #776]	@ (8005204 <Status_Check+0x348>)
 8004efc:	48be      	ldr	r0, [pc, #760]	@ (80051f8 <Status_Check+0x33c>)
 8004efe:	230e      	movs	r3, #14
 8004f00:	2207      	movs	r2, #7
 8004f02:	f00e f80f 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8004f06:	2002      	movs	r0, #2
 8004f08:	f008 fd86 	bl	800da18 <HAL_Delay>
	Status_Change();
 8004f0c:	f000 f9be 	bl	800528c <Status_Change>
	if(Drv_state_flag)
 8004f10:	4bbd      	ldr	r3, [pc, #756]	@ (8005208 <Status_Check+0x34c>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <Status_Check+0x6a>
	{
		Flag_H = TRUE;
 8004f18:	4bbc      	ldr	r3, [pc, #752]	@ (800520c <Status_Check+0x350>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 8004f1e:	4bba      	ldr	r3, [pc, #744]	@ (8005208 <Status_Check+0x34c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e002      	b.n	8004f2c <Status_Check+0x70>
	}
	else
	{
		Flag_H = FALSE;
 8004f26:	4bb9      	ldr	r3, [pc, #740]	@ (800520c <Status_Check+0x350>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 8004f2c:	4bb8      	ldr	r3, [pc, #736]	@ (8005210 <Status_Check+0x354>)
 8004f2e:	220c      	movs	r2, #12
 8004f30:	2100      	movs	r1, #0
 8004f32:	0018      	movs	r0, r3
 8004f34:	f013 fb46 	bl	80185c4 <memset>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Stop, 7, 0x0E);
 8004f38:	49b6      	ldr	r1, [pc, #728]	@ (8005214 <Status_Check+0x358>)
 8004f3a:	48af      	ldr	r0, [pc, #700]	@ (80051f8 <Status_Check+0x33c>)
 8004f3c:	230e      	movs	r3, #14
 8004f3e:	2207      	movs	r2, #7
 8004f40:	f00d fff0 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8004f44:	2002      	movs	r0, #2
 8004f46:	f008 fd67 	bl	800da18 <HAL_Delay>
	Status_Change();
 8004f4a:	f000 f99f 	bl	800528c <Status_Change>
	if(Drv_state_flag)
 8004f4e:	4bae      	ldr	r3, [pc, #696]	@ (8005208 <Status_Check+0x34c>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <Status_Check+0xa8>
	{
		Flag_S = TRUE;
 8004f56:	4bb0      	ldr	r3, [pc, #704]	@ (8005218 <Status_Check+0x35c>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 8004f5c:	4baa      	ldr	r3, [pc, #680]	@ (8005208 <Status_Check+0x34c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e002      	b.n	8004f6a <Status_Check+0xae>
	}
	else
	{
		Flag_S = FALSE;
 8004f64:	4bac      	ldr	r3, [pc, #688]	@ (8005218 <Status_Check+0x35c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 8004f6a:	4ba9      	ldr	r3, [pc, #676]	@ (8005210 <Status_Check+0x354>)
 8004f6c:	220c      	movs	r2, #12
 8004f6e:	2100      	movs	r1, #0
 8004f70:	0018      	movs	r0, r3
 8004f72:	f013 fb27 	bl	80185c4 <memset>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Vacant, 7, 0x0E);
 8004f76:	49a9      	ldr	r1, [pc, #676]	@ (800521c <Status_Check+0x360>)
 8004f78:	489f      	ldr	r0, [pc, #636]	@ (80051f8 <Status_Check+0x33c>)
 8004f7a:	230e      	movs	r3, #14
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	f00d ffd1 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8004f82:	2002      	movs	r0, #2
 8004f84:	f008 fd48 	bl	800da18 <HAL_Delay>
	Status_Change();
 8004f88:	f000 f980 	bl	800528c <Status_Change>
	if(Drv_state_flag)
 8004f8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005208 <Status_Check+0x34c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <Status_Check+0xe6>
	{
		Flag_V = TRUE;
 8004f94:	4ba2      	ldr	r3, [pc, #648]	@ (8005220 <Status_Check+0x364>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 8004f9a:	4b9b      	ldr	r3, [pc, #620]	@ (8005208 <Status_Check+0x34c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e002      	b.n	8004fa8 <Status_Check+0xec>
	}
	else
	{
		Flag_V = FALSE;
 8004fa2:	4b9f      	ldr	r3, [pc, #636]	@ (8005220 <Status_Check+0x364>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 8004fa8:	4b99      	ldr	r3, [pc, #612]	@ (8005210 <Status_Check+0x354>)
 8004faa:	220c      	movs	r2, #12
 8004fac:	2100      	movs	r1, #0
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f013 fb08 	bl	80185c4 <memset>

	last_btn_value = btn_value;
 8004fb4:	4b9b      	ldr	r3, [pc, #620]	@ (8005224 <Status_Check+0x368>)
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	4b9b      	ldr	r3, [pc, #620]	@ (8005228 <Status_Check+0x36c>)
 8004fba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Audio, 7, 0x0E);
 8004fbc:	499b      	ldr	r1, [pc, #620]	@ (800522c <Status_Check+0x370>)
 8004fbe:	488e      	ldr	r0, [pc, #568]	@ (80051f8 <Status_Check+0x33c>)
 8004fc0:	230e      	movs	r3, #14
 8004fc2:	2207      	movs	r2, #7
 8004fc4:	f00d ffae 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8004fc8:	2002      	movs	r0, #2
 8004fca:	f008 fd25 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8004fce:	4b98      	ldr	r3, [pc, #608]	@ (8005230 <Status_Check+0x374>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d015      	beq.n	8005002 <Status_Check+0x146>
	{
		RxFlag = FALSE;
 8004fd6:	4b96      	ldr	r3, [pc, #600]	@ (8005230 <Status_Check+0x374>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
		btn_value = RxBuff[8];
 8004fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8005210 <Status_Check+0x354>)
 8004fde:	7a1a      	ldrb	r2, [r3, #8]
 8004fe0:	4b90      	ldr	r3, [pc, #576]	@ (8005224 <Status_Check+0x368>)
 8004fe2:	701a      	strb	r2, [r3, #0]
		if (btn_value != last_btn_value)
 8004fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8005224 <Status_Check+0x368>)
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8005228 <Status_Check+0x36c>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d002      	beq.n	8004ff6 <Status_Check+0x13a>
			Flag_btn_changed = true; //TRUE;
 8004ff0:	4b90      	ldr	r3, [pc, #576]	@ (8005234 <Status_Check+0x378>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]

		memset(RxBuff,0,12);
 8004ff6:	4b86      	ldr	r3, [pc, #536]	@ (8005210 <Status_Check+0x354>)
 8004ff8:	220c      	movs	r2, #12
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f013 fae1 	bl	80185c4 <memset>
	}

	if (Flag_V && Flag_H)
 8005002:	4b87      	ldr	r3, [pc, #540]	@ (8005220 <Status_Check+0x364>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <Status_Check+0x16a>
 800500a:	4b80      	ldr	r3, [pc, #512]	@ (800520c <Status_Check+0x350>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <Status_Check+0x16a>
	{
		Flag_V2H = TRUE;
 8005012:	4b89      	ldr	r3, [pc, #548]	@ (8005238 <Status_Check+0x37c>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005018:	4b88      	ldr	r3, [pc, #544]	@ (800523c <Status_Check+0x380>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 800501e:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <Status_Check+0x384>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e022      	b.n	800506c <Status_Check+0x1b0>
	}
	else if (Flag_H && Flag_S)
 8005026:	4b79      	ldr	r3, [pc, #484]	@ (800520c <Status_Check+0x350>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <Status_Check+0x18e>
 800502e:	4b7a      	ldr	r3, [pc, #488]	@ (8005218 <Status_Check+0x35c>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <Status_Check+0x18e>
	{
		Flag_V2H = FALSE;
 8005036:	4b80      	ldr	r3, [pc, #512]	@ (8005238 <Status_Check+0x37c>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
		Flag_H2S = TRUE;
 800503c:	4b7f      	ldr	r3, [pc, #508]	@ (800523c <Status_Check+0x380>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 8005042:	4b7f      	ldr	r3, [pc, #508]	@ (8005240 <Status_Check+0x384>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e010      	b.n	800506c <Status_Check+0x1b0>
	}
	else if (Flag_S && Flag_V)
 800504a:	4b73      	ldr	r3, [pc, #460]	@ (8005218 <Status_Check+0x35c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <Status_Check+0x1b0>
 8005052:	4b73      	ldr	r3, [pc, #460]	@ (8005220 <Status_Check+0x364>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <Status_Check+0x1b0>
	{
		Flag_V2H = FALSE;
 800505a:	4b77      	ldr	r3, [pc, #476]	@ (8005238 <Status_Check+0x37c>)
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005060:	4b76      	ldr	r3, [pc, #472]	@ (800523c <Status_Check+0x380>)
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
		Flag_S2V = TRUE;
 8005066:	4b76      	ldr	r3, [pc, #472]	@ (8005240 <Status_Check+0x384>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
	}

	ex_counter = counter;
 800506c:	4b75      	ldr	r3, [pc, #468]	@ (8005244 <Status_Check+0x388>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b75      	ldr	r3, [pc, #468]	@ (8005248 <Status_Check+0x38c>)
 8005072:	601a      	str	r2, [r3, #0]
//	cnt += 1;

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1)
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4a74      	ldr	r2, [pc, #464]	@ (800524c <Status_Check+0x390>)
 800507a:	0019      	movs	r1, r3
 800507c:	0010      	movs	r0, r2
 800507e:	f009 fa7b 	bl	800e578 <HAL_GPIO_ReadPin>
 8005082:	0003      	movs	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10c      	bne.n	80050a2 <Status_Check+0x1e6>
	{
		//pc9 = 0, encoder
		//pc9 = 1, tester/not connect
		flag_tester = 1;
 8005088:	4b71      	ldr	r3, [pc, #452]	@ (8005250 <Status_Check+0x394>)
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
		flag_encoder = 0;
 800508e:	4b71      	ldr	r3, [pc, #452]	@ (8005254 <Status_Check+0x398>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
		cnt += 1;
 8005094:	4b70      	ldr	r3, [pc, #448]	@ (8005258 <Status_Check+0x39c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b6e      	ldr	r3, [pc, #440]	@ (8005258 <Status_Check+0x39c>)
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e008      	b.n	80050b4 <Status_Check+0x1f8>
	}
	else
	{
		flag_tester = 0;
 80050a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005250 <Status_Check+0x394>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
		flag_encoder = 1;
 80050a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005254 <Status_Check+0x398>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 80050ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005258 <Status_Check+0x39c>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
	}

	if(ex_counter >= 10 && flag_tester && flag_sp)
 80050b4:	4b64      	ldr	r3, [pc, #400]	@ (8005248 <Status_Check+0x38c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d910      	bls.n	80050de <Status_Check+0x222>
 80050bc:	4b64      	ldr	r3, [pc, #400]	@ (8005250 <Status_Check+0x394>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <Status_Check+0x222>
 80050c4:	4b65      	ldr	r3, [pc, #404]	@ (800525c <Status_Check+0x3a0>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <Status_Check+0x222>
	{
//		flag_tester = 1;
		Flag_V2H = FALSE;
 80050cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <Status_Check+0x37c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 80050d2:	4b5a      	ldr	r3, [pc, #360]	@ (800523c <Status_Check+0x380>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
		Flag_S2V = TRUE;
 80050d8:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <Status_Check+0x384>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
	}

	if (Flag_V2H && (Drv_state == S_VACANT))
 80050de:	4b56      	ldr	r3, [pc, #344]	@ (8005238 <Status_Check+0x37c>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <Status_Check+0x240>
 80050e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005260 <Status_Check+0x3a4>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <Status_Check+0x240>
	{
		Drv_state = S_HIRED;
 80050ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005260 <Status_Check+0x3a4>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
		Flag_V2H = FALSE;
 80050f4:	4b50      	ldr	r3, [pc, #320]	@ (8005238 <Status_Check+0x37c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e040      	b.n	800517e <Status_Check+0x2c2>
	}
	else if (Flag_H2S && (Drv_state == S_HIRED))
 80050fc:	4b4f      	ldr	r3, [pc, #316]	@ (800523c <Status_Check+0x380>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <Status_Check+0x25e>
 8005104:	4b56      	ldr	r3, [pc, #344]	@ (8005260 <Status_Check+0x3a4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <Status_Check+0x25e>
	{
		Drv_state = S_STOP;
 800510c:	4b54      	ldr	r3, [pc, #336]	@ (8005260 <Status_Check+0x3a4>)
 800510e:	2202      	movs	r2, #2
 8005110:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005112:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <Status_Check+0x380>)
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e031      	b.n	800517e <Status_Check+0x2c2>
	}
	else if (Flag_H2S && (Drv_state == S_STOP))
 800511a:	4b48      	ldr	r3, [pc, #288]	@ (800523c <Status_Check+0x380>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <Status_Check+0x27c>
 8005122:	4b4f      	ldr	r3, [pc, #316]	@ (8005260 <Status_Check+0x3a4>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d106      	bne.n	8005138 <Status_Check+0x27c>
	{
		Drv_state = S_HIRED;
 800512a:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <Status_Check+0x3a4>)
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005130:	4b42      	ldr	r3, [pc, #264]	@ (800523c <Status_Check+0x380>)
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e022      	b.n	800517e <Status_Check+0x2c2>
	}
	else if (Flag_S2V && (Drv_state == S_STOP))
 8005138:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <Status_Check+0x384>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <Status_Check+0x2a6>
 8005140:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <Status_Check+0x3a4>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d10c      	bne.n	8005162 <Status_Check+0x2a6>
	{
		Drv_state = S_VACANT;
 8005148:	4b45      	ldr	r3, [pc, #276]	@ (8005260 <Status_Check+0x3a4>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 800514e:	4b3c      	ldr	r3, [pc, #240]	@ (8005240 <Status_Check+0x384>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8005154:	4b3b      	ldr	r3, [pc, #236]	@ (8005244 <Status_Check+0x388>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
		ex_counter = 0;
 800515a:	4b3b      	ldr	r3, [pc, #236]	@ (8005248 <Status_Check+0x38c>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e00d      	b.n	800517e <Status_Check+0x2c2>
	}
	else if (Flag_S2V && (Drv_state == S_VACANT))
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <Status_Check+0x384>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <Status_Check+0x2c2>
 800516a:	4b3d      	ldr	r3, [pc, #244]	@ (8005260 <Status_Check+0x3a4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <Status_Check+0x2c2>
	{
		Drv_state = S_STOP;
 8005172:	4b3b      	ldr	r3, [pc, #236]	@ (8005260 <Status_Check+0x3a4>)
 8005174:	2202      	movs	r2, #2
 8005176:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 8005178:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <Status_Check+0x384>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
	}

	if (Drv_state == S_HIRED)
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <Status_Check+0x3a4>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d108      	bne.n	8005198 <Status_Check+0x2dc>
	{
		HMI_Hired_W();
 8005186:	f000 f89b 	bl	80052c0 <HMI_Hired_W>
		ttime_counter++;
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <Status_Check+0x3a8>)
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <Status_Check+0x3a8>)
 8005194:	801a      	strh	r2, [r3, #0]
			counter = 0;
		}
		HMI_Vacant_W();
		nbtime_counter++;
	}
}
 8005196:	e071      	b.n	800527c <Status_Check+0x3c0>
	else if (Drv_state == S_STOP)
 8005198:	4b31      	ldr	r3, [pc, #196]	@ (8005260 <Status_Check+0x3a4>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d108      	bne.n	80051b2 <Status_Check+0x2f6>
		HMI_Stop_W();
 80051a0:	f000 fb28 	bl	80057f4 <HMI_Stop_W>
		ttime_counter++;
 80051a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <Status_Check+0x3a8>)
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005264 <Status_Check+0x3a8>)
 80051ae:	801a      	strh	r2, [r3, #0]
}
 80051b0:	e064      	b.n	800527c <Status_Check+0x3c0>
	else if (Drv_state == S_VACANT)
 80051b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005260 <Status_Check+0x3a4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d160      	bne.n	800527c <Status_Check+0x3c0>
		if (cnt != 0)
 80051ba:	4b27      	ldr	r3, [pc, #156]	@ (8005258 <Status_Check+0x39c>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d052      	beq.n	8005268 <Status_Check+0x3ac>
			if (cnt > 3 && counter == ex_counter && ex_counter < 10)
 80051c2:	4b25      	ldr	r3, [pc, #148]	@ (8005258 <Status_Check+0x39c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d951      	bls.n	800526e <Status_Check+0x3b2>
 80051ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005244 <Status_Check+0x388>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005248 <Status_Check+0x38c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d14b      	bne.n	800526e <Status_Check+0x3b2>
 80051d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <Status_Check+0x38c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d847      	bhi.n	800526e <Status_Check+0x3b2>
				cnt = 0;
 80051de:	4b1e      	ldr	r3, [pc, #120]	@ (8005258 <Status_Check+0x39c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
				ex_counter = 0;
 80051e4:	4b18      	ldr	r3, [pc, #96]	@ (8005248 <Status_Check+0x38c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
				counter = 0;
 80051ea:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <Status_Check+0x388>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e03d      	b.n	800526e <Status_Check+0x3b2>
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	20000098 	.word	0x20000098
 80051f8:	2000064c 	.word	0x2000064c
 80051fc:	20000248 	.word	0x20000248
 8005200:	20000254 	.word	0x20000254
 8005204:	0801952c 	.word	0x0801952c
 8005208:	20000a6d 	.word	0x20000a6d
 800520c:	20000a6f 	.word	0x20000a6f
 8005210:	20000a34 	.word	0x20000a34
 8005214:	08019534 	.word	0x08019534
 8005218:	20000a70 	.word	0x20000a70
 800521c:	0801953c 	.word	0x0801953c
 8005220:	20000a6e 	.word	0x20000a6e
 8005224:	200033cc 	.word	0x200033cc
 8005228:	200033cd 	.word	0x200033cd
 800522c:	0801956c 	.word	0x0801956c
 8005230:	20000a30 	.word	0x20000a30
 8005234:	200033cb 	.word	0x200033cb
 8005238:	20000a71 	.word	0x20000a71
 800523c:	20000a72 	.word	0x20000a72
 8005240:	20000a73 	.word	0x20000a73
 8005244:	20000cdc 	.word	0x20000cdc
 8005248:	20000ce0 	.word	0x20000ce0
 800524c:	50000800 	.word	0x50000800
 8005250:	200033cf 	.word	0x200033cf
 8005254:	200033d0 	.word	0x200033d0
 8005258:	20000ce8 	.word	0x20000ce8
 800525c:	20000485 	.word	0x20000485
 8005260:	20000a66 	.word	0x20000a66
 8005264:	20000e4a 	.word	0x20000e4a
			counter = 0;
 8005268:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <Status_Check+0x3c8>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
		HMI_Vacant_W();
 800526e:	f001 fd75 	bl	8006d5c <HMI_Vacant_W>
		nbtime_counter++;
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <Status_Check+0x3cc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	4b03      	ldr	r3, [pc, #12]	@ (8005288 <Status_Check+0x3cc>)
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	46c0      	nop			@ (mov r8, r8)
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	20000cdc 	.word	0x20000cdc
 8005288:	20000e4c 	.word	0x20000e4c

0800528c <Status_Change>:

void Status_Change(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
	if (RxFlag)
 8005290:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <Status_Change+0x28>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <Status_Change+0x20>
	{
		if(RxBuff[8] == 0x01)
 8005298:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <Status_Change+0x2c>)
 800529a:	7a1b      	ldrb	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <Status_Change+0x1a>
		{
			Drv_state_flag = TRUE;
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <Status_Change+0x30>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
		}
		RxFlag = FALSE;
 80052a6:	4b03      	ldr	r3, [pc, #12]	@ (80052b4 <Status_Change+0x28>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
	}
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	20000a30 	.word	0x20000a30
 80052b8:	20000a34 	.word	0x20000a34
 80052bc:	20000a6d 	.word	0x20000a6d

080052c0 <HMI_Hired_W>:

void HMI_Hired_W(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_On, 8, 0x10);
 80052c6:	49d6      	ldr	r1, [pc, #856]	@ (8005620 <HMI_Hired_W+0x360>)
 80052c8:	48d6      	ldr	r0, [pc, #856]	@ (8005624 <HMI_Hired_W+0x364>)
 80052ca:	2310      	movs	r3, #16
 80052cc:	2208      	movs	r2, #8
 80052ce:	f00d fe29 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 80052d2:	2001      	movs	r0, #1
 80052d4:	f008 fba0 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_Off, 8, 0x10);
 80052d8:	49d3      	ldr	r1, [pc, #844]	@ (8005628 <HMI_Hired_W+0x368>)
 80052da:	48d2      	ldr	r0, [pc, #840]	@ (8005624 <HMI_Hired_W+0x364>)
 80052dc:	2310      	movs	r3, #16
 80052de:	2208      	movs	r2, #8
 80052e0:	f00d fe20 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f008 fb97 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 80052ea:	49d0      	ldr	r1, [pc, #832]	@ (800562c <HMI_Hired_W+0x36c>)
 80052ec:	48cd      	ldr	r0, [pc, #820]	@ (8005624 <HMI_Hired_W+0x364>)
 80052ee:	2310      	movs	r3, #16
 80052f0:	2208      	movs	r2, #8
 80052f2:	f00d fe17 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 80052f6:	2001      	movs	r0, #1
 80052f8:	f008 fb8e 	bl	800da18 <HAL_Delay>

	Last_Final_price = 0;
 80052fc:	4bcc      	ldr	r3, [pc, #816]	@ (8005630 <HMI_Hired_W+0x370>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
	Last_Final_price_x10 = 0;
 8005302:	4bcc      	ldr	r3, [pc, #816]	@ (8005634 <HMI_Hired_W+0x374>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
	ex_Addition = 0;
 8005308:	4bcb      	ldr	r3, [pc, #812]	@ (8005638 <HMI_Hired_W+0x378>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
	Last_Dis = 0;
 800530e:	4bcb      	ldr	r3, [pc, #812]	@ (800563c <HMI_Hired_W+0x37c>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
	Last_fare_d_x100 = 0;
 8005314:	4bca      	ldr	r3, [pc, #808]	@ (8005640 <HMI_Hired_W+0x380>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);
 800531a:	49ca      	ldr	r1, [pc, #808]	@ (8005644 <HMI_Hired_W+0x384>)
 800531c:	48c1      	ldr	r0, [pc, #772]	@ (8005624 <HMI_Hired_W+0x364>)
 800531e:	2310      	movs	r3, #16
 8005320:	2208      	movs	r2, #8
 8005322:	f00d fdff 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,CLR_extra_btn,8,0x0E);
 8005326:	49c8      	ldr	r1, [pc, #800]	@ (8005648 <HMI_Hired_W+0x388>)
 8005328:	48be      	ldr	r0, [pc, #760]	@ (8005624 <HMI_Hired_W+0x364>)
 800532a:	230e      	movs	r3, #14
 800532c:	2208      	movs	r2, #8
 800532e:	f00d fdf9 	bl	8012f24 <HAL_UART_Transmit>

	Fare_Calculation();
 8005332:	f004 ff7b 	bl	800a22c <Fare_Calculation>

	fare_d_x10 = (int)(fare_d * 10 + 0.5);
 8005336:	4bc5      	ldr	r3, [pc, #788]	@ (800564c <HMI_Hired_W+0x38c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	49c5      	ldr	r1, [pc, #788]	@ (8005650 <HMI_Hired_W+0x390>)
 800533c:	1c18      	adds	r0, r3, #0
 800533e:	f7fb fd73 	bl	8000e28 <__aeabi_fmul>
 8005342:	1c03      	adds	r3, r0, #0
 8005344:	1c18      	adds	r0, r3, #0
 8005346:	f7fd ff99 	bl	800327c <__aeabi_f2d>
 800534a:	2200      	movs	r2, #0
 800534c:	4bc1      	ldr	r3, [pc, #772]	@ (8005654 <HMI_Hired_W+0x394>)
 800534e:	f7fc f8fb 	bl	8001548 <__aeabi_dadd>
 8005352:	0002      	movs	r2, r0
 8005354:	000b      	movs	r3, r1
 8005356:	0010      	movs	r0, r2
 8005358:	0019      	movs	r1, r3
 800535a:	f7fd ff01 	bl	8003160 <__aeabi_d2iz>
 800535e:	0003      	movs	r3, r0
 8005360:	001a      	movs	r2, r3
 8005362:	4bbd      	ldr	r3, [pc, #756]	@ (8005658 <HMI_Hired_W+0x398>)
 8005364:	601a      	str	r2, [r3, #0]
	//display limit - total fare 9999.9, sub 999.0, distance 999.9, duration 99:59:59
	if(fare_d_x10 >= 99999)
 8005366:	4bbc      	ldr	r3, [pc, #752]	@ (8005658 <HMI_Hired_W+0x398>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4abc      	ldr	r2, [pc, #752]	@ (800565c <HMI_Hired_W+0x39c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d902      	bls.n	8005376 <HMI_Hired_W+0xb6>
	{
		fare_d_x10 = 99999;
 8005370:	4bb9      	ldr	r3, [pc, #740]	@ (8005658 <HMI_Hired_W+0x398>)
 8005372:	4abb      	ldr	r2, [pc, #748]	@ (8005660 <HMI_Hired_W+0x3a0>)
 8005374:	601a      	str	r2, [r3, #0]
	}
	fare_d_x100 = fare_d_x10 * 10;
 8005376:	4bb8      	ldr	r3, [pc, #736]	@ (8005658 <HMI_Hired_W+0x398>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	0013      	movs	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	189b      	adds	r3, r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	001a      	movs	r2, r3
 8005384:	4bb7      	ldr	r3, [pc, #732]	@ (8005664 <HMI_Hired_W+0x3a4>)
 8005386:	601a      	str	r2, [r3, #0]
//	Long_to_byte(fare_d_x10, temp_array);
	Long_to_byte(fare_d_x100, temp_array);
 8005388:	4bb6      	ldr	r3, [pc, #728]	@ (8005664 <HMI_Hired_W+0x3a4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	1d3a      	adds	r2, r7, #4
 800538e:	0011      	movs	r1, r2
 8005390:	0018      	movs	r0, r3
 8005392:	f002 fc5b 	bl	8007c4c <Long_to_byte>
	HMI_Command(Fee,temp_array,10);
 8005396:	1d39      	adds	r1, r7, #4
 8005398:	4bb3      	ldr	r3, [pc, #716]	@ (8005668 <HMI_Hired_W+0x3a8>)
 800539a:	220a      	movs	r2, #10
 800539c:	0018      	movs	r0, r3
 800539e:	f002 fc74 	bl	8007c8a <HMI_Command>
	//send fare_d_x100 to Fee_dup & Fee_total, no extra add on
//	HMI_Command(Fee_dup, temp_array, 10);
//	HMI_Command(Fee_total, temp_array, 10);

	extras_rd();
 80053a2:	f002 f9b9 	bl	8007718 <extras_rd>

	//distance display
	Dis = (int)(Distance*100); // + 0.5);
 80053a6:	4bb1      	ldr	r3, [pc, #708]	@ (800566c <HMI_Hired_W+0x3ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	49b1      	ldr	r1, [pc, #708]	@ (8005670 <HMI_Hired_W+0x3b0>)
 80053ac:	1c18      	adds	r0, r3, #0
 80053ae:	f7fb fd3b 	bl	8000e28 <__aeabi_fmul>
 80053b2:	1c03      	adds	r3, r0, #0
 80053b4:	1c18      	adds	r0, r3, #0
 80053b6:	f7fc f819 	bl	80013ec <__aeabi_f2iz>
 80053ba:	0003      	movs	r3, r0
 80053bc:	001a      	movs	r2, r3
 80053be:	4bad      	ldr	r3, [pc, #692]	@ (8005674 <HMI_Hired_W+0x3b4>)
 80053c0:	601a      	str	r2, [r3, #0]
	if(Dis >= 99999)
 80053c2:	4bac      	ldr	r3, [pc, #688]	@ (8005674 <HMI_Hired_W+0x3b4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4aa5      	ldr	r2, [pc, #660]	@ (800565c <HMI_Hired_W+0x39c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d902      	bls.n	80053d2 <HMI_Hired_W+0x112>
	{
		Dis = 99999;
 80053cc:	4ba9      	ldr	r3, [pc, #676]	@ (8005674 <HMI_Hired_W+0x3b4>)
 80053ce:	4aa4      	ldr	r2, [pc, #656]	@ (8005660 <HMI_Hired_W+0x3a0>)
 80053d0:	601a      	str	r2, [r3, #0]
	}
	Long_to_byte(Dis, temp_array);
 80053d2:	4ba8      	ldr	r3, [pc, #672]	@ (8005674 <HMI_Hired_W+0x3b4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1d3a      	adds	r2, r7, #4
 80053d8:	0011      	movs	r1, r2
 80053da:	0018      	movs	r0, r3
 80053dc:	f002 fc36 	bl	8007c4c <Long_to_byte>
	HMI_Command(Dis_A,temp_array,10);
 80053e0:	1d39      	adds	r1, r7, #4
 80053e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005678 <HMI_Hired_W+0x3b8>)
 80053e4:	220a      	movs	r2, #10
 80053e6:	0018      	movs	r0, r3
 80053e8:	f002 fc4f 	bl	8007c8a <HMI_Command>

	//duration display
	Dur_hms_cal();
 80053ec:	f004 fd66 	bl	8009ebc <Dur_hms_cal>

	//audio start
	if ((Flag_Audio_start==1) || (Flag_btn_changed==1))
 80053f0:	4ba2      	ldr	r3, [pc, #648]	@ (800567c <HMI_Hired_W+0x3bc>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d003      	beq.n	8005400 <HMI_Hired_W+0x140>
 80053f8:	4ba1      	ldr	r3, [pc, #644]	@ (8005680 <HMI_Hired_W+0x3c0>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d122      	bne.n	8005446 <HMI_Hired_W+0x186>
	{
		Flag_Audio_start = 0; //false; //FALSE;
 8005400:	4b9e      	ldr	r3, [pc, #632]	@ (800567c <HMI_Hired_W+0x3bc>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
		Flag_Audio_end = 1; //true; //TRUE;
 8005406:	4b9f      	ldr	r3, [pc, #636]	@ (8005684 <HMI_Hired_W+0x3c4>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
		Flag_btn_changed = 0; //false; //FALSE;
 800540c:	4b9c      	ldr	r3, [pc, #624]	@ (8005680 <HMI_Hired_W+0x3c0>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]

		switch (btn_value)
 8005412:	4b9d      	ldr	r3, [pc, #628]	@ (8005688 <HMI_Hired_W+0x3c8>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b03      	cmp	r3, #3
 8005418:	d00f      	beq.n	800543a <HMI_Hired_W+0x17a>
 800541a:	dc13      	bgt.n	8005444 <HMI_Hired_W+0x184>
 800541c:	2b01      	cmp	r3, #1
 800541e:	d002      	beq.n	8005426 <HMI_Hired_W+0x166>
 8005420:	2b02      	cmp	r3, #2
 8005422:	d005      	beq.n	8005430 <HMI_Hired_W+0x170>
			case 3:
				Voice_start(v_en_start);
				break;

			default:
				break;
 8005424:	e00e      	b.n	8005444 <HMI_Hired_W+0x184>
				Voice_start(v_can_start);
 8005426:	4b99      	ldr	r3, [pc, #612]	@ (800568c <HMI_Hired_W+0x3cc>)
 8005428:	0018      	movs	r0, r3
 800542a:	f006 f887 	bl	800b53c <Voice_start>
				break;
 800542e:	e00a      	b.n	8005446 <HMI_Hired_W+0x186>
				Voice_start(v_cn_start);
 8005430:	4b97      	ldr	r3, [pc, #604]	@ (8005690 <HMI_Hired_W+0x3d0>)
 8005432:	0018      	movs	r0, r3
 8005434:	f006 f882 	bl	800b53c <Voice_start>
				break;
 8005438:	e005      	b.n	8005446 <HMI_Hired_W+0x186>
				Voice_start(v_en_start);
 800543a:	4b96      	ldr	r3, [pc, #600]	@ (8005694 <HMI_Hired_W+0x3d4>)
 800543c:	0018      	movs	r0, r3
 800543e:	f006 f87d 	bl	800b53c <Voice_start>
				break;
 8005442:	e000      	b.n	8005446 <HMI_Hired_W+0x186>
				break;
 8005444:	46c0      	nop			@ (mov r8, r8)
		}
	}

	//record printer start time
	if(Flag_Printer_Start)
 8005446:	4b94      	ldr	r3, [pc, #592]	@ (8005698 <HMI_Hired_W+0x3d8>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02d      	beq.n	80054aa <HMI_Hired_W+0x1ea>
	{
		Flag_Printer_Start = FALSE;
 800544e:	4b92      	ldr	r3, [pc, #584]	@ (8005698 <HMI_Hired_W+0x3d8>)
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = TRUE;
 8005454:	4b91      	ldr	r3, [pc, #580]	@ (800569c <HMI_Hired_W+0x3dc>)
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]

		start[0] = hmi_rtc[14];
 800545a:	4b91      	ldr	r3, [pc, #580]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 800545c:	7b9a      	ldrb	r2, [r3, #14]
 800545e:	4b91      	ldr	r3, [pc, #580]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005460:	701a      	strb	r2, [r3, #0]
		start[1] = hmi_rtc[15];
 8005462:	4b8f      	ldr	r3, [pc, #572]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 8005464:	7bda      	ldrb	r2, [r3, #15]
 8005466:	4b8f      	ldr	r3, [pc, #572]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005468:	705a      	strb	r2, [r3, #1]
		start[3] = hmi_rtc[11];
 800546a:	4b8d      	ldr	r3, [pc, #564]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 800546c:	7ada      	ldrb	r2, [r3, #11]
 800546e:	4b8d      	ldr	r3, [pc, #564]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005470:	70da      	strb	r2, [r3, #3]
		start[4] = hmi_rtc[12];
 8005472:	4b8b      	ldr	r3, [pc, #556]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 8005474:	7b1a      	ldrb	r2, [r3, #12]
 8005476:	4b8b      	ldr	r3, [pc, #556]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005478:	711a      	strb	r2, [r3, #4]
		start[6] = hmi_rtc[8];
 800547a:	4b89      	ldr	r3, [pc, #548]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 800547c:	7a1a      	ldrb	r2, [r3, #8]
 800547e:	4b89      	ldr	r3, [pc, #548]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005480:	719a      	strb	r2, [r3, #6]
		start[7] = hmi_rtc[9];
 8005482:	4b87      	ldr	r3, [pc, #540]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 8005484:	7a5a      	ldrb	r2, [r3, #9]
 8005486:	4b87      	ldr	r3, [pc, #540]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005488:	71da      	strb	r2, [r3, #7]
		start[9] = hmi_rtc[17];
 800548a:	4b85      	ldr	r3, [pc, #532]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 800548c:	7c5a      	ldrb	r2, [r3, #17]
 800548e:	4b85      	ldr	r3, [pc, #532]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005490:	725a      	strb	r2, [r3, #9]
		start[10] = hmi_rtc[18];
 8005492:	4b83      	ldr	r3, [pc, #524]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 8005494:	7c9a      	ldrb	r2, [r3, #18]
 8005496:	4b83      	ldr	r3, [pc, #524]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 8005498:	729a      	strb	r2, [r3, #10]
		start[12] = hmi_rtc[20];
 800549a:	4b81      	ldr	r3, [pc, #516]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 800549c:	7d1a      	ldrb	r2, [r3, #20]
 800549e:	4b81      	ldr	r3, [pc, #516]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 80054a0:	731a      	strb	r2, [r3, #12]
		start[13] = hmi_rtc[21];
 80054a2:	4b7f      	ldr	r3, [pc, #508]	@ (80056a0 <HMI_Hired_W+0x3e0>)
 80054a4:	7d5a      	ldrb	r2, [r3, #21]
 80054a6:	4b7f      	ldr	r3, [pc, #508]	@ (80056a4 <HMI_Hired_W+0x3e4>)
 80054a8:	735a      	strb	r2, [r3, #13]
	}

	//transfer pick-up time (transfer only one time, Flag_Tbox_Start changed in S_to_V status)
	if(Flag_Tbox_Start)
 80054aa:	4b7f      	ldr	r3, [pc, #508]	@ (80056a8 <HMI_Hired_W+0x3e8>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d100      	bne.n	80054b4 <HMI_Hired_W+0x1f4>
 80054b2:	e178      	b.n	80057a6 <HMI_Hired_W+0x4e6>
	{
		Flag_Tbox_Start = FALSE;
 80054b4:	4b7c      	ldr	r3, [pc, #496]	@ (80056a8 <HMI_Hired_W+0x3e8>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = TRUE;
 80054ba:	4b7c      	ldr	r3, [pc, #496]	@ (80056ac <HMI_Hired_W+0x3ec>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
		tbox_start();
 80054c0:	f002 fce4 	bl	8007e8c <tbox_start>
		flag_count = 1;
 80054c4:	4b7a      	ldr	r3, [pc, #488]	@ (80056b0 <HMI_Hired_W+0x3f0>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
		E_read();
 80054ca:	f005 fb7d 	bl	800abc8 <E_read>
		//non business time
		nbtime_d = ((nbtime_counter / 60.0)* 1000) / 10; //changed
 80054ce:	4b79      	ldr	r3, [pc, #484]	@ (80056b4 <HMI_Hired_W+0x3f4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7fd feae 	bl	8003234 <__aeabi_ui2d>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b77      	ldr	r3, [pc, #476]	@ (80056b8 <HMI_Hired_W+0x3f8>)
 80054dc:	f7fc fb98 	bl	8001c10 <__aeabi_ddiv>
 80054e0:	0002      	movs	r2, r0
 80054e2:	000b      	movs	r3, r1
 80054e4:	0010      	movs	r0, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	2200      	movs	r2, #0
 80054ea:	4b74      	ldr	r3, [pc, #464]	@ (80056bc <HMI_Hired_W+0x3fc>)
 80054ec:	f7fc ffd4 	bl	8002498 <__aeabi_dmul>
 80054f0:	0002      	movs	r2, r0
 80054f2:	000b      	movs	r3, r1
 80054f4:	0010      	movs	r0, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b71      	ldr	r3, [pc, #452]	@ (80056c0 <HMI_Hired_W+0x400>)
 80054fc:	f7fc fb88 	bl	8001c10 <__aeabi_ddiv>
 8005500:	0002      	movs	r2, r0
 8005502:	000b      	movs	r3, r1
 8005504:	0010      	movs	r0, r2
 8005506:	0019      	movs	r1, r3
 8005508:	f7fb f834 	bl	8000574 <__aeabi_d2uiz>
 800550c:	0002      	movs	r2, r0
 800550e:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <HMI_Hired_W+0x404>)
 8005510:	601a      	str	r2, [r3, #0]
		nbtime[7] = (nbtime_d /1 % 10) + 0x30;
 8005512:	4b6c      	ldr	r3, [pc, #432]	@ (80056c4 <HMI_Hired_W+0x404>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	210a      	movs	r1, #10
 8005518:	0018      	movs	r0, r3
 800551a:	f7fa fe8b 	bl	8000234 <__aeabi_uidivmod>
 800551e:	000b      	movs	r3, r1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	3330      	adds	r3, #48	@ 0x30
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4b68      	ldr	r3, [pc, #416]	@ (80056c8 <HMI_Hired_W+0x408>)
 8005528:	71da      	strb	r2, [r3, #7]
		nbtime[6] = (nbtime_d /10 % 10) + 0x30;
 800552a:	4b66      	ldr	r3, [pc, #408]	@ (80056c4 <HMI_Hired_W+0x404>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	210a      	movs	r1, #10
 8005530:	0018      	movs	r0, r3
 8005532:	f7fa fdf9 	bl	8000128 <__udivsi3>
 8005536:	0003      	movs	r3, r0
 8005538:	210a      	movs	r1, #10
 800553a:	0018      	movs	r0, r3
 800553c:	f7fa fe7a 	bl	8000234 <__aeabi_uidivmod>
 8005540:	000b      	movs	r3, r1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3330      	adds	r3, #48	@ 0x30
 8005546:	b2da      	uxtb	r2, r3
 8005548:	4b5f      	ldr	r3, [pc, #380]	@ (80056c8 <HMI_Hired_W+0x408>)
 800554a:	719a      	strb	r2, [r3, #6]
		nbtime[5] = (nbtime_d /100 % 10) + 0x30;
 800554c:	4b5d      	ldr	r3, [pc, #372]	@ (80056c4 <HMI_Hired_W+0x404>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2164      	movs	r1, #100	@ 0x64
 8005552:	0018      	movs	r0, r3
 8005554:	f7fa fde8 	bl	8000128 <__udivsi3>
 8005558:	0003      	movs	r3, r0
 800555a:	210a      	movs	r1, #10
 800555c:	0018      	movs	r0, r3
 800555e:	f7fa fe69 	bl	8000234 <__aeabi_uidivmod>
 8005562:	000b      	movs	r3, r1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	3330      	adds	r3, #48	@ 0x30
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b57      	ldr	r3, [pc, #348]	@ (80056c8 <HMI_Hired_W+0x408>)
 800556c:	715a      	strb	r2, [r3, #5]
		nbtime[4] = (nbtime_d /1000 % 10) + 0x30;
 800556e:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <HMI_Hired_W+0x404>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	22fa      	movs	r2, #250	@ 0xfa
 8005574:	0091      	lsls	r1, r2, #2
 8005576:	0018      	movs	r0, r3
 8005578:	f7fa fdd6 	bl	8000128 <__udivsi3>
 800557c:	0003      	movs	r3, r0
 800557e:	210a      	movs	r1, #10
 8005580:	0018      	movs	r0, r3
 8005582:	f7fa fe57 	bl	8000234 <__aeabi_uidivmod>
 8005586:	000b      	movs	r3, r1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	3330      	adds	r3, #48	@ 0x30
 800558c:	b2da      	uxtb	r2, r3
 800558e:	4b4e      	ldr	r3, [pc, #312]	@ (80056c8 <HMI_Hired_W+0x408>)
 8005590:	711a      	strb	r2, [r3, #4]
		nbtime[3] = (nbtime_d /10000 % 10) + 0x30;
 8005592:	4b4c      	ldr	r3, [pc, #304]	@ (80056c4 <HMI_Hired_W+0x404>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	494d      	ldr	r1, [pc, #308]	@ (80056cc <HMI_Hired_W+0x40c>)
 8005598:	0018      	movs	r0, r3
 800559a:	f7fa fdc5 	bl	8000128 <__udivsi3>
 800559e:	0003      	movs	r3, r0
 80055a0:	210a      	movs	r1, #10
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7fa fe46 	bl	8000234 <__aeabi_uidivmod>
 80055a8:	000b      	movs	r3, r1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3330      	adds	r3, #48	@ 0x30
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <HMI_Hired_W+0x408>)
 80055b2:	70da      	strb	r2, [r3, #3]
		nbtime[2] = (nbtime_d /10000 % 10) + 0x30;
 80055b4:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <HMI_Hired_W+0x404>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4944      	ldr	r1, [pc, #272]	@ (80056cc <HMI_Hired_W+0x40c>)
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7fa fdb4 	bl	8000128 <__udivsi3>
 80055c0:	0003      	movs	r3, r0
 80055c2:	210a      	movs	r1, #10
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7fa fe35 	bl	8000234 <__aeabi_uidivmod>
 80055ca:	000b      	movs	r3, r1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	3330      	adds	r3, #48	@ 0x30
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <HMI_Hired_W+0x408>)
 80055d4:	709a      	strb	r2, [r3, #2]

		if (nbtime[2] == 0x30)
 80055d6:	4b3c      	ldr	r3, [pc, #240]	@ (80056c8 <HMI_Hired_W+0x408>)
 80055d8:	789b      	ldrb	r3, [r3, #2]
 80055da:	2b30      	cmp	r3, #48	@ 0x30
 80055dc:	d104      	bne.n	80055e8 <HMI_Hired_W+0x328>
			SD_buffer[82] = 0x20;
 80055de:	4b3c      	ldr	r3, [pc, #240]	@ (80056d0 <HMI_Hired_W+0x410>)
 80055e0:	2252      	movs	r2, #82	@ 0x52
 80055e2:	2120      	movs	r1, #32
 80055e4:	5499      	strb	r1, [r3, r2]
 80055e6:	e004      	b.n	80055f2 <HMI_Hired_W+0x332>
		else
			SD_buffer[82] = nbtime[2];
 80055e8:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <HMI_Hired_W+0x408>)
 80055ea:	7899      	ldrb	r1, [r3, #2]
 80055ec:	4b38      	ldr	r3, [pc, #224]	@ (80056d0 <HMI_Hired_W+0x410>)
 80055ee:	2252      	movs	r2, #82	@ 0x52
 80055f0:	5499      	strb	r1, [r3, r2]
		if (nbtime[3] == 0x30)
 80055f2:	4b35      	ldr	r3, [pc, #212]	@ (80056c8 <HMI_Hired_W+0x408>)
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	2b30      	cmp	r3, #48	@ 0x30
 80055f8:	d104      	bne.n	8005604 <HMI_Hired_W+0x344>
			SD_buffer[83] = 0x20;
 80055fa:	4b35      	ldr	r3, [pc, #212]	@ (80056d0 <HMI_Hired_W+0x410>)
 80055fc:	2253      	movs	r2, #83	@ 0x53
 80055fe:	2120      	movs	r1, #32
 8005600:	5499      	strb	r1, [r3, r2]
 8005602:	e004      	b.n	800560e <HMI_Hired_W+0x34e>
		else
			SD_buffer[83] = nbtime[3];
 8005604:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <HMI_Hired_W+0x408>)
 8005606:	78d9      	ldrb	r1, [r3, #3]
 8005608:	4b31      	ldr	r3, [pc, #196]	@ (80056d0 <HMI_Hired_W+0x410>)
 800560a:	2253      	movs	r2, #83	@ 0x53
 800560c:	5499      	strb	r1, [r3, r2]
		if (nbtime[4] == 0x30)
 800560e:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <HMI_Hired_W+0x408>)
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	2b30      	cmp	r3, #48	@ 0x30
 8005614:	d15e      	bne.n	80056d4 <HMI_Hired_W+0x414>
			SD_buffer[84] = 0x20;
 8005616:	4b2e      	ldr	r3, [pc, #184]	@ (80056d0 <HMI_Hired_W+0x410>)
 8005618:	2254      	movs	r2, #84	@ 0x54
 800561a:	2120      	movs	r1, #32
 800561c:	5499      	strb	r1, [r3, r2]
 800561e:	e05e      	b.n	80056de <HMI_Hired_W+0x41e>
 8005620:	20000004 	.word	0x20000004
 8005624:	2000064c 	.word	0x2000064c
 8005628:	2000002c 	.word	0x2000002c
 800562c:	2000001c 	.word	0x2000001c
 8005630:	20000a44 	.word	0x20000a44
 8005634:	20000a48 	.word	0x20000a48
 8005638:	20000a4c 	.word	0x20000a4c
 800563c:	20000a58 	.word	0x20000a58
 8005640:	20000d1c 	.word	0x20000d1c
 8005644:	20000044 	.word	0x20000044
 8005648:	20000054 	.word	0x20000054
 800564c:	20000d0c 	.word	0x20000d0c
 8005650:	41200000 	.word	0x41200000
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	20000d14 	.word	0x20000d14
 800565c:	0001869e 	.word	0x0001869e
 8005660:	0001869f 	.word	0x0001869f
 8005664:	20000d18 	.word	0x20000d18
 8005668:	08019514 	.word	0x08019514
 800566c:	20000cd4 	.word	0x20000cd4
 8005670:	42c80000 	.word	0x42c80000
 8005674:	20000a54 	.word	0x20000a54
 8005678:	08019574 	.word	0x08019574
 800567c:	20000484 	.word	0x20000484
 8005680:	200033cb 	.word	0x200033cb
 8005684:	200033ca 	.word	0x200033ca
 8005688:	200033cc 	.word	0x200033cc
 800568c:	200003e8 	.word	0x200003e8
 8005690:	200003fc 	.word	0x200003fc
 8005694:	20000410 	.word	0x20000410
 8005698:	20000229 	.word	0x20000229
 800569c:	20000b14 	.word	0x20000b14
 80056a0:	2000007c 	.word	0x2000007c
 80056a4:	200001ac 	.word	0x200001ac
 80056a8:	2000022b 	.word	0x2000022b
 80056ac:	20000b30 	.word	0x20000b30
 80056b0:	20000e48 	.word	0x20000e48
 80056b4:	20000e4c 	.word	0x20000e4c
 80056b8:	404e0000 	.word	0x404e0000
 80056bc:	408f4000 	.word	0x408f4000
 80056c0:	40240000 	.word	0x40240000
 80056c4:	20000e40 	.word	0x20000e40
 80056c8:	20000ea0 	.word	0x20000ea0
 80056cc:	00002710 	.word	0x00002710
 80056d0:	20003330 	.word	0x20003330
		else
			SD_buffer[84] = nbtime[4];
 80056d4:	4b3e      	ldr	r3, [pc, #248]	@ (80057d0 <HMI_Hired_W+0x510>)
 80056d6:	7919      	ldrb	r1, [r3, #4]
 80056d8:	4b3e      	ldr	r3, [pc, #248]	@ (80057d4 <HMI_Hired_W+0x514>)
 80056da:	2254      	movs	r2, #84	@ 0x54
 80056dc:	5499      	strb	r1, [r3, r2]

		SD_buffer[85] = nbtime[5];
 80056de:	4b3c      	ldr	r3, [pc, #240]	@ (80057d0 <HMI_Hired_W+0x510>)
 80056e0:	7959      	ldrb	r1, [r3, #5]
 80056e2:	4b3c      	ldr	r3, [pc, #240]	@ (80057d4 <HMI_Hired_W+0x514>)
 80056e4:	2255      	movs	r2, #85	@ 0x55
 80056e6:	5499      	strb	r1, [r3, r2]
		SD_buffer[86] = 0x2E;
 80056e8:	4b3a      	ldr	r3, [pc, #232]	@ (80057d4 <HMI_Hired_W+0x514>)
 80056ea:	2256      	movs	r2, #86	@ 0x56
 80056ec:	212e      	movs	r1, #46	@ 0x2e
 80056ee:	5499      	strb	r1, [r3, r2]
		SD_buffer[87] = nbtime[6];
 80056f0:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HMI_Hired_W+0x510>)
 80056f2:	7999      	ldrb	r1, [r3, #6]
 80056f4:	4b37      	ldr	r3, [pc, #220]	@ (80057d4 <HMI_Hired_W+0x514>)
 80056f6:	2257      	movs	r2, #87	@ 0x57
 80056f8:	5499      	strb	r1, [r3, r2]
		SD_buffer[88] = nbtime[7];
 80056fa:	4b35      	ldr	r3, [pc, #212]	@ (80057d0 <HMI_Hired_W+0x510>)
 80056fc:	79d9      	ldrb	r1, [r3, #7]
 80056fe:	4b35      	ldr	r3, [pc, #212]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005700:	2258      	movs	r2, #88	@ 0x58
 8005702:	5499      	strb	r1, [r3, r2]
		SD_buffer[89] = 0x20;
 8005704:	4b33      	ldr	r3, [pc, #204]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005706:	2259      	movs	r2, #89	@ 0x59
 8005708:	2120      	movs	r1, #32
 800570a:	5499      	strb	r1, [r3, r2]
		nbtime_counter = 0;
 800570c:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HMI_Hired_W+0x518>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
		//start date time
		SD_buffer[14] = 0x32;
 8005712:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005714:	2232      	movs	r2, #50	@ 0x32
 8005716:	739a      	strb	r2, [r3, #14]
		SD_buffer[15] = 0x30;
 8005718:	4b2e      	ldr	r3, [pc, #184]	@ (80057d4 <HMI_Hired_W+0x514>)
 800571a:	2230      	movs	r2, #48	@ 0x30
 800571c:	73da      	strb	r2, [r3, #15]
		SD_buffer[16] = hmi_rtc[8];
 800571e:	4b2f      	ldr	r3, [pc, #188]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005720:	7a1a      	ldrb	r2, [r3, #8]
 8005722:	4b2c      	ldr	r3, [pc, #176]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005724:	741a      	strb	r2, [r3, #16]
		SD_buffer[17] = hmi_rtc[9];
 8005726:	4b2d      	ldr	r3, [pc, #180]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005728:	7a5a      	ldrb	r2, [r3, #9]
 800572a:	4b2a      	ldr	r3, [pc, #168]	@ (80057d4 <HMI_Hired_W+0x514>)
 800572c:	745a      	strb	r2, [r3, #17]
		SD_buffer[18] = 0x2D;
 800572e:	4b29      	ldr	r3, [pc, #164]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005730:	222d      	movs	r2, #45	@ 0x2d
 8005732:	749a      	strb	r2, [r3, #18]
		SD_buffer[19] = hmi_rtc[11];
 8005734:	4b29      	ldr	r3, [pc, #164]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005736:	7ada      	ldrb	r2, [r3, #11]
 8005738:	4b26      	ldr	r3, [pc, #152]	@ (80057d4 <HMI_Hired_W+0x514>)
 800573a:	74da      	strb	r2, [r3, #19]
		SD_buffer[20] = hmi_rtc[12];
 800573c:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <HMI_Hired_W+0x51c>)
 800573e:	7b1a      	ldrb	r2, [r3, #12]
 8005740:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005742:	751a      	strb	r2, [r3, #20]
		SD_buffer[21] = 0x2D;
 8005744:	4b23      	ldr	r3, [pc, #140]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005746:	222d      	movs	r2, #45	@ 0x2d
 8005748:	755a      	strb	r2, [r3, #21]
		SD_buffer[22] = hmi_rtc[14];
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HMI_Hired_W+0x51c>)
 800574c:	7b9a      	ldrb	r2, [r3, #14]
 800574e:	4b21      	ldr	r3, [pc, #132]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005750:	759a      	strb	r2, [r3, #22]
		SD_buffer[23] = hmi_rtc[15];
 8005752:	4b22      	ldr	r3, [pc, #136]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005754:	7bda      	ldrb	r2, [r3, #15]
 8005756:	4b1f      	ldr	r3, [pc, #124]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005758:	75da      	strb	r2, [r3, #23]
		SD_buffer[24] = 0x20;
 800575a:	4b1e      	ldr	r3, [pc, #120]	@ (80057d4 <HMI_Hired_W+0x514>)
 800575c:	2220      	movs	r2, #32
 800575e:	761a      	strb	r2, [r3, #24]

		SD_buffer[25] = hmi_rtc[17];
 8005760:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005762:	7c5a      	ldrb	r2, [r3, #17]
 8005764:	4b1b      	ldr	r3, [pc, #108]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005766:	765a      	strb	r2, [r3, #25]
		SD_buffer[26] = hmi_rtc[18];
 8005768:	4b1c      	ldr	r3, [pc, #112]	@ (80057dc <HMI_Hired_W+0x51c>)
 800576a:	7c9a      	ldrb	r2, [r3, #18]
 800576c:	4b19      	ldr	r3, [pc, #100]	@ (80057d4 <HMI_Hired_W+0x514>)
 800576e:	769a      	strb	r2, [r3, #26]
		SD_buffer[27] = 0x3A;
 8005770:	4b18      	ldr	r3, [pc, #96]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005772:	223a      	movs	r2, #58	@ 0x3a
 8005774:	76da      	strb	r2, [r3, #27]
		SD_buffer[28] = hmi_rtc[20];
 8005776:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005778:	7d1a      	ldrb	r2, [r3, #20]
 800577a:	4b16      	ldr	r3, [pc, #88]	@ (80057d4 <HMI_Hired_W+0x514>)
 800577c:	771a      	strb	r2, [r3, #28]
		SD_buffer[29] = hmi_rtc[21];
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005780:	7d5a      	ldrb	r2, [r3, #21]
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005784:	775a      	strb	r2, [r3, #29]
		SD_buffer[30] = 0x3A;
 8005786:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005788:	223a      	movs	r2, #58	@ 0x3a
 800578a:	779a      	strb	r2, [r3, #30]
		SD_buffer[31] = hmi_rtc[23];
 800578c:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <HMI_Hired_W+0x51c>)
 800578e:	7dda      	ldrb	r2, [r3, #23]
 8005790:	4b10      	ldr	r3, [pc, #64]	@ (80057d4 <HMI_Hired_W+0x514>)
 8005792:	77da      	strb	r2, [r3, #31]
		SD_buffer[32] = hmi_rtc[24];
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <HMI_Hired_W+0x51c>)
 8005796:	7e19      	ldrb	r1, [r3, #24]
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HMI_Hired_W+0x514>)
 800579a:	2220      	movs	r2, #32
 800579c:	5499      	strb	r1, [r3, r2]
		SD_buffer[33] = 0x20;
 800579e:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <HMI_Hired_W+0x514>)
 80057a0:	2221      	movs	r2, #33	@ 0x21
 80057a2:	2120      	movs	r1, #32
 80057a4:	5499      	strb	r1, [r3, r2]
	}
	Flag_Control_Down();
 80057a6:	f005 f8bd 	bl	800a924 <Flag_Control_Down>
	flag_sp = 0;
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <HMI_Hired_W+0x520>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
	flag_vs = 1;
 80057b0:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <HMI_Hired_W+0x524>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
	Flag_End_Record = TRUE;
 80057b6:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <HMI_Hired_W+0x528>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
	flag_vs_first = 0;
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <HMI_Hired_W+0x52c>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
	cnt = 0;
 80057c2:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HMI_Hired_W+0x530>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
}
 80057c8:	46c0      	nop			@ (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b002      	add	sp, #8
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000ea0 	.word	0x20000ea0
 80057d4:	20003330 	.word	0x20003330
 80057d8:	20000e4c 	.word	0x20000e4c
 80057dc:	2000007c 	.word	0x2000007c
 80057e0:	20000485 	.word	0x20000485
 80057e4:	20000b16 	.word	0x20000b16
 80057e8:	2000022a 	.word	0x2000022a
 80057ec:	20000b17 	.word	0x20000b17
 80057f0:	20000ce8 	.word	0x20000ce8

080057f4 <HMI_Stop_W>:

void HMI_Stop_W(void)
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b0a1      	sub	sp, #132	@ 0x84
 80057f8:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 80057fa:	49c5      	ldr	r1, [pc, #788]	@ (8005b10 <HMI_Stop_W+0x31c>)
 80057fc:	48c5      	ldr	r0, [pc, #788]	@ (8005b14 <HMI_Stop_W+0x320>)
 80057fe:	2310      	movs	r3, #16
 8005800:	2208      	movs	r2, #8
 8005802:	f00d fb8f 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005806:	2001      	movs	r0, #1
 8005808:	f008 f906 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_On, 8, 0x10);
 800580c:	49c2      	ldr	r1, [pc, #776]	@ (8005b18 <HMI_Stop_W+0x324>)
 800580e:	48c1      	ldr	r0, [pc, #772]	@ (8005b14 <HMI_Stop_W+0x320>)
 8005810:	2310      	movs	r3, #16
 8005812:	2208      	movs	r2, #8
 8005814:	f00d fb86 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005818:	2001      	movs	r0, #1
 800581a:	f008 f8fd 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_Off, 8, 0x10);
 800581e:	49bf      	ldr	r1, [pc, #764]	@ (8005b1c <HMI_Stop_W+0x328>)
 8005820:	48bc      	ldr	r0, [pc, #752]	@ (8005b14 <HMI_Stop_W+0x320>)
 8005822:	2310      	movs	r3, #16
 8005824:	2208      	movs	r2, #8
 8005826:	f00d fb7d 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 800582a:	2001      	movs	r0, #1
 800582c:	f008 f8f4 	bl	800da18 <HAL_Delay>

	Fare_Calculation();
 8005830:	f004 fcfc 	bl	800a22c <Fare_Calculation>

	fare_d_x10 = (int)(fare_d * 10 + 0.5);
 8005834:	4bba      	ldr	r3, [pc, #744]	@ (8005b20 <HMI_Stop_W+0x32c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	49ba      	ldr	r1, [pc, #744]	@ (8005b24 <HMI_Stop_W+0x330>)
 800583a:	1c18      	adds	r0, r3, #0
 800583c:	f7fb faf4 	bl	8000e28 <__aeabi_fmul>
 8005840:	1c03      	adds	r3, r0, #0
 8005842:	1c18      	adds	r0, r3, #0
 8005844:	f7fd fd1a 	bl	800327c <__aeabi_f2d>
 8005848:	2200      	movs	r2, #0
 800584a:	4bb7      	ldr	r3, [pc, #732]	@ (8005b28 <HMI_Stop_W+0x334>)
 800584c:	f7fb fe7c 	bl	8001548 <__aeabi_dadd>
 8005850:	0002      	movs	r2, r0
 8005852:	000b      	movs	r3, r1
 8005854:	0010      	movs	r0, r2
 8005856:	0019      	movs	r1, r3
 8005858:	f7fd fc82 	bl	8003160 <__aeabi_d2iz>
 800585c:	0003      	movs	r3, r0
 800585e:	001a      	movs	r2, r3
 8005860:	4bb2      	ldr	r3, [pc, #712]	@ (8005b2c <HMI_Stop_W+0x338>)
 8005862:	601a      	str	r2, [r3, #0]
	//display limit - total fare 9999.9, sub 999.0, distance 999.9, duration 99:59:59
	if(fare_d_x10 >= 99999)
 8005864:	4bb1      	ldr	r3, [pc, #708]	@ (8005b2c <HMI_Stop_W+0x338>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4ab1      	ldr	r2, [pc, #708]	@ (8005b30 <HMI_Stop_W+0x33c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d902      	bls.n	8005874 <HMI_Stop_W+0x80>
	{
		fare_d_x10 = 99999;
 800586e:	4baf      	ldr	r3, [pc, #700]	@ (8005b2c <HMI_Stop_W+0x338>)
 8005870:	4ab0      	ldr	r2, [pc, #704]	@ (8005b34 <HMI_Stop_W+0x340>)
 8005872:	601a      	str	r2, [r3, #0]
	}
	fare_d_x100 = fare_d_x10 * 10;
 8005874:	4bad      	ldr	r3, [pc, #692]	@ (8005b2c <HMI_Stop_W+0x338>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	0013      	movs	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	189b      	adds	r3, r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	001a      	movs	r2, r3
 8005882:	4bad      	ldr	r3, [pc, #692]	@ (8005b38 <HMI_Stop_W+0x344>)
 8005884:	601a      	str	r2, [r3, #0]
	Long_to_byte(fare_d_x100, temp_array);
 8005886:	4bac      	ldr	r3, [pc, #688]	@ (8005b38 <HMI_Stop_W+0x344>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2278      	movs	r2, #120	@ 0x78
 800588c:	18ba      	adds	r2, r7, r2
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f002 f9db 	bl	8007c4c <Long_to_byte>
//	{
//		HMI_Command(Fee,temp_array,10);
//		HMI_Command(Fee_dup,temp_array,10);
//	}

	Dis = (int)(Distance*100); // + 0.5);
 8005896:	4ba9      	ldr	r3, [pc, #676]	@ (8005b3c <HMI_Stop_W+0x348>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	49a9      	ldr	r1, [pc, #676]	@ (8005b40 <HMI_Stop_W+0x34c>)
 800589c:	1c18      	adds	r0, r3, #0
 800589e:	f7fb fac3 	bl	8000e28 <__aeabi_fmul>
 80058a2:	1c03      	adds	r3, r0, #0
 80058a4:	1c18      	adds	r0, r3, #0
 80058a6:	f7fb fda1 	bl	80013ec <__aeabi_f2iz>
 80058aa:	0003      	movs	r3, r0
 80058ac:	001a      	movs	r2, r3
 80058ae:	4ba5      	ldr	r3, [pc, #660]	@ (8005b44 <HMI_Stop_W+0x350>)
 80058b0:	601a      	str	r2, [r3, #0]
	if(Dis >= 99999)
 80058b2:	4ba4      	ldr	r3, [pc, #656]	@ (8005b44 <HMI_Stop_W+0x350>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a9e      	ldr	r2, [pc, #632]	@ (8005b30 <HMI_Stop_W+0x33c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d902      	bls.n	80058c2 <HMI_Stop_W+0xce>
	{
		Dis = 99999;
 80058bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005b44 <HMI_Stop_W+0x350>)
 80058be:	4a9d      	ldr	r2, [pc, #628]	@ (8005b34 <HMI_Stop_W+0x340>)
 80058c0:	601a      	str	r2, [r3, #0]
	}
	Long_to_byte(Dis, temp_array);
 80058c2:	4ba0      	ldr	r3, [pc, #640]	@ (8005b44 <HMI_Stop_W+0x350>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2478      	movs	r4, #120	@ 0x78
 80058c8:	193a      	adds	r2, r7, r4
 80058ca:	0011      	movs	r1, r2
 80058cc:	0018      	movs	r0, r3
 80058ce:	f002 f9bd 	bl	8007c4c <Long_to_byte>
	HMI_Command(Dis_A,temp_array,10);
 80058d2:	1939      	adds	r1, r7, r4
 80058d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b48 <HMI_Stop_W+0x354>)
 80058d6:	220a      	movs	r2, #10
 80058d8:	0018      	movs	r0, r3
 80058da:	f002 f9d6 	bl	8007c8a <HMI_Command>

	Dur_hms_cal();
 80058de:	f004 faed 	bl	8009ebc <Dur_hms_cal>

	//record printer start time
	if(Flag_Printer_Start)
 80058e2:	4b9a      	ldr	r3, [pc, #616]	@ (8005b4c <HMI_Stop_W+0x358>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02d      	beq.n	8005946 <HMI_Stop_W+0x152>
	{
		Flag_Printer_Start = FALSE;
 80058ea:	4b98      	ldr	r3, [pc, #608]	@ (8005b4c <HMI_Stop_W+0x358>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = TRUE;
 80058f0:	4b97      	ldr	r3, [pc, #604]	@ (8005b50 <HMI_Stop_W+0x35c>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]

		start[0] = hmi_rtc[14];
 80058f6:	4b97      	ldr	r3, [pc, #604]	@ (8005b54 <HMI_Stop_W+0x360>)
 80058f8:	7b9a      	ldrb	r2, [r3, #14]
 80058fa:	4b97      	ldr	r3, [pc, #604]	@ (8005b58 <HMI_Stop_W+0x364>)
 80058fc:	701a      	strb	r2, [r3, #0]
		start[1] = hmi_rtc[15];
 80058fe:	4b95      	ldr	r3, [pc, #596]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005900:	7bda      	ldrb	r2, [r3, #15]
 8005902:	4b95      	ldr	r3, [pc, #596]	@ (8005b58 <HMI_Stop_W+0x364>)
 8005904:	705a      	strb	r2, [r3, #1]
		start[3] = hmi_rtc[11];
 8005906:	4b93      	ldr	r3, [pc, #588]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005908:	7ada      	ldrb	r2, [r3, #11]
 800590a:	4b93      	ldr	r3, [pc, #588]	@ (8005b58 <HMI_Stop_W+0x364>)
 800590c:	70da      	strb	r2, [r3, #3]
		start[4] = hmi_rtc[12];
 800590e:	4b91      	ldr	r3, [pc, #580]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005910:	7b1a      	ldrb	r2, [r3, #12]
 8005912:	4b91      	ldr	r3, [pc, #580]	@ (8005b58 <HMI_Stop_W+0x364>)
 8005914:	711a      	strb	r2, [r3, #4]
		start[6] = hmi_rtc[8];
 8005916:	4b8f      	ldr	r3, [pc, #572]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005918:	7a1a      	ldrb	r2, [r3, #8]
 800591a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b58 <HMI_Stop_W+0x364>)
 800591c:	719a      	strb	r2, [r3, #6]
		start[7] = hmi_rtc[9];
 800591e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005920:	7a5a      	ldrb	r2, [r3, #9]
 8005922:	4b8d      	ldr	r3, [pc, #564]	@ (8005b58 <HMI_Stop_W+0x364>)
 8005924:	71da      	strb	r2, [r3, #7]
		start[9] = hmi_rtc[17];
 8005926:	4b8b      	ldr	r3, [pc, #556]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005928:	7c5a      	ldrb	r2, [r3, #17]
 800592a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b58 <HMI_Stop_W+0x364>)
 800592c:	725a      	strb	r2, [r3, #9]
		start[10] = hmi_rtc[18];
 800592e:	4b89      	ldr	r3, [pc, #548]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005930:	7c9a      	ldrb	r2, [r3, #18]
 8005932:	4b89      	ldr	r3, [pc, #548]	@ (8005b58 <HMI_Stop_W+0x364>)
 8005934:	729a      	strb	r2, [r3, #10]
		start[12] = hmi_rtc[20];
 8005936:	4b87      	ldr	r3, [pc, #540]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005938:	7d1a      	ldrb	r2, [r3, #20]
 800593a:	4b87      	ldr	r3, [pc, #540]	@ (8005b58 <HMI_Stop_W+0x364>)
 800593c:	731a      	strb	r2, [r3, #12]
		start[13] = hmi_rtc[21];
 800593e:	4b85      	ldr	r3, [pc, #532]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005940:	7d5a      	ldrb	r2, [r3, #21]
 8005942:	4b85      	ldr	r3, [pc, #532]	@ (8005b58 <HMI_Stop_W+0x364>)
 8005944:	735a      	strb	r2, [r3, #13]
	}

	if(flag_vs)
 8005946:	4b85      	ldr	r3, [pc, #532]	@ (8005b5c <HMI_Stop_W+0x368>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d02a      	beq.n	80059a4 <HMI_Stop_W+0x1b0>
	{
		flag_vs = 0;
 800594e:	4b83      	ldr	r3, [pc, #524]	@ (8005b5c <HMI_Stop_W+0x368>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
		re_stop[0] = hmi_rtc[14];
 8005954:	4b7f      	ldr	r3, [pc, #508]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005956:	7b9a      	ldrb	r2, [r3, #14]
 8005958:	4b81      	ldr	r3, [pc, #516]	@ (8005b60 <HMI_Stop_W+0x36c>)
 800595a:	701a      	strb	r2, [r3, #0]
		re_stop[1] = hmi_rtc[15];
 800595c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b54 <HMI_Stop_W+0x360>)
 800595e:	7bda      	ldrb	r2, [r3, #15]
 8005960:	4b7f      	ldr	r3, [pc, #508]	@ (8005b60 <HMI_Stop_W+0x36c>)
 8005962:	705a      	strb	r2, [r3, #1]
		re_stop[3] = hmi_rtc[11];
 8005964:	4b7b      	ldr	r3, [pc, #492]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005966:	7ada      	ldrb	r2, [r3, #11]
 8005968:	4b7d      	ldr	r3, [pc, #500]	@ (8005b60 <HMI_Stop_W+0x36c>)
 800596a:	70da      	strb	r2, [r3, #3]
		re_stop[4] = hmi_rtc[12];
 800596c:	4b79      	ldr	r3, [pc, #484]	@ (8005b54 <HMI_Stop_W+0x360>)
 800596e:	7b1a      	ldrb	r2, [r3, #12]
 8005970:	4b7b      	ldr	r3, [pc, #492]	@ (8005b60 <HMI_Stop_W+0x36c>)
 8005972:	711a      	strb	r2, [r3, #4]
		re_stop[6] = hmi_rtc[8];
 8005974:	4b77      	ldr	r3, [pc, #476]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005976:	7a1a      	ldrb	r2, [r3, #8]
 8005978:	4b79      	ldr	r3, [pc, #484]	@ (8005b60 <HMI_Stop_W+0x36c>)
 800597a:	719a      	strb	r2, [r3, #6]
		re_stop[7] = hmi_rtc[9];
 800597c:	4b75      	ldr	r3, [pc, #468]	@ (8005b54 <HMI_Stop_W+0x360>)
 800597e:	7a5a      	ldrb	r2, [r3, #9]
 8005980:	4b77      	ldr	r3, [pc, #476]	@ (8005b60 <HMI_Stop_W+0x36c>)
 8005982:	71da      	strb	r2, [r3, #7]
		re_stop[9] = hmi_rtc[17];
 8005984:	4b73      	ldr	r3, [pc, #460]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005986:	7c5a      	ldrb	r2, [r3, #17]
 8005988:	4b75      	ldr	r3, [pc, #468]	@ (8005b60 <HMI_Stop_W+0x36c>)
 800598a:	725a      	strb	r2, [r3, #9]
		re_stop[10] = hmi_rtc[18];
 800598c:	4b71      	ldr	r3, [pc, #452]	@ (8005b54 <HMI_Stop_W+0x360>)
 800598e:	7c9a      	ldrb	r2, [r3, #18]
 8005990:	4b73      	ldr	r3, [pc, #460]	@ (8005b60 <HMI_Stop_W+0x36c>)
 8005992:	729a      	strb	r2, [r3, #10]
		re_stop[12] = hmi_rtc[20];
 8005994:	4b6f      	ldr	r3, [pc, #444]	@ (8005b54 <HMI_Stop_W+0x360>)
 8005996:	7d1a      	ldrb	r2, [r3, #20]
 8005998:	4b71      	ldr	r3, [pc, #452]	@ (8005b60 <HMI_Stop_W+0x36c>)
 800599a:	731a      	strb	r2, [r3, #12]
		re_stop[13] = hmi_rtc[21];
 800599c:	4b6d      	ldr	r3, [pc, #436]	@ (8005b54 <HMI_Stop_W+0x360>)
 800599e:	7d5a      	ldrb	r2, [r3, #21]
 80059a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005b60 <HMI_Stop_W+0x36c>)
 80059a2:	735a      	strb	r2, [r3, #13]
	}

	//sub read and add on, prepare receipt message
	if (!Flag_added)
 80059a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b64 <HMI_Stop_W+0x370>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HMI_Stop_W+0x1bc>
	{
		extras_rd();
 80059ac:	f001 feb4 	bl	8007718 <extras_rd>
	}

	if(Flag_Addition_Add)
 80059b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005b68 <HMI_Stop_W+0x374>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <HMI_Stop_W+0x1fa>
	{
		Final_price = fare_d_x10 + Addition;
 80059b8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b2c <HMI_Stop_W+0x338>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b6b      	ldr	r3, [pc, #428]	@ (8005b6c <HMI_Stop_W+0x378>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	18d2      	adds	r2, r2, r3
 80059c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005b70 <HMI_Stop_W+0x37c>)
 80059c4:	601a      	str	r2, [r3, #0]
		uint8_t temp_array[4];
		Final_price_x10 = Final_price * 10; //for display (4 decimal+2 digits)
 80059c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b70 <HMI_Stop_W+0x37c>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	0013      	movs	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	001a      	movs	r2, r3
 80059d4:	4b67      	ldr	r3, [pc, #412]	@ (8005b74 <HMI_Stop_W+0x380>)
 80059d6:	601a      	str	r2, [r3, #0]
		Long_to_byte(Final_price_x10,temp_array);
 80059d8:	4b66      	ldr	r3, [pc, #408]	@ (8005b74 <HMI_Stop_W+0x380>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2260      	movs	r2, #96	@ 0x60
 80059de:	18ba      	adds	r2, r7, r2
 80059e0:	0011      	movs	r1, r2
 80059e2:	0018      	movs	r0, r3
 80059e4:	f002 f932 	bl	8007c4c <Long_to_byte>
//		HMI_Command(Fee,temp_array,10);
		//send Fee (Final_price_x100) to 0x4000 for holding preview
//		HMI_Command(Fee_total,temp_array,10);
		Flag_Addition_Add = FALSE;
 80059e8:	4b5f      	ldr	r3, [pc, #380]	@ (8005b68 <HMI_Stop_W+0x374>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_Addition_F)
 80059ee:	4b62      	ldr	r3, [pc, #392]	@ (8005b78 <HMI_Stop_W+0x384>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01a      	beq.n	8005a2c <HMI_Stop_W+0x238>
	{
		Final_price = fare_d_x10 + Addition;
 80059f6:	4b4d      	ldr	r3, [pc, #308]	@ (8005b2c <HMI_Stop_W+0x338>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b5c      	ldr	r3, [pc, #368]	@ (8005b6c <HMI_Stop_W+0x378>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	18d2      	adds	r2, r2, r3
 8005a00:	4b5b      	ldr	r3, [pc, #364]	@ (8005b70 <HMI_Stop_W+0x37c>)
 8005a02:	601a      	str	r2, [r3, #0]
		uint8_t temp_array[4];
		Final_price_x10 = Final_price * 10; //for display (4 decimal+2 digits)
 8005a04:	4b5a      	ldr	r3, [pc, #360]	@ (8005b70 <HMI_Stop_W+0x37c>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	0013      	movs	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	189b      	adds	r3, r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	001a      	movs	r2, r3
 8005a12:	4b58      	ldr	r3, [pc, #352]	@ (8005b74 <HMI_Stop_W+0x380>)
 8005a14:	601a      	str	r2, [r3, #0]
		Long_to_byte(Final_price_x10,temp_array);
 8005a16:	4b57      	ldr	r3, [pc, #348]	@ (8005b74 <HMI_Stop_W+0x380>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	225c      	movs	r2, #92	@ 0x5c
 8005a1c:	18ba      	adds	r2, r7, r2
 8005a1e:	0011      	movs	r1, r2
 8005a20:	0018      	movs	r0, r3
 8005a22:	f002 f913 	bl	8007c4c <Long_to_byte>
//		HMI_Command(Fee,temp_array,10);
		//send Fee (Final_price_x100) to 0x4000 for holding preview
//		HMI_Command(Fee_total,temp_array,10);
		Flag_Addition_F = FALSE;
 8005a26:	4b54      	ldr	r3, [pc, #336]	@ (8005b78 <HMI_Stop_W+0x384>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
	}

	//Flag_Display check:
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_extra_btn, 7, 0x0E);
 8005a2c:	4953      	ldr	r1, [pc, #332]	@ (8005b7c <HMI_Stop_W+0x388>)
 8005a2e:	4839      	ldr	r0, [pc, #228]	@ (8005b14 <HMI_Stop_W+0x320>)
 8005a30:	230e      	movs	r3, #14
 8005a32:	2207      	movs	r2, #7
 8005a34:	f00d fa76 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8005a38:	2002      	movs	r0, #2
 8005a3a:	f007 ffed 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8005a3e:	4b50      	ldr	r3, [pc, #320]	@ (8005b80 <HMI_Stop_W+0x38c>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d02b      	beq.n	8005a9e <HMI_Stop_W+0x2aa>
	{
		RxFlag = FALSE;
 8005a46:	4b4e      	ldr	r3, [pc, #312]	@ (8005b80 <HMI_Stop_W+0x38c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
		if (RxBuff[8] == 0x01 && Flag_added == TRUE)
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b84 <HMI_Stop_W+0x390>)
 8005a4e:	7a1b      	ldrb	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d110      	bne.n	8005a76 <HMI_Stop_W+0x282>
 8005a54:	4b43      	ldr	r3, [pc, #268]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10c      	bne.n	8005a76 <HMI_Stop_W+0x282>
		{
			added_wait = 0;
 8005a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
			Flag_added = FALSE;
 8005a62:	4b40      	ldr	r3, [pc, #256]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,CLR_extra_btn,8,0x0E);
 8005a68:	4948      	ldr	r1, [pc, #288]	@ (8005b8c <HMI_Stop_W+0x398>)
 8005a6a:	482a      	ldr	r0, [pc, #168]	@ (8005b14 <HMI_Stop_W+0x320>)
 8005a6c:	230e      	movs	r3, #14
 8005a6e:	2208      	movs	r2, #8
 8005a70:	f00d fa58 	bl	8012f24 <HAL_UART_Transmit>
 8005a74:	e016      	b.n	8005aa4 <HMI_Stop_W+0x2b0>
		}
		else if(RxBuff[8] == 0x01)
 8005a76:	4b43      	ldr	r3, [pc, #268]	@ (8005b84 <HMI_Stop_W+0x390>)
 8005a78:	7a1b      	ldrb	r3, [r3, #8]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d112      	bne.n	8005aa4 <HMI_Stop_W+0x2b0>
		{
			added_wait++;
 8005a7e:	4b42      	ldr	r3, [pc, #264]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b40      	ldr	r3, [pc, #256]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005a88:	701a      	strb	r2, [r3, #0]
			Flag_added = TRUE;
 8005a8a:	4b36      	ldr	r3, [pc, #216]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,CLR_extra_btn,8,0x0E);
 8005a90:	493e      	ldr	r1, [pc, #248]	@ (8005b8c <HMI_Stop_W+0x398>)
 8005a92:	4820      	ldr	r0, [pc, #128]	@ (8005b14 <HMI_Stop_W+0x320>)
 8005a94:	230e      	movs	r3, #14
 8005a96:	2208      	movs	r2, #8
 8005a98:	f00d fa44 	bl	8012f24 <HAL_UART_Transmit>
 8005a9c:	e002      	b.n	8005aa4 <HMI_Stop_W+0x2b0>
		}
	}
	else
	{
		Flag_added = FALSE;
 8005a9e:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_added)
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d075      	beq.n	8005b98 <HMI_Stop_W+0x3a4>
	{
		uint32_t add_clr = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	67fb      	str	r3, [r7, #124]	@ 0x7c

		Long_to_byte(Final_price_x10, temp_array);
 8005ab0:	4b30      	ldr	r3, [pc, #192]	@ (8005b74 <HMI_Stop_W+0x380>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2478      	movs	r4, #120	@ 0x78
 8005ab6:	193a      	adds	r2, r7, r4
 8005ab8:	0011      	movs	r1, r2
 8005aba:	0018      	movs	r0, r3
 8005abc:	f002 f8c6 	bl	8007c4c <Long_to_byte>
		HMI_Command(Fee, temp_array, 10);
 8005ac0:	1939      	adds	r1, r7, r4
 8005ac2:	4b33      	ldr	r3, [pc, #204]	@ (8005b90 <HMI_Stop_W+0x39c>)
 8005ac4:	220a      	movs	r2, #10
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f002 f8df 	bl	8007c8a <HMI_Command>

		Long_to_byte(add_clr, temp_array);
 8005acc:	193a      	adds	r2, r7, r4
 8005ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ad0:	0011      	movs	r1, r2
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f002 f8ba 	bl	8007c4c <Long_to_byte>
		HMI_Command(Add_Charge, temp_array, 10);
 8005ad8:	1939      	adds	r1, r7, r4
 8005ada:	4b2e      	ldr	r3, [pc, #184]	@ (8005b94 <HMI_Stop_W+0x3a0>)
 8005adc:	220a      	movs	r2, #10
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f002 f8d3 	bl	8007c8a <HMI_Command>

		if(added_wait != 0)
 8005ae4:	4b28      	ldr	r3, [pc, #160]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d070      	beq.n	8005bce <HMI_Stop_W+0x3da>
		{
			added_wait++;
 8005aec:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005af6:	701a      	strb	r2, [r3, #0]
			//added 10s
			if(added_wait >= 5)
 8005af8:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d966      	bls.n	8005bce <HMI_Stop_W+0x3da>
			{
				Flag_added = FALSE;
 8005b00:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <HMI_Stop_W+0x370>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
				added_wait = 0;
 8005b06:	4b20      	ldr	r3, [pc, #128]	@ (8005b88 <HMI_Stop_W+0x394>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e05f      	b.n	8005bce <HMI_Stop_W+0x3da>
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	2000064c 	.word	0x2000064c
 8005b18:	20000014 	.word	0x20000014
 8005b1c:	2000002c 	.word	0x2000002c
 8005b20:	20000d0c 	.word	0x20000d0c
 8005b24:	41200000 	.word	0x41200000
 8005b28:	3fe00000 	.word	0x3fe00000
 8005b2c:	20000d14 	.word	0x20000d14
 8005b30:	0001869e 	.word	0x0001869e
 8005b34:	0001869f 	.word	0x0001869f
 8005b38:	20000d18 	.word	0x20000d18
 8005b3c:	20000cd4 	.word	0x20000cd4
 8005b40:	42c80000 	.word	0x42c80000
 8005b44:	20000a54 	.word	0x20000a54
 8005b48:	08019574 	.word	0x08019574
 8005b4c:	20000229 	.word	0x20000229
 8005b50:	20000b14 	.word	0x20000b14
 8005b54:	2000007c 	.word	0x2000007c
 8005b58:	200001ac 	.word	0x200001ac
 8005b5c:	20000b16 	.word	0x20000b16
 8005b60:	200001cc 	.word	0x200001cc
 8005b64:	20000a52 	.word	0x20000a52
 8005b68:	20000a64 	.word	0x20000a64
 8005b6c:	20000a60 	.word	0x20000a60
 8005b70:	20000a40 	.word	0x20000a40
 8005b74:	20000b20 	.word	0x20000b20
 8005b78:	20000a65 	.word	0x20000a65
 8005b7c:	08019564 	.word	0x08019564
 8005b80:	20000a30 	.word	0x20000a30
 8005b84:	20000a34 	.word	0x20000a34
 8005b88:	20000a53 	.word	0x20000a53
 8005b8c:	20000054 	.word	0x20000054
 8005b90:	08019514 	.word	0x08019514
 8005b94:	08019520 	.word	0x08019520
			}
		}
	}
	else
	{
		Long_to_byte(fare_d_x100, temp_array);
 8005b98:	4bec      	ldr	r3, [pc, #944]	@ (8005f4c <HMI_Stop_W+0x758>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2478      	movs	r4, #120	@ 0x78
 8005b9e:	193a      	adds	r2, r7, r4
 8005ba0:	0011      	movs	r1, r2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f002 f852 	bl	8007c4c <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8005ba8:	1939      	adds	r1, r7, r4
 8005baa:	4be9      	ldr	r3, [pc, #932]	@ (8005f50 <HMI_Stop_W+0x75c>)
 8005bac:	220a      	movs	r2, #10
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f002 f86b 	bl	8007c8a <HMI_Command>

		Long_to_byte(Addition,temp_array);
 8005bb4:	4be7      	ldr	r3, [pc, #924]	@ (8005f54 <HMI_Stop_W+0x760>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	193a      	adds	r2, r7, r4
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f002 f845 	bl	8007c4c <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 8005bc2:	1939      	adds	r1, r7, r4
 8005bc4:	4be4      	ldr	r3, [pc, #912]	@ (8005f58 <HMI_Stop_W+0x764>)
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f002 f85e 	bl	8007c8a <HMI_Command>
	}

	//cpy total_km
	//123.45 - default 0.00
	total_km[13] = (Dis / 1 % 10) + 0x30;
 8005bce:	4be3      	ldr	r3, [pc, #908]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	210a      	movs	r1, #10
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fa fb2d 	bl	8000234 <__aeabi_uidivmod>
 8005bda:	000b      	movs	r3, r1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3330      	adds	r3, #48	@ 0x30
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4bdf      	ldr	r3, [pc, #892]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005be4:	735a      	strb	r2, [r3, #13]
	total_km[12] = (Dis / 10 % 10) + 0x30;
 8005be6:	4bdd      	ldr	r3, [pc, #884]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	210a      	movs	r1, #10
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7fa fa9b 	bl	8000128 <__udivsi3>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	210a      	movs	r1, #10
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fa fb1c 	bl	8000234 <__aeabi_uidivmod>
 8005bfc:	000b      	movs	r3, r1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	3330      	adds	r3, #48	@ 0x30
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	4bd6      	ldr	r3, [pc, #856]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005c06:	731a      	strb	r2, [r3, #12]
	total_km[10] = (Dis / 100 % 10) + 0x30;
 8005c08:	4bd4      	ldr	r3, [pc, #848]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2164      	movs	r1, #100	@ 0x64
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7fa fa8a 	bl	8000128 <__udivsi3>
 8005c14:	0003      	movs	r3, r0
 8005c16:	210a      	movs	r1, #10
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f7fa fb0b 	bl	8000234 <__aeabi_uidivmod>
 8005c1e:	000b      	movs	r3, r1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	3330      	adds	r3, #48	@ 0x30
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	4bce      	ldr	r3, [pc, #824]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005c28:	729a      	strb	r2, [r3, #10]

	if ((Dis / 10000 % 10) == 0 && (Dis / 1000 % 10) == 0)
 8005c2a:	4bcc      	ldr	r3, [pc, #816]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	49cd      	ldr	r1, [pc, #820]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fa fa79 	bl	8000128 <__udivsi3>
 8005c36:	0003      	movs	r3, r0
 8005c38:	210a      	movs	r1, #10
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7fa fafa 	bl	8000234 <__aeabi_uidivmod>
 8005c40:	1e0b      	subs	r3, r1, #0
 8005c42:	d114      	bne.n	8005c6e <HMI_Stop_W+0x47a>
 8005c44:	4bc5      	ldr	r3, [pc, #788]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	22fa      	movs	r2, #250	@ 0xfa
 8005c4a:	0091      	lsls	r1, r2, #2
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7fa fa6b 	bl	8000128 <__udivsi3>
 8005c52:	0003      	movs	r3, r0
 8005c54:	210a      	movs	r1, #10
 8005c56:	0018      	movs	r0, r3
 8005c58:	f7fa faec 	bl	8000234 <__aeabi_uidivmod>
 8005c5c:	1e0b      	subs	r3, r1, #0
 8005c5e:	d106      	bne.n	8005c6e <HMI_Stop_W+0x47a>
	{
		total_km[9] = 0x20;
 8005c60:	4bbf      	ldr	r3, [pc, #764]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005c62:	2220      	movs	r2, #32
 8005c64:	725a      	strb	r2, [r3, #9]
		total_km[8] = 0x20;
 8005c66:	4bbe      	ldr	r3, [pc, #760]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005c68:	2220      	movs	r2, #32
 8005c6a:	721a      	strb	r2, [r3, #8]
 8005c6c:	e045      	b.n	8005cfa <HMI_Stop_W+0x506>
	}
	else if ((Dis / 10000 % 10) == 0)
 8005c6e:	4bbb      	ldr	r3, [pc, #748]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	49bc      	ldr	r1, [pc, #752]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7fa fa57 	bl	8000128 <__udivsi3>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	210a      	movs	r1, #10
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f7fa fad8 	bl	8000234 <__aeabi_uidivmod>
 8005c84:	1e0b      	subs	r3, r1, #0
 8005c86:	d115      	bne.n	8005cb4 <HMI_Stop_W+0x4c0>
	{
		total_km[9] = (Dis / 1000 % 10) + 0x30;
 8005c88:	4bb4      	ldr	r3, [pc, #720]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	22fa      	movs	r2, #250	@ 0xfa
 8005c8e:	0091      	lsls	r1, r2, #2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f7fa fa49 	bl	8000128 <__udivsi3>
 8005c96:	0003      	movs	r3, r0
 8005c98:	210a      	movs	r1, #10
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7fa faca 	bl	8000234 <__aeabi_uidivmod>
 8005ca0:	000b      	movs	r3, r1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	3330      	adds	r3, #48	@ 0x30
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	4bad      	ldr	r3, [pc, #692]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005caa:	725a      	strb	r2, [r3, #9]
		total_km[8] = 0x20;
 8005cac:	4bac      	ldr	r3, [pc, #688]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005cae:	2220      	movs	r2, #32
 8005cb0:	721a      	strb	r2, [r3, #8]
 8005cb2:	e022      	b.n	8005cfa <HMI_Stop_W+0x506>
	}
	else
	{
		total_km[9] =  (Dis / 1000 % 10) + 0x30;
 8005cb4:	4ba9      	ldr	r3, [pc, #676]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	22fa      	movs	r2, #250	@ 0xfa
 8005cba:	0091      	lsls	r1, r2, #2
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7fa fa33 	bl	8000128 <__udivsi3>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	210a      	movs	r1, #10
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fa fab4 	bl	8000234 <__aeabi_uidivmod>
 8005ccc:	000b      	movs	r3, r1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	3330      	adds	r3, #48	@ 0x30
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4ba2      	ldr	r3, [pc, #648]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005cd6:	725a      	strb	r2, [r3, #9]
		total_km[8] =  (Dis / 10000 % 10) + 0x30;
 8005cd8:	4ba0      	ldr	r3, [pc, #640]	@ (8005f5c <HMI_Stop_W+0x768>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	49a1      	ldr	r1, [pc, #644]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fa fa22 	bl	8000128 <__udivsi3>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	210a      	movs	r1, #10
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7fa faa3 	bl	8000234 <__aeabi_uidivmod>
 8005cee:	000b      	movs	r3, r1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	3330      	adds	r3, #48	@ 0x30
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	4b9a      	ldr	r3, [pc, #616]	@ (8005f60 <HMI_Stop_W+0x76c>)
 8005cf8:	721a      	strb	r2, [r3, #8]
	}

	//cpy paid_km 9, 10, 11, 13
	//default: paid_km 123.45 (8,9,10,12,13)
	fare_km_x = (int)(fare_km*100);
 8005cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8005f68 <HMI_Stop_W+0x774>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	499b      	ldr	r1, [pc, #620]	@ (8005f6c <HMI_Stop_W+0x778>)
 8005d00:	1c18      	adds	r0, r3, #0
 8005d02:	f7fb f891 	bl	8000e28 <__aeabi_fmul>
 8005d06:	1c03      	adds	r3, r0, #0
 8005d08:	1c18      	adds	r0, r3, #0
 8005d0a:	f7fb fb6f 	bl	80013ec <__aeabi_f2iz>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	001a      	movs	r2, r3
 8005d12:	4b97      	ldr	r3, [pc, #604]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d14:	601a      	str	r2, [r3, #0]
	paid_km[13] = (fare_km_x /1 % 10) + 0x30;
 8005d16:	4b96      	ldr	r3, [pc, #600]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	210a      	movs	r1, #10
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fa fa89 	bl	8000234 <__aeabi_uidivmod>
 8005d22:	000b      	movs	r3, r1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	3330      	adds	r3, #48	@ 0x30
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	4b92      	ldr	r3, [pc, #584]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005d2c:	735a      	strb	r2, [r3, #13]
	paid_km[12] = (fare_km_x /10 % 10) + 0x30;
 8005d2e:	4b90      	ldr	r3, [pc, #576]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	210a      	movs	r1, #10
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7fa f9f7 	bl	8000128 <__udivsi3>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	210a      	movs	r1, #10
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fa fa78 	bl	8000234 <__aeabi_uidivmod>
 8005d44:	000b      	movs	r3, r1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	3330      	adds	r3, #48	@ 0x30
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b89      	ldr	r3, [pc, #548]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005d4e:	731a      	strb	r2, [r3, #12]
	paid_km[10] = (fare_km_x /100 % 10) + 0x30;
 8005d50:	4b87      	ldr	r3, [pc, #540]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2164      	movs	r1, #100	@ 0x64
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7fa f9e6 	bl	8000128 <__udivsi3>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	210a      	movs	r1, #10
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7fa fa67 	bl	8000234 <__aeabi_uidivmod>
 8005d66:	000b      	movs	r3, r1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	3330      	adds	r3, #48	@ 0x30
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b81      	ldr	r3, [pc, #516]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005d70:	729a      	strb	r2, [r3, #10]

	if((fare_km_x / 10000 % 10) == 0 && (fare_km_x / 1000 % 10) == 0)
 8005d72:	4b7f      	ldr	r3, [pc, #508]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	497b      	ldr	r1, [pc, #492]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fa f9d5 	bl	8000128 <__udivsi3>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	210a      	movs	r1, #10
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fa fa56 	bl	8000234 <__aeabi_uidivmod>
 8005d88:	1e0b      	subs	r3, r1, #0
 8005d8a:	d114      	bne.n	8005db6 <HMI_Stop_W+0x5c2>
 8005d8c:	4b78      	ldr	r3, [pc, #480]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	22fa      	movs	r2, #250	@ 0xfa
 8005d92:	0091      	lsls	r1, r2, #2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fa f9c7 	bl	8000128 <__udivsi3>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	210a      	movs	r1, #10
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f7fa fa48 	bl	8000234 <__aeabi_uidivmod>
 8005da4:	1e0b      	subs	r3, r1, #0
 8005da6:	d106      	bne.n	8005db6 <HMI_Stop_W+0x5c2>
	{
		paid_km[9] = 0x20;
 8005da8:	4b72      	ldr	r3, [pc, #456]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005daa:	2220      	movs	r2, #32
 8005dac:	725a      	strb	r2, [r3, #9]
		paid_km[8] = 0x20;
 8005dae:	4b71      	ldr	r3, [pc, #452]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005db0:	2220      	movs	r2, #32
 8005db2:	721a      	strb	r2, [r3, #8]
 8005db4:	e045      	b.n	8005e42 <HMI_Stop_W+0x64e>
	}
	else if((fare_km_x / 10000 % 10) == 0)
 8005db6:	4b6e      	ldr	r3, [pc, #440]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	496a      	ldr	r1, [pc, #424]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fa f9b3 	bl	8000128 <__udivsi3>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	210a      	movs	r1, #10
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fa fa34 	bl	8000234 <__aeabi_uidivmod>
 8005dcc:	1e0b      	subs	r3, r1, #0
 8005dce:	d115      	bne.n	8005dfc <HMI_Stop_W+0x608>
	{
		paid_km[9] =  (fare_km_x / 1000 % 10) + 0x30;
 8005dd0:	4b67      	ldr	r3, [pc, #412]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	22fa      	movs	r2, #250	@ 0xfa
 8005dd6:	0091      	lsls	r1, r2, #2
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7fa f9a5 	bl	8000128 <__udivsi3>
 8005dde:	0003      	movs	r3, r0
 8005de0:	210a      	movs	r1, #10
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7fa fa26 	bl	8000234 <__aeabi_uidivmod>
 8005de8:	000b      	movs	r3, r1
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	3330      	adds	r3, #48	@ 0x30
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b60      	ldr	r3, [pc, #384]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005df2:	725a      	strb	r2, [r3, #9]
		paid_km[8] = 0x20;
 8005df4:	4b5f      	ldr	r3, [pc, #380]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005df6:	2220      	movs	r2, #32
 8005df8:	721a      	strb	r2, [r3, #8]
 8005dfa:	e022      	b.n	8005e42 <HMI_Stop_W+0x64e>
	}
	else
	{
		paid_km[9] =  (fare_km_x / 1000 % 10) + 0x30;
 8005dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	22fa      	movs	r2, #250	@ 0xfa
 8005e02:	0091      	lsls	r1, r2, #2
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f98f 	bl	8000128 <__udivsi3>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	210a      	movs	r1, #10
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7fa fa10 	bl	8000234 <__aeabi_uidivmod>
 8005e14:	000b      	movs	r3, r1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	3330      	adds	r3, #48	@ 0x30
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	4b55      	ldr	r3, [pc, #340]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005e1e:	725a      	strb	r2, [r3, #9]
		paid_km[8] =  (fare_km_x / 10000 % 10) + 0x30;
 8005e20:	4b53      	ldr	r3, [pc, #332]	@ (8005f70 <HMI_Stop_W+0x77c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	494f      	ldr	r1, [pc, #316]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7fa f97e 	bl	8000128 <__udivsi3>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	210a      	movs	r1, #10
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7fa f9ff 	bl	8000234 <__aeabi_uidivmod>
 8005e36:	000b      	movs	r3, r1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	3330      	adds	r3, #48	@ 0x30
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f74 <HMI_Stop_W+0x780>)
 8005e40:	721a      	strb	r2, [r3, #8]
	}

	//cpy paid_min 9, 10, 11, 13
	//default: paid_min 123.45 (8,9,10,12,13)
	fare_min_x = (fare_min * 1000) / 10;
 8005e42:	4b4d      	ldr	r3, [pc, #308]	@ (8005f78 <HMI_Stop_W+0x784>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	494d      	ldr	r1, [pc, #308]	@ (8005f7c <HMI_Stop_W+0x788>)
 8005e48:	1c18      	adds	r0, r3, #0
 8005e4a:	f7fa ffed 	bl	8000e28 <__aeabi_fmul>
 8005e4e:	1c03      	adds	r3, r0, #0
 8005e50:	494b      	ldr	r1, [pc, #300]	@ (8005f80 <HMI_Stop_W+0x78c>)
 8005e52:	1c18      	adds	r0, r3, #0
 8005e54:	f7fa fe02 	bl	8000a5c <__aeabi_fdiv>
 8005e58:	1c03      	adds	r3, r0, #0
 8005e5a:	1c18      	adds	r0, r3, #0
 8005e5c:	f7fa fb72 	bl	8000544 <__aeabi_f2uiz>
 8005e60:	0002      	movs	r2, r0
 8005e62:	4b48      	ldr	r3, [pc, #288]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005e64:	601a      	str	r2, [r3, #0]
	paid_min[13] = (fare_min_x /1 % 10) + 0x30;
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	210a      	movs	r1, #10
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7fa f9e1 	bl	8000234 <__aeabi_uidivmod>
 8005e72:	000b      	movs	r3, r1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	3330      	adds	r3, #48	@ 0x30
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b43      	ldr	r3, [pc, #268]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005e7c:	735a      	strb	r2, [r3, #13]
	paid_min[12] = (fare_min_x /10 % 10) + 0x30;
 8005e7e:	4b41      	ldr	r3, [pc, #260]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	210a      	movs	r1, #10
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7fa f94f 	bl	8000128 <__udivsi3>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	210a      	movs	r1, #10
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7fa f9d0 	bl	8000234 <__aeabi_uidivmod>
 8005e94:	000b      	movs	r3, r1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3330      	adds	r3, #48	@ 0x30
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005e9e:	731a      	strb	r2, [r3, #12]
	paid_min[10] = (fare_min_x /100 % 10) + 0x30;
 8005ea0:	4b38      	ldr	r3, [pc, #224]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2164      	movs	r1, #100	@ 0x64
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fa f93e 	bl	8000128 <__udivsi3>
 8005eac:	0003      	movs	r3, r0
 8005eae:	210a      	movs	r1, #10
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fa f9bf 	bl	8000234 <__aeabi_uidivmod>
 8005eb6:	000b      	movs	r3, r1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	3330      	adds	r3, #48	@ 0x30
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	4b32      	ldr	r3, [pc, #200]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005ec0:	729a      	strb	r2, [r3, #10]

	if((fare_min_x / 10000 % 10) == 0 && (fare_min_x / 1000 % 10) == 0)
 8005ec2:	4b30      	ldr	r3, [pc, #192]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4927      	ldr	r1, [pc, #156]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7fa f92d 	bl	8000128 <__udivsi3>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7fa f9ae 	bl	8000234 <__aeabi_uidivmod>
 8005ed8:	1e0b      	subs	r3, r1, #0
 8005eda:	d114      	bne.n	8005f06 <HMI_Stop_W+0x712>
 8005edc:	4b29      	ldr	r3, [pc, #164]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	22fa      	movs	r2, #250	@ 0xfa
 8005ee2:	0091      	lsls	r1, r2, #2
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7fa f91f 	bl	8000128 <__udivsi3>
 8005eea:	0003      	movs	r3, r0
 8005eec:	210a      	movs	r1, #10
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa f9a0 	bl	8000234 <__aeabi_uidivmod>
 8005ef4:	1e0b      	subs	r3, r1, #0
 8005ef6:	d106      	bne.n	8005f06 <HMI_Stop_W+0x712>
	{
		paid_min[9] = 0x20;
 8005ef8:	4b23      	ldr	r3, [pc, #140]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005efa:	2220      	movs	r2, #32
 8005efc:	725a      	strb	r2, [r3, #9]
		paid_min[8] = 0x20;
 8005efe:	4b22      	ldr	r3, [pc, #136]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005f00:	2220      	movs	r2, #32
 8005f02:	721a      	strb	r2, [r3, #8]
 8005f04:	e065      	b.n	8005fd2 <HMI_Stop_W+0x7de>
	}
	else if((fare_min_x / 10000 % 10) == 0)
 8005f06:	4b1f      	ldr	r3, [pc, #124]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4916      	ldr	r1, [pc, #88]	@ (8005f64 <HMI_Stop_W+0x770>)
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fa f90b 	bl	8000128 <__udivsi3>
 8005f12:	0003      	movs	r3, r0
 8005f14:	210a      	movs	r1, #10
 8005f16:	0018      	movs	r0, r3
 8005f18:	f7fa f98c 	bl	8000234 <__aeabi_uidivmod>
 8005f1c:	1e0b      	subs	r3, r1, #0
 8005f1e:	d135      	bne.n	8005f8c <HMI_Stop_W+0x798>
	{
		paid_min[9] =  (fare_min_x / 1000 % 10) + 0x30;
 8005f20:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <HMI_Stop_W+0x790>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	22fa      	movs	r2, #250	@ 0xfa
 8005f26:	0091      	lsls	r1, r2, #2
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f7fa f8fd 	bl	8000128 <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	210a      	movs	r1, #10
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fa f97e 	bl	8000234 <__aeabi_uidivmod>
 8005f38:	000b      	movs	r3, r1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	3330      	adds	r3, #48	@ 0x30
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	4b11      	ldr	r3, [pc, #68]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005f42:	725a      	strb	r2, [r3, #9]
		paid_min[8] = 0x20;
 8005f44:	4b10      	ldr	r3, [pc, #64]	@ (8005f88 <HMI_Stop_W+0x794>)
 8005f46:	2220      	movs	r2, #32
 8005f48:	721a      	strb	r2, [r3, #8]
 8005f4a:	e042      	b.n	8005fd2 <HMI_Stop_W+0x7de>
 8005f4c:	20000d18 	.word	0x20000d18
 8005f50:	08019514 	.word	0x08019514
 8005f54:	20000a60 	.word	0x20000a60
 8005f58:	08019520 	.word	0x08019520
 8005f5c:	20000a54 	.word	0x20000a54
 8005f60:	200001dc 	.word	0x200001dc
 8005f64:	00002710 	.word	0x00002710
 8005f68:	20000d20 	.word	0x20000d20
 8005f6c:	42c80000 	.word	0x42c80000
 8005f70:	20000d28 	.word	0x20000d28
 8005f74:	200001ec 	.word	0x200001ec
 8005f78:	20000d24 	.word	0x20000d24
 8005f7c:	447a0000 	.word	0x447a0000
 8005f80:	41200000 	.word	0x41200000
 8005f84:	20000d2c 	.word	0x20000d2c
 8005f88:	200001fc 	.word	0x200001fc
	}
	else
	{
		paid_min[9] =  (fare_min_x / 1000 % 10) + 0x30;
 8005f8c:	4bc3      	ldr	r3, [pc, #780]	@ (800629c <HMI_Stop_W+0xaa8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22fa      	movs	r2, #250	@ 0xfa
 8005f92:	0091      	lsls	r1, r2, #2
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7fa f8c7 	bl	8000128 <__udivsi3>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	210a      	movs	r1, #10
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7fa f948 	bl	8000234 <__aeabi_uidivmod>
 8005fa4:	000b      	movs	r3, r1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	3330      	adds	r3, #48	@ 0x30
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	4bbc      	ldr	r3, [pc, #752]	@ (80062a0 <HMI_Stop_W+0xaac>)
 8005fae:	725a      	strb	r2, [r3, #9]
		paid_min[8] =  (fare_min_x / 10000 % 10) + 0x30;
 8005fb0:	4bba      	ldr	r3, [pc, #744]	@ (800629c <HMI_Stop_W+0xaa8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	49bb      	ldr	r1, [pc, #748]	@ (80062a4 <HMI_Stop_W+0xab0>)
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fa f8b6 	bl	8000128 <__udivsi3>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	210a      	movs	r1, #10
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7fa f937 	bl	8000234 <__aeabi_uidivmod>
 8005fc6:	000b      	movs	r3, r1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	3330      	adds	r3, #48	@ 0x30
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4bb4      	ldr	r3, [pc, #720]	@ (80062a0 <HMI_Stop_W+0xaac>)
 8005fd0:	721a      	strb	r2, [r3, #8]
	}

	if (Addition == 0)
 8005fd2:	4bb5      	ldr	r3, [pc, #724]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d127      	bne.n	800602a <HMI_Stop_W+0x836>
	{
		//8,9,10-HK$0.0; 11,12,13 default 0.0
		//7,8,9-HK$, 10,11,12,13-0.00, default HK$0.00
		SD_buffer[98] = 0x20;
 8005fda:	4bb4      	ldr	r3, [pc, #720]	@ (80062ac <HMI_Stop_W+0xab8>)
 8005fdc:	2262      	movs	r2, #98	@ 0x62
 8005fde:	2120      	movs	r1, #32
 8005fe0:	5499      	strb	r1, [r3, r2]
		SD_buffer[99] = 0x20;
 8005fe2:	4bb2      	ldr	r3, [pc, #712]	@ (80062ac <HMI_Stop_W+0xab8>)
 8005fe4:	2263      	movs	r2, #99	@ 0x63
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	5499      	strb	r1, [r3, r2]
		SD_buffer[100] = 0x30;
 8005fea:	4bb0      	ldr	r3, [pc, #704]	@ (80062ac <HMI_Stop_W+0xab8>)
 8005fec:	2264      	movs	r2, #100	@ 0x64
 8005fee:	2130      	movs	r1, #48	@ 0x30
 8005ff0:	5499      	strb	r1, [r3, r2]
		sub[13] = 0x30;
 8005ff2:	4baf      	ldr	r3, [pc, #700]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8005ff4:	2230      	movs	r2, #48	@ 0x30
 8005ff6:	735a      	strb	r2, [r3, #13]
		sub[12] = 0x30;
 8005ff8:	4bad      	ldr	r3, [pc, #692]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8005ffa:	2230      	movs	r2, #48	@ 0x30
 8005ffc:	731a      	strb	r2, [r3, #12]
		sub[11] = 0x2e;
 8005ffe:	4bac      	ldr	r3, [pc, #688]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006000:	222e      	movs	r2, #46	@ 0x2e
 8006002:	72da      	strb	r2, [r3, #11]
		sub[10] = 0x30;
 8006004:	4baa      	ldr	r3, [pc, #680]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006006:	2230      	movs	r2, #48	@ 0x30
 8006008:	729a      	strb	r2, [r3, #10]
		sub[9] = 0x24;
 800600a:	4ba9      	ldr	r3, [pc, #676]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800600c:	2224      	movs	r2, #36	@ 0x24
 800600e:	725a      	strb	r2, [r3, #9]
		sub[8] = 0x4b;
 8006010:	4ba7      	ldr	r3, [pc, #668]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006012:	224b      	movs	r2, #75	@ 0x4b
 8006014:	721a      	strb	r2, [r3, #8]
		sub[7] = 0x48;
 8006016:	4ba6      	ldr	r3, [pc, #664]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006018:	2248      	movs	r2, #72	@ 0x48
 800601a:	71da      	strb	r2, [r3, #7]
		sub[6] = 0x20;
 800601c:	4ba4      	ldr	r3, [pc, #656]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800601e:	2220      	movs	r2, #32
 8006020:	719a      	strb	r2, [r3, #6]
		sub[5] = 0x20;
 8006022:	4ba3      	ldr	r3, [pc, #652]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006024:	2220      	movs	r2, #32
 8006026:	715a      	strb	r2, [r3, #5]
 8006028:	e0df      	b.n	80061ea <HMI_Stop_W+0x9f6>
	}
	else
	{
		if(((Addition/10) / 100 % 10) == 0 && ((Addition/10) / 10 % 10) == 0)
 800602a:	4b9f      	ldr	r3, [pc, #636]	@ (80062a8 <HMI_Stop_W+0xab4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	22fa      	movs	r2, #250	@ 0xfa
 8006030:	0091      	lsls	r1, r2, #2
 8006032:	0018      	movs	r0, r3
 8006034:	f7fa f878 	bl	8000128 <__udivsi3>
 8006038:	0003      	movs	r3, r0
 800603a:	210a      	movs	r1, #10
 800603c:	0018      	movs	r0, r3
 800603e:	f7fa f8f9 	bl	8000234 <__aeabi_uidivmod>
 8006042:	1e0b      	subs	r3, r1, #0
 8006044:	d13a      	bne.n	80060bc <HMI_Stop_W+0x8c8>
 8006046:	4b98      	ldr	r3, [pc, #608]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2164      	movs	r1, #100	@ 0x64
 800604c:	0018      	movs	r0, r3
 800604e:	f7fa f86b 	bl	8000128 <__udivsi3>
 8006052:	0003      	movs	r3, r0
 8006054:	210a      	movs	r1, #10
 8006056:	0018      	movs	r0, r3
 8006058:	f7fa f8ec 	bl	8000234 <__aeabi_uidivmod>
 800605c:	1e0b      	subs	r3, r1, #0
 800605e:	d12d      	bne.n	80060bc <HMI_Stop_W+0x8c8>
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 8006060:	4b91      	ldr	r3, [pc, #580]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	210a      	movs	r1, #10
 8006066:	0018      	movs	r0, r3
 8006068:	f7fa f85e 	bl	8000128 <__udivsi3>
 800606c:	0003      	movs	r3, r0
 800606e:	210a      	movs	r1, #10
 8006070:	0018      	movs	r0, r3
 8006072:	f7fa f8df 	bl	8000234 <__aeabi_uidivmod>
 8006076:	000b      	movs	r3, r1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	3330      	adds	r3, #48	@ 0x30
 800607c:	b2da      	uxtb	r2, r3
 800607e:	4b8c      	ldr	r3, [pc, #560]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006080:	729a      	strb	r2, [r3, #10]
			sub[9] = 0x24;
 8006082:	4b8b      	ldr	r3, [pc, #556]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006084:	2224      	movs	r2, #36	@ 0x24
 8006086:	725a      	strb	r2, [r3, #9]
			sub[8] = 0x4b;
 8006088:	4b89      	ldr	r3, [pc, #548]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800608a:	224b      	movs	r2, #75	@ 0x4b
 800608c:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x48;
 800608e:	4b88      	ldr	r3, [pc, #544]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006090:	2248      	movs	r2, #72	@ 0x48
 8006092:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x20;
 8006094:	4b86      	ldr	r3, [pc, #536]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006096:	2220      	movs	r2, #32
 8006098:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x20;
 800609a:	4b85      	ldr	r3, [pc, #532]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800609c:	2220      	movs	r2, #32
 800609e:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = 0x20;
 80060a0:	4b82      	ldr	r3, [pc, #520]	@ (80062ac <HMI_Stop_W+0xab8>)
 80060a2:	2262      	movs	r2, #98	@ 0x62
 80060a4:	2120      	movs	r1, #32
 80060a6:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = 0x20;
 80060a8:	4b80      	ldr	r3, [pc, #512]	@ (80062ac <HMI_Stop_W+0xab8>)
 80060aa:	2263      	movs	r2, #99	@ 0x63
 80060ac:	2120      	movs	r1, #32
 80060ae:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 80060b0:	4b7f      	ldr	r3, [pc, #508]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80060b2:	7a99      	ldrb	r1, [r3, #10]
 80060b4:	4b7d      	ldr	r3, [pc, #500]	@ (80062ac <HMI_Stop_W+0xab8>)
 80060b6:	2264      	movs	r2, #100	@ 0x64
 80060b8:	5499      	strb	r1, [r3, r2]
 80060ba:	e096      	b.n	80061ea <HMI_Stop_W+0x9f6>
		}
		else if(((Addition/10) / 100 % 10) == 0)
 80060bc:	4b7a      	ldr	r3, [pc, #488]	@ (80062a8 <HMI_Stop_W+0xab4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22fa      	movs	r2, #250	@ 0xfa
 80060c2:	0091      	lsls	r1, r2, #2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fa f82f 	bl	8000128 <__udivsi3>
 80060ca:	0003      	movs	r3, r0
 80060cc:	210a      	movs	r1, #10
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fa f8b0 	bl	8000234 <__aeabi_uidivmod>
 80060d4:	1e0b      	subs	r3, r1, #0
 80060d6:	d13c      	bne.n	8006152 <HMI_Stop_W+0x95e>
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 80060d8:	4b73      	ldr	r3, [pc, #460]	@ (80062a8 <HMI_Stop_W+0xab4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	210a      	movs	r1, #10
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fa f822 	bl	8000128 <__udivsi3>
 80060e4:	0003      	movs	r3, r0
 80060e6:	210a      	movs	r1, #10
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7fa f8a3 	bl	8000234 <__aeabi_uidivmod>
 80060ee:	000b      	movs	r3, r1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	3330      	adds	r3, #48	@ 0x30
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4b6e      	ldr	r3, [pc, #440]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80060f8:	729a      	strb	r2, [r3, #10]
			sub[9]= ((Addition/10) / 10 % 10) + 0x30;
 80060fa:	4b6b      	ldr	r3, [pc, #428]	@ (80062a8 <HMI_Stop_W+0xab4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2164      	movs	r1, #100	@ 0x64
 8006100:	0018      	movs	r0, r3
 8006102:	f7fa f811 	bl	8000128 <__udivsi3>
 8006106:	0003      	movs	r3, r0
 8006108:	210a      	movs	r1, #10
 800610a:	0018      	movs	r0, r3
 800610c:	f7fa f892 	bl	8000234 <__aeabi_uidivmod>
 8006110:	000b      	movs	r3, r1
 8006112:	b2db      	uxtb	r3, r3
 8006114:	3330      	adds	r3, #48	@ 0x30
 8006116:	b2da      	uxtb	r2, r3
 8006118:	4b65      	ldr	r3, [pc, #404]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800611a:	725a      	strb	r2, [r3, #9]
			sub[8] = 0x24;
 800611c:	4b64      	ldr	r3, [pc, #400]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800611e:	2224      	movs	r2, #36	@ 0x24
 8006120:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x4b;
 8006122:	4b63      	ldr	r3, [pc, #396]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006124:	224b      	movs	r2, #75	@ 0x4b
 8006126:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x48;
 8006128:	4b61      	ldr	r3, [pc, #388]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800612a:	2248      	movs	r2, #72	@ 0x48
 800612c:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x20;
 800612e:	4b60      	ldr	r3, [pc, #384]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006130:	2220      	movs	r2, #32
 8006132:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = 0x20;
 8006134:	4b5d      	ldr	r3, [pc, #372]	@ (80062ac <HMI_Stop_W+0xab8>)
 8006136:	2262      	movs	r2, #98	@ 0x62
 8006138:	2120      	movs	r1, #32
 800613a:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = sub[9]; //sub[10];
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <HMI_Stop_W+0xabc>)
 800613e:	7a59      	ldrb	r1, [r3, #9]
 8006140:	4b5a      	ldr	r3, [pc, #360]	@ (80062ac <HMI_Stop_W+0xab8>)
 8006142:	2263      	movs	r2, #99	@ 0x63
 8006144:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 8006146:	4b5a      	ldr	r3, [pc, #360]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006148:	7a99      	ldrb	r1, [r3, #10]
 800614a:	4b58      	ldr	r3, [pc, #352]	@ (80062ac <HMI_Stop_W+0xab8>)
 800614c:	2264      	movs	r2, #100	@ 0x64
 800614e:	5499      	strb	r1, [r3, r2]
 8006150:	e04b      	b.n	80061ea <HMI_Stop_W+0x9f6>
		}
		else
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 8006152:	4b55      	ldr	r3, [pc, #340]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	210a      	movs	r1, #10
 8006158:	0018      	movs	r0, r3
 800615a:	f7f9 ffe5 	bl	8000128 <__udivsi3>
 800615e:	0003      	movs	r3, r0
 8006160:	210a      	movs	r1, #10
 8006162:	0018      	movs	r0, r3
 8006164:	f7fa f866 	bl	8000234 <__aeabi_uidivmod>
 8006168:	000b      	movs	r3, r1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3330      	adds	r3, #48	@ 0x30
 800616e:	b2da      	uxtb	r2, r3
 8006170:	4b4f      	ldr	r3, [pc, #316]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006172:	729a      	strb	r2, [r3, #10]
			sub[9] = ((Addition/10) / 10 % 10) + 0x30;
 8006174:	4b4c      	ldr	r3, [pc, #304]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2164      	movs	r1, #100	@ 0x64
 800617a:	0018      	movs	r0, r3
 800617c:	f7f9 ffd4 	bl	8000128 <__udivsi3>
 8006180:	0003      	movs	r3, r0
 8006182:	210a      	movs	r1, #10
 8006184:	0018      	movs	r0, r3
 8006186:	f7fa f855 	bl	8000234 <__aeabi_uidivmod>
 800618a:	000b      	movs	r3, r1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3330      	adds	r3, #48	@ 0x30
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HMI_Stop_W+0xabc>)
 8006194:	725a      	strb	r2, [r3, #9]
			sub[8] = ((Addition/10) / 100 % 10) + 0x30;
 8006196:	4b44      	ldr	r3, [pc, #272]	@ (80062a8 <HMI_Stop_W+0xab4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	22fa      	movs	r2, #250	@ 0xfa
 800619c:	0091      	lsls	r1, r2, #2
 800619e:	0018      	movs	r0, r3
 80061a0:	f7f9 ffc2 	bl	8000128 <__udivsi3>
 80061a4:	0003      	movs	r3, r0
 80061a6:	210a      	movs	r1, #10
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7fa f843 	bl	8000234 <__aeabi_uidivmod>
 80061ae:	000b      	movs	r3, r1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	3330      	adds	r3, #48	@ 0x30
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4b3e      	ldr	r3, [pc, #248]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061b8:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x24;
 80061ba:	4b3d      	ldr	r3, [pc, #244]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061bc:	2224      	movs	r2, #36	@ 0x24
 80061be:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x4b;
 80061c0:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061c2:	224b      	movs	r2, #75	@ 0x4b
 80061c4:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x48;
 80061c6:	4b3a      	ldr	r3, [pc, #232]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061c8:	2248      	movs	r2, #72	@ 0x48
 80061ca:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = sub[8]; //sub[9];
 80061cc:	4b38      	ldr	r3, [pc, #224]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061ce:	7a19      	ldrb	r1, [r3, #8]
 80061d0:	4b36      	ldr	r3, [pc, #216]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061d2:	2262      	movs	r2, #98	@ 0x62
 80061d4:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = sub[9]; //sub[10];
 80061d6:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061d8:	7a59      	ldrb	r1, [r3, #9]
 80061da:	4b34      	ldr	r3, [pc, #208]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061dc:	2263      	movs	r2, #99	@ 0x63
 80061de:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 80061e0:	4b33      	ldr	r3, [pc, #204]	@ (80062b0 <HMI_Stop_W+0xabc>)
 80061e2:	7a99      	ldrb	r1, [r3, #10]
 80061e4:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061e6:	2264      	movs	r2, #100	@ 0x64
 80061e8:	5499      	strb	r1, [r3, r2]
		}
	}
	SD_buffer[101] = 0x2E;
 80061ea:	4b30      	ldr	r3, [pc, #192]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061ec:	2265      	movs	r2, #101	@ 0x65
 80061ee:	212e      	movs	r1, #46	@ 0x2e
 80061f0:	5499      	strb	r1, [r3, r2]
	SD_buffer[102] = 0x30;
 80061f2:	4b2e      	ldr	r3, [pc, #184]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061f4:	2266      	movs	r2, #102	@ 0x66
 80061f6:	2130      	movs	r1, #48	@ 0x30
 80061f8:	5499      	strb	r1, [r3, r2]
	SD_buffer[103] = 0x30;
 80061fa:	4b2c      	ldr	r3, [pc, #176]	@ (80062ac <HMI_Stop_W+0xab8>)
 80061fc:	2267      	movs	r2, #103	@ 0x67
 80061fe:	2130      	movs	r1, #48	@ 0x30
 8006200:	5499      	strb	r1, [r3, r2]
	SD_buffer[104] = 0x20;
 8006202:	4b2a      	ldr	r3, [pc, #168]	@ (80062ac <HMI_Stop_W+0xab8>)
 8006204:	2268      	movs	r2, #104	@ 0x68
 8006206:	2120      	movs	r1, #32
 8006208:	5499      	strb	r1, [r3, r2]

	//cpy fare(without sub) //new add for sd_card
	if ((fare_d_x10 /10000 % 10) == 0 && (fare_d_x10 /1000 % 10) == 0)
 800620a:	4b2a      	ldr	r3, [pc, #168]	@ (80062b4 <HMI_Stop_W+0xac0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4925      	ldr	r1, [pc, #148]	@ (80062a4 <HMI_Stop_W+0xab0>)
 8006210:	0018      	movs	r0, r3
 8006212:	f7f9 ff89 	bl	8000128 <__udivsi3>
 8006216:	0003      	movs	r3, r0
 8006218:	210a      	movs	r1, #10
 800621a:	0018      	movs	r0, r3
 800621c:	f7fa f80a 	bl	8000234 <__aeabi_uidivmod>
 8006220:	1e0b      	subs	r3, r1, #0
 8006222:	d116      	bne.n	8006252 <HMI_Stop_W+0xa5e>
 8006224:	4b23      	ldr	r3, [pc, #140]	@ (80062b4 <HMI_Stop_W+0xac0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	22fa      	movs	r2, #250	@ 0xfa
 800622a:	0091      	lsls	r1, r2, #2
 800622c:	0018      	movs	r0, r3
 800622e:	f7f9 ff7b 	bl	8000128 <__udivsi3>
 8006232:	0003      	movs	r3, r0
 8006234:	210a      	movs	r1, #10
 8006236:	0018      	movs	r0, r3
 8006238:	f7f9 fffc 	bl	8000234 <__aeabi_uidivmod>
 800623c:	1e0b      	subs	r3, r1, #0
 800623e:	d108      	bne.n	8006252 <HMI_Stop_W+0xa5e>
	{
		SD_buffer[90] = 0x20;
 8006240:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <HMI_Stop_W+0xab8>)
 8006242:	225a      	movs	r2, #90	@ 0x5a
 8006244:	2120      	movs	r1, #32
 8006246:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = 0x20;
 8006248:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <HMI_Stop_W+0xab8>)
 800624a:	225b      	movs	r2, #91	@ 0x5b
 800624c:	2120      	movs	r1, #32
 800624e:	5499      	strb	r1, [r3, r2]
 8006250:	e057      	b.n	8006302 <HMI_Stop_W+0xb0e>
	}
	else if((fare_d_x10 /10000 % 10) == 0)
 8006252:	4b18      	ldr	r3, [pc, #96]	@ (80062b4 <HMI_Stop_W+0xac0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4913      	ldr	r1, [pc, #76]	@ (80062a4 <HMI_Stop_W+0xab0>)
 8006258:	0018      	movs	r0, r3
 800625a:	f7f9 ff65 	bl	8000128 <__udivsi3>
 800625e:	0003      	movs	r3, r0
 8006260:	210a      	movs	r1, #10
 8006262:	0018      	movs	r0, r3
 8006264:	f7f9 ffe6 	bl	8000234 <__aeabi_uidivmod>
 8006268:	1e0b      	subs	r3, r1, #0
 800626a:	d125      	bne.n	80062b8 <HMI_Stop_W+0xac4>
	{
		SD_buffer[90] = 0x20;
 800626c:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <HMI_Stop_W+0xab8>)
 800626e:	225a      	movs	r2, #90	@ 0x5a
 8006270:	2120      	movs	r1, #32
 8006272:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = (fare_d_x10 /1000 % 10) + 0x30;
 8006274:	4b0f      	ldr	r3, [pc, #60]	@ (80062b4 <HMI_Stop_W+0xac0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	22fa      	movs	r2, #250	@ 0xfa
 800627a:	0091      	lsls	r1, r2, #2
 800627c:	0018      	movs	r0, r3
 800627e:	f7f9 ff53 	bl	8000128 <__udivsi3>
 8006282:	0003      	movs	r3, r0
 8006284:	210a      	movs	r1, #10
 8006286:	0018      	movs	r0, r3
 8006288:	f7f9 ffd4 	bl	8000234 <__aeabi_uidivmod>
 800628c:	000b      	movs	r3, r1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	3330      	adds	r3, #48	@ 0x30
 8006292:	b2d9      	uxtb	r1, r3
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <HMI_Stop_W+0xab8>)
 8006296:	225b      	movs	r2, #91	@ 0x5b
 8006298:	5499      	strb	r1, [r3, r2]
 800629a:	e032      	b.n	8006302 <HMI_Stop_W+0xb0e>
 800629c:	20000d2c 	.word	0x20000d2c
 80062a0:	200001fc 	.word	0x200001fc
 80062a4:	00002710 	.word	0x00002710
 80062a8:	20000a60 	.word	0x20000a60
 80062ac:	20003330 	.word	0x20003330
 80062b0:	2000020c 	.word	0x2000020c
 80062b4:	20000d14 	.word	0x20000d14
	}
	else
	{
		SD_buffer[90] = (fare_d_x10 /10000 % 10) + 0x30;
 80062b8:	4bda      	ldr	r3, [pc, #872]	@ (8006624 <HMI_Stop_W+0xe30>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	49da      	ldr	r1, [pc, #872]	@ (8006628 <HMI_Stop_W+0xe34>)
 80062be:	0018      	movs	r0, r3
 80062c0:	f7f9 ff32 	bl	8000128 <__udivsi3>
 80062c4:	0003      	movs	r3, r0
 80062c6:	210a      	movs	r1, #10
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7f9 ffb3 	bl	8000234 <__aeabi_uidivmod>
 80062ce:	000b      	movs	r3, r1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	3330      	adds	r3, #48	@ 0x30
 80062d4:	b2d9      	uxtb	r1, r3
 80062d6:	4bd5      	ldr	r3, [pc, #852]	@ (800662c <HMI_Stop_W+0xe38>)
 80062d8:	225a      	movs	r2, #90	@ 0x5a
 80062da:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = (fare_d_x10 /1000 % 10) + 0x30;
 80062dc:	4bd1      	ldr	r3, [pc, #836]	@ (8006624 <HMI_Stop_W+0xe30>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	22fa      	movs	r2, #250	@ 0xfa
 80062e2:	0091      	lsls	r1, r2, #2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7f9 ff1f 	bl	8000128 <__udivsi3>
 80062ea:	0003      	movs	r3, r0
 80062ec:	210a      	movs	r1, #10
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7f9 ffa0 	bl	8000234 <__aeabi_uidivmod>
 80062f4:	000b      	movs	r3, r1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	3330      	adds	r3, #48	@ 0x30
 80062fa:	b2d9      	uxtb	r1, r3
 80062fc:	4bcb      	ldr	r3, [pc, #812]	@ (800662c <HMI_Stop_W+0xe38>)
 80062fe:	225b      	movs	r2, #91	@ 0x5b
 8006300:	5499      	strb	r1, [r3, r2]
	}
	SD_buffer[92] = (fare_d_x10 /100 % 10) + 0x30;
 8006302:	4bc8      	ldr	r3, [pc, #800]	@ (8006624 <HMI_Stop_W+0xe30>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2164      	movs	r1, #100	@ 0x64
 8006308:	0018      	movs	r0, r3
 800630a:	f7f9 ff0d 	bl	8000128 <__udivsi3>
 800630e:	0003      	movs	r3, r0
 8006310:	210a      	movs	r1, #10
 8006312:	0018      	movs	r0, r3
 8006314:	f7f9 ff8e 	bl	8000234 <__aeabi_uidivmod>
 8006318:	000b      	movs	r3, r1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	3330      	adds	r3, #48	@ 0x30
 800631e:	b2d9      	uxtb	r1, r3
 8006320:	4bc2      	ldr	r3, [pc, #776]	@ (800662c <HMI_Stop_W+0xe38>)
 8006322:	225c      	movs	r2, #92	@ 0x5c
 8006324:	5499      	strb	r1, [r3, r2]
	SD_buffer[93] = (fare_d_x10 /10 % 10) + 0x30;
 8006326:	4bbf      	ldr	r3, [pc, #764]	@ (8006624 <HMI_Stop_W+0xe30>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	210a      	movs	r1, #10
 800632c:	0018      	movs	r0, r3
 800632e:	f7f9 fefb 	bl	8000128 <__udivsi3>
 8006332:	0003      	movs	r3, r0
 8006334:	210a      	movs	r1, #10
 8006336:	0018      	movs	r0, r3
 8006338:	f7f9 ff7c 	bl	8000234 <__aeabi_uidivmod>
 800633c:	000b      	movs	r3, r1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	3330      	adds	r3, #48	@ 0x30
 8006342:	b2d9      	uxtb	r1, r3
 8006344:	4bb9      	ldr	r3, [pc, #740]	@ (800662c <HMI_Stop_W+0xe38>)
 8006346:	225d      	movs	r2, #93	@ 0x5d
 8006348:	5499      	strb	r1, [r3, r2]
	SD_buffer[94] = 0x2E;
 800634a:	4bb8      	ldr	r3, [pc, #736]	@ (800662c <HMI_Stop_W+0xe38>)
 800634c:	225e      	movs	r2, #94	@ 0x5e
 800634e:	212e      	movs	r1, #46	@ 0x2e
 8006350:	5499      	strb	r1, [r3, r2]
	SD_buffer[95] = (fare_d_x10 /1 % 10) + 0x30;
 8006352:	4bb4      	ldr	r3, [pc, #720]	@ (8006624 <HMI_Stop_W+0xe30>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	210a      	movs	r1, #10
 8006358:	0018      	movs	r0, r3
 800635a:	f7f9 ff6b 	bl	8000234 <__aeabi_uidivmod>
 800635e:	000b      	movs	r3, r1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	3330      	adds	r3, #48	@ 0x30
 8006364:	b2d9      	uxtb	r1, r3
 8006366:	4bb1      	ldr	r3, [pc, #708]	@ (800662c <HMI_Stop_W+0xe38>)
 8006368:	225f      	movs	r2, #95	@ 0x5f
 800636a:	5499      	strb	r1, [r3, r2]
	SD_buffer[96] = 0x30;
 800636c:	4baf      	ldr	r3, [pc, #700]	@ (800662c <HMI_Stop_W+0xe38>)
 800636e:	2260      	movs	r2, #96	@ 0x60
 8006370:	2130      	movs	r1, #48	@ 0x30
 8006372:	5499      	strb	r1, [r3, r2]
	SD_buffer[97] = 0x20;
 8006374:	4bad      	ldr	r3, [pc, #692]	@ (800662c <HMI_Stop_W+0xe38>)
 8006376:	2261      	movs	r2, #97	@ 0x61
 8006378:	2120      	movs	r1, #32
 800637a:	5499      	strb	r1, [r3, r2]

	//cpy total_fare
	//default 00.0 - [9][10][11][12] - 0x30 0x30 0x2e 0x30
	//default 00.00 - [8][9][10][11][12]
	if(Addition == 0)
 800637c:	4bac      	ldr	r3, [pc, #688]	@ (8006630 <HMI_Stop_W+0xe3c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <HMI_Stop_W+0xb98>
	{
		Final_price = fare_d_x10;
 8006384:	4ba7      	ldr	r3, [pc, #668]	@ (8006624 <HMI_Stop_W+0xe30>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4baa      	ldr	r3, [pc, #680]	@ (8006634 <HMI_Stop_W+0xe40>)
 800638a:	601a      	str	r2, [r3, #0]
	}

	t_fare[12] = 0x30;
 800638c:	4baa      	ldr	r3, [pc, #680]	@ (8006638 <HMI_Stop_W+0xe44>)
 800638e:	2230      	movs	r2, #48	@ 0x30
 8006390:	731a      	strb	r2, [r3, #12]
	t_fare[11] = (Final_price /1 % 10) + 0x30;
 8006392:	4ba8      	ldr	r3, [pc, #672]	@ (8006634 <HMI_Stop_W+0xe40>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	210a      	movs	r1, #10
 8006398:	0018      	movs	r0, r3
 800639a:	f7f9 ff4b 	bl	8000234 <__aeabi_uidivmod>
 800639e:	000b      	movs	r3, r1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	3330      	adds	r3, #48	@ 0x30
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006638 <HMI_Stop_W+0xe44>)
 80063a8:	72da      	strb	r2, [r3, #11]
	t_fare[9] = (Final_price /10 % 10) + 0x30;
 80063aa:	4ba2      	ldr	r3, [pc, #648]	@ (8006634 <HMI_Stop_W+0xe40>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	210a      	movs	r1, #10
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7f9 feb9 	bl	8000128 <__udivsi3>
 80063b6:	0003      	movs	r3, r0
 80063b8:	210a      	movs	r1, #10
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7f9 ff3a 	bl	8000234 <__aeabi_uidivmod>
 80063c0:	000b      	movs	r3, r1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	3330      	adds	r3, #48	@ 0x30
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	4b9b      	ldr	r3, [pc, #620]	@ (8006638 <HMI_Stop_W+0xe44>)
 80063ca:	725a      	strb	r2, [r3, #9]
	t_fare[8] = (Final_price /100 % 10) + 0x30;
 80063cc:	4b99      	ldr	r3, [pc, #612]	@ (8006634 <HMI_Stop_W+0xe40>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2164      	movs	r1, #100	@ 0x64
 80063d2:	0018      	movs	r0, r3
 80063d4:	f7f9 fea8 	bl	8000128 <__udivsi3>
 80063d8:	0003      	movs	r3, r0
 80063da:	210a      	movs	r1, #10
 80063dc:	0018      	movs	r0, r3
 80063de:	f7f9 ff29 	bl	8000234 <__aeabi_uidivmod>
 80063e2:	000b      	movs	r3, r1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	3330      	adds	r3, #48	@ 0x30
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4b93      	ldr	r3, [pc, #588]	@ (8006638 <HMI_Stop_W+0xe44>)
 80063ec:	721a      	strb	r2, [r3, #8]

	if ((Final_price /10000 % 10) == 0 && (Final_price /1000 % 10) == 0)
 80063ee:	4b91      	ldr	r3, [pc, #580]	@ (8006634 <HMI_Stop_W+0xe40>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	498d      	ldr	r1, [pc, #564]	@ (8006628 <HMI_Stop_W+0xe34>)
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7f9 fe97 	bl	8000128 <__udivsi3>
 80063fa:	0003      	movs	r3, r0
 80063fc:	210a      	movs	r1, #10
 80063fe:	0018      	movs	r0, r3
 8006400:	f7f9 ff18 	bl	8000234 <__aeabi_uidivmod>
 8006404:	1e0b      	subs	r3, r1, #0
 8006406:	d125      	bne.n	8006454 <HMI_Stop_W+0xc60>
 8006408:	4b8a      	ldr	r3, [pc, #552]	@ (8006634 <HMI_Stop_W+0xe40>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	22fa      	movs	r2, #250	@ 0xfa
 800640e:	0091      	lsls	r1, r2, #2
 8006410:	0018      	movs	r0, r3
 8006412:	f7f9 fe89 	bl	8000128 <__udivsi3>
 8006416:	0003      	movs	r3, r0
 8006418:	210a      	movs	r1, #10
 800641a:	0018      	movs	r0, r3
 800641c:	f7f9 ff0a 	bl	8000234 <__aeabi_uidivmod>
 8006420:	1e0b      	subs	r3, r1, #0
 8006422:	d117      	bne.n	8006454 <HMI_Stop_W+0xc60>
	{
//		t_fare[8] = 0x24;
//		t_fare[7] = 0x4b;
//		t_fare[6] = 0x48;
		t_fare[7] = 0x24;
 8006424:	4b84      	ldr	r3, [pc, #528]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006426:	2224      	movs	r2, #36	@ 0x24
 8006428:	71da      	strb	r2, [r3, #7]
		t_fare[6] = 0x4b;
 800642a:	4b83      	ldr	r3, [pc, #524]	@ (8006638 <HMI_Stop_W+0xe44>)
 800642c:	224b      	movs	r2, #75	@ 0x4b
 800642e:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x48;
 8006430:	4b81      	ldr	r3, [pc, #516]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006432:	2248      	movs	r2, #72	@ 0x48
 8006434:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x20;
 8006436:	4b80      	ldr	r3, [pc, #512]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006438:	2220      	movs	r2, #32
 800643a:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x20;
 800643c:	4b7e      	ldr	r3, [pc, #504]	@ (8006638 <HMI_Stop_W+0xe44>)
 800643e:	2220      	movs	r2, #32
 8006440:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = 0x20;
 8006442:	4b7a      	ldr	r3, [pc, #488]	@ (800662c <HMI_Stop_W+0xe38>)
 8006444:	2269      	movs	r2, #105	@ 0x69
 8006446:	2120      	movs	r1, #32
 8006448:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = 0x20;
 800644a:	4b78      	ldr	r3, [pc, #480]	@ (800662c <HMI_Stop_W+0xe38>)
 800644c:	226a      	movs	r2, #106	@ 0x6a
 800644e:	2120      	movs	r1, #32
 8006450:	5499      	strb	r1, [r3, r2]
 8006452:	e06a      	b.n	800652a <HMI_Stop_W+0xd36>
	}
	else if((Final_price /10000 % 10) == 0)
 8006454:	4b77      	ldr	r3, [pc, #476]	@ (8006634 <HMI_Stop_W+0xe40>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4973      	ldr	r1, [pc, #460]	@ (8006628 <HMI_Stop_W+0xe34>)
 800645a:	0018      	movs	r0, r3
 800645c:	f7f9 fe64 	bl	8000128 <__udivsi3>
 8006460:	0003      	movs	r3, r0
 8006462:	210a      	movs	r1, #10
 8006464:	0018      	movs	r0, r3
 8006466:	f7f9 fee5 	bl	8000234 <__aeabi_uidivmod>
 800646a:	1e0b      	subs	r3, r1, #0
 800646c:	d127      	bne.n	80064be <HMI_Stop_W+0xcca>
	{
//		t_fare[8] = (Final_price /1000 % 10) + 0x30;
//		t_fare[7] = 0x24;
//		t_fare[6] = 0x4b;
//		t_fare[5] = 0x48;
		t_fare[7] = (Final_price /1000 % 10) + 0x30;
 800646e:	4b71      	ldr	r3, [pc, #452]	@ (8006634 <HMI_Stop_W+0xe40>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	22fa      	movs	r2, #250	@ 0xfa
 8006474:	0091      	lsls	r1, r2, #2
 8006476:	0018      	movs	r0, r3
 8006478:	f7f9 fe56 	bl	8000128 <__udivsi3>
 800647c:	0003      	movs	r3, r0
 800647e:	210a      	movs	r1, #10
 8006480:	0018      	movs	r0, r3
 8006482:	f7f9 fed7 	bl	8000234 <__aeabi_uidivmod>
 8006486:	000b      	movs	r3, r1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3330      	adds	r3, #48	@ 0x30
 800648c:	b2da      	uxtb	r2, r3
 800648e:	4b6a      	ldr	r3, [pc, #424]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006490:	71da      	strb	r2, [r3, #7]
		t_fare[6] = 0x24;
 8006492:	4b69      	ldr	r3, [pc, #420]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006494:	2224      	movs	r2, #36	@ 0x24
 8006496:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x4b;
 8006498:	4b67      	ldr	r3, [pc, #412]	@ (8006638 <HMI_Stop_W+0xe44>)
 800649a:	224b      	movs	r2, #75	@ 0x4b
 800649c:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x48;
 800649e:	4b66      	ldr	r3, [pc, #408]	@ (8006638 <HMI_Stop_W+0xe44>)
 80064a0:	2248      	movs	r2, #72	@ 0x48
 80064a2:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x20;
 80064a4:	4b64      	ldr	r3, [pc, #400]	@ (8006638 <HMI_Stop_W+0xe44>)
 80064a6:	2220      	movs	r2, #32
 80064a8:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = 0x20;
 80064aa:	4b60      	ldr	r3, [pc, #384]	@ (800662c <HMI_Stop_W+0xe38>)
 80064ac:	2269      	movs	r2, #105	@ 0x69
 80064ae:	2120      	movs	r1, #32
 80064b0:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = t_fare[7]; //t_fare[8];
 80064b2:	4b61      	ldr	r3, [pc, #388]	@ (8006638 <HMI_Stop_W+0xe44>)
 80064b4:	79d9      	ldrb	r1, [r3, #7]
 80064b6:	4b5d      	ldr	r3, [pc, #372]	@ (800662c <HMI_Stop_W+0xe38>)
 80064b8:	226a      	movs	r2, #106	@ 0x6a
 80064ba:	5499      	strb	r1, [r3, r2]
 80064bc:	e035      	b.n	800652a <HMI_Stop_W+0xd36>
//		t_fare[8] = (Final_price /1000 % 10) + 0x30;
//		t_fare[7] = (Final_price /10000 % 10) + 0x30;
//		t_fare[6] = 0x24;
//		t_fare[5] = 0x4b;
//		t_fare[4] = 0x48;
		t_fare[7] = (Final_price /1000 % 10) + 0x30;
 80064be:	4b5d      	ldr	r3, [pc, #372]	@ (8006634 <HMI_Stop_W+0xe40>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	22fa      	movs	r2, #250	@ 0xfa
 80064c4:	0091      	lsls	r1, r2, #2
 80064c6:	0018      	movs	r0, r3
 80064c8:	f7f9 fe2e 	bl	8000128 <__udivsi3>
 80064cc:	0003      	movs	r3, r0
 80064ce:	210a      	movs	r1, #10
 80064d0:	0018      	movs	r0, r3
 80064d2:	f7f9 feaf 	bl	8000234 <__aeabi_uidivmod>
 80064d6:	000b      	movs	r3, r1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	3330      	adds	r3, #48	@ 0x30
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4b56      	ldr	r3, [pc, #344]	@ (8006638 <HMI_Stop_W+0xe44>)
 80064e0:	71da      	strb	r2, [r3, #7]
		t_fare[6] = (Final_price /10000 % 10) + 0x30;
 80064e2:	4b54      	ldr	r3, [pc, #336]	@ (8006634 <HMI_Stop_W+0xe40>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4950      	ldr	r1, [pc, #320]	@ (8006628 <HMI_Stop_W+0xe34>)
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7f9 fe1d 	bl	8000128 <__udivsi3>
 80064ee:	0003      	movs	r3, r0
 80064f0:	210a      	movs	r1, #10
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7f9 fe9e 	bl	8000234 <__aeabi_uidivmod>
 80064f8:	000b      	movs	r3, r1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3330      	adds	r3, #48	@ 0x30
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b4d      	ldr	r3, [pc, #308]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006502:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x24;
 8006504:	4b4c      	ldr	r3, [pc, #304]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006506:	2224      	movs	r2, #36	@ 0x24
 8006508:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x4b;
 800650a:	4b4b      	ldr	r3, [pc, #300]	@ (8006638 <HMI_Stop_W+0xe44>)
 800650c:	224b      	movs	r2, #75	@ 0x4b
 800650e:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x48;
 8006510:	4b49      	ldr	r3, [pc, #292]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006512:	2248      	movs	r2, #72	@ 0x48
 8006514:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = t_fare[6]; //t_fare[7];
 8006516:	4b48      	ldr	r3, [pc, #288]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006518:	7999      	ldrb	r1, [r3, #6]
 800651a:	4b44      	ldr	r3, [pc, #272]	@ (800662c <HMI_Stop_W+0xe38>)
 800651c:	2269      	movs	r2, #105	@ 0x69
 800651e:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = t_fare[7]; //t_fare[8];
 8006520:	4b45      	ldr	r3, [pc, #276]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006522:	79d9      	ldrb	r1, [r3, #7]
 8006524:	4b41      	ldr	r3, [pc, #260]	@ (800662c <HMI_Stop_W+0xe38>)
 8006526:	226a      	movs	r2, #106	@ 0x6a
 8006528:	5499      	strb	r1, [r3, r2]
	}
	SD_buffer[107] = t_fare[8]; //t_fare[9];
 800652a:	4b43      	ldr	r3, [pc, #268]	@ (8006638 <HMI_Stop_W+0xe44>)
 800652c:	7a19      	ldrb	r1, [r3, #8]
 800652e:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <HMI_Stop_W+0xe38>)
 8006530:	226b      	movs	r2, #107	@ 0x6b
 8006532:	5499      	strb	r1, [r3, r2]
	SD_buffer[108] = t_fare[9]; //t_fare[10];
 8006534:	4b40      	ldr	r3, [pc, #256]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006536:	7a59      	ldrb	r1, [r3, #9]
 8006538:	4b3c      	ldr	r3, [pc, #240]	@ (800662c <HMI_Stop_W+0xe38>)
 800653a:	226c      	movs	r2, #108	@ 0x6c
 800653c:	5499      	strb	r1, [r3, r2]
	SD_buffer[109] = 0x2E;
 800653e:	4b3b      	ldr	r3, [pc, #236]	@ (800662c <HMI_Stop_W+0xe38>)
 8006540:	226d      	movs	r2, #109	@ 0x6d
 8006542:	212e      	movs	r1, #46	@ 0x2e
 8006544:	5499      	strb	r1, [r3, r2]
	SD_buffer[110] = t_fare[11];
 8006546:	4b3c      	ldr	r3, [pc, #240]	@ (8006638 <HMI_Stop_W+0xe44>)
 8006548:	7ad9      	ldrb	r1, [r3, #11]
 800654a:	4b38      	ldr	r3, [pc, #224]	@ (800662c <HMI_Stop_W+0xe38>)
 800654c:	226e      	movs	r2, #110	@ 0x6e
 800654e:	5499      	strb	r1, [r3, r2]
	SD_buffer[111] = 0x30;
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HMI_Stop_W+0xe38>)
 8006552:	226f      	movs	r2, #111	@ 0x6f
 8006554:	2130      	movs	r1, #48	@ 0x30
 8006556:	5499      	strb	r1, [r3, r2]
	SD_buffer[112] = 0x20;
 8006558:	4b34      	ldr	r3, [pc, #208]	@ (800662c <HMI_Stop_W+0xe38>)
 800655a:	2270      	movs	r2, #112	@ 0x70
 800655c:	2120      	movs	r1, #32
 800655e:	5499      	strb	r1, [r3, r2]

	//v_can_end
	v_value[1] = (Final_price /10000 % 10) + 0x30;
 8006560:	4b34      	ldr	r3, [pc, #208]	@ (8006634 <HMI_Stop_W+0xe40>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4930      	ldr	r1, [pc, #192]	@ (8006628 <HMI_Stop_W+0xe34>)
 8006566:	0018      	movs	r0, r3
 8006568:	f7f9 fdde 	bl	8000128 <__udivsi3>
 800656c:	0003      	movs	r3, r0
 800656e:	210a      	movs	r1, #10
 8006570:	0018      	movs	r0, r3
 8006572:	f7f9 fe5f 	bl	8000234 <__aeabi_uidivmod>
 8006576:	000b      	movs	r3, r1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	3330      	adds	r3, #48	@ 0x30
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4b2f      	ldr	r3, [pc, #188]	@ (800663c <HMI_Stop_W+0xe48>)
 8006580:	705a      	strb	r2, [r3, #1]
	v_value[2] = (Final_price /1000 % 10) + 0x30;
 8006582:	4b2c      	ldr	r3, [pc, #176]	@ (8006634 <HMI_Stop_W+0xe40>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	22fa      	movs	r2, #250	@ 0xfa
 8006588:	0091      	lsls	r1, r2, #2
 800658a:	0018      	movs	r0, r3
 800658c:	f7f9 fdcc 	bl	8000128 <__udivsi3>
 8006590:	0003      	movs	r3, r0
 8006592:	210a      	movs	r1, #10
 8006594:	0018      	movs	r0, r3
 8006596:	f7f9 fe4d 	bl	8000234 <__aeabi_uidivmod>
 800659a:	000b      	movs	r3, r1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3330      	adds	r3, #48	@ 0x30
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	4b26      	ldr	r3, [pc, #152]	@ (800663c <HMI_Stop_W+0xe48>)
 80065a4:	709a      	strb	r2, [r3, #2]
	v_value[3] = (Final_price /100 % 10) + 0x30;
 80065a6:	4b23      	ldr	r3, [pc, #140]	@ (8006634 <HMI_Stop_W+0xe40>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2164      	movs	r1, #100	@ 0x64
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7f9 fdbb 	bl	8000128 <__udivsi3>
 80065b2:	0003      	movs	r3, r0
 80065b4:	210a      	movs	r1, #10
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7f9 fe3c 	bl	8000234 <__aeabi_uidivmod>
 80065bc:	000b      	movs	r3, r1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	3330      	adds	r3, #48	@ 0x30
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <HMI_Stop_W+0xe48>)
 80065c6:	70da      	strb	r2, [r3, #3]
	v_value[4] = (Final_price /10 % 10) + 0x30;
 80065c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006634 <HMI_Stop_W+0xe40>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	210a      	movs	r1, #10
 80065ce:	0018      	movs	r0, r3
 80065d0:	f7f9 fdaa 	bl	8000128 <__udivsi3>
 80065d4:	0003      	movs	r3, r0
 80065d6:	210a      	movs	r1, #10
 80065d8:	0018      	movs	r0, r3
 80065da:	f7f9 fe2b 	bl	8000234 <__aeabi_uidivmod>
 80065de:	000b      	movs	r3, r1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	3330      	adds	r3, #48	@ 0x30
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b15      	ldr	r3, [pc, #84]	@ (800663c <HMI_Stop_W+0xe48>)
 80065e8:	711a      	strb	r2, [r3, #4]
	v_value[5] = (Final_price /1 % 10) + 0x30;
 80065ea:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <HMI_Stop_W+0xe40>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	210a      	movs	r1, #10
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7f9 fe1f 	bl	8000234 <__aeabi_uidivmod>
 80065f6:	000b      	movs	r3, r1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	3330      	adds	r3, #48	@ 0x30
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <HMI_Stop_W+0xe48>)
 8006600:	715a      	strb	r2, [r3, #5]
	if(Addition == 0)
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HMI_Stop_W+0xe3c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11a      	bne.n	8006640 <HMI_Stop_W+0xe4c>
	{
		v_value[0] = 0;
 800660a:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <HMI_Stop_W+0xe48>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
		v_value[6] = 0;
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <HMI_Stop_W+0xe48>)
 8006612:	2200      	movs	r2, #0
 8006614:	719a      	strb	r2, [r3, #6]
		v_value[7] = 0;
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <HMI_Stop_W+0xe48>)
 8006618:	2200      	movs	r2, #0
 800661a:	71da      	strb	r2, [r3, #7]
		v_value[8] = 0;
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <HMI_Stop_W+0xe48>)
 800661e:	2200      	movs	r2, #0
 8006620:	721a      	strb	r2, [r3, #8]
 8006622:	e044      	b.n	80066ae <HMI_Stop_W+0xeba>
 8006624:	20000d14 	.word	0x20000d14
 8006628:	00002710 	.word	0x00002710
 800662c:	20003330 	.word	0x20003330
 8006630:	20000a60 	.word	0x20000a60
 8006634:	20000a40 	.word	0x20000a40
 8006638:	2000021c 	.word	0x2000021c
 800663c:	200033a4 	.word	0x200033a4
	}
	else
	{
		v_value[0] = 1;
 8006640:	4bcf      	ldr	r3, [pc, #828]	@ (8006980 <HMI_Stop_W+0x118c>)
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
		v_value[6] = (Addition /1000 % 10) + 0x30;
 8006646:	4bcf      	ldr	r3, [pc, #828]	@ (8006984 <HMI_Stop_W+0x1190>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	22fa      	movs	r2, #250	@ 0xfa
 800664c:	0091      	lsls	r1, r2, #2
 800664e:	0018      	movs	r0, r3
 8006650:	f7f9 fd6a 	bl	8000128 <__udivsi3>
 8006654:	0003      	movs	r3, r0
 8006656:	210a      	movs	r1, #10
 8006658:	0018      	movs	r0, r3
 800665a:	f7f9 fdeb 	bl	8000234 <__aeabi_uidivmod>
 800665e:	000b      	movs	r3, r1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3330      	adds	r3, #48	@ 0x30
 8006664:	b2da      	uxtb	r2, r3
 8006666:	4bc6      	ldr	r3, [pc, #792]	@ (8006980 <HMI_Stop_W+0x118c>)
 8006668:	719a      	strb	r2, [r3, #6]
		v_value[7] = (Addition /100 % 10) + 0x30;
 800666a:	4bc6      	ldr	r3, [pc, #792]	@ (8006984 <HMI_Stop_W+0x1190>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2164      	movs	r1, #100	@ 0x64
 8006670:	0018      	movs	r0, r3
 8006672:	f7f9 fd59 	bl	8000128 <__udivsi3>
 8006676:	0003      	movs	r3, r0
 8006678:	210a      	movs	r1, #10
 800667a:	0018      	movs	r0, r3
 800667c:	f7f9 fdda 	bl	8000234 <__aeabi_uidivmod>
 8006680:	000b      	movs	r3, r1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	3330      	adds	r3, #48	@ 0x30
 8006686:	b2da      	uxtb	r2, r3
 8006688:	4bbd      	ldr	r3, [pc, #756]	@ (8006980 <HMI_Stop_W+0x118c>)
 800668a:	71da      	strb	r2, [r3, #7]
		v_value[8] = (Addition /10 % 10) + 0x30;
 800668c:	4bbd      	ldr	r3, [pc, #756]	@ (8006984 <HMI_Stop_W+0x1190>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	210a      	movs	r1, #10
 8006692:	0018      	movs	r0, r3
 8006694:	f7f9 fd48 	bl	8000128 <__udivsi3>
 8006698:	0003      	movs	r3, r0
 800669a:	210a      	movs	r1, #10
 800669c:	0018      	movs	r0, r3
 800669e:	f7f9 fdc9 	bl	8000234 <__aeabi_uidivmod>
 80066a2:	000b      	movs	r3, r1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	3330      	adds	r3, #48	@ 0x30
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4bb5      	ldr	r3, [pc, #724]	@ (8006980 <HMI_Stop_W+0x118c>)
 80066ac:	721a      	strb	r2, [r3, #8]
	}
	//audio end
	if (((Flag_Audio_end==1) || (Flag_btn_changed==1)) && (Flag_Audio_end!=48))
 80066ae:	4bb6      	ldr	r3, [pc, #728]	@ (8006988 <HMI_Stop_W+0x1194>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d004      	beq.n	80066c0 <HMI_Stop_W+0xecc>
 80066b6:	4bb5      	ldr	r3, [pc, #724]	@ (800698c <HMI_Stop_W+0x1198>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d000      	beq.n	80066c0 <HMI_Stop_W+0xecc>
 80066be:	e0ea      	b.n	8006896 <HMI_Stop_W+0x10a2>
 80066c0:	4bb1      	ldr	r3, [pc, #708]	@ (8006988 <HMI_Stop_W+0x1194>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	d100      	bne.n	80066ca <HMI_Stop_W+0xed6>
 80066c8:	e0e5      	b.n	8006896 <HMI_Stop_W+0x10a2>
	{
		Flag_Audio_end = 0; //false; //FALSE;
 80066ca:	4baf      	ldr	r3, [pc, #700]	@ (8006988 <HMI_Stop_W+0x1194>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
		Flag_Audio_start = 1; //true; //TRUE;
 80066d0:	4baf      	ldr	r3, [pc, #700]	@ (8006990 <HMI_Stop_W+0x119c>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
		Flag_btn_changed = 0; //false; //FALSE;
 80066d6:	4bad      	ldr	r3, [pc, #692]	@ (800698c <HMI_Stop_W+0x1198>)
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]

		if (btn_value == 1)
 80066dc:	4bad      	ldr	r3, [pc, #692]	@ (8006994 <HMI_Stop_W+0x11a0>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d140      	bne.n	8006766 <HMI_Stop_W+0xf72>
		{
			cal_vcan(v_value, result);
 80066e4:	4aac      	ldr	r2, [pc, #688]	@ (8006998 <HMI_Stop_W+0x11a4>)
 80066e6:	4ba6      	ldr	r3, [pc, #664]	@ (8006980 <HMI_Stop_W+0x118c>)
 80066e8:	0011      	movs	r1, r2
 80066ea:	0018      	movs	r0, r3
 80066ec:	f004 ff4a 	bl	800b584 <cal_vcan>
			v_can_end[2] = result[0] + 2;
 80066f0:	4ba9      	ldr	r3, [pc, #676]	@ (8006998 <HMI_Stop_W+0x11a4>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	3302      	adds	r3, #2
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4ba8      	ldr	r3, [pc, #672]	@ (800699c <HMI_Stop_W+0x11a8>)
 80066fa:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 80066fc:	4ba8      	ldr	r3, [pc, #672]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 80066fe:	2200      	movs	r2, #0
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e00f      	b.n	8006724 <HMI_Stop_W+0xf30>
			{
				v_can_end[i+5] = result[i+1];
 8006704:	4ba6      	ldr	r3, [pc, #664]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	4ba5      	ldr	r3, [pc, #660]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	3305      	adds	r3, #5
 8006710:	49a1      	ldr	r1, [pc, #644]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006712:	5c89      	ldrb	r1, [r1, r2]
 8006714:	4aa1      	ldr	r2, [pc, #644]	@ (800699c <HMI_Stop_W+0x11a8>)
 8006716:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 8006718:	4ba1      	ldr	r3, [pc, #644]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	4b9f      	ldr	r3, [pc, #636]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	4b9c      	ldr	r3, [pc, #624]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	001a      	movs	r2, r3
 800672a:	4b9d      	ldr	r3, [pc, #628]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d8e8      	bhi.n	8006704 <HMI_Stop_W+0xf10>
			}
			v_can_end[v_can_end[2] + 3] = checksum_8bit(v_can_end, (v_can_end[2] + 3));
 8006732:	4b9a      	ldr	r3, [pc, #616]	@ (800699c <HMI_Stop_W+0x11a8>)
 8006734:	789b      	ldrb	r3, [r3, #2]
 8006736:	1cda      	adds	r2, r3, #3
 8006738:	4b98      	ldr	r3, [pc, #608]	@ (800699c <HMI_Stop_W+0x11a8>)
 800673a:	789b      	ldrb	r3, [r3, #2]
 800673c:	1cdc      	adds	r4, r3, #3
 800673e:	4b97      	ldr	r3, [pc, #604]	@ (800699c <HMI_Stop_W+0x11a8>)
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f001 fb36 	bl	8007db4 <checksum_8bit>
 8006748:	0003      	movs	r3, r0
 800674a:	001a      	movs	r2, r3
 800674c:	4b93      	ldr	r3, [pc, #588]	@ (800699c <HMI_Stop_W+0x11a8>)
 800674e:	551a      	strb	r2, [r3, r4]
			Voice_end(v_can_end);
 8006750:	4b92      	ldr	r3, [pc, #584]	@ (800699c <HMI_Stop_W+0x11a8>)
 8006752:	0018      	movs	r0, r3
 8006754:	f004 ff04 	bl	800b560 <Voice_end>
			memset(v_can_end+5,0,sizeof(unsigned char)*27);
 8006758:	4b92      	ldr	r3, [pc, #584]	@ (80069a4 <HMI_Stop_W+0x11b0>)
 800675a:	221b      	movs	r2, #27
 800675c:	2100      	movs	r1, #0
 800675e:	0018      	movs	r0, r3
 8006760:	f011 ff30 	bl	80185c4 <memset>
 8006764:	e088      	b.n	8006878 <HMI_Stop_W+0x1084>
		}
		else if (btn_value == 2)
 8006766:	4b8b      	ldr	r3, [pc, #556]	@ (8006994 <HMI_Stop_W+0x11a0>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d140      	bne.n	80067f0 <HMI_Stop_W+0xffc>
		{
			cal_vcn(v_value, result);
 800676e:	4a8a      	ldr	r2, [pc, #552]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006770:	4b83      	ldr	r3, [pc, #524]	@ (8006980 <HMI_Stop_W+0x118c>)
 8006772:	0011      	movs	r1, r2
 8006774:	0018      	movs	r0, r3
 8006776:	f005 f9c1 	bl	800bafc <cal_vcn>
			v_cn_end[2] = result[0] + 2;
 800677a:	4b87      	ldr	r3, [pc, #540]	@ (8006998 <HMI_Stop_W+0x11a4>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	3302      	adds	r3, #2
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4b89      	ldr	r3, [pc, #548]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 8006784:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 8006786:	4b86      	ldr	r3, [pc, #536]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006788:	2200      	movs	r2, #0
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e00f      	b.n	80067ae <HMI_Stop_W+0xfba>
			{
				v_cn_end[i+5] = result[i+1];
 800678e:	4b84      	ldr	r3, [pc, #528]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	4b82      	ldr	r3, [pc, #520]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	3305      	adds	r3, #5
 800679a:	497f      	ldr	r1, [pc, #508]	@ (8006998 <HMI_Stop_W+0x11a4>)
 800679c:	5c89      	ldrb	r1, [r1, r2]
 800679e:	4a82      	ldr	r2, [pc, #520]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067a0:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 80067a2:	4b7f      	ldr	r3, [pc, #508]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	4b7d      	ldr	r3, [pc, #500]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006998 <HMI_Stop_W+0x11a4>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	001a      	movs	r2, r3
 80067b4:	4b7a      	ldr	r3, [pc, #488]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d8e8      	bhi.n	800678e <HMI_Stop_W+0xf9a>
			}
			v_cn_end[v_cn_end[2] + 3] = checksum_8bit(v_cn_end, (v_cn_end[2] + 3));
 80067bc:	4b7a      	ldr	r3, [pc, #488]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067be:	789b      	ldrb	r3, [r3, #2]
 80067c0:	1cda      	adds	r2, r3, #3
 80067c2:	4b79      	ldr	r3, [pc, #484]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067c4:	789b      	ldrb	r3, [r3, #2]
 80067c6:	1cdc      	adds	r4, r3, #3
 80067c8:	4b77      	ldr	r3, [pc, #476]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067ca:	0011      	movs	r1, r2
 80067cc:	0018      	movs	r0, r3
 80067ce:	f001 faf1 	bl	8007db4 <checksum_8bit>
 80067d2:	0003      	movs	r3, r0
 80067d4:	001a      	movs	r2, r3
 80067d6:	4b74      	ldr	r3, [pc, #464]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067d8:	551a      	strb	r2, [r3, r4]
			Voice_end(v_cn_end);
 80067da:	4b73      	ldr	r3, [pc, #460]	@ (80069a8 <HMI_Stop_W+0x11b4>)
 80067dc:	0018      	movs	r0, r3
 80067de:	f004 febf 	bl	800b560 <Voice_end>
			memset(v_cn_end+5,0,sizeof(unsigned char)*27);
 80067e2:	4b72      	ldr	r3, [pc, #456]	@ (80069ac <HMI_Stop_W+0x11b8>)
 80067e4:	221b      	movs	r2, #27
 80067e6:	2100      	movs	r1, #0
 80067e8:	0018      	movs	r0, r3
 80067ea:	f011 feeb 	bl	80185c4 <memset>
 80067ee:	e043      	b.n	8006878 <HMI_Stop_W+0x1084>
		}
		else if (btn_value == 3)
 80067f0:	4b68      	ldr	r3, [pc, #416]	@ (8006994 <HMI_Stop_W+0x11a0>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d13f      	bne.n	8006878 <HMI_Stop_W+0x1084>
		{
			cal_ven(v_value, result);
 80067f8:	4a67      	ldr	r2, [pc, #412]	@ (8006998 <HMI_Stop_W+0x11a4>)
 80067fa:	4b61      	ldr	r3, [pc, #388]	@ (8006980 <HMI_Stop_W+0x118c>)
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f005 fc38 	bl	800c074 <cal_ven>
			v_en_end[2] = result[0] + 2;
 8006804:	4b64      	ldr	r3, [pc, #400]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	3302      	adds	r3, #2
 800680a:	b2da      	uxtb	r2, r3
 800680c:	4b68      	ldr	r3, [pc, #416]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 800680e:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 8006810:	4b63      	ldr	r3, [pc, #396]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006812:	2200      	movs	r2, #0
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e00f      	b.n	8006838 <HMI_Stop_W+0x1044>
			{
				v_en_end[i+5] = result[i+1];
 8006818:	4b61      	ldr	r3, [pc, #388]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	4b60      	ldr	r3, [pc, #384]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	3305      	adds	r3, #5
 8006824:	495c      	ldr	r1, [pc, #368]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006826:	5c89      	ldrb	r1, [r1, r2]
 8006828:	4a61      	ldr	r2, [pc, #388]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 800682a:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 800682c:	4b5c      	ldr	r3, [pc, #368]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	4b5a      	ldr	r3, [pc, #360]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	4b57      	ldr	r3, [pc, #348]	@ (8006998 <HMI_Stop_W+0x11a4>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	001a      	movs	r2, r3
 800683e:	4b58      	ldr	r3, [pc, #352]	@ (80069a0 <HMI_Stop_W+0x11ac>)
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d8e8      	bhi.n	8006818 <HMI_Stop_W+0x1024>
			}
			v_en_end[v_en_end[2] + 3] = checksum_8bit(v_en_end, (v_en_end[2] + 3));
 8006846:	4b5a      	ldr	r3, [pc, #360]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 8006848:	789b      	ldrb	r3, [r3, #2]
 800684a:	1cda      	adds	r2, r3, #3
 800684c:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 800684e:	789b      	ldrb	r3, [r3, #2]
 8006850:	1cdc      	adds	r4, r3, #3
 8006852:	4b57      	ldr	r3, [pc, #348]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 8006854:	0011      	movs	r1, r2
 8006856:	0018      	movs	r0, r3
 8006858:	f001 faac 	bl	8007db4 <checksum_8bit>
 800685c:	0003      	movs	r3, r0
 800685e:	001a      	movs	r2, r3
 8006860:	4b53      	ldr	r3, [pc, #332]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 8006862:	551a      	strb	r2, [r3, r4]
			Voice_end(v_en_end);
 8006864:	4b52      	ldr	r3, [pc, #328]	@ (80069b0 <HMI_Stop_W+0x11bc>)
 8006866:	0018      	movs	r0, r3
 8006868:	f004 fe7a 	bl	800b560 <Voice_end>
			memset(v_en_end+5,0,sizeof(unsigned char)*27);
 800686c:	4b51      	ldr	r3, [pc, #324]	@ (80069b4 <HMI_Stop_W+0x11c0>)
 800686e:	221b      	movs	r2, #27
 8006870:	2100      	movs	r1, #0
 8006872:	0018      	movs	r0, r3
 8006874:	f011 fea6 	bl	80185c4 <memset>
		}
		memset(v_value, 0, sizeof(unsigned char)*9);
 8006878:	4b41      	ldr	r3, [pc, #260]	@ (8006980 <HMI_Stop_W+0x118c>)
 800687a:	2209      	movs	r2, #9
 800687c:	2100      	movs	r1, #0
 800687e:	0018      	movs	r0, r3
 8006880:	f011 fea0 	bl	80185c4 <memset>
		memset(result, 0, sizeof(unsigned char)*26);
 8006884:	4b44      	ldr	r3, [pc, #272]	@ (8006998 <HMI_Stop_W+0x11a4>)
 8006886:	221a      	movs	r2, #26
 8006888:	2100      	movs	r1, #0
 800688a:	0018      	movs	r0, r3
 800688c:	f011 fe9a 	bl	80185c4 <memset>
		Flag_Audio_end = 0;
 8006890:	4b3d      	ldr	r3, [pc, #244]	@ (8006988 <HMI_Stop_W+0x1194>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
	}

	//record last final price
	Last_Final_price = Final_price;
 8006896:	4b48      	ldr	r3, [pc, #288]	@ (80069b8 <HMI_Stop_W+0x11c4>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b48      	ldr	r3, [pc, #288]	@ (80069bc <HMI_Stop_W+0x11c8>)
 800689c:	601a      	str	r2, [r3, #0]
	Last_Final_price_x10 = Final_price_x10;
 800689e:	4b48      	ldr	r3, [pc, #288]	@ (80069c0 <HMI_Stop_W+0x11cc>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b48      	ldr	r3, [pc, #288]	@ (80069c4 <HMI_Stop_W+0x11d0>)
 80068a4:	601a      	str	r2, [r3, #0]
	//change
	Last_fare_d_x100 = fare_d_x100;
 80068a6:	4b48      	ldr	r3, [pc, #288]	@ (80069c8 <HMI_Stop_W+0x11d4>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b48      	ldr	r3, [pc, #288]	@ (80069cc <HMI_Stop_W+0x11d8>)
 80068ac:	601a      	str	r2, [r3, #0]
	ex_Addition = Addition;
 80068ae:	4b35      	ldr	r3, [pc, #212]	@ (8006984 <HMI_Stop_W+0x1190>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b47      	ldr	r3, [pc, #284]	@ (80069d0 <HMI_Stop_W+0x11dc>)
 80068b4:	601a      	str	r2, [r3, #0]
	Last_Dis = Dis;
 80068b6:	4b47      	ldr	r3, [pc, #284]	@ (80069d4 <HMI_Stop_W+0x11e0>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b47      	ldr	r3, [pc, #284]	@ (80069d8 <HMI_Stop_W+0x11e4>)
 80068bc:	601a      	str	r2, [r3, #0]

	//transfer pick-up time (transfer only one time, Flag_Tbox_Start changed in S_to_V status)
	if(Flag_Tbox_Start)
 80068be:	4b47      	ldr	r3, [pc, #284]	@ (80069dc <HMI_Stop_W+0x11e8>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d100      	bne.n	80068c8 <HMI_Stop_W+0x10d4>
 80068c6:	e106      	b.n	8006ad6 <HMI_Stop_W+0x12e2>
	{
		Flag_Tbox_Start = FALSE;
 80068c8:	4b44      	ldr	r3, [pc, #272]	@ (80069dc <HMI_Stop_W+0x11e8>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = TRUE;
 80068ce:	4b44      	ldr	r3, [pc, #272]	@ (80069e0 <HMI_Stop_W+0x11ec>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
		tbox_start();
 80068d4:	f001 fada 	bl	8007e8c <tbox_start>
		flag_count = 1;
 80068d8:	4b42      	ldr	r3, [pc, #264]	@ (80069e4 <HMI_Stop_W+0x11f0>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
		E_read();
 80068de:	f004 f973 	bl	800abc8 <E_read>
		//non business time
		nbtime_d = ((nbtime_counter / 60.0)* 1000) / 10; //changed
 80068e2:	4b41      	ldr	r3, [pc, #260]	@ (80069e8 <HMI_Stop_W+0x11f4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7fc fca4 	bl	8003234 <__aeabi_ui2d>
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b3f      	ldr	r3, [pc, #252]	@ (80069ec <HMI_Stop_W+0x11f8>)
 80068f0:	f7fb f98e 	bl	8001c10 <__aeabi_ddiv>
 80068f4:	0002      	movs	r2, r0
 80068f6:	000b      	movs	r3, r1
 80068f8:	0010      	movs	r0, r2
 80068fa:	0019      	movs	r1, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	4b3c      	ldr	r3, [pc, #240]	@ (80069f0 <HMI_Stop_W+0x11fc>)
 8006900:	f7fb fdca 	bl	8002498 <__aeabi_dmul>
 8006904:	0002      	movs	r2, r0
 8006906:	000b      	movs	r3, r1
 8006908:	0010      	movs	r0, r2
 800690a:	0019      	movs	r1, r3
 800690c:	2200      	movs	r2, #0
 800690e:	4b39      	ldr	r3, [pc, #228]	@ (80069f4 <HMI_Stop_W+0x1200>)
 8006910:	f7fb f97e 	bl	8001c10 <__aeabi_ddiv>
 8006914:	0002      	movs	r2, r0
 8006916:	000b      	movs	r3, r1
 8006918:	0010      	movs	r0, r2
 800691a:	0019      	movs	r1, r3
 800691c:	f7f9 fe2a 	bl	8000574 <__aeabi_d2uiz>
 8006920:	0002      	movs	r2, r0
 8006922:	4b35      	ldr	r3, [pc, #212]	@ (80069f8 <HMI_Stop_W+0x1204>)
 8006924:	601a      	str	r2, [r3, #0]
		Dec2ASC(nbtime_d, nbtime);
 8006926:	4b34      	ldr	r3, [pc, #208]	@ (80069f8 <HMI_Stop_W+0x1204>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a34      	ldr	r2, [pc, #208]	@ (80069fc <HMI_Stop_W+0x1208>)
 800692c:	0011      	movs	r1, r2
 800692e:	0018      	movs	r0, r3
 8006930:	f004 f8da 	bl	800aae8 <Dec2ASC>
		if (nbtime[2] == 0x30)
 8006934:	4b31      	ldr	r3, [pc, #196]	@ (80069fc <HMI_Stop_W+0x1208>)
 8006936:	789b      	ldrb	r3, [r3, #2]
 8006938:	2b30      	cmp	r3, #48	@ 0x30
 800693a:	d104      	bne.n	8006946 <HMI_Stop_W+0x1152>
			SD_buffer[82] = 0x20;
 800693c:	4b30      	ldr	r3, [pc, #192]	@ (8006a00 <HMI_Stop_W+0x120c>)
 800693e:	2252      	movs	r2, #82	@ 0x52
 8006940:	2120      	movs	r1, #32
 8006942:	5499      	strb	r1, [r3, r2]
 8006944:	e004      	b.n	8006950 <HMI_Stop_W+0x115c>
		else
			SD_buffer[82] = nbtime[2];
 8006946:	4b2d      	ldr	r3, [pc, #180]	@ (80069fc <HMI_Stop_W+0x1208>)
 8006948:	7899      	ldrb	r1, [r3, #2]
 800694a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a00 <HMI_Stop_W+0x120c>)
 800694c:	2252      	movs	r2, #82	@ 0x52
 800694e:	5499      	strb	r1, [r3, r2]
		if (nbtime[3] == 0x30)
 8006950:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <HMI_Stop_W+0x1208>)
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	2b30      	cmp	r3, #48	@ 0x30
 8006956:	d104      	bne.n	8006962 <HMI_Stop_W+0x116e>
			SD_buffer[83] = 0x20;
 8006958:	4b29      	ldr	r3, [pc, #164]	@ (8006a00 <HMI_Stop_W+0x120c>)
 800695a:	2253      	movs	r2, #83	@ 0x53
 800695c:	2120      	movs	r1, #32
 800695e:	5499      	strb	r1, [r3, r2]
 8006960:	e004      	b.n	800696c <HMI_Stop_W+0x1178>
		else
			SD_buffer[83] = nbtime[3];
 8006962:	4b26      	ldr	r3, [pc, #152]	@ (80069fc <HMI_Stop_W+0x1208>)
 8006964:	78d9      	ldrb	r1, [r3, #3]
 8006966:	4b26      	ldr	r3, [pc, #152]	@ (8006a00 <HMI_Stop_W+0x120c>)
 8006968:	2253      	movs	r2, #83	@ 0x53
 800696a:	5499      	strb	r1, [r3, r2]
		if (nbtime[4] == 0x30)
 800696c:	4b23      	ldr	r3, [pc, #140]	@ (80069fc <HMI_Stop_W+0x1208>)
 800696e:	791b      	ldrb	r3, [r3, #4]
 8006970:	2b30      	cmp	r3, #48	@ 0x30
 8006972:	d147      	bne.n	8006a04 <HMI_Stop_W+0x1210>
			SD_buffer[84] = 0x20;
 8006974:	4b22      	ldr	r3, [pc, #136]	@ (8006a00 <HMI_Stop_W+0x120c>)
 8006976:	2254      	movs	r2, #84	@ 0x54
 8006978:	2120      	movs	r1, #32
 800697a:	5499      	strb	r1, [r3, r2]
 800697c:	e047      	b.n	8006a0e <HMI_Stop_W+0x121a>
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	200033a4 	.word	0x200033a4
 8006984:	20000a60 	.word	0x20000a60
 8006988:	200033ca 	.word	0x200033ca
 800698c:	200033cb 	.word	0x200033cb
 8006990:	20000484 	.word	0x20000484
 8006994:	200033cc 	.word	0x200033cc
 8006998:	200033b0 	.word	0x200033b0
 800699c:	20000424 	.word	0x20000424
 80069a0:	20000bec 	.word	0x20000bec
 80069a4:	20000429 	.word	0x20000429
 80069a8:	20000444 	.word	0x20000444
 80069ac:	20000449 	.word	0x20000449
 80069b0:	20000464 	.word	0x20000464
 80069b4:	20000469 	.word	0x20000469
 80069b8:	20000a40 	.word	0x20000a40
 80069bc:	20000a44 	.word	0x20000a44
 80069c0:	20000b20 	.word	0x20000b20
 80069c4:	20000a48 	.word	0x20000a48
 80069c8:	20000d18 	.word	0x20000d18
 80069cc:	20000d1c 	.word	0x20000d1c
 80069d0:	20000a4c 	.word	0x20000a4c
 80069d4:	20000a54 	.word	0x20000a54
 80069d8:	20000a58 	.word	0x20000a58
 80069dc:	2000022b 	.word	0x2000022b
 80069e0:	20000b30 	.word	0x20000b30
 80069e4:	20000e48 	.word	0x20000e48
 80069e8:	20000e4c 	.word	0x20000e4c
 80069ec:	404e0000 	.word	0x404e0000
 80069f0:	408f4000 	.word	0x408f4000
 80069f4:	40240000 	.word	0x40240000
 80069f8:	20000e40 	.word	0x20000e40
 80069fc:	20000ea0 	.word	0x20000ea0
 8006a00:	20003330 	.word	0x20003330
		else
			SD_buffer[84] = nbtime[4];
 8006a04:	4bbc      	ldr	r3, [pc, #752]	@ (8006cf8 <HMI_Stop_W+0x1504>)
 8006a06:	7919      	ldrb	r1, [r3, #4]
 8006a08:	4bbc      	ldr	r3, [pc, #752]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a0a:	2254      	movs	r2, #84	@ 0x54
 8006a0c:	5499      	strb	r1, [r3, r2]

		SD_buffer[85] = nbtime[5];
 8006a0e:	4bba      	ldr	r3, [pc, #744]	@ (8006cf8 <HMI_Stop_W+0x1504>)
 8006a10:	7959      	ldrb	r1, [r3, #5]
 8006a12:	4bba      	ldr	r3, [pc, #744]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a14:	2255      	movs	r2, #85	@ 0x55
 8006a16:	5499      	strb	r1, [r3, r2]
		SD_buffer[86] = 0x2E;
 8006a18:	4bb8      	ldr	r3, [pc, #736]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a1a:	2256      	movs	r2, #86	@ 0x56
 8006a1c:	212e      	movs	r1, #46	@ 0x2e
 8006a1e:	5499      	strb	r1, [r3, r2]
		SD_buffer[87] = nbtime[6];
 8006a20:	4bb5      	ldr	r3, [pc, #724]	@ (8006cf8 <HMI_Stop_W+0x1504>)
 8006a22:	7999      	ldrb	r1, [r3, #6]
 8006a24:	4bb5      	ldr	r3, [pc, #724]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a26:	2257      	movs	r2, #87	@ 0x57
 8006a28:	5499      	strb	r1, [r3, r2]
		SD_buffer[88] = nbtime[7];
 8006a2a:	4bb3      	ldr	r3, [pc, #716]	@ (8006cf8 <HMI_Stop_W+0x1504>)
 8006a2c:	79d9      	ldrb	r1, [r3, #7]
 8006a2e:	4bb3      	ldr	r3, [pc, #716]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a30:	2258      	movs	r2, #88	@ 0x58
 8006a32:	5499      	strb	r1, [r3, r2]
		SD_buffer[89] = 0x20;
 8006a34:	4bb1      	ldr	r3, [pc, #708]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a36:	2259      	movs	r2, #89	@ 0x59
 8006a38:	2120      	movs	r1, #32
 8006a3a:	5499      	strb	r1, [r3, r2]
		nbtime_counter = 0;
 8006a3c:	4bb0      	ldr	r3, [pc, #704]	@ (8006d00 <HMI_Stop_W+0x150c>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
		//start date time
		SD_buffer[14] = 0x32;
 8006a42:	4bae      	ldr	r3, [pc, #696]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a44:	2232      	movs	r2, #50	@ 0x32
 8006a46:	739a      	strb	r2, [r3, #14]
		SD_buffer[15] = 0x30;
 8006a48:	4bac      	ldr	r3, [pc, #688]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a4a:	2230      	movs	r2, #48	@ 0x30
 8006a4c:	73da      	strb	r2, [r3, #15]
		SD_buffer[16] = hmi_rtc[8];
 8006a4e:	4bad      	ldr	r3, [pc, #692]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a50:	7a1a      	ldrb	r2, [r3, #8]
 8006a52:	4baa      	ldr	r3, [pc, #680]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a54:	741a      	strb	r2, [r3, #16]
		SD_buffer[17] = hmi_rtc[9];
 8006a56:	4bab      	ldr	r3, [pc, #684]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a58:	7a5a      	ldrb	r2, [r3, #9]
 8006a5a:	4ba8      	ldr	r3, [pc, #672]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a5c:	745a      	strb	r2, [r3, #17]
		SD_buffer[18] = 0x2D;
 8006a5e:	4ba7      	ldr	r3, [pc, #668]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a60:	222d      	movs	r2, #45	@ 0x2d
 8006a62:	749a      	strb	r2, [r3, #18]
		SD_buffer[19] = hmi_rtc[11];
 8006a64:	4ba7      	ldr	r3, [pc, #668]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a66:	7ada      	ldrb	r2, [r3, #11]
 8006a68:	4ba4      	ldr	r3, [pc, #656]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a6a:	74da      	strb	r2, [r3, #19]
		SD_buffer[20] = hmi_rtc[12];
 8006a6c:	4ba5      	ldr	r3, [pc, #660]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a6e:	7b1a      	ldrb	r2, [r3, #12]
 8006a70:	4ba2      	ldr	r3, [pc, #648]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a72:	751a      	strb	r2, [r3, #20]
		SD_buffer[21] = 0x2D;
 8006a74:	4ba1      	ldr	r3, [pc, #644]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a76:	222d      	movs	r2, #45	@ 0x2d
 8006a78:	755a      	strb	r2, [r3, #21]
		SD_buffer[22] = hmi_rtc[14];
 8006a7a:	4ba2      	ldr	r3, [pc, #648]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a7c:	7b9a      	ldrb	r2, [r3, #14]
 8006a7e:	4b9f      	ldr	r3, [pc, #636]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a80:	759a      	strb	r2, [r3, #22]
		SD_buffer[23] = hmi_rtc[15];
 8006a82:	4ba0      	ldr	r3, [pc, #640]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a84:	7bda      	ldrb	r2, [r3, #15]
 8006a86:	4b9d      	ldr	r3, [pc, #628]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a88:	75da      	strb	r2, [r3, #23]
		SD_buffer[24] = 0x20;
 8006a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	761a      	strb	r2, [r3, #24]
		SD_buffer[25] = hmi_rtc[17];
 8006a90:	4b9c      	ldr	r3, [pc, #624]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a92:	7c5a      	ldrb	r2, [r3, #17]
 8006a94:	4b99      	ldr	r3, [pc, #612]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a96:	765a      	strb	r2, [r3, #25]
		SD_buffer[26] = hmi_rtc[18];
 8006a98:	4b9a      	ldr	r3, [pc, #616]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006a9a:	7c9a      	ldrb	r2, [r3, #18]
 8006a9c:	4b97      	ldr	r3, [pc, #604]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006a9e:	769a      	strb	r2, [r3, #26]
		SD_buffer[27] = 0x3A;
 8006aa0:	4b96      	ldr	r3, [pc, #600]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006aa2:	223a      	movs	r2, #58	@ 0x3a
 8006aa4:	76da      	strb	r2, [r3, #27]
		SD_buffer[28] = hmi_rtc[20];
 8006aa6:	4b97      	ldr	r3, [pc, #604]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006aa8:	7d1a      	ldrb	r2, [r3, #20]
 8006aaa:	4b94      	ldr	r3, [pc, #592]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006aac:	771a      	strb	r2, [r3, #28]
		SD_buffer[29] = hmi_rtc[21];
 8006aae:	4b95      	ldr	r3, [pc, #596]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006ab0:	7d5a      	ldrb	r2, [r3, #21]
 8006ab2:	4b92      	ldr	r3, [pc, #584]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006ab4:	775a      	strb	r2, [r3, #29]
		SD_buffer[30] = 0x3A;
 8006ab6:	4b91      	ldr	r3, [pc, #580]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006ab8:	223a      	movs	r2, #58	@ 0x3a
 8006aba:	779a      	strb	r2, [r3, #30]
		SD_buffer[31] = hmi_rtc[23];
 8006abc:	4b91      	ldr	r3, [pc, #580]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006abe:	7dda      	ldrb	r2, [r3, #23]
 8006ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006ac2:	77da      	strb	r2, [r3, #31]
		SD_buffer[32] = hmi_rtc[24];
 8006ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8006d04 <HMI_Stop_W+0x1510>)
 8006ac6:	7e19      	ldrb	r1, [r3, #24]
 8006ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006aca:	2220      	movs	r2, #32
 8006acc:	5499      	strb	r1, [r3, r2]
		SD_buffer[33] = 0x20;
 8006ace:	4b8b      	ldr	r3, [pc, #556]	@ (8006cfc <HMI_Stop_W+0x1508>)
 8006ad0:	2221      	movs	r2, #33	@ 0x21
 8006ad2:	2120      	movs	r1, #32
 8006ad4:	5499      	strb	r1, [r3, r2]
	}

	printer_rd();
 8006ad6:	f000 ff39 	bl	800794c <printer_rd>

	unsigned char Dis_x10_A[4];
	Dis_x10 = Dis * 10;
 8006ada:	4b8b      	ldr	r3, [pc, #556]	@ (8006d08 <HMI_Stop_W+0x1514>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	0013      	movs	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	001a      	movs	r2, r3
 8006ae8:	4b88      	ldr	r3, [pc, #544]	@ (8006d0c <HMI_Stop_W+0x1518>)
 8006aea:	601a      	str	r2, [r3, #0]
	Long_to_byte(Dis_x10, Dis_x10_A);
 8006aec:	4b87      	ldr	r3, [pc, #540]	@ (8006d0c <HMI_Stop_W+0x1518>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2474      	movs	r4, #116	@ 0x74
 8006af2:	193a      	adds	r2, r7, r4
 8006af4:	0011      	movs	r1, r2
 8006af6:	0018      	movs	r0, r3
 8006af8:	f001 f8a8 	bl	8007c4c <Long_to_byte>
	data2[0] = Dis_x10_A[0];
 8006afc:	0021      	movs	r1, r4
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	4b83      	ldr	r3, [pc, #524]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b04:	701a      	strb	r2, [r3, #0]
	data2[1] = Dis_x10_A[1];
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	785a      	ldrb	r2, [r3, #1]
 8006b0a:	4b81      	ldr	r3, [pc, #516]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b0c:	705a      	strb	r2, [r3, #1]
	data2[2] = Dis_x10_A[2];
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	789a      	ldrb	r2, [r3, #2]
 8006b12:	4b7f      	ldr	r3, [pc, #508]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b14:	709a      	strb	r2, [r3, #2]
	data2[3] = Dis_x10_A[3];
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	78da      	ldrb	r2, [r3, #3]
 8006b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b1c:	70da      	strb	r2, [r3, #3]
	//total_fare - 4 bytes
	unsigned char Final_price_x10_A[4];
	Final_price_x10 = Final_price * 10;
 8006b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8006d14 <HMI_Stop_W+0x1520>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	0013      	movs	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	001a      	movs	r2, r3
 8006b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8006d18 <HMI_Stop_W+0x1524>)
 8006b2e:	601a      	str	r2, [r3, #0]
	Long_to_byte(Final_price_x10, Final_price_x10_A);
 8006b30:	4b79      	ldr	r3, [pc, #484]	@ (8006d18 <HMI_Stop_W+0x1524>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2470      	movs	r4, #112	@ 0x70
 8006b36:	193a      	adds	r2, r7, r4
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f001 f886 	bl	8007c4c <Long_to_byte>
	data2[4] = Final_price_x10_A[0];
 8006b40:	0021      	movs	r1, r4
 8006b42:	187b      	adds	r3, r7, r1
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	4b72      	ldr	r3, [pc, #456]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b48:	711a      	strb	r2, [r3, #4]
	data2[5] = Final_price_x10_A[1];
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	785a      	ldrb	r2, [r3, #1]
 8006b4e:	4b70      	ldr	r3, [pc, #448]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b50:	715a      	strb	r2, [r3, #5]
	data2[6] = Final_price_x10_A[2];
 8006b52:	187b      	adds	r3, r7, r1
 8006b54:	789a      	ldrb	r2, [r3, #2]
 8006b56:	4b6e      	ldr	r3, [pc, #440]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b58:	719a      	strb	r2, [r3, #6]
	data2[7] = Final_price_x10_A[3];
 8006b5a:	187b      	adds	r3, r7, r1
 8006b5c:	78da      	ldrb	r2, [r3, #3]
 8006b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b60:	71da      	strb	r2, [r3, #7]
	//end - 6 bytes
	RTC_date = PCF2129_getDate();
 8006b62:	4c6e      	ldr	r4, [pc, #440]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006b64:	003b      	movs	r3, r7
 8006b66:	0018      	movs	r0, r3
 8006b68:	f005 fda6 	bl	800c6b8 <PCF2129_getDate>
 8006b6c:	003b      	movs	r3, r7
 8006b6e:	0020      	movs	r0, r4
 8006b70:	0019      	movs	r1, r3
 8006b72:	2358      	movs	r3, #88	@ 0x58
 8006b74:	001a      	movs	r2, r3
 8006b76:	f011 fd59 	bl	801862c <memcpy>
	year = RTC_date.date.y;
 8006b7a:	4b68      	ldr	r3, [pc, #416]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006b7c:	224d      	movs	r2, #77	@ 0x4d
 8006b7e:	5c9b      	ldrb	r3, [r3, r2]
 8006b80:	001a      	movs	r2, r3
 8006b82:	4b67      	ldr	r3, [pc, #412]	@ (8006d20 <HMI_Stop_W+0x152c>)
 8006b84:	801a      	strh	r2, [r3, #0]
	data2[8] = (uint8_t)(year & 0xFF);
 8006b86:	4b66      	ldr	r3, [pc, #408]	@ (8006d20 <HMI_Stop_W+0x152c>)
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	4b60      	ldr	r3, [pc, #384]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006b8e:	721a      	strb	r2, [r3, #8]
	month = RTC_date.date.m;
 8006b90:	4b62      	ldr	r3, [pc, #392]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006b92:	224e      	movs	r2, #78	@ 0x4e
 8006b94:	5c9b      	ldrb	r3, [r3, r2]
 8006b96:	001a      	movs	r2, r3
 8006b98:	4b62      	ldr	r3, [pc, #392]	@ (8006d24 <HMI_Stop_W+0x1530>)
 8006b9a:	801a      	strh	r2, [r3, #0]
	data2[9] = (uint8_t)(month & 0xFF);
 8006b9c:	4b61      	ldr	r3, [pc, #388]	@ (8006d24 <HMI_Stop_W+0x1530>)
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006ba4:	725a      	strb	r2, [r3, #9]
	day = RTC_date.date.d;
 8006ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006ba8:	224f      	movs	r2, #79	@ 0x4f
 8006baa:	5c9b      	ldrb	r3, [r3, r2]
 8006bac:	001a      	movs	r2, r3
 8006bae:	4b5e      	ldr	r3, [pc, #376]	@ (8006d28 <HMI_Stop_W+0x1534>)
 8006bb0:	801a      	strh	r2, [r3, #0]
	data2[10] = (uint8_t)(day & 0xFF);
 8006bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d28 <HMI_Stop_W+0x1534>)
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	4b55      	ldr	r3, [pc, #340]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006bba:	729a      	strb	r2, [r3, #10]
	hour = RTC_date.date.hh;
 8006bbc:	4b57      	ldr	r3, [pc, #348]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006bbe:	2251      	movs	r2, #81	@ 0x51
 8006bc0:	5c9b      	ldrb	r3, [r3, r2]
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	4b59      	ldr	r3, [pc, #356]	@ (8006d2c <HMI_Stop_W+0x1538>)
 8006bc6:	801a      	strh	r2, [r3, #0]
	data2[11] = (uint8_t)(hour & 0xFF);
 8006bc8:	4b58      	ldr	r3, [pc, #352]	@ (8006d2c <HMI_Stop_W+0x1538>)
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4b50      	ldr	r3, [pc, #320]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006bd0:	72da      	strb	r2, [r3, #11]
	minute = RTC_date.date.mm;
 8006bd2:	4b52      	ldr	r3, [pc, #328]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006bd4:	2252      	movs	r2, #82	@ 0x52
 8006bd6:	5c9b      	ldrb	r3, [r3, r2]
 8006bd8:	001a      	movs	r2, r3
 8006bda:	4b55      	ldr	r3, [pc, #340]	@ (8006d30 <HMI_Stop_W+0x153c>)
 8006bdc:	801a      	strh	r2, [r3, #0]
	data2[12] = (uint8_t)(minute & 0xFF);
 8006bde:	4b54      	ldr	r3, [pc, #336]	@ (8006d30 <HMI_Stop_W+0x153c>)
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006be6:	731a      	strb	r2, [r3, #12]
	second = RTC_date.date.ss;
 8006be8:	4b4c      	ldr	r3, [pc, #304]	@ (8006d1c <HMI_Stop_W+0x1528>)
 8006bea:	2253      	movs	r2, #83	@ 0x53
 8006bec:	5c9b      	ldrb	r3, [r3, r2]
 8006bee:	001a      	movs	r2, r3
 8006bf0:	4b50      	ldr	r3, [pc, #320]	@ (8006d34 <HMI_Stop_W+0x1540>)
 8006bf2:	801a      	strh	r2, [r3, #0]
	data2[13] = (uint8_t)(second & 0xFF);
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8006d34 <HMI_Stop_W+0x1540>)
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	4b45      	ldr	r3, [pc, #276]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006bfc:	735a      	strb	r2, [r3, #13]

	//paid_km - 4 bytes
	fare_km_x100 = (int)(fare_km * 100);
 8006bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8006d38 <HMI_Stop_W+0x1544>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	494e      	ldr	r1, [pc, #312]	@ (8006d3c <HMI_Stop_W+0x1548>)
 8006c04:	1c18      	adds	r0, r3, #0
 8006c06:	f7fa f90f 	bl	8000e28 <__aeabi_fmul>
 8006c0a:	1c03      	adds	r3, r0, #0
 8006c0c:	1c18      	adds	r0, r3, #0
 8006c0e:	f7fa fbed 	bl	80013ec <__aeabi_f2iz>
 8006c12:	0003      	movs	r3, r0
 8006c14:	001a      	movs	r2, r3
 8006c16:	4b4a      	ldr	r3, [pc, #296]	@ (8006d40 <HMI_Stop_W+0x154c>)
 8006c18:	601a      	str	r2, [r3, #0]
	unsigned char temp[4];
	Long_to_byte(fare_km_x100, temp);
 8006c1a:	4b49      	ldr	r3, [pc, #292]	@ (8006d40 <HMI_Stop_W+0x154c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	246c      	movs	r4, #108	@ 0x6c
 8006c20:	193a      	adds	r2, r7, r4
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f001 f811 	bl	8007c4c <Long_to_byte>
	data2[14] = temp[0];
 8006c2a:	0021      	movs	r1, r4
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	4b37      	ldr	r3, [pc, #220]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c32:	739a      	strb	r2, [r3, #14]
	data2[15] = temp[1];
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	785a      	ldrb	r2, [r3, #1]
 8006c38:	4b35      	ldr	r3, [pc, #212]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c3a:	73da      	strb	r2, [r3, #15]
	data2[16] = temp[2];
 8006c3c:	187b      	adds	r3, r7, r1
 8006c3e:	789a      	ldrb	r2, [r3, #2]
 8006c40:	4b33      	ldr	r3, [pc, #204]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c42:	741a      	strb	r2, [r3, #16]
	data2[17] = temp[3];
 8006c44:	187b      	adds	r3, r7, r1
 8006c46:	78da      	ldrb	r2, [r3, #3]
 8006c48:	4b31      	ldr	r3, [pc, #196]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c4a:	745a      	strb	r2, [r3, #17]
	//wait_time - 4 bytes
	fare_min_x100 = (int)(fare_min * 100);
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d44 <HMI_Stop_W+0x1550>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	493a      	ldr	r1, [pc, #232]	@ (8006d3c <HMI_Stop_W+0x1548>)
 8006c52:	1c18      	adds	r0, r3, #0
 8006c54:	f7fa f8e8 	bl	8000e28 <__aeabi_fmul>
 8006c58:	1c03      	adds	r3, r0, #0
 8006c5a:	1c18      	adds	r0, r3, #0
 8006c5c:	f7fa fbc6 	bl	80013ec <__aeabi_f2iz>
 8006c60:	0003      	movs	r3, r0
 8006c62:	001a      	movs	r2, r3
 8006c64:	4b38      	ldr	r3, [pc, #224]	@ (8006d48 <HMI_Stop_W+0x1554>)
 8006c66:	601a      	str	r2, [r3, #0]
	unsigned char temp2[4];
	Long_to_byte(fare_min_x100, temp2);
 8006c68:	4b37      	ldr	r3, [pc, #220]	@ (8006d48 <HMI_Stop_W+0x1554>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2468      	movs	r4, #104	@ 0x68
 8006c6e:	193a      	adds	r2, r7, r4
 8006c70:	0011      	movs	r1, r2
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 ffea 	bl	8007c4c <Long_to_byte>
	data2[18] = temp2[0];
 8006c78:	0021      	movs	r1, r4
 8006c7a:	187b      	adds	r3, r7, r1
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c80:	749a      	strb	r2, [r3, #18]
	data2[19] = temp2[1];
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	785a      	ldrb	r2, [r3, #1]
 8006c86:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c88:	74da      	strb	r2, [r3, #19]
	data2[20] = temp2[2];
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	789a      	ldrb	r2, [r3, #2]
 8006c8e:	4b20      	ldr	r3, [pc, #128]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c90:	751a      	strb	r2, [r3, #20]
	data2[21] = temp2[3];
 8006c92:	187b      	adds	r3, r7, r1
 8006c94:	78da      	ldrb	r2, [r3, #3]
 8006c96:	4b1e      	ldr	r3, [pc, #120]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006c98:	755a      	strb	r2, [r3, #21]
	//extra - 4 bytes
	Addition_x10 = Addition * 10;
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d4c <HMI_Stop_W+0x1558>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	0013      	movs	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	189b      	adds	r3, r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	4b29      	ldr	r3, [pc, #164]	@ (8006d50 <HMI_Stop_W+0x155c>)
 8006caa:	601a      	str	r2, [r3, #0]
	unsigned char temp3[4];
	Long_to_byte(Addition_x10, temp3);
 8006cac:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <HMI_Stop_W+0x155c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2464      	movs	r4, #100	@ 0x64
 8006cb2:	193a      	adds	r2, r7, r4
 8006cb4:	0011      	movs	r1, r2
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 ffc8 	bl	8007c4c <Long_to_byte>
	data2[22] = temp3[0];
 8006cbc:	0021      	movs	r1, r4
 8006cbe:	187b      	adds	r3, r7, r1
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006cc4:	759a      	strb	r2, [r3, #22]
	data2[23] = temp3[1];
 8006cc6:	187b      	adds	r3, r7, r1
 8006cc8:	785a      	ldrb	r2, [r3, #1]
 8006cca:	4b11      	ldr	r3, [pc, #68]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006ccc:	75da      	strb	r2, [r3, #23]
	data2[24] = temp3[2];
 8006cce:	187b      	adds	r3, r7, r1
 8006cd0:	789a      	ldrb	r2, [r3, #2]
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006cd4:	761a      	strb	r2, [r3, #24]
	data2[25] = temp3[3];
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	78da      	ldrb	r2, [r3, #3]
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <HMI_Stop_W+0x151c>)
 8006cdc:	765a      	strb	r2, [r3, #25]
	//reserved - 4 bytes
	Flag_Control_Down();
 8006cde:	f003 fe21 	bl	800a924 <Flag_Control_Down>
	flag_sp = 0;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8006d54 <HMI_Stop_W+0x1560>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
	cnt = 0;
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d58 <HMI_Stop_W+0x1564>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
}
 8006cee:	46c0      	nop			@ (mov r8, r8)
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b021      	add	sp, #132	@ 0x84
 8006cf4:	bd90      	pop	{r4, r7, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	20000ea0 	.word	0x20000ea0
 8006cfc:	20003330 	.word	0x20003330
 8006d00:	20000e4c 	.word	0x20000e4c
 8006d04:	2000007c 	.word	0x2000007c
 8006d08:	20000a54 	.word	0x20000a54
 8006d0c:	20000b1c 	.word	0x20000b1c
 8006d10:	20000b3c 	.word	0x20000b3c
 8006d14:	20000a40 	.word	0x20000a40
 8006d18:	20000b20 	.word	0x20000b20
 8006d1c:	20000c14 	.word	0x20000c14
 8006d20:	20000c6c 	.word	0x20000c6c
 8006d24:	20000c6e 	.word	0x20000c6e
 8006d28:	20000c70 	.word	0x20000c70
 8006d2c:	20000c72 	.word	0x20000c72
 8006d30:	20000c74 	.word	0x20000c74
 8006d34:	20000c76 	.word	0x20000c76
 8006d38:	20000d20 	.word	0x20000d20
 8006d3c:	42c80000 	.word	0x42c80000
 8006d40:	20000b24 	.word	0x20000b24
 8006d44:	20000d24 	.word	0x20000d24
 8006d48:	20000b28 	.word	0x20000b28
 8006d4c:	20000a60 	.word	0x20000a60
 8006d50:	20000b2c 	.word	0x20000b2c
 8006d54:	20000485 	.word	0x20000485
 8006d58:	20000ce8 	.word	0x20000ce8

08006d5c <HMI_Vacant_W>:

void HMI_Vacant_W(void)
{
 8006d5c:	b5b0      	push	{r4, r5, r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 8006d62:	49ee      	ldr	r1, [pc, #952]	@ (800711c <HMI_Vacant_W+0x3c0>)
 8006d64:	48ee      	ldr	r0, [pc, #952]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006d66:	2310      	movs	r3, #16
 8006d68:	2208      	movs	r2, #8
 8006d6a:	f00c f8db 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f006 fe52 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 8006d74:	49eb      	ldr	r1, [pc, #940]	@ (8007124 <HMI_Vacant_W+0x3c8>)
 8006d76:	48ea      	ldr	r0, [pc, #936]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006d78:	2310      	movs	r3, #16
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	f00c f8d2 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8006d80:	2001      	movs	r0, #1
 8006d82:	f006 fe49 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_On, 8, 0x10);
 8006d86:	49e8      	ldr	r1, [pc, #928]	@ (8007128 <HMI_Vacant_W+0x3cc>)
 8006d88:	48e5      	ldr	r0, [pc, #916]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006d8a:	2310      	movs	r3, #16
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	f00c f8c9 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8006d92:	2001      	movs	r0, #1
 8006d94:	f006 fe40 	bl	800da18 <HAL_Delay>

	//record eeprom total
	tkm_d += Dis;
 8006d98:	4be4      	ldr	r3, [pc, #912]	@ (800712c <HMI_Vacant_W+0x3d0>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4be4      	ldr	r3, [pc, #912]	@ (8007130 <HMI_Vacant_W+0x3d4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	18d2      	adds	r2, r2, r3
 8006da2:	4be2      	ldr	r3, [pc, #904]	@ (800712c <HMI_Vacant_W+0x3d0>)
 8006da4:	601a      	str	r2, [r3, #0]
	pkm_d += fare_km_x;
 8006da6:	4be3      	ldr	r3, [pc, #908]	@ (8007134 <HMI_Vacant_W+0x3d8>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4be3      	ldr	r3, [pc, #908]	@ (8007138 <HMI_Vacant_W+0x3dc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	18d2      	adds	r2, r2, r3
 8006db0:	4be0      	ldr	r3, [pc, #896]	@ (8007134 <HMI_Vacant_W+0x3d8>)
 8006db2:	601a      	str	r2, [r3, #0]
	tfare_d += Final_price;
 8006db4:	4be1      	ldr	r3, [pc, #900]	@ (800713c <HMI_Vacant_W+0x3e0>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4be1      	ldr	r3, [pc, #900]	@ (8007140 <HMI_Vacant_W+0x3e4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	18d2      	adds	r2, r2, r3
 8006dbe:	4bdf      	ldr	r3, [pc, #892]	@ (800713c <HMI_Vacant_W+0x3e0>)
 8006dc0:	601a      	str	r2, [r3, #0]
	tsub_d += Addition;
 8006dc2:	4be0      	ldr	r3, [pc, #896]	@ (8007144 <HMI_Vacant_W+0x3e8>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4be0      	ldr	r3, [pc, #896]	@ (8007148 <HMI_Vacant_W+0x3ec>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	18d2      	adds	r2, r2, r3
 8006dcc:	4bdd      	ldr	r3, [pc, #884]	@ (8007144 <HMI_Vacant_W+0x3e8>)
 8006dce:	601a      	str	r2, [r3, #0]
	cfare_d += Final_price;
 8006dd0:	4bde      	ldr	r3, [pc, #888]	@ (800714c <HMI_Vacant_W+0x3f0>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	4bda      	ldr	r3, [pc, #872]	@ (8007140 <HMI_Vacant_W+0x3e4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	18d2      	adds	r2, r2, r3
 8006dda:	4bdc      	ldr	r3, [pc, #880]	@ (800714c <HMI_Vacant_W+0x3f0>)
 8006ddc:	601a      	str	r2, [r3, #0]
	csub_d += Addition;
 8006dde:	4bdc      	ldr	r3, [pc, #880]	@ (8007150 <HMI_Vacant_W+0x3f4>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4bd9      	ldr	r3, [pc, #868]	@ (8007148 <HMI_Vacant_W+0x3ec>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	18d2      	adds	r2, r2, r3
 8006de8:	4bd9      	ldr	r3, [pc, #868]	@ (8007150 <HMI_Vacant_W+0x3f4>)
 8006dea:	601a      	str	r2, [r3, #0]
	tflag_d += flag_count;
 8006dec:	4bd9      	ldr	r3, [pc, #868]	@ (8007154 <HMI_Vacant_W+0x3f8>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	001a      	movs	r2, r3
 8006df2:	4bd9      	ldr	r3, [pc, #868]	@ (8007158 <HMI_Vacant_W+0x3fc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	18d2      	adds	r2, r2, r3
 8006df8:	4bd7      	ldr	r3, [pc, #860]	@ (8007158 <HMI_Vacant_W+0x3fc>)
 8006dfa:	601a      	str	r2, [r3, #0]
	cflag_d += flag_count;
 8006dfc:	4bd5      	ldr	r3, [pc, #852]	@ (8007154 <HMI_Vacant_W+0x3f8>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	001a      	movs	r2, r3
 8006e02:	4bd6      	ldr	r3, [pc, #856]	@ (800715c <HMI_Vacant_W+0x400>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	18d2      	adds	r2, r2, r3
 8006e08:	4bd4      	ldr	r3, [pc, #848]	@ (800715c <HMI_Vacant_W+0x400>)
 8006e0a:	601a      	str	r2, [r3, #0]
	tpulse_d += change_count;
 8006e0c:	4bd4      	ldr	r3, [pc, #848]	@ (8007160 <HMI_Vacant_W+0x404>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	001a      	movs	r2, r3
 8006e12:	4bd4      	ldr	r3, [pc, #848]	@ (8007164 <HMI_Vacant_W+0x408>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	18d2      	adds	r2, r2, r3
 8006e18:	4bd2      	ldr	r3, [pc, #840]	@ (8007164 <HMI_Vacant_W+0x408>)
 8006e1a:	601a      	str	r2, [r3, #0]
	ttime_d += ((ttime_counter / 60.0)* 1000) / 10; //changed
 8006e1c:	4bd2      	ldr	r3, [pc, #840]	@ (8007168 <HMI_Vacant_W+0x40c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7fc fa07 	bl	8003234 <__aeabi_ui2d>
 8006e26:	0004      	movs	r4, r0
 8006e28:	000d      	movs	r5, r1
 8006e2a:	4bd0      	ldr	r3, [pc, #832]	@ (800716c <HMI_Vacant_W+0x410>)
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f7fc f9d2 	bl	80031d8 <__aeabi_i2d>
 8006e34:	2200      	movs	r2, #0
 8006e36:	4bce      	ldr	r3, [pc, #824]	@ (8007170 <HMI_Vacant_W+0x414>)
 8006e38:	f7fa feea 	bl	8001c10 <__aeabi_ddiv>
 8006e3c:	0002      	movs	r2, r0
 8006e3e:	000b      	movs	r3, r1
 8006e40:	0010      	movs	r0, r2
 8006e42:	0019      	movs	r1, r3
 8006e44:	2200      	movs	r2, #0
 8006e46:	4bcb      	ldr	r3, [pc, #812]	@ (8007174 <HMI_Vacant_W+0x418>)
 8006e48:	f7fb fb26 	bl	8002498 <__aeabi_dmul>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	000b      	movs	r3, r1
 8006e50:	0010      	movs	r0, r2
 8006e52:	0019      	movs	r1, r3
 8006e54:	2200      	movs	r2, #0
 8006e56:	4bc8      	ldr	r3, [pc, #800]	@ (8007178 <HMI_Vacant_W+0x41c>)
 8006e58:	f7fa feda 	bl	8001c10 <__aeabi_ddiv>
 8006e5c:	0002      	movs	r2, r0
 8006e5e:	000b      	movs	r3, r1
 8006e60:	0020      	movs	r0, r4
 8006e62:	0029      	movs	r1, r5
 8006e64:	f7fa fb70 	bl	8001548 <__aeabi_dadd>
 8006e68:	0002      	movs	r2, r0
 8006e6a:	000b      	movs	r3, r1
 8006e6c:	0010      	movs	r0, r2
 8006e6e:	0019      	movs	r1, r3
 8006e70:	f7f9 fb80 	bl	8000574 <__aeabi_d2uiz>
 8006e74:	0002      	movs	r2, r0
 8006e76:	4bbc      	ldr	r3, [pc, #752]	@ (8007168 <HMI_Vacant_W+0x40c>)
 8006e78:	601a      	str	r2, [r3, #0]

	Dec2ASC(tkm_d, tkm);
 8006e7a:	4bac      	ldr	r3, [pc, #688]	@ (800712c <HMI_Vacant_W+0x3d0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4abf      	ldr	r2, [pc, #764]	@ (800717c <HMI_Vacant_W+0x420>)
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f003 fe30 	bl	800aae8 <Dec2ASC>
	Dec2ASC(pkm_d, pkm);
 8006e88:	4baa      	ldr	r3, [pc, #680]	@ (8007134 <HMI_Vacant_W+0x3d8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4abc      	ldr	r2, [pc, #752]	@ (8007180 <HMI_Vacant_W+0x424>)
 8006e8e:	0011      	movs	r1, r2
 8006e90:	0018      	movs	r0, r3
 8006e92:	f003 fe29 	bl	800aae8 <Dec2ASC>
	Dec2ASC(tfare_d, tfare);
 8006e96:	4ba9      	ldr	r3, [pc, #676]	@ (800713c <HMI_Vacant_W+0x3e0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4aba      	ldr	r2, [pc, #744]	@ (8007184 <HMI_Vacant_W+0x428>)
 8006e9c:	0011      	movs	r1, r2
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f003 fe22 	bl	800aae8 <Dec2ASC>
	Dec2ASC(tsub_d, tsub);
 8006ea4:	4ba7      	ldr	r3, [pc, #668]	@ (8007144 <HMI_Vacant_W+0x3e8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4ab7      	ldr	r2, [pc, #732]	@ (8007188 <HMI_Vacant_W+0x42c>)
 8006eaa:	0011      	movs	r1, r2
 8006eac:	0018      	movs	r0, r3
 8006eae:	f003 fe1b 	bl	800aae8 <Dec2ASC>
	Dec2ASC(tflag_d, tflag);
 8006eb2:	4ba9      	ldr	r3, [pc, #676]	@ (8007158 <HMI_Vacant_W+0x3fc>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4ab5      	ldr	r2, [pc, #724]	@ (800718c <HMI_Vacant_W+0x430>)
 8006eb8:	0011      	movs	r1, r2
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f003 fe14 	bl	800aae8 <Dec2ASC>
	Dec2ASC(cflag_d, cflag);
 8006ec0:	4ba6      	ldr	r3, [pc, #664]	@ (800715c <HMI_Vacant_W+0x400>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4ab2      	ldr	r2, [pc, #712]	@ (8007190 <HMI_Vacant_W+0x434>)
 8006ec6:	0011      	movs	r1, r2
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f003 fe0d 	bl	800aae8 <Dec2ASC>
	Dec2ASC(cfare_d, cfare);
 8006ece:	4b9f      	ldr	r3, [pc, #636]	@ (800714c <HMI_Vacant_W+0x3f0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4ab0      	ldr	r2, [pc, #704]	@ (8007194 <HMI_Vacant_W+0x438>)
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f003 fe06 	bl	800aae8 <Dec2ASC>
	Dec2ASC(csub_d, csub);
 8006edc:	4b9c      	ldr	r3, [pc, #624]	@ (8007150 <HMI_Vacant_W+0x3f4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4aad      	ldr	r2, [pc, #692]	@ (8007198 <HMI_Vacant_W+0x43c>)
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f003 fdff 	bl	800aae8 <Dec2ASC>
	Dec2ASC(tpulse_d, tpulse);
 8006eea:	4b9e      	ldr	r3, [pc, #632]	@ (8007164 <HMI_Vacant_W+0x408>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4aab      	ldr	r2, [pc, #684]	@ (800719c <HMI_Vacant_W+0x440>)
 8006ef0:	0011      	movs	r1, r2
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f003 fdf8 	bl	800aae8 <Dec2ASC>
	Dec2ASC(ttime_d, ttime);
 8006ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8007168 <HMI_Vacant_W+0x40c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4aa8      	ldr	r2, [pc, #672]	@ (80071a0 <HMI_Vacant_W+0x444>)
 8006efe:	0011      	movs	r1, r2
 8006f00:	0018      	movs	r0, r3
 8006f02:	f003 fdf1 	bl	800aae8 <Dec2ASC>
//	Dis = 0;
//	Distance = 0;
//	distance = 0;

	//Flag_Display check:
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Clear, 7, 0x0E);
 8006f06:	49a7      	ldr	r1, [pc, #668]	@ (80071a4 <HMI_Vacant_W+0x448>)
 8006f08:	4885      	ldr	r0, [pc, #532]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006f0a:	230e      	movs	r3, #14
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	f00c f809 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8006f12:	2002      	movs	r0, #2
 8006f14:	f006 fd80 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8006f18:	4ba3      	ldr	r3, [pc, #652]	@ (80071a8 <HMI_Vacant_W+0x44c>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02b      	beq.n	8006f78 <HMI_Vacant_W+0x21c>
	{
		RxFlag = FALSE;
 8006f20:	4ba1      	ldr	r3, [pc, #644]	@ (80071a8 <HMI_Vacant_W+0x44c>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
		if (RxBuff[8] == 0x01 && Flag_Display == TRUE)
 8006f26:	4ba1      	ldr	r3, [pc, #644]	@ (80071ac <HMI_Vacant_W+0x450>)
 8006f28:	7a1b      	ldrb	r3, [r3, #8]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d110      	bne.n	8006f50 <HMI_Vacant_W+0x1f4>
 8006f2e:	4ba0      	ldr	r3, [pc, #640]	@ (80071b0 <HMI_Vacant_W+0x454>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10c      	bne.n	8006f50 <HMI_Vacant_W+0x1f4>
		{
			display_wait = 0;
 8006f36:	4b9f      	ldr	r3, [pc, #636]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
			Flag_Display = FALSE;
 8006f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80071b0 <HMI_Vacant_W+0x454>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x0E);
 8006f42:	499d      	ldr	r1, [pc, #628]	@ (80071b8 <HMI_Vacant_W+0x45c>)
 8006f44:	4876      	ldr	r0, [pc, #472]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006f46:	230e      	movs	r3, #14
 8006f48:	2208      	movs	r2, #8
 8006f4a:	f00b ffeb 	bl	8012f24 <HAL_UART_Transmit>
 8006f4e:	e016      	b.n	8006f7e <HMI_Vacant_W+0x222>
		}
		else if(RxBuff[8] == 0x01)
 8006f50:	4b96      	ldr	r3, [pc, #600]	@ (80071ac <HMI_Vacant_W+0x450>)
 8006f52:	7a1b      	ldrb	r3, [r3, #8]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d112      	bne.n	8006f7e <HMI_Vacant_W+0x222>
		{
			display_wait++;
 8006f58:	4b96      	ldr	r3, [pc, #600]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	4b94      	ldr	r3, [pc, #592]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006f62:	701a      	strb	r2, [r3, #0]
			Flag_Display = TRUE;
 8006f64:	4b92      	ldr	r3, [pc, #584]	@ (80071b0 <HMI_Vacant_W+0x454>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x0E);
 8006f6a:	4993      	ldr	r1, [pc, #588]	@ (80071b8 <HMI_Vacant_W+0x45c>)
 8006f6c:	486c      	ldr	r0, [pc, #432]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006f6e:	230e      	movs	r3, #14
 8006f70:	2208      	movs	r2, #8
 8006f72:	f00b ffd7 	bl	8012f24 <HAL_UART_Transmit>
 8006f76:	e002      	b.n	8006f7e <HMI_Vacant_W+0x222>
		}
	}
	else
	{
		Flag_Display = FALSE;
 8006f78:	4b8d      	ldr	r3, [pc, #564]	@ (80071b0 <HMI_Vacant_W+0x454>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_Display)
 8006f7e:	4b8c      	ldr	r3, [pc, #560]	@ (80071b0 <HMI_Vacant_W+0x454>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d047      	beq.n	8007016 <HMI_Vacant_W+0x2ba>
	{
		//change
//		Long_to_byte(Last_Final_price_x10,temp_array);
		Long_to_byte(Last_fare_d_x100, temp_array);
 8006f86:	4b8d      	ldr	r3, [pc, #564]	@ (80071bc <HMI_Vacant_W+0x460>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	003a      	movs	r2, r7
 8006f8c:	0011      	movs	r1, r2
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f000 fe5c 	bl	8007c4c <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8006f94:	0039      	movs	r1, r7
 8006f96:	4b8a      	ldr	r3, [pc, #552]	@ (80071c0 <HMI_Vacant_W+0x464>)
 8006f98:	220a      	movs	r2, #10
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f000 fe75 	bl	8007c8a <HMI_Command>

		Long_to_byte(ex_Addition,temp_array);
 8006fa0:	4b88      	ldr	r3, [pc, #544]	@ (80071c4 <HMI_Vacant_W+0x468>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	003a      	movs	r2, r7
 8006fa6:	0011      	movs	r1, r2
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 fe4f 	bl	8007c4c <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 8006fae:	0039      	movs	r1, r7
 8006fb0:	4b85      	ldr	r3, [pc, #532]	@ (80071c8 <HMI_Vacant_W+0x46c>)
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 fe68 	bl	8007c8a <HMI_Command>

		Long_to_byte(Last_Dis,temp_array);
 8006fba:	4b84      	ldr	r3, [pc, #528]	@ (80071cc <HMI_Vacant_W+0x470>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	003a      	movs	r2, r7
 8006fc0:	0011      	movs	r1, r2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fe42 	bl	8007c4c <Long_to_byte>
		HMI_Command(Dis_A,temp_array,10);
 8006fc8:	0039      	movs	r1, r7
 8006fca:	4b81      	ldr	r3, [pc, #516]	@ (80071d0 <HMI_Vacant_W+0x474>)
 8006fcc:	220a      	movs	r2, #10
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 fe5b 	bl	8007c8a <HMI_Command>

		HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x1C);
 8006fd4:	497f      	ldr	r1, [pc, #508]	@ (80071d4 <HMI_Vacant_W+0x478>)
 8006fd6:	4852      	ldr	r0, [pc, #328]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 8006fd8:	231c      	movs	r3, #28
 8006fda:	220e      	movs	r2, #14
 8006fdc:	f00b ffa2 	bl	8012f24 <HAL_UART_Transmit>

		printer_rd();
 8006fe0:	f000 fcb4 	bl	800794c <printer_rd>
		check_rd();
 8006fe4:	f000 fd8e 	bl	8007b04 <check_rd>
		clear_rd();
 8006fe8:	f000 fdb0 	bl	8007b4c <clear_rd>

		if(display_wait != 0)
 8006fec:	4b71      	ldr	r3, [pc, #452]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d049      	beq.n	8007088 <HMI_Vacant_W+0x32c>
		{
			display_wait++;
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8006ffe:	701a      	strb	r2, [r3, #0]
			//display 5s
			if(display_wait >= 6)
 8007000:	4b6c      	ldr	r3, [pc, #432]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d93f      	bls.n	8007088 <HMI_Vacant_W+0x32c>
			{
				Flag_Display = FALSE;
 8007008:	4b69      	ldr	r3, [pc, #420]	@ (80071b0 <HMI_Vacant_W+0x454>)
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
				display_wait = 0;
 800700e:	4b69      	ldr	r3, [pc, #420]	@ (80071b4 <HMI_Vacant_W+0x458>)
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e038      	b.n	8007088 <HMI_Vacant_W+0x32c>
		}
	}
	else
	{
//		Long_to_byte(Final_price_x10,temp_array);
		Long_to_byte(fare_d_x100, temp_array);
 8007016:	4b70      	ldr	r3, [pc, #448]	@ (80071d8 <HMI_Vacant_W+0x47c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	003a      	movs	r2, r7
 800701c:	0011      	movs	r1, r2
 800701e:	0018      	movs	r0, r3
 8007020:	f000 fe14 	bl	8007c4c <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8007024:	0039      	movs	r1, r7
 8007026:	4b66      	ldr	r3, [pc, #408]	@ (80071c0 <HMI_Vacant_W+0x464>)
 8007028:	220a      	movs	r2, #10
 800702a:	0018      	movs	r0, r3
 800702c:	f000 fe2d 	bl	8007c8a <HMI_Command>

		Long_to_byte(Addition,temp_array);
 8007030:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <HMI_Vacant_W+0x3ec>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	003a      	movs	r2, r7
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f000 fe07 	bl	8007c4c <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 800703e:	0039      	movs	r1, r7
 8007040:	4b61      	ldr	r3, [pc, #388]	@ (80071c8 <HMI_Vacant_W+0x46c>)
 8007042:	220a      	movs	r2, #10
 8007044:	0018      	movs	r0, r3
 8007046:	f000 fe20 	bl	8007c8a <HMI_Command>
//		last_counter = 0; //pull to start of the function as T-box has no signal
//		Dis = 0;
//		Distance = 0;
//		distance = 0;

		Long_to_byte(Dis,temp_array);
 800704a:	4b39      	ldr	r3, [pc, #228]	@ (8007130 <HMI_Vacant_W+0x3d4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	003a      	movs	r2, r7
 8007050:	0011      	movs	r1, r2
 8007052:	0018      	movs	r0, r3
 8007054:	f000 fdfa 	bl	8007c4c <Long_to_byte>
		HMI_Command(Dis_A,temp_array,10);
 8007058:	0039      	movs	r1, r7
 800705a:	4b5d      	ldr	r3, [pc, #372]	@ (80071d0 <HMI_Vacant_W+0x474>)
 800705c:	220a      	movs	r2, #10
 800705e:	0018      	movs	r0, r3
 8007060:	f000 fe13 	bl	8007c8a <HMI_Command>

		sec = 0;
 8007064:	4b5d      	ldr	r3, [pc, #372]	@ (80071dc <HMI_Vacant_W+0x480>)
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]
		min = 0;
 800706a:	4b5d      	ldr	r3, [pc, #372]	@ (80071e0 <HMI_Vacant_W+0x484>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
		hou = 0;
 8007070:	4b5c      	ldr	r3, [pc, #368]	@ (80071e4 <HMI_Vacant_W+0x488>)
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) Dur_HMS_clear, 14, 0x1C);
 8007076:	495c      	ldr	r1, [pc, #368]	@ (80071e8 <HMI_Vacant_W+0x48c>)
 8007078:	4829      	ldr	r0, [pc, #164]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 800707a:	231c      	movs	r3, #28
 800707c:	220e      	movs	r2, #14
 800707e:	f00b ff51 	bl	8012f24 <HAL_UART_Transmit>

		HAL_Delay(2);
 8007082:	2002      	movs	r0, #2
 8007084:	f006 fcc8 	bl	800da18 <HAL_Delay>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) Plus10_clear, 8, 0x10);
 8007088:	4958      	ldr	r1, [pc, #352]	@ (80071ec <HMI_Vacant_W+0x490>)
 800708a:	4825      	ldr	r0, [pc, #148]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 800708c:	2310      	movs	r3, #16
 800708e:	2208      	movs	r2, #8
 8007090:	f00b ff48 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 8007094:	2001      	movs	r0, #1
 8007096:	f006 fcbf 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) Plus1_clear, 8, 0x10);
 800709a:	4955      	ldr	r1, [pc, #340]	@ (80071f0 <HMI_Vacant_W+0x494>)
 800709c:	4820      	ldr	r0, [pc, #128]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 800709e:	2310      	movs	r3, #16
 80070a0:	2208      	movs	r2, #8
 80070a2:	f00b ff3f 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(1);
 80070a6:	2001      	movs	r0, #1
 80070a8:	f006 fcb6 	bl	800da18 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);
 80070ac:	4951      	ldr	r1, [pc, #324]	@ (80071f4 <HMI_Vacant_W+0x498>)
 80070ae:	481c      	ldr	r0, [pc, #112]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 80070b0:	2310      	movs	r3, #16
 80070b2:	2208      	movs	r2, #8
 80070b4:	f00b ff36 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,CLR_extra_btn,8,0x0E);
 80070b8:	494f      	ldr	r1, [pc, #316]	@ (80071f8 <HMI_Vacant_W+0x49c>)
 80070ba:	4819      	ldr	r0, [pc, #100]	@ (8007120 <HMI_Vacant_W+0x3c4>)
 80070bc:	230e      	movs	r3, #14
 80070be:	2208      	movs	r2, #8
 80070c0:	f00b ff30 	bl	8012f24 <HAL_UART_Transmit>

	IC_Val1 = 0;
 80070c4:	4b4d      	ldr	r3, [pc, #308]	@ (80071fc <HMI_Vacant_W+0x4a0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
	IC_Val2 = 0;
 80070ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007200 <HMI_Vacant_W+0x4a4>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
	IC_Val3 = 0;
 80070d0:	4b4c      	ldr	r3, [pc, #304]	@ (8007204 <HMI_Vacant_W+0x4a8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	IC_Val4 = 0;
 80070d6:	4b4c      	ldr	r3, [pc, #304]	@ (8007208 <HMI_Vacant_W+0x4ac>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
	Width = 0;
 80070dc:	4b4b      	ldr	r3, [pc, #300]	@ (800720c <HMI_Vacant_W+0x4b0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
	Difference = 0;
 80070e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007210 <HMI_Vacant_W+0x4b4>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
	//counter = 0;
	//last_counter = 0;
	//Dis = 0;
	//Distance = 0;

	if (Flag_Tbox_Finish)
 80070e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007214 <HMI_Vacant_W+0x4b8>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d100      	bne.n	80070f2 <HMI_Vacant_W+0x396>
 80070f0:	e274      	b.n	80075dc <HMI_Vacant_W+0x880>
	{
		Flag_Tbox_Start = TRUE;
 80070f2:	4b49      	ldr	r3, [pc, #292]	@ (8007218 <HMI_Vacant_W+0x4bc>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = FALSE;
 80070f8:	4b46      	ldr	r3, [pc, #280]	@ (8007214 <HMI_Vacant_W+0x4b8>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]

		Flag_Printer_Start = TRUE;
 80070fe:	4b47      	ldr	r3, [pc, #284]	@ (800721c <HMI_Vacant_W+0x4c0>)
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = FALSE;
 8007104:	4b46      	ldr	r3, [pc, #280]	@ (8007220 <HMI_Vacant_W+0x4c4>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]

		if(!Flag_End_Record)
 800710a:	4b46      	ldr	r3, [pc, #280]	@ (8007224 <HMI_Vacant_W+0x4c8>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d000      	beq.n	8007114 <HMI_Vacant_W+0x3b8>
 8007112:	e089      	b.n	8007228 <HMI_Vacant_W+0x4cc>
		{
			//printed on stop mode,already record the end time
			tbox_finish();
 8007114:	f000 ff94 	bl	8008040 <tbox_finish>
 8007118:	e0b0      	b.n	800727c <HMI_Vacant_W+0x520>
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	2000000c 	.word	0x2000000c
 8007120:	2000064c 	.word	0x2000064c
 8007124:	2000001c 	.word	0x2000001c
 8007128:	20000024 	.word	0x20000024
 800712c:	20000e14 	.word	0x20000e14
 8007130:	20000a54 	.word	0x20000a54
 8007134:	20000e18 	.word	0x20000e18
 8007138:	20000d28 	.word	0x20000d28
 800713c:	20000e28 	.word	0x20000e28
 8007140:	20000a40 	.word	0x20000a40
 8007144:	20000e2c 	.word	0x20000e2c
 8007148:	20000a60 	.word	0x20000a60
 800714c:	20000e30 	.word	0x20000e30
 8007150:	20000e34 	.word	0x20000e34
 8007154:	20000e48 	.word	0x20000e48
 8007158:	20000e1c 	.word	0x20000e1c
 800715c:	20000e20 	.word	0x20000e20
 8007160:	20000e49 	.word	0x20000e49
 8007164:	20000e24 	.word	0x20000e24
 8007168:	20000e38 	.word	0x20000e38
 800716c:	20000e4a 	.word	0x20000e4a
 8007170:	404e0000 	.word	0x404e0000
 8007174:	408f4000 	.word	0x408f4000
 8007178:	40240000 	.word	0x40240000
 800717c:	20000e50 	.word	0x20000e50
 8007180:	20000e58 	.word	0x20000e58
 8007184:	20000e78 	.word	0x20000e78
 8007188:	20000e80 	.word	0x20000e80
 800718c:	20000e60 	.word	0x20000e60
 8007190:	20000e68 	.word	0x20000e68
 8007194:	20000e88 	.word	0x20000e88
 8007198:	20000e90 	.word	0x20000e90
 800719c:	20000e70 	.word	0x20000e70
 80071a0:	20000e98 	.word	0x20000e98
 80071a4:	08019554 	.word	0x08019554
 80071a8:	20000a30 	.word	0x20000a30
 80071ac:	20000a34 	.word	0x20000a34
 80071b0:	20000a50 	.word	0x20000a50
 80071b4:	20000a51 	.word	0x20000a51
 80071b8:	2000004c 	.word	0x2000004c
 80071bc:	20000d1c 	.word	0x20000d1c
 80071c0:	08019514 	.word	0x08019514
 80071c4:	20000a4c 	.word	0x20000a4c
 80071c8:	08019520 	.word	0x08019520
 80071cc:	20000a58 	.word	0x20000a58
 80071d0:	08019574 	.word	0x08019574
 80071d4:	2000005c 	.word	0x2000005c
 80071d8:	20000d18 	.word	0x20000d18
 80071dc:	20000ab4 	.word	0x20000ab4
 80071e0:	20000ab5 	.word	0x20000ab5
 80071e4:	20000ab6 	.word	0x20000ab6
 80071e8:	2000006c 	.word	0x2000006c
 80071ec:	20000034 	.word	0x20000034
 80071f0:	2000003c 	.word	0x2000003c
 80071f4:	20000044 	.word	0x20000044
 80071f8:	20000054 	.word	0x20000054
 80071fc:	20000c94 	.word	0x20000c94
 8007200:	20000c98 	.word	0x20000c98
 8007204:	20000c9c 	.word	0x20000c9c
 8007208:	20000ca0 	.word	0x20000ca0
 800720c:	20000ca8 	.word	0x20000ca8
 8007210:	20000ca4 	.word	0x20000ca4
 8007214:	20000b30 	.word	0x20000b30
 8007218:	2000022b 	.word	0x2000022b
 800721c:	20000229 	.word	0x20000229
 8007220:	20000b14 	.word	0x20000b14
 8007224:	2000022a 	.word	0x2000022a
		else
		{
			//get end time
			//end - dd/mm/yy hh:mm
			//hmi_rtc - yy-mm-dd hh:mm:ss
			end[0] = hmi_rtc[14];
 8007228:	4b9a      	ldr	r3, [pc, #616]	@ (8007494 <HMI_Vacant_W+0x738>)
 800722a:	7b9a      	ldrb	r2, [r3, #14]
 800722c:	4b9a      	ldr	r3, [pc, #616]	@ (8007498 <HMI_Vacant_W+0x73c>)
 800722e:	701a      	strb	r2, [r3, #0]
			end[1] = hmi_rtc[15];
 8007230:	4b98      	ldr	r3, [pc, #608]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007232:	7bda      	ldrb	r2, [r3, #15]
 8007234:	4b98      	ldr	r3, [pc, #608]	@ (8007498 <HMI_Vacant_W+0x73c>)
 8007236:	705a      	strb	r2, [r3, #1]
			end[3] = hmi_rtc[11];
 8007238:	4b96      	ldr	r3, [pc, #600]	@ (8007494 <HMI_Vacant_W+0x738>)
 800723a:	7ada      	ldrb	r2, [r3, #11]
 800723c:	4b96      	ldr	r3, [pc, #600]	@ (8007498 <HMI_Vacant_W+0x73c>)
 800723e:	70da      	strb	r2, [r3, #3]
			end[4] = hmi_rtc[12];
 8007240:	4b94      	ldr	r3, [pc, #592]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007242:	7b1a      	ldrb	r2, [r3, #12]
 8007244:	4b94      	ldr	r3, [pc, #592]	@ (8007498 <HMI_Vacant_W+0x73c>)
 8007246:	711a      	strb	r2, [r3, #4]
			end[6] = hmi_rtc[8];
 8007248:	4b92      	ldr	r3, [pc, #584]	@ (8007494 <HMI_Vacant_W+0x738>)
 800724a:	7a1a      	ldrb	r2, [r3, #8]
 800724c:	4b92      	ldr	r3, [pc, #584]	@ (8007498 <HMI_Vacant_W+0x73c>)
 800724e:	719a      	strb	r2, [r3, #6]
			end[7] = hmi_rtc[9];
 8007250:	4b90      	ldr	r3, [pc, #576]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007252:	7a5a      	ldrb	r2, [r3, #9]
 8007254:	4b90      	ldr	r3, [pc, #576]	@ (8007498 <HMI_Vacant_W+0x73c>)
 8007256:	71da      	strb	r2, [r3, #7]
			end[9] = hmi_rtc[17];
 8007258:	4b8e      	ldr	r3, [pc, #568]	@ (8007494 <HMI_Vacant_W+0x738>)
 800725a:	7c5a      	ldrb	r2, [r3, #17]
 800725c:	4b8e      	ldr	r3, [pc, #568]	@ (8007498 <HMI_Vacant_W+0x73c>)
 800725e:	725a      	strb	r2, [r3, #9]
			end[10] = hmi_rtc[18];
 8007260:	4b8c      	ldr	r3, [pc, #560]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007262:	7c9a      	ldrb	r2, [r3, #18]
 8007264:	4b8c      	ldr	r3, [pc, #560]	@ (8007498 <HMI_Vacant_W+0x73c>)
 8007266:	729a      	strb	r2, [r3, #10]
			end[12] = hmi_rtc[20];
 8007268:	4b8a      	ldr	r3, [pc, #552]	@ (8007494 <HMI_Vacant_W+0x738>)
 800726a:	7d1a      	ldrb	r2, [r3, #20]
 800726c:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HMI_Vacant_W+0x73c>)
 800726e:	731a      	strb	r2, [r3, #12]
			end[13] = hmi_rtc[21];
 8007270:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007272:	7d5a      	ldrb	r2, [r3, #21]
 8007274:	4b88      	ldr	r3, [pc, #544]	@ (8007498 <HMI_Vacant_W+0x73c>)
 8007276:	735a      	strb	r2, [r3, #13]
			tbox_finish();
 8007278:	f000 fee2 	bl	8008040 <tbox_finish>
		}
		Flag_End_Record = TRUE;
 800727c:	4b87      	ldr	r3, [pc, #540]	@ (800749c <HMI_Vacant_W+0x740>)
 800727e:	2201      	movs	r2, #1
 8007280:	701a      	strb	r2, [r3, #0]
		//calculate trip time (end time - start time)
		E_write();
 8007282:	f003 fec3 	bl	800b00c <E_write>
		//trip data write to sd card
		SD_buffer[34] = 0x32;
 8007286:	4b86      	ldr	r3, [pc, #536]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007288:	2222      	movs	r2, #34	@ 0x22
 800728a:	2132      	movs	r1, #50	@ 0x32
 800728c:	5499      	strb	r1, [r3, r2]
		SD_buffer[35] = 0x30;
 800728e:	4b84      	ldr	r3, [pc, #528]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007290:	2223      	movs	r2, #35	@ 0x23
 8007292:	2130      	movs	r1, #48	@ 0x30
 8007294:	5499      	strb	r1, [r3, r2]
		SD_buffer[36] = hmi_rtc[8];
 8007296:	4b7f      	ldr	r3, [pc, #508]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007298:	7a19      	ldrb	r1, [r3, #8]
 800729a:	4b81      	ldr	r3, [pc, #516]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800729c:	2224      	movs	r2, #36	@ 0x24
 800729e:	5499      	strb	r1, [r3, r2]
		SD_buffer[37] = hmi_rtc[9];
 80072a0:	4b7c      	ldr	r3, [pc, #496]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072a2:	7a59      	ldrb	r1, [r3, #9]
 80072a4:	4b7e      	ldr	r3, [pc, #504]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072a6:	2225      	movs	r2, #37	@ 0x25
 80072a8:	5499      	strb	r1, [r3, r2]
		SD_buffer[38] = 0x2D;
 80072aa:	4b7d      	ldr	r3, [pc, #500]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072ac:	2226      	movs	r2, #38	@ 0x26
 80072ae:	212d      	movs	r1, #45	@ 0x2d
 80072b0:	5499      	strb	r1, [r3, r2]
		SD_buffer[39] = hmi_rtc[11];
 80072b2:	4b78      	ldr	r3, [pc, #480]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072b4:	7ad9      	ldrb	r1, [r3, #11]
 80072b6:	4b7a      	ldr	r3, [pc, #488]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072b8:	2227      	movs	r2, #39	@ 0x27
 80072ba:	5499      	strb	r1, [r3, r2]
		SD_buffer[40] = hmi_rtc[12];
 80072bc:	4b75      	ldr	r3, [pc, #468]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072be:	7b19      	ldrb	r1, [r3, #12]
 80072c0:	4b77      	ldr	r3, [pc, #476]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072c2:	2228      	movs	r2, #40	@ 0x28
 80072c4:	5499      	strb	r1, [r3, r2]
		SD_buffer[41] = 0x2D;
 80072c6:	4b76      	ldr	r3, [pc, #472]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072c8:	2229      	movs	r2, #41	@ 0x29
 80072ca:	212d      	movs	r1, #45	@ 0x2d
 80072cc:	5499      	strb	r1, [r3, r2]
		SD_buffer[42] = hmi_rtc[14];
 80072ce:	4b71      	ldr	r3, [pc, #452]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072d0:	7b99      	ldrb	r1, [r3, #14]
 80072d2:	4b73      	ldr	r3, [pc, #460]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072d4:	222a      	movs	r2, #42	@ 0x2a
 80072d6:	5499      	strb	r1, [r3, r2]
		SD_buffer[43] = hmi_rtc[15];
 80072d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072da:	7bd9      	ldrb	r1, [r3, #15]
 80072dc:	4b70      	ldr	r3, [pc, #448]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072de:	222b      	movs	r2, #43	@ 0x2b
 80072e0:	5499      	strb	r1, [r3, r2]
		SD_buffer[44] = 0x20;
 80072e2:	4b6f      	ldr	r3, [pc, #444]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072e4:	222c      	movs	r2, #44	@ 0x2c
 80072e6:	2120      	movs	r1, #32
 80072e8:	5499      	strb	r1, [r3, r2]
		SD_buffer[45] = hmi_rtc[17];
 80072ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072ec:	7c59      	ldrb	r1, [r3, #17]
 80072ee:	4b6c      	ldr	r3, [pc, #432]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072f0:	222d      	movs	r2, #45	@ 0x2d
 80072f2:	5499      	strb	r1, [r3, r2]
		SD_buffer[46] = hmi_rtc[18];
 80072f4:	4b67      	ldr	r3, [pc, #412]	@ (8007494 <HMI_Vacant_W+0x738>)
 80072f6:	7c99      	ldrb	r1, [r3, #18]
 80072f8:	4b69      	ldr	r3, [pc, #420]	@ (80074a0 <HMI_Vacant_W+0x744>)
 80072fa:	222e      	movs	r2, #46	@ 0x2e
 80072fc:	5499      	strb	r1, [r3, r2]
		SD_buffer[47] = 0x3A;
 80072fe:	4b68      	ldr	r3, [pc, #416]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007300:	222f      	movs	r2, #47	@ 0x2f
 8007302:	213a      	movs	r1, #58	@ 0x3a
 8007304:	5499      	strb	r1, [r3, r2]
		SD_buffer[48] = hmi_rtc[20];
 8007306:	4b63      	ldr	r3, [pc, #396]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007308:	7d19      	ldrb	r1, [r3, #20]
 800730a:	4b65      	ldr	r3, [pc, #404]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800730c:	2230      	movs	r2, #48	@ 0x30
 800730e:	5499      	strb	r1, [r3, r2]
		SD_buffer[49] = hmi_rtc[21];
 8007310:	4b60      	ldr	r3, [pc, #384]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007312:	7d59      	ldrb	r1, [r3, #21]
 8007314:	4b62      	ldr	r3, [pc, #392]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007316:	2231      	movs	r2, #49	@ 0x31
 8007318:	5499      	strb	r1, [r3, r2]
		SD_buffer[50] = 0x3A;
 800731a:	4b61      	ldr	r3, [pc, #388]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800731c:	2232      	movs	r2, #50	@ 0x32
 800731e:	213a      	movs	r1, #58	@ 0x3a
 8007320:	5499      	strb	r1, [r3, r2]
		SD_buffer[51] = hmi_rtc[23];
 8007322:	4b5c      	ldr	r3, [pc, #368]	@ (8007494 <HMI_Vacant_W+0x738>)
 8007324:	7dd9      	ldrb	r1, [r3, #23]
 8007326:	4b5e      	ldr	r3, [pc, #376]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007328:	2233      	movs	r2, #51	@ 0x33
 800732a:	5499      	strb	r1, [r3, r2]
		SD_buffer[52] = hmi_rtc[24];
 800732c:	4b59      	ldr	r3, [pc, #356]	@ (8007494 <HMI_Vacant_W+0x738>)
 800732e:	7e19      	ldrb	r1, [r3, #24]
 8007330:	4b5b      	ldr	r3, [pc, #364]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007332:	2234      	movs	r2, #52	@ 0x34
 8007334:	5499      	strb	r1, [r3, r2]
		SD_buffer[53] = 0x20;
 8007336:	4b5a      	ldr	r3, [pc, #360]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007338:	2235      	movs	r2, #53	@ 0x35
 800733a:	2120      	movs	r1, #32
 800733c:	5499      	strb	r1, [r3, r2]

		SD_buffer[54] = paid_min[8];
 800733e:	4b59      	ldr	r3, [pc, #356]	@ (80074a4 <HMI_Vacant_W+0x748>)
 8007340:	7a19      	ldrb	r1, [r3, #8]
 8007342:	4b57      	ldr	r3, [pc, #348]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007344:	2236      	movs	r2, #54	@ 0x36
 8007346:	5499      	strb	r1, [r3, r2]
		SD_buffer[55] = paid_min[9];
 8007348:	4b56      	ldr	r3, [pc, #344]	@ (80074a4 <HMI_Vacant_W+0x748>)
 800734a:	7a59      	ldrb	r1, [r3, #9]
 800734c:	4b54      	ldr	r3, [pc, #336]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800734e:	2237      	movs	r2, #55	@ 0x37
 8007350:	5499      	strb	r1, [r3, r2]
		SD_buffer[56] = paid_min[10];
 8007352:	4b54      	ldr	r3, [pc, #336]	@ (80074a4 <HMI_Vacant_W+0x748>)
 8007354:	7a99      	ldrb	r1, [r3, #10]
 8007356:	4b52      	ldr	r3, [pc, #328]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007358:	2238      	movs	r2, #56	@ 0x38
 800735a:	5499      	strb	r1, [r3, r2]
		SD_buffer[57] = 0x2E;
 800735c:	4b50      	ldr	r3, [pc, #320]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800735e:	2239      	movs	r2, #57	@ 0x39
 8007360:	212e      	movs	r1, #46	@ 0x2e
 8007362:	5499      	strb	r1, [r3, r2]
		SD_buffer[58] = paid_min[12];
 8007364:	4b4f      	ldr	r3, [pc, #316]	@ (80074a4 <HMI_Vacant_W+0x748>)
 8007366:	7b19      	ldrb	r1, [r3, #12]
 8007368:	4b4d      	ldr	r3, [pc, #308]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800736a:	223a      	movs	r2, #58	@ 0x3a
 800736c:	5499      	strb	r1, [r3, r2]
		SD_buffer[59] = paid_min[13];
 800736e:	4b4d      	ldr	r3, [pc, #308]	@ (80074a4 <HMI_Vacant_W+0x748>)
 8007370:	7b59      	ldrb	r1, [r3, #13]
 8007372:	4b4b      	ldr	r3, [pc, #300]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007374:	223b      	movs	r2, #59	@ 0x3b
 8007376:	5499      	strb	r1, [r3, r2]
		SD_buffer[60] = 0x20;
 8007378:	4b49      	ldr	r3, [pc, #292]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800737a:	223c      	movs	r2, #60	@ 0x3c
 800737c:	2120      	movs	r1, #32
 800737e:	5499      	strb	r1, [r3, r2]

		//journey time
		jtime_d = ((ttime_counter / 60.0)* 1000) / 10; //changed
 8007380:	4b49      	ldr	r3, [pc, #292]	@ (80074a8 <HMI_Vacant_W+0x74c>)
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb ff27 	bl	80031d8 <__aeabi_i2d>
 800738a:	2200      	movs	r2, #0
 800738c:	4b47      	ldr	r3, [pc, #284]	@ (80074ac <HMI_Vacant_W+0x750>)
 800738e:	f7fa fc3f 	bl	8001c10 <__aeabi_ddiv>
 8007392:	0002      	movs	r2, r0
 8007394:	000b      	movs	r3, r1
 8007396:	0010      	movs	r0, r2
 8007398:	0019      	movs	r1, r3
 800739a:	2200      	movs	r2, #0
 800739c:	4b44      	ldr	r3, [pc, #272]	@ (80074b0 <HMI_Vacant_W+0x754>)
 800739e:	f7fb f87b 	bl	8002498 <__aeabi_dmul>
 80073a2:	0002      	movs	r2, r0
 80073a4:	000b      	movs	r3, r1
 80073a6:	0010      	movs	r0, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	2200      	movs	r2, #0
 80073ac:	4b41      	ldr	r3, [pc, #260]	@ (80074b4 <HMI_Vacant_W+0x758>)
 80073ae:	f7fa fc2f 	bl	8001c10 <__aeabi_ddiv>
 80073b2:	0002      	movs	r2, r0
 80073b4:	000b      	movs	r3, r1
 80073b6:	0010      	movs	r0, r2
 80073b8:	0019      	movs	r1, r3
 80073ba:	f7f9 f8db 	bl	8000574 <__aeabi_d2uiz>
 80073be:	0002      	movs	r2, r0
 80073c0:	4b3d      	ldr	r3, [pc, #244]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 80073c2:	601a      	str	r2, [r3, #0]
		jtime[7] = (jtime_d /1 % 10) + 0x30;
 80073c4:	4b3c      	ldr	r3, [pc, #240]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	210a      	movs	r1, #10
 80073ca:	0018      	movs	r0, r3
 80073cc:	f7f8 ff32 	bl	8000234 <__aeabi_uidivmod>
 80073d0:	000b      	movs	r3, r1
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3330      	adds	r3, #48	@ 0x30
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	4b38      	ldr	r3, [pc, #224]	@ (80074bc <HMI_Vacant_W+0x760>)
 80073da:	71da      	strb	r2, [r3, #7]
		jtime[6] = (jtime_d /10 % 10) + 0x30;
 80073dc:	4b36      	ldr	r3, [pc, #216]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	210a      	movs	r1, #10
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7f8 fea0 	bl	8000128 <__udivsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	210a      	movs	r1, #10
 80073ec:	0018      	movs	r0, r3
 80073ee:	f7f8 ff21 	bl	8000234 <__aeabi_uidivmod>
 80073f2:	000b      	movs	r3, r1
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	3330      	adds	r3, #48	@ 0x30
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4b30      	ldr	r3, [pc, #192]	@ (80074bc <HMI_Vacant_W+0x760>)
 80073fc:	719a      	strb	r2, [r3, #6]
		jtime[5] = (jtime_d /100 % 10) + 0x30;
 80073fe:	4b2e      	ldr	r3, [pc, #184]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2164      	movs	r1, #100	@ 0x64
 8007404:	0018      	movs	r0, r3
 8007406:	f7f8 fe8f 	bl	8000128 <__udivsi3>
 800740a:	0003      	movs	r3, r0
 800740c:	210a      	movs	r1, #10
 800740e:	0018      	movs	r0, r3
 8007410:	f7f8 ff10 	bl	8000234 <__aeabi_uidivmod>
 8007414:	000b      	movs	r3, r1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	3330      	adds	r3, #48	@ 0x30
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b27      	ldr	r3, [pc, #156]	@ (80074bc <HMI_Vacant_W+0x760>)
 800741e:	715a      	strb	r2, [r3, #5]
		jtime[4] = (jtime_d /1000 % 10) + 0x30;
 8007420:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	22fa      	movs	r2, #250	@ 0xfa
 8007426:	0091      	lsls	r1, r2, #2
 8007428:	0018      	movs	r0, r3
 800742a:	f7f8 fe7d 	bl	8000128 <__udivsi3>
 800742e:	0003      	movs	r3, r0
 8007430:	210a      	movs	r1, #10
 8007432:	0018      	movs	r0, r3
 8007434:	f7f8 fefe 	bl	8000234 <__aeabi_uidivmod>
 8007438:	000b      	movs	r3, r1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	3330      	adds	r3, #48	@ 0x30
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b1e      	ldr	r3, [pc, #120]	@ (80074bc <HMI_Vacant_W+0x760>)
 8007442:	711a      	strb	r2, [r3, #4]
		jtime[3] = (jtime_d /10000 % 10) + 0x30;
 8007444:	4b1c      	ldr	r3, [pc, #112]	@ (80074b8 <HMI_Vacant_W+0x75c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	491d      	ldr	r1, [pc, #116]	@ (80074c0 <HMI_Vacant_W+0x764>)
 800744a:	0018      	movs	r0, r3
 800744c:	f7f8 fe6c 	bl	8000128 <__udivsi3>
 8007450:	0003      	movs	r3, r0
 8007452:	210a      	movs	r1, #10
 8007454:	0018      	movs	r0, r3
 8007456:	f7f8 feed 	bl	8000234 <__aeabi_uidivmod>
 800745a:	000b      	movs	r3, r1
 800745c:	b2db      	uxtb	r3, r3
 800745e:	3330      	adds	r3, #48	@ 0x30
 8007460:	b2da      	uxtb	r2, r3
 8007462:	4b16      	ldr	r3, [pc, #88]	@ (80074bc <HMI_Vacant_W+0x760>)
 8007464:	70da      	strb	r2, [r3, #3]

		if (jtime[3] == 0x30)
 8007466:	4b15      	ldr	r3, [pc, #84]	@ (80074bc <HMI_Vacant_W+0x760>)
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	2b30      	cmp	r3, #48	@ 0x30
 800746c:	d104      	bne.n	8007478 <HMI_Vacant_W+0x71c>
			SD_buffer[61] = 0x20;
 800746e:	4b0c      	ldr	r3, [pc, #48]	@ (80074a0 <HMI_Vacant_W+0x744>)
 8007470:	223d      	movs	r2, #61	@ 0x3d
 8007472:	2120      	movs	r1, #32
 8007474:	5499      	strb	r1, [r3, r2]
 8007476:	e004      	b.n	8007482 <HMI_Vacant_W+0x726>
		else
			SD_buffer[61] = jtime[3];
 8007478:	4b10      	ldr	r3, [pc, #64]	@ (80074bc <HMI_Vacant_W+0x760>)
 800747a:	78d9      	ldrb	r1, [r3, #3]
 800747c:	4b08      	ldr	r3, [pc, #32]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800747e:	223d      	movs	r2, #61	@ 0x3d
 8007480:	5499      	strb	r1, [r3, r2]
		if (jtime[4] == 0x30)
 8007482:	4b0e      	ldr	r3, [pc, #56]	@ (80074bc <HMI_Vacant_W+0x760>)
 8007484:	791b      	ldrb	r3, [r3, #4]
 8007486:	2b30      	cmp	r3, #48	@ 0x30
 8007488:	d11c      	bne.n	80074c4 <HMI_Vacant_W+0x768>
			SD_buffer[62] = 0x20;
 800748a:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <HMI_Vacant_W+0x744>)
 800748c:	223e      	movs	r2, #62	@ 0x3e
 800748e:	2120      	movs	r1, #32
 8007490:	5499      	strb	r1, [r3, r2]
 8007492:	e01c      	b.n	80074ce <HMI_Vacant_W+0x772>
 8007494:	2000007c 	.word	0x2000007c
 8007498:	200001bc 	.word	0x200001bc
 800749c:	2000022a 	.word	0x2000022a
 80074a0:	20003330 	.word	0x20003330
 80074a4:	200001fc 	.word	0x200001fc
 80074a8:	20000e4a 	.word	0x20000e4a
 80074ac:	404e0000 	.word	0x404e0000
 80074b0:	408f4000 	.word	0x408f4000
 80074b4:	40240000 	.word	0x40240000
 80074b8:	20000e44 	.word	0x20000e44
 80074bc:	20000ea8 	.word	0x20000ea8
 80074c0:	00002710 	.word	0x00002710
		else
			SD_buffer[62] = jtime[4];
 80074c4:	4b71      	ldr	r3, [pc, #452]	@ (800768c <HMI_Vacant_W+0x930>)
 80074c6:	7919      	ldrb	r1, [r3, #4]
 80074c8:	4b71      	ldr	r3, [pc, #452]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074ca:	223e      	movs	r2, #62	@ 0x3e
 80074cc:	5499      	strb	r1, [r3, r2]

		SD_buffer[63] = jtime[5];
 80074ce:	4b6f      	ldr	r3, [pc, #444]	@ (800768c <HMI_Vacant_W+0x930>)
 80074d0:	7959      	ldrb	r1, [r3, #5]
 80074d2:	4b6f      	ldr	r3, [pc, #444]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074d4:	223f      	movs	r2, #63	@ 0x3f
 80074d6:	5499      	strb	r1, [r3, r2]
		SD_buffer[64] = 0x2E;
 80074d8:	4b6d      	ldr	r3, [pc, #436]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074da:	2240      	movs	r2, #64	@ 0x40
 80074dc:	212e      	movs	r1, #46	@ 0x2e
 80074de:	5499      	strb	r1, [r3, r2]
		SD_buffer[65] = jtime[6];
 80074e0:	4b6a      	ldr	r3, [pc, #424]	@ (800768c <HMI_Vacant_W+0x930>)
 80074e2:	7999      	ldrb	r1, [r3, #6]
 80074e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074e6:	2241      	movs	r2, #65	@ 0x41
 80074e8:	5499      	strb	r1, [r3, r2]
		SD_buffer[66] = jtime[7];
 80074ea:	4b68      	ldr	r3, [pc, #416]	@ (800768c <HMI_Vacant_W+0x930>)
 80074ec:	79d9      	ldrb	r1, [r3, #7]
 80074ee:	4b68      	ldr	r3, [pc, #416]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074f0:	2242      	movs	r2, #66	@ 0x42
 80074f2:	5499      	strb	r1, [r3, r2]
		SD_buffer[67] = 0x20;
 80074f4:	4b66      	ldr	r3, [pc, #408]	@ (8007690 <HMI_Vacant_W+0x934>)
 80074f6:	2243      	movs	r2, #67	@ 0x43
 80074f8:	2120      	movs	r1, #32
 80074fa:	5499      	strb	r1, [r3, r2]
		ttime_counter = 0;
 80074fc:	4b65      	ldr	r3, [pc, #404]	@ (8007694 <HMI_Vacant_W+0x938>)
 80074fe:	2200      	movs	r2, #0
 8007500:	801a      	strh	r2, [r3, #0]

		SD_buffer[68] = paid_km[8];
 8007502:	4b65      	ldr	r3, [pc, #404]	@ (8007698 <HMI_Vacant_W+0x93c>)
 8007504:	7a19      	ldrb	r1, [r3, #8]
 8007506:	4b62      	ldr	r3, [pc, #392]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007508:	2244      	movs	r2, #68	@ 0x44
 800750a:	5499      	strb	r1, [r3, r2]
		SD_buffer[69] = paid_km[9];
 800750c:	4b62      	ldr	r3, [pc, #392]	@ (8007698 <HMI_Vacant_W+0x93c>)
 800750e:	7a59      	ldrb	r1, [r3, #9]
 8007510:	4b5f      	ldr	r3, [pc, #380]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007512:	2245      	movs	r2, #69	@ 0x45
 8007514:	5499      	strb	r1, [r3, r2]
		SD_buffer[70] = paid_km[10];
 8007516:	4b60      	ldr	r3, [pc, #384]	@ (8007698 <HMI_Vacant_W+0x93c>)
 8007518:	7a99      	ldrb	r1, [r3, #10]
 800751a:	4b5d      	ldr	r3, [pc, #372]	@ (8007690 <HMI_Vacant_W+0x934>)
 800751c:	2246      	movs	r2, #70	@ 0x46
 800751e:	5499      	strb	r1, [r3, r2]
		SD_buffer[71] = 0x2E;
 8007520:	4b5b      	ldr	r3, [pc, #364]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007522:	2247      	movs	r2, #71	@ 0x47
 8007524:	212e      	movs	r1, #46	@ 0x2e
 8007526:	5499      	strb	r1, [r3, r2]
		SD_buffer[72] = paid_km[12];
 8007528:	4b5b      	ldr	r3, [pc, #364]	@ (8007698 <HMI_Vacant_W+0x93c>)
 800752a:	7b19      	ldrb	r1, [r3, #12]
 800752c:	4b58      	ldr	r3, [pc, #352]	@ (8007690 <HMI_Vacant_W+0x934>)
 800752e:	2248      	movs	r2, #72	@ 0x48
 8007530:	5499      	strb	r1, [r3, r2]
		SD_buffer[73] = paid_km[13];
 8007532:	4b59      	ldr	r3, [pc, #356]	@ (8007698 <HMI_Vacant_W+0x93c>)
 8007534:	7b59      	ldrb	r1, [r3, #13]
 8007536:	4b56      	ldr	r3, [pc, #344]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007538:	2249      	movs	r2, #73	@ 0x49
 800753a:	5499      	strb	r1, [r3, r2]
		SD_buffer[74] = 0x20;
 800753c:	4b54      	ldr	r3, [pc, #336]	@ (8007690 <HMI_Vacant_W+0x934>)
 800753e:	224a      	movs	r2, #74	@ 0x4a
 8007540:	2120      	movs	r1, #32
 8007542:	5499      	strb	r1, [r3, r2]

		SD_buffer[75] = total_km[8];
 8007544:	4b55      	ldr	r3, [pc, #340]	@ (800769c <HMI_Vacant_W+0x940>)
 8007546:	7a19      	ldrb	r1, [r3, #8]
 8007548:	4b51      	ldr	r3, [pc, #324]	@ (8007690 <HMI_Vacant_W+0x934>)
 800754a:	224b      	movs	r2, #75	@ 0x4b
 800754c:	5499      	strb	r1, [r3, r2]
		SD_buffer[76] = total_km[9];
 800754e:	4b53      	ldr	r3, [pc, #332]	@ (800769c <HMI_Vacant_W+0x940>)
 8007550:	7a59      	ldrb	r1, [r3, #9]
 8007552:	4b4f      	ldr	r3, [pc, #316]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007554:	224c      	movs	r2, #76	@ 0x4c
 8007556:	5499      	strb	r1, [r3, r2]
		SD_buffer[77] = total_km[10];
 8007558:	4b50      	ldr	r3, [pc, #320]	@ (800769c <HMI_Vacant_W+0x940>)
 800755a:	7a99      	ldrb	r1, [r3, #10]
 800755c:	4b4c      	ldr	r3, [pc, #304]	@ (8007690 <HMI_Vacant_W+0x934>)
 800755e:	224d      	movs	r2, #77	@ 0x4d
 8007560:	5499      	strb	r1, [r3, r2]
		SD_buffer[78] = 0x2E;
 8007562:	4b4b      	ldr	r3, [pc, #300]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007564:	224e      	movs	r2, #78	@ 0x4e
 8007566:	212e      	movs	r1, #46	@ 0x2e
 8007568:	5499      	strb	r1, [r3, r2]
		SD_buffer[79] = total_km[12];
 800756a:	4b4c      	ldr	r3, [pc, #304]	@ (800769c <HMI_Vacant_W+0x940>)
 800756c:	7b19      	ldrb	r1, [r3, #12]
 800756e:	4b48      	ldr	r3, [pc, #288]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007570:	224f      	movs	r2, #79	@ 0x4f
 8007572:	5499      	strb	r1, [r3, r2]
		SD_buffer[80] = total_km[13];
 8007574:	4b49      	ldr	r3, [pc, #292]	@ (800769c <HMI_Vacant_W+0x940>)
 8007576:	7b59      	ldrb	r1, [r3, #13]
 8007578:	4b45      	ldr	r3, [pc, #276]	@ (8007690 <HMI_Vacant_W+0x934>)
 800757a:	2250      	movs	r2, #80	@ 0x50
 800757c:	5499      	strb	r1, [r3, r2]
		SD_buffer[81] = 0x20;
 800757e:	4b44      	ldr	r3, [pc, #272]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007580:	2251      	movs	r2, #81	@ 0x51
 8007582:	2120      	movs	r1, #32
 8007584:	5499      	strb	r1, [r3, r2]

		SD_buffer[113] = 0x0A;
 8007586:	4b42      	ldr	r3, [pc, #264]	@ (8007690 <HMI_Vacant_W+0x934>)
 8007588:	2271      	movs	r2, #113	@ 0x71
 800758a:	210a      	movs	r1, #10
 800758c:	5499      	strb	r1, [r3, r2]
		fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800758e:	4944      	ldr	r1, [pc, #272]	@ (80076a0 <HMI_Vacant_W+0x944>)
 8007590:	4b44      	ldr	r3, [pc, #272]	@ (80076a4 <HMI_Vacant_W+0x948>)
 8007592:	2203      	movs	r2, #3
 8007594:	0018      	movs	r0, r3
 8007596:	f010 f841 	bl	801761c <f_open>
 800759a:	0003      	movs	r3, r0
 800759c:	001a      	movs	r2, r3
 800759e:	4b42      	ldr	r3, [pc, #264]	@ (80076a8 <HMI_Vacant_W+0x94c>)
 80075a0:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 80075a2:	4b40      	ldr	r3, [pc, #256]	@ (80076a4 <HMI_Vacant_W+0x948>)
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	4b3f      	ldr	r3, [pc, #252]	@ (80076a4 <HMI_Vacant_W+0x948>)
 80075a8:	0011      	movs	r1, r2
 80075aa:	0018      	movs	r0, r3
 80075ac:	f010 fc93 	bl	8017ed6 <f_lseek>
 80075b0:	0003      	movs	r3, r0
 80075b2:	001a      	movs	r2, r3
 80075b4:	4b3c      	ldr	r3, [pc, #240]	@ (80076a8 <HMI_Vacant_W+0x94c>)
 80075b6:	701a      	strb	r2, [r3, #0]
//		fresult = f_puts("AB1234 A000001 2023-07-18 18:18:30 2023-07-18 18:35:54 4.3 17.4 10.3 10.8 5.6 107.8 5 112.8\n", &fil);
		char const * ch = (const char*)&SD_buffer;
 80075b8:	4b35      	ldr	r3, [pc, #212]	@ (8007690 <HMI_Vacant_W+0x934>)
 80075ba:	607b      	str	r3, [r7, #4]
		fresult = f_puts(ch, &fil);
 80075bc:	4a39      	ldr	r2, [pc, #228]	@ (80076a4 <HMI_Vacant_W+0x948>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	0011      	movs	r1, r2
 80075c2:	0018      	movs	r0, r3
 80075c4:	f010 ff32 	bl	801842c <f_puts>
 80075c8:	0003      	movs	r3, r0
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <HMI_Vacant_W+0x94c>)
 80075ce:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 80075d0:	4b34      	ldr	r3, [pc, #208]	@ (80076a4 <HMI_Vacant_W+0x948>)
 80075d2:	0018      	movs	r0, r3
 80075d4:	f010 fc4b 	bl	8017e6e <f_close>
		clear_buffer();
 80075d8:	f7fc fc9a 	bl	8003f10 <clear_buffer>
	}
	Flag_Control_Up();
 80075dc:	f003 f986 	bl	800a8ec <Flag_Control_Up>
	flag_sp = 1;
 80075e0:	4b32      	ldr	r3, [pc, #200]	@ (80076ac <HMI_Vacant_W+0x950>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
	flag_vs_first = 1;
 80075e6:	4b32      	ldr	r3, [pc, #200]	@ (80076b0 <HMI_Vacant_W+0x954>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	701a      	strb	r2, [r3, #0]
	Fu = 0;                       //moved to end start to solve T-box clear problem
 80075ec:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <HMI_Vacant_W+0x958>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
	Ft = 0;
 80075f2:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <HMI_Vacant_W+0x95c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
	Fd = 0;
 80075f8:	4b30      	ldr	r3, [pc, #192]	@ (80076bc <HMI_Vacant_W+0x960>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
	Dt = 0;
 80075fe:	4b30      	ldr	r3, [pc, #192]	@ (80076c0 <HMI_Vacant_W+0x964>)
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
	DtX = 0;
 8007604:	4b2f      	ldr	r3, [pc, #188]	@ (80076c4 <HMI_Vacant_W+0x968>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
	Fi = 0; //2.35;
 800760a:	4b2f      	ldr	r3, [pc, #188]	@ (80076c8 <HMI_Vacant_W+0x96c>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
	fare_d_x10 = 0;
 8007610:	4b2e      	ldr	r3, [pc, #184]	@ (80076cc <HMI_Vacant_W+0x970>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	fare_d_x100 = 0;
 8007616:	4b2e      	ldr	r3, [pc, #184]	@ (80076d0 <HMI_Vacant_W+0x974>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
	fare_d = 0;
 800761c:	4b2d      	ldr	r3, [pc, #180]	@ (80076d4 <HMI_Vacant_W+0x978>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
	Last_fare_d = 0;
 8007622:	4b2d      	ldr	r3, [pc, #180]	@ (80076d8 <HMI_Vacant_W+0x97c>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
	fare = 0;
 8007628:	4b2c      	ldr	r3, [pc, #176]	@ (80076dc <HMI_Vacant_W+0x980>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
	fare_km = 0;
 800762e:	4b2c      	ldr	r3, [pc, #176]	@ (80076e0 <HMI_Vacant_W+0x984>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
	fare_min = 0;
 8007634:	4b2b      	ldr	r3, [pc, #172]	@ (80076e4 <HMI_Vacant_W+0x988>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
	Flag_2km = FALSE;
 800763a:	4b2b      	ldr	r3, [pc, #172]	@ (80076e8 <HMI_Vacant_W+0x98c>)
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
	flag_fare_r = FALSE;
 8007640:	4b2a      	ldr	r3, [pc, #168]	@ (80076ec <HMI_Vacant_W+0x990>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
	Final_price = 0;
 8007646:	4b2a      	ldr	r3, [pc, #168]	@ (80076f0 <HMI_Vacant_W+0x994>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
	Final_price_x10 = 0;
 800764c:	4b29      	ldr	r3, [pc, #164]	@ (80076f4 <HMI_Vacant_W+0x998>)
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
	Addition = 0;
 8007652:	4b29      	ldr	r3, [pc, #164]	@ (80076f8 <HMI_Vacant_W+0x99c>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
	flag_count = 0;
 8007658:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <HMI_Vacant_W+0x9a0>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
	change_count = 0;
 800765e:	4b28      	ldr	r3, [pc, #160]	@ (8007700 <HMI_Vacant_W+0x9a4>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
	fare_km_x = 0;
 8007664:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <HMI_Vacant_W+0x9a8>)
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
//	ttime_counter = 0; //move to end
	last_counter = 0;
 800766a:	4b27      	ldr	r3, [pc, #156]	@ (8007708 <HMI_Vacant_W+0x9ac>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
	Dis = 0;
 8007670:	4b26      	ldr	r3, [pc, #152]	@ (800770c <HMI_Vacant_W+0x9b0>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
	Distance = 0;
 8007676:	4b26      	ldr	r3, [pc, #152]	@ (8007710 <HMI_Vacant_W+0x9b4>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
	distance = 0;				//moved to end start to solve T-box clear problem
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <HMI_Vacant_W+0x9b8>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	b002      	add	sp, #8
 8007688:	bdb0      	pop	{r4, r5, r7, pc}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	20000ea8 	.word	0x20000ea8
 8007690:	20003330 	.word	0x20003330
 8007694:	20000e4a 	.word	0x20000e4a
 8007698:	200001ec 	.word	0x200001ec
 800769c:	200001dc 	.word	0x200001dc
 80076a0:	08018edc 	.word	0x08018edc
 80076a4:	20001ef8 	.word	0x20001ef8
 80076a8:	20002f28 	.word	0x20002f28
 80076ac:	20000485 	.word	0x20000485
 80076b0:	20000b17 	.word	0x20000b17
 80076b4:	20000cf8 	.word	0x20000cf8
 80076b8:	20000cfc 	.word	0x20000cfc
 80076bc:	20000d00 	.word	0x20000d00
 80076c0:	20000cf0 	.word	0x20000cf0
 80076c4:	20000cf4 	.word	0x20000cf4
 80076c8:	20000cec 	.word	0x20000cec
 80076cc:	20000d14 	.word	0x20000d14
 80076d0:	20000d18 	.word	0x20000d18
 80076d4:	20000d0c 	.word	0x20000d0c
 80076d8:	20000d10 	.word	0x20000d10
 80076dc:	20000d08 	.word	0x20000d08
 80076e0:	20000d20 	.word	0x20000d20
 80076e4:	20000d24 	.word	0x20000d24
 80076e8:	20000d04 	.word	0x20000d04
 80076ec:	20000d30 	.word	0x20000d30
 80076f0:	20000a40 	.word	0x20000a40
 80076f4:	20000b20 	.word	0x20000b20
 80076f8:	20000a60 	.word	0x20000a60
 80076fc:	20000e48 	.word	0x20000e48
 8007700:	20000e49 	.word	0x20000e49
 8007704:	20000d28 	.word	0x20000d28
 8007708:	20000ce4 	.word	0x20000ce4
 800770c:	20000a54 	.word	0x20000a54
 8007710:	20000cd4 	.word	0x20000cd4
 8007714:	20000cd8 	.word	0x20000cd8

08007718 <extras_rd>:

void extras_rd(void)
{
 8007718:	b590      	push	{r4, r7, lr}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
	Last_Addition = Addition;
 800771e:	4b79      	ldr	r3, [pc, #484]	@ (8007904 <extras_rd+0x1ec>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b79      	ldr	r3, [pc, #484]	@ (8007908 <extras_rd+0x1f0>)
 8007724:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus10, 7, 0x0E);
 8007726:	4979      	ldr	r1, [pc, #484]	@ (800790c <extras_rd+0x1f4>)
 8007728:	4879      	ldr	r0, [pc, #484]	@ (8007910 <extras_rd+0x1f8>)
 800772a:	230e      	movs	r3, #14
 800772c:	2207      	movs	r2, #7
 800772e:	f00b fbf9 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007732:	2002      	movs	r0, #2
 8007734:	f006 f970 	bl	800da18 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 8007738:	4b76      	ldr	r3, [pc, #472]	@ (8007914 <extras_rd+0x1fc>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <extras_rd+0x68>
	{
		RxFlag = FALSE;
 8007740:	4b74      	ldr	r3, [pc, #464]	@ (8007914 <extras_rd+0x1fc>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
		unsigned char buffer1[2];
		buffer1[0] = RxBuff[7];
 8007746:	4b74      	ldr	r3, [pc, #464]	@ (8007918 <extras_rd+0x200>)
 8007748:	79da      	ldrb	r2, [r3, #7]
 800774a:	2408      	movs	r4, #8
 800774c:	193b      	adds	r3, r7, r4
 800774e:	701a      	strb	r2, [r3, #0]
		buffer1[1] = RxBuff[8];
 8007750:	4b71      	ldr	r3, [pc, #452]	@ (8007918 <extras_rd+0x200>)
 8007752:	7a1a      	ldrb	r2, [r3, #8]
 8007754:	193b      	adds	r3, r7, r4
 8007756:	705a      	strb	r2, [r3, #1]
		Plus_10 = byte_to_long(buffer1);
 8007758:	193b      	adds	r3, r7, r4
 800775a:	0018      	movs	r0, r3
 800775c:	f000 fb68 	bl	8007e30 <byte_to_long>
 8007760:	0003      	movs	r3, r0
 8007762:	b29a      	uxth	r2, r3
 8007764:	4b6d      	ldr	r3, [pc, #436]	@ (800791c <extras_rd+0x204>)
 8007766:	801a      	strh	r2, [r3, #0]
		memset(RxBuff,0,12);
 8007768:	4b6b      	ldr	r3, [pc, #428]	@ (8007918 <extras_rd+0x200>)
 800776a:	220c      	movs	r2, #12
 800776c:	2100      	movs	r1, #0
 800776e:	0018      	movs	r0, r3
 8007770:	f010 ff28 	bl	80185c4 <memset>
		memset(buffer1,0,2);
 8007774:	193b      	adds	r3, r7, r4
 8007776:	2202      	movs	r2, #2
 8007778:	2100      	movs	r1, #0
 800777a:	0018      	movs	r0, r3
 800777c:	f010 ff22 	bl	80185c4 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus1, 7, 0x0E);
 8007780:	4967      	ldr	r1, [pc, #412]	@ (8007920 <extras_rd+0x208>)
 8007782:	4863      	ldr	r0, [pc, #396]	@ (8007910 <extras_rd+0x1f8>)
 8007784:	230e      	movs	r3, #14
 8007786:	2207      	movs	r2, #7
 8007788:	f00b fbcc 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 800778c:	2002      	movs	r0, #2
 800778e:	f006 f943 	bl	800da18 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 8007792:	4b60      	ldr	r3, [pc, #384]	@ (8007914 <extras_rd+0x1fc>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01e      	beq.n	80077d8 <extras_rd+0xc0>
	{
		RxFlag = FALSE;
 800779a:	4b5e      	ldr	r3, [pc, #376]	@ (8007914 <extras_rd+0x1fc>)
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
		unsigned char buffer2[2];
		buffer2[0] = RxBuff[7];
 80077a0:	4b5d      	ldr	r3, [pc, #372]	@ (8007918 <extras_rd+0x200>)
 80077a2:	79da      	ldrb	r2, [r3, #7]
 80077a4:	1d3b      	adds	r3, r7, #4
 80077a6:	701a      	strb	r2, [r3, #0]
		buffer2[1] = RxBuff[8];
 80077a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007918 <extras_rd+0x200>)
 80077aa:	7a1a      	ldrb	r2, [r3, #8]
 80077ac:	1d3b      	adds	r3, r7, #4
 80077ae:	705a      	strb	r2, [r3, #1]
		Plus_1 = byte_to_long(buffer2);
 80077b0:	1d3b      	adds	r3, r7, #4
 80077b2:	0018      	movs	r0, r3
 80077b4:	f000 fb3c 	bl	8007e30 <byte_to_long>
 80077b8:	0003      	movs	r3, r0
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	4b59      	ldr	r3, [pc, #356]	@ (8007924 <extras_rd+0x20c>)
 80077be:	801a      	strh	r2, [r3, #0]
		memset(RxBuff,0,12);
 80077c0:	4b55      	ldr	r3, [pc, #340]	@ (8007918 <extras_rd+0x200>)
 80077c2:	220c      	movs	r2, #12
 80077c4:	2100      	movs	r1, #0
 80077c6:	0018      	movs	r0, r3
 80077c8:	f010 fefc 	bl	80185c4 <memset>
		memset(buffer2,0,2);
 80077cc:	1d3b      	adds	r3, r7, #4
 80077ce:	2202      	movs	r2, #2
 80077d0:	2100      	movs	r1, #0
 80077d2:	0018      	movs	r0, r3
 80077d4:	f010 fef6 	bl	80185c4 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Clear, 7, 0x0E);
 80077d8:	4953      	ldr	r1, [pc, #332]	@ (8007928 <extras_rd+0x210>)
 80077da:	484d      	ldr	r0, [pc, #308]	@ (8007910 <extras_rd+0x1f8>)
 80077dc:	230e      	movs	r3, #14
 80077de:	2207      	movs	r2, #7
 80077e0:	f00b fba0 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 80077e4:	2002      	movs	r0, #2
 80077e6:	f006 f917 	bl	800da18 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 80077ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007914 <extras_rd+0x1fc>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d04f      	beq.n	8007892 <extras_rd+0x17a>
	{
		RxFlag = FALSE;
 80077f2:	4b48      	ldr	r3, [pc, #288]	@ (8007914 <extras_rd+0x1fc>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 80077f8:	4b47      	ldr	r3, [pc, #284]	@ (8007918 <extras_rd+0x200>)
 80077fa:	7a1b      	ldrb	r3, [r3, #8]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d148      	bne.n	8007892 <extras_rd+0x17a>
		{
//			HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x10);
 8007800:	494a      	ldr	r1, [pc, #296]	@ (800792c <extras_rd+0x214>)
 8007802:	4843      	ldr	r0, [pc, #268]	@ (8007910 <extras_rd+0x1f8>)
 8007804:	2310      	movs	r3, #16
 8007806:	2208      	movs	r2, #8
 8007808:	f00b fb8c 	bl	8012f24 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Plus10_clear, 8, 0x10);
 800780c:	4948      	ldr	r1, [pc, #288]	@ (8007930 <extras_rd+0x218>)
 800780e:	4840      	ldr	r0, [pc, #256]	@ (8007910 <extras_rd+0x1f8>)
 8007810:	2310      	movs	r3, #16
 8007812:	2208      	movs	r2, #8
 8007814:	f00b fb86 	bl	8012f24 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Plus1_clear, 8, 0x10);
 8007818:	4946      	ldr	r1, [pc, #280]	@ (8007934 <extras_rd+0x21c>)
 800781a:	483d      	ldr	r0, [pc, #244]	@ (8007910 <extras_rd+0x1f8>)
 800781c:	2310      	movs	r3, #16
 800781e:	2208      	movs	r2, #8
 8007820:	f00b fb80 	bl	8012f24 <HAL_UART_Transmit>
			Addition = 0;
 8007824:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <extras_rd+0x1ec>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
			Plus_10 = 0;
 800782a:	4b3c      	ldr	r3, [pc, #240]	@ (800791c <extras_rd+0x204>)
 800782c:	2200      	movs	r2, #0
 800782e:	801a      	strh	r2, [r3, #0]
			Plus_1 = 0;
 8007830:	4b3c      	ldr	r3, [pc, #240]	@ (8007924 <extras_rd+0x20c>)
 8007832:	2200      	movs	r2, #0
 8007834:	801a      	strh	r2, [r3, #0]
			//clear print sub[6]-[11]
			sub[6] = 0x20;
 8007836:	4b40      	ldr	r3, [pc, #256]	@ (8007938 <extras_rd+0x220>)
 8007838:	2220      	movs	r2, #32
 800783a:	719a      	strb	r2, [r3, #6]
			sub[7] = 0x20;
 800783c:	4b3e      	ldr	r3, [pc, #248]	@ (8007938 <extras_rd+0x220>)
 800783e:	2220      	movs	r2, #32
 8007840:	71da      	strb	r2, [r3, #7]
			sub[8] = 0x20;
 8007842:	4b3d      	ldr	r3, [pc, #244]	@ (8007938 <extras_rd+0x220>)
 8007844:	2220      	movs	r2, #32
 8007846:	721a      	strb	r2, [r3, #8]
			sub[9] = 0x20;
 8007848:	4b3b      	ldr	r3, [pc, #236]	@ (8007938 <extras_rd+0x220>)
 800784a:	2220      	movs	r2, #32
 800784c:	725a      	strb	r2, [r3, #9]
			sub[10] = 0x20;
 800784e:	4b3a      	ldr	r3, [pc, #232]	@ (8007938 <extras_rd+0x220>)
 8007850:	2220      	movs	r2, #32
 8007852:	729a      	strb	r2, [r3, #10]
			sub[11] = 0x30;
 8007854:	4b38      	ldr	r3, [pc, #224]	@ (8007938 <extras_rd+0x220>)
 8007856:	2230      	movs	r2, #48	@ 0x30
 8007858:	72da      	strb	r2, [r3, #11]
			//clear print total[4]-[8]
			t_fare[4] = 0x20;
 800785a:	4b38      	ldr	r3, [pc, #224]	@ (800793c <extras_rd+0x224>)
 800785c:	2220      	movs	r2, #32
 800785e:	711a      	strb	r2, [r3, #4]
			t_fare[5] = 0x20;
 8007860:	4b36      	ldr	r3, [pc, #216]	@ (800793c <extras_rd+0x224>)
 8007862:	2220      	movs	r2, #32
 8007864:	715a      	strb	r2, [r3, #5]
			t_fare[6] = 0x20;
 8007866:	4b35      	ldr	r3, [pc, #212]	@ (800793c <extras_rd+0x224>)
 8007868:	2220      	movs	r2, #32
 800786a:	719a      	strb	r2, [r3, #6]
			t_fare[7] = 0x20;
 800786c:	4b33      	ldr	r3, [pc, #204]	@ (800793c <extras_rd+0x224>)
 800786e:	2220      	movs	r2, #32
 8007870:	71da      	strb	r2, [r3, #7]
			t_fare[8] = 0x20;
 8007872:	4b32      	ldr	r3, [pc, #200]	@ (800793c <extras_rd+0x224>)
 8007874:	2220      	movs	r2, #32
 8007876:	721a      	strb	r2, [r3, #8]
			uint8_t temp_array[4];
			Long_to_byte(Addition,temp_array);
 8007878:	4b22      	ldr	r3, [pc, #136]	@ (8007904 <extras_rd+0x1ec>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	003a      	movs	r2, r7
 800787e:	0011      	movs	r1, r2
 8007880:	0018      	movs	r0, r3
 8007882:	f000 f9e3 	bl	8007c4c <Long_to_byte>
			HMI_Command(Add_Charge,temp_array,10);
 8007886:	0039      	movs	r1, r7
 8007888:	4b2d      	ldr	r3, [pc, #180]	@ (8007940 <extras_rd+0x228>)
 800788a:	220a      	movs	r2, #10
 800788c:	0018      	movs	r0, r3
 800788e:	f000 f9fc 	bl	8007c8a <HMI_Command>
		}
	}

	Addition = 10 * (10 * Plus_10 + Plus_1);
 8007892:	4b22      	ldr	r3, [pc, #136]	@ (800791c <extras_rd+0x204>)
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	001a      	movs	r2, r3
 8007898:	0013      	movs	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	189b      	adds	r3, r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	001a      	movs	r2, r3
 80078a2:	4b20      	ldr	r3, [pc, #128]	@ (8007924 <extras_rd+0x20c>)
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	18d2      	adds	r2, r2, r3
 80078a8:	0013      	movs	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	001a      	movs	r2, r3
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <extras_rd+0x1ec>)
 80078b4:	601a      	str	r2, [r3, #0]
	uint8_t temp_array[4];
	Long_to_byte(Addition,temp_array);
 80078b6:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <extras_rd+0x1ec>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	240c      	movs	r4, #12
 80078bc:	193a      	adds	r2, r7, r4
 80078be:	0011      	movs	r1, r2
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 f9c3 	bl	8007c4c <Long_to_byte>
	HMI_Command(Add_Charge,temp_array,10);
 80078c6:	1939      	adds	r1, r7, r4
 80078c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <extras_rd+0x228>)
 80078ca:	220a      	movs	r2, #10
 80078cc:	0018      	movs	r0, r3
 80078ce:	f000 f9dc 	bl	8007c8a <HMI_Command>

	if(Last_Addition != Addition)
 80078d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <extras_rd+0x1f0>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <extras_rd+0x1ec>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d002      	beq.n	80078e4 <extras_rd+0x1cc>
	{
		Flag_Addition_Add = TRUE;
 80078de:	4b19      	ldr	r3, [pc, #100]	@ (8007944 <extras_rd+0x22c>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
	}

	if((Addition != 0) && (Flag_Addition_Add == FALSE))
 80078e4:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <extras_rd+0x1ec>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <extras_rd+0x1e2>
 80078ec:	4b15      	ldr	r3, [pc, #84]	@ (8007944 <extras_rd+0x22c>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <extras_rd+0x1e2>
	{
		Flag_Addition_F = TRUE;
 80078f4:	4b14      	ldr	r3, [pc, #80]	@ (8007948 <extras_rd+0x230>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
	}
}
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b005      	add	sp, #20
 8007900:	bd90      	pop	{r4, r7, pc}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	20000a60 	.word	0x20000a60
 8007908:	20000a5c 	.word	0x20000a5c
 800790c:	08019544 	.word	0x08019544
 8007910:	2000064c 	.word	0x2000064c
 8007914:	20000a30 	.word	0x20000a30
 8007918:	20000a34 	.word	0x20000a34
 800791c:	20000a68 	.word	0x20000a68
 8007920:	0801954c 	.word	0x0801954c
 8007924:	20000a6a 	.word	0x20000a6a
 8007928:	08019554 	.word	0x08019554
 800792c:	2000004c 	.word	0x2000004c
 8007930:	20000034 	.word	0x20000034
 8007934:	2000003c 	.word	0x2000003c
 8007938:	2000020c 	.word	0x2000020c
 800793c:	2000021c 	.word	0x2000021c
 8007940:	08019520 	.word	0x08019520
 8007944:	20000a64 	.word	0x20000a64
 8007948:	20000a65 	.word	0x20000a65

0800794c <printer_rd>:

void printer_rd(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Print, 7, 0x0E);
 8007950:	495e      	ldr	r1, [pc, #376]	@ (8007acc <printer_rd+0x180>)
 8007952:	485f      	ldr	r0, [pc, #380]	@ (8007ad0 <printer_rd+0x184>)
 8007954:	230e      	movs	r3, #14
 8007956:	2207      	movs	r2, #7
 8007958:	f00b fae4 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 800795c:	2002      	movs	r0, #2
 800795e:	f006 f85b 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8007962:	4b5c      	ldr	r3, [pc, #368]	@ (8007ad4 <printer_rd+0x188>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d100      	bne.n	800796c <printer_rd+0x20>
 800796a:	e0ac      	b.n	8007ac6 <printer_rd+0x17a>
	{
		RxFlag = FALSE;
 800796c:	4b59      	ldr	r3, [pc, #356]	@ (8007ad4 <printer_rd+0x188>)
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8007972:	4b59      	ldr	r3, [pc, #356]	@ (8007ad8 <printer_rd+0x18c>)
 8007974:	7a1b      	ldrb	r3, [r3, #8]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d000      	beq.n	800797c <printer_rd+0x30>
 800797a:	e0a4      	b.n	8007ac6 <printer_rd+0x17a>
		{
//			HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
			HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);
 800797c:	4957      	ldr	r1, [pc, #348]	@ (8007adc <printer_rd+0x190>)
 800797e:	4854      	ldr	r0, [pc, #336]	@ (8007ad0 <printer_rd+0x184>)
 8007980:	2310      	movs	r3, #16
 8007982:	2208      	movs	r2, #8
 8007984:	f00b face 	bl	8012f24 <HAL_UART_Transmit>
			Flag_Printed = TRUE;
 8007988:	4b55      	ldr	r3, [pc, #340]	@ (8007ae0 <printer_rd+0x194>)
 800798a:	2201      	movs	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]

			//record printer end time
			if((Drv_state == S_STOP) & Flag_Printed & Flag_End_Record)
 800798e:	4b55      	ldr	r3, [pc, #340]	@ (8007ae4 <printer_rd+0x198>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	3b02      	subs	r3, #2
 8007994:	425a      	negs	r2, r3
 8007996:	4153      	adcs	r3, r2
 8007998:	b2db      	uxtb	r3, r3
 800799a:	001a      	movs	r2, r3
 800799c:	4b50      	ldr	r3, [pc, #320]	@ (8007ae0 <printer_rd+0x194>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	4013      	ands	r3, r2
 80079a2:	4a51      	ldr	r2, [pc, #324]	@ (8007ae8 <printer_rd+0x19c>)
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	4013      	ands	r3, r2
 80079a8:	d100      	bne.n	80079ac <printer_rd+0x60>
 80079aa:	e087      	b.n	8007abc <printer_rd+0x170>
			{
				Flag_End_Record = FALSE;
 80079ac:	4b4e      	ldr	r3, [pc, #312]	@ (8007ae8 <printer_rd+0x19c>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	701a      	strb	r2, [r3, #0]
				//get end time
				//end - dd/mm/yy hh:mm
				//hmi_rtc - yy-mm-dd hh:mm:ss
				if (flag_vs_first == 1)
 80079b2:	4b4e      	ldr	r3, [pc, #312]	@ (8007aec <printer_rd+0x1a0>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d12b      	bne.n	8007a12 <printer_rd+0xc6>
				{
					flag_vs_first = 0;
 80079ba:	4b4c      	ldr	r3, [pc, #304]	@ (8007aec <printer_rd+0x1a0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
					end[0] = start[0];
 80079c0:	4b4b      	ldr	r3, [pc, #300]	@ (8007af0 <printer_rd+0x1a4>)
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	4b4b      	ldr	r3, [pc, #300]	@ (8007af4 <printer_rd+0x1a8>)
 80079c6:	701a      	strb	r2, [r3, #0]
					end[1] = start[1];
 80079c8:	4b49      	ldr	r3, [pc, #292]	@ (8007af0 <printer_rd+0x1a4>)
 80079ca:	785a      	ldrb	r2, [r3, #1]
 80079cc:	4b49      	ldr	r3, [pc, #292]	@ (8007af4 <printer_rd+0x1a8>)
 80079ce:	705a      	strb	r2, [r3, #1]
					end[3] = start[3];
 80079d0:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <printer_rd+0x1a4>)
 80079d2:	78da      	ldrb	r2, [r3, #3]
 80079d4:	4b47      	ldr	r3, [pc, #284]	@ (8007af4 <printer_rd+0x1a8>)
 80079d6:	70da      	strb	r2, [r3, #3]
					end[4] = start[4];
 80079d8:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <printer_rd+0x1a4>)
 80079da:	791a      	ldrb	r2, [r3, #4]
 80079dc:	4b45      	ldr	r3, [pc, #276]	@ (8007af4 <printer_rd+0x1a8>)
 80079de:	711a      	strb	r2, [r3, #4]
					end[6] = start[6];
 80079e0:	4b43      	ldr	r3, [pc, #268]	@ (8007af0 <printer_rd+0x1a4>)
 80079e2:	799a      	ldrb	r2, [r3, #6]
 80079e4:	4b43      	ldr	r3, [pc, #268]	@ (8007af4 <printer_rd+0x1a8>)
 80079e6:	719a      	strb	r2, [r3, #6]
					end[7] = start[7];
 80079e8:	4b41      	ldr	r3, [pc, #260]	@ (8007af0 <printer_rd+0x1a4>)
 80079ea:	79da      	ldrb	r2, [r3, #7]
 80079ec:	4b41      	ldr	r3, [pc, #260]	@ (8007af4 <printer_rd+0x1a8>)
 80079ee:	71da      	strb	r2, [r3, #7]
					end[9] = start[9];
 80079f0:	4b3f      	ldr	r3, [pc, #252]	@ (8007af0 <printer_rd+0x1a4>)
 80079f2:	7a5a      	ldrb	r2, [r3, #9]
 80079f4:	4b3f      	ldr	r3, [pc, #252]	@ (8007af4 <printer_rd+0x1a8>)
 80079f6:	725a      	strb	r2, [r3, #9]
					end[10] = start[10];
 80079f8:	4b3d      	ldr	r3, [pc, #244]	@ (8007af0 <printer_rd+0x1a4>)
 80079fa:	7a9a      	ldrb	r2, [r3, #10]
 80079fc:	4b3d      	ldr	r3, [pc, #244]	@ (8007af4 <printer_rd+0x1a8>)
 80079fe:	729a      	strb	r2, [r3, #10]
					end[12] = start[12];
 8007a00:	4b3b      	ldr	r3, [pc, #236]	@ (8007af0 <printer_rd+0x1a4>)
 8007a02:	7b1a      	ldrb	r2, [r3, #12]
 8007a04:	4b3b      	ldr	r3, [pc, #236]	@ (8007af4 <printer_rd+0x1a8>)
 8007a06:	731a      	strb	r2, [r3, #12]
					end[13] = start[13];
 8007a08:	4b39      	ldr	r3, [pc, #228]	@ (8007af0 <printer_rd+0x1a4>)
 8007a0a:	7b5a      	ldrb	r2, [r3, #13]
 8007a0c:	4b39      	ldr	r3, [pc, #228]	@ (8007af4 <printer_rd+0x1a8>)
 8007a0e:	735a      	strb	r2, [r3, #13]
 8007a10:	e054      	b.n	8007abc <printer_rd+0x170>
				}
				else if (flag_vs == 0)
 8007a12:	4b39      	ldr	r3, [pc, #228]	@ (8007af8 <printer_rd+0x1ac>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d128      	bne.n	8007a6c <printer_rd+0x120>
				{
					//record re-stop start moment
					end[0] = re_stop[0];
 8007a1a:	4b38      	ldr	r3, [pc, #224]	@ (8007afc <printer_rd+0x1b0>)
 8007a1c:	781a      	ldrb	r2, [r3, #0]
 8007a1e:	4b35      	ldr	r3, [pc, #212]	@ (8007af4 <printer_rd+0x1a8>)
 8007a20:	701a      	strb	r2, [r3, #0]
					end[1] = re_stop[1];
 8007a22:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <printer_rd+0x1b0>)
 8007a24:	785a      	ldrb	r2, [r3, #1]
 8007a26:	4b33      	ldr	r3, [pc, #204]	@ (8007af4 <printer_rd+0x1a8>)
 8007a28:	705a      	strb	r2, [r3, #1]
					end[3] = re_stop[3];
 8007a2a:	4b34      	ldr	r3, [pc, #208]	@ (8007afc <printer_rd+0x1b0>)
 8007a2c:	78da      	ldrb	r2, [r3, #3]
 8007a2e:	4b31      	ldr	r3, [pc, #196]	@ (8007af4 <printer_rd+0x1a8>)
 8007a30:	70da      	strb	r2, [r3, #3]
					end[4] = re_stop[4];
 8007a32:	4b32      	ldr	r3, [pc, #200]	@ (8007afc <printer_rd+0x1b0>)
 8007a34:	791a      	ldrb	r2, [r3, #4]
 8007a36:	4b2f      	ldr	r3, [pc, #188]	@ (8007af4 <printer_rd+0x1a8>)
 8007a38:	711a      	strb	r2, [r3, #4]
					end[6] = re_stop[6];
 8007a3a:	4b30      	ldr	r3, [pc, #192]	@ (8007afc <printer_rd+0x1b0>)
 8007a3c:	799a      	ldrb	r2, [r3, #6]
 8007a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007af4 <printer_rd+0x1a8>)
 8007a40:	719a      	strb	r2, [r3, #6]
					end[7] = re_stop[7];
 8007a42:	4b2e      	ldr	r3, [pc, #184]	@ (8007afc <printer_rd+0x1b0>)
 8007a44:	79da      	ldrb	r2, [r3, #7]
 8007a46:	4b2b      	ldr	r3, [pc, #172]	@ (8007af4 <printer_rd+0x1a8>)
 8007a48:	71da      	strb	r2, [r3, #7]
					end[9] = re_stop[9];
 8007a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007afc <printer_rd+0x1b0>)
 8007a4c:	7a5a      	ldrb	r2, [r3, #9]
 8007a4e:	4b29      	ldr	r3, [pc, #164]	@ (8007af4 <printer_rd+0x1a8>)
 8007a50:	725a      	strb	r2, [r3, #9]
					end[10] = re_stop[10];
 8007a52:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <printer_rd+0x1b0>)
 8007a54:	7a9a      	ldrb	r2, [r3, #10]
 8007a56:	4b27      	ldr	r3, [pc, #156]	@ (8007af4 <printer_rd+0x1a8>)
 8007a58:	729a      	strb	r2, [r3, #10]
					end[12] = re_stop[12];
 8007a5a:	4b28      	ldr	r3, [pc, #160]	@ (8007afc <printer_rd+0x1b0>)
 8007a5c:	7b1a      	ldrb	r2, [r3, #12]
 8007a5e:	4b25      	ldr	r3, [pc, #148]	@ (8007af4 <printer_rd+0x1a8>)
 8007a60:	731a      	strb	r2, [r3, #12]
					end[13] = re_stop[13];
 8007a62:	4b26      	ldr	r3, [pc, #152]	@ (8007afc <printer_rd+0x1b0>)
 8007a64:	7b5a      	ldrb	r2, [r3, #13]
 8007a66:	4b23      	ldr	r3, [pc, #140]	@ (8007af4 <printer_rd+0x1a8>)
 8007a68:	735a      	strb	r2, [r3, #13]
 8007a6a:	e027      	b.n	8007abc <printer_rd+0x170>
				}
				else
				{
					end[0] = hmi_rtc[14];
 8007a6c:	4b24      	ldr	r3, [pc, #144]	@ (8007b00 <printer_rd+0x1b4>)
 8007a6e:	7b9a      	ldrb	r2, [r3, #14]
 8007a70:	4b20      	ldr	r3, [pc, #128]	@ (8007af4 <printer_rd+0x1a8>)
 8007a72:	701a      	strb	r2, [r3, #0]
					end[1] = hmi_rtc[15];
 8007a74:	4b22      	ldr	r3, [pc, #136]	@ (8007b00 <printer_rd+0x1b4>)
 8007a76:	7bda      	ldrb	r2, [r3, #15]
 8007a78:	4b1e      	ldr	r3, [pc, #120]	@ (8007af4 <printer_rd+0x1a8>)
 8007a7a:	705a      	strb	r2, [r3, #1]
					end[3] = hmi_rtc[11];
 8007a7c:	4b20      	ldr	r3, [pc, #128]	@ (8007b00 <printer_rd+0x1b4>)
 8007a7e:	7ada      	ldrb	r2, [r3, #11]
 8007a80:	4b1c      	ldr	r3, [pc, #112]	@ (8007af4 <printer_rd+0x1a8>)
 8007a82:	70da      	strb	r2, [r3, #3]
					end[4] = hmi_rtc[12];
 8007a84:	4b1e      	ldr	r3, [pc, #120]	@ (8007b00 <printer_rd+0x1b4>)
 8007a86:	7b1a      	ldrb	r2, [r3, #12]
 8007a88:	4b1a      	ldr	r3, [pc, #104]	@ (8007af4 <printer_rd+0x1a8>)
 8007a8a:	711a      	strb	r2, [r3, #4]
					end[6] = hmi_rtc[8];
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007b00 <printer_rd+0x1b4>)
 8007a8e:	7a1a      	ldrb	r2, [r3, #8]
 8007a90:	4b18      	ldr	r3, [pc, #96]	@ (8007af4 <printer_rd+0x1a8>)
 8007a92:	719a      	strb	r2, [r3, #6]
					end[7] = hmi_rtc[9];
 8007a94:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <printer_rd+0x1b4>)
 8007a96:	7a5a      	ldrb	r2, [r3, #9]
 8007a98:	4b16      	ldr	r3, [pc, #88]	@ (8007af4 <printer_rd+0x1a8>)
 8007a9a:	71da      	strb	r2, [r3, #7]
					end[9] = hmi_rtc[17];
 8007a9c:	4b18      	ldr	r3, [pc, #96]	@ (8007b00 <printer_rd+0x1b4>)
 8007a9e:	7c5a      	ldrb	r2, [r3, #17]
 8007aa0:	4b14      	ldr	r3, [pc, #80]	@ (8007af4 <printer_rd+0x1a8>)
 8007aa2:	725a      	strb	r2, [r3, #9]
					end[10] = hmi_rtc[18];
 8007aa4:	4b16      	ldr	r3, [pc, #88]	@ (8007b00 <printer_rd+0x1b4>)
 8007aa6:	7c9a      	ldrb	r2, [r3, #18]
 8007aa8:	4b12      	ldr	r3, [pc, #72]	@ (8007af4 <printer_rd+0x1a8>)
 8007aaa:	729a      	strb	r2, [r3, #10]
					end[12] = hmi_rtc[20];
 8007aac:	4b14      	ldr	r3, [pc, #80]	@ (8007b00 <printer_rd+0x1b4>)
 8007aae:	7d1a      	ldrb	r2, [r3, #20]
 8007ab0:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <printer_rd+0x1a8>)
 8007ab2:	731a      	strb	r2, [r3, #12]
					end[13] = hmi_rtc[21];
 8007ab4:	4b12      	ldr	r3, [pc, #72]	@ (8007b00 <printer_rd+0x1b4>)
 8007ab6:	7d5a      	ldrb	r2, [r3, #21]
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8007af4 <printer_rd+0x1a8>)
 8007aba:	735a      	strb	r2, [r3, #13]
				}
			}

			printer_process();
 8007abc:	f000 fb9c 	bl	80081f8 <printer_process>
			//printer_e(); //test
			Flag_Printed = FALSE;
 8007ac0:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <printer_rd+0x194>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	0801955c 	.word	0x0801955c
 8007ad0:	2000064c 	.word	0x2000064c
 8007ad4:	20000a30 	.word	0x20000a30
 8007ad8:	20000a34 	.word	0x20000a34
 8007adc:	20000044 	.word	0x20000044
 8007ae0:	20000b15 	.word	0x20000b15
 8007ae4:	20000a66 	.word	0x20000a66
 8007ae8:	2000022a 	.word	0x2000022a
 8007aec:	20000b17 	.word	0x20000b17
 8007af0:	200001ac 	.word	0x200001ac
 8007af4:	200001bc 	.word	0x200001bc
 8007af8:	20000b16 	.word	0x20000b16
 8007afc:	200001cc 	.word	0x200001cc
 8007b00:	2000007c 	.word	0x2000007c

08007b04 <check_rd>:

void check_rd(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus10, 7, 0x0E);
 8007b08:	490c      	ldr	r1, [pc, #48]	@ (8007b3c <check_rd+0x38>)
 8007b0a:	480d      	ldr	r0, [pc, #52]	@ (8007b40 <check_rd+0x3c>)
 8007b0c:	230e      	movs	r3, #14
 8007b0e:	2207      	movs	r2, #7
 8007b10:	f00b fa08 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007b14:	2002      	movs	r0, #2
 8007b16:	f005 ff7f 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <check_rd+0x40>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <check_rd+0x30>
	{
		RxFlag = FALSE;
 8007b22:	4b08      	ldr	r3, [pc, #32]	@ (8007b44 <check_rd+0x40>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8007b28:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <check_rd+0x44>)
 8007b2a:	7a1b      	ldrb	r3, [r3, #8]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <check_rd+0x30>
		{
			printer_e(); //test
 8007b30:	f000 fd06 	bl	8008540 <printer_e>
		}
	}
}
 8007b34:	46c0      	nop			@ (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			@ (mov r8, r8)
 8007b3c:	08019544 	.word	0x08019544
 8007b40:	2000064c 	.word	0x2000064c
 8007b44:	20000a30 	.word	0x20000a30
 8007b48:	20000a34 	.word	0x20000a34

08007b4c <clear_rd>:

void clear_rd(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus1, 7, 0x0E);
 8007b50:	4934      	ldr	r1, [pc, #208]	@ (8007c24 <clear_rd+0xd8>)
 8007b52:	4835      	ldr	r0, [pc, #212]	@ (8007c28 <clear_rd+0xdc>)
 8007b54:	230e      	movs	r3, #14
 8007b56:	2207      	movs	r2, #7
 8007b58:	f00b f9e4 	bl	8012f24 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007b5c:	2002      	movs	r0, #2
 8007b5e:	f005 ff5b 	bl	800da18 <HAL_Delay>
	if(RxFlag)
 8007b62:	4b32      	ldr	r3, [pc, #200]	@ (8007c2c <clear_rd+0xe0>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d059      	beq.n	8007c1e <clear_rd+0xd2>
	{
		RxFlag = FALSE;
 8007b6a:	4b30      	ldr	r3, [pc, #192]	@ (8007c2c <clear_rd+0xe0>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8007b70:	4b2f      	ldr	r3, [pc, #188]	@ (8007c30 <clear_rd+0xe4>)
 8007b72:	7a1b      	ldrb	r3, [r3, #8]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d152      	bne.n	8007c1e <clear_rd+0xd2>
		{
			cflag_d = 0;
 8007b78:	4b2e      	ldr	r3, [pc, #184]	@ (8007c34 <clear_rd+0xe8>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
			cfare_d = 0;
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c38 <clear_rd+0xec>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
			csub_d = 0;
 8007b84:	4b2d      	ldr	r3, [pc, #180]	@ (8007c3c <clear_rd+0xf0>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

			cflag[0] = 0x30;
 8007b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <clear_rd+0xf4>)
 8007b8c:	2230      	movs	r2, #48	@ 0x30
 8007b8e:	701a      	strb	r2, [r3, #0]
			cflag[1] = 0x30;
 8007b90:	4b2b      	ldr	r3, [pc, #172]	@ (8007c40 <clear_rd+0xf4>)
 8007b92:	2230      	movs	r2, #48	@ 0x30
 8007b94:	705a      	strb	r2, [r3, #1]
			cflag[2] = 0x30;
 8007b96:	4b2a      	ldr	r3, [pc, #168]	@ (8007c40 <clear_rd+0xf4>)
 8007b98:	2230      	movs	r2, #48	@ 0x30
 8007b9a:	709a      	strb	r2, [r3, #2]
			cflag[3] = 0x30;
 8007b9c:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <clear_rd+0xf4>)
 8007b9e:	2230      	movs	r2, #48	@ 0x30
 8007ba0:	70da      	strb	r2, [r3, #3]
			cflag[4] = 0x30;
 8007ba2:	4b27      	ldr	r3, [pc, #156]	@ (8007c40 <clear_rd+0xf4>)
 8007ba4:	2230      	movs	r2, #48	@ 0x30
 8007ba6:	711a      	strb	r2, [r3, #4]
			cflag[5] = 0x30;
 8007ba8:	4b25      	ldr	r3, [pc, #148]	@ (8007c40 <clear_rd+0xf4>)
 8007baa:	2230      	movs	r2, #48	@ 0x30
 8007bac:	715a      	strb	r2, [r3, #5]
			cflag[6] = 0x30;
 8007bae:	4b24      	ldr	r3, [pc, #144]	@ (8007c40 <clear_rd+0xf4>)
 8007bb0:	2230      	movs	r2, #48	@ 0x30
 8007bb2:	719a      	strb	r2, [r3, #6]
			cflag[7] = 0x30;
 8007bb4:	4b22      	ldr	r3, [pc, #136]	@ (8007c40 <clear_rd+0xf4>)
 8007bb6:	2230      	movs	r2, #48	@ 0x30
 8007bb8:	71da      	strb	r2, [r3, #7]

			cfare[0] = 0x30;
 8007bba:	4b22      	ldr	r3, [pc, #136]	@ (8007c44 <clear_rd+0xf8>)
 8007bbc:	2230      	movs	r2, #48	@ 0x30
 8007bbe:	701a      	strb	r2, [r3, #0]
			cfare[1] = 0x30;
 8007bc0:	4b20      	ldr	r3, [pc, #128]	@ (8007c44 <clear_rd+0xf8>)
 8007bc2:	2230      	movs	r2, #48	@ 0x30
 8007bc4:	705a      	strb	r2, [r3, #1]
			cfare[2] = 0x30;
 8007bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c44 <clear_rd+0xf8>)
 8007bc8:	2230      	movs	r2, #48	@ 0x30
 8007bca:	709a      	strb	r2, [r3, #2]
			cfare[3] = 0x30;
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <clear_rd+0xf8>)
 8007bce:	2230      	movs	r2, #48	@ 0x30
 8007bd0:	70da      	strb	r2, [r3, #3]
			cfare[4] = 0x30;
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c44 <clear_rd+0xf8>)
 8007bd4:	2230      	movs	r2, #48	@ 0x30
 8007bd6:	711a      	strb	r2, [r3, #4]
			cfare[5] = 0x30;
 8007bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c44 <clear_rd+0xf8>)
 8007bda:	2230      	movs	r2, #48	@ 0x30
 8007bdc:	715a      	strb	r2, [r3, #5]
			cfare[6] = 0x30;
 8007bde:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <clear_rd+0xf8>)
 8007be0:	2230      	movs	r2, #48	@ 0x30
 8007be2:	719a      	strb	r2, [r3, #6]
			cfare[7] = 0x30;
 8007be4:	4b17      	ldr	r3, [pc, #92]	@ (8007c44 <clear_rd+0xf8>)
 8007be6:	2230      	movs	r2, #48	@ 0x30
 8007be8:	71da      	strb	r2, [r3, #7]

			csub[0] = 0x30;
 8007bea:	4b17      	ldr	r3, [pc, #92]	@ (8007c48 <clear_rd+0xfc>)
 8007bec:	2230      	movs	r2, #48	@ 0x30
 8007bee:	701a      	strb	r2, [r3, #0]
			csub[1] = 0x30;
 8007bf0:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <clear_rd+0xfc>)
 8007bf2:	2230      	movs	r2, #48	@ 0x30
 8007bf4:	705a      	strb	r2, [r3, #1]
			csub[2] = 0x30;
 8007bf6:	4b14      	ldr	r3, [pc, #80]	@ (8007c48 <clear_rd+0xfc>)
 8007bf8:	2230      	movs	r2, #48	@ 0x30
 8007bfa:	709a      	strb	r2, [r3, #2]
			csub[3] = 0x30;
 8007bfc:	4b12      	ldr	r3, [pc, #72]	@ (8007c48 <clear_rd+0xfc>)
 8007bfe:	2230      	movs	r2, #48	@ 0x30
 8007c00:	70da      	strb	r2, [r3, #3]
			csub[4] = 0x30;
 8007c02:	4b11      	ldr	r3, [pc, #68]	@ (8007c48 <clear_rd+0xfc>)
 8007c04:	2230      	movs	r2, #48	@ 0x30
 8007c06:	711a      	strb	r2, [r3, #4]
			csub[5] = 0x30;
 8007c08:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <clear_rd+0xfc>)
 8007c0a:	2230      	movs	r2, #48	@ 0x30
 8007c0c:	715a      	strb	r2, [r3, #5]
			csub[6] = 0x30;
 8007c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c48 <clear_rd+0xfc>)
 8007c10:	2230      	movs	r2, #48	@ 0x30
 8007c12:	719a      	strb	r2, [r3, #6]
			csub[7] = 0x30;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <clear_rd+0xfc>)
 8007c16:	2230      	movs	r2, #48	@ 0x30
 8007c18:	71da      	strb	r2, [r3, #7]

			E_write();
 8007c1a:	f003 f9f7 	bl	800b00c <E_write>
		}
	}
}
 8007c1e:	46c0      	nop			@ (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	0801954c 	.word	0x0801954c
 8007c28:	2000064c 	.word	0x2000064c
 8007c2c:	20000a30 	.word	0x20000a30
 8007c30:	20000a34 	.word	0x20000a34
 8007c34:	20000e20 	.word	0x20000e20
 8007c38:	20000e30 	.word	0x20000e30
 8007c3c:	20000e34 	.word	0x20000e34
 8007c40:	20000e68 	.word	0x20000e68
 8007c44:	20000e88 	.word	0x20000e88
 8007c48:	20000e90 	.word	0x20000e90

08007c4c <Long_to_byte>:

void Long_to_byte(uint32_t longInt, uint8_t* byteArray)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	byteArray[0] = (uint8_t)((longInt & 0xFF000000) >> 24 );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0x00FF0000) >> 16 );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	0c1a      	lsrs	r2, r3, #16
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]
	byteArray[2] = (uint8_t)((longInt & 0x0000FF00) >> 8 );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0a1a      	lsrs	r2, r3, #8
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	3302      	adds	r3, #2
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]
	byteArray[3] = (uint8_t)((longInt & 0X000000FF));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	3303      	adds	r3, #3
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b002      	add	sp, #8
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HMI_Command>:

	return LongInt;
}

void HMI_Command(const uint8_t* command, uint8_t* data, uint8_t NOB)
{
 8007c8a:	b590      	push	{r4, r7, lr}
 8007c8c:	b089      	sub	sp, #36	@ 0x24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	1dfb      	adds	r3, r7, #7
 8007c96:	701a      	strb	r2, [r3, #0]
	char string[15];

	memset(string,0,15);
 8007c98:	2410      	movs	r4, #16
 8007c9a:	193b      	adds	r3, r7, r4
 8007c9c:	220f      	movs	r2, #15
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f010 fc8f 	bl	80185c4 <memset>
	memcpy(string, command, NOB);	// Fee 10 byte
 8007ca6:	1dfb      	adds	r3, r7, #7
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	193b      	adds	r3, r7, r4
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f010 fcbc 	bl	801862c <memcpy>
	memcpy(string+6,data,4);
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	3306      	adds	r3, #6
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f010 fcb5 	bl	801862c <memcpy>
	HMI_Transmit(string,NOB);
 8007cc2:	1dfb      	adds	r3, r7, #7
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f000 f804 	bl	8007cd8 <HMI_Transmit>
}
 8007cd0:	46c0      	nop			@ (mov r8, r8)
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b009      	add	sp, #36	@ 0x24
 8007cd6:	bd90      	pop	{r4, r7, pc}

08007cd8 <HMI_Transmit>:

void HMI_Transmit(char out[], uint8_t nob)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	000a      	movs	r2, r1
 8007ce2:	1cfb      	adds	r3, r7, #3
 8007ce4:	701a      	strb	r2, [r3, #0]
	uint8_t temp[20];
//	uint16_t length = 0;

	memcpy(temp,out,11);	// debug brake point
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	230c      	movs	r3, #12
 8007cea:	18fb      	adds	r3, r7, r3
 8007cec:	220b      	movs	r2, #11
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f010 fc9c 	bl	801862c <memcpy>
//	length = strlen(out);

	HAL_UART_Transmit(&huart1, (uint8_t *) out, nob, 10);
 8007cf4:	1cfb      	adds	r3, r7, #3
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4803      	ldr	r0, [pc, #12]	@ (8007d0c <HMI_Transmit+0x34>)
 8007cfe:	230a      	movs	r3, #10
 8007d00:	f00b f910 	bl	8012f24 <HAL_UART_Transmit>
}
 8007d04:	46c0      	nop			@ (mov r8, r8)
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b008      	add	sp, #32
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	2000064c 	.word	0x2000064c

08007d10 <CRC16>:

uint16_t CRC16(unsigned char *cal, uint16_t len)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	000a      	movs	r2, r1
 8007d1a:	1cbb      	adds	r3, r7, #2
 8007d1c:	801a      	strh	r2, [r3, #0]
    int i;
    unsigned short crc = 0xFFFF;
 8007d1e:	230a      	movs	r3, #10
 8007d20:	18fb      	adds	r3, r7, r3
 8007d22:	2201      	movs	r2, #1
 8007d24:	4252      	negs	r2, r2
 8007d26:	801a      	strh	r2, [r3, #0]
    if (len == 0)
 8007d28:	1cbb      	adds	r3, r7, #2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d130      	bne.n	8007d92 <CRC16+0x82>
        len = 1;
 8007d30:	1cbb      	adds	r3, r7, #2
 8007d32:	2201      	movs	r2, #1
 8007d34:	801a      	strh	r2, [r3, #0]

    while (len--)
 8007d36:	e02c      	b.n	8007d92 <CRC16+0x82>
    {
        crc ^= *cal;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	0019      	movs	r1, r3
 8007d3e:	220a      	movs	r2, #10
 8007d40:	18bb      	adds	r3, r7, r2
 8007d42:	18ba      	adds	r2, r7, r2
 8007d44:	8812      	ldrh	r2, [r2, #0]
 8007d46:	404a      	eors	r2, r1
 8007d48:	801a      	strh	r2, [r3, #0]
        for (i = 0; i<8; i++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e01a      	b.n	8007d86 <CRC16+0x76>
        {
            if (crc & 1)
 8007d50:	210a      	movs	r1, #10
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	2201      	movs	r2, #1
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d00b      	beq.n	8007d74 <CRC16+0x64>
            {
                crc >>= 1;
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	187a      	adds	r2, r7, r1
 8007d60:	8812      	ldrh	r2, [r2, #0]
 8007d62:	0852      	lsrs	r2, r2, #1
 8007d64:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8007d66:	187b      	adds	r3, r7, r1
 8007d68:	187a      	adds	r2, r7, r1
 8007d6a:	8812      	ldrh	r2, [r2, #0]
 8007d6c:	4910      	ldr	r1, [pc, #64]	@ (8007db0 <CRC16+0xa0>)
 8007d6e:	404a      	eors	r2, r1
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e005      	b.n	8007d80 <CRC16+0x70>
            }
            else
                crc >>= 1;
 8007d74:	220a      	movs	r2, #10
 8007d76:	18bb      	adds	r3, r7, r2
 8007d78:	18ba      	adds	r2, r7, r2
 8007d7a:	8812      	ldrh	r2, [r2, #0]
 8007d7c:	0852      	lsrs	r2, r2, #1
 8007d7e:	801a      	strh	r2, [r3, #0]
        for (i = 0; i<8; i++)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b07      	cmp	r3, #7
 8007d8a:	dde1      	ble.n	8007d50 <CRC16+0x40>
        }
        cal++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	607b      	str	r3, [r7, #4]
    while (len--)
 8007d92:	1cbb      	adds	r3, r7, #2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	1cba      	adds	r2, r7, #2
 8007d98:	1e59      	subs	r1, r3, #1
 8007d9a:	8011      	strh	r1, [r2, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1cb      	bne.n	8007d38 <CRC16+0x28>
    }
    return(crc);
 8007da0:	230a      	movs	r3, #10
 8007da2:	18fb      	adds	r3, r7, r3
 8007da4:	881b      	ldrh	r3, [r3, #0]
}
 8007da6:	0018      	movs	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b004      	add	sp, #16
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	46c0      	nop			@ (mov r8, r8)
 8007db0:	ffffa001 	.word	0xffffa001

08007db4 <checksum_8bit>:

unsigned char checksum_8bit(unsigned char *data, int len)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
	int i;
	unsigned short sum = 0x00;
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	18fb      	adds	r3, r7, r3
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
	for (i=0; i<len; i++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	e00d      	b.n	8007de8 <checksum_8bit+0x34>
	{
		sum += data[i];
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	18d3      	adds	r3, r2, r3
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	0019      	movs	r1, r3
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	18bb      	adds	r3, r7, r2
 8007dda:	18ba      	adds	r2, r7, r2
 8007ddc:	8812      	ldrh	r2, [r2, #0]
 8007dde:	188a      	adds	r2, r1, r2
 8007de0:	801a      	strh	r2, [r3, #0]
	for (i=0; i<len; i++)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	dbed      	blt.n	8007dcc <checksum_8bit+0x18>
	}
//	sum &= 0xFF
	return (unsigned char)sum;
 8007df0:	230a      	movs	r3, #10
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b2db      	uxtb	r3, r3
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b004      	add	sp, #16
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <long_to_byte>:

void long_to_byte(uint16_t longInt, unsigned char* byteArray)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	0002      	movs	r2, r0
 8007e08:	6039      	str	r1, [r7, #0]
 8007e0a:	1dbb      	adds	r3, r7, #6
 8007e0c:	801a      	strh	r2, [r3, #0]
	byteArray[0] = (uint8_t)((longInt & 0xFF00) >> 8 );
 8007e0e:	1dbb      	adds	r3, r7, #6
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	0a1b      	lsrs	r3, r3, #8
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0X00FF));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	1dba      	adds	r2, r7, #6
 8007e22:	8812      	ldrh	r2, [r2, #0]
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
}
 8007e28:	46c0      	nop			@ (mov r8, r8)
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b002      	add	sp, #8
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <byte_to_long>:

uint32_t byte_to_long(uint8_t* byteArray)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	long LongInt = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

	LongInt  = ((unsigned int) byteArray[0]) << 8;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	60fb      	str	r3, [r7, #12]
	LongInt |= ((unsigned int) byteArray[1]);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3301      	adds	r3, #1
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

	return LongInt;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b004      	add	sp, #16
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <long_to_byte_crc>:

void long_to_byte_crc(uint16_t longInt, unsigned char* byteArray)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	0002      	movs	r2, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	1dbb      	adds	r3, r7, #6
 8007e68:	801a      	strh	r2, [r3, #0]
	byteArray[0] = (uint8_t)(longInt & 0x00FF);
 8007e6a:	1dbb      	adds	r3, r7, #6
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0XFF00) >> 8 );
 8007e74:	1dbb      	adds	r3, r7, #6
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]
}
 8007e84:	46c0      	nop			@ (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <tbox_start>:

void tbox_start(void)
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b0a1      	sub	sp, #132	@ 0x84
 8007e90:	af00      	add	r7, sp, #0
	uint16_t crc1_value;
	unsigned char crc1[2];
//	unsigned char t_start[16];

	//sn
	serial = serial + 1;
 8007e92:	4b5a      	ldr	r3, [pc, #360]	@ (8007ffc <tbox_start+0x170>)
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	3301      	adds	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	4b58      	ldr	r3, [pc, #352]	@ (8007ffc <tbox_start+0x170>)
 8007e9c:	801a      	strh	r2, [r3, #0]
	long_to_byte(serial, sn);
 8007e9e:	4b57      	ldr	r3, [pc, #348]	@ (8007ffc <tbox_start+0x170>)
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	247c      	movs	r4, #124	@ 0x7c
 8007ea4:	193a      	adds	r2, r7, r4
 8007ea6:	0011      	movs	r1, r2
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7ff ffa9 	bl	8007e00 <long_to_byte>
	memcpy(hd1, sn, sizeof(unsigned char)*2);
 8007eae:	4b54      	ldr	r3, [pc, #336]	@ (8008000 <tbox_start+0x174>)
 8007eb0:	193a      	adds	r2, r7, r4
 8007eb2:	8812      	ldrh	r2, [r2, #0]
 8007eb4:	801a      	strh	r2, [r3, #0]

	//data
	RTC_date = PCF2129_getDate();
 8007eb6:	4c53      	ldr	r4, [pc, #332]	@ (8008004 <tbox_start+0x178>)
 8007eb8:	003b      	movs	r3, r7
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f004 fbfc 	bl	800c6b8 <PCF2129_getDate>
 8007ec0:	003b      	movs	r3, r7
 8007ec2:	0020      	movs	r0, r4
 8007ec4:	0019      	movs	r1, r3
 8007ec6:	2358      	movs	r3, #88	@ 0x58
 8007ec8:	001a      	movs	r2, r3
 8007eca:	f010 fbaf 	bl	801862c <memcpy>
	year = RTC_date.date.y;
 8007ece:	4b4d      	ldr	r3, [pc, #308]	@ (8008004 <tbox_start+0x178>)
 8007ed0:	224d      	movs	r2, #77	@ 0x4d
 8007ed2:	5c9b      	ldrb	r3, [r3, r2]
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8008008 <tbox_start+0x17c>)
 8007ed8:	801a      	strh	r2, [r3, #0]
	data1[0] = (uint8_t)(year & 0xFF);
 8007eda:	4b4b      	ldr	r3, [pc, #300]	@ (8008008 <tbox_start+0x17c>)
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800800c <tbox_start+0x180>)
 8007ee2:	701a      	strb	r2, [r3, #0]
	month = RTC_date.date.m;
 8007ee4:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <tbox_start+0x178>)
 8007ee6:	224e      	movs	r2, #78	@ 0x4e
 8007ee8:	5c9b      	ldrb	r3, [r3, r2]
 8007eea:	001a      	movs	r2, r3
 8007eec:	4b48      	ldr	r3, [pc, #288]	@ (8008010 <tbox_start+0x184>)
 8007eee:	801a      	strh	r2, [r3, #0]
	data1[1] = (uint8_t)(month & 0xFF);
 8007ef0:	4b47      	ldr	r3, [pc, #284]	@ (8008010 <tbox_start+0x184>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	4b45      	ldr	r3, [pc, #276]	@ (800800c <tbox_start+0x180>)
 8007ef8:	705a      	strb	r2, [r3, #1]
	day = RTC_date.date.d;
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <tbox_start+0x178>)
 8007efc:	224f      	movs	r2, #79	@ 0x4f
 8007efe:	5c9b      	ldrb	r3, [r3, r2]
 8007f00:	001a      	movs	r2, r3
 8007f02:	4b44      	ldr	r3, [pc, #272]	@ (8008014 <tbox_start+0x188>)
 8007f04:	801a      	strh	r2, [r3, #0]
	data1[2] = (uint8_t)(day & 0xFF);
 8007f06:	4b43      	ldr	r3, [pc, #268]	@ (8008014 <tbox_start+0x188>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800800c <tbox_start+0x180>)
 8007f0e:	709a      	strb	r2, [r3, #2]
	hour = RTC_date.date.hh;
 8007f10:	4b3c      	ldr	r3, [pc, #240]	@ (8008004 <tbox_start+0x178>)
 8007f12:	2251      	movs	r2, #81	@ 0x51
 8007f14:	5c9b      	ldrb	r3, [r3, r2]
 8007f16:	001a      	movs	r2, r3
 8007f18:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <tbox_start+0x18c>)
 8007f1a:	801a      	strh	r2, [r3, #0]
	data1[3] = (uint8_t)(hour & 0xFF);
 8007f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8008018 <tbox_start+0x18c>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	4b3a      	ldr	r3, [pc, #232]	@ (800800c <tbox_start+0x180>)
 8007f24:	70da      	strb	r2, [r3, #3]
	minute = RTC_date.date.mm;
 8007f26:	4b37      	ldr	r3, [pc, #220]	@ (8008004 <tbox_start+0x178>)
 8007f28:	2252      	movs	r2, #82	@ 0x52
 8007f2a:	5c9b      	ldrb	r3, [r3, r2]
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800801c <tbox_start+0x190>)
 8007f30:	801a      	strh	r2, [r3, #0]
	data1[4] = (uint8_t)(minute & 0xFF);
 8007f32:	4b3a      	ldr	r3, [pc, #232]	@ (800801c <tbox_start+0x190>)
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	4b34      	ldr	r3, [pc, #208]	@ (800800c <tbox_start+0x180>)
 8007f3a:	711a      	strb	r2, [r3, #4]
	second = RTC_date.date.ss;
 8007f3c:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <tbox_start+0x178>)
 8007f3e:	2253      	movs	r2, #83	@ 0x53
 8007f40:	5c9b      	ldrb	r3, [r3, r2]
 8007f42:	001a      	movs	r2, r3
 8007f44:	4b36      	ldr	r3, [pc, #216]	@ (8008020 <tbox_start+0x194>)
 8007f46:	801a      	strh	r2, [r3, #0]
	data1[5] = (uint8_t)(second & 0xFF);
 8007f48:	4b35      	ldr	r3, [pc, #212]	@ (8008020 <tbox_start+0x194>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800800c <tbox_start+0x180>)
 8007f50:	715a      	strb	r2, [r3, #5]
	//for crc calculate, cal_s = (header + data)
	memcpy(cal_s, hd1, sizeof(unsigned char)*6);
 8007f52:	2570      	movs	r5, #112	@ 0x70
 8007f54:	197b      	adds	r3, r7, r5
 8007f56:	4a2a      	ldr	r2, [pc, #168]	@ (8008000 <tbox_start+0x174>)
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	6019      	str	r1, [r3, #0]
 8007f5c:	8892      	ldrh	r2, [r2, #4]
 8007f5e:	809a      	strh	r2, [r3, #4]
	memcpy(cal_s+6, data1, sizeof(unsigned char)*6);
 8007f60:	197b      	adds	r3, r7, r5
 8007f62:	3306      	adds	r3, #6
 8007f64:	4a29      	ldr	r2, [pc, #164]	@ (800800c <tbox_start+0x180>)
 8007f66:	0018      	movs	r0, r3
 8007f68:	0011      	movs	r1, r2
 8007f6a:	2306      	movs	r3, #6
 8007f6c:	001a      	movs	r2, r3
 8007f6e:	f010 fb5d 	bl	801862c <memcpy>
	crc1_value = CRC16(cal_s, 12);
 8007f72:	267e      	movs	r6, #126	@ 0x7e
 8007f74:	19bc      	adds	r4, r7, r6
 8007f76:	197b      	adds	r3, r7, r5
 8007f78:	210c      	movs	r1, #12
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f7ff fec8 	bl	8007d10 <CRC16>
 8007f80:	0003      	movs	r3, r0
 8007f82:	8023      	strh	r3, [r4, #0]
	long_to_byte_crc(crc1_value, crc1);
 8007f84:	246c      	movs	r4, #108	@ 0x6c
 8007f86:	193a      	adds	r2, r7, r4
 8007f88:	19bb      	adds	r3, r7, r6
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	0011      	movs	r1, r2
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f7ff ff64 	bl	8007e5c <long_to_byte_crc>

	//update msg
	memcpy(t_start, zone, sizeof(unsigned char)*2);
 8007f94:	4b23      	ldr	r3, [pc, #140]	@ (8008024 <tbox_start+0x198>)
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <tbox_start+0x19c>)
 8007f9a:	801a      	strh	r2, [r3, #0]
	memcpy(t_start+2, crc1, sizeof(unsigned char)*2);
 8007f9c:	4a23      	ldr	r2, [pc, #140]	@ (800802c <tbox_start+0x1a0>)
 8007f9e:	193b      	adds	r3, r7, r4
 8007fa0:	0010      	movs	r0, r2
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	001a      	movs	r2, r3
 8007fa8:	f010 fb40 	bl	801862c <memcpy>
	memcpy(t_start+4, hd1, sizeof(unsigned char)*6);
 8007fac:	4a20      	ldr	r2, [pc, #128]	@ (8008030 <tbox_start+0x1a4>)
 8007fae:	4b14      	ldr	r3, [pc, #80]	@ (8008000 <tbox_start+0x174>)
 8007fb0:	0010      	movs	r0, r2
 8007fb2:	0019      	movs	r1, r3
 8007fb4:	2306      	movs	r3, #6
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	f010 fb38 	bl	801862c <memcpy>
	memcpy(t_start+10, data1, sizeof(unsigned char)*6);
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008034 <tbox_start+0x1a8>)
 8007fbe:	4b13      	ldr	r3, [pc, #76]	@ (800800c <tbox_start+0x180>)
 8007fc0:	0010      	movs	r0, r2
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	2306      	movs	r3, #6
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	f010 fb30 	bl	801862c <memcpy>

	//transmit
	unsigned char buffer[sizeof(t_start)];
	memset(buffer, 0, sizeof(t_start));
 8007fcc:	255c      	movs	r5, #92	@ 0x5c
 8007fce:	197b      	adds	r3, r7, r5
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f010 faf5 	bl	80185c4 <memset>
	memcpy(buffer, &t_start, sizeof(t_start));
 8007fda:	197b      	adds	r3, r7, r5
 8007fdc:	4a12      	ldr	r2, [pc, #72]	@ (8008028 <tbox_start+0x19c>)
 8007fde:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007fe0:	c313      	stmia	r3!, {r0, r1, r4}
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, sizeof(buffer),0xffff);
 8007fe6:	4b14      	ldr	r3, [pc, #80]	@ (8008038 <tbox_start+0x1ac>)
 8007fe8:	1979      	adds	r1, r7, r5
 8007fea:	4814      	ldr	r0, [pc, #80]	@ (800803c <tbox_start+0x1b0>)
 8007fec:	2210      	movs	r2, #16
 8007fee:	f00a ff99 	bl	8012f24 <HAL_UART_Transmit>

	//clear
//	memset(t_start, 0, 16);
}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b021      	add	sp, #132	@ 0x84
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	20000b18 	.word	0x20000b18
 8008000:	20000230 	.word	0x20000230
 8008004:	20000c14 	.word	0x20000c14
 8008008:	20000c6c 	.word	0x20000c6c
 800800c:	20000b34 	.word	0x20000b34
 8008010:	20000c6e 	.word	0x20000c6e
 8008014:	20000c70 	.word	0x20000c70
 8008018:	20000c72 	.word	0x20000c72
 800801c:	20000c74 	.word	0x20000c74
 8008020:	20000c76 	.word	0x20000c76
 8008024:	2000022c 	.word	0x2000022c
 8008028:	20000b58 	.word	0x20000b58
 800802c:	20000b5a 	.word	0x20000b5a
 8008030:	20000b5c 	.word	0x20000b5c
 8008034:	20000b62 	.word	0x20000b62
 8008038:	0000ffff 	.word	0x0000ffff
 800803c:	200007fc 	.word	0x200007fc

08008040 <tbox_finish>:

void tbox_finish(void)
{
 8008040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008042:	b0ab      	sub	sp, #172	@ 0xac
 8008044:	af00      	add	r7, sp, #0
	uint16_t crc2_value;
	unsigned char crc2[2];
//	unsigned char t_finish[36];

	//sn
	serial = serial + 1;
 8008046:	4b5b      	ldr	r3, [pc, #364]	@ (80081b4 <tbox_finish+0x174>)
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	4b59      	ldr	r3, [pc, #356]	@ (80081b4 <tbox_finish+0x174>)
 8008050:	801a      	strh	r2, [r3, #0]
	long_to_byte(serial, sn);
 8008052:	4b58      	ldr	r3, [pc, #352]	@ (80081b4 <tbox_finish+0x174>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	24a4      	movs	r4, #164	@ 0xa4
 8008058:	193a      	adds	r2, r7, r4
 800805a:	0011      	movs	r1, r2
 800805c:	0018      	movs	r0, r3
 800805e:	f7ff fecf 	bl	8007e00 <long_to_byte>
	memcpy(hd2, sn, sizeof(unsigned char)*2);
 8008062:	4b55      	ldr	r3, [pc, #340]	@ (80081b8 <tbox_finish+0x178>)
 8008064:	193a      	adds	r2, r7, r4
 8008066:	8812      	ldrh	r2, [r2, #0]
 8008068:	801a      	strh	r2, [r3, #0]

	//data
	RTC_date = PCF2129_getDate();
 800806a:	4c54      	ldr	r4, [pc, #336]	@ (80081bc <tbox_finish+0x17c>)
 800806c:	003b      	movs	r3, r7
 800806e:	0018      	movs	r0, r3
 8008070:	f004 fb22 	bl	800c6b8 <PCF2129_getDate>
 8008074:	003b      	movs	r3, r7
 8008076:	0020      	movs	r0, r4
 8008078:	0019      	movs	r1, r3
 800807a:	2358      	movs	r3, #88	@ 0x58
 800807c:	001a      	movs	r2, r3
 800807e:	f010 fad5 	bl	801862c <memcpy>
	year = RTC_date.date.y;
 8008082:	4b4e      	ldr	r3, [pc, #312]	@ (80081bc <tbox_finish+0x17c>)
 8008084:	224d      	movs	r2, #77	@ 0x4d
 8008086:	5c9b      	ldrb	r3, [r3, r2]
 8008088:	001a      	movs	r2, r3
 800808a:	4b4d      	ldr	r3, [pc, #308]	@ (80081c0 <tbox_finish+0x180>)
 800808c:	801a      	strh	r2, [r3, #0]
	data2[8] = (uint8_t)(year & 0xFF);
 800808e:	4b4c      	ldr	r3, [pc, #304]	@ (80081c0 <tbox_finish+0x180>)
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b2da      	uxtb	r2, r3
 8008094:	4b4b      	ldr	r3, [pc, #300]	@ (80081c4 <tbox_finish+0x184>)
 8008096:	721a      	strb	r2, [r3, #8]
	month = RTC_date.date.m;
 8008098:	4b48      	ldr	r3, [pc, #288]	@ (80081bc <tbox_finish+0x17c>)
 800809a:	224e      	movs	r2, #78	@ 0x4e
 800809c:	5c9b      	ldrb	r3, [r3, r2]
 800809e:	001a      	movs	r2, r3
 80080a0:	4b49      	ldr	r3, [pc, #292]	@ (80081c8 <tbox_finish+0x188>)
 80080a2:	801a      	strh	r2, [r3, #0]
	data2[9] = (uint8_t)(month & 0xFF);
 80080a4:	4b48      	ldr	r3, [pc, #288]	@ (80081c8 <tbox_finish+0x188>)
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	4b46      	ldr	r3, [pc, #280]	@ (80081c4 <tbox_finish+0x184>)
 80080ac:	725a      	strb	r2, [r3, #9]
	day = RTC_date.date.d;
 80080ae:	4b43      	ldr	r3, [pc, #268]	@ (80081bc <tbox_finish+0x17c>)
 80080b0:	224f      	movs	r2, #79	@ 0x4f
 80080b2:	5c9b      	ldrb	r3, [r3, r2]
 80080b4:	001a      	movs	r2, r3
 80080b6:	4b45      	ldr	r3, [pc, #276]	@ (80081cc <tbox_finish+0x18c>)
 80080b8:	801a      	strh	r2, [r3, #0]
	data2[10] = (uint8_t)(day & 0xFF);
 80080ba:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <tbox_finish+0x18c>)
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	4b40      	ldr	r3, [pc, #256]	@ (80081c4 <tbox_finish+0x184>)
 80080c2:	729a      	strb	r2, [r3, #10]
	hour = RTC_date.date.hh;
 80080c4:	4b3d      	ldr	r3, [pc, #244]	@ (80081bc <tbox_finish+0x17c>)
 80080c6:	2251      	movs	r2, #81	@ 0x51
 80080c8:	5c9b      	ldrb	r3, [r3, r2]
 80080ca:	001a      	movs	r2, r3
 80080cc:	4b40      	ldr	r3, [pc, #256]	@ (80081d0 <tbox_finish+0x190>)
 80080ce:	801a      	strh	r2, [r3, #0]
	data2[11] = (uint8_t)(hour & 0xFF);
 80080d0:	4b3f      	ldr	r3, [pc, #252]	@ (80081d0 <tbox_finish+0x190>)
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	4b3b      	ldr	r3, [pc, #236]	@ (80081c4 <tbox_finish+0x184>)
 80080d8:	72da      	strb	r2, [r3, #11]
	minute = RTC_date.date.mm;
 80080da:	4b38      	ldr	r3, [pc, #224]	@ (80081bc <tbox_finish+0x17c>)
 80080dc:	2252      	movs	r2, #82	@ 0x52
 80080de:	5c9b      	ldrb	r3, [r3, r2]
 80080e0:	001a      	movs	r2, r3
 80080e2:	4b3c      	ldr	r3, [pc, #240]	@ (80081d4 <tbox_finish+0x194>)
 80080e4:	801a      	strh	r2, [r3, #0]
	data2[12] = (uint8_t)(minute & 0xFF);
 80080e6:	4b3b      	ldr	r3, [pc, #236]	@ (80081d4 <tbox_finish+0x194>)
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	4b35      	ldr	r3, [pc, #212]	@ (80081c4 <tbox_finish+0x184>)
 80080ee:	731a      	strb	r2, [r3, #12]
	second = RTC_date.date.ss;
 80080f0:	4b32      	ldr	r3, [pc, #200]	@ (80081bc <tbox_finish+0x17c>)
 80080f2:	2253      	movs	r2, #83	@ 0x53
 80080f4:	5c9b      	ldrb	r3, [r3, r2]
 80080f6:	001a      	movs	r2, r3
 80080f8:	4b37      	ldr	r3, [pc, #220]	@ (80081d8 <tbox_finish+0x198>)
 80080fa:	801a      	strh	r2, [r3, #0]
	data2[13] = (uint8_t)(second & 0xFF);
 80080fc:	4b36      	ldr	r3, [pc, #216]	@ (80081d8 <tbox_finish+0x198>)
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	4b30      	ldr	r3, [pc, #192]	@ (80081c4 <tbox_finish+0x184>)
 8008104:	735a      	strb	r2, [r3, #13]

	//for crc calculate, cal_f = (header + data)
	memcpy(cal_f, hd2, sizeof(unsigned char)*6);
 8008106:	2584      	movs	r5, #132	@ 0x84
 8008108:	197b      	adds	r3, r7, r5
 800810a:	4a2b      	ldr	r2, [pc, #172]	@ (80081b8 <tbox_finish+0x178>)
 800810c:	6811      	ldr	r1, [r2, #0]
 800810e:	6019      	str	r1, [r3, #0]
 8008110:	8892      	ldrh	r2, [r2, #4]
 8008112:	809a      	strh	r2, [r3, #4]
	memcpy(cal_f+6, data2, sizeof(unsigned char)*26);
 8008114:	197b      	adds	r3, r7, r5
 8008116:	3306      	adds	r3, #6
 8008118:	4a2a      	ldr	r2, [pc, #168]	@ (80081c4 <tbox_finish+0x184>)
 800811a:	0018      	movs	r0, r3
 800811c:	0011      	movs	r1, r2
 800811e:	231a      	movs	r3, #26
 8008120:	001a      	movs	r2, r3
 8008122:	f010 fa83 	bl	801862c <memcpy>
	crc2_value = CRC16(cal_f, 32);
 8008126:	26a6      	movs	r6, #166	@ 0xa6
 8008128:	19bc      	adds	r4, r7, r6
 800812a:	197b      	adds	r3, r7, r5
 800812c:	2120      	movs	r1, #32
 800812e:	0018      	movs	r0, r3
 8008130:	f7ff fdee 	bl	8007d10 <CRC16>
 8008134:	0003      	movs	r3, r0
 8008136:	8023      	strh	r3, [r4, #0]
	long_to_byte_crc(crc2_value, crc2);
 8008138:	2480      	movs	r4, #128	@ 0x80
 800813a:	193a      	adds	r2, r7, r4
 800813c:	19bb      	adds	r3, r7, r6
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f7ff fe8a 	bl	8007e5c <long_to_byte_crc>

	//update msg
	memcpy(t_finish, zone, sizeof(unsigned char)*2);
 8008148:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <tbox_finish+0x19c>)
 800814a:	881a      	ldrh	r2, [r3, #0]
 800814c:	4b24      	ldr	r3, [pc, #144]	@ (80081e0 <tbox_finish+0x1a0>)
 800814e:	801a      	strh	r2, [r3, #0]
	memcpy(t_finish+2, crc2, sizeof(unsigned char)*2);
 8008150:	4a24      	ldr	r2, [pc, #144]	@ (80081e4 <tbox_finish+0x1a4>)
 8008152:	193b      	adds	r3, r7, r4
 8008154:	0010      	movs	r0, r2
 8008156:	0019      	movs	r1, r3
 8008158:	2302      	movs	r3, #2
 800815a:	001a      	movs	r2, r3
 800815c:	f010 fa66 	bl	801862c <memcpy>
	memcpy(t_finish+4, hd2, sizeof(unsigned char)*6);
 8008160:	4a21      	ldr	r2, [pc, #132]	@ (80081e8 <tbox_finish+0x1a8>)
 8008162:	4b15      	ldr	r3, [pc, #84]	@ (80081b8 <tbox_finish+0x178>)
 8008164:	0010      	movs	r0, r2
 8008166:	0019      	movs	r1, r3
 8008168:	2306      	movs	r3, #6
 800816a:	001a      	movs	r2, r3
 800816c:	f010 fa5e 	bl	801862c <memcpy>
	memcpy(t_finish+10, data2, sizeof(unsigned char)*26);
 8008170:	4a1e      	ldr	r2, [pc, #120]	@ (80081ec <tbox_finish+0x1ac>)
 8008172:	4b14      	ldr	r3, [pc, #80]	@ (80081c4 <tbox_finish+0x184>)
 8008174:	0010      	movs	r0, r2
 8008176:	0019      	movs	r1, r3
 8008178:	231a      	movs	r3, #26
 800817a:	001a      	movs	r2, r3
 800817c:	f010 fa56 	bl	801862c <memcpy>

	//transmit
	unsigned char buffer[sizeof(t_finish)];
	memset(buffer, 0, sizeof(t_finish));
 8008180:	255c      	movs	r5, #92	@ 0x5c
 8008182:	197b      	adds	r3, r7, r5
 8008184:	2224      	movs	r2, #36	@ 0x24
 8008186:	2100      	movs	r1, #0
 8008188:	0018      	movs	r0, r3
 800818a:	f010 fa1b 	bl	80185c4 <memset>
	memcpy(buffer, &t_finish, sizeof(t_finish));
 800818e:	197b      	adds	r3, r7, r5
 8008190:	4a13      	ldr	r2, [pc, #76]	@ (80081e0 <tbox_finish+0x1a0>)
 8008192:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008194:	c313      	stmia	r3!, {r0, r1, r4}
 8008196:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008198:	c313      	stmia	r3!, {r0, r1, r4}
 800819a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800819c:	c313      	stmia	r3!, {r0, r1, r4}
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, sizeof(buffer),0xffff);
 800819e:	4b14      	ldr	r3, [pc, #80]	@ (80081f0 <tbox_finish+0x1b0>)
 80081a0:	1979      	adds	r1, r7, r5
 80081a2:	4814      	ldr	r0, [pc, #80]	@ (80081f4 <tbox_finish+0x1b4>)
 80081a4:	2224      	movs	r2, #36	@ 0x24
 80081a6:	f00a febd 	bl	8012f24 <HAL_UART_Transmit>

	//clear
//	memset(t_finish, 0, 36);
}
 80081aa:	46c0      	nop			@ (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b02b      	add	sp, #172	@ 0xac
 80081b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	20000b18 	.word	0x20000b18
 80081b8:	20000238 	.word	0x20000238
 80081bc:	20000c14 	.word	0x20000c14
 80081c0:	20000c6c 	.word	0x20000c6c
 80081c4:	20000b3c 	.word	0x20000b3c
 80081c8:	20000c6e 	.word	0x20000c6e
 80081cc:	20000c70 	.word	0x20000c70
 80081d0:	20000c72 	.word	0x20000c72
 80081d4:	20000c74 	.word	0x20000c74
 80081d8:	20000c76 	.word	0x20000c76
 80081dc:	2000022c 	.word	0x2000022c
 80081e0:	20000b68 	.word	0x20000b68
 80081e4:	20000b6a 	.word	0x20000b6a
 80081e8:	20000b6c 	.word	0x20000b6c
 80081ec:	20000b72 	.word	0x20000b72
 80081f0:	0000ffff 	.word	0x0000ffff
 80081f4:	200007fc 	.word	0x200007fc

080081f8 <printer_process>:

void printer_process(void)
{
 80081f8:	b5b0      	push	{r4, r5, r7, lr}
 80081fa:	af00      	add	r7, sp, #0
	//row_init: space + enter
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 80081fc:	4baf      	ldr	r3, [pc, #700]	@ (80084bc <printer_process+0x2c4>)
 80081fe:	49b0      	ldr	r1, [pc, #704]	@ (80084c0 <printer_process+0x2c8>)
 8008200:	48b0      	ldr	r0, [pc, #704]	@ (80084c4 <printer_process+0x2cc>)
 8008202:	2206      	movs	r2, #6
 8008204:	f00a fe8e 	bl	8012f24 <HAL_UART_Transmit>
	//row1: taxi no.
	memcpy(receipt1.sp, cmd, 6);
 8008208:	4baf      	ldr	r3, [pc, #700]	@ (80084c8 <printer_process+0x2d0>)
 800820a:	4ab0      	ldr	r2, [pc, #704]	@ (80084cc <printer_process+0x2d4>)
 800820c:	6811      	ldr	r1, [r2, #0]
 800820e:	6019      	str	r1, [r3, #0]
 8008210:	8892      	ldrh	r2, [r2, #4]
 8008212:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg01, 9);
 8008214:	4bac      	ldr	r3, [pc, #688]	@ (80084c8 <printer_process+0x2d0>)
 8008216:	2206      	movs	r2, #6
 8008218:	49ad      	ldr	r1, [pc, #692]	@ (80084d0 <printer_process+0x2d8>)
 800821a:	189b      	adds	r3, r3, r2
 800821c:	2209      	movs	r2, #9
 800821e:	0018      	movs	r0, r3
 8008220:	f010 fa04 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg02, 9);
 8008224:	4ba8      	ldr	r3, [pc, #672]	@ (80084c8 <printer_process+0x2d0>)
 8008226:	220f      	movs	r2, #15
 8008228:	49aa      	ldr	r1, [pc, #680]	@ (80084d4 <printer_process+0x2dc>)
 800822a:	189b      	adds	r3, r3, r2
 800822c:	2209      	movs	r2, #9
 800822e:	0018      	movs	r0, r3
 8008230:	f010 f9fc 	bl	801862c <memcpy>
	memcpy(receipt1.va, plate, 14);
 8008234:	4ba4      	ldr	r3, [pc, #656]	@ (80084c8 <printer_process+0x2d0>)
 8008236:	4aa8      	ldr	r2, [pc, #672]	@ (80084d8 <printer_process+0x2e0>)
 8008238:	3318      	adds	r3, #24
 800823a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800823c:	c313      	stmia	r3!, {r0, r1, r4}
 800823e:	8812      	ldrh	r2, [r2, #0]
 8008240:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008242:	4ba6      	ldr	r3, [pc, #664]	@ (80084dc <printer_process+0x2e4>)
 8008244:	881a      	ldrh	r2, [r3, #0]
 8008246:	4ba0      	ldr	r3, [pc, #640]	@ (80084c8 <printer_process+0x2d0>)
 8008248:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 800824a:	4a9e      	ldr	r2, [pc, #632]	@ (80084c4 <printer_process+0x2cc>)
 800824c:	4b9e      	ldr	r3, [pc, #632]	@ (80084c8 <printer_process+0x2d0>)
 800824e:	0011      	movs	r1, r2
 8008250:	0018      	movs	r0, r3
 8008252:	f000 fd7d 	bl	8008d50 <printer_transmit>
	//row2: start
	memcpy(receipt1.sp, cmd, 6);
 8008256:	4b9c      	ldr	r3, [pc, #624]	@ (80084c8 <printer_process+0x2d0>)
 8008258:	4a9c      	ldr	r2, [pc, #624]	@ (80084cc <printer_process+0x2d4>)
 800825a:	6811      	ldr	r1, [r2, #0]
 800825c:	6019      	str	r1, [r3, #0]
 800825e:	8892      	ldrh	r2, [r2, #4]
 8008260:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg03, 9);
 8008262:	4b99      	ldr	r3, [pc, #612]	@ (80084c8 <printer_process+0x2d0>)
 8008264:	2206      	movs	r2, #6
 8008266:	499e      	ldr	r1, [pc, #632]	@ (80084e0 <printer_process+0x2e8>)
 8008268:	189b      	adds	r3, r3, r2
 800826a:	2209      	movs	r2, #9
 800826c:	0018      	movs	r0, r3
 800826e:	f010 f9dd 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg04, 9);
 8008272:	4b95      	ldr	r3, [pc, #596]	@ (80084c8 <printer_process+0x2d0>)
 8008274:	220f      	movs	r2, #15
 8008276:	499b      	ldr	r1, [pc, #620]	@ (80084e4 <printer_process+0x2ec>)
 8008278:	189b      	adds	r3, r3, r2
 800827a:	2209      	movs	r2, #9
 800827c:	0018      	movs	r0, r3
 800827e:	f010 f9d5 	bl	801862c <memcpy>
	memcpy(receipt1.va, start, 14);
 8008282:	4b91      	ldr	r3, [pc, #580]	@ (80084c8 <printer_process+0x2d0>)
 8008284:	4a98      	ldr	r2, [pc, #608]	@ (80084e8 <printer_process+0x2f0>)
 8008286:	3318      	adds	r3, #24
 8008288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800828a:	c313      	stmia	r3!, {r0, r1, r4}
 800828c:	8812      	ldrh	r2, [r2, #0]
 800828e:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008290:	4b92      	ldr	r3, [pc, #584]	@ (80084dc <printer_process+0x2e4>)
 8008292:	881a      	ldrh	r2, [r3, #0]
 8008294:	4b8c      	ldr	r3, [pc, #560]	@ (80084c8 <printer_process+0x2d0>)
 8008296:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008298:	4a8a      	ldr	r2, [pc, #552]	@ (80084c4 <printer_process+0x2cc>)
 800829a:	4b8b      	ldr	r3, [pc, #556]	@ (80084c8 <printer_process+0x2d0>)
 800829c:	0011      	movs	r1, r2
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fd56 	bl	8008d50 <printer_transmit>
	//row3: end
	memcpy(receipt1.sp, cmd, 6);
 80082a4:	4b88      	ldr	r3, [pc, #544]	@ (80084c8 <printer_process+0x2d0>)
 80082a6:	4a89      	ldr	r2, [pc, #548]	@ (80084cc <printer_process+0x2d4>)
 80082a8:	6811      	ldr	r1, [r2, #0]
 80082aa:	6019      	str	r1, [r3, #0]
 80082ac:	8892      	ldrh	r2, [r2, #4]
 80082ae:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg05, 9);
 80082b0:	4b85      	ldr	r3, [pc, #532]	@ (80084c8 <printer_process+0x2d0>)
 80082b2:	2206      	movs	r2, #6
 80082b4:	498d      	ldr	r1, [pc, #564]	@ (80084ec <printer_process+0x2f4>)
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	2209      	movs	r2, #9
 80082ba:	0018      	movs	r0, r3
 80082bc:	f010 f9b6 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg06, 9);
 80082c0:	4b81      	ldr	r3, [pc, #516]	@ (80084c8 <printer_process+0x2d0>)
 80082c2:	220f      	movs	r2, #15
 80082c4:	498a      	ldr	r1, [pc, #552]	@ (80084f0 <printer_process+0x2f8>)
 80082c6:	189b      	adds	r3, r3, r2
 80082c8:	2209      	movs	r2, #9
 80082ca:	0018      	movs	r0, r3
 80082cc:	f010 f9ae 	bl	801862c <memcpy>
	memcpy(receipt1.va, end, 14);
 80082d0:	4b7d      	ldr	r3, [pc, #500]	@ (80084c8 <printer_process+0x2d0>)
 80082d2:	4a88      	ldr	r2, [pc, #544]	@ (80084f4 <printer_process+0x2fc>)
 80082d4:	3318      	adds	r3, #24
 80082d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80082d8:	c313      	stmia	r3!, {r0, r1, r4}
 80082da:	8812      	ldrh	r2, [r2, #0]
 80082dc:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 80082de:	4b7f      	ldr	r3, [pc, #508]	@ (80084dc <printer_process+0x2e4>)
 80082e0:	881a      	ldrh	r2, [r3, #0]
 80082e2:	4b79      	ldr	r3, [pc, #484]	@ (80084c8 <printer_process+0x2d0>)
 80082e4:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 80082e6:	4a77      	ldr	r2, [pc, #476]	@ (80084c4 <printer_process+0x2cc>)
 80082e8:	4b77      	ldr	r3, [pc, #476]	@ (80084c8 <printer_process+0x2d0>)
 80082ea:	0011      	movs	r1, r2
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 fd2f 	bl	8008d50 <printer_transmit>
	//row4: total_km
	memcpy(receipt1.sp, cmd, 6);
 80082f2:	4b75      	ldr	r3, [pc, #468]	@ (80084c8 <printer_process+0x2d0>)
 80082f4:	4a75      	ldr	r2, [pc, #468]	@ (80084cc <printer_process+0x2d4>)
 80082f6:	6811      	ldr	r1, [r2, #0]
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	8892      	ldrh	r2, [r2, #4]
 80082fc:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg07, 9);
 80082fe:	4b72      	ldr	r3, [pc, #456]	@ (80084c8 <printer_process+0x2d0>)
 8008300:	2206      	movs	r2, #6
 8008302:	497d      	ldr	r1, [pc, #500]	@ (80084f8 <printer_process+0x300>)
 8008304:	189b      	adds	r3, r3, r2
 8008306:	2209      	movs	r2, #9
 8008308:	0018      	movs	r0, r3
 800830a:	f010 f98f 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg08, 9);
 800830e:	4b6e      	ldr	r3, [pc, #440]	@ (80084c8 <printer_process+0x2d0>)
 8008310:	220f      	movs	r2, #15
 8008312:	497a      	ldr	r1, [pc, #488]	@ (80084fc <printer_process+0x304>)
 8008314:	189b      	adds	r3, r3, r2
 8008316:	2209      	movs	r2, #9
 8008318:	0018      	movs	r0, r3
 800831a:	f010 f987 	bl	801862c <memcpy>
	memcpy(receipt1.va, total_km, 14);
 800831e:	4b6a      	ldr	r3, [pc, #424]	@ (80084c8 <printer_process+0x2d0>)
 8008320:	4a77      	ldr	r2, [pc, #476]	@ (8008500 <printer_process+0x308>)
 8008322:	3318      	adds	r3, #24
 8008324:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008326:	c313      	stmia	r3!, {r0, r1, r4}
 8008328:	8812      	ldrh	r2, [r2, #0]
 800832a:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 800832c:	4b6b      	ldr	r3, [pc, #428]	@ (80084dc <printer_process+0x2e4>)
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	4b65      	ldr	r3, [pc, #404]	@ (80084c8 <printer_process+0x2d0>)
 8008332:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008334:	4a63      	ldr	r2, [pc, #396]	@ (80084c4 <printer_process+0x2cc>)
 8008336:	4b64      	ldr	r3, [pc, #400]	@ (80084c8 <printer_process+0x2d0>)
 8008338:	0011      	movs	r1, r2
 800833a:	0018      	movs	r0, r3
 800833c:	f000 fd08 	bl	8008d50 <printer_transmit>
	//row5: paid_km
	memcpy(receipt1.sp, cmd, 6);
 8008340:	4b61      	ldr	r3, [pc, #388]	@ (80084c8 <printer_process+0x2d0>)
 8008342:	4a62      	ldr	r2, [pc, #392]	@ (80084cc <printer_process+0x2d4>)
 8008344:	6811      	ldr	r1, [r2, #0]
 8008346:	6019      	str	r1, [r3, #0]
 8008348:	8892      	ldrh	r2, [r2, #4]
 800834a:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg09, 9);
 800834c:	4b5e      	ldr	r3, [pc, #376]	@ (80084c8 <printer_process+0x2d0>)
 800834e:	2206      	movs	r2, #6
 8008350:	496c      	ldr	r1, [pc, #432]	@ (8008504 <printer_process+0x30c>)
 8008352:	189b      	adds	r3, r3, r2
 8008354:	2209      	movs	r2, #9
 8008356:	0018      	movs	r0, r3
 8008358:	f010 f968 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg10, 9);
 800835c:	4b5a      	ldr	r3, [pc, #360]	@ (80084c8 <printer_process+0x2d0>)
 800835e:	220f      	movs	r2, #15
 8008360:	4969      	ldr	r1, [pc, #420]	@ (8008508 <printer_process+0x310>)
 8008362:	189b      	adds	r3, r3, r2
 8008364:	2209      	movs	r2, #9
 8008366:	0018      	movs	r0, r3
 8008368:	f010 f960 	bl	801862c <memcpy>
	memcpy(receipt1.va, paid_km, 14);
 800836c:	4b56      	ldr	r3, [pc, #344]	@ (80084c8 <printer_process+0x2d0>)
 800836e:	4a67      	ldr	r2, [pc, #412]	@ (800850c <printer_process+0x314>)
 8008370:	3318      	adds	r3, #24
 8008372:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008374:	c313      	stmia	r3!, {r0, r1, r4}
 8008376:	8812      	ldrh	r2, [r2, #0]
 8008378:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 800837a:	4b58      	ldr	r3, [pc, #352]	@ (80084dc <printer_process+0x2e4>)
 800837c:	881a      	ldrh	r2, [r3, #0]
 800837e:	4b52      	ldr	r3, [pc, #328]	@ (80084c8 <printer_process+0x2d0>)
 8008380:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008382:	4a50      	ldr	r2, [pc, #320]	@ (80084c4 <printer_process+0x2cc>)
 8008384:	4b50      	ldr	r3, [pc, #320]	@ (80084c8 <printer_process+0x2d0>)
 8008386:	0011      	movs	r1, r2
 8008388:	0018      	movs	r0, r3
 800838a:	f000 fce1 	bl	8008d50 <printer_transmit>
	//row6: paid_min
	memcpy(receipt1.sp, cmd, 6);
 800838e:	4b4e      	ldr	r3, [pc, #312]	@ (80084c8 <printer_process+0x2d0>)
 8008390:	4a4e      	ldr	r2, [pc, #312]	@ (80084cc <printer_process+0x2d4>)
 8008392:	6811      	ldr	r1, [r2, #0]
 8008394:	6019      	str	r1, [r3, #0]
 8008396:	8892      	ldrh	r2, [r2, #4]
 8008398:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg11, 9);
 800839a:	4b4b      	ldr	r3, [pc, #300]	@ (80084c8 <printer_process+0x2d0>)
 800839c:	2206      	movs	r2, #6
 800839e:	495c      	ldr	r1, [pc, #368]	@ (8008510 <printer_process+0x318>)
 80083a0:	189b      	adds	r3, r3, r2
 80083a2:	2209      	movs	r2, #9
 80083a4:	0018      	movs	r0, r3
 80083a6:	f010 f941 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg12, 9);
 80083aa:	4b47      	ldr	r3, [pc, #284]	@ (80084c8 <printer_process+0x2d0>)
 80083ac:	220f      	movs	r2, #15
 80083ae:	4959      	ldr	r1, [pc, #356]	@ (8008514 <printer_process+0x31c>)
 80083b0:	189b      	adds	r3, r3, r2
 80083b2:	2209      	movs	r2, #9
 80083b4:	0018      	movs	r0, r3
 80083b6:	f010 f939 	bl	801862c <memcpy>
	memcpy(receipt1.va, paid_min, 14);
 80083ba:	4b43      	ldr	r3, [pc, #268]	@ (80084c8 <printer_process+0x2d0>)
 80083bc:	4a56      	ldr	r2, [pc, #344]	@ (8008518 <printer_process+0x320>)
 80083be:	3318      	adds	r3, #24
 80083c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80083c2:	c313      	stmia	r3!, {r0, r1, r4}
 80083c4:	8812      	ldrh	r2, [r2, #0]
 80083c6:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 80083c8:	4b44      	ldr	r3, [pc, #272]	@ (80084dc <printer_process+0x2e4>)
 80083ca:	881a      	ldrh	r2, [r3, #0]
 80083cc:	4b3e      	ldr	r3, [pc, #248]	@ (80084c8 <printer_process+0x2d0>)
 80083ce:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 80083d0:	4a3c      	ldr	r2, [pc, #240]	@ (80084c4 <printer_process+0x2cc>)
 80083d2:	4b3d      	ldr	r3, [pc, #244]	@ (80084c8 <printer_process+0x2d0>)
 80083d4:	0011      	movs	r1, r2
 80083d6:	0018      	movs	r0, r3
 80083d8:	f000 fcba 	bl	8008d50 <printer_transmit>
	//row7: surcharge
	memcpy(receipt1.sp, cmd, 6);
 80083dc:	4b3a      	ldr	r3, [pc, #232]	@ (80084c8 <printer_process+0x2d0>)
 80083de:	4a3b      	ldr	r2, [pc, #236]	@ (80084cc <printer_process+0x2d4>)
 80083e0:	6811      	ldr	r1, [r2, #0]
 80083e2:	6019      	str	r1, [r3, #0]
 80083e4:	8892      	ldrh	r2, [r2, #4]
 80083e6:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg13, 9);
 80083e8:	4b37      	ldr	r3, [pc, #220]	@ (80084c8 <printer_process+0x2d0>)
 80083ea:	2206      	movs	r2, #6
 80083ec:	494b      	ldr	r1, [pc, #300]	@ (800851c <printer_process+0x324>)
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	2209      	movs	r2, #9
 80083f2:	0018      	movs	r0, r3
 80083f4:	f010 f91a 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg14, 9);
 80083f8:	4b33      	ldr	r3, [pc, #204]	@ (80084c8 <printer_process+0x2d0>)
 80083fa:	220f      	movs	r2, #15
 80083fc:	4948      	ldr	r1, [pc, #288]	@ (8008520 <printer_process+0x328>)
 80083fe:	189b      	adds	r3, r3, r2
 8008400:	2209      	movs	r2, #9
 8008402:	0018      	movs	r0, r3
 8008404:	f010 f912 	bl	801862c <memcpy>
	memcpy(receipt1.va, sub, 14);
 8008408:	4b2f      	ldr	r3, [pc, #188]	@ (80084c8 <printer_process+0x2d0>)
 800840a:	4a46      	ldr	r2, [pc, #280]	@ (8008524 <printer_process+0x32c>)
 800840c:	3318      	adds	r3, #24
 800840e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008410:	c313      	stmia	r3!, {r0, r1, r4}
 8008412:	8812      	ldrh	r2, [r2, #0]
 8008414:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008416:	4b31      	ldr	r3, [pc, #196]	@ (80084dc <printer_process+0x2e4>)
 8008418:	881a      	ldrh	r2, [r3, #0]
 800841a:	4b2b      	ldr	r3, [pc, #172]	@ (80084c8 <printer_process+0x2d0>)
 800841c:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 800841e:	4a29      	ldr	r2, [pc, #164]	@ (80084c4 <printer_process+0x2cc>)
 8008420:	4b29      	ldr	r3, [pc, #164]	@ (80084c8 <printer_process+0x2d0>)
 8008422:	0011      	movs	r1, r2
 8008424:	0018      	movs	r0, r3
 8008426:	f000 fc93 	bl	8008d50 <printer_transmit>
	//row8: total_fare
	memcpy(receipt2.sp, cmd, 6);
 800842a:	4b3f      	ldr	r3, [pc, #252]	@ (8008528 <printer_process+0x330>)
 800842c:	4a27      	ldr	r2, [pc, #156]	@ (80084cc <printer_process+0x2d4>)
 800842e:	6811      	ldr	r1, [r2, #0]
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	8892      	ldrh	r2, [r2, #4]
 8008434:	809a      	strh	r2, [r3, #4]
	memcpy(receipt2.ch, msg15, 9);
 8008436:	4b3c      	ldr	r3, [pc, #240]	@ (8008528 <printer_process+0x330>)
 8008438:	2206      	movs	r2, #6
 800843a:	493c      	ldr	r1, [pc, #240]	@ (800852c <printer_process+0x334>)
 800843c:	189b      	adds	r3, r3, r2
 800843e:	2209      	movs	r2, #9
 8008440:	0018      	movs	r0, r3
 8008442:	f010 f8f3 	bl	801862c <memcpy>
	memcpy(receipt2.en, msg16, 10);
 8008446:	4b38      	ldr	r3, [pc, #224]	@ (8008528 <printer_process+0x330>)
 8008448:	220f      	movs	r2, #15
 800844a:	4939      	ldr	r1, [pc, #228]	@ (8008530 <printer_process+0x338>)
 800844c:	189b      	adds	r3, r3, r2
 800844e:	220a      	movs	r2, #10
 8008450:	0018      	movs	r0, r3
 8008452:	f010 f8eb 	bl	801862c <memcpy>
	memcpy(receipt2.va, t_fare, 13);
 8008456:	4b34      	ldr	r3, [pc, #208]	@ (8008528 <printer_process+0x330>)
 8008458:	2219      	movs	r2, #25
 800845a:	4936      	ldr	r1, [pc, #216]	@ (8008534 <printer_process+0x33c>)
 800845c:	189b      	adds	r3, r3, r2
 800845e:	220d      	movs	r2, #13
 8008460:	0018      	movs	r0, r3
 8008462:	f010 f8e3 	bl	801862c <memcpy>
	memcpy(receipt2.cmd, enter,2);
 8008466:	4b1d      	ldr	r3, [pc, #116]	@ (80084dc <printer_process+0x2e4>)
 8008468:	881a      	ldrh	r2, [r3, #0]
 800846a:	4b2f      	ldr	r3, [pc, #188]	@ (8008528 <printer_process+0x330>)
 800846c:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit2(&receipt2, &hlpuart1);
 800846e:	4a15      	ldr	r2, [pc, #84]	@ (80084c4 <printer_process+0x2cc>)
 8008470:	4b2d      	ldr	r3, [pc, #180]	@ (8008528 <printer_process+0x330>)
 8008472:	0011      	movs	r1, r2
 8008474:	0018      	movs	r0, r3
 8008476:	f000 fc8d 	bl	8008d94 <printer_transmit2>
	//row_end: thank you
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) enter, sizeof(enter), 0xffff);
 800847a:	4b10      	ldr	r3, [pc, #64]	@ (80084bc <printer_process+0x2c4>)
 800847c:	4917      	ldr	r1, [pc, #92]	@ (80084dc <printer_process+0x2e4>)
 800847e:	4811      	ldr	r0, [pc, #68]	@ (80084c4 <printer_process+0x2cc>)
 8008480:	2202      	movs	r2, #2
 8008482:	f00a fd4f 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) msg17, sizeof(msg17), 0xffff);
 8008486:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <printer_process+0x2c4>)
 8008488:	492b      	ldr	r1, [pc, #172]	@ (8008538 <printer_process+0x340>)
 800848a:	480e      	ldr	r0, [pc, #56]	@ (80084c4 <printer_process+0x2cc>)
 800848c:	2210      	movs	r2, #16
 800848e:	f00a fd49 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) msg18, sizeof(msg18), 0xffff);
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <printer_process+0x2c4>)
 8008494:	4929      	ldr	r1, [pc, #164]	@ (800853c <printer_process+0x344>)
 8008496:	480b      	ldr	r0, [pc, #44]	@ (80084c4 <printer_process+0x2cc>)
 8008498:	2210      	movs	r2, #16
 800849a:	f00a fd43 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 800849e:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <printer_process+0x2c4>)
 80084a0:	4907      	ldr	r1, [pc, #28]	@ (80084c0 <printer_process+0x2c8>)
 80084a2:	4808      	ldr	r0, [pc, #32]	@ (80084c4 <printer_process+0x2cc>)
 80084a4:	2206      	movs	r2, #6
 80084a6:	f00a fd3d 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 80084aa:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <printer_process+0x2c4>)
 80084ac:	4904      	ldr	r1, [pc, #16]	@ (80084c0 <printer_process+0x2c8>)
 80084ae:	4805      	ldr	r0, [pc, #20]	@ (80084c4 <printer_process+0x2cc>)
 80084b0:	2206      	movs	r2, #6
 80084b2:	f00a fd37 	bl	8012f24 <HAL_UART_Transmit>
}
 80084b6:	46c0      	nop			@ (mov r8, r8)
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bdb0      	pop	{r4, r5, r7, pc}
 80084bc:	0000ffff 	.word	0x0000ffff
 80084c0:	2000018c 	.word	0x2000018c
 80084c4:	200005bc 	.word	0x200005bc
 80084c8:	20000ac4 	.word	0x20000ac4
 80084cc:	20000194 	.word	0x20000194
 80084d0:	200000a8 	.word	0x200000a8
 80084d4:	20000108 	.word	0x20000108
 80084d8:	2000019c 	.word	0x2000019c
 80084dc:	20000188 	.word	0x20000188
 80084e0:	200000b4 	.word	0x200000b4
 80084e4:	20000114 	.word	0x20000114
 80084e8:	200001ac 	.word	0x200001ac
 80084ec:	200000c0 	.word	0x200000c0
 80084f0:	20000120 	.word	0x20000120
 80084f4:	200001bc 	.word	0x200001bc
 80084f8:	200000cc 	.word	0x200000cc
 80084fc:	2000012c 	.word	0x2000012c
 8008500:	200001dc 	.word	0x200001dc
 8008504:	200000d8 	.word	0x200000d8
 8008508:	20000138 	.word	0x20000138
 800850c:	200001ec 	.word	0x200001ec
 8008510:	200000e4 	.word	0x200000e4
 8008514:	20000144 	.word	0x20000144
 8008518:	200001fc 	.word	0x200001fc
 800851c:	200000f0 	.word	0x200000f0
 8008520:	20000150 	.word	0x20000150
 8008524:	2000020c 	.word	0x2000020c
 8008528:	20000aec 	.word	0x20000aec
 800852c:	200000fc 	.word	0x200000fc
 8008530:	2000015c 	.word	0x2000015c
 8008534:	2000021c 	.word	0x2000021c
 8008538:	20000168 	.word	0x20000168
 800853c:	20000178 	.word	0x20000178

08008540 <printer_e>:

void printer_e(void)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
	E_read();
 8008546:	f002 fb3f 	bl	800abc8 <E_read>
	//row_init: space + enter
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 800854a:	4bc6      	ldr	r3, [pc, #792]	@ (8008864 <printer_e+0x324>)
 800854c:	49c6      	ldr	r1, [pc, #792]	@ (8008868 <printer_e+0x328>)
 800854e:	48c7      	ldr	r0, [pc, #796]	@ (800886c <printer_e+0x32c>)
 8008550:	2206      	movs	r2, #6
 8008552:	f00a fce7 	bl	8012f24 <HAL_UART_Transmit>
	//row1: taxi no.
	memcpy(receipt1.sp, cmd, 6);
 8008556:	4bc6      	ldr	r3, [pc, #792]	@ (8008870 <printer_e+0x330>)
 8008558:	4ac6      	ldr	r2, [pc, #792]	@ (8008874 <printer_e+0x334>)
 800855a:	6811      	ldr	r1, [r2, #0]
 800855c:	6019      	str	r1, [r3, #0]
 800855e:	8892      	ldrh	r2, [r2, #4]
 8008560:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg01, 9);
 8008562:	4bc3      	ldr	r3, [pc, #780]	@ (8008870 <printer_e+0x330>)
 8008564:	2206      	movs	r2, #6
 8008566:	49c4      	ldr	r1, [pc, #784]	@ (8008878 <printer_e+0x338>)
 8008568:	189b      	adds	r3, r3, r2
 800856a:	2209      	movs	r2, #9
 800856c:	0018      	movs	r0, r3
 800856e:	f010 f85d 	bl	801862c <memcpy>
	memcpy(receipt1.en, msg02, 9);
 8008572:	4bbf      	ldr	r3, [pc, #764]	@ (8008870 <printer_e+0x330>)
 8008574:	220f      	movs	r2, #15
 8008576:	49c1      	ldr	r1, [pc, #772]	@ (800887c <printer_e+0x33c>)
 8008578:	189b      	adds	r3, r3, r2
 800857a:	2209      	movs	r2, #9
 800857c:	0018      	movs	r0, r3
 800857e:	f010 f855 	bl	801862c <memcpy>
	memcpy(receipt1.va, plate, 14);
 8008582:	4bbb      	ldr	r3, [pc, #748]	@ (8008870 <printer_e+0x330>)
 8008584:	4abe      	ldr	r2, [pc, #760]	@ (8008880 <printer_e+0x340>)
 8008586:	3318      	adds	r3, #24
 8008588:	ca13      	ldmia	r2!, {r0, r1, r4}
 800858a:	c313      	stmia	r3!, {r0, r1, r4}
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008590:	4bbc      	ldr	r3, [pc, #752]	@ (8008884 <printer_e+0x344>)
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	4bb6      	ldr	r3, [pc, #728]	@ (8008870 <printer_e+0x330>)
 8008596:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008598:	4ab4      	ldr	r2, [pc, #720]	@ (800886c <printer_e+0x32c>)
 800859a:	4bb5      	ldr	r3, [pc, #724]	@ (8008870 <printer_e+0x330>)
 800859c:	0011      	movs	r1, r2
 800859e:	0018      	movs	r0, r3
 80085a0:	f000 fbd6 	bl	8008d50 <printer_transmit>
	//row2: total km
	if (tkm[0] == 0x30)
 80085a4:	4bb8      	ldr	r3, [pc, #736]	@ (8008888 <printer_e+0x348>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b30      	cmp	r3, #48	@ 0x30
 80085aa:	d103      	bne.n	80085b4 <printer_e+0x74>
		data01[0] = 0x20;
 80085ac:	4bb7      	ldr	r3, [pc, #732]	@ (800888c <printer_e+0x34c>)
 80085ae:	2220      	movs	r2, #32
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	e003      	b.n	80085bc <printer_e+0x7c>
	else
		data01[0] = tkm[0];
 80085b4:	4bb4      	ldr	r3, [pc, #720]	@ (8008888 <printer_e+0x348>)
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	4bb4      	ldr	r3, [pc, #720]	@ (800888c <printer_e+0x34c>)
 80085ba:	701a      	strb	r2, [r3, #0]

	for (int i=1; i<=4; i++)
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e01d      	b.n	80085fe <printer_e+0xbe>
	{
		if (tkm[i] == 0x30 && tkm[i-1] == 0x30)
 80085c2:	4ab1      	ldr	r2, [pc, #708]	@ (8008888 <printer_e+0x348>)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b30      	cmp	r3, #48	@ 0x30
 80085cc:	d10b      	bne.n	80085e6 <printer_e+0xa6>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	4aad      	ldr	r2, [pc, #692]	@ (8008888 <printer_e+0x348>)
 80085d4:	5cd3      	ldrb	r3, [r2, r3]
 80085d6:	2b30      	cmp	r3, #48	@ 0x30
 80085d8:	d105      	bne.n	80085e6 <printer_e+0xa6>
			data01[i] = 0x20;
 80085da:	4aac      	ldr	r2, [pc, #688]	@ (800888c <printer_e+0x34c>)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	18d3      	adds	r3, r2, r3
 80085e0:	2220      	movs	r2, #32
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	e008      	b.n	80085f8 <printer_e+0xb8>
		else
			data01[i] = tkm[i];
 80085e6:	4aa8      	ldr	r2, [pc, #672]	@ (8008888 <printer_e+0x348>)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	18d3      	adds	r3, r2, r3
 80085ec:	7819      	ldrb	r1, [r3, #0]
 80085ee:	4aa7      	ldr	r2, [pc, #668]	@ (800888c <printer_e+0x34c>)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	18d3      	adds	r3, r2, r3
 80085f4:	1c0a      	adds	r2, r1, #0
 80085f6:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<=4; i++)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	3301      	adds	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b04      	cmp	r3, #4
 8008602:	ddde      	ble.n	80085c2 <printer_e+0x82>
	}
	data01[5] = tkm[5];
 8008604:	4ba0      	ldr	r3, [pc, #640]	@ (8008888 <printer_e+0x348>)
 8008606:	795a      	ldrb	r2, [r3, #5]
 8008608:	4ba0      	ldr	r3, [pc, #640]	@ (800888c <printer_e+0x34c>)
 800860a:	715a      	strb	r2, [r3, #5]
	data01[7] = tkm[6];
 800860c:	4b9e      	ldr	r3, [pc, #632]	@ (8008888 <printer_e+0x348>)
 800860e:	799a      	ldrb	r2, [r3, #6]
 8008610:	4b9e      	ldr	r3, [pc, #632]	@ (800888c <printer_e+0x34c>)
 8008612:	71da      	strb	r2, [r3, #7]
	data01[8] = tkm[7];
 8008614:	4b9c      	ldr	r3, [pc, #624]	@ (8008888 <printer_e+0x348>)
 8008616:	79da      	ldrb	r2, [r3, #7]
 8008618:	4b9c      	ldr	r3, [pc, #624]	@ (800888c <printer_e+0x34c>)
 800861a:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800861c:	4b91      	ldr	r3, [pc, #580]	@ (8008864 <printer_e+0x324>)
 800861e:	4995      	ldr	r1, [pc, #596]	@ (8008874 <printer_e+0x334>)
 8008620:	4892      	ldr	r0, [pc, #584]	@ (800886c <printer_e+0x32c>)
 8008622:	2206      	movs	r2, #6
 8008624:	f00a fc7e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg01, 23, 0xffff);
 8008628:	4b8e      	ldr	r3, [pc, #568]	@ (8008864 <printer_e+0x324>)
 800862a:	4999      	ldr	r1, [pc, #612]	@ (8008890 <printer_e+0x350>)
 800862c:	488f      	ldr	r0, [pc, #572]	@ (800886c <printer_e+0x32c>)
 800862e:	2217      	movs	r2, #23
 8008630:	f00a fc78 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data01, 9, 0xffff);
 8008634:	4b8b      	ldr	r3, [pc, #556]	@ (8008864 <printer_e+0x324>)
 8008636:	4995      	ldr	r1, [pc, #596]	@ (800888c <printer_e+0x34c>)
 8008638:	488c      	ldr	r0, [pc, #560]	@ (800886c <printer_e+0x32c>)
 800863a:	2209      	movs	r2, #9
 800863c:	f00a fc72 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008640:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <printer_e+0x324>)
 8008642:	4990      	ldr	r1, [pc, #576]	@ (8008884 <printer_e+0x344>)
 8008644:	4889      	ldr	r0, [pc, #548]	@ (800886c <printer_e+0x32c>)
 8008646:	2202      	movs	r2, #2
 8008648:	f00a fc6c 	bl	8012f24 <HAL_UART_Transmit>
	//row3: paid km
	if (pkm[0] == 0x30)
 800864c:	4b91      	ldr	r3, [pc, #580]	@ (8008894 <printer_e+0x354>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b30      	cmp	r3, #48	@ 0x30
 8008652:	d103      	bne.n	800865c <printer_e+0x11c>
		data02[0] = 0x20;
 8008654:	4b90      	ldr	r3, [pc, #576]	@ (8008898 <printer_e+0x358>)
 8008656:	2220      	movs	r2, #32
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	e003      	b.n	8008664 <printer_e+0x124>
	else
		data02[0] = pkm[0];
 800865c:	4b8d      	ldr	r3, [pc, #564]	@ (8008894 <printer_e+0x354>)
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	4b8d      	ldr	r3, [pc, #564]	@ (8008898 <printer_e+0x358>)
 8008662:	701a      	strb	r2, [r3, #0]

	for (int i=1; i<=4; i++)
 8008664:	2301      	movs	r3, #1
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	e01d      	b.n	80086a6 <printer_e+0x166>
	{
		if (pkm[i] == 0x30 && pkm[i-1] == 0x30)
 800866a:	4a8a      	ldr	r2, [pc, #552]	@ (8008894 <printer_e+0x354>)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	18d3      	adds	r3, r2, r3
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b30      	cmp	r3, #48	@ 0x30
 8008674:	d10b      	bne.n	800868e <printer_e+0x14e>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3b01      	subs	r3, #1
 800867a:	4a86      	ldr	r2, [pc, #536]	@ (8008894 <printer_e+0x354>)
 800867c:	5cd3      	ldrb	r3, [r2, r3]
 800867e:	2b30      	cmp	r3, #48	@ 0x30
 8008680:	d105      	bne.n	800868e <printer_e+0x14e>
			data02[i] = 0x20;
 8008682:	4a85      	ldr	r2, [pc, #532]	@ (8008898 <printer_e+0x358>)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	18d3      	adds	r3, r2, r3
 8008688:	2220      	movs	r2, #32
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e008      	b.n	80086a0 <printer_e+0x160>
		else
			data02[i] = pkm[i];
 800868e:	4a81      	ldr	r2, [pc, #516]	@ (8008894 <printer_e+0x354>)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	7819      	ldrb	r1, [r3, #0]
 8008696:	4a80      	ldr	r2, [pc, #512]	@ (8008898 <printer_e+0x358>)
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	18d3      	adds	r3, r2, r3
 800869c:	1c0a      	adds	r2, r1, #0
 800869e:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<=4; i++)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3301      	adds	r3, #1
 80086a4:	613b      	str	r3, [r7, #16]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	ddde      	ble.n	800866a <printer_e+0x12a>
	}
	data02[5] = pkm[5];
 80086ac:	4b79      	ldr	r3, [pc, #484]	@ (8008894 <printer_e+0x354>)
 80086ae:	795a      	ldrb	r2, [r3, #5]
 80086b0:	4b79      	ldr	r3, [pc, #484]	@ (8008898 <printer_e+0x358>)
 80086b2:	715a      	strb	r2, [r3, #5]
	data02[7] = pkm[6];
 80086b4:	4b77      	ldr	r3, [pc, #476]	@ (8008894 <printer_e+0x354>)
 80086b6:	799a      	ldrb	r2, [r3, #6]
 80086b8:	4b77      	ldr	r3, [pc, #476]	@ (8008898 <printer_e+0x358>)
 80086ba:	71da      	strb	r2, [r3, #7]
	data02[8] = pkm[7];
 80086bc:	4b75      	ldr	r3, [pc, #468]	@ (8008894 <printer_e+0x354>)
 80086be:	79da      	ldrb	r2, [r3, #7]
 80086c0:	4b75      	ldr	r3, [pc, #468]	@ (8008898 <printer_e+0x358>)
 80086c2:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 80086c4:	4b67      	ldr	r3, [pc, #412]	@ (8008864 <printer_e+0x324>)
 80086c6:	496b      	ldr	r1, [pc, #428]	@ (8008874 <printer_e+0x334>)
 80086c8:	4868      	ldr	r0, [pc, #416]	@ (800886c <printer_e+0x32c>)
 80086ca:	2206      	movs	r2, #6
 80086cc:	f00a fc2a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg02, 23, 0xffff);
 80086d0:	4b64      	ldr	r3, [pc, #400]	@ (8008864 <printer_e+0x324>)
 80086d2:	4972      	ldr	r1, [pc, #456]	@ (800889c <printer_e+0x35c>)
 80086d4:	4865      	ldr	r0, [pc, #404]	@ (800886c <printer_e+0x32c>)
 80086d6:	2217      	movs	r2, #23
 80086d8:	f00a fc24 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data02, 9, 0xffff);
 80086dc:	4b61      	ldr	r3, [pc, #388]	@ (8008864 <printer_e+0x324>)
 80086de:	496e      	ldr	r1, [pc, #440]	@ (8008898 <printer_e+0x358>)
 80086e0:	4862      	ldr	r0, [pc, #392]	@ (800886c <printer_e+0x32c>)
 80086e2:	2209      	movs	r2, #9
 80086e4:	f00a fc1e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 80086e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008864 <printer_e+0x324>)
 80086ea:	4966      	ldr	r1, [pc, #408]	@ (8008884 <printer_e+0x344>)
 80086ec:	485f      	ldr	r0, [pc, #380]	@ (800886c <printer_e+0x32c>)
 80086ee:	2202      	movs	r2, #2
 80086f0:	f00a fc18 	bl	8012f24 <HAL_UART_Transmit>
	//row4: total flags
	if (tflag[2] == 0x30)
 80086f4:	4b6a      	ldr	r3, [pc, #424]	@ (80088a0 <printer_e+0x360>)
 80086f6:	789b      	ldrb	r3, [r3, #2]
 80086f8:	2b30      	cmp	r3, #48	@ 0x30
 80086fa:	d103      	bne.n	8008704 <printer_e+0x1c4>
		data03[3] = 0x20;
 80086fc:	4b69      	ldr	r3, [pc, #420]	@ (80088a4 <printer_e+0x364>)
 80086fe:	2220      	movs	r2, #32
 8008700:	70da      	strb	r2, [r3, #3]
 8008702:	e003      	b.n	800870c <printer_e+0x1cc>
	else
		data03[3] = tflag[2];
 8008704:	4b66      	ldr	r3, [pc, #408]	@ (80088a0 <printer_e+0x360>)
 8008706:	789a      	ldrb	r2, [r3, #2]
 8008708:	4b66      	ldr	r3, [pc, #408]	@ (80088a4 <printer_e+0x364>)
 800870a:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 800870c:	2303      	movs	r3, #3
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e01c      	b.n	800874c <printer_e+0x20c>
	{
		if (tflag[i] == 0x30 && tflag[i-1] == 0x30)
 8008712:	4a63      	ldr	r2, [pc, #396]	@ (80088a0 <printer_e+0x360>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b30      	cmp	r3, #48	@ 0x30
 800871c:	d10b      	bne.n	8008736 <printer_e+0x1f6>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3b01      	subs	r3, #1
 8008722:	4a5f      	ldr	r2, [pc, #380]	@ (80088a0 <printer_e+0x360>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	2b30      	cmp	r3, #48	@ 0x30
 8008728:	d105      	bne.n	8008736 <printer_e+0x1f6>
			data03[i+1] = 0x20;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	4a5d      	ldr	r2, [pc, #372]	@ (80088a4 <printer_e+0x364>)
 8008730:	2120      	movs	r1, #32
 8008732:	54d1      	strb	r1, [r2, r3]
 8008734:	e007      	b.n	8008746 <printer_e+0x206>
		else
			data03[i+1] = tflag[i];
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	4959      	ldr	r1, [pc, #356]	@ (80088a0 <printer_e+0x360>)
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	188a      	adds	r2, r1, r2
 8008740:	7811      	ldrb	r1, [r2, #0]
 8008742:	4a58      	ldr	r2, [pc, #352]	@ (80088a4 <printer_e+0x364>)
 8008744:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b06      	cmp	r3, #6
 8008750:	dddf      	ble.n	8008712 <printer_e+0x1d2>
	}
	data03[8] = tflag[7];
 8008752:	4b53      	ldr	r3, [pc, #332]	@ (80088a0 <printer_e+0x360>)
 8008754:	79da      	ldrb	r2, [r3, #7]
 8008756:	4b53      	ldr	r3, [pc, #332]	@ (80088a4 <printer_e+0x364>)
 8008758:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800875a:	4b42      	ldr	r3, [pc, #264]	@ (8008864 <printer_e+0x324>)
 800875c:	4945      	ldr	r1, [pc, #276]	@ (8008874 <printer_e+0x334>)
 800875e:	4843      	ldr	r0, [pc, #268]	@ (800886c <printer_e+0x32c>)
 8008760:	2206      	movs	r2, #6
 8008762:	f00a fbdf 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg03, 23, 0xffff);
 8008766:	4b3f      	ldr	r3, [pc, #252]	@ (8008864 <printer_e+0x324>)
 8008768:	494f      	ldr	r1, [pc, #316]	@ (80088a8 <printer_e+0x368>)
 800876a:	4840      	ldr	r0, [pc, #256]	@ (800886c <printer_e+0x32c>)
 800876c:	2217      	movs	r2, #23
 800876e:	f00a fbd9 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data03, 9, 0xffff);
 8008772:	4b3c      	ldr	r3, [pc, #240]	@ (8008864 <printer_e+0x324>)
 8008774:	494b      	ldr	r1, [pc, #300]	@ (80088a4 <printer_e+0x364>)
 8008776:	483d      	ldr	r0, [pc, #244]	@ (800886c <printer_e+0x32c>)
 8008778:	2209      	movs	r2, #9
 800877a:	f00a fbd3 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 800877e:	4b39      	ldr	r3, [pc, #228]	@ (8008864 <printer_e+0x324>)
 8008780:	4940      	ldr	r1, [pc, #256]	@ (8008884 <printer_e+0x344>)
 8008782:	483a      	ldr	r0, [pc, #232]	@ (800886c <printer_e+0x32c>)
 8008784:	2202      	movs	r2, #2
 8008786:	f00a fbcd 	bl	8012f24 <HAL_UART_Transmit>
	//row5: current flags
	if (cflag[2] == 0x30)
 800878a:	4b48      	ldr	r3, [pc, #288]	@ (80088ac <printer_e+0x36c>)
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	2b30      	cmp	r3, #48	@ 0x30
 8008790:	d103      	bne.n	800879a <printer_e+0x25a>
		data04[3] = 0x20;
 8008792:	4b47      	ldr	r3, [pc, #284]	@ (80088b0 <printer_e+0x370>)
 8008794:	2220      	movs	r2, #32
 8008796:	70da      	strb	r2, [r3, #3]
 8008798:	e003      	b.n	80087a2 <printer_e+0x262>
	else
		data04[3] = cflag[2];
 800879a:	4b44      	ldr	r3, [pc, #272]	@ (80088ac <printer_e+0x36c>)
 800879c:	789a      	ldrb	r2, [r3, #2]
 800879e:	4b44      	ldr	r3, [pc, #272]	@ (80088b0 <printer_e+0x370>)
 80087a0:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 80087a2:	2303      	movs	r3, #3
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	e01c      	b.n	80087e2 <printer_e+0x2a2>
	{
		if (cflag[i] == 0x30 && cflag[i-1] == 0x30)
 80087a8:	4a40      	ldr	r2, [pc, #256]	@ (80088ac <printer_e+0x36c>)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	18d3      	adds	r3, r2, r3
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d10b      	bne.n	80087cc <printer_e+0x28c>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4a3c      	ldr	r2, [pc, #240]	@ (80088ac <printer_e+0x36c>)
 80087ba:	5cd3      	ldrb	r3, [r2, r3]
 80087bc:	2b30      	cmp	r3, #48	@ 0x30
 80087be:	d105      	bne.n	80087cc <printer_e+0x28c>
			data04[i+1] = 0x20;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a3a      	ldr	r2, [pc, #232]	@ (80088b0 <printer_e+0x370>)
 80087c6:	2120      	movs	r1, #32
 80087c8:	54d1      	strb	r1, [r2, r3]
 80087ca:	e007      	b.n	80087dc <printer_e+0x29c>
		else
			data04[i+1] = cflag[i];
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3301      	adds	r3, #1
 80087d0:	4936      	ldr	r1, [pc, #216]	@ (80088ac <printer_e+0x36c>)
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	188a      	adds	r2, r1, r2
 80087d6:	7811      	ldrb	r1, [r2, #0]
 80087d8:	4a35      	ldr	r2, [pc, #212]	@ (80088b0 <printer_e+0x370>)
 80087da:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3301      	adds	r3, #1
 80087e0:	60bb      	str	r3, [r7, #8]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b06      	cmp	r3, #6
 80087e6:	dddf      	ble.n	80087a8 <printer_e+0x268>
	}
	data04[8] = cflag[7];
 80087e8:	4b30      	ldr	r3, [pc, #192]	@ (80088ac <printer_e+0x36c>)
 80087ea:	79da      	ldrb	r2, [r3, #7]
 80087ec:	4b30      	ldr	r3, [pc, #192]	@ (80088b0 <printer_e+0x370>)
 80087ee:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 80087f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008864 <printer_e+0x324>)
 80087f2:	4920      	ldr	r1, [pc, #128]	@ (8008874 <printer_e+0x334>)
 80087f4:	481d      	ldr	r0, [pc, #116]	@ (800886c <printer_e+0x32c>)
 80087f6:	2206      	movs	r2, #6
 80087f8:	f00a fb94 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg04, 23, 0xffff);
 80087fc:	4b19      	ldr	r3, [pc, #100]	@ (8008864 <printer_e+0x324>)
 80087fe:	492d      	ldr	r1, [pc, #180]	@ (80088b4 <printer_e+0x374>)
 8008800:	481a      	ldr	r0, [pc, #104]	@ (800886c <printer_e+0x32c>)
 8008802:	2217      	movs	r2, #23
 8008804:	f00a fb8e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data04, 9, 0xffff);
 8008808:	4b16      	ldr	r3, [pc, #88]	@ (8008864 <printer_e+0x324>)
 800880a:	4929      	ldr	r1, [pc, #164]	@ (80088b0 <printer_e+0x370>)
 800880c:	4817      	ldr	r0, [pc, #92]	@ (800886c <printer_e+0x32c>)
 800880e:	2209      	movs	r2, #9
 8008810:	f00a fb88 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008814:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <printer_e+0x324>)
 8008816:	491b      	ldr	r1, [pc, #108]	@ (8008884 <printer_e+0x344>)
 8008818:	4814      	ldr	r0, [pc, #80]	@ (800886c <printer_e+0x32c>)
 800881a:	2202      	movs	r2, #2
 800881c:	f00a fb82 	bl	8012f24 <HAL_UART_Transmit>
	//row6: fare changes
	if (tpulse[2] == 0x30)
 8008820:	4b25      	ldr	r3, [pc, #148]	@ (80088b8 <printer_e+0x378>)
 8008822:	789b      	ldrb	r3, [r3, #2]
 8008824:	2b30      	cmp	r3, #48	@ 0x30
 8008826:	d103      	bne.n	8008830 <printer_e+0x2f0>
		data05[3] = 0x20;
 8008828:	4b24      	ldr	r3, [pc, #144]	@ (80088bc <printer_e+0x37c>)
 800882a:	2220      	movs	r2, #32
 800882c:	70da      	strb	r2, [r3, #3]
 800882e:	e003      	b.n	8008838 <printer_e+0x2f8>
	else
		data05[3] = tpulse[2];
 8008830:	4b21      	ldr	r3, [pc, #132]	@ (80088b8 <printer_e+0x378>)
 8008832:	789a      	ldrb	r2, [r3, #2]
 8008834:	4b21      	ldr	r3, [pc, #132]	@ (80088bc <printer_e+0x37c>)
 8008836:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 8008838:	2303      	movs	r3, #3
 800883a:	607b      	str	r3, [r7, #4]
 800883c:	e04b      	b.n	80088d6 <printer_e+0x396>
	{
		if (tpulse[i] == 0x30 && tpulse[i-1] == 0x30)
 800883e:	4a1e      	ldr	r2, [pc, #120]	@ (80088b8 <printer_e+0x378>)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	18d3      	adds	r3, r2, r3
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b30      	cmp	r3, #48	@ 0x30
 8008848:	d13a      	bne.n	80088c0 <printer_e+0x380>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3b01      	subs	r3, #1
 800884e:	4a1a      	ldr	r2, [pc, #104]	@ (80088b8 <printer_e+0x378>)
 8008850:	5cd3      	ldrb	r3, [r2, r3]
 8008852:	2b30      	cmp	r3, #48	@ 0x30
 8008854:	d134      	bne.n	80088c0 <printer_e+0x380>
			data05[i+1] = 0x20;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3301      	adds	r3, #1
 800885a:	4a18      	ldr	r2, [pc, #96]	@ (80088bc <printer_e+0x37c>)
 800885c:	2120      	movs	r1, #32
 800885e:	54d1      	strb	r1, [r2, r3]
 8008860:	e036      	b.n	80088d0 <printer_e+0x390>
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	0000ffff 	.word	0x0000ffff
 8008868:	2000018c 	.word	0x2000018c
 800886c:	200005bc 	.word	0x200005bc
 8008870:	20000ac4 	.word	0x20000ac4
 8008874:	20000194 	.word	0x20000194
 8008878:	200000a8 	.word	0x200000a8
 800887c:	20000108 	.word	0x20000108
 8008880:	2000019c 	.word	0x2000019c
 8008884:	20000188 	.word	0x20000188
 8008888:	20000e50 	.word	0x20000e50
 800888c:	20000358 	.word	0x20000358
 8008890:	20000268 	.word	0x20000268
 8008894:	20000e58 	.word	0x20000e58
 8008898:	20000364 	.word	0x20000364
 800889c:	20000280 	.word	0x20000280
 80088a0:	20000e60 	.word	0x20000e60
 80088a4:	20000370 	.word	0x20000370
 80088a8:	20000298 	.word	0x20000298
 80088ac:	20000e68 	.word	0x20000e68
 80088b0:	2000037c 	.word	0x2000037c
 80088b4:	200002b0 	.word	0x200002b0
 80088b8:	20000e70 	.word	0x20000e70
 80088bc:	20000388 	.word	0x20000388
		else
			data05[i+1] = tpulse[i];
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3301      	adds	r3, #1
 80088c4:	49c7      	ldr	r1, [pc, #796]	@ (8008be4 <printer_e+0x6a4>)
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	188a      	adds	r2, r1, r2
 80088ca:	7811      	ldrb	r1, [r2, #0]
 80088cc:	4ac6      	ldr	r2, [pc, #792]	@ (8008be8 <printer_e+0x6a8>)
 80088ce:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b06      	cmp	r3, #6
 80088da:	ddb0      	ble.n	800883e <printer_e+0x2fe>
	}
	data05[8] = tpulse[7];
 80088dc:	4bc1      	ldr	r3, [pc, #772]	@ (8008be4 <printer_e+0x6a4>)
 80088de:	79da      	ldrb	r2, [r3, #7]
 80088e0:	4bc1      	ldr	r3, [pc, #772]	@ (8008be8 <printer_e+0x6a8>)
 80088e2:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 80088e4:	4bc1      	ldr	r3, [pc, #772]	@ (8008bec <printer_e+0x6ac>)
 80088e6:	49c2      	ldr	r1, [pc, #776]	@ (8008bf0 <printer_e+0x6b0>)
 80088e8:	48c2      	ldr	r0, [pc, #776]	@ (8008bf4 <printer_e+0x6b4>)
 80088ea:	2206      	movs	r2, #6
 80088ec:	f00a fb1a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg05, 23, 0xffff);
 80088f0:	4bbe      	ldr	r3, [pc, #760]	@ (8008bec <printer_e+0x6ac>)
 80088f2:	49c1      	ldr	r1, [pc, #772]	@ (8008bf8 <printer_e+0x6b8>)
 80088f4:	48bf      	ldr	r0, [pc, #764]	@ (8008bf4 <printer_e+0x6b4>)
 80088f6:	2217      	movs	r2, #23
 80088f8:	f00a fb14 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data05, 9, 0xffff);
 80088fc:	4bbb      	ldr	r3, [pc, #748]	@ (8008bec <printer_e+0x6ac>)
 80088fe:	49ba      	ldr	r1, [pc, #744]	@ (8008be8 <printer_e+0x6a8>)
 8008900:	48bc      	ldr	r0, [pc, #752]	@ (8008bf4 <printer_e+0x6b4>)
 8008902:	2209      	movs	r2, #9
 8008904:	f00a fb0e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008908:	4bb8      	ldr	r3, [pc, #736]	@ (8008bec <printer_e+0x6ac>)
 800890a:	49bc      	ldr	r1, [pc, #752]	@ (8008bfc <printer_e+0x6bc>)
 800890c:	48b9      	ldr	r0, [pc, #740]	@ (8008bf4 <printer_e+0x6b4>)
 800890e:	2202      	movs	r2, #2
 8008910:	f00a fb08 	bl	8012f24 <HAL_UART_Transmit>
	//row7: total fare
	if (tfare[1] == 0x30)
 8008914:	4bba      	ldr	r3, [pc, #744]	@ (8008c00 <printer_e+0x6c0>)
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b30      	cmp	r3, #48	@ 0x30
 800891a:	d103      	bne.n	8008924 <printer_e+0x3e4>
		data06[0] = 0x20;
 800891c:	4bb9      	ldr	r3, [pc, #740]	@ (8008c04 <printer_e+0x6c4>)
 800891e:	2220      	movs	r2, #32
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	e003      	b.n	800892c <printer_e+0x3ec>
	else
		data06[0] = tfare[1];
 8008924:	4bb6      	ldr	r3, [pc, #728]	@ (8008c00 <printer_e+0x6c0>)
 8008926:	785a      	ldrb	r2, [r3, #1]
 8008928:	4bb6      	ldr	r3, [pc, #728]	@ (8008c04 <printer_e+0x6c4>)
 800892a:	701a      	strb	r2, [r3, #0]

	if (tfare[2] == 0x30 && tfare[1] == 0x30)
 800892c:	4bb4      	ldr	r3, [pc, #720]	@ (8008c00 <printer_e+0x6c0>)
 800892e:	789b      	ldrb	r3, [r3, #2]
 8008930:	2b30      	cmp	r3, #48	@ 0x30
 8008932:	d107      	bne.n	8008944 <printer_e+0x404>
 8008934:	4bb2      	ldr	r3, [pc, #712]	@ (8008c00 <printer_e+0x6c0>)
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b30      	cmp	r3, #48	@ 0x30
 800893a:	d103      	bne.n	8008944 <printer_e+0x404>
		data06[1] = 0x20;
 800893c:	4bb1      	ldr	r3, [pc, #708]	@ (8008c04 <printer_e+0x6c4>)
 800893e:	2220      	movs	r2, #32
 8008940:	705a      	strb	r2, [r3, #1]
 8008942:	e003      	b.n	800894c <printer_e+0x40c>
	else
		data06[1] = tfare[2];
 8008944:	4bae      	ldr	r3, [pc, #696]	@ (8008c00 <printer_e+0x6c0>)
 8008946:	789a      	ldrb	r2, [r3, #2]
 8008948:	4bae      	ldr	r3, [pc, #696]	@ (8008c04 <printer_e+0x6c4>)
 800894a:	705a      	strb	r2, [r3, #1]

	if (tfare[3] == 0x30 && tfare[2] == 0x30)
 800894c:	4bac      	ldr	r3, [pc, #688]	@ (8008c00 <printer_e+0x6c0>)
 800894e:	78db      	ldrb	r3, [r3, #3]
 8008950:	2b30      	cmp	r3, #48	@ 0x30
 8008952:	d107      	bne.n	8008964 <printer_e+0x424>
 8008954:	4baa      	ldr	r3, [pc, #680]	@ (8008c00 <printer_e+0x6c0>)
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	2b30      	cmp	r3, #48	@ 0x30
 800895a:	d103      	bne.n	8008964 <printer_e+0x424>
		data06[2] = 0x20;
 800895c:	4ba9      	ldr	r3, [pc, #676]	@ (8008c04 <printer_e+0x6c4>)
 800895e:	2220      	movs	r2, #32
 8008960:	709a      	strb	r2, [r3, #2]
 8008962:	e003      	b.n	800896c <printer_e+0x42c>
	else
		data06[2] = tfare[3];
 8008964:	4ba6      	ldr	r3, [pc, #664]	@ (8008c00 <printer_e+0x6c0>)
 8008966:	78da      	ldrb	r2, [r3, #3]
 8008968:	4ba6      	ldr	r3, [pc, #664]	@ (8008c04 <printer_e+0x6c4>)
 800896a:	709a      	strb	r2, [r3, #2]

	if (tfare[4] == 0x30 && tfare[3] == 0x30)
 800896c:	4ba4      	ldr	r3, [pc, #656]	@ (8008c00 <printer_e+0x6c0>)
 800896e:	791b      	ldrb	r3, [r3, #4]
 8008970:	2b30      	cmp	r3, #48	@ 0x30
 8008972:	d107      	bne.n	8008984 <printer_e+0x444>
 8008974:	4ba2      	ldr	r3, [pc, #648]	@ (8008c00 <printer_e+0x6c0>)
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	2b30      	cmp	r3, #48	@ 0x30
 800897a:	d103      	bne.n	8008984 <printer_e+0x444>
		data06[3] = 0x20;
 800897c:	4ba1      	ldr	r3, [pc, #644]	@ (8008c04 <printer_e+0x6c4>)
 800897e:	2220      	movs	r2, #32
 8008980:	70da      	strb	r2, [r3, #3]
 8008982:	e003      	b.n	800898c <printer_e+0x44c>
	else
		data06[3] = tfare[4];
 8008984:	4b9e      	ldr	r3, [pc, #632]	@ (8008c00 <printer_e+0x6c0>)
 8008986:	791a      	ldrb	r2, [r3, #4]
 8008988:	4b9e      	ldr	r3, [pc, #632]	@ (8008c04 <printer_e+0x6c4>)
 800898a:	70da      	strb	r2, [r3, #3]

	data06[4] = tfare[5];
 800898c:	4b9c      	ldr	r3, [pc, #624]	@ (8008c00 <printer_e+0x6c0>)
 800898e:	795a      	ldrb	r2, [r3, #5]
 8008990:	4b9c      	ldr	r3, [pc, #624]	@ (8008c04 <printer_e+0x6c4>)
 8008992:	711a      	strb	r2, [r3, #4]
	data06[5] = tfare[6];
 8008994:	4b9a      	ldr	r3, [pc, #616]	@ (8008c00 <printer_e+0x6c0>)
 8008996:	799a      	ldrb	r2, [r3, #6]
 8008998:	4b9a      	ldr	r3, [pc, #616]	@ (8008c04 <printer_e+0x6c4>)
 800899a:	715a      	strb	r2, [r3, #5]
	data06[7] = tfare[7];
 800899c:	4b98      	ldr	r3, [pc, #608]	@ (8008c00 <printer_e+0x6c0>)
 800899e:	79da      	ldrb	r2, [r3, #7]
 80089a0:	4b98      	ldr	r3, [pc, #608]	@ (8008c04 <printer_e+0x6c4>)
 80089a2:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 80089a4:	4b91      	ldr	r3, [pc, #580]	@ (8008bec <printer_e+0x6ac>)
 80089a6:	4992      	ldr	r1, [pc, #584]	@ (8008bf0 <printer_e+0x6b0>)
 80089a8:	4892      	ldr	r0, [pc, #584]	@ (8008bf4 <printer_e+0x6b4>)
 80089aa:	2206      	movs	r2, #6
 80089ac:	f00a faba 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg06, 23, 0xffff);
 80089b0:	4b8e      	ldr	r3, [pc, #568]	@ (8008bec <printer_e+0x6ac>)
 80089b2:	4995      	ldr	r1, [pc, #596]	@ (8008c08 <printer_e+0x6c8>)
 80089b4:	488f      	ldr	r0, [pc, #572]	@ (8008bf4 <printer_e+0x6b4>)
 80089b6:	2217      	movs	r2, #23
 80089b8:	f00a fab4 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data06, 9, 0xffff);
 80089bc:	4b8b      	ldr	r3, [pc, #556]	@ (8008bec <printer_e+0x6ac>)
 80089be:	4991      	ldr	r1, [pc, #580]	@ (8008c04 <printer_e+0x6c4>)
 80089c0:	488c      	ldr	r0, [pc, #560]	@ (8008bf4 <printer_e+0x6b4>)
 80089c2:	2209      	movs	r2, #9
 80089c4:	f00a faae 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 80089c8:	4b88      	ldr	r3, [pc, #544]	@ (8008bec <printer_e+0x6ac>)
 80089ca:	498c      	ldr	r1, [pc, #560]	@ (8008bfc <printer_e+0x6bc>)
 80089cc:	4889      	ldr	r0, [pc, #548]	@ (8008bf4 <printer_e+0x6b4>)
 80089ce:	2202      	movs	r2, #2
 80089d0:	f00a faa8 	bl	8012f24 <HAL_UART_Transmit>
	//row8: total sub
	if (tsub[1] == 0x30)
 80089d4:	4b8d      	ldr	r3, [pc, #564]	@ (8008c0c <printer_e+0x6cc>)
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	2b30      	cmp	r3, #48	@ 0x30
 80089da:	d103      	bne.n	80089e4 <printer_e+0x4a4>
		data07[0] = 0x20;
 80089dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008c10 <printer_e+0x6d0>)
 80089de:	2220      	movs	r2, #32
 80089e0:	701a      	strb	r2, [r3, #0]
 80089e2:	e003      	b.n	80089ec <printer_e+0x4ac>
	else
		data07[0] = tsub[1];
 80089e4:	4b89      	ldr	r3, [pc, #548]	@ (8008c0c <printer_e+0x6cc>)
 80089e6:	785a      	ldrb	r2, [r3, #1]
 80089e8:	4b89      	ldr	r3, [pc, #548]	@ (8008c10 <printer_e+0x6d0>)
 80089ea:	701a      	strb	r2, [r3, #0]

	if (tsub[2] == 0x30 && tsub[1] == 0x30)
 80089ec:	4b87      	ldr	r3, [pc, #540]	@ (8008c0c <printer_e+0x6cc>)
 80089ee:	789b      	ldrb	r3, [r3, #2]
 80089f0:	2b30      	cmp	r3, #48	@ 0x30
 80089f2:	d107      	bne.n	8008a04 <printer_e+0x4c4>
 80089f4:	4b85      	ldr	r3, [pc, #532]	@ (8008c0c <printer_e+0x6cc>)
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b30      	cmp	r3, #48	@ 0x30
 80089fa:	d103      	bne.n	8008a04 <printer_e+0x4c4>
		data07[1] = 0x20;
 80089fc:	4b84      	ldr	r3, [pc, #528]	@ (8008c10 <printer_e+0x6d0>)
 80089fe:	2220      	movs	r2, #32
 8008a00:	705a      	strb	r2, [r3, #1]
 8008a02:	e003      	b.n	8008a0c <printer_e+0x4cc>
	else
		data07[1] = tsub[2];
 8008a04:	4b81      	ldr	r3, [pc, #516]	@ (8008c0c <printer_e+0x6cc>)
 8008a06:	789a      	ldrb	r2, [r3, #2]
 8008a08:	4b81      	ldr	r3, [pc, #516]	@ (8008c10 <printer_e+0x6d0>)
 8008a0a:	705a      	strb	r2, [r3, #1]

	if (tsub[3] == 0x30 && tsub[2] == 0x30)
 8008a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8008c0c <printer_e+0x6cc>)
 8008a0e:	78db      	ldrb	r3, [r3, #3]
 8008a10:	2b30      	cmp	r3, #48	@ 0x30
 8008a12:	d107      	bne.n	8008a24 <printer_e+0x4e4>
 8008a14:	4b7d      	ldr	r3, [pc, #500]	@ (8008c0c <printer_e+0x6cc>)
 8008a16:	789b      	ldrb	r3, [r3, #2]
 8008a18:	2b30      	cmp	r3, #48	@ 0x30
 8008a1a:	d103      	bne.n	8008a24 <printer_e+0x4e4>
		data07[2] = 0x20;
 8008a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8008c10 <printer_e+0x6d0>)
 8008a1e:	2220      	movs	r2, #32
 8008a20:	709a      	strb	r2, [r3, #2]
 8008a22:	e003      	b.n	8008a2c <printer_e+0x4ec>
	else
		data07[2] = tsub[3];
 8008a24:	4b79      	ldr	r3, [pc, #484]	@ (8008c0c <printer_e+0x6cc>)
 8008a26:	78da      	ldrb	r2, [r3, #3]
 8008a28:	4b79      	ldr	r3, [pc, #484]	@ (8008c10 <printer_e+0x6d0>)
 8008a2a:	709a      	strb	r2, [r3, #2]

	if (tsub[4] == 0x30 && tsub[3] == 0x30)
 8008a2c:	4b77      	ldr	r3, [pc, #476]	@ (8008c0c <printer_e+0x6cc>)
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	2b30      	cmp	r3, #48	@ 0x30
 8008a32:	d107      	bne.n	8008a44 <printer_e+0x504>
 8008a34:	4b75      	ldr	r3, [pc, #468]	@ (8008c0c <printer_e+0x6cc>)
 8008a36:	78db      	ldrb	r3, [r3, #3]
 8008a38:	2b30      	cmp	r3, #48	@ 0x30
 8008a3a:	d103      	bne.n	8008a44 <printer_e+0x504>
		data07[3] = 0x20;
 8008a3c:	4b74      	ldr	r3, [pc, #464]	@ (8008c10 <printer_e+0x6d0>)
 8008a3e:	2220      	movs	r2, #32
 8008a40:	70da      	strb	r2, [r3, #3]
 8008a42:	e003      	b.n	8008a4c <printer_e+0x50c>
	else
		data07[3] = tsub[4];
 8008a44:	4b71      	ldr	r3, [pc, #452]	@ (8008c0c <printer_e+0x6cc>)
 8008a46:	791a      	ldrb	r2, [r3, #4]
 8008a48:	4b71      	ldr	r3, [pc, #452]	@ (8008c10 <printer_e+0x6d0>)
 8008a4a:	70da      	strb	r2, [r3, #3]

	data07[4] = tsub[5];
 8008a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8008c0c <printer_e+0x6cc>)
 8008a4e:	795a      	ldrb	r2, [r3, #5]
 8008a50:	4b6f      	ldr	r3, [pc, #444]	@ (8008c10 <printer_e+0x6d0>)
 8008a52:	711a      	strb	r2, [r3, #4]
	data07[5] = tsub[6];
 8008a54:	4b6d      	ldr	r3, [pc, #436]	@ (8008c0c <printer_e+0x6cc>)
 8008a56:	799a      	ldrb	r2, [r3, #6]
 8008a58:	4b6d      	ldr	r3, [pc, #436]	@ (8008c10 <printer_e+0x6d0>)
 8008a5a:	715a      	strb	r2, [r3, #5]
	data07[7] = tsub[7];
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c0c <printer_e+0x6cc>)
 8008a5e:	79da      	ldrb	r2, [r3, #7]
 8008a60:	4b6b      	ldr	r3, [pc, #428]	@ (8008c10 <printer_e+0x6d0>)
 8008a62:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008a64:	4b61      	ldr	r3, [pc, #388]	@ (8008bec <printer_e+0x6ac>)
 8008a66:	4962      	ldr	r1, [pc, #392]	@ (8008bf0 <printer_e+0x6b0>)
 8008a68:	4862      	ldr	r0, [pc, #392]	@ (8008bf4 <printer_e+0x6b4>)
 8008a6a:	2206      	movs	r2, #6
 8008a6c:	f00a fa5a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg07, 23, 0xffff);
 8008a70:	4b5e      	ldr	r3, [pc, #376]	@ (8008bec <printer_e+0x6ac>)
 8008a72:	4968      	ldr	r1, [pc, #416]	@ (8008c14 <printer_e+0x6d4>)
 8008a74:	485f      	ldr	r0, [pc, #380]	@ (8008bf4 <printer_e+0x6b4>)
 8008a76:	2217      	movs	r2, #23
 8008a78:	f00a fa54 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data07, 9, 0xffff);
 8008a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008bec <printer_e+0x6ac>)
 8008a7e:	4964      	ldr	r1, [pc, #400]	@ (8008c10 <printer_e+0x6d0>)
 8008a80:	485c      	ldr	r0, [pc, #368]	@ (8008bf4 <printer_e+0x6b4>)
 8008a82:	2209      	movs	r2, #9
 8008a84:	f00a fa4e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008a88:	4b58      	ldr	r3, [pc, #352]	@ (8008bec <printer_e+0x6ac>)
 8008a8a:	495c      	ldr	r1, [pc, #368]	@ (8008bfc <printer_e+0x6bc>)
 8008a8c:	4859      	ldr	r0, [pc, #356]	@ (8008bf4 <printer_e+0x6b4>)
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f00a fa48 	bl	8012f24 <HAL_UART_Transmit>
	//row9: current total fare
	if (cfare[3] == 0x30)
 8008a94:	4b60      	ldr	r3, [pc, #384]	@ (8008c18 <printer_e+0x6d8>)
 8008a96:	78db      	ldrb	r3, [r3, #3]
 8008a98:	2b30      	cmp	r3, #48	@ 0x30
 8008a9a:	d103      	bne.n	8008aa4 <printer_e+0x564>
		data08[2] = 0x20;
 8008a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8008c1c <printer_e+0x6dc>)
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	709a      	strb	r2, [r3, #2]
 8008aa2:	e003      	b.n	8008aac <printer_e+0x56c>
	else
		data08[2] = cfare[3];
 8008aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8008c18 <printer_e+0x6d8>)
 8008aa6:	78da      	ldrb	r2, [r3, #3]
 8008aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8008c1c <printer_e+0x6dc>)
 8008aaa:	709a      	strb	r2, [r3, #2]

	if (cfare[4] == 0x30 && cfare[3] == 0x30)
 8008aac:	4b5a      	ldr	r3, [pc, #360]	@ (8008c18 <printer_e+0x6d8>)
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	2b30      	cmp	r3, #48	@ 0x30
 8008ab2:	d107      	bne.n	8008ac4 <printer_e+0x584>
 8008ab4:	4b58      	ldr	r3, [pc, #352]	@ (8008c18 <printer_e+0x6d8>)
 8008ab6:	78db      	ldrb	r3, [r3, #3]
 8008ab8:	2b30      	cmp	r3, #48	@ 0x30
 8008aba:	d103      	bne.n	8008ac4 <printer_e+0x584>
		data08[3] = 0x20;
 8008abc:	4b57      	ldr	r3, [pc, #348]	@ (8008c1c <printer_e+0x6dc>)
 8008abe:	2220      	movs	r2, #32
 8008ac0:	70da      	strb	r2, [r3, #3]
 8008ac2:	e003      	b.n	8008acc <printer_e+0x58c>
	else
		data08[3] = cfare[4];
 8008ac4:	4b54      	ldr	r3, [pc, #336]	@ (8008c18 <printer_e+0x6d8>)
 8008ac6:	791a      	ldrb	r2, [r3, #4]
 8008ac8:	4b54      	ldr	r3, [pc, #336]	@ (8008c1c <printer_e+0x6dc>)
 8008aca:	70da      	strb	r2, [r3, #3]

	data08[4] = cfare[5];
 8008acc:	4b52      	ldr	r3, [pc, #328]	@ (8008c18 <printer_e+0x6d8>)
 8008ace:	795a      	ldrb	r2, [r3, #5]
 8008ad0:	4b52      	ldr	r3, [pc, #328]	@ (8008c1c <printer_e+0x6dc>)
 8008ad2:	711a      	strb	r2, [r3, #4]
	data08[5] = cfare[6];
 8008ad4:	4b50      	ldr	r3, [pc, #320]	@ (8008c18 <printer_e+0x6d8>)
 8008ad6:	799a      	ldrb	r2, [r3, #6]
 8008ad8:	4b50      	ldr	r3, [pc, #320]	@ (8008c1c <printer_e+0x6dc>)
 8008ada:	715a      	strb	r2, [r3, #5]
	data08[7] = cfare[7];
 8008adc:	4b4e      	ldr	r3, [pc, #312]	@ (8008c18 <printer_e+0x6d8>)
 8008ade:	79da      	ldrb	r2, [r3, #7]
 8008ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8008c1c <printer_e+0x6dc>)
 8008ae2:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008ae4:	4b41      	ldr	r3, [pc, #260]	@ (8008bec <printer_e+0x6ac>)
 8008ae6:	4942      	ldr	r1, [pc, #264]	@ (8008bf0 <printer_e+0x6b0>)
 8008ae8:	4842      	ldr	r0, [pc, #264]	@ (8008bf4 <printer_e+0x6b4>)
 8008aea:	2206      	movs	r2, #6
 8008aec:	f00a fa1a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg08, 23, 0xffff);
 8008af0:	4b3e      	ldr	r3, [pc, #248]	@ (8008bec <printer_e+0x6ac>)
 8008af2:	494b      	ldr	r1, [pc, #300]	@ (8008c20 <printer_e+0x6e0>)
 8008af4:	483f      	ldr	r0, [pc, #252]	@ (8008bf4 <printer_e+0x6b4>)
 8008af6:	2217      	movs	r2, #23
 8008af8:	f00a fa14 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data08, 9, 0xffff);
 8008afc:	4b3b      	ldr	r3, [pc, #236]	@ (8008bec <printer_e+0x6ac>)
 8008afe:	4947      	ldr	r1, [pc, #284]	@ (8008c1c <printer_e+0x6dc>)
 8008b00:	483c      	ldr	r0, [pc, #240]	@ (8008bf4 <printer_e+0x6b4>)
 8008b02:	2209      	movs	r2, #9
 8008b04:	f00a fa0e 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008b08:	4b38      	ldr	r3, [pc, #224]	@ (8008bec <printer_e+0x6ac>)
 8008b0a:	493c      	ldr	r1, [pc, #240]	@ (8008bfc <printer_e+0x6bc>)
 8008b0c:	4839      	ldr	r0, [pc, #228]	@ (8008bf4 <printer_e+0x6b4>)
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f00a fa08 	bl	8012f24 <HAL_UART_Transmit>
	//row10: current total sub
	if (csub[3] == 0x30)
 8008b14:	4b43      	ldr	r3, [pc, #268]	@ (8008c24 <printer_e+0x6e4>)
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	2b30      	cmp	r3, #48	@ 0x30
 8008b1a:	d103      	bne.n	8008b24 <printer_e+0x5e4>
		data09[2] = 0x20;
 8008b1c:	4b42      	ldr	r3, [pc, #264]	@ (8008c28 <printer_e+0x6e8>)
 8008b1e:	2220      	movs	r2, #32
 8008b20:	709a      	strb	r2, [r3, #2]
 8008b22:	e003      	b.n	8008b2c <printer_e+0x5ec>
	else
		data09[2] = csub[3];
 8008b24:	4b3f      	ldr	r3, [pc, #252]	@ (8008c24 <printer_e+0x6e4>)
 8008b26:	78da      	ldrb	r2, [r3, #3]
 8008b28:	4b3f      	ldr	r3, [pc, #252]	@ (8008c28 <printer_e+0x6e8>)
 8008b2a:	709a      	strb	r2, [r3, #2]

	if (csub[4] == 0x30 && csub[3] == 0x30)
 8008b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8008c24 <printer_e+0x6e4>)
 8008b2e:	791b      	ldrb	r3, [r3, #4]
 8008b30:	2b30      	cmp	r3, #48	@ 0x30
 8008b32:	d107      	bne.n	8008b44 <printer_e+0x604>
 8008b34:	4b3b      	ldr	r3, [pc, #236]	@ (8008c24 <printer_e+0x6e4>)
 8008b36:	78db      	ldrb	r3, [r3, #3]
 8008b38:	2b30      	cmp	r3, #48	@ 0x30
 8008b3a:	d103      	bne.n	8008b44 <printer_e+0x604>
		data09[3] = 0x20;
 8008b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8008c28 <printer_e+0x6e8>)
 8008b3e:	2220      	movs	r2, #32
 8008b40:	70da      	strb	r2, [r3, #3]
 8008b42:	e003      	b.n	8008b4c <printer_e+0x60c>
	else
		data09[3] = csub[4];
 8008b44:	4b37      	ldr	r3, [pc, #220]	@ (8008c24 <printer_e+0x6e4>)
 8008b46:	791a      	ldrb	r2, [r3, #4]
 8008b48:	4b37      	ldr	r3, [pc, #220]	@ (8008c28 <printer_e+0x6e8>)
 8008b4a:	70da      	strb	r2, [r3, #3]

	data09[4] = csub[5];
 8008b4c:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <printer_e+0x6e4>)
 8008b4e:	795a      	ldrb	r2, [r3, #5]
 8008b50:	4b35      	ldr	r3, [pc, #212]	@ (8008c28 <printer_e+0x6e8>)
 8008b52:	711a      	strb	r2, [r3, #4]
	data09[5] = csub[6];
 8008b54:	4b33      	ldr	r3, [pc, #204]	@ (8008c24 <printer_e+0x6e4>)
 8008b56:	799a      	ldrb	r2, [r3, #6]
 8008b58:	4b33      	ldr	r3, [pc, #204]	@ (8008c28 <printer_e+0x6e8>)
 8008b5a:	715a      	strb	r2, [r3, #5]
	data09[7] = csub[7];
 8008b5c:	4b31      	ldr	r3, [pc, #196]	@ (8008c24 <printer_e+0x6e4>)
 8008b5e:	79da      	ldrb	r2, [r3, #7]
 8008b60:	4b31      	ldr	r3, [pc, #196]	@ (8008c28 <printer_e+0x6e8>)
 8008b62:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008b64:	4b21      	ldr	r3, [pc, #132]	@ (8008bec <printer_e+0x6ac>)
 8008b66:	4922      	ldr	r1, [pc, #136]	@ (8008bf0 <printer_e+0x6b0>)
 8008b68:	4822      	ldr	r0, [pc, #136]	@ (8008bf4 <printer_e+0x6b4>)
 8008b6a:	2206      	movs	r2, #6
 8008b6c:	f00a f9da 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg09, 23, 0xffff);
 8008b70:	4b1e      	ldr	r3, [pc, #120]	@ (8008bec <printer_e+0x6ac>)
 8008b72:	492e      	ldr	r1, [pc, #184]	@ (8008c2c <printer_e+0x6ec>)
 8008b74:	481f      	ldr	r0, [pc, #124]	@ (8008bf4 <printer_e+0x6b4>)
 8008b76:	2217      	movs	r2, #23
 8008b78:	f00a f9d4 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data09, 9, 0xffff);
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <printer_e+0x6ac>)
 8008b7e:	492a      	ldr	r1, [pc, #168]	@ (8008c28 <printer_e+0x6e8>)
 8008b80:	481c      	ldr	r0, [pc, #112]	@ (8008bf4 <printer_e+0x6b4>)
 8008b82:	2209      	movs	r2, #9
 8008b84:	f00a f9ce 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008b88:	4b18      	ldr	r3, [pc, #96]	@ (8008bec <printer_e+0x6ac>)
 8008b8a:	491c      	ldr	r1, [pc, #112]	@ (8008bfc <printer_e+0x6bc>)
 8008b8c:	4819      	ldr	r0, [pc, #100]	@ (8008bf4 <printer_e+0x6b4>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f00a f9c8 	bl	8012f24 <HAL_UART_Transmit>
	//row11: total time
	if (ttime[2] == 0x30)
 8008b94:	4b26      	ldr	r3, [pc, #152]	@ (8008c30 <printer_e+0x6f0>)
 8008b96:	789b      	ldrb	r3, [r3, #2]
 8008b98:	2b30      	cmp	r3, #48	@ 0x30
 8008b9a:	d103      	bne.n	8008ba4 <printer_e+0x664>
		data10[2] = 0x20;
 8008b9c:	4b25      	ldr	r3, [pc, #148]	@ (8008c34 <printer_e+0x6f4>)
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	709a      	strb	r2, [r3, #2]
 8008ba2:	e003      	b.n	8008bac <printer_e+0x66c>
	else
		data10[2] = ttime[2];
 8008ba4:	4b22      	ldr	r3, [pc, #136]	@ (8008c30 <printer_e+0x6f0>)
 8008ba6:	789a      	ldrb	r2, [r3, #2]
 8008ba8:	4b22      	ldr	r3, [pc, #136]	@ (8008c34 <printer_e+0x6f4>)
 8008baa:	709a      	strb	r2, [r3, #2]

	if (ttime[3] == 0x30 && ttime[2] == 0x30)
 8008bac:	4b20      	ldr	r3, [pc, #128]	@ (8008c30 <printer_e+0x6f0>)
 8008bae:	78db      	ldrb	r3, [r3, #3]
 8008bb0:	2b30      	cmp	r3, #48	@ 0x30
 8008bb2:	d107      	bne.n	8008bc4 <printer_e+0x684>
 8008bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8008c30 <printer_e+0x6f0>)
 8008bb6:	789b      	ldrb	r3, [r3, #2]
 8008bb8:	2b30      	cmp	r3, #48	@ 0x30
 8008bba:	d103      	bne.n	8008bc4 <printer_e+0x684>
		data10[3] = 0x20;
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c34 <printer_e+0x6f4>)
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	70da      	strb	r2, [r3, #3]
 8008bc2:	e003      	b.n	8008bcc <printer_e+0x68c>
	else
		data10[3] = ttime[3];
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c30 <printer_e+0x6f0>)
 8008bc6:	78da      	ldrb	r2, [r3, #3]
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c34 <printer_e+0x6f4>)
 8008bca:	70da      	strb	r2, [r3, #3]

	if (ttime[4] == 0x30 && ttime[3] == 0x30)
 8008bcc:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <printer_e+0x6f0>)
 8008bce:	791b      	ldrb	r3, [r3, #4]
 8008bd0:	2b30      	cmp	r3, #48	@ 0x30
 8008bd2:	d131      	bne.n	8008c38 <printer_e+0x6f8>
 8008bd4:	4b16      	ldr	r3, [pc, #88]	@ (8008c30 <printer_e+0x6f0>)
 8008bd6:	78db      	ldrb	r3, [r3, #3]
 8008bd8:	2b30      	cmp	r3, #48	@ 0x30
 8008bda:	d12d      	bne.n	8008c38 <printer_e+0x6f8>
		data10[4] = 0x20;
 8008bdc:	4b15      	ldr	r3, [pc, #84]	@ (8008c34 <printer_e+0x6f4>)
 8008bde:	2220      	movs	r2, #32
 8008be0:	711a      	strb	r2, [r3, #4]
 8008be2:	e02d      	b.n	8008c40 <printer_e+0x700>
 8008be4:	20000e70 	.word	0x20000e70
 8008be8:	20000388 	.word	0x20000388
 8008bec:	0000ffff 	.word	0x0000ffff
 8008bf0:	20000194 	.word	0x20000194
 8008bf4:	200005bc 	.word	0x200005bc
 8008bf8:	200002c8 	.word	0x200002c8
 8008bfc:	20000188 	.word	0x20000188
 8008c00:	20000e78 	.word	0x20000e78
 8008c04:	20000394 	.word	0x20000394
 8008c08:	200002e0 	.word	0x200002e0
 8008c0c:	20000e80 	.word	0x20000e80
 8008c10:	200003a0 	.word	0x200003a0
 8008c14:	200002f8 	.word	0x200002f8
 8008c18:	20000e88 	.word	0x20000e88
 8008c1c:	200003ac 	.word	0x200003ac
 8008c20:	20000310 	.word	0x20000310
 8008c24:	20000e90 	.word	0x20000e90
 8008c28:	200003b8 	.word	0x200003b8
 8008c2c:	20000328 	.word	0x20000328
 8008c30:	20000e98 	.word	0x20000e98
 8008c34:	200003c4 	.word	0x200003c4
	else
		data10[4] = ttime[4];
 8008c38:	4b3b      	ldr	r3, [pc, #236]	@ (8008d28 <printer_e+0x7e8>)
 8008c3a:	791a      	ldrb	r2, [r3, #4]
 8008c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8008d2c <printer_e+0x7ec>)
 8008c3e:	711a      	strb	r2, [r3, #4]

	data10[5] = ttime[5];
 8008c40:	4b39      	ldr	r3, [pc, #228]	@ (8008d28 <printer_e+0x7e8>)
 8008c42:	795a      	ldrb	r2, [r3, #5]
 8008c44:	4b39      	ldr	r3, [pc, #228]	@ (8008d2c <printer_e+0x7ec>)
 8008c46:	715a      	strb	r2, [r3, #5]
	data10[7] = ttime[6];
 8008c48:	4b37      	ldr	r3, [pc, #220]	@ (8008d28 <printer_e+0x7e8>)
 8008c4a:	799a      	ldrb	r2, [r3, #6]
 8008c4c:	4b37      	ldr	r3, [pc, #220]	@ (8008d2c <printer_e+0x7ec>)
 8008c4e:	71da      	strb	r2, [r3, #7]
	data10[8] = ttime[7];
 8008c50:	4b35      	ldr	r3, [pc, #212]	@ (8008d28 <printer_e+0x7e8>)
 8008c52:	79da      	ldrb	r2, [r3, #7]
 8008c54:	4b35      	ldr	r3, [pc, #212]	@ (8008d2c <printer_e+0x7ec>)
 8008c56:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008c58:	4b35      	ldr	r3, [pc, #212]	@ (8008d30 <printer_e+0x7f0>)
 8008c5a:	4936      	ldr	r1, [pc, #216]	@ (8008d34 <printer_e+0x7f4>)
 8008c5c:	4836      	ldr	r0, [pc, #216]	@ (8008d38 <printer_e+0x7f8>)
 8008c5e:	2206      	movs	r2, #6
 8008c60:	f00a f960 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg10, 23, 0xffff);
 8008c64:	4b32      	ldr	r3, [pc, #200]	@ (8008d30 <printer_e+0x7f0>)
 8008c66:	4935      	ldr	r1, [pc, #212]	@ (8008d3c <printer_e+0x7fc>)
 8008c68:	4833      	ldr	r0, [pc, #204]	@ (8008d38 <printer_e+0x7f8>)
 8008c6a:	2217      	movs	r2, #23
 8008c6c:	f00a f95a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data10, 9, 0xffff);
 8008c70:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <printer_e+0x7f0>)
 8008c72:	492e      	ldr	r1, [pc, #184]	@ (8008d2c <printer_e+0x7ec>)
 8008c74:	4830      	ldr	r0, [pc, #192]	@ (8008d38 <printer_e+0x7f8>)
 8008c76:	2209      	movs	r2, #9
 8008c78:	f00a f954 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8008d30 <printer_e+0x7f0>)
 8008c7e:	4930      	ldr	r1, [pc, #192]	@ (8008d40 <printer_e+0x800>)
 8008c80:	482d      	ldr	r0, [pc, #180]	@ (8008d38 <printer_e+0x7f8>)
 8008c82:	2202      	movs	r2, #2
 8008c84:	f00a f94e 	bl	8012f24 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, tmsg11, 23, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, data11, 9, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
	//row13: (chi)print time: 04/05/23 11:15
	dtdata[10] = hmi_rtc[14];
 8008c88:	4b2e      	ldr	r3, [pc, #184]	@ (8008d44 <printer_e+0x804>)
 8008c8a:	7b9a      	ldrb	r2, [r3, #14]
 8008c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008d48 <printer_e+0x808>)
 8008c8e:	729a      	strb	r2, [r3, #10]
	dtdata[11] = hmi_rtc[15];
 8008c90:	4b2c      	ldr	r3, [pc, #176]	@ (8008d44 <printer_e+0x804>)
 8008c92:	7bda      	ldrb	r2, [r3, #15]
 8008c94:	4b2c      	ldr	r3, [pc, #176]	@ (8008d48 <printer_e+0x808>)
 8008c96:	72da      	strb	r2, [r3, #11]
	dtdata[13] = hmi_rtc[11];
 8008c98:	4b2a      	ldr	r3, [pc, #168]	@ (8008d44 <printer_e+0x804>)
 8008c9a:	7ada      	ldrb	r2, [r3, #11]
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008d48 <printer_e+0x808>)
 8008c9e:	735a      	strb	r2, [r3, #13]
	dtdata[14] = hmi_rtc[12];
 8008ca0:	4b28      	ldr	r3, [pc, #160]	@ (8008d44 <printer_e+0x804>)
 8008ca2:	7b1a      	ldrb	r2, [r3, #12]
 8008ca4:	4b28      	ldr	r3, [pc, #160]	@ (8008d48 <printer_e+0x808>)
 8008ca6:	739a      	strb	r2, [r3, #14]
	dtdata[16] = hmi_rtc[8];
 8008ca8:	4b26      	ldr	r3, [pc, #152]	@ (8008d44 <printer_e+0x804>)
 8008caa:	7a1a      	ldrb	r2, [r3, #8]
 8008cac:	4b26      	ldr	r3, [pc, #152]	@ (8008d48 <printer_e+0x808>)
 8008cae:	741a      	strb	r2, [r3, #16]
	dtdata[17] = hmi_rtc[9];
 8008cb0:	4b24      	ldr	r3, [pc, #144]	@ (8008d44 <printer_e+0x804>)
 8008cb2:	7a5a      	ldrb	r2, [r3, #9]
 8008cb4:	4b24      	ldr	r3, [pc, #144]	@ (8008d48 <printer_e+0x808>)
 8008cb6:	745a      	strb	r2, [r3, #17]
	dtdata[19] = hmi_rtc[17];
 8008cb8:	4b22      	ldr	r3, [pc, #136]	@ (8008d44 <printer_e+0x804>)
 8008cba:	7c5a      	ldrb	r2, [r3, #17]
 8008cbc:	4b22      	ldr	r3, [pc, #136]	@ (8008d48 <printer_e+0x808>)
 8008cbe:	74da      	strb	r2, [r3, #19]
	dtdata[20] = hmi_rtc[18];
 8008cc0:	4b20      	ldr	r3, [pc, #128]	@ (8008d44 <printer_e+0x804>)
 8008cc2:	7c9a      	ldrb	r2, [r3, #18]
 8008cc4:	4b20      	ldr	r3, [pc, #128]	@ (8008d48 <printer_e+0x808>)
 8008cc6:	751a      	strb	r2, [r3, #20]
	dtdata[22] = hmi_rtc[20];
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d44 <printer_e+0x804>)
 8008cca:	7d1a      	ldrb	r2, [r3, #20]
 8008ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8008d48 <printer_e+0x808>)
 8008cce:	759a      	strb	r2, [r3, #22]
	dtdata[23] = hmi_rtc[21];
 8008cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d44 <printer_e+0x804>)
 8008cd2:	7d5a      	ldrb	r2, [r3, #21]
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d48 <printer_e+0x808>)
 8008cd6:	75da      	strb	r2, [r3, #23]

	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008cd8:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <printer_e+0x7f0>)
 8008cda:	4919      	ldr	r1, [pc, #100]	@ (8008d40 <printer_e+0x800>)
 8008cdc:	4816      	ldr	r0, [pc, #88]	@ (8008d38 <printer_e+0x7f8>)
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f00a f920 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008ce4:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <printer_e+0x7f0>)
 8008ce6:	4913      	ldr	r1, [pc, #76]	@ (8008d34 <printer_e+0x7f4>)
 8008ce8:	4813      	ldr	r0, [pc, #76]	@ (8008d38 <printer_e+0x7f8>)
 8008cea:	2206      	movs	r2, #6
 8008cec:	f00a f91a 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, dtdata, 24, 0xffff);
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d30 <printer_e+0x7f0>)
 8008cf2:	4915      	ldr	r1, [pc, #84]	@ (8008d48 <printer_e+0x808>)
 8008cf4:	4810      	ldr	r0, [pc, #64]	@ (8008d38 <printer_e+0x7f8>)
 8008cf6:	2218      	movs	r2, #24
 8008cf8:	f00a f914 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <printer_e+0x7f0>)
 8008cfe:	4910      	ldr	r1, [pc, #64]	@ (8008d40 <printer_e+0x800>)
 8008d00:	480d      	ldr	r0, [pc, #52]	@ (8008d38 <printer_e+0x7f8>)
 8008d02:	2202      	movs	r2, #2
 8008d04:	f00a f90e 	bl	8012f24 <HAL_UART_Transmit>

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 8008d08:	4b09      	ldr	r3, [pc, #36]	@ (8008d30 <printer_e+0x7f0>)
 8008d0a:	4910      	ldr	r1, [pc, #64]	@ (8008d4c <printer_e+0x80c>)
 8008d0c:	480a      	ldr	r0, [pc, #40]	@ (8008d38 <printer_e+0x7f8>)
 8008d0e:	2206      	movs	r2, #6
 8008d10:	f00a f908 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 8008d14:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <printer_e+0x7f0>)
 8008d16:	490d      	ldr	r1, [pc, #52]	@ (8008d4c <printer_e+0x80c>)
 8008d18:	4807      	ldr	r0, [pc, #28]	@ (8008d38 <printer_e+0x7f8>)
 8008d1a:	2206      	movs	r2, #6
 8008d1c:	f00a f902 	bl	8012f24 <HAL_UART_Transmit>
}
 8008d20:	46c0      	nop			@ (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b007      	add	sp, #28
 8008d26:	bd90      	pop	{r4, r7, pc}
 8008d28:	20000e98 	.word	0x20000e98
 8008d2c:	200003c4 	.word	0x200003c4
 8008d30:	0000ffff 	.word	0x0000ffff
 8008d34:	20000194 	.word	0x20000194
 8008d38:	200005bc 	.word	0x200005bc
 8008d3c:	20000340 	.word	0x20000340
 8008d40:	20000188 	.word	0x20000188
 8008d44:	2000007c 	.word	0x2000007c
 8008d48:	200003d0 	.word	0x200003d0
 8008d4c:	2000018c 	.word	0x2000018c

08008d50 <printer_transmit>:

void printer_transmit(struct print1 *data, UART_HandleTypeDef *huart)
{
 8008d50:	b590      	push	{r4, r7, lr}
 8008d52:	b08d      	sub	sp, #52	@ 0x34
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	unsigned char buffer[sizeof(struct print1)];
	memset(buffer, 0, sizeof(struct print1));
 8008d5a:	2408      	movs	r4, #8
 8008d5c:	193b      	adds	r3, r7, r4
 8008d5e:	2228      	movs	r2, #40	@ 0x28
 8008d60:	2100      	movs	r1, #0
 8008d62:	0018      	movs	r0, r3
 8008d64:	f00f fc2e 	bl	80185c4 <memset>
	memcpy(buffer, data, sizeof(struct print1));
 8008d68:	193a      	adds	r2, r7, r4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	0010      	movs	r0, r2
 8008d6e:	0019      	movs	r1, r3
 8008d70:	2328      	movs	r3, #40	@ 0x28
 8008d72:	001a      	movs	r2, r3
 8008d74:	f00f fc5a 	bl	801862c <memcpy>

//	memcpy(buffer, &data, sizeof data);

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) buffer, sizeof(buffer), 0xffff);
 8008d78:	4b04      	ldr	r3, [pc, #16]	@ (8008d8c <printer_transmit+0x3c>)
 8008d7a:	1939      	adds	r1, r7, r4
 8008d7c:	4804      	ldr	r0, [pc, #16]	@ (8008d90 <printer_transmit+0x40>)
 8008d7e:	2228      	movs	r2, #40	@ 0x28
 8008d80:	f00a f8d0 	bl	8012f24 <HAL_UART_Transmit>
}
 8008d84:	46c0      	nop			@ (mov r8, r8)
 8008d86:	46bd      	mov	sp, r7
 8008d88:	b00d      	add	sp, #52	@ 0x34
 8008d8a:	bd90      	pop	{r4, r7, pc}
 8008d8c:	0000ffff 	.word	0x0000ffff
 8008d90:	200005bc 	.word	0x200005bc

08008d94 <printer_transmit2>:

void printer_transmit2(struct print2 *data, UART_HandleTypeDef *huart)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b08d      	sub	sp, #52	@ 0x34
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	unsigned char buffer[sizeof(struct print2)];
	memset(buffer, 0, sizeof(struct print2));
 8008d9e:	2408      	movs	r4, #8
 8008da0:	193b      	adds	r3, r7, r4
 8008da2:	2228      	movs	r2, #40	@ 0x28
 8008da4:	2100      	movs	r1, #0
 8008da6:	0018      	movs	r0, r3
 8008da8:	f00f fc0c 	bl	80185c4 <memset>
	memcpy(buffer, data, sizeof(struct print2));
 8008dac:	193a      	adds	r2, r7, r4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	0010      	movs	r0, r2
 8008db2:	0019      	movs	r1, r3
 8008db4:	2328      	movs	r3, #40	@ 0x28
 8008db6:	001a      	movs	r2, r3
 8008db8:	f00f fc38 	bl	801862c <memcpy>

//	memcpy(buffer, &data, sizeof data);

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) buffer, sizeof(buffer), 0xffff);
 8008dbc:	4b04      	ldr	r3, [pc, #16]	@ (8008dd0 <printer_transmit2+0x3c>)
 8008dbe:	1939      	adds	r1, r7, r4
 8008dc0:	4804      	ldr	r0, [pc, #16]	@ (8008dd4 <printer_transmit2+0x40>)
 8008dc2:	2228      	movs	r2, #40	@ 0x28
 8008dc4:	f00a f8ae 	bl	8012f24 <HAL_UART_Transmit>
}
 8008dc8:	46c0      	nop			@ (mov r8, r8)
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b00d      	add	sp, #52	@ 0x34
 8008dce:	bd90      	pop	{r4, r7, pc}
 8008dd0:	0000ffff 	.word	0x0000ffff
 8008dd4:	200005bc 	.word	0x200005bc

08008dd8 <eeprom_w>:

//write data to EEPROM

void eeprom_w(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Write(&hi2c2, ADDR_EEPROM_Write, 0, I2C_MEMADD_SIZE_16BIT,&(WriteBuffer[0]),BufferSize, 1000) == HAL_OK)
 8008dde:	480e      	ldr	r0, [pc, #56]	@ (8008e18 <eeprom_w+0x40>)
 8008de0:	23fa      	movs	r3, #250	@ 0xfa
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	2330      	movs	r3, #48	@ 0x30
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <eeprom_w+0x44>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2302      	movs	r3, #2
 8008df0:	2200      	movs	r2, #0
 8008df2:	21a0      	movs	r1, #160	@ 0xa0
 8008df4:	f005 fea0 	bl	800eb38 <HAL_I2C_Mem_Write>
 8008df8:	1e03      	subs	r3, r0, #0
 8008dfa:	d103      	bne.n	8008e04 <eeprom_w+0x2c>
	{
		HAL_Delay(10);
 8008dfc:	200a      	movs	r0, #10
 8008dfe:	f004 fe0b 	bl	800da18 <HAL_Delay>
		//test - return eeprom write data
		//HAL_UART_Transmit(&huart2,WriteBuffer,BufferSize,0x200);
		Flag_test1 = TRUE;
		HAL_Delay(10);
	}
}
 8008e02:	e005      	b.n	8008e10 <eeprom_w+0x38>
		Flag_test1 = TRUE;
 8008e04:	4b06      	ldr	r3, [pc, #24]	@ (8008e20 <eeprom_w+0x48>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8008e0a:	200a      	movs	r0, #10
 8008e0c:	f004 fe04 	bl	800da18 <HAL_Delay>
}
 8008e10:	46c0      	nop			@ (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	20000570 	.word	0x20000570
 8008e1c:	20000bbc 	.word	0x20000bbc
 8008e20:	20000c12 	.word	0x20000c12

08008e24 <eeprom_check>:

//read data from EEPROM & check
void eeprom_check(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, ADDR_EEPROM_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBuffer,BufferSize, 1000);
 8008e2a:	4811      	ldr	r0, [pc, #68]	@ (8008e70 <eeprom_check+0x4c>)
 8008e2c:	23fa      	movs	r3, #250	@ 0xfa
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	9302      	str	r3, [sp, #8]
 8008e32:	2330      	movs	r3, #48	@ 0x30
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	4b0f      	ldr	r3, [pc, #60]	@ (8008e74 <eeprom_check+0x50>)
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	21a1      	movs	r1, #161	@ 0xa1
 8008e40:	f005 ffa8 	bl	800ed94 <HAL_I2C_Mem_Read>
	if(memcmp(WriteBuffer,ReadBuffer,BufferSize) == 0 )
 8008e44:	490b      	ldr	r1, [pc, #44]	@ (8008e74 <eeprom_check+0x50>)
 8008e46:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <eeprom_check+0x54>)
 8008e48:	2230      	movs	r2, #48	@ 0x30
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f00f fbac 	bl	80185a8 <memcmp>
 8008e50:	1e03      	subs	r3, r0, #0
 8008e52:	d103      	bne.n	8008e5c <eeprom_check+0x38>
	{
		HAL_Delay(10);
 8008e54:	200a      	movs	r0, #10
 8008e56:	f004 fddf 	bl	800da18 <HAL_Delay>
		//test - return read buffer
		//HAL_UART_Transmit(&huart2,ReadBuffer,BufferSize,0x200);
		Flag_test2 = TRUE;
		HAL_Delay(10);
	}
}
 8008e5a:	e005      	b.n	8008e68 <eeprom_check+0x44>
		Flag_test2 = TRUE;
 8008e5c:	4b07      	ldr	r3, [pc, #28]	@ (8008e7c <eeprom_check+0x58>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8008e62:	200a      	movs	r0, #10
 8008e64:	f004 fdd8 	bl	800da18 <HAL_Delay>
}
 8008e68:	46c0      	nop			@ (mov r8, r8)
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	46c0      	nop			@ (mov r8, r8)
 8008e70:	20000570 	.word	0x20000570
 8008e74:	20000b8c 	.word	0x20000b8c
 8008e78:	20000bbc 	.word	0x20000bbc
 8008e7c:	20000c13 	.word	0x20000c13

08008e80 <eeprom_r>:

void eeprom_r(void)
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b08d      	sub	sp, #52	@ 0x34
 8008e84:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, ADDR_EEPROM_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBuffer,BufferSize, 1000);
 8008e86:	48bc      	ldr	r0, [pc, #752]	@ (8009178 <eeprom_r+0x2f8>)
 8008e88:	23fa      	movs	r3, #250	@ 0xfa
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	2330      	movs	r3, #48	@ 0x30
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	4bba      	ldr	r3, [pc, #744]	@ (800917c <eeprom_r+0x2fc>)
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2302      	movs	r3, #2
 8008e98:	2200      	movs	r2, #0
 8008e9a:	21a1      	movs	r1, #161	@ 0xa1
 8008e9c:	f005 ff7a 	bl	800ed94 <HAL_I2C_Mem_Read>
	*/

	//0 - header AA BB

	//1 - ReadBuffer[0][1][2][3] - 2km
	Dist_Fkm[0] = ReadBuffer[0];
 8008ea0:	4bb6      	ldr	r3, [pc, #728]	@ (800917c <eeprom_r+0x2fc>)
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	211c      	movs	r1, #28
 8008ea6:	187b      	adds	r3, r7, r1
 8008ea8:	701a      	strb	r2, [r3, #0]
	Dist_Fkm[1] = ReadBuffer[1];
 8008eaa:	4bb4      	ldr	r3, [pc, #720]	@ (800917c <eeprom_r+0x2fc>)
 8008eac:	785a      	ldrb	r2, [r3, #1]
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	705a      	strb	r2, [r3, #1]
	Dist_Fkm[2] = ReadBuffer[2];
 8008eb2:	4bb2      	ldr	r3, [pc, #712]	@ (800917c <eeprom_r+0x2fc>)
 8008eb4:	789a      	ldrb	r2, [r3, #2]
 8008eb6:	187b      	adds	r3, r7, r1
 8008eb8:	709a      	strb	r2, [r3, #2]
	Dist_Fkm[3] = ReadBuffer[3];
 8008eba:	4bb0      	ldr	r3, [pc, #704]	@ (800917c <eeprom_r+0x2fc>)
 8008ebc:	78da      	ldrb	r2, [r3, #3]
 8008ebe:	187b      	adds	r3, r7, r1
 8008ec0:	70da      	strb	r2, [r3, #3]
	//first 2km, not used yet
	memset(Dist_Fkm, 0, 4);
 8008ec2:	187b      	adds	r3, r7, r1
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f00f fb7b 	bl	80185c4 <memset>

	//2 - ReadBuffer[4][5] - Fa_amt, 935, 745, 1750
	Fa_amt[0] = ReadBuffer[4];
 8008ece:	4bab      	ldr	r3, [pc, #684]	@ (800917c <eeprom_r+0x2fc>)
 8008ed0:	791a      	ldrb	r2, [r3, #4]
 8008ed2:	2418      	movs	r4, #24
 8008ed4:	193b      	adds	r3, r7, r4
 8008ed6:	701a      	strb	r2, [r3, #0]
	Fa_amt[1] = ReadBuffer[5];
 8008ed8:	4ba8      	ldr	r3, [pc, #672]	@ (800917c <eeprom_r+0x2fc>)
 8008eda:	795a      	ldrb	r2, [r3, #5]
 8008edc:	193b      	adds	r3, r7, r4
 8008ede:	705a      	strb	r2, [r3, #1]
	Fare_reached = (float) byte_to_long(Fa_amt) / 10;
 8008ee0:	193b      	adds	r3, r7, r4
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f7fe ffa4 	bl	8007e30 <byte_to_long>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	0018      	movs	r0, r3
 8008eec:	f7f8 faea 	bl	80014c4 <__aeabi_ui2f>
 8008ef0:	1c03      	adds	r3, r0, #0
 8008ef2:	49a3      	ldr	r1, [pc, #652]	@ (8009180 <eeprom_r+0x300>)
 8008ef4:	1c18      	adds	r0, r3, #0
 8008ef6:	f7f7 fdb1 	bl	8000a5c <__aeabi_fdiv>
 8008efa:	1c03      	adds	r3, r0, #0
 8008efc:	1c1a      	adds	r2, r3, #0
 8008efe:	4ba1      	ldr	r3, [pc, #644]	@ (8009184 <eeprom_r+0x304>)
 8008f00:	601a      	str	r2, [r3, #0]
	memset(Fa_amt, 0, 2);
 8008f02:	193b      	adds	r3, r7, r4
 8008f04:	2202      	movs	r2, #2
 8008f06:	2100      	movs	r1, #0
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f00f fb5b 	bl	80185c4 <memset>

	//3 - ReadBuffer[6][7] - Fa_2km, 270, 235, 220
	Fa_2km[0] = ReadBuffer[6];
 8008f0e:	4b9b      	ldr	r3, [pc, #620]	@ (800917c <eeprom_r+0x2fc>)
 8008f10:	799a      	ldrb	r2, [r3, #6]
 8008f12:	2414      	movs	r4, #20
 8008f14:	193b      	adds	r3, r7, r4
 8008f16:	701a      	strb	r2, [r3, #0]
	Fa_2km[1] = ReadBuffer[7];
 8008f18:	4b98      	ldr	r3, [pc, #608]	@ (800917c <eeprom_r+0x2fc>)
 8008f1a:	79da      	ldrb	r2, [r3, #7]
 8008f1c:	193b      	adds	r3, r7, r4
 8008f1e:	705a      	strb	r2, [r3, #1]
	Fare_2km = (float) byte_to_long(Fa_2km) / 10;
 8008f20:	193b      	adds	r3, r7, r4
 8008f22:	0018      	movs	r0, r3
 8008f24:	f7fe ff84 	bl	8007e30 <byte_to_long>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f7f8 faca 	bl	80014c4 <__aeabi_ui2f>
 8008f30:	1c03      	adds	r3, r0, #0
 8008f32:	4993      	ldr	r1, [pc, #588]	@ (8009180 <eeprom_r+0x300>)
 8008f34:	1c18      	adds	r0, r3, #0
 8008f36:	f7f7 fd91 	bl	8000a5c <__aeabi_fdiv>
 8008f3a:	1c03      	adds	r3, r0, #0
 8008f3c:	1c1a      	adds	r2, r3, #0
 8008f3e:	4b92      	ldr	r3, [pc, #584]	@ (8009188 <eeprom_r+0x308>)
 8008f40:	601a      	str	r2, [r3, #0]
	//Fare_200m0 = Fare_2km / 10 (2.7, 2.35, 2.2), C_Fare_Min = Fare_2km * 10 (2700, 2350, 2200)
	Fare_200m0 = (float) byte_to_long(Fa_2km) / 100;
 8008f42:	193b      	adds	r3, r7, r4
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7fe ff73 	bl	8007e30 <byte_to_long>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f7f8 fab9 	bl	80014c4 <__aeabi_ui2f>
 8008f52:	1c03      	adds	r3, r0, #0
 8008f54:	498d      	ldr	r1, [pc, #564]	@ (800918c <eeprom_r+0x30c>)
 8008f56:	1c18      	adds	r0, r3, #0
 8008f58:	f7f7 fd80 	bl	8000a5c <__aeabi_fdiv>
 8008f5c:	1c03      	adds	r3, r0, #0
 8008f5e:	1c1a      	adds	r2, r3, #0
 8008f60:	4b8b      	ldr	r3, [pc, #556]	@ (8009190 <eeprom_r+0x310>)
 8008f62:	601a      	str	r2, [r3, #0]
	Fare_min = byte_to_long(Fa_2km) * 10;
 8008f64:	193b      	adds	r3, r7, r4
 8008f66:	0018      	movs	r0, r3
 8008f68:	f7fe ff62 	bl	8007e30 <byte_to_long>
 8008f6c:	0002      	movs	r2, r0
 8008f6e:	0013      	movs	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	001a      	movs	r2, r3
 8008f78:	4b86      	ldr	r3, [pc, #536]	@ (8009194 <eeprom_r+0x314>)
 8008f7a:	601a      	str	r2, [r3, #0]
	memset(Fa_2km, 0, 2);
 8008f7c:	193b      	adds	r3, r7, r4
 8008f7e:	2202      	movs	r2, #2
 8008f80:	2100      	movs	r1, #0
 8008f82:	0018      	movs	r0, r3
 8008f84:	f00f fb1e 	bl	80185c4 <memset>

	//4 - ReadBuffer[8][9] - Fa_200m1, 19, 17, 17
	Fa_200m1[0] = ReadBuffer[8];
 8008f88:	4b7c      	ldr	r3, [pc, #496]	@ (800917c <eeprom_r+0x2fc>)
 8008f8a:	7a1a      	ldrb	r2, [r3, #8]
 8008f8c:	2410      	movs	r4, #16
 8008f8e:	193b      	adds	r3, r7, r4
 8008f90:	701a      	strb	r2, [r3, #0]
	Fa_200m1[1] = ReadBuffer[9];
 8008f92:	4b7a      	ldr	r3, [pc, #488]	@ (800917c <eeprom_r+0x2fc>)
 8008f94:	7a5a      	ldrb	r2, [r3, #9]
 8008f96:	193b      	adds	r3, r7, r4
 8008f98:	705a      	strb	r2, [r3, #1]
	Fare_200m1 = (float) byte_to_long(Fa_200m1) / 10;
 8008f9a:	193b      	adds	r3, r7, r4
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7fe ff47 	bl	8007e30 <byte_to_long>
 8008fa2:	0003      	movs	r3, r0
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7f8 fa8d 	bl	80014c4 <__aeabi_ui2f>
 8008faa:	1c03      	adds	r3, r0, #0
 8008fac:	4974      	ldr	r1, [pc, #464]	@ (8009180 <eeprom_r+0x300>)
 8008fae:	1c18      	adds	r0, r3, #0
 8008fb0:	f7f7 fd54 	bl	8000a5c <__aeabi_fdiv>
 8008fb4:	1c03      	adds	r3, r0, #0
 8008fb6:	1c1a      	adds	r2, r3, #0
 8008fb8:	4b77      	ldr	r3, [pc, #476]	@ (8009198 <eeprom_r+0x318>)
 8008fba:	601a      	str	r2, [r3, #0]
	//Fare_200m1 -> T1
	memset(Fa_200m1, 0, 2);
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f00f fafe 	bl	80185c4 <memset>

	//5 - ReadBuffer[10][11] - Fa_200m2, 13, 13, 15
	Fa_200m2[0] = ReadBuffer[10];
 8008fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800917c <eeprom_r+0x2fc>)
 8008fca:	7a9a      	ldrb	r2, [r3, #10]
 8008fcc:	240c      	movs	r4, #12
 8008fce:	193b      	adds	r3, r7, r4
 8008fd0:	701a      	strb	r2, [r3, #0]
	Fa_200m2[1] = ReadBuffer[11];
 8008fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800917c <eeprom_r+0x2fc>)
 8008fd4:	7ada      	ldrb	r2, [r3, #11]
 8008fd6:	193b      	adds	r3, r7, r4
 8008fd8:	705a      	strb	r2, [r3, #1]
	Fare_200m2 = (float) byte_to_long(Fa_200m2) / 10;
 8008fda:	193b      	adds	r3, r7, r4
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f7fe ff27 	bl	8007e30 <byte_to_long>
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7f8 fa6d 	bl	80014c4 <__aeabi_ui2f>
 8008fea:	1c03      	adds	r3, r0, #0
 8008fec:	4964      	ldr	r1, [pc, #400]	@ (8009180 <eeprom_r+0x300>)
 8008fee:	1c18      	adds	r0, r3, #0
 8008ff0:	f7f7 fd34 	bl	8000a5c <__aeabi_fdiv>
 8008ff4:	1c03      	adds	r3, r0, #0
 8008ff6:	1c1a      	adds	r2, r3, #0
 8008ff8:	4b68      	ldr	r3, [pc, #416]	@ (800919c <eeprom_r+0x31c>)
 8008ffa:	601a      	str	r2, [r3, #0]
	//Fare_200m2 -> T2
	memset(Fa_200m2, 0, 2);
 8008ffc:	193b      	adds	r3, r7, r4
 8008ffe:	2202      	movs	r2, #2
 8009000:	2100      	movs	r1, #0
 8009002:	0018      	movs	r0, r3
 8009004:	f00f fade 	bl	80185c4 <memset>

	//6 - ReadBuffer[12][13] - k, 1000
	constant_k[0] = ReadBuffer[12];
 8009008:	4b5c      	ldr	r3, [pc, #368]	@ (800917c <eeprom_r+0x2fc>)
 800900a:	7b1a      	ldrb	r2, [r3, #12]
 800900c:	2408      	movs	r4, #8
 800900e:	193b      	adds	r3, r7, r4
 8009010:	701a      	strb	r2, [r3, #0]
	constant_k[1] = ReadBuffer[13];
 8009012:	4b5a      	ldr	r3, [pc, #360]	@ (800917c <eeprom_r+0x2fc>)
 8009014:	7b5a      	ldrb	r2, [r3, #13]
 8009016:	193b      	adds	r3, r7, r4
 8009018:	705a      	strb	r2, [r3, #1]
	ck_r = byte_to_long(constant_k);
 800901a:	193b      	adds	r3, r7, r4
 800901c:	0018      	movs	r0, r3
 800901e:	f7fe ff07 	bl	8007e30 <byte_to_long>
 8009022:	0003      	movs	r3, r0
 8009024:	b29a      	uxth	r2, r3
 8009026:	4b5e      	ldr	r3, [pc, #376]	@ (80091a0 <eeprom_r+0x320>)
 8009028:	801a      	strh	r2, [r3, #0]
	memset(constant_k, 0, 2);
 800902a:	193b      	adds	r3, r7, r4
 800902c:	2202      	movs	r2, #2
 800902e:	2100      	movs	r1, #0
 8009030:	0018      	movs	r0, r3
 8009032:	f00f fac7 	bl	80185c4 <memset>

	//7 - ReadBuffer[14][15] - Sp_Co
	Sp_Co[0] = ReadBuffer[14];
 8009036:	4b51      	ldr	r3, [pc, #324]	@ (800917c <eeprom_r+0x2fc>)
 8009038:	7b9a      	ldrb	r2, [r3, #14]
 800903a:	1d3b      	adds	r3, r7, #4
 800903c:	701a      	strb	r2, [r3, #0]
	Sp_Co[1] = ReadBuffer[15];
 800903e:	4b4f      	ldr	r3, [pc, #316]	@ (800917c <eeprom_r+0x2fc>)
 8009040:	7bda      	ldrb	r2, [r3, #15]
 8009042:	1d3b      	adds	r3, r7, #4
 8009044:	705a      	strb	r2, [r3, #1]
	Speed_co = byte_to_long(Sp_Co);
 8009046:	1d3b      	adds	r3, r7, #4
 8009048:	0018      	movs	r0, r3
 800904a:	f7fe fef1 	bl	8007e30 <byte_to_long>
 800904e:	0003      	movs	r3, r0
 8009050:	b29a      	uxth	r2, r3
 8009052:	4b54      	ldr	r3, [pc, #336]	@ (80091a4 <eeprom_r+0x324>)
 8009054:	801a      	strh	r2, [r3, #0]
	//Speed_co -> 12km/h
	memset(Sp_Co, 0, 2);
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	2202      	movs	r2, #2
 800905a:	2100      	movs	r1, #0
 800905c:	0018      	movs	r0, r3
 800905e:	f00f fab1 	bl	80185c4 <memset>

	//8 - ReadBuffer[16][17] - Sp_Max
	Sp_Max[0] = ReadBuffer[16];
 8009062:	4b46      	ldr	r3, [pc, #280]	@ (800917c <eeprom_r+0x2fc>)
 8009064:	7c1a      	ldrb	r2, [r3, #16]
 8009066:	003b      	movs	r3, r7
 8009068:	701a      	strb	r2, [r3, #0]
	Sp_Max[1] = ReadBuffer[17];
 800906a:	4b44      	ldr	r3, [pc, #272]	@ (800917c <eeprom_r+0x2fc>)
 800906c:	7c5a      	ldrb	r2, [r3, #17]
 800906e:	003b      	movs	r3, r7
 8009070:	705a      	strb	r2, [r3, #1]
	Speed_max = byte_to_long(Sp_Max);
 8009072:	003b      	movs	r3, r7
 8009074:	0018      	movs	r0, r3
 8009076:	f7fe fedb 	bl	8007e30 <byte_to_long>
 800907a:	0003      	movs	r3, r0
 800907c:	b29a      	uxth	r2, r3
 800907e:	4b4a      	ldr	r3, [pc, #296]	@ (80091a8 <eeprom_r+0x328>)
 8009080:	801a      	strh	r2, [r3, #0]
	//Speed_max -> 150km/h
	memset(Sp_Max, 0, 2);
 8009082:	003b      	movs	r3, r7
 8009084:	2202      	movs	r2, #2
 8009086:	2100      	movs	r1, #0
 8009088:	0018      	movs	r0, r3
 800908a:	f00f fa9b 	bl	80185c4 <memset>

	//9 - ReadBuffer[18][19] - Type of Taxi
	Type[0] = ReadBuffer[18];
 800908e:	4b3b      	ldr	r3, [pc, #236]	@ (800917c <eeprom_r+0x2fc>)
 8009090:	7c9a      	ldrb	r2, [r3, #18]
 8009092:	4b46      	ldr	r3, [pc, #280]	@ (80091ac <eeprom_r+0x32c>)
 8009094:	701a      	strb	r2, [r3, #0]
	Type[1] = ReadBuffer[19];
 8009096:	4b39      	ldr	r3, [pc, #228]	@ (800917c <eeprom_r+0x2fc>)
 8009098:	7cda      	ldrb	r2, [r3, #19]
 800909a:	4b44      	ldr	r3, [pc, #272]	@ (80091ac <eeprom_r+0x32c>)
 800909c:	705a      	strb	r2, [r3, #1]
	//taxiType -> 00 01 02 03 -> init urban nt lantau
	//no need to transfer, will use in parameter reply
	//memset(Type, 0, 2);

	//10 - ReadBuffer[20][21][22][23]24][25][26][27][28][29] - plate no.
	plate_no[0] = ReadBuffer[20];
 800909e:	4b37      	ldr	r3, [pc, #220]	@ (800917c <eeprom_r+0x2fc>)
 80090a0:	7d1a      	ldrb	r2, [r3, #20]
 80090a2:	4b43      	ldr	r3, [pc, #268]	@ (80091b0 <eeprom_r+0x330>)
 80090a4:	701a      	strb	r2, [r3, #0]
	plate_no[1] = ReadBuffer[21];
 80090a6:	4b35      	ldr	r3, [pc, #212]	@ (800917c <eeprom_r+0x2fc>)
 80090a8:	7d5a      	ldrb	r2, [r3, #21]
 80090aa:	4b41      	ldr	r3, [pc, #260]	@ (80091b0 <eeprom_r+0x330>)
 80090ac:	705a      	strb	r2, [r3, #1]
	plate_no[2] = ReadBuffer[22];
 80090ae:	4b33      	ldr	r3, [pc, #204]	@ (800917c <eeprom_r+0x2fc>)
 80090b0:	7d9a      	ldrb	r2, [r3, #22]
 80090b2:	4b3f      	ldr	r3, [pc, #252]	@ (80091b0 <eeprom_r+0x330>)
 80090b4:	709a      	strb	r2, [r3, #2]
	plate_no[3] = ReadBuffer[23];
 80090b6:	4b31      	ldr	r3, [pc, #196]	@ (800917c <eeprom_r+0x2fc>)
 80090b8:	7dda      	ldrb	r2, [r3, #23]
 80090ba:	4b3d      	ldr	r3, [pc, #244]	@ (80091b0 <eeprom_r+0x330>)
 80090bc:	70da      	strb	r2, [r3, #3]
	plate_no[4] = ReadBuffer[24];
 80090be:	4b2f      	ldr	r3, [pc, #188]	@ (800917c <eeprom_r+0x2fc>)
 80090c0:	7e1a      	ldrb	r2, [r3, #24]
 80090c2:	4b3b      	ldr	r3, [pc, #236]	@ (80091b0 <eeprom_r+0x330>)
 80090c4:	711a      	strb	r2, [r3, #4]
	plate_no[5] = ReadBuffer[25];
 80090c6:	4b2d      	ldr	r3, [pc, #180]	@ (800917c <eeprom_r+0x2fc>)
 80090c8:	7e5a      	ldrb	r2, [r3, #25]
 80090ca:	4b39      	ldr	r3, [pc, #228]	@ (80091b0 <eeprom_r+0x330>)
 80090cc:	715a      	strb	r2, [r3, #5]
	plate_no[6] = ReadBuffer[26];
 80090ce:	4b2b      	ldr	r3, [pc, #172]	@ (800917c <eeprom_r+0x2fc>)
 80090d0:	7e9a      	ldrb	r2, [r3, #26]
 80090d2:	4b37      	ldr	r3, [pc, #220]	@ (80091b0 <eeprom_r+0x330>)
 80090d4:	719a      	strb	r2, [r3, #6]
	plate_no[7] = ReadBuffer[27];
 80090d6:	4b29      	ldr	r3, [pc, #164]	@ (800917c <eeprom_r+0x2fc>)
 80090d8:	7eda      	ldrb	r2, [r3, #27]
 80090da:	4b35      	ldr	r3, [pc, #212]	@ (80091b0 <eeprom_r+0x330>)
 80090dc:	71da      	strb	r2, [r3, #7]
	plate_no[8] = ReadBuffer[28];
 80090de:	4b27      	ldr	r3, [pc, #156]	@ (800917c <eeprom_r+0x2fc>)
 80090e0:	7f1a      	ldrb	r2, [r3, #28]
 80090e2:	4b33      	ldr	r3, [pc, #204]	@ (80091b0 <eeprom_r+0x330>)
 80090e4:	721a      	strb	r2, [r3, #8]
	plate_no[9] = ReadBuffer[29];
 80090e6:	4b25      	ldr	r3, [pc, #148]	@ (800917c <eeprom_r+0x2fc>)
 80090e8:	7f5a      	ldrb	r2, [r3, #29]
 80090ea:	4b31      	ldr	r3, [pc, #196]	@ (80091b0 <eeprom_r+0x330>)
 80090ec:	725a      	strb	r2, [r3, #9]
	//QR code
	//need to remove space - 0x20 for QR CODE use
	//new variable plate_qr[] = {0x5A, 0xA5, length, 0x82, 0x10, 0x80, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFF, 0xFF};
	//check if 0x20
	//then calculate length
	plate_qr[6] = ReadBuffer[24];
 80090ee:	4b23      	ldr	r3, [pc, #140]	@ (800917c <eeprom_r+0x2fc>)
 80090f0:	7e1a      	ldrb	r2, [r3, #24]
 80090f2:	4b30      	ldr	r3, [pc, #192]	@ (80091b4 <eeprom_r+0x334>)
 80090f4:	719a      	strb	r2, [r3, #6]
	plate_qr[7] = ReadBuffer[25];
 80090f6:	4b21      	ldr	r3, [pc, #132]	@ (800917c <eeprom_r+0x2fc>)
 80090f8:	7e5a      	ldrb	r2, [r3, #25]
 80090fa:	4b2e      	ldr	r3, [pc, #184]	@ (80091b4 <eeprom_r+0x334>)
 80090fc:	71da      	strb	r2, [r3, #7]
	plate_qr[8] = ReadBuffer[26];
 80090fe:	4b1f      	ldr	r3, [pc, #124]	@ (800917c <eeprom_r+0x2fc>)
 8009100:	7e9a      	ldrb	r2, [r3, #26]
 8009102:	4b2c      	ldr	r3, [pc, #176]	@ (80091b4 <eeprom_r+0x334>)
 8009104:	721a      	strb	r2, [r3, #8]
	plate_qr[9] = ReadBuffer[27];
 8009106:	4b1d      	ldr	r3, [pc, #116]	@ (800917c <eeprom_r+0x2fc>)
 8009108:	7eda      	ldrb	r2, [r3, #27]
 800910a:	4b2a      	ldr	r3, [pc, #168]	@ (80091b4 <eeprom_r+0x334>)
 800910c:	725a      	strb	r2, [r3, #9]
	plate_qr[10] = ReadBuffer[28];
 800910e:	4b1b      	ldr	r3, [pc, #108]	@ (800917c <eeprom_r+0x2fc>)
 8009110:	7f1a      	ldrb	r2, [r3, #28]
 8009112:	4b28      	ldr	r3, [pc, #160]	@ (80091b4 <eeprom_r+0x334>)
 8009114:	729a      	strb	r2, [r3, #10]
	plate_qr[11] = ReadBuffer[29];
 8009116:	4b19      	ldr	r3, [pc, #100]	@ (800917c <eeprom_r+0x2fc>)
 8009118:	7f5a      	ldrb	r2, [r3, #29]
 800911a:	4b26      	ldr	r3, [pc, #152]	@ (80091b4 <eeprom_r+0x334>)
 800911c:	72da      	strb	r2, [r3, #11]

	//printer -> print the receipt / tbox will use set plate no. in web config
	plate[13] = plate_no[9];
 800911e:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <eeprom_r+0x330>)
 8009120:	7a5a      	ldrb	r2, [r3, #9]
 8009122:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <eeprom_r+0x338>)
 8009124:	735a      	strb	r2, [r3, #13]
	plate[12] = plate_no[8];
 8009126:	4b22      	ldr	r3, [pc, #136]	@ (80091b0 <eeprom_r+0x330>)
 8009128:	7a1a      	ldrb	r2, [r3, #8]
 800912a:	4b23      	ldr	r3, [pc, #140]	@ (80091b8 <eeprom_r+0x338>)
 800912c:	731a      	strb	r2, [r3, #12]
	plate[11] = plate_no[7];
 800912e:	4b20      	ldr	r3, [pc, #128]	@ (80091b0 <eeprom_r+0x330>)
 8009130:	79da      	ldrb	r2, [r3, #7]
 8009132:	4b21      	ldr	r3, [pc, #132]	@ (80091b8 <eeprom_r+0x338>)
 8009134:	72da      	strb	r2, [r3, #11]
	plate[10] = plate_no[6];
 8009136:	4b1e      	ldr	r3, [pc, #120]	@ (80091b0 <eeprom_r+0x330>)
 8009138:	799a      	ldrb	r2, [r3, #6]
 800913a:	4b1f      	ldr	r3, [pc, #124]	@ (80091b8 <eeprom_r+0x338>)
 800913c:	729a      	strb	r2, [r3, #10]
	plate[9] = plate_no[5];
 800913e:	4b1c      	ldr	r3, [pc, #112]	@ (80091b0 <eeprom_r+0x330>)
 8009140:	795a      	ldrb	r2, [r3, #5]
 8009142:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <eeprom_r+0x338>)
 8009144:	725a      	strb	r2, [r3, #9]
	plate[8] = plate_no[4];
 8009146:	4b1a      	ldr	r3, [pc, #104]	@ (80091b0 <eeprom_r+0x330>)
 8009148:	791a      	ldrb	r2, [r3, #4]
 800914a:	4b1b      	ldr	r3, [pc, #108]	@ (80091b8 <eeprom_r+0x338>)
 800914c:	721a      	strb	r2, [r3, #8]
	plate[7] = plate_no[3];
 800914e:	4b18      	ldr	r3, [pc, #96]	@ (80091b0 <eeprom_r+0x330>)
 8009150:	78da      	ldrb	r2, [r3, #3]
 8009152:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <eeprom_r+0x338>)
 8009154:	71da      	strb	r2, [r3, #7]
	plate[6] = plate_no[2];
 8009156:	4b16      	ldr	r3, [pc, #88]	@ (80091b0 <eeprom_r+0x330>)
 8009158:	789a      	ldrb	r2, [r3, #2]
 800915a:	4b17      	ldr	r3, [pc, #92]	@ (80091b8 <eeprom_r+0x338>)
 800915c:	719a      	strb	r2, [r3, #6]
	plate[5] = plate_no[1];
 800915e:	4b14      	ldr	r3, [pc, #80]	@ (80091b0 <eeprom_r+0x330>)
 8009160:	785a      	ldrb	r2, [r3, #1]
 8009162:	4b15      	ldr	r3, [pc, #84]	@ (80091b8 <eeprom_r+0x338>)
 8009164:	715a      	strb	r2, [r3, #5]
	plate[4] = plate_no[0];
 8009166:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <eeprom_r+0x330>)
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	4b13      	ldr	r3, [pc, #76]	@ (80091b8 <eeprom_r+0x338>)
 800916c:	711a      	strb	r2, [r3, #4]
	//parameter reply -> directly reply plate_no[] in Replybuffer[]
	//memset(plate_no, 0, 10);

	//16 - stop bytes FF
}
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b009      	add	sp, #36	@ 0x24
 8009174:	bd90      	pop	{r4, r7, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	20000570 	.word	0x20000570
 800917c:	20000b8c 	.word	0x20000b8c
 8009180:	41200000 	.word	0x41200000
 8009184:	20000cb4 	.word	0x20000cb4
 8009188:	20000cb8 	.word	0x20000cb8
 800918c:	42c80000 	.word	0x42c80000
 8009190:	20000cbc 	.word	0x20000cbc
 8009194:	20000cc8 	.word	0x20000cc8
 8009198:	20000cc0 	.word	0x20000cc0
 800919c:	20000cc4 	.word	0x20000cc4
 80091a0:	20000ccc 	.word	0x20000ccc
 80091a4:	20000240 	.word	0x20000240
 80091a8:	20000242 	.word	0x20000242
 80091ac:	20000c04 	.word	0x20000c04
 80091b0:	20000c08 	.word	0x20000c08
 80091b4:	20000098 	.word	0x20000098
 80091b8:	2000019c 	.word	0x2000019c

080091bc <rtc_set>:

//set time & date
void rtc_set(void)
{
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b091      	sub	sp, #68	@ 0x44
 80091c0:	af10      	add	r7, sp, #64	@ 0x40
	//read from eeprom for first time set

	PCF2129_Init(hi2c1, RTC_WRITE_ADDR);
 80091c2:	4c17      	ldr	r4, [pc, #92]	@ (8009220 <rtc_set+0x64>)
 80091c4:	23a2      	movs	r3, #162	@ 0xa2
 80091c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091c8:	466b      	mov	r3, sp
 80091ca:	0018      	movs	r0, r3
 80091cc:	0023      	movs	r3, r4
 80091ce:	3310      	adds	r3, #16
 80091d0:	223c      	movs	r2, #60	@ 0x3c
 80091d2:	0019      	movs	r1, r3
 80091d4:	f00f fa2a 	bl	801862c <memcpy>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	6861      	ldr	r1, [r4, #4]
 80091dc:	68a2      	ldr	r2, [r4, #8]
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	f003 fa40 	bl	800c664 <PCF2129_Init>
	PCF2129_configure();                         ///Set 24hr Format
 80091e4:	f003 fa60 	bl	800c6a8 <PCF2129_configure>

	PCF2129_setDate(ReadBuffer[30], ReadBuffer[31], ReadBuffer[32], ReadBuffer[33], ReadBuffer[34], ReadBuffer[35]);
 80091e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009224 <rtc_set+0x68>)
 80091ea:	7f9b      	ldrb	r3, [r3, #30]
 80091ec:	001e      	movs	r6, r3
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <rtc_set+0x68>)
 80091f0:	7fd9      	ldrb	r1, [r3, #31]
 80091f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009224 <rtc_set+0x68>)
 80091f4:	2220      	movs	r2, #32
 80091f6:	5c98      	ldrb	r0, [r3, r2]
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <rtc_set+0x68>)
 80091fa:	2221      	movs	r2, #33	@ 0x21
 80091fc:	5c9c      	ldrb	r4, [r3, r2]
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <rtc_set+0x68>)
 8009200:	2222      	movs	r2, #34	@ 0x22
 8009202:	5c9b      	ldrb	r3, [r3, r2]
 8009204:	4a07      	ldr	r2, [pc, #28]	@ (8009224 <rtc_set+0x68>)
 8009206:	2523      	movs	r5, #35	@ 0x23
 8009208:	5d52      	ldrb	r2, [r2, r5]
 800920a:	9201      	str	r2, [sp, #4]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	0023      	movs	r3, r4
 8009210:	0002      	movs	r2, r0
 8009212:	0030      	movs	r0, r6
 8009214:	f003 fb16 	bl	800c844 <PCF2129_setDate>
}
 8009218:	46c0      	nop			@ (mov r8, r8)
 800921a:	46bd      	mov	sp, r7
 800921c:	b001      	add	sp, #4
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	20000524 	.word	0x20000524
 8009224:	20000b8c 	.word	0x20000b8c

08009228 <time_update>:

//read time & date
//transfer to uart
void time_update(void)
{
 8009228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922a:	46de      	mov	lr, fp
 800922c:	4657      	mov	r7, sl
 800922e:	464e      	mov	r6, r9
 8009230:	4645      	mov	r5, r8
 8009232:	b5e0      	push	{r5, r6, r7, lr}
 8009234:	4cf6      	ldr	r4, [pc, #984]	@ (8009610 <time_update+0x3e8>)
 8009236:	44a5      	add	sp, r4
 8009238:	af0a      	add	r7, sp, #40	@ 0x28
	unsigned char r_buffer[9];
	unsigned char u_buffer[6];

	RTC_date = PCF2129_getDate();
 800923a:	4cf6      	ldr	r4, [pc, #984]	@ (8009614 <time_update+0x3ec>)
 800923c:	2510      	movs	r5, #16
 800923e:	197b      	adds	r3, r7, r5
 8009240:	0018      	movs	r0, r3
 8009242:	f003 fa39 	bl	800c6b8 <PCF2129_getDate>
 8009246:	4bf4      	ldr	r3, [pc, #976]	@ (8009618 <time_update+0x3f0>)
 8009248:	2286      	movs	r2, #134	@ 0x86
 800924a:	0092      	lsls	r2, r2, #2
 800924c:	189b      	adds	r3, r3, r2
 800924e:	2210      	movs	r2, #16
 8009250:	4694      	mov	ip, r2
 8009252:	44bc      	add	ip, r7
 8009254:	4463      	add	r3, ip
 8009256:	0020      	movs	r0, r4
 8009258:	0019      	movs	r1, r3
 800925a:	2358      	movs	r3, #88	@ 0x58
 800925c:	001a      	movs	r2, r3
 800925e:	f00f f9e5 	bl	801862c <memcpy>

	year = RTC_date.date.y;
 8009262:	4bec      	ldr	r3, [pc, #944]	@ (8009614 <time_update+0x3ec>)
 8009264:	224d      	movs	r2, #77	@ 0x4d
 8009266:	5c9b      	ldrb	r3, [r3, r2]
 8009268:	001a      	movs	r2, r3
 800926a:	4bec      	ldr	r3, [pc, #944]	@ (800961c <time_update+0x3f4>)
 800926c:	801a      	strh	r2, [r3, #0]
	r_buffer[0] = (uint8_t)(year & 0xFF);
 800926e:	4beb      	ldr	r3, [pc, #940]	@ (800961c <time_update+0x3f4>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b2da      	uxtb	r2, r3
 8009274:	2182      	movs	r1, #130	@ 0x82
 8009276:	0089      	lsls	r1, r1, #2
 8009278:	0028      	movs	r0, r5
 800927a:	180b      	adds	r3, r1, r0
 800927c:	19db      	adds	r3, r3, r7
 800927e:	701a      	strb	r2, [r3, #0]

	month = RTC_date.date.m;
 8009280:	4be4      	ldr	r3, [pc, #912]	@ (8009614 <time_update+0x3ec>)
 8009282:	224e      	movs	r2, #78	@ 0x4e
 8009284:	5c9b      	ldrb	r3, [r3, r2]
 8009286:	001a      	movs	r2, r3
 8009288:	4be5      	ldr	r3, [pc, #916]	@ (8009620 <time_update+0x3f8>)
 800928a:	801a      	strh	r2, [r3, #0]
	r_buffer[1] = (uint8_t)(month & 0xFF);
 800928c:	4be4      	ldr	r3, [pc, #912]	@ (8009620 <time_update+0x3f8>)
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	180b      	adds	r3, r1, r0
 8009294:	19db      	adds	r3, r3, r7
 8009296:	705a      	strb	r2, [r3, #1]

	day = RTC_date.date.d;
 8009298:	4bde      	ldr	r3, [pc, #888]	@ (8009614 <time_update+0x3ec>)
 800929a:	224f      	movs	r2, #79	@ 0x4f
 800929c:	5c9b      	ldrb	r3, [r3, r2]
 800929e:	001a      	movs	r2, r3
 80092a0:	4be0      	ldr	r3, [pc, #896]	@ (8009624 <time_update+0x3fc>)
 80092a2:	801a      	strh	r2, [r3, #0]
	r_buffer[2] = (uint8_t)(day & 0xFF);
 80092a4:	4bdf      	ldr	r3, [pc, #892]	@ (8009624 <time_update+0x3fc>)
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	180b      	adds	r3, r1, r0
 80092ac:	19db      	adds	r3, r3, r7
 80092ae:	709a      	strb	r2, [r3, #2]

//	weekday = RTC_date.date.w;
//	buffer[3] = (uint8_t)(weekday & 0xFF);

	hour = RTC_date.date.hh;
 80092b0:	4bd8      	ldr	r3, [pc, #864]	@ (8009614 <time_update+0x3ec>)
 80092b2:	2251      	movs	r2, #81	@ 0x51
 80092b4:	5c9b      	ldrb	r3, [r3, r2]
 80092b6:	001a      	movs	r2, r3
 80092b8:	4bdb      	ldr	r3, [pc, #876]	@ (8009628 <time_update+0x400>)
 80092ba:	801a      	strh	r2, [r3, #0]
	r_buffer[3] = (uint8_t)(hour & 0xFF);
 80092bc:	4bda      	ldr	r3, [pc, #872]	@ (8009628 <time_update+0x400>)
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	180b      	adds	r3, r1, r0
 80092c4:	19db      	adds	r3, r3, r7
 80092c6:	70da      	strb	r2, [r3, #3]

	minute = RTC_date.date.mm;
 80092c8:	4bd2      	ldr	r3, [pc, #840]	@ (8009614 <time_update+0x3ec>)
 80092ca:	2252      	movs	r2, #82	@ 0x52
 80092cc:	5c9b      	ldrb	r3, [r3, r2]
 80092ce:	001a      	movs	r2, r3
 80092d0:	4bd6      	ldr	r3, [pc, #856]	@ (800962c <time_update+0x404>)
 80092d2:	801a      	strh	r2, [r3, #0]
	r_buffer[4] = (uint8_t)(minute & 0xFF);
 80092d4:	4bd5      	ldr	r3, [pc, #852]	@ (800962c <time_update+0x404>)
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	180b      	adds	r3, r1, r0
 80092dc:	19db      	adds	r3, r3, r7
 80092de:	711a      	strb	r2, [r3, #4]

	second = RTC_date.date.ss;
 80092e0:	4bcc      	ldr	r3, [pc, #816]	@ (8009614 <time_update+0x3ec>)
 80092e2:	2253      	movs	r2, #83	@ 0x53
 80092e4:	5c9b      	ldrb	r3, [r3, r2]
 80092e6:	001a      	movs	r2, r3
 80092e8:	4bd1      	ldr	r3, [pc, #836]	@ (8009630 <time_update+0x408>)
 80092ea:	801a      	strh	r2, [r3, #0]
	r_buffer[5] = (uint8_t)(second & 0xFF);
 80092ec:	4bd0      	ldr	r3, [pc, #832]	@ (8009630 <time_update+0x408>)
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	180b      	adds	r3, r1, r0
 80092f4:	19db      	adds	r3, r3, r7
 80092f6:	715a      	strb	r2, [r3, #5]

	ctrl_1 = PCF2129_read(PCF2129_REG_CONTROL1);
 80092f8:	2000      	movs	r0, #0
 80092fa:	f003 faff 	bl	800c8fc <PCF2129_read>
 80092fe:	0003      	movs	r3, r0
 8009300:	001a      	movs	r2, r3
 8009302:	4bcc      	ldr	r3, [pc, #816]	@ (8009634 <time_update+0x40c>)
 8009304:	701a      	strb	r2, [r3, #0]
	ctrl_2 = PCF2129_read(PCF2129_REG_CONTROL2);
 8009306:	2001      	movs	r0, #1
 8009308:	f003 faf8 	bl	800c8fc <PCF2129_read>
 800930c:	0003      	movs	r3, r0
 800930e:	001a      	movs	r2, r3
 8009310:	4bc9      	ldr	r3, [pc, #804]	@ (8009638 <time_update+0x410>)
 8009312:	701a      	strb	r2, [r3, #0]
	ctrl_3 = PCF2129_read(PCF2129_REG_CONTROL3);
 8009314:	2002      	movs	r0, #2
 8009316:	f003 faf1 	bl	800c8fc <PCF2129_read>
 800931a:	0003      	movs	r3, r0
 800931c:	001a      	movs	r2, r3
 800931e:	4bc7      	ldr	r3, [pc, #796]	@ (800963c <time_update+0x414>)
 8009320:	701a      	strb	r2, [r3, #0]

	hh = PCF2129_read(PCF2129_REG_ALARM_HOUR);
 8009322:	200c      	movs	r0, #12
 8009324:	f003 faea 	bl	800c8fc <PCF2129_read>
 8009328:	0003      	movs	r3, r0
 800932a:	001a      	movs	r2, r3
 800932c:	4bc4      	ldr	r3, [pc, #784]	@ (8009640 <time_update+0x418>)
 800932e:	701a      	strb	r2, [r3, #0]
	mm = PCF2129_read(PCF2129_REG_ALARM_MINUTE);
 8009330:	200b      	movs	r0, #11
 8009332:	f003 fae3 	bl	800c8fc <PCF2129_read>
 8009336:	0003      	movs	r3, r0
 8009338:	001a      	movs	r2, r3
 800933a:	4bc2      	ldr	r3, [pc, #776]	@ (8009644 <time_update+0x41c>)
 800933c:	701a      	strb	r2, [r3, #0]
	ss = PCF2129_read(PCF2129_REG_ALARM_SECOND);
 800933e:	200a      	movs	r0, #10
 8009340:	f003 fadc 	bl	800c8fc <PCF2129_read>
 8009344:	0003      	movs	r3, r0
 8009346:	001a      	movs	r2, r3
 8009348:	4bbf      	ldr	r3, [pc, #764]	@ (8009648 <time_update+0x420>)
 800934a:	701a      	strb	r2, [r3, #0]

	PCF2129_write(PCF2129_REG_CONTROL1, 0x00);
 800934c:	2100      	movs	r1, #0
 800934e:	2000      	movs	r0, #0
 8009350:	f003 fafc 	bl	800c94c <PCF2129_write>
//	PCF2129_write(PCF2129_REG_CONTROL2, 0x00);  //to unlock
	PCF2129_write(PCF2129_REG_CONTROL3, 0x00);
 8009354:	2100      	movs	r1, #0
 8009356:	2002      	movs	r0, #2
 8009358:	f003 faf8 	bl	800c94c <PCF2129_write>

	//check AIE if power off reset all flags
	if ((ctrl_2 & 0x02) == 0x02)
 800935c:	4bb6      	ldr	r3, [pc, #728]	@ (8009638 <time_update+0x410>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	001a      	movs	r2, r3
 8009362:	2302      	movs	r3, #2
 8009364:	4013      	ands	r3, r2
 8009366:	d00d      	beq.n	8009384 <time_update+0x15c>
	{
		//if AIE set, continue anti-tamper mode, only show unlock time
		flag_alarm_clear = TRUE;
 8009368:	4bb8      	ldr	r3, [pc, #736]	@ (800964c <time_update+0x424>)
 800936a:	2201      	movs	r2, #1
 800936c:	701a      	strb	r2, [r3, #0]
		EventDebugLog("AIE if 0x02 Before Flag_Protect");
 800936e:	4bb8      	ldr	r3, [pc, #736]	@ (8009650 <time_update+0x428>)
 8009370:	0018      	movs	r0, r3
 8009372:	f000 fc23 	bl	8009bbc <EventDebugLog>
		Flag_Protect = TRUE;
 8009376:	4bb7      	ldr	r3, [pc, #732]	@ (8009654 <time_update+0x42c>)
 8009378:	2201      	movs	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
		EventDebugLog("AIE if 0x02 After Flag_Protect");
 800937c:	4bb6      	ldr	r3, [pc, #728]	@ (8009658 <time_update+0x430>)
 800937e:	0018      	movs	r0, r3
 8009380:	f000 fc1c 	bl	8009bbc <EventDebugLog>
	}

	//Flag_set_alarm_rtc - this flag will set after 30s alarm, this if will calculate 1 hour count down
	if(Flag_set_alarm_rtc)
 8009384:	4bb5      	ldr	r3, [pc, #724]	@ (800965c <time_update+0x434>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d100      	bne.n	800938e <time_update+0x166>
 800938c:	e207      	b.n	800979e <time_update+0x576>
	{
		Flag_set_alarm_rtc = FALSE;
 800938e:	4bb3      	ldr	r3, [pc, #716]	@ (800965c <time_update+0x434>)
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
		//current time to unix TimeStamp
		stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 8009394:	4b9f      	ldr	r3, [pc, #636]	@ (8009614 <time_update+0x3ec>)
 8009396:	224d      	movs	r2, #77	@ 0x4d
 8009398:	5c9b      	ldrb	r3, [r3, r2]
 800939a:	0018      	movs	r0, r3
 800939c:	f003 fb17 	bl	800c9ce <bcdToDec>
 80093a0:	0003      	movs	r3, r0
 80093a2:	22fa      	movs	r2, #250	@ 0xfa
 80093a4:	00d2      	lsls	r2, r2, #3
 80093a6:	4694      	mov	ip, r2
 80093a8:	4463      	add	r3, ip
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	4bac      	ldr	r3, [pc, #688]	@ (8009660 <time_update+0x438>)
 80093ae:	801a      	strh	r2, [r3, #0]
		stCurrentTime.month = bcdToDec(RTC_date.date.m);
 80093b0:	4b98      	ldr	r3, [pc, #608]	@ (8009614 <time_update+0x3ec>)
 80093b2:	224e      	movs	r2, #78	@ 0x4e
 80093b4:	5c9b      	ldrb	r3, [r3, r2]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f003 fb09 	bl	800c9ce <bcdToDec>
 80093bc:	0003      	movs	r3, r0
 80093be:	001a      	movs	r2, r3
 80093c0:	4ba7      	ldr	r3, [pc, #668]	@ (8009660 <time_update+0x438>)
 80093c2:	709a      	strb	r2, [r3, #2]
		stCurrentTime.date = bcdToDec(RTC_date.date.d);
 80093c4:	4b93      	ldr	r3, [pc, #588]	@ (8009614 <time_update+0x3ec>)
 80093c6:	224f      	movs	r2, #79	@ 0x4f
 80093c8:	5c9b      	ldrb	r3, [r3, r2]
 80093ca:	0018      	movs	r0, r3
 80093cc:	f003 faff 	bl	800c9ce <bcdToDec>
 80093d0:	0003      	movs	r3, r0
 80093d2:	001a      	movs	r2, r3
 80093d4:	4ba2      	ldr	r3, [pc, #648]	@ (8009660 <time_update+0x438>)
 80093d6:	70da      	strb	r2, [r3, #3]
		stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 80093d8:	4b8e      	ldr	r3, [pc, #568]	@ (8009614 <time_update+0x3ec>)
 80093da:	2251      	movs	r2, #81	@ 0x51
 80093dc:	5c9b      	ldrb	r3, [r3, r2]
 80093de:	0018      	movs	r0, r3
 80093e0:	f003 faf5 	bl	800c9ce <bcdToDec>
 80093e4:	0003      	movs	r3, r0
 80093e6:	001a      	movs	r2, r3
 80093e8:	4b9d      	ldr	r3, [pc, #628]	@ (8009660 <time_update+0x438>)
 80093ea:	711a      	strb	r2, [r3, #4]
		stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 80093ec:	4b89      	ldr	r3, [pc, #548]	@ (8009614 <time_update+0x3ec>)
 80093ee:	2252      	movs	r2, #82	@ 0x52
 80093f0:	5c9b      	ldrb	r3, [r3, r2]
 80093f2:	0018      	movs	r0, r3
 80093f4:	f003 faeb 	bl	800c9ce <bcdToDec>
 80093f8:	0003      	movs	r3, r0
 80093fa:	001a      	movs	r2, r3
 80093fc:	4b98      	ldr	r3, [pc, #608]	@ (8009660 <time_update+0x438>)
 80093fe:	715a      	strb	r2, [r3, #5]
		stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 8009400:	4b84      	ldr	r3, [pc, #528]	@ (8009614 <time_update+0x3ec>)
 8009402:	2253      	movs	r2, #83	@ 0x53
 8009404:	5c9b      	ldrb	r3, [r3, r2]
 8009406:	0018      	movs	r0, r3
 8009408:	f003 fae1 	bl	800c9ce <bcdToDec>
 800940c:	0003      	movs	r3, r0
 800940e:	001a      	movs	r2, r3
 8009410:	4b93      	ldr	r3, [pc, #588]	@ (8009660 <time_update+0x438>)
 8009412:	719a      	strb	r2, [r3, #6]

		u32UnixTimeStamp = utcToUnix(&stCurrentTime);
 8009414:	4b92      	ldr	r3, [pc, #584]	@ (8009660 <time_update+0x438>)
 8009416:	0018      	movs	r0, r3
 8009418:	f003 fc60 	bl	800ccdc <utcToUnix>
 800941c:	0002      	movs	r2, r0
 800941e:	4b91      	ldr	r3, [pc, #580]	@ (8009664 <time_update+0x43c>)
 8009420:	601a      	str	r2, [r3, #0]

		//calculate alarm time - TimeStamp + alarm time(1 hour)
		u32UnixTimeStamp += 3600; //test 1 min (60); //5 mins (300) //set 3600 for 1 hour
 8009422:	4b90      	ldr	r3, [pc, #576]	@ (8009664 <time_update+0x43c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	22e1      	movs	r2, #225	@ 0xe1
 8009428:	0112      	lsls	r2, r2, #4
 800942a:	189a      	adds	r2, r3, r2
 800942c:	4b8d      	ldr	r3, [pc, #564]	@ (8009664 <time_update+0x43c>)
 800942e:	601a      	str	r2, [r3, #0]

		//write to pcf2129
		unixToUtc(u32UnixTimeStamp);
 8009430:	4b8c      	ldr	r3, [pc, #560]	@ (8009664 <time_update+0x43c>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	2510      	movs	r5, #16
 8009436:	197b      	adds	r3, r7, r5
 8009438:	0011      	movs	r1, r2
 800943a:	0018      	movs	r0, r3
 800943c:	f003 fb00 	bl	800ca40 <unixToUtc>

		//change to bcd format
		u_buffer[0] = decToBcd((UtcTime.year-2000));
 8009440:	4b89      	ldr	r3, [pc, #548]	@ (8009668 <time_update+0x440>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	3330      	adds	r3, #48	@ 0x30
 8009446:	b2db      	uxtb	r3, r3
 8009448:	0018      	movs	r0, r3
 800944a:	f003 fada 	bl	800ca02 <decToBcd>
 800944e:	0003      	movs	r3, r0
 8009450:	001a      	movs	r2, r3
 8009452:	2480      	movs	r4, #128	@ 0x80
 8009454:	00a4      	lsls	r4, r4, #2
 8009456:	1963      	adds	r3, r4, r5
 8009458:	19db      	adds	r3, r3, r7
 800945a:	701a      	strb	r2, [r3, #0]
		u_buffer[1] = decToBcd(UtcTime.month);
 800945c:	4b82      	ldr	r3, [pc, #520]	@ (8009668 <time_update+0x440>)
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	0018      	movs	r0, r3
 8009462:	f003 face 	bl	800ca02 <decToBcd>
 8009466:	0003      	movs	r3, r0
 8009468:	001a      	movs	r2, r3
 800946a:	1963      	adds	r3, r4, r5
 800946c:	19db      	adds	r3, r3, r7
 800946e:	705a      	strb	r2, [r3, #1]
		u_buffer[2] = decToBcd(UtcTime.date);
 8009470:	4b7d      	ldr	r3, [pc, #500]	@ (8009668 <time_update+0x440>)
 8009472:	789b      	ldrb	r3, [r3, #2]
 8009474:	0018      	movs	r0, r3
 8009476:	f003 fac4 	bl	800ca02 <decToBcd>
 800947a:	0003      	movs	r3, r0
 800947c:	001a      	movs	r2, r3
 800947e:	1963      	adds	r3, r4, r5
 8009480:	19db      	adds	r3, r3, r7
 8009482:	709a      	strb	r2, [r3, #2]
		u_buffer[3] = decToBcd(UtcTime.hour);
 8009484:	4b78      	ldr	r3, [pc, #480]	@ (8009668 <time_update+0x440>)
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	0018      	movs	r0, r3
 800948a:	f003 faba 	bl	800ca02 <decToBcd>
 800948e:	0003      	movs	r3, r0
 8009490:	001a      	movs	r2, r3
 8009492:	1963      	adds	r3, r4, r5
 8009494:	19db      	adds	r3, r3, r7
 8009496:	70da      	strb	r2, [r3, #3]
		u_buffer[4] = decToBcd(UtcTime.minute);
 8009498:	4b73      	ldr	r3, [pc, #460]	@ (8009668 <time_update+0x440>)
 800949a:	791b      	ldrb	r3, [r3, #4]
 800949c:	0018      	movs	r0, r3
 800949e:	f003 fab0 	bl	800ca02 <decToBcd>
 80094a2:	0003      	movs	r3, r0
 80094a4:	001a      	movs	r2, r3
 80094a6:	1963      	adds	r3, r4, r5
 80094a8:	19db      	adds	r3, r3, r7
 80094aa:	711a      	strb	r2, [r3, #4]
		u_buffer[5] = decToBcd(UtcTime.second);
 80094ac:	4b6e      	ldr	r3, [pc, #440]	@ (8009668 <time_update+0x440>)
 80094ae:	795b      	ldrb	r3, [r3, #5]
 80094b0:	0018      	movs	r0, r3
 80094b2:	f003 faa6 	bl	800ca02 <decToBcd>
 80094b6:	0003      	movs	r3, r0
 80094b8:	001a      	movs	r2, r3
 80094ba:	1963      	adds	r3, r4, r5
 80094bc:	19db      	adds	r3, r3, r7
 80094be:	715a      	strb	r2, [r3, #5]

		//Leo&Edwin: Add log to SD card to record down the things to write in RCF2129.
				//log==> current time+setalarm+ u_buffer[3]:u_buffer[4]:u_buffer[5]
		fresult = f_open(&fil, "LockLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80094c0:	496a      	ldr	r1, [pc, #424]	@ (800966c <time_update+0x444>)
 80094c2:	4b6b      	ldr	r3, [pc, #428]	@ (8009670 <time_update+0x448>)
 80094c4:	2203      	movs	r2, #3
 80094c6:	0018      	movs	r0, r3
 80094c8:	f00e f8a8 	bl	801761c <f_open>
 80094cc:	0003      	movs	r3, r0
 80094ce:	001a      	movs	r2, r3
 80094d0:	4b68      	ldr	r3, [pc, #416]	@ (8009674 <time_update+0x44c>)
 80094d2:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_NO_FILE) {
 80094d4:	4b67      	ldr	r3, [pc, #412]	@ (8009674 <time_update+0x44c>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d124      	bne.n	8009526 <time_update+0x2fe>
		    // Create the file
		    fresult = f_open(&fil, "LockLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80094dc:	4963      	ldr	r1, [pc, #396]	@ (800966c <time_update+0x444>)
 80094de:	4b64      	ldr	r3, [pc, #400]	@ (8009670 <time_update+0x448>)
 80094e0:	220a      	movs	r2, #10
 80094e2:	0018      	movs	r0, r3
 80094e4:	f00e f89a 	bl	801761c <f_open>
 80094e8:	0003      	movs	r3, r0
 80094ea:	001a      	movs	r2, r3
 80094ec:	4b61      	ldr	r3, [pc, #388]	@ (8009674 <time_update+0x44c>)
 80094ee:	701a      	strb	r2, [r3, #0]

		    // Check if the file was created successfully
		    if (fresult == FR_OK) {
 80094f0:	4b60      	ldr	r3, [pc, #384]	@ (8009674 <time_update+0x44c>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d116      	bne.n	8009526 <time_update+0x2fe>
		        // Optionally write initial data to the file
		        const char *initialData = "Smart Taximeter Lock Log \n";
 80094f8:	4b5f      	ldr	r3, [pc, #380]	@ (8009678 <time_update+0x450>)
 80094fa:	2485      	movs	r4, #133	@ 0x85
 80094fc:	00a4      	lsls	r4, r4, #2
 80094fe:	1962      	adds	r2, r4, r5
 8009500:	19d2      	adds	r2, r2, r7
 8009502:	6013      	str	r3, [r2, #0]
		        UINT bytesWritten;
		        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 8009504:	1963      	adds	r3, r4, r5
 8009506:	19db      	adds	r3, r3, r7
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	0018      	movs	r0, r3
 800950c:	f7f6 fdfa 	bl	8000104 <strlen>
 8009510:	0002      	movs	r2, r0
 8009512:	23f4      	movs	r3, #244	@ 0xf4
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	195b      	adds	r3, r3, r5
 8009518:	19db      	adds	r3, r3, r7
 800951a:	1961      	adds	r1, r4, r5
 800951c:	19c9      	adds	r1, r1, r7
 800951e:	6809      	ldr	r1, [r1, #0]
 8009520:	4853      	ldr	r0, [pc, #332]	@ (8009670 <time_update+0x448>)
 8009522:	f00e fa80 	bl	8017a26 <f_write>
		    }
		}
		fresult = f_lseek(&fil, f_size(&fil));
 8009526:	4b52      	ldr	r3, [pc, #328]	@ (8009670 <time_update+0x448>)
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	4b51      	ldr	r3, [pc, #324]	@ (8009670 <time_update+0x448>)
 800952c:	0011      	movs	r1, r2
 800952e:	0018      	movs	r0, r3
 8009530:	f00e fcd1 	bl	8017ed6 <f_lseek>
 8009534:	0003      	movs	r3, r0
 8009536:	001a      	movs	r2, r3
 8009538:	4b4e      	ldr	r3, [pc, #312]	@ (8009674 <time_update+0x44c>)
 800953a:	701a      	strb	r2, [r3, #0]
		char buffer2[200];
		snprintf(buffer2, sizeof(buffer2), "\nBefore writing Alarm :\n Locking Time(ymdhms):%d-%d-%d %d:%d:%d,\n Flag_set_alarm_rtc: %d,\n u_buffer[3](dec): %d,\n u_buffer[4](dec): %d,\n u_buffer[5](dec): %d,\n ctrl_2_before: %d,\n",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(u_buffer[3]), bcdToDec(u_buffer[4]),bcdToDec(u_buffer[5]),PCF2129_read(PCF2129_REG_CONTROL2));
 800953c:	4b48      	ldr	r3, [pc, #288]	@ (8009660 <time_update+0x438>)
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	4b47      	ldr	r3, [pc, #284]	@ (8009660 <time_update+0x438>)
 8009544:	789b      	ldrb	r3, [r3, #2]
 8009546:	001c      	movs	r4, r3
 8009548:	4b45      	ldr	r3, [pc, #276]	@ (8009660 <time_update+0x438>)
 800954a:	78db      	ldrb	r3, [r3, #3]
 800954c:	001d      	movs	r5, r3
 800954e:	4b44      	ldr	r3, [pc, #272]	@ (8009660 <time_update+0x438>)
 8009550:	791b      	ldrb	r3, [r3, #4]
 8009552:	001e      	movs	r6, r3
 8009554:	4b42      	ldr	r3, [pc, #264]	@ (8009660 <time_update+0x438>)
 8009556:	795b      	ldrb	r3, [r3, #5]
 8009558:	4698      	mov	r8, r3
 800955a:	4b41      	ldr	r3, [pc, #260]	@ (8009660 <time_update+0x438>)
 800955c:	799b      	ldrb	r3, [r3, #6]
 800955e:	4699      	mov	r9, r3
 8009560:	4b3e      	ldr	r3, [pc, #248]	@ (800965c <time_update+0x434>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	469a      	mov	sl, r3
 8009566:	2280      	movs	r2, #128	@ 0x80
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	2010      	movs	r0, #16
 800956c:	1813      	adds	r3, r2, r0
 800956e:	19db      	adds	r3, r3, r7
 8009570:	78db      	ldrb	r3, [r3, #3]
 8009572:	0018      	movs	r0, r3
 8009574:	f003 fa2b 	bl	800c9ce <bcdToDec>
 8009578:	0003      	movs	r3, r0
 800957a:	469b      	mov	fp, r3
 800957c:	2280      	movs	r2, #128	@ 0x80
 800957e:	0092      	lsls	r2, r2, #2
 8009580:	2010      	movs	r0, #16
 8009582:	1813      	adds	r3, r2, r0
 8009584:	19db      	adds	r3, r3, r7
 8009586:	791b      	ldrb	r3, [r3, #4]
 8009588:	0018      	movs	r0, r3
 800958a:	f003 fa20 	bl	800c9ce <bcdToDec>
 800958e:	0003      	movs	r3, r0
 8009590:	60bb      	str	r3, [r7, #8]
 8009592:	2280      	movs	r2, #128	@ 0x80
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	2010      	movs	r0, #16
 8009598:	1813      	adds	r3, r2, r0
 800959a:	19db      	adds	r3, r3, r7
 800959c:	795b      	ldrb	r3, [r3, #5]
 800959e:	0018      	movs	r0, r3
 80095a0:	f003 fa15 	bl	800c9ce <bcdToDec>
 80095a4:	0003      	movs	r3, r0
 80095a6:	607b      	str	r3, [r7, #4]
 80095a8:	2001      	movs	r0, #1
 80095aa:	f003 f9a7 	bl	800c8fc <PCF2129_read>
 80095ae:	0003      	movs	r3, r0
 80095b0:	4a32      	ldr	r2, [pc, #200]	@ (800967c <time_update+0x454>)
 80095b2:	2158      	movs	r1, #88	@ 0x58
 80095b4:	2010      	movs	r0, #16
 80095b6:	1809      	adds	r1, r1, r0
 80095b8:	19c8      	adds	r0, r1, r7
 80095ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	9108      	str	r1, [sp, #32]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	9307      	str	r3, [sp, #28]
 80095c4:	465b      	mov	r3, fp
 80095c6:	9306      	str	r3, [sp, #24]
 80095c8:	4653      	mov	r3, sl
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	464b      	mov	r3, r9
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	4643      	mov	r3, r8
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	9602      	str	r6, [sp, #8]
 80095d6:	9501      	str	r5, [sp, #4]
 80095d8:	9400      	str	r4, [sp, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	21c8      	movs	r1, #200	@ 0xc8
 80095de:	f00e ffaf 	bl	8018540 <sniprintf>
		fresult = f_puts(buffer2, &fil);
 80095e2:	4a23      	ldr	r2, [pc, #140]	@ (8009670 <time_update+0x448>)
 80095e4:	2158      	movs	r1, #88	@ 0x58
 80095e6:	2510      	movs	r5, #16
 80095e8:	194b      	adds	r3, r1, r5
 80095ea:	19db      	adds	r3, r3, r7
 80095ec:	0011      	movs	r1, r2
 80095ee:	0018      	movs	r0, r3
 80095f0:	f00e ff1c 	bl	801842c <f_puts>
 80095f4:	0003      	movs	r3, r0
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009674 <time_update+0x44c>)
 80095fa:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 80095fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009670 <time_update+0x448>)
 80095fe:	0018      	movs	r0, r3
 8009600:	f00e fc35 	bl	8017e6e <f_close>
		clear_buffer();
 8009604:	f7fa fc84 	bl	8003f10 <clear_buffer>

		//write to alarm registers
		PCF2129_write(PCF2129_REG_ALARM_SECOND, u_buffer[5]);
 8009608:	2480      	movs	r4, #128	@ 0x80
 800960a:	00a4      	lsls	r4, r4, #2
 800960c:	1963      	adds	r3, r4, r5
 800960e:	e037      	b.n	8009680 <time_update+0x458>
 8009610:	fffffdac 	.word	0xfffffdac
 8009614:	20000c14 	.word	0x20000c14
 8009618:	fffffde8 	.word	0xfffffde8
 800961c:	20000c6c 	.word	0x20000c6c
 8009620:	20000c6e 	.word	0x20000c6e
 8009624:	20000c70 	.word	0x20000c70
 8009628:	20000c72 	.word	0x20000c72
 800962c:	20000c74 	.word	0x20000c74
 8009630:	20000c76 	.word	0x20000c76
 8009634:	20000c8c 	.word	0x20000c8c
 8009638:	20000c8d 	.word	0x20000c8d
 800963c:	20000c8e 	.word	0x20000c8e
 8009640:	20000c90 	.word	0x20000c90
 8009644:	20000c91 	.word	0x20000c91
 8009648:	20000c92 	.word	0x20000c92
 800964c:	20000c8f 	.word	0x20000c8f
 8009650:	08018f74 	.word	0x08018f74
 8009654:	20000d31 	.word	0x20000d31
 8009658:	08018f94 	.word	0x08018f94
 800965c:	20000d32 	.word	0x20000d32
 8009660:	20000c84 	.word	0x20000c84
 8009664:	20000c80 	.word	0x20000c80
 8009668:	20000c78 	.word	0x20000c78
 800966c:	08018fb4 	.word	0x08018fb4
 8009670:	20001ef8 	.word	0x20001ef8
 8009674:	20002f28 	.word	0x20002f28
 8009678:	08018fc0 	.word	0x08018fc0
 800967c:	08018fdc 	.word	0x08018fdc
 8009680:	19db      	adds	r3, r3, r7
 8009682:	795b      	ldrb	r3, [r3, #5]
 8009684:	0019      	movs	r1, r3
 8009686:	200a      	movs	r0, #10
 8009688:	f003 f960 	bl	800c94c <PCF2129_write>
		PCF2129_write(PCF2129_REG_ALARM_MINUTE, u_buffer[4]);
 800968c:	1963      	adds	r3, r4, r5
 800968e:	19db      	adds	r3, r3, r7
 8009690:	791b      	ldrb	r3, [r3, #4]
 8009692:	0019      	movs	r1, r3
 8009694:	200b      	movs	r0, #11
 8009696:	f003 f959 	bl	800c94c <PCF2129_write>
		PCF2129_write(PCF2129_REG_ALARM_HOUR, u_buffer[3]);
 800969a:	1963      	adds	r3, r4, r5
 800969c:	19db      	adds	r3, r3, r7
 800969e:	78db      	ldrb	r3, [r3, #3]
 80096a0:	0019      	movs	r1, r3
 80096a2:	200c      	movs	r0, #12
 80096a4:	f003 f952 	bl	800c94c <PCF2129_write>

		//AIE
		PCF2129_write(PCF2129_REG_CONTROL2, 0x02);
 80096a8:	2102      	movs	r1, #2
 80096aa:	2001      	movs	r0, #1
 80096ac:	f003 f94e 	bl	800c94c <PCF2129_write>

		//PCF2129_read    // Add by Leo & Edwin
		//log==> current time+ reread alarm+ hh_read[3]:mm_read[4]:ss_read[5]
		fresult = f_open(&fil, "LockLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);//open
 80096b0:	498c      	ldr	r1, [pc, #560]	@ (80098e4 <time_update+0x6bc>)
 80096b2:	4b8d      	ldr	r3, [pc, #564]	@ (80098e8 <time_update+0x6c0>)
 80096b4:	2203      	movs	r2, #3
 80096b6:	0018      	movs	r0, r3
 80096b8:	f00d ffb0 	bl	801761c <f_open>
 80096bc:	0003      	movs	r3, r0
 80096be:	001a      	movs	r2, r3
 80096c0:	4b8a      	ldr	r3, [pc, #552]	@ (80098ec <time_update+0x6c4>)
 80096c2:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 80096c4:	4b88      	ldr	r3, [pc, #544]	@ (80098e8 <time_update+0x6c0>)
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	4b87      	ldr	r3, [pc, #540]	@ (80098e8 <time_update+0x6c0>)
 80096ca:	0011      	movs	r1, r2
 80096cc:	0018      	movs	r0, r3
 80096ce:	f00e fc02 	bl	8017ed6 <f_lseek>
 80096d2:	0003      	movs	r3, r0
 80096d4:	001a      	movs	r2, r3
 80096d6:	4b85      	ldr	r3, [pc, #532]	@ (80098ec <time_update+0x6c4>)
 80096d8:	701a      	strb	r2, [r3, #0]
		char buffer1[200];
		snprintf(buffer1, sizeof(buffer1), "\nAfter writing Alarm :\n Written Time(ymdhms):%d-%d-%d %d:%d:%d,\n Flag_set_alarm_rtc: %d,\n Alarm_hr: %d,\n Alarm_min: %d,\n Alarm_sec: %d,\n ctrl_2_after: %d,\n ",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(PCF2129_read(PCF2129_REG_ALARM_HOUR)), bcdToDec(PCF2129_read(PCF2129_REG_ALARM_MINUTE)),bcdToDec(PCF2129_read(PCF2129_REG_ALARM_SECOND)),PCF2129_read(PCF2129_REG_CONTROL2));
 80096da:	4b85      	ldr	r3, [pc, #532]	@ (80098f0 <time_update+0x6c8>)
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	4b83      	ldr	r3, [pc, #524]	@ (80098f0 <time_update+0x6c8>)
 80096e2:	789b      	ldrb	r3, [r3, #2]
 80096e4:	001c      	movs	r4, r3
 80096e6:	4b82      	ldr	r3, [pc, #520]	@ (80098f0 <time_update+0x6c8>)
 80096e8:	78db      	ldrb	r3, [r3, #3]
 80096ea:	001d      	movs	r5, r3
 80096ec:	4b80      	ldr	r3, [pc, #512]	@ (80098f0 <time_update+0x6c8>)
 80096ee:	791b      	ldrb	r3, [r3, #4]
 80096f0:	001e      	movs	r6, r3
 80096f2:	4b7f      	ldr	r3, [pc, #508]	@ (80098f0 <time_update+0x6c8>)
 80096f4:	795b      	ldrb	r3, [r3, #5]
 80096f6:	4698      	mov	r8, r3
 80096f8:	4b7d      	ldr	r3, [pc, #500]	@ (80098f0 <time_update+0x6c8>)
 80096fa:	799b      	ldrb	r3, [r3, #6]
 80096fc:	4699      	mov	r9, r3
 80096fe:	4b7d      	ldr	r3, [pc, #500]	@ (80098f4 <time_update+0x6cc>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	469a      	mov	sl, r3
 8009704:	200c      	movs	r0, #12
 8009706:	f003 f8f9 	bl	800c8fc <PCF2129_read>
 800970a:	0003      	movs	r3, r0
 800970c:	0018      	movs	r0, r3
 800970e:	f003 f95e 	bl	800c9ce <bcdToDec>
 8009712:	0003      	movs	r3, r0
 8009714:	469b      	mov	fp, r3
 8009716:	200b      	movs	r0, #11
 8009718:	f003 f8f0 	bl	800c8fc <PCF2129_read>
 800971c:	0003      	movs	r3, r0
 800971e:	0018      	movs	r0, r3
 8009720:	f003 f955 	bl	800c9ce <bcdToDec>
 8009724:	0003      	movs	r3, r0
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	200a      	movs	r0, #10
 800972a:	f003 f8e7 	bl	800c8fc <PCF2129_read>
 800972e:	0003      	movs	r3, r0
 8009730:	0018      	movs	r0, r3
 8009732:	f003 f94c 	bl	800c9ce <bcdToDec>
 8009736:	0003      	movs	r3, r0
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	2001      	movs	r0, #1
 800973c:	f003 f8de 	bl	800c8fc <PCF2129_read>
 8009740:	0003      	movs	r3, r0
 8009742:	4a6d      	ldr	r2, [pc, #436]	@ (80098f8 <time_update+0x6d0>)
 8009744:	2190      	movs	r1, #144	@ 0x90
 8009746:	0049      	lsls	r1, r1, #1
 8009748:	2010      	movs	r0, #16
 800974a:	1809      	adds	r1, r1, r0
 800974c:	19c8      	adds	r0, r1, r7
 800974e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	9108      	str	r1, [sp, #32]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	9307      	str	r3, [sp, #28]
 8009758:	465b      	mov	r3, fp
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	4653      	mov	r3, sl
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	464b      	mov	r3, r9
 8009762:	9304      	str	r3, [sp, #16]
 8009764:	4643      	mov	r3, r8
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	9602      	str	r6, [sp, #8]
 800976a:	9501      	str	r5, [sp, #4]
 800976c:	9400      	str	r4, [sp, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	21c8      	movs	r1, #200	@ 0xc8
 8009772:	f00e fee5 	bl	8018540 <sniprintf>
		fresult = f_puts(buffer1, &fil);
 8009776:	4a5c      	ldr	r2, [pc, #368]	@ (80098e8 <time_update+0x6c0>)
 8009778:	2190      	movs	r1, #144	@ 0x90
 800977a:	0049      	lsls	r1, r1, #1
 800977c:	2510      	movs	r5, #16
 800977e:	194b      	adds	r3, r1, r5
 8009780:	19db      	adds	r3, r3, r7
 8009782:	0011      	movs	r1, r2
 8009784:	0018      	movs	r0, r3
 8009786:	f00e fe51 	bl	801842c <f_puts>
 800978a:	0003      	movs	r3, r0
 800978c:	b2da      	uxtb	r2, r3
 800978e:	4b57      	ldr	r3, [pc, #348]	@ (80098ec <time_update+0x6c4>)
 8009790:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 8009792:	4b55      	ldr	r3, [pc, #340]	@ (80098e8 <time_update+0x6c0>)
 8009794:	0018      	movs	r0, r3
 8009796:	f00e fb6a 	bl	8017e6e <f_close>
		clear_buffer();
 800979a:	f7fa fbb9 	bl	8003f10 <clear_buffer>
	}
	//trigger the alarm - ~INT = 0 (PA11)
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 800979e:	2380      	movs	r3, #128	@ 0x80
 80097a0:	011a      	lsls	r2, r3, #4
 80097a2:	23a0      	movs	r3, #160	@ 0xa0
 80097a4:	05db      	lsls	r3, r3, #23
 80097a6:	0011      	movs	r1, r2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f004 fee5 	bl	800e578 <HAL_GPIO_ReadPin>
 80097ae:	1e03      	subs	r3, r0, #0
 80097b0:	d13b      	bne.n	800982a <time_update+0x602>
	{
		flag_alarm_clear = FALSE;
 80097b2:	4b52      	ldr	r3, [pc, #328]	@ (80098fc <time_update+0x6d4>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]

		EventDebugLog("Unlock Meter Before Flag_Protect modified"); //Added by Keven Recommand
 80097b8:	4b51      	ldr	r3, [pc, #324]	@ (8009900 <time_update+0x6d8>)
 80097ba:	0018      	movs	r0, r3
 80097bc:	f000 f9fe 	bl	8009bbc <EventDebugLog>

		Flag_Protect = FALSE;
 80097c0:	4b50      	ldr	r3, [pc, #320]	@ (8009904 <time_update+0x6dc>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]

		EventDebugLog("Unlock Meter After Flag_Protect modified");
 80097c6:	4b50      	ldr	r3, [pc, #320]	@ (8009908 <time_update+0x6e0>)
 80097c8:	0018      	movs	r0, r3
 80097ca:	f000 f9f7 	bl	8009bbc <EventDebugLog>

		Flag_alarm = TRUE;
 80097ce:	4b4f      	ldr	r3, [pc, #316]	@ (800990c <time_update+0x6e4>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]
		//PCF2129_write(PCF2129_REG_CONTROL1, 0x00);
		PCF2129_write(PCF2129_REG_CONTROL2, 0x00);
 80097d4:	2100      	movs	r1, #0
 80097d6:	2001      	movs	r0, #1
 80097d8:	f003 f8b8 	bl	800c94c <PCF2129_write>

//		unsigned char unlock_clear[] = {0x5A, 0xA5, 0x09, 0x82, 0x10, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
		HAL_UART_Transmit(&huart1, unlock_clear, 12, 0x20);
 80097dc:	494c      	ldr	r1, [pc, #304]	@ (8009910 <time_update+0x6e8>)
 80097de:	484d      	ldr	r0, [pc, #308]	@ (8009914 <time_update+0x6ec>)
 80097e0:	2320      	movs	r3, #32
 80097e2:	220c      	movs	r2, #12
 80097e4:	f009 fb9e 	bl	8012f24 <HAL_UART_Transmit>
//		unsigned char C_Fare_clear[] = {0x5A, 0xA5, 0x04, 0x82, 0x10, 0x30, 0x20};
		HAL_UART_Transmit(&huart1, C_Fare_clear, 7, 0x20);
 80097e8:	494b      	ldr	r1, [pc, #300]	@ (8009918 <time_update+0x6f0>)
 80097ea:	484a      	ldr	r0, [pc, #296]	@ (8009914 <time_update+0x6ec>)
 80097ec:	2320      	movs	r3, #32
 80097ee:	2207      	movs	r2, #7
 80097f0:	f009 fb98 	bl	8012f24 <HAL_UART_Transmit>
		//Drv_state = S_VACANT;
		//HMI_Vacant_W();
		//Flag_H = FALSE;
		//Flag_S = FALSE;
		//Flag_V = TRUE;
		HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 80097f4:	4949      	ldr	r1, [pc, #292]	@ (800991c <time_update+0x6f4>)
 80097f6:	4847      	ldr	r0, [pc, #284]	@ (8009914 <time_update+0x6ec>)
 80097f8:	2310      	movs	r3, #16
 80097fa:	2208      	movs	r2, #8
 80097fc:	f009 fb92 	bl	8012f24 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 8009800:	4947      	ldr	r1, [pc, #284]	@ (8009920 <time_update+0x6f8>)
 8009802:	4844      	ldr	r0, [pc, #272]	@ (8009914 <time_update+0x6ec>)
 8009804:	2310      	movs	r3, #16
 8009806:	2208      	movs	r2, #8
 8009808:	f009 fb8c 	bl	8012f24 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_On, 8, 0x10);
 800980c:	4945      	ldr	r1, [pc, #276]	@ (8009924 <time_update+0x6fc>)
 800980e:	4841      	ldr	r0, [pc, #260]	@ (8009914 <time_update+0x6ec>)
 8009810:	2310      	movs	r3, #16
 8009812:	2208      	movs	r2, #8
 8009814:	f009 fb86 	bl	8012f24 <HAL_UART_Transmit>
		Drv_state = S_VACANT;
 8009818:	4b43      	ldr	r3, [pc, #268]	@ (8009928 <time_update+0x700>)
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
		Width = 0;
 800981e:	4b43      	ldr	r3, [pc, #268]	@ (800992c <time_update+0x704>)
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]
		Speed = 0;
 8009824:	4b42      	ldr	r3, [pc, #264]	@ (8009930 <time_update+0x708>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
//		flag_alarm_clear = FALSE;
//	}
	//test code - rtc alarm function

	unsigned char rtc_buffer[18];
	BCD2ASC(rtc_buffer, r_buffer, 18);
 800982a:	2382      	movs	r3, #130	@ 0x82
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	2510      	movs	r5, #16
 8009830:	195b      	adds	r3, r3, r5
 8009832:	19d9      	adds	r1, r3, r7
 8009834:	24f6      	movs	r4, #246	@ 0xf6
 8009836:	0064      	lsls	r4, r4, #1
 8009838:	1963      	adds	r3, r4, r5
 800983a:	19db      	adds	r3, r3, r7
 800983c:	2212      	movs	r2, #18
 800983e:	0018      	movs	r0, r3
 8009840:	f000 fafa 	bl	8009e38 <BCD2ASC>

//	HAL_UART_Transmit(&huart2, rtc_buffer, 12, 0x20);
//	HAL_UART_Transmit(&huart2, rtc_buffer, 14, 0x20);

	hmi_rtc[8] = rtc_buffer[0];
 8009844:	0021      	movs	r1, r4
 8009846:	0028      	movs	r0, r5
 8009848:	180b      	adds	r3, r1, r0
 800984a:	19db      	adds	r3, r3, r7
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	4b39      	ldr	r3, [pc, #228]	@ (8009934 <time_update+0x70c>)
 8009850:	721a      	strb	r2, [r3, #8]
	hmi_rtc[9] = rtc_buffer[1];
 8009852:	180b      	adds	r3, r1, r0
 8009854:	19db      	adds	r3, r3, r7
 8009856:	785a      	ldrb	r2, [r3, #1]
 8009858:	4b36      	ldr	r3, [pc, #216]	@ (8009934 <time_update+0x70c>)
 800985a:	725a      	strb	r2, [r3, #9]

	hmi_rtc[11] = rtc_buffer[2];
 800985c:	180b      	adds	r3, r1, r0
 800985e:	19db      	adds	r3, r3, r7
 8009860:	789a      	ldrb	r2, [r3, #2]
 8009862:	4b34      	ldr	r3, [pc, #208]	@ (8009934 <time_update+0x70c>)
 8009864:	72da      	strb	r2, [r3, #11]
	hmi_rtc[12] = rtc_buffer[3];
 8009866:	180b      	adds	r3, r1, r0
 8009868:	19db      	adds	r3, r3, r7
 800986a:	78da      	ldrb	r2, [r3, #3]
 800986c:	4b31      	ldr	r3, [pc, #196]	@ (8009934 <time_update+0x70c>)
 800986e:	731a      	strb	r2, [r3, #12]

	hmi_rtc[14] = rtc_buffer[4];
 8009870:	180b      	adds	r3, r1, r0
 8009872:	19db      	adds	r3, r3, r7
 8009874:	791a      	ldrb	r2, [r3, #4]
 8009876:	4b2f      	ldr	r3, [pc, #188]	@ (8009934 <time_update+0x70c>)
 8009878:	739a      	strb	r2, [r3, #14]
	hmi_rtc[15] = rtc_buffer[5];
 800987a:	180b      	adds	r3, r1, r0
 800987c:	19db      	adds	r3, r3, r7
 800987e:	795a      	ldrb	r2, [r3, #5]
 8009880:	4b2c      	ldr	r3, [pc, #176]	@ (8009934 <time_update+0x70c>)
 8009882:	73da      	strb	r2, [r3, #15]

	hmi_rtc[17] = rtc_buffer[6];
 8009884:	180b      	adds	r3, r1, r0
 8009886:	19db      	adds	r3, r3, r7
 8009888:	799a      	ldrb	r2, [r3, #6]
 800988a:	4b2a      	ldr	r3, [pc, #168]	@ (8009934 <time_update+0x70c>)
 800988c:	745a      	strb	r2, [r3, #17]
	hmi_rtc[18] = rtc_buffer[7];
 800988e:	180b      	adds	r3, r1, r0
 8009890:	19db      	adds	r3, r3, r7
 8009892:	79da      	ldrb	r2, [r3, #7]
 8009894:	4b27      	ldr	r3, [pc, #156]	@ (8009934 <time_update+0x70c>)
 8009896:	749a      	strb	r2, [r3, #18]

	hmi_rtc[20] = rtc_buffer[8];
 8009898:	180b      	adds	r3, r1, r0
 800989a:	19db      	adds	r3, r3, r7
 800989c:	7a1a      	ldrb	r2, [r3, #8]
 800989e:	4b25      	ldr	r3, [pc, #148]	@ (8009934 <time_update+0x70c>)
 80098a0:	751a      	strb	r2, [r3, #20]
	hmi_rtc[21] = rtc_buffer[9];
 80098a2:	180b      	adds	r3, r1, r0
 80098a4:	19db      	adds	r3, r3, r7
 80098a6:	7a5a      	ldrb	r2, [r3, #9]
 80098a8:	4b22      	ldr	r3, [pc, #136]	@ (8009934 <time_update+0x70c>)
 80098aa:	755a      	strb	r2, [r3, #21]

	hmi_rtc[23] = rtc_buffer[10];
 80098ac:	180b      	adds	r3, r1, r0
 80098ae:	19db      	adds	r3, r3, r7
 80098b0:	7a9a      	ldrb	r2, [r3, #10]
 80098b2:	4b20      	ldr	r3, [pc, #128]	@ (8009934 <time_update+0x70c>)
 80098b4:	75da      	strb	r2, [r3, #23]
	hmi_rtc[24] = rtc_buffer[11];
 80098b6:	180b      	adds	r3, r1, r0
 80098b8:	19db      	adds	r3, r3, r7
 80098ba:	7ada      	ldrb	r2, [r3, #11]
 80098bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009934 <time_update+0x70c>)
 80098be:	761a      	strb	r2, [r3, #24]

	HAL_UART_Transmit(&huart1, hmi_rtc, 25, 0x20);
 80098c0:	491c      	ldr	r1, [pc, #112]	@ (8009934 <time_update+0x70c>)
 80098c2:	4814      	ldr	r0, [pc, #80]	@ (8009914 <time_update+0x6ec>)
 80098c4:	2320      	movs	r3, #32
 80098c6:	2219      	movs	r2, #25
 80098c8:	f009 fb2c 	bl	8012f24 <HAL_UART_Transmit>
}
 80098cc:	46c0      	nop			@ (mov r8, r8)
 80098ce:	46bd      	mov	sp, r7
 80098d0:	238b      	movs	r3, #139	@ 0x8b
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	449d      	add	sp, r3
 80098d6:	bcf0      	pop	{r4, r5, r6, r7}
 80098d8:	46bb      	mov	fp, r7
 80098da:	46b2      	mov	sl, r6
 80098dc:	46a9      	mov	r9, r5
 80098de:	46a0      	mov	r8, r4
 80098e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e2:	46c0      	nop			@ (mov r8, r8)
 80098e4:	08018fb4 	.word	0x08018fb4
 80098e8:	20001ef8 	.word	0x20001ef8
 80098ec:	20002f28 	.word	0x20002f28
 80098f0:	20000c84 	.word	0x20000c84
 80098f4:	20000d32 	.word	0x20000d32
 80098f8:	08019090 	.word	0x08019090
 80098fc:	20000c8f 	.word	0x20000c8f
 8009900:	08019130 	.word	0x08019130
 8009904:	20000d31 	.word	0x20000d31
 8009908:	0801915c 	.word	0x0801915c
 800990c:	20000244 	.word	0x20000244
 8009910:	20000248 	.word	0x20000248
 8009914:	2000064c 	.word	0x2000064c
 8009918:	20000254 	.word	0x20000254
 800991c:	2000000c 	.word	0x2000000c
 8009920:	2000001c 	.word	0x2000001c
 8009924:	20000024 	.word	0x20000024
 8009928:	20000a66 	.word	0x20000a66
 800992c:	20000ca8 	.word	0x20000ca8
 8009930:	20000cd0 	.word	0x20000cd0
 8009934:	2000007c 	.word	0x2000007c

08009938 <DebugLog>:



void DebugLog(void)
{
 8009938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800993a:	46de      	mov	lr, fp
 800993c:	4657      	mov	r7, sl
 800993e:	464e      	mov	r6, r9
 8009940:	4645      	mov	r5, r8
 8009942:	b5e0      	push	{r5, r6, r7, lr}
 8009944:	b0ef      	sub	sp, #444	@ 0x1bc
 8009946:	af14      	add	r7, sp, #80	@ 0x50
	#ifdef DEBUG
	stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 8009948:	4b89      	ldr	r3, [pc, #548]	@ (8009b70 <DebugLog+0x238>)
 800994a:	224d      	movs	r2, #77	@ 0x4d
 800994c:	5c9b      	ldrb	r3, [r3, r2]
 800994e:	0018      	movs	r0, r3
 8009950:	f003 f83d 	bl	800c9ce <bcdToDec>
 8009954:	0003      	movs	r3, r0
 8009956:	22fa      	movs	r2, #250	@ 0xfa
 8009958:	00d2      	lsls	r2, r2, #3
 800995a:	4694      	mov	ip, r2
 800995c:	4463      	add	r3, ip
 800995e:	b29a      	uxth	r2, r3
 8009960:	4b84      	ldr	r3, [pc, #528]	@ (8009b74 <DebugLog+0x23c>)
 8009962:	801a      	strh	r2, [r3, #0]
	stCurrentTime.month = bcdToDec(RTC_date.date.m);
 8009964:	4b82      	ldr	r3, [pc, #520]	@ (8009b70 <DebugLog+0x238>)
 8009966:	224e      	movs	r2, #78	@ 0x4e
 8009968:	5c9b      	ldrb	r3, [r3, r2]
 800996a:	0018      	movs	r0, r3
 800996c:	f003 f82f 	bl	800c9ce <bcdToDec>
 8009970:	0003      	movs	r3, r0
 8009972:	001a      	movs	r2, r3
 8009974:	4b7f      	ldr	r3, [pc, #508]	@ (8009b74 <DebugLog+0x23c>)
 8009976:	709a      	strb	r2, [r3, #2]
	stCurrentTime.date = bcdToDec(RTC_date.date.d);
 8009978:	4b7d      	ldr	r3, [pc, #500]	@ (8009b70 <DebugLog+0x238>)
 800997a:	224f      	movs	r2, #79	@ 0x4f
 800997c:	5c9b      	ldrb	r3, [r3, r2]
 800997e:	0018      	movs	r0, r3
 8009980:	f003 f825 	bl	800c9ce <bcdToDec>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	4b7a      	ldr	r3, [pc, #488]	@ (8009b74 <DebugLog+0x23c>)
 800998a:	70da      	strb	r2, [r3, #3]
	stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 800998c:	4b78      	ldr	r3, [pc, #480]	@ (8009b70 <DebugLog+0x238>)
 800998e:	2251      	movs	r2, #81	@ 0x51
 8009990:	5c9b      	ldrb	r3, [r3, r2]
 8009992:	0018      	movs	r0, r3
 8009994:	f003 f81b 	bl	800c9ce <bcdToDec>
 8009998:	0003      	movs	r3, r0
 800999a:	001a      	movs	r2, r3
 800999c:	4b75      	ldr	r3, [pc, #468]	@ (8009b74 <DebugLog+0x23c>)
 800999e:	711a      	strb	r2, [r3, #4]
	stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 80099a0:	4b73      	ldr	r3, [pc, #460]	@ (8009b70 <DebugLog+0x238>)
 80099a2:	2252      	movs	r2, #82	@ 0x52
 80099a4:	5c9b      	ldrb	r3, [r3, r2]
 80099a6:	0018      	movs	r0, r3
 80099a8:	f003 f811 	bl	800c9ce <bcdToDec>
 80099ac:	0003      	movs	r3, r0
 80099ae:	001a      	movs	r2, r3
 80099b0:	4b70      	ldr	r3, [pc, #448]	@ (8009b74 <DebugLog+0x23c>)
 80099b2:	715a      	strb	r2, [r3, #5]
	stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 80099b4:	4b6e      	ldr	r3, [pc, #440]	@ (8009b70 <DebugLog+0x238>)
 80099b6:	2253      	movs	r2, #83	@ 0x53
 80099b8:	5c9b      	ldrb	r3, [r3, r2]
 80099ba:	0018      	movs	r0, r3
 80099bc:	f003 f807 	bl	800c9ce <bcdToDec>
 80099c0:	0003      	movs	r3, r0
 80099c2:	001a      	movs	r2, r3
 80099c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009b74 <DebugLog+0x23c>)
 80099c6:	719a      	strb	r2, [r3, #6]
	if (stCurrentTime.second%3==0){
 80099c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009b74 <DebugLog+0x23c>)
 80099ca:	799b      	ldrb	r3, [r3, #6]
 80099cc:	2103      	movs	r1, #3
 80099ce:	0018      	movs	r0, r3
 80099d0:	f7f6 fc30 	bl	8000234 <__aeabi_uidivmod>
 80099d4:	000b      	movs	r3, r1
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d000      	beq.n	80099de <DebugLog+0xa6>
 80099dc:	e0be      	b.n	8009b5c <DebugLog+0x224>
	fresult = f_open(&fil, "DebugLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80099de:	4966      	ldr	r1, [pc, #408]	@ (8009b78 <DebugLog+0x240>)
 80099e0:	4b66      	ldr	r3, [pc, #408]	@ (8009b7c <DebugLog+0x244>)
 80099e2:	2203      	movs	r2, #3
 80099e4:	0018      	movs	r0, r3
 80099e6:	f00d fe19 	bl	801761c <f_open>
 80099ea:	0003      	movs	r3, r0
 80099ec:	001a      	movs	r2, r3
 80099ee:	4b64      	ldr	r3, [pc, #400]	@ (8009b80 <DebugLog+0x248>)
 80099f0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NO_FILE) {
 80099f2:	4b63      	ldr	r3, [pc, #396]	@ (8009b80 <DebugLog+0x248>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d125      	bne.n	8009a46 <DebugLog+0x10e>
	    // Create the file
	    fresult = f_open(&fil, "DebugLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80099fa:	495f      	ldr	r1, [pc, #380]	@ (8009b78 <DebugLog+0x240>)
 80099fc:	4b5f      	ldr	r3, [pc, #380]	@ (8009b7c <DebugLog+0x244>)
 80099fe:	220a      	movs	r2, #10
 8009a00:	0018      	movs	r0, r3
 8009a02:	f00d fe0b 	bl	801761c <f_open>
 8009a06:	0003      	movs	r3, r0
 8009a08:	001a      	movs	r2, r3
 8009a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8009b80 <DebugLog+0x248>)
 8009a0c:	701a      	strb	r2, [r3, #0]

	    // Check if the file was created successfully
	    if (fresult == FR_OK) {
 8009a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8009b80 <DebugLog+0x248>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d117      	bne.n	8009a46 <DebugLog+0x10e>
	        // Optionally write initial data to the file
	        const char *initialData = "Smart Taximeter Debug Log \n";
 8009a16:	4b5b      	ldr	r3, [pc, #364]	@ (8009b84 <DebugLog+0x24c>)
 8009a18:	249a      	movs	r4, #154	@ 0x9a
 8009a1a:	0064      	lsls	r4, r4, #1
 8009a1c:	2530      	movs	r5, #48	@ 0x30
 8009a1e:	1962      	adds	r2, r4, r5
 8009a20:	19d2      	adds	r2, r2, r7
 8009a22:	6013      	str	r3, [r2, #0]
	        UINT bytesWritten;
	        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 8009a24:	1963      	adds	r3, r4, r5
 8009a26:	19db      	adds	r3, r3, r7
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7f6 fb6a 	bl	8000104 <strlen>
 8009a30:	0002      	movs	r2, r0
 8009a32:	2398      	movs	r3, #152	@ 0x98
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	195b      	adds	r3, r3, r5
 8009a38:	19db      	adds	r3, r3, r7
 8009a3a:	1961      	adds	r1, r4, r5
 8009a3c:	19c9      	adds	r1, r1, r7
 8009a3e:	6809      	ldr	r1, [r1, #0]
 8009a40:	484e      	ldr	r0, [pc, #312]	@ (8009b7c <DebugLog+0x244>)
 8009a42:	f00d fff0 	bl	8017a26 <f_write>
	    }
	}

	fresult = f_lseek(&fil, f_size(&fil));
 8009a46:	4b4d      	ldr	r3, [pc, #308]	@ (8009b7c <DebugLog+0x244>)
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8009b7c <DebugLog+0x244>)
 8009a4c:	0011      	movs	r1, r2
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f00e fa41 	bl	8017ed6 <f_lseek>
 8009a54:	0003      	movs	r3, r0
 8009a56:	001a      	movs	r2, r3
 8009a58:	4b49      	ldr	r3, [pc, #292]	@ (8009b80 <DebugLog+0x248>)
 8009a5a:	701a      	strb	r2, [r3, #0]
	char buffer3[300];
	snprintf(buffer3, sizeof(buffer3), "\nLog Time(ymdhms):%d-%d-%d %d:%d:%d  Flag_set_alarm_rtc: %d  hh:mm:ss: %d:%d:%d  ctrl_2: %d  Flag_Protect: %d  Flag_Alarm: %d  Tamper_Counter: %d  counter: %d  last_counter: %d  Speed: %d  Width: %d",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(hh),bcdToDec(mm),bcdToDec(ss),ctrl_2,Flag_Protect,Flag_alarm,Tamper_Counter,counter,last_counter,Speed,Width);
 8009a5c:	4b45      	ldr	r3, [pc, #276]	@ (8009b74 <DebugLog+0x23c>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a62:	4b44      	ldr	r3, [pc, #272]	@ (8009b74 <DebugLog+0x23c>)
 8009a64:	789b      	ldrb	r3, [r3, #2]
 8009a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a68:	4b42      	ldr	r3, [pc, #264]	@ (8009b74 <DebugLog+0x23c>)
 8009a6a:	78db      	ldrb	r3, [r3, #3]
 8009a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a6e:	4b41      	ldr	r3, [pc, #260]	@ (8009b74 <DebugLog+0x23c>)
 8009a70:	791b      	ldrb	r3, [r3, #4]
 8009a72:	623b      	str	r3, [r7, #32]
 8009a74:	4b3f      	ldr	r3, [pc, #252]	@ (8009b74 <DebugLog+0x23c>)
 8009a76:	795b      	ldrb	r3, [r3, #5]
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b74 <DebugLog+0x23c>)
 8009a7c:	799b      	ldrb	r3, [r3, #6]
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	4b41      	ldr	r3, [pc, #260]	@ (8009b88 <DebugLog+0x250>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	617b      	str	r3, [r7, #20]
 8009a86:	4b41      	ldr	r3, [pc, #260]	@ (8009b8c <DebugLog+0x254>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f002 ff9f 	bl	800c9ce <bcdToDec>
 8009a90:	0003      	movs	r3, r0
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	4b3e      	ldr	r3, [pc, #248]	@ (8009b90 <DebugLog+0x258>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f002 ff98 	bl	800c9ce <bcdToDec>
 8009a9e:	0003      	movs	r3, r0
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8009b94 <DebugLog+0x25c>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f002 ff91 	bl	800c9ce <bcdToDec>
 8009aac:	0003      	movs	r3, r0
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	4b39      	ldr	r3, [pc, #228]	@ (8009b98 <DebugLog+0x260>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	4b39      	ldr	r3, [pc, #228]	@ (8009b9c <DebugLog+0x264>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4b38      	ldr	r3, [pc, #224]	@ (8009ba0 <DebugLog+0x268>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	469b      	mov	fp, r3
 8009ac2:	4b38      	ldr	r3, [pc, #224]	@ (8009ba4 <DebugLog+0x26c>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	4b37      	ldr	r3, [pc, #220]	@ (8009ba8 <DebugLog+0x270>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	4691      	mov	r9, r2
 8009ace:	4b37      	ldr	r3, [pc, #220]	@ (8009bac <DebugLog+0x274>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4690      	mov	r8, r2
 8009ad4:	4b36      	ldr	r3, [pc, #216]	@ (8009bb0 <DebugLog+0x278>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	1c18      	adds	r0, r3, #0
 8009ada:	f7f9 fbcf 	bl	800327c <__aeabi_f2d>
 8009ade:	4b35      	ldr	r3, [pc, #212]	@ (8009bb4 <DebugLog+0x27c>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	4e35      	ldr	r6, [pc, #212]	@ (8009bb8 <DebugLog+0x280>)
 8009ae4:	2396      	movs	r3, #150	@ 0x96
 8009ae6:	005d      	lsls	r5, r3, #1
 8009ae8:	2334      	movs	r3, #52	@ 0x34
 8009aea:	18fc      	adds	r4, r7, r3
 8009aec:	9212      	str	r2, [sp, #72]	@ 0x48
 8009aee:	9010      	str	r0, [sp, #64]	@ 0x40
 8009af0:	9111      	str	r1, [sp, #68]	@ 0x44
 8009af2:	4642      	mov	r2, r8
 8009af4:	920e      	str	r2, [sp, #56]	@ 0x38
 8009af6:	464a      	mov	r2, r9
 8009af8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009afa:	4652      	mov	r2, sl
 8009afc:	920c      	str	r2, [sp, #48]	@ 0x30
 8009afe:	465a      	mov	r2, fp
 8009b00:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	9208      	str	r2, [sp, #32]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	9207      	str	r2, [sp, #28]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	9206      	str	r2, [sp, #24]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	9205      	str	r2, [sp, #20]
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	9204      	str	r2, [sp, #16]
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	9203      	str	r2, [sp, #12]
 8009b22:	6a3a      	ldr	r2, [r7, #32]
 8009b24:	9202      	str	r2, [sp, #8]
 8009b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b2c:	9200      	str	r2, [sp, #0]
 8009b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b30:	0032      	movs	r2, r6
 8009b32:	0029      	movs	r1, r5
 8009b34:	0020      	movs	r0, r4
 8009b36:	f00e fd03 	bl	8018540 <sniprintf>
	fresult = f_puts(buffer3, &fil);
 8009b3a:	4a10      	ldr	r2, [pc, #64]	@ (8009b7c <DebugLog+0x244>)
 8009b3c:	2334      	movs	r3, #52	@ 0x34
 8009b3e:	18fb      	adds	r3, r7, r3
 8009b40:	0011      	movs	r1, r2
 8009b42:	0018      	movs	r0, r3
 8009b44:	f00e fc72 	bl	801842c <f_puts>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b80 <DebugLog+0x248>)
 8009b4e:	701a      	strb	r2, [r3, #0]
	f_close (&fil);
 8009b50:	4b0a      	ldr	r3, [pc, #40]	@ (8009b7c <DebugLog+0x244>)
 8009b52:	0018      	movs	r0, r3
 8009b54:	f00e f98b 	bl	8017e6e <f_close>
	clear_buffer();
 8009b58:	f7fa f9da 	bl	8003f10 <clear_buffer>
	}
	#endif
}
 8009b5c:	46c0      	nop			@ (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b05b      	add	sp, #364	@ 0x16c
 8009b62:	bcf0      	pop	{r4, r5, r6, r7}
 8009b64:	46bb      	mov	fp, r7
 8009b66:	46b2      	mov	sl, r6
 8009b68:	46a9      	mov	r9, r5
 8009b6a:	46a0      	mov	r8, r4
 8009b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b6e:	46c0      	nop			@ (mov r8, r8)
 8009b70:	20000c14 	.word	0x20000c14
 8009b74:	20000c84 	.word	0x20000c84
 8009b78:	08019188 	.word	0x08019188
 8009b7c:	20001ef8 	.word	0x20001ef8
 8009b80:	20002f28 	.word	0x20002f28
 8009b84:	08019198 	.word	0x08019198
 8009b88:	20000d32 	.word	0x20000d32
 8009b8c:	20000c90 	.word	0x20000c90
 8009b90:	20000c91 	.word	0x20000c91
 8009b94:	20000c92 	.word	0x20000c92
 8009b98:	20000c8d 	.word	0x20000c8d
 8009b9c:	20000d31 	.word	0x20000d31
 8009ba0:	20000244 	.word	0x20000244
 8009ba4:	20000d33 	.word	0x20000d33
 8009ba8:	20000cdc 	.word	0x20000cdc
 8009bac:	20000ce4 	.word	0x20000ce4
 8009bb0:	20000cd0 	.word	0x20000cd0
 8009bb4:	20000ca8 	.word	0x20000ca8
 8009bb8:	080191b4 	.word	0x080191b4

08009bbc <EventDebugLog>:

void EventDebugLog(char *str)
{
 8009bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bbe:	46de      	mov	lr, fp
 8009bc0:	4657      	mov	r7, sl
 8009bc2:	464e      	mov	r6, r9
 8009bc4:	4645      	mov	r5, r8
 8009bc6:	b5e0      	push	{r5, r6, r7, lr}
 8009bc8:	b0f1      	sub	sp, #452	@ 0x1c4
 8009bca:	af14      	add	r7, sp, #80	@ 0x50
 8009bcc:	6378      	str	r0, [r7, #52]	@ 0x34
//	#ifdef DEBUG
	stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 8009bce:	4b87      	ldr	r3, [pc, #540]	@ (8009dec <EventDebugLog+0x230>)
 8009bd0:	224d      	movs	r2, #77	@ 0x4d
 8009bd2:	5c9b      	ldrb	r3, [r3, r2]
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f002 fefa 	bl	800c9ce <bcdToDec>
 8009bda:	0003      	movs	r3, r0
 8009bdc:	22fa      	movs	r2, #250	@ 0xfa
 8009bde:	00d2      	lsls	r2, r2, #3
 8009be0:	4694      	mov	ip, r2
 8009be2:	4463      	add	r3, ip
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	4b82      	ldr	r3, [pc, #520]	@ (8009df0 <EventDebugLog+0x234>)
 8009be8:	801a      	strh	r2, [r3, #0]
	stCurrentTime.month = bcdToDec(RTC_date.date.m);
 8009bea:	4b80      	ldr	r3, [pc, #512]	@ (8009dec <EventDebugLog+0x230>)
 8009bec:	224e      	movs	r2, #78	@ 0x4e
 8009bee:	5c9b      	ldrb	r3, [r3, r2]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f002 feec 	bl	800c9ce <bcdToDec>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	001a      	movs	r2, r3
 8009bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8009df0 <EventDebugLog+0x234>)
 8009bfc:	709a      	strb	r2, [r3, #2]
	stCurrentTime.date = bcdToDec(RTC_date.date.d);
 8009bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8009dec <EventDebugLog+0x230>)
 8009c00:	224f      	movs	r2, #79	@ 0x4f
 8009c02:	5c9b      	ldrb	r3, [r3, r2]
 8009c04:	0018      	movs	r0, r3
 8009c06:	f002 fee2 	bl	800c9ce <bcdToDec>
 8009c0a:	0003      	movs	r3, r0
 8009c0c:	001a      	movs	r2, r3
 8009c0e:	4b78      	ldr	r3, [pc, #480]	@ (8009df0 <EventDebugLog+0x234>)
 8009c10:	70da      	strb	r2, [r3, #3]
	stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 8009c12:	4b76      	ldr	r3, [pc, #472]	@ (8009dec <EventDebugLog+0x230>)
 8009c14:	2251      	movs	r2, #81	@ 0x51
 8009c16:	5c9b      	ldrb	r3, [r3, r2]
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f002 fed8 	bl	800c9ce <bcdToDec>
 8009c1e:	0003      	movs	r3, r0
 8009c20:	001a      	movs	r2, r3
 8009c22:	4b73      	ldr	r3, [pc, #460]	@ (8009df0 <EventDebugLog+0x234>)
 8009c24:	711a      	strb	r2, [r3, #4]
	stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 8009c26:	4b71      	ldr	r3, [pc, #452]	@ (8009dec <EventDebugLog+0x230>)
 8009c28:	2252      	movs	r2, #82	@ 0x52
 8009c2a:	5c9b      	ldrb	r3, [r3, r2]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f002 fece 	bl	800c9ce <bcdToDec>
 8009c32:	0003      	movs	r3, r0
 8009c34:	001a      	movs	r2, r3
 8009c36:	4b6e      	ldr	r3, [pc, #440]	@ (8009df0 <EventDebugLog+0x234>)
 8009c38:	715a      	strb	r2, [r3, #5]
	stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 8009c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8009dec <EventDebugLog+0x230>)
 8009c3c:	2253      	movs	r2, #83	@ 0x53
 8009c3e:	5c9b      	ldrb	r3, [r3, r2]
 8009c40:	0018      	movs	r0, r3
 8009c42:	f002 fec4 	bl	800c9ce <bcdToDec>
 8009c46:	0003      	movs	r3, r0
 8009c48:	001a      	movs	r2, r3
 8009c4a:	4b69      	ldr	r3, [pc, #420]	@ (8009df0 <EventDebugLog+0x234>)
 8009c4c:	719a      	strb	r2, [r3, #6]
//	if (stCurrentTime.second%3==0){
	fresult = f_open(&fil, "DebugLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8009c4e:	4969      	ldr	r1, [pc, #420]	@ (8009df4 <EventDebugLog+0x238>)
 8009c50:	4b69      	ldr	r3, [pc, #420]	@ (8009df8 <EventDebugLog+0x23c>)
 8009c52:	2203      	movs	r2, #3
 8009c54:	0018      	movs	r0, r3
 8009c56:	f00d fce1 	bl	801761c <f_open>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	4b67      	ldr	r3, [pc, #412]	@ (8009dfc <EventDebugLog+0x240>)
 8009c60:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NO_FILE) {
 8009c62:	4b66      	ldr	r3, [pc, #408]	@ (8009dfc <EventDebugLog+0x240>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d124      	bne.n	8009cb4 <EventDebugLog+0xf8>
	    // Create the file
	    fresult = f_open(&fil, "DebugLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8009c6a:	4962      	ldr	r1, [pc, #392]	@ (8009df4 <EventDebugLog+0x238>)
 8009c6c:	4b62      	ldr	r3, [pc, #392]	@ (8009df8 <EventDebugLog+0x23c>)
 8009c6e:	220a      	movs	r2, #10
 8009c70:	0018      	movs	r0, r3
 8009c72:	f00d fcd3 	bl	801761c <f_open>
 8009c76:	0003      	movs	r3, r0
 8009c78:	001a      	movs	r2, r3
 8009c7a:	4b60      	ldr	r3, [pc, #384]	@ (8009dfc <EventDebugLog+0x240>)
 8009c7c:	701a      	strb	r2, [r3, #0]

	    // Check if the file was created successfully
	    if (fresult == FR_OK) {
 8009c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8009dfc <EventDebugLog+0x240>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d116      	bne.n	8009cb4 <EventDebugLog+0xf8>
	        // Optionally write initial data to the file
	        const char *initialData = "Smart Taximeter Debug Log \n";
 8009c86:	4b5e      	ldr	r3, [pc, #376]	@ (8009e00 <EventDebugLog+0x244>)
 8009c88:	249e      	movs	r4, #158	@ 0x9e
 8009c8a:	0064      	lsls	r4, r4, #1
 8009c8c:	2530      	movs	r5, #48	@ 0x30
 8009c8e:	1962      	adds	r2, r4, r5
 8009c90:	19d2      	adds	r2, r2, r7
 8009c92:	6013      	str	r3, [r2, #0]
	        UINT bytesWritten;
	        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 8009c94:	1963      	adds	r3, r4, r5
 8009c96:	19db      	adds	r3, r3, r7
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f7f6 fa32 	bl	8000104 <strlen>
 8009ca0:	0002      	movs	r2, r0
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	195b      	adds	r3, r3, r5
 8009ca6:	19db      	adds	r3, r3, r7
 8009ca8:	1961      	adds	r1, r4, r5
 8009caa:	19c9      	adds	r1, r1, r7
 8009cac:	6809      	ldr	r1, [r1, #0]
 8009cae:	4852      	ldr	r0, [pc, #328]	@ (8009df8 <EventDebugLog+0x23c>)
 8009cb0:	f00d feb9 	bl	8017a26 <f_write>
	    }
	}

	fresult = f_lseek(&fil, f_size(&fil));
 8009cb4:	4b50      	ldr	r3, [pc, #320]	@ (8009df8 <EventDebugLog+0x23c>)
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8009df8 <EventDebugLog+0x23c>)
 8009cba:	0011      	movs	r1, r2
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f00e f90a 	bl	8017ed6 <f_lseek>
 8009cc2:	0003      	movs	r3, r0
 8009cc4:	001a      	movs	r2, r3
 8009cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8009dfc <EventDebugLog+0x240>)
 8009cc8:	701a      	strb	r2, [r3, #0]
	char buffer3[300];
	snprintf(buffer3, sizeof(buffer3), "\nEvent: %s  Log Time(ymdhms):%d-%d-%d %d:%d:%d  Flag_set_alarm_rtc: %d  hh:mm:ss: %d:%d:%d  ctrl_2: %d  Flag_Protect: %d  Flag_Alarm: %d  Tamper_Counter: %d  counter: %d  last_counter: %d  Speed: %d  Width: %d",str,stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(hh),bcdToDec(mm),bcdToDec(ss),ctrl_2,Flag_Protect,Flag_alarm,Tamper_Counter,counter,last_counter,Speed,Width);
 8009cca:	4b49      	ldr	r3, [pc, #292]	@ (8009df0 <EventDebugLog+0x234>)
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cd0:	4b47      	ldr	r3, [pc, #284]	@ (8009df0 <EventDebugLog+0x234>)
 8009cd2:	789b      	ldrb	r3, [r3, #2]
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cd6:	4b46      	ldr	r3, [pc, #280]	@ (8009df0 <EventDebugLog+0x234>)
 8009cd8:	78db      	ldrb	r3, [r3, #3]
 8009cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cdc:	4b44      	ldr	r3, [pc, #272]	@ (8009df0 <EventDebugLog+0x234>)
 8009cde:	791b      	ldrb	r3, [r3, #4]
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce2:	4b43      	ldr	r3, [pc, #268]	@ (8009df0 <EventDebugLog+0x234>)
 8009ce4:	795b      	ldrb	r3, [r3, #5]
 8009ce6:	623b      	str	r3, [r7, #32]
 8009ce8:	4b41      	ldr	r3, [pc, #260]	@ (8009df0 <EventDebugLog+0x234>)
 8009cea:	799b      	ldrb	r3, [r3, #6]
 8009cec:	61fb      	str	r3, [r7, #28]
 8009cee:	4b45      	ldr	r3, [pc, #276]	@ (8009e04 <EventDebugLog+0x248>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	4b44      	ldr	r3, [pc, #272]	@ (8009e08 <EventDebugLog+0x24c>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f002 fe68 	bl	800c9ce <bcdToDec>
 8009cfe:	0003      	movs	r3, r0
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	4b42      	ldr	r3, [pc, #264]	@ (8009e0c <EventDebugLog+0x250>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f002 fe61 	bl	800c9ce <bcdToDec>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	4b3f      	ldr	r3, [pc, #252]	@ (8009e10 <EventDebugLog+0x254>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f002 fe5a 	bl	800c9ce <bcdToDec>
 8009d1a:	0003      	movs	r3, r0
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e14 <EventDebugLog+0x258>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	60bb      	str	r3, [r7, #8]
 8009d24:	4b3c      	ldr	r3, [pc, #240]	@ (8009e18 <EventDebugLog+0x25c>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8009e1c <EventDebugLog+0x260>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	469b      	mov	fp, r3
 8009d30:	4b3b      	ldr	r3, [pc, #236]	@ (8009e20 <EventDebugLog+0x264>)
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	469a      	mov	sl, r3
 8009d36:	4b3b      	ldr	r3, [pc, #236]	@ (8009e24 <EventDebugLog+0x268>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e28 <EventDebugLog+0x26c>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4690      	mov	r8, r2
 8009d42:	4b3a      	ldr	r3, [pc, #232]	@ (8009e2c <EventDebugLog+0x270>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	1c18      	adds	r0, r3, #0
 8009d48:	f7f9 fa98 	bl	800327c <__aeabi_f2d>
 8009d4c:	4b38      	ldr	r3, [pc, #224]	@ (8009e30 <EventDebugLog+0x274>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8009d52:	46a4      	mov	ip, r4
 8009d54:	4e37      	ldr	r6, [pc, #220]	@ (8009e34 <EventDebugLog+0x278>)
 8009d56:	2396      	movs	r3, #150	@ 0x96
 8009d58:	005d      	lsls	r5, r3, #1
 8009d5a:	2410      	movs	r4, #16
 8009d5c:	2330      	movs	r3, #48	@ 0x30
 8009d5e:	18e4      	adds	r4, r4, r3
 8009d60:	19e4      	adds	r4, r4, r7
 8009d62:	9212      	str	r2, [sp, #72]	@ 0x48
 8009d64:	9010      	str	r0, [sp, #64]	@ 0x40
 8009d66:	9111      	str	r1, [sp, #68]	@ 0x44
 8009d68:	4642      	mov	r2, r8
 8009d6a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d6c:	464a      	mov	r2, r9
 8009d6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d70:	4652      	mov	r2, sl
 8009d72:	920d      	str	r2, [sp, #52]	@ 0x34
 8009d74:	465a      	mov	r2, fp
 8009d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	9208      	str	r2, [sp, #32]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	9207      	str	r2, [sp, #28]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	9206      	str	r2, [sp, #24]
 8009d90:	69fa      	ldr	r2, [r7, #28]
 8009d92:	9205      	str	r2, [sp, #20]
 8009d94:	6a3a      	ldr	r2, [r7, #32]
 8009d96:	9204      	str	r2, [sp, #16]
 8009d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d9a:	9203      	str	r2, [sp, #12]
 8009d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d9e:	9202      	str	r2, [sp, #8]
 8009da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da2:	9201      	str	r2, [sp, #4]
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	4663      	mov	r3, ip
 8009daa:	0032      	movs	r2, r6
 8009dac:	0029      	movs	r1, r5
 8009dae:	0020      	movs	r0, r4
 8009db0:	f00e fbc6 	bl	8018540 <sniprintf>
	fresult = f_puts(buffer3, &fil);
 8009db4:	4a10      	ldr	r2, [pc, #64]	@ (8009df8 <EventDebugLog+0x23c>)
 8009db6:	2410      	movs	r4, #16
 8009db8:	2330      	movs	r3, #48	@ 0x30
 8009dba:	18e3      	adds	r3, r4, r3
 8009dbc:	19db      	adds	r3, r3, r7
 8009dbe:	0011      	movs	r1, r2
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	f00e fb33 	bl	801842c <f_puts>
 8009dc6:	0003      	movs	r3, r0
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	4b0c      	ldr	r3, [pc, #48]	@ (8009dfc <EventDebugLog+0x240>)
 8009dcc:	701a      	strb	r2, [r3, #0]
	f_close (&fil);
 8009dce:	4b0a      	ldr	r3, [pc, #40]	@ (8009df8 <EventDebugLog+0x23c>)
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f00e f84c 	bl	8017e6e <f_close>
	clear_buffer();
 8009dd6:	f7fa f89b 	bl	8003f10 <clear_buffer>
//	}
//	#endif
}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b05d      	add	sp, #372	@ 0x174
 8009de0:	bcf0      	pop	{r4, r5, r6, r7}
 8009de2:	46bb      	mov	fp, r7
 8009de4:	46b2      	mov	sl, r6
 8009de6:	46a9      	mov	r9, r5
 8009de8:	46a0      	mov	r8, r4
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dec:	20000c14 	.word	0x20000c14
 8009df0:	20000c84 	.word	0x20000c84
 8009df4:	08019188 	.word	0x08019188
 8009df8:	20001ef8 	.word	0x20001ef8
 8009dfc:	20002f28 	.word	0x20002f28
 8009e00:	08019198 	.word	0x08019198
 8009e04:	20000d32 	.word	0x20000d32
 8009e08:	20000c90 	.word	0x20000c90
 8009e0c:	20000c91 	.word	0x20000c91
 8009e10:	20000c92 	.word	0x20000c92
 8009e14:	20000c8d 	.word	0x20000c8d
 8009e18:	20000d31 	.word	0x20000d31
 8009e1c:	20000244 	.word	0x20000244
 8009e20:	20000d33 	.word	0x20000d33
 8009e24:	20000cdc 	.word	0x20000cdc
 8009e28:	20000ce4 	.word	0x20000ce4
 8009e2c:	20000cd0 	.word	0x20000cd0
 8009e30:	20000ca8 	.word	0x20000ca8
 8009e34:	0801927c 	.word	0x0801927c

08009e38 <BCD2ASC>:


void BCD2ASC(uint8_t *asc, const uint8_t *bcd, uint32_t len)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
	uint8_t c = 0;
 8009e44:	2316      	movs	r3, #22
 8009e46:	18fb      	adds	r3, r7, r3
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	static uint8_t bcd2ascii[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

	for (i = 0; i < len; i++)
 8009e4c:	2317      	movs	r3, #23
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e024      	b.n	8009ea0 <BCD2ASC+0x68>
	{
		//first bcd
		c = *bcd >> 4;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	2016      	movs	r0, #22
 8009e5c:	183b      	adds	r3, r7, r0
 8009e5e:	0912      	lsrs	r2, r2, #4
 8009e60:	701a      	strb	r2, [r3, #0]
		*asc++ = bcd2ascii[c];
 8009e62:	183b      	adds	r3, r7, r0
 8009e64:	781a      	ldrb	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	1c59      	adds	r1, r3, #1
 8009e6a:	60f9      	str	r1, [r7, #12]
 8009e6c:	4912      	ldr	r1, [pc, #72]	@ (8009eb8 <BCD2ASC+0x80>)
 8009e6e:	5c8a      	ldrb	r2, [r1, r2]
 8009e70:	701a      	strb	r2, [r3, #0]

		//second bcd
		c = *bcd & 0x0F;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	183b      	adds	r3, r7, r0
 8009e78:	210f      	movs	r1, #15
 8009e7a:	400a      	ands	r2, r1
 8009e7c:	701a      	strb	r2, [r3, #0]
		*asc++ = bcd2ascii[c];
 8009e7e:	183b      	adds	r3, r7, r0
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1c59      	adds	r1, r3, #1
 8009e86:	60f9      	str	r1, [r7, #12]
 8009e88:	490b      	ldr	r1, [pc, #44]	@ (8009eb8 <BCD2ASC+0x80>)
 8009e8a:	5c8a      	ldrb	r2, [r1, r2]
 8009e8c:	701a      	strb	r2, [r3, #0]
		bcd++;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
 8009e94:	2117      	movs	r1, #23
 8009e96:	187b      	adds	r3, r7, r1
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	187b      	adds	r3, r7, r1
 8009e9c:	3201      	adds	r2, #1
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	2317      	movs	r3, #23
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d8d4      	bhi.n	8009e56 <BCD2ASC+0x1e>
	}
}
 8009eac:	46c0      	nop			@ (mov r8, r8)
 8009eae:	46c0      	nop			@ (mov r8, r8)
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b006      	add	sp, #24
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	20000488 	.word	0x20000488

08009ebc <Dur_hms_cal>:
	temp = (((data/10) << 4) + (data%10));
	return temp;
}

void Dur_hms_cal()
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
	sec++;
 8009ec0:	4b56      	ldr	r3, [pc, #344]	@ (800a01c <Dur_hms_cal+0x160>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	4b54      	ldr	r3, [pc, #336]	@ (800a01c <Dur_hms_cal+0x160>)
 8009eca:	701a      	strb	r2, [r3, #0]
	if(sec == 60)
 8009ecc:	4b53      	ldr	r3, [pc, #332]	@ (800a01c <Dur_hms_cal+0x160>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b3c      	cmp	r3, #60	@ 0x3c
 8009ed2:	d108      	bne.n	8009ee6 <Dur_hms_cal+0x2a>
	{
		min++;
 8009ed4:	4b52      	ldr	r3, [pc, #328]	@ (800a020 <Dur_hms_cal+0x164>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	4b50      	ldr	r3, [pc, #320]	@ (800a020 <Dur_hms_cal+0x164>)
 8009ede:	701a      	strb	r2, [r3, #0]
		sec = 0;
 8009ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800a01c <Dur_hms_cal+0x160>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
	}
	if(min == 60)
 8009ee6:	4b4e      	ldr	r3, [pc, #312]	@ (800a020 <Dur_hms_cal+0x164>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b3c      	cmp	r3, #60	@ 0x3c
 8009eec:	d108      	bne.n	8009f00 <Dur_hms_cal+0x44>
	{
		hou++;
 8009eee:	4b4d      	ldr	r3, [pc, #308]	@ (800a024 <Dur_hms_cal+0x168>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	4b4b      	ldr	r3, [pc, #300]	@ (800a024 <Dur_hms_cal+0x168>)
 8009ef8:	701a      	strb	r2, [r3, #0]
		min = 0;
 8009efa:	4b49      	ldr	r3, [pc, #292]	@ (800a020 <Dur_hms_cal+0x164>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
//	if(hou == 24)
//	{
//		hou = 0;
//	}
	//display limit - duration 99:59:59
	if(hou >= 99)
 8009f00:	4b48      	ldr	r3, [pc, #288]	@ (800a024 <Dur_hms_cal+0x168>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b62      	cmp	r3, #98	@ 0x62
 8009f06:	d908      	bls.n	8009f1a <Dur_hms_cal+0x5e>
	{
		hou = 99;
 8009f08:	4b46      	ldr	r3, [pc, #280]	@ (800a024 <Dur_hms_cal+0x168>)
 8009f0a:	2263      	movs	r2, #99	@ 0x63
 8009f0c:	701a      	strb	r2, [r3, #0]
		min = 59;
 8009f0e:	4b44      	ldr	r3, [pc, #272]	@ (800a020 <Dur_hms_cal+0x164>)
 8009f10:	223b      	movs	r2, #59	@ 0x3b
 8009f12:	701a      	strb	r2, [r3, #0]
		sec = 59;
 8009f14:	4b41      	ldr	r3, [pc, #260]	@ (800a01c <Dur_hms_cal+0x160>)
 8009f16:	223b      	movs	r2, #59	@ 0x3b
 8009f18:	701a      	strb	r2, [r3, #0]
	}

	sec_1 = (sec / 1 % 10) + 0x30;
 8009f1a:	4b40      	ldr	r3, [pc, #256]	@ (800a01c <Dur_hms_cal+0x160>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	210a      	movs	r1, #10
 8009f20:	0018      	movs	r0, r3
 8009f22:	f7f6 f987 	bl	8000234 <__aeabi_uidivmod>
 8009f26:	000b      	movs	r3, r1
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	3330      	adds	r3, #48	@ 0x30
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	4b3e      	ldr	r3, [pc, #248]	@ (800a028 <Dur_hms_cal+0x16c>)
 8009f30:	801a      	strh	r2, [r3, #0]
	sec_10 = (sec / 10 % 10) + 0x30;
 8009f32:	4b3a      	ldr	r3, [pc, #232]	@ (800a01c <Dur_hms_cal+0x160>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	210a      	movs	r1, #10
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f7f6 f8f5 	bl	8000128 <__udivsi3>
 8009f3e:	0003      	movs	r3, r0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	210a      	movs	r1, #10
 8009f44:	0018      	movs	r0, r3
 8009f46:	f7f6 f975 	bl	8000234 <__aeabi_uidivmod>
 8009f4a:	000b      	movs	r3, r1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	3330      	adds	r3, #48	@ 0x30
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	4b36      	ldr	r3, [pc, #216]	@ (800a02c <Dur_hms_cal+0x170>)
 8009f54:	801a      	strh	r2, [r3, #0]
	min_1 = (min / 1 % 10) + 0x30;
 8009f56:	4b32      	ldr	r3, [pc, #200]	@ (800a020 <Dur_hms_cal+0x164>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	210a      	movs	r1, #10
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f7f6 f969 	bl	8000234 <__aeabi_uidivmod>
 8009f62:	000b      	movs	r3, r1
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	3330      	adds	r3, #48	@ 0x30
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	4b31      	ldr	r3, [pc, #196]	@ (800a030 <Dur_hms_cal+0x174>)
 8009f6c:	801a      	strh	r2, [r3, #0]
	min_10 = (min / 10 % 10) + 0x30;
 8009f6e:	4b2c      	ldr	r3, [pc, #176]	@ (800a020 <Dur_hms_cal+0x164>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	210a      	movs	r1, #10
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7f6 f8d7 	bl	8000128 <__udivsi3>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	210a      	movs	r1, #10
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7f6 f957 	bl	8000234 <__aeabi_uidivmod>
 8009f86:	000b      	movs	r3, r1
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	3330      	adds	r3, #48	@ 0x30
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	4b29      	ldr	r3, [pc, #164]	@ (800a034 <Dur_hms_cal+0x178>)
 8009f90:	801a      	strh	r2, [r3, #0]
	hou_1 = (hou / 1 % 10) + 0x30;
 8009f92:	4b24      	ldr	r3, [pc, #144]	@ (800a024 <Dur_hms_cal+0x168>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	210a      	movs	r1, #10
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f7f6 f94b 	bl	8000234 <__aeabi_uidivmod>
 8009f9e:	000b      	movs	r3, r1
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	3330      	adds	r3, #48	@ 0x30
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	4b24      	ldr	r3, [pc, #144]	@ (800a038 <Dur_hms_cal+0x17c>)
 8009fa8:	801a      	strh	r2, [r3, #0]
	hou_10 = (hou / 10 % 10) + 0x30;
 8009faa:	4b1e      	ldr	r3, [pc, #120]	@ (800a024 <Dur_hms_cal+0x168>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	210a      	movs	r1, #10
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7f6 f8b9 	bl	8000128 <__udivsi3>
 8009fb6:	0003      	movs	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	210a      	movs	r1, #10
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f7f6 f939 	bl	8000234 <__aeabi_uidivmod>
 8009fc2:	000b      	movs	r3, r1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	3330      	adds	r3, #48	@ 0x30
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b1c      	ldr	r3, [pc, #112]	@ (800a03c <Dur_hms_cal+0x180>)
 8009fcc:	801a      	strh	r2, [r3, #0]

	Dur_HMS[13] = sec_1;
 8009fce:	4b16      	ldr	r3, [pc, #88]	@ (800a028 <Dur_hms_cal+0x16c>)
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	4b1a      	ldr	r3, [pc, #104]	@ (800a040 <Dur_hms_cal+0x184>)
 8009fd6:	735a      	strb	r2, [r3, #13]
	Dur_HMS[12] = sec_10;
 8009fd8:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <Dur_hms_cal+0x170>)
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	4b18      	ldr	r3, [pc, #96]	@ (800a040 <Dur_hms_cal+0x184>)
 8009fe0:	731a      	strb	r2, [r3, #12]
	Dur_HMS[10] = min_1;
 8009fe2:	4b13      	ldr	r3, [pc, #76]	@ (800a030 <Dur_hms_cal+0x174>)
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	4b15      	ldr	r3, [pc, #84]	@ (800a040 <Dur_hms_cal+0x184>)
 8009fea:	729a      	strb	r2, [r3, #10]
	Dur_HMS[9] = min_10;
 8009fec:	4b11      	ldr	r3, [pc, #68]	@ (800a034 <Dur_hms_cal+0x178>)
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	4b13      	ldr	r3, [pc, #76]	@ (800a040 <Dur_hms_cal+0x184>)
 8009ff4:	725a      	strb	r2, [r3, #9]
	Dur_HMS[7] = hou_1;
 8009ff6:	4b10      	ldr	r3, [pc, #64]	@ (800a038 <Dur_hms_cal+0x17c>)
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	4b10      	ldr	r3, [pc, #64]	@ (800a040 <Dur_hms_cal+0x184>)
 8009ffe:	71da      	strb	r2, [r3, #7]
	Dur_HMS[6] = hou_10;
 800a000:	4b0e      	ldr	r3, [pc, #56]	@ (800a03c <Dur_hms_cal+0x180>)
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	b2da      	uxtb	r2, r3
 800a006:	4b0e      	ldr	r3, [pc, #56]	@ (800a040 <Dur_hms_cal+0x184>)
 800a008:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x20);
 800a00a:	490d      	ldr	r1, [pc, #52]	@ (800a040 <Dur_hms_cal+0x184>)
 800a00c:	480d      	ldr	r0, [pc, #52]	@ (800a044 <Dur_hms_cal+0x188>)
 800a00e:	2320      	movs	r3, #32
 800a010:	220e      	movs	r2, #14
 800a012:	f008 ff87 	bl	8012f24 <HAL_UART_Transmit>
}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000ab4 	.word	0x20000ab4
 800a020:	20000ab5 	.word	0x20000ab5
 800a024:	20000ab6 	.word	0x20000ab6
 800a028:	20000ab8 	.word	0x20000ab8
 800a02c:	20000aba 	.word	0x20000aba
 800a030:	20000abc 	.word	0x20000abc
 800a034:	20000abe 	.word	0x20000abe
 800a038:	20000ac0 	.word	0x20000ac0
 800a03c:	20000ac2 	.word	0x20000ac2
 800a040:	2000005c 	.word	0x2000005c
 800a044:	2000064c 	.word	0x2000064c

0800a048 <Read_Pulse>:

void Read_Pulse(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
	//change Width_min from 6000 to 2000
	if ((Width != 0) && (Width >= 10000 || Width <= 2000))
 800a04c:	4b2e      	ldr	r3, [pc, #184]	@ (800a108 <Read_Pulse+0xc0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00d      	beq.n	800a070 <Read_Pulse+0x28>
 800a054:	4b2c      	ldr	r3, [pc, #176]	@ (800a108 <Read_Pulse+0xc0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a2c      	ldr	r2, [pc, #176]	@ (800a10c <Read_Pulse+0xc4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d805      	bhi.n	800a06a <Read_Pulse+0x22>
 800a05e:	4b2a      	ldr	r3, [pc, #168]	@ (800a108 <Read_Pulse+0xc0>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	23fa      	movs	r3, #250	@ 0xfa
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	429a      	cmp	r2, r3
 800a068:	d802      	bhi.n	800a070 <Read_Pulse+0x28>
	{
		last_pulse = 1;
 800a06a:	4b29      	ldr	r3, [pc, #164]	@ (800a110 <Read_Pulse+0xc8>)
 800a06c:	2201      	movs	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]
	}

	if ((Width != 0) && (Width >= 10000 || Width <= 2000) && (last_pulse == 1))
 800a070:	4b25      	ldr	r3, [pc, #148]	@ (800a108 <Read_Pulse+0xc0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d015      	beq.n	800a0a4 <Read_Pulse+0x5c>
 800a078:	4b23      	ldr	r3, [pc, #140]	@ (800a108 <Read_Pulse+0xc0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a23      	ldr	r2, [pc, #140]	@ (800a10c <Read_Pulse+0xc4>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d805      	bhi.n	800a08e <Read_Pulse+0x46>
 800a082:	4b21      	ldr	r3, [pc, #132]	@ (800a108 <Read_Pulse+0xc0>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	23fa      	movs	r3, #250	@ 0xfa
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d80a      	bhi.n	800a0a4 <Read_Pulse+0x5c>
 800a08e:	4b20      	ldr	r3, [pc, #128]	@ (800a110 <Read_Pulse+0xc8>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d106      	bne.n	800a0a4 <Read_Pulse+0x5c>
	{
		Tamper_Counter++;
 800a096:	4b1f      	ldr	r3, [pc, #124]	@ (800a114 <Read_Pulse+0xcc>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	3301      	adds	r3, #1
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	4b1d      	ldr	r3, [pc, #116]	@ (800a114 <Read_Pulse+0xcc>)
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e02e      	b.n	800a102 <Read_Pulse+0xba>
	}
	else if (Speed >= Speed_max) //150
 800a0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800a118 <Read_Pulse+0xd0>)
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f7f7 f9bf 	bl	800142c <__aeabi_i2f>
 800a0ae:	1c02      	adds	r2, r0, #0
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a11c <Read_Pulse+0xd4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	1c19      	adds	r1, r3, #0
 800a0b6:	1c10      	adds	r0, r2, #0
 800a0b8:	f7f6 fa06 	bl	80004c8 <__aeabi_fcmple>
 800a0bc:	1e03      	subs	r3, r0, #0
 800a0be:	d006      	beq.n	800a0ce <Read_Pulse+0x86>
	{
		Tamper_Counter++;
 800a0c0:	4b14      	ldr	r3, [pc, #80]	@ (800a114 <Read_Pulse+0xcc>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <Read_Pulse+0xcc>)
 800a0ca:	701a      	strb	r2, [r3, #0]
	else
	{
		last_pulse = 0;
		Tamper_Counter = 0;
	}
}
 800a0cc:	e019      	b.n	800a102 <Read_Pulse+0xba>
	else if (flag_tester && (Speed >= 120))
 800a0ce:	4b14      	ldr	r3, [pc, #80]	@ (800a120 <Read_Pulse+0xd8>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <Read_Pulse+0xac>
 800a0d6:	4b11      	ldr	r3, [pc, #68]	@ (800a11c <Read_Pulse+0xd4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4912      	ldr	r1, [pc, #72]	@ (800a124 <Read_Pulse+0xdc>)
 800a0dc:	1c18      	adds	r0, r3, #0
 800a0de:	f7f6 fa07 	bl	80004f0 <__aeabi_fcmpge>
 800a0e2:	1e03      	subs	r3, r0, #0
 800a0e4:	d006      	beq.n	800a0f4 <Read_Pulse+0xac>
		Tamper_Counter++;
 800a0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a114 <Read_Pulse+0xcc>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <Read_Pulse+0xcc>)
 800a0f0:	701a      	strb	r2, [r3, #0]
 800a0f2:	e006      	b.n	800a102 <Read_Pulse+0xba>
		last_pulse = 0;
 800a0f4:	4b06      	ldr	r3, [pc, #24]	@ (800a110 <Read_Pulse+0xc8>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
		Tamper_Counter = 0;
 800a0fa:	4b06      	ldr	r3, [pc, #24]	@ (800a114 <Read_Pulse+0xcc>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
}
 800a100:	e7ff      	b.n	800a102 <Read_Pulse+0xba>
 800a102:	46c0      	nop			@ (mov r8, r8)
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000ca8 	.word	0x20000ca8
 800a10c:	0000270f 	.word	0x0000270f
 800a110:	20000d34 	.word	0x20000d34
 800a114:	20000d33 	.word	0x20000d33
 800a118:	20000242 	.word	0x20000242
 800a11c:	20000cd0 	.word	0x20000cd0
 800a120:	200033cf 	.word	0x200033cf
 800a124:	42f00000 	.word	0x42f00000

0800a128 <Read_Distance>:

void Read_Distance(void)
{
 800a128:	b5b0      	push	{r4, r5, r7, lr}
 800a12a:	af00      	add	r7, sp, #0
	Distance = (float) (counter * 1.0 / ck);
 800a12c:	4b1f      	ldr	r3, [pc, #124]	@ (800a1ac <Read_Distance+0x84>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	0018      	movs	r0, r3
 800a132:	f7f9 f87f 	bl	8003234 <__aeabi_ui2d>
 800a136:	0004      	movs	r4, r0
 800a138:	000d      	movs	r5, r1
 800a13a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b0 <Read_Distance+0x88>)
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	0018      	movs	r0, r3
 800a140:	f7f9 f84a 	bl	80031d8 <__aeabi_i2d>
 800a144:	0002      	movs	r2, r0
 800a146:	000b      	movs	r3, r1
 800a148:	0020      	movs	r0, r4
 800a14a:	0029      	movs	r1, r5
 800a14c:	f7f7 fd60 	bl	8001c10 <__aeabi_ddiv>
 800a150:	0002      	movs	r2, r0
 800a152:	000b      	movs	r3, r1
 800a154:	0010      	movs	r0, r2
 800a156:	0019      	movs	r1, r3
 800a158:	f7f9 f8d8 	bl	800330c <__aeabi_d2f>
 800a15c:	1c02      	adds	r2, r0, #0
 800a15e:	4b15      	ldr	r3, [pc, #84]	@ (800a1b4 <Read_Distance+0x8c>)
 800a160:	601a      	str	r2, [r3, #0]
	distance = (float) (counter * 1000.0 / ck);
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <Read_Distance+0x84>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	0018      	movs	r0, r3
 800a168:	f7f9 f864 	bl	8003234 <__aeabi_ui2d>
 800a16c:	2200      	movs	r2, #0
 800a16e:	4b12      	ldr	r3, [pc, #72]	@ (800a1b8 <Read_Distance+0x90>)
 800a170:	f7f8 f992 	bl	8002498 <__aeabi_dmul>
 800a174:	0002      	movs	r2, r0
 800a176:	000b      	movs	r3, r1
 800a178:	0014      	movs	r4, r2
 800a17a:	001d      	movs	r5, r3
 800a17c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b0 <Read_Distance+0x88>)
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	0018      	movs	r0, r3
 800a182:	f7f9 f829 	bl	80031d8 <__aeabi_i2d>
 800a186:	0002      	movs	r2, r0
 800a188:	000b      	movs	r3, r1
 800a18a:	0020      	movs	r0, r4
 800a18c:	0029      	movs	r1, r5
 800a18e:	f7f7 fd3f 	bl	8001c10 <__aeabi_ddiv>
 800a192:	0002      	movs	r2, r0
 800a194:	000b      	movs	r3, r1
 800a196:	0010      	movs	r0, r2
 800a198:	0019      	movs	r1, r3
 800a19a:	f7f9 f8b7 	bl	800330c <__aeabi_d2f>
 800a19e:	1c02      	adds	r2, r0, #0
 800a1a0:	4b06      	ldr	r3, [pc, #24]	@ (800a1bc <Read_Distance+0x94>)
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	46c0      	nop			@ (mov r8, r8)
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1aa:	46c0      	nop			@ (mov r8, r8)
 800a1ac:	20000cdc 	.word	0x20000cdc
 800a1b0:	2000023e 	.word	0x2000023e
 800a1b4:	20000cd4 	.word	0x20000cd4
 800a1b8:	408f4000 	.word	0x408f4000
 800a1bc:	20000cd8 	.word	0x20000cd8

0800a1c0 <Read_Speed>:

void Read_Speed(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
	if(Difference != 0)
 800a1c4:	4b13      	ldr	r3, [pc, #76]	@ (800a214 <Read_Speed+0x54>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01c      	beq.n	800a206 <Read_Speed+0x46>
	{
//		Speed_x = ((float) (1000000 / ck) / Difference) * 3.6;
//		Difference = 0;
		Speed = ((float) (counter - last_counter) * 3.6);
 800a1cc:	4b12      	ldr	r3, [pc, #72]	@ (800a218 <Read_Speed+0x58>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	4b12      	ldr	r3, [pc, #72]	@ (800a21c <Read_Speed+0x5c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7f7 f974 	bl	80014c4 <__aeabi_ui2f>
 800a1dc:	1c03      	adds	r3, r0, #0
 800a1de:	1c18      	adds	r0, r3, #0
 800a1e0:	f7f9 f84c 	bl	800327c <__aeabi_f2d>
 800a1e4:	4a0e      	ldr	r2, [pc, #56]	@ (800a220 <Read_Speed+0x60>)
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <Read_Speed+0x64>)
 800a1e8:	f7f8 f956 	bl	8002498 <__aeabi_dmul>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	000b      	movs	r3, r1
 800a1f0:	0010      	movs	r0, r2
 800a1f2:	0019      	movs	r1, r3
 800a1f4:	f7f9 f88a 	bl	800330c <__aeabi_d2f>
 800a1f8:	1c02      	adds	r2, r0, #0
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a228 <Read_Speed+0x68>)
 800a1fc:	601a      	str	r2, [r3, #0]
		Difference = 0;
 800a1fe:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <Read_Speed+0x54>)
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
	else
	{
		Speed = 0;
//		Speed_x = 0;
	}
}
 800a204:	e002      	b.n	800a20c <Read_Speed+0x4c>
		Speed = 0;
 800a206:	4b08      	ldr	r3, [pc, #32]	@ (800a228 <Read_Speed+0x68>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
}
 800a20c:	46c0      	nop			@ (mov r8, r8)
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	46c0      	nop			@ (mov r8, r8)
 800a214:	20000ca4 	.word	0x20000ca4
 800a218:	20000cdc 	.word	0x20000cdc
 800a21c:	20000ce4 	.word	0x20000ce4
 800a220:	cccccccd 	.word	0xcccccccd
 800a224:	400ccccc 	.word	0x400ccccc
 800a228:	20000cd0 	.word	0x20000cd0

0800a22c <Fare_Calculation>:

void Fare_Calculation(void)
{
 800a22c:	b590      	push	{r4, r7, lr}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
	//anti-tampering check
	Read_Pulse();
 800a232:	f7ff ff09 	bl	800a048 <Read_Pulse>
	Read_Distance();
 800a236:	f7ff ff77 	bl	800a128 <Read_Distance>
	Read_Speed();
 800a23a:	f7ff ffc1 	bl	800a1c0 <Read_Speed>

	if (Tamper_Counter >= 5)
 800a23e:	4bcc      	ldr	r3, [pc, #816]	@ (800a570 <Fare_Calculation+0x344>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b04      	cmp	r3, #4
 800a244:	d800      	bhi.n	800a248 <Fare_Calculation+0x1c>
 800a246:	e0d7      	b.n	800a3f8 <Fare_Calculation+0x1cc>
	{
		//record tamper data to SD card
		//TAMPER
		SD_buffer[34] = 0x54;
 800a248:	4bca      	ldr	r3, [pc, #808]	@ (800a574 <Fare_Calculation+0x348>)
 800a24a:	2222      	movs	r2, #34	@ 0x22
 800a24c:	2154      	movs	r1, #84	@ 0x54
 800a24e:	5499      	strb	r1, [r3, r2]
		SD_buffer[35] = 0x41;
 800a250:	4bc8      	ldr	r3, [pc, #800]	@ (800a574 <Fare_Calculation+0x348>)
 800a252:	2223      	movs	r2, #35	@ 0x23
 800a254:	2141      	movs	r1, #65	@ 0x41
 800a256:	5499      	strb	r1, [r3, r2]
		SD_buffer[36] = 0x4D;
 800a258:	4bc6      	ldr	r3, [pc, #792]	@ (800a574 <Fare_Calculation+0x348>)
 800a25a:	2224      	movs	r2, #36	@ 0x24
 800a25c:	214d      	movs	r1, #77	@ 0x4d
 800a25e:	5499      	strb	r1, [r3, r2]
		SD_buffer[37] = 0x50;
 800a260:	4bc4      	ldr	r3, [pc, #784]	@ (800a574 <Fare_Calculation+0x348>)
 800a262:	2225      	movs	r2, #37	@ 0x25
 800a264:	2150      	movs	r1, #80	@ 0x50
 800a266:	5499      	strb	r1, [r3, r2]
		SD_buffer[38] = 0x45;
 800a268:	4bc2      	ldr	r3, [pc, #776]	@ (800a574 <Fare_Calculation+0x348>)
 800a26a:	2226      	movs	r2, #38	@ 0x26
 800a26c:	2145      	movs	r1, #69	@ 0x45
 800a26e:	5499      	strb	r1, [r3, r2]
		SD_buffer[39] = 0x52;
 800a270:	4bc0      	ldr	r3, [pc, #768]	@ (800a574 <Fare_Calculation+0x348>)
 800a272:	2227      	movs	r2, #39	@ 0x27
 800a274:	2152      	movs	r1, #82	@ 0x52
 800a276:	5499      	strb	r1, [r3, r2]
		SD_buffer[40] = 0x20;
 800a278:	4bbe      	ldr	r3, [pc, #760]	@ (800a574 <Fare_Calculation+0x348>)
 800a27a:	2228      	movs	r2, #40	@ 0x28
 800a27c:	2120      	movs	r1, #32
 800a27e:	5499      	strb	r1, [r3, r2]
		//speed & width
		speed_d = (Speed * 100) / 10;
 800a280:	4bbd      	ldr	r3, [pc, #756]	@ (800a578 <Fare_Calculation+0x34c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	49bd      	ldr	r1, [pc, #756]	@ (800a57c <Fare_Calculation+0x350>)
 800a286:	1c18      	adds	r0, r3, #0
 800a288:	f7f6 fdce 	bl	8000e28 <__aeabi_fmul>
 800a28c:	1c03      	adds	r3, r0, #0
 800a28e:	49bc      	ldr	r1, [pc, #752]	@ (800a580 <Fare_Calculation+0x354>)
 800a290:	1c18      	adds	r0, r3, #0
 800a292:	f7f6 fbe3 	bl	8000a5c <__aeabi_fdiv>
 800a296:	1c03      	adds	r3, r0, #0
 800a298:	1c18      	adds	r0, r3, #0
 800a29a:	f7f6 f953 	bl	8000544 <__aeabi_f2uiz>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	4bb8      	ldr	r3, [pc, #736]	@ (800a584 <Fare_Calculation+0x358>)
 800a2a2:	601a      	str	r2, [r3, #0]
		Dec2ASC(speed_d, speed_a);
 800a2a4:	4bb7      	ldr	r3, [pc, #732]	@ (800a584 <Fare_Calculation+0x358>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4ab7      	ldr	r2, [pc, #732]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2aa:	0011      	movs	r1, r2
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f000 fc1b 	bl	800aae8 <Dec2ASC>
		if (speed_a[4] == 0)
 800a2b2:	4bb5      	ldr	r3, [pc, #724]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2b4:	791b      	ldrb	r3, [r3, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d104      	bne.n	800a2c4 <Fare_Calculation+0x98>
			SD_buffer[41] = 0x20;
 800a2ba:	4bae      	ldr	r3, [pc, #696]	@ (800a574 <Fare_Calculation+0x348>)
 800a2bc:	2229      	movs	r2, #41	@ 0x29
 800a2be:	2120      	movs	r1, #32
 800a2c0:	5499      	strb	r1, [r3, r2]
 800a2c2:	e004      	b.n	800a2ce <Fare_Calculation+0xa2>
		else
			SD_buffer[41] = speed_a[4];
 800a2c4:	4bb0      	ldr	r3, [pc, #704]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2c6:	7919      	ldrb	r1, [r3, #4]
 800a2c8:	4baa      	ldr	r3, [pc, #680]	@ (800a574 <Fare_Calculation+0x348>)
 800a2ca:	2229      	movs	r2, #41	@ 0x29
 800a2cc:	5499      	strb	r1, [r3, r2]
		if (speed_a[5] == 0)
 800a2ce:	4bae      	ldr	r3, [pc, #696]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2d0:	795b      	ldrb	r3, [r3, #5]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d104      	bne.n	800a2e0 <Fare_Calculation+0xb4>
			SD_buffer[42] = 0x20;
 800a2d6:	4ba7      	ldr	r3, [pc, #668]	@ (800a574 <Fare_Calculation+0x348>)
 800a2d8:	222a      	movs	r2, #42	@ 0x2a
 800a2da:	2120      	movs	r1, #32
 800a2dc:	5499      	strb	r1, [r3, r2]
 800a2de:	e004      	b.n	800a2ea <Fare_Calculation+0xbe>
		else
			SD_buffer[42] = speed_a[5];
 800a2e0:	4ba9      	ldr	r3, [pc, #676]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2e2:	7959      	ldrb	r1, [r3, #5]
 800a2e4:	4ba3      	ldr	r3, [pc, #652]	@ (800a574 <Fare_Calculation+0x348>)
 800a2e6:	222a      	movs	r2, #42	@ 0x2a
 800a2e8:	5499      	strb	r1, [r3, r2]
		if (speed_a[6] == 0)
 800a2ea:	4ba7      	ldr	r3, [pc, #668]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2ec:	799b      	ldrb	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <Fare_Calculation+0xd0>
			SD_buffer[43] = 0x30;
 800a2f2:	4ba0      	ldr	r3, [pc, #640]	@ (800a574 <Fare_Calculation+0x348>)
 800a2f4:	222b      	movs	r2, #43	@ 0x2b
 800a2f6:	2130      	movs	r1, #48	@ 0x30
 800a2f8:	5499      	strb	r1, [r3, r2]
 800a2fa:	e004      	b.n	800a306 <Fare_Calculation+0xda>
		else
			SD_buffer[43] = speed_a[6];
 800a2fc:	4ba2      	ldr	r3, [pc, #648]	@ (800a588 <Fare_Calculation+0x35c>)
 800a2fe:	7999      	ldrb	r1, [r3, #6]
 800a300:	4b9c      	ldr	r3, [pc, #624]	@ (800a574 <Fare_Calculation+0x348>)
 800a302:	222b      	movs	r2, #43	@ 0x2b
 800a304:	5499      	strb	r1, [r3, r2]
		SD_buffer[44] = 0x2E;
 800a306:	4b9b      	ldr	r3, [pc, #620]	@ (800a574 <Fare_Calculation+0x348>)
 800a308:	222c      	movs	r2, #44	@ 0x2c
 800a30a:	212e      	movs	r1, #46	@ 0x2e
 800a30c:	5499      	strb	r1, [r3, r2]
		SD_buffer[45] = speed_a[7];
 800a30e:	4b9e      	ldr	r3, [pc, #632]	@ (800a588 <Fare_Calculation+0x35c>)
 800a310:	79d9      	ldrb	r1, [r3, #7]
 800a312:	4b98      	ldr	r3, [pc, #608]	@ (800a574 <Fare_Calculation+0x348>)
 800a314:	222d      	movs	r2, #45	@ 0x2d
 800a316:	5499      	strb	r1, [r3, r2]
		SD_buffer[46] = 0x20;
 800a318:	4b96      	ldr	r3, [pc, #600]	@ (800a574 <Fare_Calculation+0x348>)
 800a31a:	222e      	movs	r2, #46	@ 0x2e
 800a31c:	2120      	movs	r1, #32
 800a31e:	5499      	strb	r1, [r3, r2]

		Dec2ASC(Width, width_a);
 800a320:	4b9a      	ldr	r3, [pc, #616]	@ (800a58c <Fare_Calculation+0x360>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a9a      	ldr	r2, [pc, #616]	@ (800a590 <Fare_Calculation+0x364>)
 800a326:	0011      	movs	r1, r2
 800a328:	0018      	movs	r0, r3
 800a32a:	f000 fbdd 	bl	800aae8 <Dec2ASC>
		if (width_a[3] == 0)
 800a32e:	4b98      	ldr	r3, [pc, #608]	@ (800a590 <Fare_Calculation+0x364>)
 800a330:	78db      	ldrb	r3, [r3, #3]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d104      	bne.n	800a340 <Fare_Calculation+0x114>
			SD_buffer[47] = 0x20;
 800a336:	4b8f      	ldr	r3, [pc, #572]	@ (800a574 <Fare_Calculation+0x348>)
 800a338:	222f      	movs	r2, #47	@ 0x2f
 800a33a:	2120      	movs	r1, #32
 800a33c:	5499      	strb	r1, [r3, r2]
 800a33e:	e004      	b.n	800a34a <Fare_Calculation+0x11e>
		else
			SD_buffer[47] = width_a[3];
 800a340:	4b93      	ldr	r3, [pc, #588]	@ (800a590 <Fare_Calculation+0x364>)
 800a342:	78d9      	ldrb	r1, [r3, #3]
 800a344:	4b8b      	ldr	r3, [pc, #556]	@ (800a574 <Fare_Calculation+0x348>)
 800a346:	222f      	movs	r2, #47	@ 0x2f
 800a348:	5499      	strb	r1, [r3, r2]
		SD_buffer[48] = width_a[4];
 800a34a:	4b91      	ldr	r3, [pc, #580]	@ (800a590 <Fare_Calculation+0x364>)
 800a34c:	7919      	ldrb	r1, [r3, #4]
 800a34e:	4b89      	ldr	r3, [pc, #548]	@ (800a574 <Fare_Calculation+0x348>)
 800a350:	2230      	movs	r2, #48	@ 0x30
 800a352:	5499      	strb	r1, [r3, r2]
		SD_buffer[49] = width_a[5];
 800a354:	4b8e      	ldr	r3, [pc, #568]	@ (800a590 <Fare_Calculation+0x364>)
 800a356:	7959      	ldrb	r1, [r3, #5]
 800a358:	4b86      	ldr	r3, [pc, #536]	@ (800a574 <Fare_Calculation+0x348>)
 800a35a:	2231      	movs	r2, #49	@ 0x31
 800a35c:	5499      	strb	r1, [r3, r2]
		SD_buffer[50] = width_a[6];
 800a35e:	4b8c      	ldr	r3, [pc, #560]	@ (800a590 <Fare_Calculation+0x364>)
 800a360:	7999      	ldrb	r1, [r3, #6]
 800a362:	4b84      	ldr	r3, [pc, #528]	@ (800a574 <Fare_Calculation+0x348>)
 800a364:	2232      	movs	r2, #50	@ 0x32
 800a366:	5499      	strb	r1, [r3, r2]
		SD_buffer[51] = width_a[7];
 800a368:	4b89      	ldr	r3, [pc, #548]	@ (800a590 <Fare_Calculation+0x364>)
 800a36a:	79d9      	ldrb	r1, [r3, #7]
 800a36c:	4b81      	ldr	r3, [pc, #516]	@ (800a574 <Fare_Calculation+0x348>)
 800a36e:	2233      	movs	r2, #51	@ 0x33
 800a370:	5499      	strb	r1, [r3, r2]
		SD_buffer[52] = 0x20;
 800a372:	4b80      	ldr	r3, [pc, #512]	@ (800a574 <Fare_Calculation+0x348>)
 800a374:	2234      	movs	r2, #52	@ 0x34
 800a376:	2120      	movs	r1, #32
 800a378:	5499      	strb	r1, [r3, r2]

		SD_buffer[53] = 0x0A;
 800a37a:	4b7e      	ldr	r3, [pc, #504]	@ (800a574 <Fare_Calculation+0x348>)
 800a37c:	2235      	movs	r2, #53	@ 0x35
 800a37e:	210a      	movs	r1, #10
 800a380:	5499      	strb	r1, [r3, r2]
		fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800a382:	4984      	ldr	r1, [pc, #528]	@ (800a594 <Fare_Calculation+0x368>)
 800a384:	4b84      	ldr	r3, [pc, #528]	@ (800a598 <Fare_Calculation+0x36c>)
 800a386:	2203      	movs	r2, #3
 800a388:	0018      	movs	r0, r3
 800a38a:	f00d f947 	bl	801761c <f_open>
 800a38e:	0003      	movs	r3, r0
 800a390:	001a      	movs	r2, r3
 800a392:	4b82      	ldr	r3, [pc, #520]	@ (800a59c <Fare_Calculation+0x370>)
 800a394:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 800a396:	4b80      	ldr	r3, [pc, #512]	@ (800a598 <Fare_Calculation+0x36c>)
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	4b7f      	ldr	r3, [pc, #508]	@ (800a598 <Fare_Calculation+0x36c>)
 800a39c:	0011      	movs	r1, r2
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f00d fd99 	bl	8017ed6 <f_lseek>
 800a3a4:	0003      	movs	r3, r0
 800a3a6:	001a      	movs	r2, r3
 800a3a8:	4b7c      	ldr	r3, [pc, #496]	@ (800a59c <Fare_Calculation+0x370>)
 800a3aa:	701a      	strb	r2, [r3, #0]
//		fresult = f_puts("AB1234 A000001 2023-07-18 18:18:30 TAMPER 180.0 15000\n", &fil);
		char const * tp = (const char*)&SD_buffer;
 800a3ac:	4b71      	ldr	r3, [pc, #452]	@ (800a574 <Fare_Calculation+0x348>)
 800a3ae:	607b      	str	r3, [r7, #4]
		fresult = f_puts(tp, &fil);
 800a3b0:	4a79      	ldr	r2, [pc, #484]	@ (800a598 <Fare_Calculation+0x36c>)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	0011      	movs	r1, r2
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f00e f838 	bl	801842c <f_puts>
 800a3bc:	0003      	movs	r3, r0
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b76      	ldr	r3, [pc, #472]	@ (800a59c <Fare_Calculation+0x370>)
 800a3c2:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 800a3c4:	4b74      	ldr	r3, [pc, #464]	@ (800a598 <Fare_Calculation+0x36c>)
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f00d fd51 	bl	8017e6e <f_close>
		clear_buffer();
 800a3cc:	f7f9 fda0 	bl	8003f10 <clear_buffer>

		Width = 0;
 800a3d0:	4b6e      	ldr	r3, [pc, #440]	@ (800a58c <Fare_Calculation+0x360>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
		Speed = 0;
 800a3d6:	4b68      	ldr	r3, [pc, #416]	@ (800a578 <Fare_Calculation+0x34c>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
//		Speed_x = 0;
		Tamper_Counter = 0;
 800a3dc:	4b64      	ldr	r3, [pc, #400]	@ (800a570 <Fare_Calculation+0x344>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]

		EventDebugLog("Before Normal Lock in Fare Calculation");
 800a3e2:	4b6f      	ldr	r3, [pc, #444]	@ (800a5a0 <Fare_Calculation+0x374>)
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f7ff fbe9 	bl	8009bbc <EventDebugLog>
		Flag_Protect = TRUE;
 800a3ea:	4b6e      	ldr	r3, [pc, #440]	@ (800a5a4 <Fare_Calculation+0x378>)
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	701a      	strb	r2, [r3, #0]
		EventDebugLog("After Normal Lock in Fare Calculation");
 800a3f0:	4b6d      	ldr	r3, [pc, #436]	@ (800a5a8 <Fare_Calculation+0x37c>)
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f7ff fbe2 	bl	8009bbc <EventDebugLog>
	}

	if (fare > Fare_reached || fabs(fare - Fare_reached) <= 1e-3)
 800a3f8:	4b6c      	ldr	r3, [pc, #432]	@ (800a5ac <Fare_Calculation+0x380>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b0 <Fare_Calculation+0x384>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	1c19      	adds	r1, r3, #0
 800a402:	1c10      	adds	r0, r2, #0
 800a404:	f7f6 f86a 	bl	80004dc <__aeabi_fcmpgt>
 800a408:	1e03      	subs	r3, r0, #0
 800a40a:	d113      	bne.n	800a434 <Fare_Calculation+0x208>
 800a40c:	4b67      	ldr	r3, [pc, #412]	@ (800a5ac <Fare_Calculation+0x380>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	4b67      	ldr	r3, [pc, #412]	@ (800a5b0 <Fare_Calculation+0x384>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	1c19      	adds	r1, r3, #0
 800a416:	1c10      	adds	r0, r2, #0
 800a418:	f7f6 fe44 	bl	80010a4 <__aeabi_fsub>
 800a41c:	1c03      	adds	r3, r0, #0
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	1c18      	adds	r0, r3, #0
 800a424:	f7f8 ff2a 	bl	800327c <__aeabi_f2d>
 800a428:	4a62      	ldr	r2, [pc, #392]	@ (800a5b4 <Fare_Calculation+0x388>)
 800a42a:	4b63      	ldr	r3, [pc, #396]	@ (800a5b8 <Fare_Calculation+0x38c>)
 800a42c:	f7f6 f812 	bl	8000454 <__aeabi_dcmple>
 800a430:	1e03      	subs	r3, r0, #0
 800a432:	d004      	beq.n	800a43e <Fare_Calculation+0x212>
		Fi = Fare_200m2; //T2
 800a434:	4b61      	ldr	r3, [pc, #388]	@ (800a5bc <Fare_Calculation+0x390>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	4b61      	ldr	r3, [pc, #388]	@ (800a5c0 <Fare_Calculation+0x394>)
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	e026      	b.n	800a48c <Fare_Calculation+0x260>
	else if (fare > Fare_2km || fabs(fare - Fare_2km) <= 1e-3)
 800a43e:	4b5b      	ldr	r3, [pc, #364]	@ (800a5ac <Fare_Calculation+0x380>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b60      	ldr	r3, [pc, #384]	@ (800a5c4 <Fare_Calculation+0x398>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	1c19      	adds	r1, r3, #0
 800a448:	1c10      	adds	r0, r2, #0
 800a44a:	f7f6 f847 	bl	80004dc <__aeabi_fcmpgt>
 800a44e:	1e03      	subs	r3, r0, #0
 800a450:	d113      	bne.n	800a47a <Fare_Calculation+0x24e>
 800a452:	4b56      	ldr	r3, [pc, #344]	@ (800a5ac <Fare_Calculation+0x380>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	4b5b      	ldr	r3, [pc, #364]	@ (800a5c4 <Fare_Calculation+0x398>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	1c19      	adds	r1, r3, #0
 800a45c:	1c10      	adds	r0, r2, #0
 800a45e:	f7f6 fe21 	bl	80010a4 <__aeabi_fsub>
 800a462:	1c03      	adds	r3, r0, #0
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	085b      	lsrs	r3, r3, #1
 800a468:	1c18      	adds	r0, r3, #0
 800a46a:	f7f8 ff07 	bl	800327c <__aeabi_f2d>
 800a46e:	4a51      	ldr	r2, [pc, #324]	@ (800a5b4 <Fare_Calculation+0x388>)
 800a470:	4b51      	ldr	r3, [pc, #324]	@ (800a5b8 <Fare_Calculation+0x38c>)
 800a472:	f7f5 ffef 	bl	8000454 <__aeabi_dcmple>
 800a476:	1e03      	subs	r3, r0, #0
 800a478:	d004      	beq.n	800a484 <Fare_Calculation+0x258>
		Fi = Fare_200m1; //T1;
 800a47a:	4b53      	ldr	r3, [pc, #332]	@ (800a5c8 <Fare_Calculation+0x39c>)
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	4b50      	ldr	r3, [pc, #320]	@ (800a5c0 <Fare_Calculation+0x394>)
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e003      	b.n	800a48c <Fare_Calculation+0x260>
	else
		Fi = Fare_200m0; //2.70; //2.35;
 800a484:	4b51      	ldr	r3, [pc, #324]	@ (800a5cc <Fare_Calculation+0x3a0>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4b4d      	ldr	r3, [pc, #308]	@ (800a5c0 <Fare_Calculation+0x394>)
 800a48a:	601a      	str	r2, [r3, #0]

	if (Speed <= Speed_co) //12
 800a48c:	4b50      	ldr	r3, [pc, #320]	@ (800a5d0 <Fare_Calculation+0x3a4>)
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	0018      	movs	r0, r3
 800a492:	f7f6 ffcb 	bl	800142c <__aeabi_i2f>
 800a496:	1c02      	adds	r2, r0, #0
 800a498:	4b37      	ldr	r3, [pc, #220]	@ (800a578 <Fare_Calculation+0x34c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	1c19      	adds	r1, r3, #0
 800a49e:	1c10      	adds	r0, r2, #0
 800a4a0:	f7f6 f826 	bl	80004f0 <__aeabi_fcmpge>
 800a4a4:	1e03      	subs	r3, r0, #0
 800a4a6:	d050      	beq.n	800a54a <Fare_Calculation+0x31e>
	{
		if(Drv_state == S_HIRED)
 800a4a8:	4b4a      	ldr	r3, [pc, #296]	@ (800a5d4 <Fare_Calculation+0x3a8>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d11f      	bne.n	800a4f0 <Fare_Calculation+0x2c4>
		{
			last_counter = counter;
 800a4b0:	4b49      	ldr	r3, [pc, #292]	@ (800a5d8 <Fare_Calculation+0x3ac>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	4b49      	ldr	r3, [pc, #292]	@ (800a5dc <Fare_Calculation+0x3b0>)
 800a4b6:	601a      	str	r2, [r3, #0]
//			Fu+=4;
			Fu+=(float)ck/300;
 800a4b8:	4b49      	ldr	r3, [pc, #292]	@ (800a5e0 <Fare_Calculation+0x3b4>)
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f7f7 f801 	bl	80014c4 <__aeabi_ui2f>
 800a4c2:	1c03      	adds	r3, r0, #0
 800a4c4:	4947      	ldr	r1, [pc, #284]	@ (800a5e4 <Fare_Calculation+0x3b8>)
 800a4c6:	1c18      	adds	r0, r3, #0
 800a4c8:	f7f6 fac8 	bl	8000a5c <__aeabi_fdiv>
 800a4cc:	1c03      	adds	r3, r0, #0
 800a4ce:	1c1a      	adds	r2, r3, #0
 800a4d0:	4b45      	ldr	r3, [pc, #276]	@ (800a5e8 <Fare_Calculation+0x3bc>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	1c19      	adds	r1, r3, #0
 800a4d6:	1c10      	adds	r0, r2, #0
 800a4d8:	f7f6 f936 	bl	8000748 <__aeabi_fadd>
 800a4dc:	1c03      	adds	r3, r0, #0
 800a4de:	1c1a      	adds	r2, r3, #0
 800a4e0:	4b41      	ldr	r3, [pc, #260]	@ (800a5e8 <Fare_Calculation+0x3bc>)
 800a4e2:	601a      	str	r2, [r3, #0]
			Ft++;
 800a4e4:	4b41      	ldr	r3, [pc, #260]	@ (800a5ec <Fare_Calculation+0x3c0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	4b40      	ldr	r3, [pc, #256]	@ (800a5ec <Fare_Calculation+0x3c0>)
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e09e      	b.n	800a62e <Fare_Calculation+0x402>
		}
		else
		{
			Dt = counter - last_counter;
 800a4f0:	4b39      	ldr	r3, [pc, #228]	@ (800a5d8 <Fare_Calculation+0x3ac>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	4b39      	ldr	r3, [pc, #228]	@ (800a5dc <Fare_Calculation+0x3b0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	4b3d      	ldr	r3, [pc, #244]	@ (800a5f0 <Fare_Calculation+0x3c4>)
 800a4fc:	601a      	str	r2, [r3, #0]
			DtX = Dt + DtX;
 800a4fe:	4b3c      	ldr	r3, [pc, #240]	@ (800a5f0 <Fare_Calculation+0x3c4>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4b3c      	ldr	r3, [pc, #240]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	18d2      	adds	r2, r2, r3
 800a508:	4b3a      	ldr	r3, [pc, #232]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a50a:	601a      	str	r2, [r3, #0]
			last_counter = counter;
 800a50c:	4b32      	ldr	r3, [pc, #200]	@ (800a5d8 <Fare_Calculation+0x3ac>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	4b32      	ldr	r3, [pc, #200]	@ (800a5dc <Fare_Calculation+0x3b0>)
 800a512:	601a      	str	r2, [r3, #0]
			for (; DtX>0; DtX--)
 800a514:	e014      	b.n	800a540 <Fare_Calculation+0x314>
			{
				Fd++;
 800a516:	4b38      	ldr	r3, [pc, #224]	@ (800a5f8 <Fare_Calculation+0x3cc>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	4b36      	ldr	r3, [pc, #216]	@ (800a5f8 <Fare_Calculation+0x3cc>)
 800a51e:	601a      	str	r2, [r3, #0]
				Fu++;
 800a520:	4b31      	ldr	r3, [pc, #196]	@ (800a5e8 <Fare_Calculation+0x3bc>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	21fe      	movs	r1, #254	@ 0xfe
 800a526:	0589      	lsls	r1, r1, #22
 800a528:	1c18      	adds	r0, r3, #0
 800a52a:	f7f6 f90d 	bl	8000748 <__aeabi_fadd>
 800a52e:	1c03      	adds	r3, r0, #0
 800a530:	1c1a      	adds	r2, r3, #0
 800a532:	4b2d      	ldr	r3, [pc, #180]	@ (800a5e8 <Fare_Calculation+0x3bc>)
 800a534:	601a      	str	r2, [r3, #0]
			for (; DtX>0; DtX--)
 800a536:	4b2f      	ldr	r3, [pc, #188]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	1e5a      	subs	r2, r3, #1
 800a53c:	4b2d      	ldr	r3, [pc, #180]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	4b2c      	ldr	r3, [pc, #176]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <Fare_Calculation+0x2ea>
 800a548:	e071      	b.n	800a62e <Fare_Calculation+0x402>
			}
		}
	}
	else
	{
		Dt = counter - last_counter;
 800a54a:	4b23      	ldr	r3, [pc, #140]	@ (800a5d8 <Fare_Calculation+0x3ac>)
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <Fare_Calculation+0x3b0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	1ad2      	subs	r2, r2, r3
 800a554:	4b26      	ldr	r3, [pc, #152]	@ (800a5f0 <Fare_Calculation+0x3c4>)
 800a556:	601a      	str	r2, [r3, #0]
		DtX = Dt + DtX;
 800a558:	4b25      	ldr	r3, [pc, #148]	@ (800a5f0 <Fare_Calculation+0x3c4>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	4b25      	ldr	r3, [pc, #148]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	18d2      	adds	r2, r2, r3
 800a562:	4b24      	ldr	r3, [pc, #144]	@ (800a5f4 <Fare_Calculation+0x3c8>)
 800a564:	601a      	str	r2, [r3, #0]
		last_counter = counter;
 800a566:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d8 <Fare_Calculation+0x3ac>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b1c      	ldr	r3, [pc, #112]	@ (800a5dc <Fare_Calculation+0x3b0>)
 800a56c:	601a      	str	r2, [r3, #0]
		for (; DtX>0; DtX--)
 800a56e:	e05a      	b.n	800a626 <Fare_Calculation+0x3fa>
 800a570:	20000d33 	.word	0x20000d33
 800a574:	20003330 	.word	0x20003330
 800a578:	20000cd0 	.word	0x20000cd0
 800a57c:	42c80000 	.word	0x42c80000
 800a580:	41200000 	.word	0x41200000
 800a584:	20000d38 	.word	0x20000d38
 800a588:	20000d3c 	.word	0x20000d3c
 800a58c:	20000ca8 	.word	0x20000ca8
 800a590:	20000d44 	.word	0x20000d44
 800a594:	08018edc 	.word	0x08018edc
 800a598:	20001ef8 	.word	0x20001ef8
 800a59c:	20002f28 	.word	0x20002f28
 800a5a0:	08019350 	.word	0x08019350
 800a5a4:	20000d31 	.word	0x20000d31
 800a5a8:	08019378 	.word	0x08019378
 800a5ac:	20000d08 	.word	0x20000d08
 800a5b0:	20000cb4 	.word	0x20000cb4
 800a5b4:	d2f1a9fc 	.word	0xd2f1a9fc
 800a5b8:	3f50624d 	.word	0x3f50624d
 800a5bc:	20000cc4 	.word	0x20000cc4
 800a5c0:	20000cec 	.word	0x20000cec
 800a5c4:	20000cb8 	.word	0x20000cb8
 800a5c8:	20000cc0 	.word	0x20000cc0
 800a5cc:	20000cbc 	.word	0x20000cbc
 800a5d0:	20000240 	.word	0x20000240
 800a5d4:	20000a66 	.word	0x20000a66
 800a5d8:	20000cdc 	.word	0x20000cdc
 800a5dc:	20000ce4 	.word	0x20000ce4
 800a5e0:	2000023e 	.word	0x2000023e
 800a5e4:	43960000 	.word	0x43960000
 800a5e8:	20000cf8 	.word	0x20000cf8
 800a5ec:	20000cfc 	.word	0x20000cfc
 800a5f0:	20000cf0 	.word	0x20000cf0
 800a5f4:	20000cf4 	.word	0x20000cf4
 800a5f8:	20000d00 	.word	0x20000d00
		{
			Fd++;
 800a5fc:	4ba3      	ldr	r3, [pc, #652]	@ (800a88c <Fare_Calculation+0x660>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	4ba2      	ldr	r3, [pc, #648]	@ (800a88c <Fare_Calculation+0x660>)
 800a604:	601a      	str	r2, [r3, #0]
			Fu++;
 800a606:	4ba2      	ldr	r3, [pc, #648]	@ (800a890 <Fare_Calculation+0x664>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	21fe      	movs	r1, #254	@ 0xfe
 800a60c:	0589      	lsls	r1, r1, #22
 800a60e:	1c18      	adds	r0, r3, #0
 800a610:	f7f6 f89a 	bl	8000748 <__aeabi_fadd>
 800a614:	1c03      	adds	r3, r0, #0
 800a616:	1c1a      	adds	r2, r3, #0
 800a618:	4b9d      	ldr	r3, [pc, #628]	@ (800a890 <Fare_Calculation+0x664>)
 800a61a:	601a      	str	r2, [r3, #0]
		for (; DtX>0; DtX--)
 800a61c:	4b9d      	ldr	r3, [pc, #628]	@ (800a894 <Fare_Calculation+0x668>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	4b9c      	ldr	r3, [pc, #624]	@ (800a894 <Fare_Calculation+0x668>)
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	4b9b      	ldr	r3, [pc, #620]	@ (800a894 <Fare_Calculation+0x668>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e6      	bne.n	800a5fc <Fare_Calculation+0x3d0>
		}
	}

	//check Fu
//	if (fabs(Fu - ((float)ck/5 + (float)ck/1000)) <= 1e-3 || Fu > ((float)ck/5 + (float)ck/1000))
	if (fabs(Fu - (float)ck/5) <= 1e-6 || Fu > (float)ck/5)
 800a62e:	4b98      	ldr	r3, [pc, #608]	@ (800a890 <Fare_Calculation+0x664>)
 800a630:	681c      	ldr	r4, [r3, #0]
 800a632:	4b99      	ldr	r3, [pc, #612]	@ (800a898 <Fare_Calculation+0x66c>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	0018      	movs	r0, r3
 800a638:	f7f6 ff44 	bl	80014c4 <__aeabi_ui2f>
 800a63c:	1c03      	adds	r3, r0, #0
 800a63e:	4997      	ldr	r1, [pc, #604]	@ (800a89c <Fare_Calculation+0x670>)
 800a640:	1c18      	adds	r0, r3, #0
 800a642:	f7f6 fa0b 	bl	8000a5c <__aeabi_fdiv>
 800a646:	1c03      	adds	r3, r0, #0
 800a648:	1c19      	adds	r1, r3, #0
 800a64a:	1c20      	adds	r0, r4, #0
 800a64c:	f7f6 fd2a 	bl	80010a4 <__aeabi_fsub>
 800a650:	1c03      	adds	r3, r0, #0
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	1c18      	adds	r0, r3, #0
 800a658:	f7f8 fe10 	bl	800327c <__aeabi_f2d>
 800a65c:	4a90      	ldr	r2, [pc, #576]	@ (800a8a0 <Fare_Calculation+0x674>)
 800a65e:	4b91      	ldr	r3, [pc, #580]	@ (800a8a4 <Fare_Calculation+0x678>)
 800a660:	f7f5 fef8 	bl	8000454 <__aeabi_dcmple>
 800a664:	1e03      	subs	r3, r0, #0
 800a666:	d113      	bne.n	800a690 <Fare_Calculation+0x464>
 800a668:	4b8b      	ldr	r3, [pc, #556]	@ (800a898 <Fare_Calculation+0x66c>)
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f7f6 ff29 	bl	80014c4 <__aeabi_ui2f>
 800a672:	1c03      	adds	r3, r0, #0
 800a674:	4989      	ldr	r1, [pc, #548]	@ (800a89c <Fare_Calculation+0x670>)
 800a676:	1c18      	adds	r0, r3, #0
 800a678:	f7f6 f9f0 	bl	8000a5c <__aeabi_fdiv>
 800a67c:	1c03      	adds	r3, r0, #0
 800a67e:	1c1a      	adds	r2, r3, #0
 800a680:	4b83      	ldr	r3, [pc, #524]	@ (800a890 <Fare_Calculation+0x664>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	1c19      	adds	r1, r3, #0
 800a686:	1c10      	adds	r0, r2, #0
 800a688:	f7f5 ff14 	bl	80004b4 <__aeabi_fcmplt>
 800a68c:	1e03      	subs	r3, r0, #0
 800a68e:	d021      	beq.n	800a6d4 <Fare_Calculation+0x4a8>
	{
		fare = fare + Fi;
 800a690:	4b85      	ldr	r3, [pc, #532]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b85      	ldr	r3, [pc, #532]	@ (800a8ac <Fare_Calculation+0x680>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	1c19      	adds	r1, r3, #0
 800a69a:	1c10      	adds	r0, r2, #0
 800a69c:	f7f6 f854 	bl	8000748 <__aeabi_fadd>
 800a6a0:	1c03      	adds	r3, r0, #0
 800a6a2:	1c1a      	adds	r2, r3, #0
 800a6a4:	4b80      	ldr	r3, [pc, #512]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a6a6:	601a      	str	r2, [r3, #0]
		Fu = Fu - ck/5;
 800a6a8:	4b79      	ldr	r3, [pc, #484]	@ (800a890 <Fare_Calculation+0x664>)
 800a6aa:	681c      	ldr	r4, [r3, #0]
 800a6ac:	4b7a      	ldr	r3, [pc, #488]	@ (800a898 <Fare_Calculation+0x66c>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	2105      	movs	r1, #5
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f7f5 fd38 	bl	8000128 <__udivsi3>
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7f6 feb5 	bl	800142c <__aeabi_i2f>
 800a6c2:	1c03      	adds	r3, r0, #0
 800a6c4:	1c19      	adds	r1, r3, #0
 800a6c6:	1c20      	adds	r0, r4, #0
 800a6c8:	f7f6 fcec 	bl	80010a4 <__aeabi_fsub>
 800a6cc:	1c03      	adds	r3, r0, #0
 800a6ce:	1c1a      	adds	r2, r3, #0
 800a6d0:	4b6f      	ldr	r3, [pc, #444]	@ (800a890 <Fare_Calculation+0x664>)
 800a6d2:	601a      	str	r2, [r3, #0]
	}

	fare_km = ((float)Fd / ck);
 800a6d4:	4b6d      	ldr	r3, [pc, #436]	@ (800a88c <Fare_Calculation+0x660>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f7f6 fef3 	bl	80014c4 <__aeabi_ui2f>
 800a6de:	1c04      	adds	r4, r0, #0
 800a6e0:	4b6d      	ldr	r3, [pc, #436]	@ (800a898 <Fare_Calculation+0x66c>)
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f7f6 fea1 	bl	800142c <__aeabi_i2f>
 800a6ea:	1c03      	adds	r3, r0, #0
 800a6ec:	1c19      	adds	r1, r3, #0
 800a6ee:	1c20      	adds	r0, r4, #0
 800a6f0:	f7f6 f9b4 	bl	8000a5c <__aeabi_fdiv>
 800a6f4:	1c03      	adds	r3, r0, #0
 800a6f6:	1c1a      	adds	r2, r3, #0
 800a6f8:	4b6d      	ldr	r3, [pc, #436]	@ (800a8b0 <Fare_Calculation+0x684>)
 800a6fa:	601a      	str	r2, [r3, #0]
	fare_min = ((float)Ft / 60.0);
 800a6fc:	4b6d      	ldr	r3, [pc, #436]	@ (800a8b4 <Fare_Calculation+0x688>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	0018      	movs	r0, r3
 800a702:	f7f6 fedf 	bl	80014c4 <__aeabi_ui2f>
 800a706:	1c03      	adds	r3, r0, #0
 800a708:	496b      	ldr	r1, [pc, #428]	@ (800a8b8 <Fare_Calculation+0x68c>)
 800a70a:	1c18      	adds	r0, r3, #0
 800a70c:	f7f6 f9a6 	bl	8000a5c <__aeabi_fdiv>
 800a710:	1c03      	adds	r3, r0, #0
 800a712:	1c1a      	adds	r2, r3, #0
 800a714:	4b69      	ldr	r3, [pc, #420]	@ (800a8bc <Fare_Calculation+0x690>)
 800a716:	601a      	str	r2, [r3, #0]

	if((Flag_2km == FALSE) && (((distance > 2000) || (fabs(distance-2000) <= 1e-3)) || ((fare>Fare_2km) || (fabs(fare-Fare_2km) <= 1e-3))))
 800a718:	4b69      	ldr	r3, [pc, #420]	@ (800a8c0 <Fare_Calculation+0x694>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d14e      	bne.n	800a7be <Fare_Calculation+0x592>
 800a720:	4b68      	ldr	r3, [pc, #416]	@ (800a8c4 <Fare_Calculation+0x698>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4968      	ldr	r1, [pc, #416]	@ (800a8c8 <Fare_Calculation+0x69c>)
 800a726:	1c18      	adds	r0, r3, #0
 800a728:	f7f5 fed8 	bl	80004dc <__aeabi_fcmpgt>
 800a72c:	1e03      	subs	r3, r0, #0
 800a72e:	d12f      	bne.n	800a790 <Fare_Calculation+0x564>
 800a730:	4b64      	ldr	r3, [pc, #400]	@ (800a8c4 <Fare_Calculation+0x698>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4964      	ldr	r1, [pc, #400]	@ (800a8c8 <Fare_Calculation+0x69c>)
 800a736:	1c18      	adds	r0, r3, #0
 800a738:	f7f6 fcb4 	bl	80010a4 <__aeabi_fsub>
 800a73c:	1c03      	adds	r3, r0, #0
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	085b      	lsrs	r3, r3, #1
 800a742:	1c18      	adds	r0, r3, #0
 800a744:	f7f8 fd9a 	bl	800327c <__aeabi_f2d>
 800a748:	4a60      	ldr	r2, [pc, #384]	@ (800a8cc <Fare_Calculation+0x6a0>)
 800a74a:	4b61      	ldr	r3, [pc, #388]	@ (800a8d0 <Fare_Calculation+0x6a4>)
 800a74c:	f7f5 fe82 	bl	8000454 <__aeabi_dcmple>
 800a750:	1e03      	subs	r3, r0, #0
 800a752:	d11d      	bne.n	800a790 <Fare_Calculation+0x564>
 800a754:	4b54      	ldr	r3, [pc, #336]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	4b5e      	ldr	r3, [pc, #376]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	1c19      	adds	r1, r3, #0
 800a75e:	1c10      	adds	r0, r2, #0
 800a760:	f7f5 febc 	bl	80004dc <__aeabi_fcmpgt>
 800a764:	1e03      	subs	r3, r0, #0
 800a766:	d113      	bne.n	800a790 <Fare_Calculation+0x564>
 800a768:	4b4f      	ldr	r3, [pc, #316]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	4b59      	ldr	r3, [pc, #356]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	1c19      	adds	r1, r3, #0
 800a772:	1c10      	adds	r0, r2, #0
 800a774:	f7f6 fc96 	bl	80010a4 <__aeabi_fsub>
 800a778:	1c03      	adds	r3, r0, #0
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	1c18      	adds	r0, r3, #0
 800a780:	f7f8 fd7c 	bl	800327c <__aeabi_f2d>
 800a784:	4a51      	ldr	r2, [pc, #324]	@ (800a8cc <Fare_Calculation+0x6a0>)
 800a786:	4b52      	ldr	r3, [pc, #328]	@ (800a8d0 <Fare_Calculation+0x6a4>)
 800a788:	f7f5 fe64 	bl	8000454 <__aeabi_dcmple>
 800a78c:	1e03      	subs	r3, r0, #0
 800a78e:	d016      	beq.n	800a7be <Fare_Calculation+0x592>
	{
		Flag_2km = TRUE;
 800a790:	4b4b      	ldr	r3, [pc, #300]	@ (800a8c0 <Fare_Calculation+0x694>)
 800a792:	2201      	movs	r2, #1
 800a794:	701a      	strb	r2, [r3, #0]
		Fi = Fare_200m1; //T1
 800a796:	4b50      	ldr	r3, [pc, #320]	@ (800a8d8 <Fare_Calculation+0x6ac>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b44      	ldr	r3, [pc, #272]	@ (800a8ac <Fare_Calculation+0x680>)
 800a79c:	601a      	str	r2, [r3, #0]
		fare = Fare_2km;
 800a79e:	4b4d      	ldr	r3, [pc, #308]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	4b41      	ldr	r3, [pc, #260]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7a4:	601a      	str	r2, [r3, #0]
		fare = fare + Fi;
 800a7a6:	4b40      	ldr	r3, [pc, #256]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	4b40      	ldr	r3, [pc, #256]	@ (800a8ac <Fare_Calculation+0x680>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	1c19      	adds	r1, r3, #0
 800a7b0:	1c10      	adds	r0, r2, #0
 800a7b2:	f7f5 ffc9 	bl	8000748 <__aeabi_fadd>
 800a7b6:	1c03      	adds	r3, r0, #0
 800a7b8:	1c1a      	adds	r2, r3, #0
 800a7ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7bc:	601a      	str	r2, [r3, #0]
	}

	//check fare for HMI fare display - fare_d
	if ((fare > Fare_2km) || fabs(fare-Fare_2km) <= 1e-3)
 800a7be:	4b3a      	ldr	r3, [pc, #232]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b44      	ldr	r3, [pc, #272]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1c19      	adds	r1, r3, #0
 800a7c8:	1c10      	adds	r0, r2, #0
 800a7ca:	f7f5 fe87 	bl	80004dc <__aeabi_fcmpgt>
 800a7ce:	1e03      	subs	r3, r0, #0
 800a7d0:	d113      	bne.n	800a7fa <Fare_Calculation+0x5ce>
 800a7d2:	4b35      	ldr	r3, [pc, #212]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	1c19      	adds	r1, r3, #0
 800a7dc:	1c10      	adds	r0, r2, #0
 800a7de:	f7f6 fc61 	bl	80010a4 <__aeabi_fsub>
 800a7e2:	1c03      	adds	r3, r0, #0
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	1c18      	adds	r0, r3, #0
 800a7ea:	f7f8 fd47 	bl	800327c <__aeabi_f2d>
 800a7ee:	4a37      	ldr	r2, [pc, #220]	@ (800a8cc <Fare_Calculation+0x6a0>)
 800a7f0:	4b37      	ldr	r3, [pc, #220]	@ (800a8d0 <Fare_Calculation+0x6a4>)
 800a7f2:	f7f5 fe2f 	bl	8000454 <__aeabi_dcmple>
 800a7f6:	1e03      	subs	r3, r0, #0
 800a7f8:	d004      	beq.n	800a804 <Fare_Calculation+0x5d8>
	{
		fare_d = fare;
 800a7fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a8a8 <Fare_Calculation+0x67c>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b37      	ldr	r3, [pc, #220]	@ (800a8dc <Fare_Calculation+0x6b0>)
 800a800:	601a      	str	r2, [r3, #0]
 800a802:	e003      	b.n	800a80c <Fare_Calculation+0x5e0>
	}
	else
	{
		fare_d = Fare_2km; //20.5 //24.0;
 800a804:	4b33      	ldr	r3, [pc, #204]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b34      	ldr	r3, [pc, #208]	@ (800a8dc <Fare_Calculation+0x6b0>)
 800a80a:	601a      	str	r2, [r3, #0]
	}

	if ((Last_fare_d != fare_d) && (fare_d != Fare_2km))
 800a80c:	4b34      	ldr	r3, [pc, #208]	@ (800a8e0 <Fare_Calculation+0x6b4>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b32      	ldr	r3, [pc, #200]	@ (800a8dc <Fare_Calculation+0x6b0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	1c19      	adds	r1, r3, #0
 800a816:	1c10      	adds	r0, r2, #0
 800a818:	f7f5 fe46 	bl	80004a8 <__aeabi_fcmpeq>
 800a81c:	1e03      	subs	r3, r0, #0
 800a81e:	d12d      	bne.n	800a87c <Fare_Calculation+0x650>
 800a820:	4b2e      	ldr	r3, [pc, #184]	@ (800a8dc <Fare_Calculation+0x6b0>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d4 <Fare_Calculation+0x6a8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	1c19      	adds	r1, r3, #0
 800a82a:	1c10      	adds	r0, r2, #0
 800a82c:	f7f5 fe3c 	bl	80004a8 <__aeabi_fcmpeq>
 800a830:	1e03      	subs	r3, r0, #0
 800a832:	d123      	bne.n	800a87c <Fare_Calculation+0x650>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800a834:	4b2b      	ldr	r3, [pc, #172]	@ (800a8e4 <Fare_Calculation+0x6b8>)
 800a836:	2201      	movs	r2, #1
 800a838:	2180      	movs	r1, #128	@ 0x80
 800a83a:	0018      	movs	r0, r3
 800a83c:	f003 feb9 	bl	800e5b2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800a840:	2001      	movs	r0, #1
 800a842:	f003 f8e9 	bl	800da18 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800a846:	4b27      	ldr	r3, [pc, #156]	@ (800a8e4 <Fare_Calculation+0x6b8>)
 800a848:	2200      	movs	r2, #0
 800a84a:	2180      	movs	r1, #128	@ 0x80
 800a84c:	0018      	movs	r0, r3
 800a84e:	f003 feb0 	bl	800e5b2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800a852:	4b24      	ldr	r3, [pc, #144]	@ (800a8e4 <Fare_Calculation+0x6b8>)
 800a854:	2201      	movs	r2, #1
 800a856:	2108      	movs	r1, #8
 800a858:	0018      	movs	r0, r3
 800a85a:	f003 feaa 	bl	800e5b2 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800a85e:	2014      	movs	r0, #20
 800a860:	f003 f8da 	bl	800da18 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800a864:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e4 <Fare_Calculation+0x6b8>)
 800a866:	2200      	movs	r2, #0
 800a868:	2108      	movs	r1, #8
 800a86a:	0018      	movs	r0, r3
 800a86c:	f003 fea1 	bl	800e5b2 <HAL_GPIO_WritePin>
		change_count += 1;
 800a870:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e8 <Fare_Calculation+0x6bc>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	4b1b      	ldr	r3, [pc, #108]	@ (800a8e8 <Fare_Calculation+0x6bc>)
 800a87a:	701a      	strb	r2, [r3, #0]
	}

	Last_fare_d = fare_d;
 800a87c:	4b17      	ldr	r3, [pc, #92]	@ (800a8dc <Fare_Calculation+0x6b0>)
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	4b17      	ldr	r3, [pc, #92]	@ (800a8e0 <Fare_Calculation+0x6b4>)
 800a882:	601a      	str	r2, [r3, #0]
}
 800a884:	46c0      	nop			@ (mov r8, r8)
 800a886:	46bd      	mov	sp, r7
 800a888:	b003      	add	sp, #12
 800a88a:	bd90      	pop	{r4, r7, pc}
 800a88c:	20000d00 	.word	0x20000d00
 800a890:	20000cf8 	.word	0x20000cf8
 800a894:	20000cf4 	.word	0x20000cf4
 800a898:	2000023e 	.word	0x2000023e
 800a89c:	40a00000 	.word	0x40a00000
 800a8a0:	a0b5ed8d 	.word	0xa0b5ed8d
 800a8a4:	3eb0c6f7 	.word	0x3eb0c6f7
 800a8a8:	20000d08 	.word	0x20000d08
 800a8ac:	20000cec 	.word	0x20000cec
 800a8b0:	20000d20 	.word	0x20000d20
 800a8b4:	20000cfc 	.word	0x20000cfc
 800a8b8:	42700000 	.word	0x42700000
 800a8bc:	20000d24 	.word	0x20000d24
 800a8c0:	20000d04 	.word	0x20000d04
 800a8c4:	20000cd8 	.word	0x20000cd8
 800a8c8:	44fa0000 	.word	0x44fa0000
 800a8cc:	d2f1a9fc 	.word	0xd2f1a9fc
 800a8d0:	3f50624d 	.word	0x3f50624d
 800a8d4:	20000cb8 	.word	0x20000cb8
 800a8d8:	20000cc0 	.word	0x20000cc0
 800a8dc:	20000d0c 	.word	0x20000d0c
 800a8e0:	20000d10 	.word	0x20000d10
 800a8e4:	50000400 	.word	0x50000400
 800a8e8:	20000e49 	.word	0x20000e49

0800a8ec <Flag_Control_Up>:

void Flag_Control_Up()
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800a8f0:	2380      	movs	r3, #128	@ 0x80
 800a8f2:	019b      	lsls	r3, r3, #6
 800a8f4:	480a      	ldr	r0, [pc, #40]	@ (800a920 <Flag_Control_Up+0x34>)
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	f003 fe5a 	bl	800e5b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800a8fe:	2380      	movs	r3, #128	@ 0x80
 800a900:	01db      	lsls	r3, r3, #7
 800a902:	4807      	ldr	r0, [pc, #28]	@ (800a920 <Flag_Control_Up+0x34>)
 800a904:	2200      	movs	r2, #0
 800a906:	0019      	movs	r1, r3
 800a908:	f003 fe53 	bl	800e5b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800a90c:	2380      	movs	r3, #128	@ 0x80
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	4803      	ldr	r0, [pc, #12]	@ (800a920 <Flag_Control_Up+0x34>)
 800a912:	2201      	movs	r2, #1
 800a914:	0019      	movs	r1, r3
 800a916:	f003 fe4c 	bl	800e5b2 <HAL_GPIO_WritePin>
}
 800a91a:	46c0      	nop			@ (mov r8, r8)
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	50000400 	.word	0x50000400

0800a924 <Flag_Control_Down>:

void Flag_Control_Down()
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800a928:	2380      	movs	r3, #128	@ 0x80
 800a92a:	019b      	lsls	r3, r3, #6
 800a92c:	480a      	ldr	r0, [pc, #40]	@ (800a958 <Flag_Control_Down+0x34>)
 800a92e:	2200      	movs	r2, #0
 800a930:	0019      	movs	r1, r3
 800a932:	f003 fe3e 	bl	800e5b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	01db      	lsls	r3, r3, #7
 800a93a:	4807      	ldr	r0, [pc, #28]	@ (800a958 <Flag_Control_Down+0x34>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	0019      	movs	r1, r3
 800a940:	f003 fe37 	bl	800e5b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800a944:	2380      	movs	r3, #128	@ 0x80
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	4803      	ldr	r0, [pc, #12]	@ (800a958 <Flag_Control_Down+0x34>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	0019      	movs	r1, r3
 800a94e:	f003 fe30 	bl	800e5b2 <HAL_GPIO_WritePin>
}
 800a952:	46c0      	nop			@ (mov r8, r8)
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	50000400 	.word	0x50000400

0800a95c <Anti_Tamper_Handle>:

void Anti_Tamper_Handle()
{
 800a95c:	b5b0      	push	{r4, r5, r7, lr}
 800a95e:	b08c      	sub	sp, #48	@ 0x30
 800a960:	af00      	add	r7, sp, #0

	//set alarm in rtc & ctrl_2

	//1. alarm 30s (first time enter will alarm)
	//2. 'C' in HMI fare
	unsigned char C_Fare[] = {0x5A, 0xA5, 0x04, 0x82, 0x10, 0x30, 0x43};				// 7 byte  //min fare
 800a962:	2528      	movs	r5, #40	@ 0x28
 800a964:	197b      	adds	r3, r7, r5
 800a966:	4a51      	ldr	r2, [pc, #324]	@ (800aaac <Anti_Tamper_Handle+0x150>)
 800a968:	6811      	ldr	r1, [r2, #0]
 800a96a:	6019      	str	r1, [r3, #0]
 800a96c:	8891      	ldrh	r1, [r2, #4]
 800a96e:	8099      	strh	r1, [r3, #4]
 800a970:	7992      	ldrb	r2, [r2, #6]
 800a972:	719a      	strb	r2, [r3, #6]
//	unsigned char C_Fare_Min[] = {0x5A, 0xA5, 0x07, 0x82, 0x10, 0x00, 0x00, 0x00, 0x09, 0x2E}; //2350 - 23.50
	//DONE：read from parameter, move to global define
//	unsigned char C_Fare_Min[] = {0x5A, 0xA5, 0x07, 0x82, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x8C}; //2700 - 27.00

	uint8_t temp_array[4];
	Long_to_byte(Fare_min, temp_array);
 800a974:	4b4e      	ldr	r3, [pc, #312]	@ (800aab0 <Anti_Tamper_Handle+0x154>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2424      	movs	r4, #36	@ 0x24
 800a97a:	193a      	adds	r2, r7, r4
 800a97c:	0011      	movs	r1, r2
 800a97e:	0018      	movs	r0, r3
 800a980:	f7fd f964 	bl	8007c4c <Long_to_byte>
	C_Fare_Min[6] = temp_array[0];
 800a984:	0021      	movs	r1, r4
 800a986:	187b      	adds	r3, r7, r1
 800a988:	781a      	ldrb	r2, [r3, #0]
 800a98a:	4b4a      	ldr	r3, [pc, #296]	@ (800aab4 <Anti_Tamper_Handle+0x158>)
 800a98c:	719a      	strb	r2, [r3, #6]
	C_Fare_Min[7] = temp_array[1];
 800a98e:	187b      	adds	r3, r7, r1
 800a990:	785a      	ldrb	r2, [r3, #1]
 800a992:	4b48      	ldr	r3, [pc, #288]	@ (800aab4 <Anti_Tamper_Handle+0x158>)
 800a994:	71da      	strb	r2, [r3, #7]
	C_Fare_Min[8] = temp_array[2];
 800a996:	187b      	adds	r3, r7, r1
 800a998:	789a      	ldrb	r2, [r3, #2]
 800a99a:	4b46      	ldr	r3, [pc, #280]	@ (800aab4 <Anti_Tamper_Handle+0x158>)
 800a99c:	721a      	strb	r2, [r3, #8]
	C_Fare_Min[9] = temp_array[3];
 800a99e:	187b      	adds	r3, r7, r1
 800a9a0:	78da      	ldrb	r2, [r3, #3]
 800a9a2:	4b44      	ldr	r3, [pc, #272]	@ (800aab4 <Anti_Tamper_Handle+0x158>)
 800a9a4:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit(&huart1, C_Fare, 7, 0x20);
 800a9a6:	1979      	adds	r1, r7, r5
 800a9a8:	4843      	ldr	r0, [pc, #268]	@ (800aab8 <Anti_Tamper_Handle+0x15c>)
 800a9aa:	2320      	movs	r3, #32
 800a9ac:	2207      	movs	r2, #7
 800a9ae:	f008 fab9 	bl	8012f24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, C_Fare_Min, 10, 0x20);
 800a9b2:	4940      	ldr	r1, [pc, #256]	@ (800aab4 <Anti_Tamper_Handle+0x158>)
 800a9b4:	4840      	ldr	r0, [pc, #256]	@ (800aab8 <Anti_Tamper_Handle+0x15c>)
 800a9b6:	2320      	movs	r3, #32
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	f008 fab3 	bl	8012f24 <HAL_UART_Transmit>

	unsigned char alarm[] = {0x5A, 0xA5, 0x05, 0x82, 0x00, 0xA0, 0x00, 0x7d};
 800a9be:	231c      	movs	r3, #28
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	4a3e      	ldr	r2, [pc, #248]	@ (800aabc <Anti_Tamper_Handle+0x160>)
 800a9c4:	ca03      	ldmia	r2!, {r0, r1}
 800a9c6:	c303      	stmia	r3!, {r0, r1}
	//flag protect set again (maybe power off), no need alarm, only show unlock
	if(flag_alarm_clear)
 800a9c8:	4b3d      	ldr	r3, [pc, #244]	@ (800aac0 <Anti_Tamper_Handle+0x164>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <Anti_Tamper_Handle+0x7a>
	{
		Flag_alarm = FALSE;
 800a9d0:	4b3c      	ldr	r3, [pc, #240]	@ (800aac4 <Anti_Tamper_Handle+0x168>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_alarm)
 800a9d6:	4b3b      	ldr	r3, [pc, #236]	@ (800aac4 <Anti_Tamper_Handle+0x168>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d022      	beq.n	800aa24 <Anti_Tamper_Handle+0xc8>
	{
		Flag_alarm = FALSE;
 800a9de:	4b39      	ldr	r3, [pc, #228]	@ (800aac4 <Anti_Tamper_Handle+0x168>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
		Flag_set_alarm_rtc = TRUE;
 800a9e4:	4b38      	ldr	r3, [pc, #224]	@ (800aac8 <Anti_Tamper_Handle+0x16c>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	701a      	strb	r2, [r3, #0]
		for(i=0; i<30; i++) //test 5s - set 30s
 800a9ea:	4b38      	ldr	r3, [pc, #224]	@ (800aacc <Anti_Tamper_Handle+0x170>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	801a      	strh	r2, [r3, #0]
 800a9f0:	e013      	b.n	800aa1a <Anti_Tamper_Handle+0xbe>
		{
			time_update();
 800a9f2:	f7fe fc19 	bl	8009228 <time_update>
			HAL_UART_Transmit(&huart1, alarm, 8, 0xffff);
 800a9f6:	4b36      	ldr	r3, [pc, #216]	@ (800aad0 <Anti_Tamper_Handle+0x174>)
 800a9f8:	221c      	movs	r2, #28
 800a9fa:	18b9      	adds	r1, r7, r2
 800a9fc:	482e      	ldr	r0, [pc, #184]	@ (800aab8 <Anti_Tamper_Handle+0x15c>)
 800a9fe:	2208      	movs	r2, #8
 800aa00:	f008 fa90 	bl	8012f24 <HAL_UART_Transmit>
			HAL_Delay(1000);
 800aa04:	23fa      	movs	r3, #250	@ 0xfa
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f003 f805 	bl	800da18 <HAL_Delay>
		for(i=0; i<30; i++) //test 5s - set 30s
 800aa0e:	4b2f      	ldr	r3, [pc, #188]	@ (800aacc <Anti_Tamper_Handle+0x170>)
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	3301      	adds	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	4b2d      	ldr	r3, [pc, #180]	@ (800aacc <Anti_Tamper_Handle+0x170>)
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	@ (800aacc <Anti_Tamper_Handle+0x170>)
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	2b1d      	cmp	r3, #29
 800aa20:	d9e7      	bls.n	800a9f2 <Anti_Tamper_Handle+0x96>
		HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x20);

		time_update();
//		HAL_Delay(1000);
	}
}
 800aa22:	e03e      	b.n	800aaa2 <Anti_Tamper_Handle+0x146>
		unsigned char unlock[] = {0x5A, 0xA5, 0x09, 0x82, 0x10, 0x32, 0x55, 0x4E, 0x4C, 0x4F, 0x43, 0x4B};
 800aa24:	1d3b      	adds	r3, r7, #4
 800aa26:	4a2b      	ldr	r2, [pc, #172]	@ (800aad4 <Anti_Tamper_Handle+0x178>)
 800aa28:	ca13      	ldmia	r2!, {r0, r1, r4}
 800aa2a:	c313      	stmia	r3!, {r0, r1, r4}
		HAL_UART_Transmit(&huart1, unlock, 12, 0x20);
 800aa2c:	1d39      	adds	r1, r7, #4
 800aa2e:	4822      	ldr	r0, [pc, #136]	@ (800aab8 <Anti_Tamper_Handle+0x15c>)
 800aa30:	2320      	movs	r3, #32
 800aa32:	220c      	movs	r2, #12
 800aa34:	f008 fa76 	bl	8012f24 <HAL_UART_Transmit>
		a_buffer[0] = hh;
 800aa38:	4b27      	ldr	r3, [pc, #156]	@ (800aad8 <Anti_Tamper_Handle+0x17c>)
 800aa3a:	781a      	ldrb	r2, [r3, #0]
 800aa3c:	2118      	movs	r1, #24
 800aa3e:	187b      	adds	r3, r7, r1
 800aa40:	701a      	strb	r2, [r3, #0]
		a_buffer[1] = mm;
 800aa42:	4b26      	ldr	r3, [pc, #152]	@ (800aadc <Anti_Tamper_Handle+0x180>)
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	187b      	adds	r3, r7, r1
 800aa48:	705a      	strb	r2, [r3, #1]
		a_buffer[2] = ss;
 800aa4a:	4b25      	ldr	r3, [pc, #148]	@ (800aae0 <Anti_Tamper_Handle+0x184>)
 800aa4c:	781a      	ldrb	r2, [r3, #0]
 800aa4e:	187b      	adds	r3, r7, r1
 800aa50:	709a      	strb	r2, [r3, #2]
		BCD2ASC(d_buffer, a_buffer, 6);
 800aa52:	1879      	adds	r1, r7, r1
 800aa54:	2410      	movs	r4, #16
 800aa56:	193b      	adds	r3, r7, r4
 800aa58:	2206      	movs	r2, #6
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7ff f9ec 	bl	8009e38 <BCD2ASC>
		Dur_HMS[13] = d_buffer[5];
 800aa60:	0021      	movs	r1, r4
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	795a      	ldrb	r2, [r3, #5]
 800aa66:	4b1f      	ldr	r3, [pc, #124]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa68:	735a      	strb	r2, [r3, #13]
		Dur_HMS[12] = d_buffer[4];
 800aa6a:	187b      	adds	r3, r7, r1
 800aa6c:	791a      	ldrb	r2, [r3, #4]
 800aa6e:	4b1d      	ldr	r3, [pc, #116]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa70:	731a      	strb	r2, [r3, #12]
		Dur_HMS[10] = d_buffer[3];
 800aa72:	187b      	adds	r3, r7, r1
 800aa74:	78da      	ldrb	r2, [r3, #3]
 800aa76:	4b1b      	ldr	r3, [pc, #108]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa78:	729a      	strb	r2, [r3, #10]
		Dur_HMS[9] = d_buffer[2];
 800aa7a:	187b      	adds	r3, r7, r1
 800aa7c:	789a      	ldrb	r2, [r3, #2]
 800aa7e:	4b19      	ldr	r3, [pc, #100]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa80:	725a      	strb	r2, [r3, #9]
		Dur_HMS[7] = d_buffer[1];
 800aa82:	187b      	adds	r3, r7, r1
 800aa84:	785a      	ldrb	r2, [r3, #1]
 800aa86:	4b17      	ldr	r3, [pc, #92]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa88:	71da      	strb	r2, [r3, #7]
		Dur_HMS[6] = d_buffer[0];
 800aa8a:	187b      	adds	r3, r7, r1
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	4b15      	ldr	r3, [pc, #84]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa90:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x20);
 800aa92:	4914      	ldr	r1, [pc, #80]	@ (800aae4 <Anti_Tamper_Handle+0x188>)
 800aa94:	4808      	ldr	r0, [pc, #32]	@ (800aab8 <Anti_Tamper_Handle+0x15c>)
 800aa96:	2320      	movs	r3, #32
 800aa98:	220e      	movs	r2, #14
 800aa9a:	f008 fa43 	bl	8012f24 <HAL_UART_Transmit>
		time_update();
 800aa9e:	f7fe fbc3 	bl	8009228 <time_update>
}
 800aaa2:	46c0      	nop			@ (mov r8, r8)
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b00c      	add	sp, #48	@ 0x30
 800aaa8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaaa:	46c0      	nop			@ (mov r8, r8)
 800aaac:	080193a0 	.word	0x080193a0
 800aab0:	20000cc8 	.word	0x20000cc8
 800aab4:	2000025c 	.word	0x2000025c
 800aab8:	2000064c 	.word	0x2000064c
 800aabc:	080193a8 	.word	0x080193a8
 800aac0:	20000c8f 	.word	0x20000c8f
 800aac4:	20000244 	.word	0x20000244
 800aac8:	20000d32 	.word	0x20000d32
 800aacc:	20000bec 	.word	0x20000bec
 800aad0:	0000ffff 	.word	0x0000ffff
 800aad4:	080193b0 	.word	0x080193b0
 800aad8:	20000c90 	.word	0x20000c90
 800aadc:	20000c91 	.word	0x20000c91
 800aae0:	20000c92 	.word	0x20000c92
 800aae4:	2000005c 	.word	0x2000005c

0800aae8 <Dec2ASC>:
//		Drv_state = S_VACANT;
//	}
//}

void Dec2ASC(uint32_t decimal, uint8_t* asc)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
	uint8_t len = 0;
 800aaf2:	2317      	movs	r3, #23
 800aaf4:	18fb      	adds	r3, r7, r3
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = decimal;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	613b      	str	r3, [r7, #16]

	do {
		len++;
 800aafe:	2117      	movs	r1, #23
 800ab00:	187b      	adds	r3, r7, r1
 800ab02:	781a      	ldrb	r2, [r3, #0]
 800ab04:	187b      	adds	r3, r7, r1
 800ab06:	3201      	adds	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
		tmp /= 10;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	210a      	movs	r1, #10
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f7f5 fb0a 	bl	8000128 <__udivsi3>
 800ab14:	0003      	movs	r3, r0
 800ab16:	613b      	str	r3, [r7, #16]
	} while (tmp > 0);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1ef      	bne.n	800aafe <Dec2ASC+0x16>

	for (int i=0; i<len; i++)
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	e019      	b.n	800ab58 <Dec2ASC+0x70>
	{
		asc[7-i] = decimal % 10 + 0x30;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	210a      	movs	r1, #10
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f7f5 fb83 	bl	8000234 <__aeabi_uidivmod>
 800ab2e:	000b      	movs	r3, r1
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2107      	movs	r1, #7
 800ab36:	1acb      	subs	r3, r1, r3
 800ab38:	0019      	movs	r1, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	185b      	adds	r3, r3, r1
 800ab3e:	3230      	adds	r2, #48	@ 0x30
 800ab40:	b2d2      	uxtb	r2, r2
 800ab42:	701a      	strb	r2, [r3, #0]
		decimal /= 10;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	210a      	movs	r1, #10
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f7f5 faed 	bl	8000128 <__udivsi3>
 800ab4e:	0003      	movs	r3, r0
 800ab50:	607b      	str	r3, [r7, #4]
	for (int i=0; i<len; i++)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	2317      	movs	r3, #23
 800ab5a:	18fb      	adds	r3, r7, r3
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	dbdf      	blt.n	800ab24 <Dec2ASC+0x3c>
	}
}
 800ab64:	46c0      	nop			@ (mov r8, r8)
 800ab66:	46c0      	nop			@ (mov r8, r8)
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	b006      	add	sp, #24
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <ASC2Dec>:

uint32_t ASC2Dec(uint8_t* asc)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
	uint32_t decimal = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<8; i++)
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60bb      	str	r3, [r7, #8]
 800ab7e:	e01b      	b.n	800abb8 <ASC2Dec+0x4a>
	{
		if (asc[i]>=0x30 && asc[i]<=0x39)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	18d3      	adds	r3, r2, r3
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab8a:	d912      	bls.n	800abb2 <ASC2Dec+0x44>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	18d3      	adds	r3, r2, r3
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b39      	cmp	r3, #57	@ 0x39
 800ab96:	d80c      	bhi.n	800abb2 <ASC2Dec+0x44>
			decimal = 10*decimal + (asc[i] - 0x30);
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	0013      	movs	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	189b      	adds	r3, r3, r2
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	0019      	movs	r1, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	18d3      	adds	r3, r2, r3
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	18cb      	adds	r3, r1, r3
 800abae:	3b30      	subs	r3, #48	@ 0x30
 800abb0:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<8; i++)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3301      	adds	r3, #1
 800abb6:	60bb      	str	r3, [r7, #8]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b07      	cmp	r3, #7
 800abbc:	dde0      	ble.n	800ab80 <ASC2Dec+0x12>
	}
	return decimal;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	0018      	movs	r0, r3
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b004      	add	sp, #16
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <E_read>:

void E_read(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, 0xA1, (3<<7), 2, dataRead, 100, 1000);
 800abce:	23c0      	movs	r3, #192	@ 0xc0
 800abd0:	005a      	lsls	r2, r3, #1
 800abd2:	48f6      	ldr	r0, [pc, #984]	@ (800afac <E_read+0x3e4>)
 800abd4:	23fa      	movs	r3, #250	@ 0xfa
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	2364      	movs	r3, #100	@ 0x64
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	4bf4      	ldr	r3, [pc, #976]	@ (800afb0 <E_read+0x3e8>)
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	2302      	movs	r3, #2
 800abe4:	21a1      	movs	r1, #161	@ 0xa1
 800abe6:	f004 f8d5 	bl	800ed94 <HAL_I2C_Mem_Read>
	tkm[0] = dataRead[0];
 800abea:	4bf1      	ldr	r3, [pc, #964]	@ (800afb0 <E_read+0x3e8>)
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	4bf1      	ldr	r3, [pc, #964]	@ (800afb4 <E_read+0x3ec>)
 800abf0:	701a      	strb	r2, [r3, #0]
	tkm[1] = dataRead[1];
 800abf2:	4bef      	ldr	r3, [pc, #956]	@ (800afb0 <E_read+0x3e8>)
 800abf4:	785a      	ldrb	r2, [r3, #1]
 800abf6:	4bef      	ldr	r3, [pc, #956]	@ (800afb4 <E_read+0x3ec>)
 800abf8:	705a      	strb	r2, [r3, #1]
	tkm[2] = dataRead[2];
 800abfa:	4bed      	ldr	r3, [pc, #948]	@ (800afb0 <E_read+0x3e8>)
 800abfc:	789a      	ldrb	r2, [r3, #2]
 800abfe:	4bed      	ldr	r3, [pc, #948]	@ (800afb4 <E_read+0x3ec>)
 800ac00:	709a      	strb	r2, [r3, #2]
	tkm[3] = dataRead[3];
 800ac02:	4beb      	ldr	r3, [pc, #940]	@ (800afb0 <E_read+0x3e8>)
 800ac04:	78da      	ldrb	r2, [r3, #3]
 800ac06:	4beb      	ldr	r3, [pc, #940]	@ (800afb4 <E_read+0x3ec>)
 800ac08:	70da      	strb	r2, [r3, #3]
	tkm[4] = dataRead[4];
 800ac0a:	4be9      	ldr	r3, [pc, #932]	@ (800afb0 <E_read+0x3e8>)
 800ac0c:	791a      	ldrb	r2, [r3, #4]
 800ac0e:	4be9      	ldr	r3, [pc, #932]	@ (800afb4 <E_read+0x3ec>)
 800ac10:	711a      	strb	r2, [r3, #4]
	tkm[5] = dataRead[5];
 800ac12:	4be7      	ldr	r3, [pc, #924]	@ (800afb0 <E_read+0x3e8>)
 800ac14:	795a      	ldrb	r2, [r3, #5]
 800ac16:	4be7      	ldr	r3, [pc, #924]	@ (800afb4 <E_read+0x3ec>)
 800ac18:	715a      	strb	r2, [r3, #5]
	tkm[6] = dataRead[6];
 800ac1a:	4be5      	ldr	r3, [pc, #916]	@ (800afb0 <E_read+0x3e8>)
 800ac1c:	799a      	ldrb	r2, [r3, #6]
 800ac1e:	4be5      	ldr	r3, [pc, #916]	@ (800afb4 <E_read+0x3ec>)
 800ac20:	719a      	strb	r2, [r3, #6]
	tkm[7] = dataRead[7];
 800ac22:	4be3      	ldr	r3, [pc, #908]	@ (800afb0 <E_read+0x3e8>)
 800ac24:	79da      	ldrb	r2, [r3, #7]
 800ac26:	4be3      	ldr	r3, [pc, #908]	@ (800afb4 <E_read+0x3ec>)
 800ac28:	71da      	strb	r2, [r3, #7]

	pkm[0] = dataRead[8];
 800ac2a:	4be1      	ldr	r3, [pc, #900]	@ (800afb0 <E_read+0x3e8>)
 800ac2c:	7a1a      	ldrb	r2, [r3, #8]
 800ac2e:	4be2      	ldr	r3, [pc, #904]	@ (800afb8 <E_read+0x3f0>)
 800ac30:	701a      	strb	r2, [r3, #0]
	pkm[1] = dataRead[9];
 800ac32:	4bdf      	ldr	r3, [pc, #892]	@ (800afb0 <E_read+0x3e8>)
 800ac34:	7a5a      	ldrb	r2, [r3, #9]
 800ac36:	4be0      	ldr	r3, [pc, #896]	@ (800afb8 <E_read+0x3f0>)
 800ac38:	705a      	strb	r2, [r3, #1]
	pkm[2] = dataRead[10];
 800ac3a:	4bdd      	ldr	r3, [pc, #884]	@ (800afb0 <E_read+0x3e8>)
 800ac3c:	7a9a      	ldrb	r2, [r3, #10]
 800ac3e:	4bde      	ldr	r3, [pc, #888]	@ (800afb8 <E_read+0x3f0>)
 800ac40:	709a      	strb	r2, [r3, #2]
	pkm[3] = dataRead[11];
 800ac42:	4bdb      	ldr	r3, [pc, #876]	@ (800afb0 <E_read+0x3e8>)
 800ac44:	7ada      	ldrb	r2, [r3, #11]
 800ac46:	4bdc      	ldr	r3, [pc, #880]	@ (800afb8 <E_read+0x3f0>)
 800ac48:	70da      	strb	r2, [r3, #3]
	pkm[4] = dataRead[12];
 800ac4a:	4bd9      	ldr	r3, [pc, #868]	@ (800afb0 <E_read+0x3e8>)
 800ac4c:	7b1a      	ldrb	r2, [r3, #12]
 800ac4e:	4bda      	ldr	r3, [pc, #872]	@ (800afb8 <E_read+0x3f0>)
 800ac50:	711a      	strb	r2, [r3, #4]
	pkm[5] = dataRead[13];
 800ac52:	4bd7      	ldr	r3, [pc, #860]	@ (800afb0 <E_read+0x3e8>)
 800ac54:	7b5a      	ldrb	r2, [r3, #13]
 800ac56:	4bd8      	ldr	r3, [pc, #864]	@ (800afb8 <E_read+0x3f0>)
 800ac58:	715a      	strb	r2, [r3, #5]
	pkm[6] = dataRead[14];
 800ac5a:	4bd5      	ldr	r3, [pc, #852]	@ (800afb0 <E_read+0x3e8>)
 800ac5c:	7b9a      	ldrb	r2, [r3, #14]
 800ac5e:	4bd6      	ldr	r3, [pc, #856]	@ (800afb8 <E_read+0x3f0>)
 800ac60:	719a      	strb	r2, [r3, #6]
	pkm[7] = dataRead[15];
 800ac62:	4bd3      	ldr	r3, [pc, #844]	@ (800afb0 <E_read+0x3e8>)
 800ac64:	7bda      	ldrb	r2, [r3, #15]
 800ac66:	4bd4      	ldr	r3, [pc, #848]	@ (800afb8 <E_read+0x3f0>)
 800ac68:	71da      	strb	r2, [r3, #7]

	tflag[0] = dataRead[16];
 800ac6a:	4bd1      	ldr	r3, [pc, #836]	@ (800afb0 <E_read+0x3e8>)
 800ac6c:	7c1a      	ldrb	r2, [r3, #16]
 800ac6e:	4bd3      	ldr	r3, [pc, #844]	@ (800afbc <E_read+0x3f4>)
 800ac70:	701a      	strb	r2, [r3, #0]
	tflag[1] = dataRead[17];
 800ac72:	4bcf      	ldr	r3, [pc, #828]	@ (800afb0 <E_read+0x3e8>)
 800ac74:	7c5a      	ldrb	r2, [r3, #17]
 800ac76:	4bd1      	ldr	r3, [pc, #836]	@ (800afbc <E_read+0x3f4>)
 800ac78:	705a      	strb	r2, [r3, #1]
	tflag[2] = dataRead[18];
 800ac7a:	4bcd      	ldr	r3, [pc, #820]	@ (800afb0 <E_read+0x3e8>)
 800ac7c:	7c9a      	ldrb	r2, [r3, #18]
 800ac7e:	4bcf      	ldr	r3, [pc, #828]	@ (800afbc <E_read+0x3f4>)
 800ac80:	709a      	strb	r2, [r3, #2]
	tflag[3] = dataRead[19];
 800ac82:	4bcb      	ldr	r3, [pc, #812]	@ (800afb0 <E_read+0x3e8>)
 800ac84:	7cda      	ldrb	r2, [r3, #19]
 800ac86:	4bcd      	ldr	r3, [pc, #820]	@ (800afbc <E_read+0x3f4>)
 800ac88:	70da      	strb	r2, [r3, #3]
	tflag[4] = dataRead[20];
 800ac8a:	4bc9      	ldr	r3, [pc, #804]	@ (800afb0 <E_read+0x3e8>)
 800ac8c:	7d1a      	ldrb	r2, [r3, #20]
 800ac8e:	4bcb      	ldr	r3, [pc, #812]	@ (800afbc <E_read+0x3f4>)
 800ac90:	711a      	strb	r2, [r3, #4]
	tflag[5] = dataRead[21];
 800ac92:	4bc7      	ldr	r3, [pc, #796]	@ (800afb0 <E_read+0x3e8>)
 800ac94:	7d5a      	ldrb	r2, [r3, #21]
 800ac96:	4bc9      	ldr	r3, [pc, #804]	@ (800afbc <E_read+0x3f4>)
 800ac98:	715a      	strb	r2, [r3, #5]
	tflag[6] = dataRead[22];
 800ac9a:	4bc5      	ldr	r3, [pc, #788]	@ (800afb0 <E_read+0x3e8>)
 800ac9c:	7d9a      	ldrb	r2, [r3, #22]
 800ac9e:	4bc7      	ldr	r3, [pc, #796]	@ (800afbc <E_read+0x3f4>)
 800aca0:	719a      	strb	r2, [r3, #6]
	tflag[7] = dataRead[23];
 800aca2:	4bc3      	ldr	r3, [pc, #780]	@ (800afb0 <E_read+0x3e8>)
 800aca4:	7dda      	ldrb	r2, [r3, #23]
 800aca6:	4bc5      	ldr	r3, [pc, #788]	@ (800afbc <E_read+0x3f4>)
 800aca8:	71da      	strb	r2, [r3, #7]

	cflag[0] = dataRead[24];
 800acaa:	4bc1      	ldr	r3, [pc, #772]	@ (800afb0 <E_read+0x3e8>)
 800acac:	7e1a      	ldrb	r2, [r3, #24]
 800acae:	4bc4      	ldr	r3, [pc, #784]	@ (800afc0 <E_read+0x3f8>)
 800acb0:	701a      	strb	r2, [r3, #0]
	cflag[1] = dataRead[25];
 800acb2:	4bbf      	ldr	r3, [pc, #764]	@ (800afb0 <E_read+0x3e8>)
 800acb4:	7e5a      	ldrb	r2, [r3, #25]
 800acb6:	4bc2      	ldr	r3, [pc, #776]	@ (800afc0 <E_read+0x3f8>)
 800acb8:	705a      	strb	r2, [r3, #1]
	cflag[2] = dataRead[26];
 800acba:	4bbd      	ldr	r3, [pc, #756]	@ (800afb0 <E_read+0x3e8>)
 800acbc:	7e9a      	ldrb	r2, [r3, #26]
 800acbe:	4bc0      	ldr	r3, [pc, #768]	@ (800afc0 <E_read+0x3f8>)
 800acc0:	709a      	strb	r2, [r3, #2]
	cflag[3] = dataRead[27];
 800acc2:	4bbb      	ldr	r3, [pc, #748]	@ (800afb0 <E_read+0x3e8>)
 800acc4:	7eda      	ldrb	r2, [r3, #27]
 800acc6:	4bbe      	ldr	r3, [pc, #760]	@ (800afc0 <E_read+0x3f8>)
 800acc8:	70da      	strb	r2, [r3, #3]
	cflag[4] = dataRead[28];
 800acca:	4bb9      	ldr	r3, [pc, #740]	@ (800afb0 <E_read+0x3e8>)
 800accc:	7f1a      	ldrb	r2, [r3, #28]
 800acce:	4bbc      	ldr	r3, [pc, #752]	@ (800afc0 <E_read+0x3f8>)
 800acd0:	711a      	strb	r2, [r3, #4]
	cflag[5] = dataRead[29];
 800acd2:	4bb7      	ldr	r3, [pc, #732]	@ (800afb0 <E_read+0x3e8>)
 800acd4:	7f5a      	ldrb	r2, [r3, #29]
 800acd6:	4bba      	ldr	r3, [pc, #744]	@ (800afc0 <E_read+0x3f8>)
 800acd8:	715a      	strb	r2, [r3, #5]
	cflag[6] = dataRead[30];
 800acda:	4bb5      	ldr	r3, [pc, #724]	@ (800afb0 <E_read+0x3e8>)
 800acdc:	7f9a      	ldrb	r2, [r3, #30]
 800acde:	4bb8      	ldr	r3, [pc, #736]	@ (800afc0 <E_read+0x3f8>)
 800ace0:	719a      	strb	r2, [r3, #6]
	cflag[7] = dataRead[31];
 800ace2:	4bb3      	ldr	r3, [pc, #716]	@ (800afb0 <E_read+0x3e8>)
 800ace4:	7fda      	ldrb	r2, [r3, #31]
 800ace6:	4bb6      	ldr	r3, [pc, #728]	@ (800afc0 <E_read+0x3f8>)
 800ace8:	71da      	strb	r2, [r3, #7]

	tpulse[0] = dataRead[32];
 800acea:	4bb1      	ldr	r3, [pc, #708]	@ (800afb0 <E_read+0x3e8>)
 800acec:	2220      	movs	r2, #32
 800acee:	5c9a      	ldrb	r2, [r3, r2]
 800acf0:	4bb4      	ldr	r3, [pc, #720]	@ (800afc4 <E_read+0x3fc>)
 800acf2:	701a      	strb	r2, [r3, #0]
	tpulse[1] = dataRead[33];
 800acf4:	4bae      	ldr	r3, [pc, #696]	@ (800afb0 <E_read+0x3e8>)
 800acf6:	2221      	movs	r2, #33	@ 0x21
 800acf8:	5c9a      	ldrb	r2, [r3, r2]
 800acfa:	4bb2      	ldr	r3, [pc, #712]	@ (800afc4 <E_read+0x3fc>)
 800acfc:	705a      	strb	r2, [r3, #1]
	tpulse[2] = dataRead[34];
 800acfe:	4bac      	ldr	r3, [pc, #688]	@ (800afb0 <E_read+0x3e8>)
 800ad00:	2222      	movs	r2, #34	@ 0x22
 800ad02:	5c9a      	ldrb	r2, [r3, r2]
 800ad04:	4baf      	ldr	r3, [pc, #700]	@ (800afc4 <E_read+0x3fc>)
 800ad06:	709a      	strb	r2, [r3, #2]
	tpulse[3] = dataRead[35];
 800ad08:	4ba9      	ldr	r3, [pc, #676]	@ (800afb0 <E_read+0x3e8>)
 800ad0a:	2223      	movs	r2, #35	@ 0x23
 800ad0c:	5c9a      	ldrb	r2, [r3, r2]
 800ad0e:	4bad      	ldr	r3, [pc, #692]	@ (800afc4 <E_read+0x3fc>)
 800ad10:	70da      	strb	r2, [r3, #3]
	tpulse[4] = dataRead[36];
 800ad12:	4ba7      	ldr	r3, [pc, #668]	@ (800afb0 <E_read+0x3e8>)
 800ad14:	2224      	movs	r2, #36	@ 0x24
 800ad16:	5c9a      	ldrb	r2, [r3, r2]
 800ad18:	4baa      	ldr	r3, [pc, #680]	@ (800afc4 <E_read+0x3fc>)
 800ad1a:	711a      	strb	r2, [r3, #4]
	tpulse[5] = dataRead[37];
 800ad1c:	4ba4      	ldr	r3, [pc, #656]	@ (800afb0 <E_read+0x3e8>)
 800ad1e:	2225      	movs	r2, #37	@ 0x25
 800ad20:	5c9a      	ldrb	r2, [r3, r2]
 800ad22:	4ba8      	ldr	r3, [pc, #672]	@ (800afc4 <E_read+0x3fc>)
 800ad24:	715a      	strb	r2, [r3, #5]
	tpulse[6] = dataRead[38];
 800ad26:	4ba2      	ldr	r3, [pc, #648]	@ (800afb0 <E_read+0x3e8>)
 800ad28:	2226      	movs	r2, #38	@ 0x26
 800ad2a:	5c9a      	ldrb	r2, [r3, r2]
 800ad2c:	4ba5      	ldr	r3, [pc, #660]	@ (800afc4 <E_read+0x3fc>)
 800ad2e:	719a      	strb	r2, [r3, #6]
	tpulse[7] = dataRead[39];
 800ad30:	4b9f      	ldr	r3, [pc, #636]	@ (800afb0 <E_read+0x3e8>)
 800ad32:	2227      	movs	r2, #39	@ 0x27
 800ad34:	5c9a      	ldrb	r2, [r3, r2]
 800ad36:	4ba3      	ldr	r3, [pc, #652]	@ (800afc4 <E_read+0x3fc>)
 800ad38:	71da      	strb	r2, [r3, #7]

	tfare[0] = dataRead[40];
 800ad3a:	4b9d      	ldr	r3, [pc, #628]	@ (800afb0 <E_read+0x3e8>)
 800ad3c:	2228      	movs	r2, #40	@ 0x28
 800ad3e:	5c9a      	ldrb	r2, [r3, r2]
 800ad40:	4ba1      	ldr	r3, [pc, #644]	@ (800afc8 <E_read+0x400>)
 800ad42:	701a      	strb	r2, [r3, #0]
	tfare[1] = dataRead[41];
 800ad44:	4b9a      	ldr	r3, [pc, #616]	@ (800afb0 <E_read+0x3e8>)
 800ad46:	2229      	movs	r2, #41	@ 0x29
 800ad48:	5c9a      	ldrb	r2, [r3, r2]
 800ad4a:	4b9f      	ldr	r3, [pc, #636]	@ (800afc8 <E_read+0x400>)
 800ad4c:	705a      	strb	r2, [r3, #1]
	tfare[2] = dataRead[42];
 800ad4e:	4b98      	ldr	r3, [pc, #608]	@ (800afb0 <E_read+0x3e8>)
 800ad50:	222a      	movs	r2, #42	@ 0x2a
 800ad52:	5c9a      	ldrb	r2, [r3, r2]
 800ad54:	4b9c      	ldr	r3, [pc, #624]	@ (800afc8 <E_read+0x400>)
 800ad56:	709a      	strb	r2, [r3, #2]
	tfare[3] = dataRead[43];
 800ad58:	4b95      	ldr	r3, [pc, #596]	@ (800afb0 <E_read+0x3e8>)
 800ad5a:	222b      	movs	r2, #43	@ 0x2b
 800ad5c:	5c9a      	ldrb	r2, [r3, r2]
 800ad5e:	4b9a      	ldr	r3, [pc, #616]	@ (800afc8 <E_read+0x400>)
 800ad60:	70da      	strb	r2, [r3, #3]
	tfare[4] = dataRead[44];
 800ad62:	4b93      	ldr	r3, [pc, #588]	@ (800afb0 <E_read+0x3e8>)
 800ad64:	222c      	movs	r2, #44	@ 0x2c
 800ad66:	5c9a      	ldrb	r2, [r3, r2]
 800ad68:	4b97      	ldr	r3, [pc, #604]	@ (800afc8 <E_read+0x400>)
 800ad6a:	711a      	strb	r2, [r3, #4]
	tfare[5] = dataRead[45];
 800ad6c:	4b90      	ldr	r3, [pc, #576]	@ (800afb0 <E_read+0x3e8>)
 800ad6e:	222d      	movs	r2, #45	@ 0x2d
 800ad70:	5c9a      	ldrb	r2, [r3, r2]
 800ad72:	4b95      	ldr	r3, [pc, #596]	@ (800afc8 <E_read+0x400>)
 800ad74:	715a      	strb	r2, [r3, #5]
	tfare[6] = dataRead[46];
 800ad76:	4b8e      	ldr	r3, [pc, #568]	@ (800afb0 <E_read+0x3e8>)
 800ad78:	222e      	movs	r2, #46	@ 0x2e
 800ad7a:	5c9a      	ldrb	r2, [r3, r2]
 800ad7c:	4b92      	ldr	r3, [pc, #584]	@ (800afc8 <E_read+0x400>)
 800ad7e:	719a      	strb	r2, [r3, #6]
	tfare[7] = dataRead[47];
 800ad80:	4b8b      	ldr	r3, [pc, #556]	@ (800afb0 <E_read+0x3e8>)
 800ad82:	222f      	movs	r2, #47	@ 0x2f
 800ad84:	5c9a      	ldrb	r2, [r3, r2]
 800ad86:	4b90      	ldr	r3, [pc, #576]	@ (800afc8 <E_read+0x400>)
 800ad88:	71da      	strb	r2, [r3, #7]

	tsub[0] = dataRead[48];
 800ad8a:	4b89      	ldr	r3, [pc, #548]	@ (800afb0 <E_read+0x3e8>)
 800ad8c:	2230      	movs	r2, #48	@ 0x30
 800ad8e:	5c9a      	ldrb	r2, [r3, r2]
 800ad90:	4b8e      	ldr	r3, [pc, #568]	@ (800afcc <E_read+0x404>)
 800ad92:	701a      	strb	r2, [r3, #0]
	tsub[1] = dataRead[49];
 800ad94:	4b86      	ldr	r3, [pc, #536]	@ (800afb0 <E_read+0x3e8>)
 800ad96:	2231      	movs	r2, #49	@ 0x31
 800ad98:	5c9a      	ldrb	r2, [r3, r2]
 800ad9a:	4b8c      	ldr	r3, [pc, #560]	@ (800afcc <E_read+0x404>)
 800ad9c:	705a      	strb	r2, [r3, #1]
	tsub[2] = dataRead[50];
 800ad9e:	4b84      	ldr	r3, [pc, #528]	@ (800afb0 <E_read+0x3e8>)
 800ada0:	2232      	movs	r2, #50	@ 0x32
 800ada2:	5c9a      	ldrb	r2, [r3, r2]
 800ada4:	4b89      	ldr	r3, [pc, #548]	@ (800afcc <E_read+0x404>)
 800ada6:	709a      	strb	r2, [r3, #2]
	tsub[3] = dataRead[51];
 800ada8:	4b81      	ldr	r3, [pc, #516]	@ (800afb0 <E_read+0x3e8>)
 800adaa:	2233      	movs	r2, #51	@ 0x33
 800adac:	5c9a      	ldrb	r2, [r3, r2]
 800adae:	4b87      	ldr	r3, [pc, #540]	@ (800afcc <E_read+0x404>)
 800adb0:	70da      	strb	r2, [r3, #3]
	tsub[4] = dataRead[52];
 800adb2:	4b7f      	ldr	r3, [pc, #508]	@ (800afb0 <E_read+0x3e8>)
 800adb4:	2234      	movs	r2, #52	@ 0x34
 800adb6:	5c9a      	ldrb	r2, [r3, r2]
 800adb8:	4b84      	ldr	r3, [pc, #528]	@ (800afcc <E_read+0x404>)
 800adba:	711a      	strb	r2, [r3, #4]
	tsub[5] = dataRead[53];
 800adbc:	4b7c      	ldr	r3, [pc, #496]	@ (800afb0 <E_read+0x3e8>)
 800adbe:	2235      	movs	r2, #53	@ 0x35
 800adc0:	5c9a      	ldrb	r2, [r3, r2]
 800adc2:	4b82      	ldr	r3, [pc, #520]	@ (800afcc <E_read+0x404>)
 800adc4:	715a      	strb	r2, [r3, #5]
	tsub[6] = dataRead[54];
 800adc6:	4b7a      	ldr	r3, [pc, #488]	@ (800afb0 <E_read+0x3e8>)
 800adc8:	2236      	movs	r2, #54	@ 0x36
 800adca:	5c9a      	ldrb	r2, [r3, r2]
 800adcc:	4b7f      	ldr	r3, [pc, #508]	@ (800afcc <E_read+0x404>)
 800adce:	719a      	strb	r2, [r3, #6]
	tsub[7] = dataRead[55];
 800add0:	4b77      	ldr	r3, [pc, #476]	@ (800afb0 <E_read+0x3e8>)
 800add2:	2237      	movs	r2, #55	@ 0x37
 800add4:	5c9a      	ldrb	r2, [r3, r2]
 800add6:	4b7d      	ldr	r3, [pc, #500]	@ (800afcc <E_read+0x404>)
 800add8:	71da      	strb	r2, [r3, #7]

	cfare[0] = dataRead[56];
 800adda:	4b75      	ldr	r3, [pc, #468]	@ (800afb0 <E_read+0x3e8>)
 800addc:	2238      	movs	r2, #56	@ 0x38
 800adde:	5c9a      	ldrb	r2, [r3, r2]
 800ade0:	4b7b      	ldr	r3, [pc, #492]	@ (800afd0 <E_read+0x408>)
 800ade2:	701a      	strb	r2, [r3, #0]
	cfare[1] = dataRead[57];
 800ade4:	4b72      	ldr	r3, [pc, #456]	@ (800afb0 <E_read+0x3e8>)
 800ade6:	2239      	movs	r2, #57	@ 0x39
 800ade8:	5c9a      	ldrb	r2, [r3, r2]
 800adea:	4b79      	ldr	r3, [pc, #484]	@ (800afd0 <E_read+0x408>)
 800adec:	705a      	strb	r2, [r3, #1]
	cfare[2] = dataRead[58];
 800adee:	4b70      	ldr	r3, [pc, #448]	@ (800afb0 <E_read+0x3e8>)
 800adf0:	223a      	movs	r2, #58	@ 0x3a
 800adf2:	5c9a      	ldrb	r2, [r3, r2]
 800adf4:	4b76      	ldr	r3, [pc, #472]	@ (800afd0 <E_read+0x408>)
 800adf6:	709a      	strb	r2, [r3, #2]
	cfare[3] = dataRead[59];
 800adf8:	4b6d      	ldr	r3, [pc, #436]	@ (800afb0 <E_read+0x3e8>)
 800adfa:	223b      	movs	r2, #59	@ 0x3b
 800adfc:	5c9a      	ldrb	r2, [r3, r2]
 800adfe:	4b74      	ldr	r3, [pc, #464]	@ (800afd0 <E_read+0x408>)
 800ae00:	70da      	strb	r2, [r3, #3]
	cfare[4] = dataRead[60];
 800ae02:	4b6b      	ldr	r3, [pc, #428]	@ (800afb0 <E_read+0x3e8>)
 800ae04:	223c      	movs	r2, #60	@ 0x3c
 800ae06:	5c9a      	ldrb	r2, [r3, r2]
 800ae08:	4b71      	ldr	r3, [pc, #452]	@ (800afd0 <E_read+0x408>)
 800ae0a:	711a      	strb	r2, [r3, #4]
	cfare[5] = dataRead[61];
 800ae0c:	4b68      	ldr	r3, [pc, #416]	@ (800afb0 <E_read+0x3e8>)
 800ae0e:	223d      	movs	r2, #61	@ 0x3d
 800ae10:	5c9a      	ldrb	r2, [r3, r2]
 800ae12:	4b6f      	ldr	r3, [pc, #444]	@ (800afd0 <E_read+0x408>)
 800ae14:	715a      	strb	r2, [r3, #5]
	cfare[6] = dataRead[62];
 800ae16:	4b66      	ldr	r3, [pc, #408]	@ (800afb0 <E_read+0x3e8>)
 800ae18:	223e      	movs	r2, #62	@ 0x3e
 800ae1a:	5c9a      	ldrb	r2, [r3, r2]
 800ae1c:	4b6c      	ldr	r3, [pc, #432]	@ (800afd0 <E_read+0x408>)
 800ae1e:	719a      	strb	r2, [r3, #6]
	cfare[7] = dataRead[63];
 800ae20:	4b63      	ldr	r3, [pc, #396]	@ (800afb0 <E_read+0x3e8>)
 800ae22:	223f      	movs	r2, #63	@ 0x3f
 800ae24:	5c9a      	ldrb	r2, [r3, r2]
 800ae26:	4b6a      	ldr	r3, [pc, #424]	@ (800afd0 <E_read+0x408>)
 800ae28:	71da      	strb	r2, [r3, #7]

	csub[0] = dataRead[64];
 800ae2a:	4b61      	ldr	r3, [pc, #388]	@ (800afb0 <E_read+0x3e8>)
 800ae2c:	2240      	movs	r2, #64	@ 0x40
 800ae2e:	5c9a      	ldrb	r2, [r3, r2]
 800ae30:	4b68      	ldr	r3, [pc, #416]	@ (800afd4 <E_read+0x40c>)
 800ae32:	701a      	strb	r2, [r3, #0]
	csub[1] = dataRead[65];
 800ae34:	4b5e      	ldr	r3, [pc, #376]	@ (800afb0 <E_read+0x3e8>)
 800ae36:	2241      	movs	r2, #65	@ 0x41
 800ae38:	5c9a      	ldrb	r2, [r3, r2]
 800ae3a:	4b66      	ldr	r3, [pc, #408]	@ (800afd4 <E_read+0x40c>)
 800ae3c:	705a      	strb	r2, [r3, #1]
	csub[2] = dataRead[66];
 800ae3e:	4b5c      	ldr	r3, [pc, #368]	@ (800afb0 <E_read+0x3e8>)
 800ae40:	2242      	movs	r2, #66	@ 0x42
 800ae42:	5c9a      	ldrb	r2, [r3, r2]
 800ae44:	4b63      	ldr	r3, [pc, #396]	@ (800afd4 <E_read+0x40c>)
 800ae46:	709a      	strb	r2, [r3, #2]
	csub[3] = dataRead[67];
 800ae48:	4b59      	ldr	r3, [pc, #356]	@ (800afb0 <E_read+0x3e8>)
 800ae4a:	2243      	movs	r2, #67	@ 0x43
 800ae4c:	5c9a      	ldrb	r2, [r3, r2]
 800ae4e:	4b61      	ldr	r3, [pc, #388]	@ (800afd4 <E_read+0x40c>)
 800ae50:	70da      	strb	r2, [r3, #3]
	csub[4] = dataRead[68];
 800ae52:	4b57      	ldr	r3, [pc, #348]	@ (800afb0 <E_read+0x3e8>)
 800ae54:	2244      	movs	r2, #68	@ 0x44
 800ae56:	5c9a      	ldrb	r2, [r3, r2]
 800ae58:	4b5e      	ldr	r3, [pc, #376]	@ (800afd4 <E_read+0x40c>)
 800ae5a:	711a      	strb	r2, [r3, #4]
	csub[5] = dataRead[69];
 800ae5c:	4b54      	ldr	r3, [pc, #336]	@ (800afb0 <E_read+0x3e8>)
 800ae5e:	2245      	movs	r2, #69	@ 0x45
 800ae60:	5c9a      	ldrb	r2, [r3, r2]
 800ae62:	4b5c      	ldr	r3, [pc, #368]	@ (800afd4 <E_read+0x40c>)
 800ae64:	715a      	strb	r2, [r3, #5]
	csub[6] = dataRead[70];
 800ae66:	4b52      	ldr	r3, [pc, #328]	@ (800afb0 <E_read+0x3e8>)
 800ae68:	2246      	movs	r2, #70	@ 0x46
 800ae6a:	5c9a      	ldrb	r2, [r3, r2]
 800ae6c:	4b59      	ldr	r3, [pc, #356]	@ (800afd4 <E_read+0x40c>)
 800ae6e:	719a      	strb	r2, [r3, #6]
	csub[7] = dataRead[71];
 800ae70:	4b4f      	ldr	r3, [pc, #316]	@ (800afb0 <E_read+0x3e8>)
 800ae72:	2247      	movs	r2, #71	@ 0x47
 800ae74:	5c9a      	ldrb	r2, [r3, r2]
 800ae76:	4b57      	ldr	r3, [pc, #348]	@ (800afd4 <E_read+0x40c>)
 800ae78:	71da      	strb	r2, [r3, #7]

	ttime[0] = dataRead[72];
 800ae7a:	4b4d      	ldr	r3, [pc, #308]	@ (800afb0 <E_read+0x3e8>)
 800ae7c:	2248      	movs	r2, #72	@ 0x48
 800ae7e:	5c9a      	ldrb	r2, [r3, r2]
 800ae80:	4b55      	ldr	r3, [pc, #340]	@ (800afd8 <E_read+0x410>)
 800ae82:	701a      	strb	r2, [r3, #0]
	ttime[1] = dataRead[73];
 800ae84:	4b4a      	ldr	r3, [pc, #296]	@ (800afb0 <E_read+0x3e8>)
 800ae86:	2249      	movs	r2, #73	@ 0x49
 800ae88:	5c9a      	ldrb	r2, [r3, r2]
 800ae8a:	4b53      	ldr	r3, [pc, #332]	@ (800afd8 <E_read+0x410>)
 800ae8c:	705a      	strb	r2, [r3, #1]
	ttime[2] = dataRead[74];
 800ae8e:	4b48      	ldr	r3, [pc, #288]	@ (800afb0 <E_read+0x3e8>)
 800ae90:	224a      	movs	r2, #74	@ 0x4a
 800ae92:	5c9a      	ldrb	r2, [r3, r2]
 800ae94:	4b50      	ldr	r3, [pc, #320]	@ (800afd8 <E_read+0x410>)
 800ae96:	709a      	strb	r2, [r3, #2]
	ttime[3] = dataRead[75];
 800ae98:	4b45      	ldr	r3, [pc, #276]	@ (800afb0 <E_read+0x3e8>)
 800ae9a:	224b      	movs	r2, #75	@ 0x4b
 800ae9c:	5c9a      	ldrb	r2, [r3, r2]
 800ae9e:	4b4e      	ldr	r3, [pc, #312]	@ (800afd8 <E_read+0x410>)
 800aea0:	70da      	strb	r2, [r3, #3]
	ttime[4] = dataRead[76];
 800aea2:	4b43      	ldr	r3, [pc, #268]	@ (800afb0 <E_read+0x3e8>)
 800aea4:	224c      	movs	r2, #76	@ 0x4c
 800aea6:	5c9a      	ldrb	r2, [r3, r2]
 800aea8:	4b4b      	ldr	r3, [pc, #300]	@ (800afd8 <E_read+0x410>)
 800aeaa:	711a      	strb	r2, [r3, #4]
	ttime[5] = dataRead[77];
 800aeac:	4b40      	ldr	r3, [pc, #256]	@ (800afb0 <E_read+0x3e8>)
 800aeae:	224d      	movs	r2, #77	@ 0x4d
 800aeb0:	5c9a      	ldrb	r2, [r3, r2]
 800aeb2:	4b49      	ldr	r3, [pc, #292]	@ (800afd8 <E_read+0x410>)
 800aeb4:	715a      	strb	r2, [r3, #5]
	ttime[6] = dataRead[78];
 800aeb6:	4b3e      	ldr	r3, [pc, #248]	@ (800afb0 <E_read+0x3e8>)
 800aeb8:	224e      	movs	r2, #78	@ 0x4e
 800aeba:	5c9a      	ldrb	r2, [r3, r2]
 800aebc:	4b46      	ldr	r3, [pc, #280]	@ (800afd8 <E_read+0x410>)
 800aebe:	719a      	strb	r2, [r3, #6]
	ttime[7] = dataRead[79];
 800aec0:	4b3b      	ldr	r3, [pc, #236]	@ (800afb0 <E_read+0x3e8>)
 800aec2:	224f      	movs	r2, #79	@ 0x4f
 800aec4:	5c9a      	ldrb	r2, [r3, r2]
 800aec6:	4b44      	ldr	r3, [pc, #272]	@ (800afd8 <E_read+0x410>)
 800aec8:	71da      	strb	r2, [r3, #7]

	pulses[0] = dataRead[80];
 800aeca:	4b39      	ldr	r3, [pc, #228]	@ (800afb0 <E_read+0x3e8>)
 800aecc:	2250      	movs	r2, #80	@ 0x50
 800aece:	5c9a      	ldrb	r2, [r3, r2]
 800aed0:	4b42      	ldr	r3, [pc, #264]	@ (800afdc <E_read+0x414>)
 800aed2:	701a      	strb	r2, [r3, #0]
	pulses[1] = dataRead[81];
 800aed4:	4b36      	ldr	r3, [pc, #216]	@ (800afb0 <E_read+0x3e8>)
 800aed6:	2251      	movs	r2, #81	@ 0x51
 800aed8:	5c9a      	ldrb	r2, [r3, r2]
 800aeda:	4b40      	ldr	r3, [pc, #256]	@ (800afdc <E_read+0x414>)
 800aedc:	705a      	strb	r2, [r3, #1]
	pulses[2] = dataRead[82];
 800aede:	4b34      	ldr	r3, [pc, #208]	@ (800afb0 <E_read+0x3e8>)
 800aee0:	2252      	movs	r2, #82	@ 0x52
 800aee2:	5c9a      	ldrb	r2, [r3, r2]
 800aee4:	4b3d      	ldr	r3, [pc, #244]	@ (800afdc <E_read+0x414>)
 800aee6:	709a      	strb	r2, [r3, #2]
	pulses[3] = dataRead[83];
 800aee8:	4b31      	ldr	r3, [pc, #196]	@ (800afb0 <E_read+0x3e8>)
 800aeea:	2253      	movs	r2, #83	@ 0x53
 800aeec:	5c9a      	ldrb	r2, [r3, r2]
 800aeee:	4b3b      	ldr	r3, [pc, #236]	@ (800afdc <E_read+0x414>)
 800aef0:	70da      	strb	r2, [r3, #3]
	pulses[4] = dataRead[84];
 800aef2:	4b2f      	ldr	r3, [pc, #188]	@ (800afb0 <E_read+0x3e8>)
 800aef4:	2254      	movs	r2, #84	@ 0x54
 800aef6:	5c9a      	ldrb	r2, [r3, r2]
 800aef8:	4b38      	ldr	r3, [pc, #224]	@ (800afdc <E_read+0x414>)
 800aefa:	711a      	strb	r2, [r3, #4]
	pulses[5] = dataRead[85];
 800aefc:	4b2c      	ldr	r3, [pc, #176]	@ (800afb0 <E_read+0x3e8>)
 800aefe:	2255      	movs	r2, #85	@ 0x55
 800af00:	5c9a      	ldrb	r2, [r3, r2]
 800af02:	4b36      	ldr	r3, [pc, #216]	@ (800afdc <E_read+0x414>)
 800af04:	715a      	strb	r2, [r3, #5]
	pulses[6] = dataRead[86];
 800af06:	4b2a      	ldr	r3, [pc, #168]	@ (800afb0 <E_read+0x3e8>)
 800af08:	2256      	movs	r2, #86	@ 0x56
 800af0a:	5c9a      	ldrb	r2, [r3, r2]
 800af0c:	4b33      	ldr	r3, [pc, #204]	@ (800afdc <E_read+0x414>)
 800af0e:	719a      	strb	r2, [r3, #6]
	pulses[7] = dataRead[87];
 800af10:	4b27      	ldr	r3, [pc, #156]	@ (800afb0 <E_read+0x3e8>)
 800af12:	2257      	movs	r2, #87	@ 0x57
 800af14:	5c9a      	ldrb	r2, [r3, r2]
 800af16:	4b31      	ldr	r3, [pc, #196]	@ (800afdc <E_read+0x414>)
 800af18:	71da      	strb	r2, [r3, #7]

	tkm_d = ASC2Dec(tkm);
 800af1a:	4b26      	ldr	r3, [pc, #152]	@ (800afb4 <E_read+0x3ec>)
 800af1c:	0018      	movs	r0, r3
 800af1e:	f7ff fe26 	bl	800ab6e <ASC2Dec>
 800af22:	0002      	movs	r2, r0
 800af24:	4b2e      	ldr	r3, [pc, #184]	@ (800afe0 <E_read+0x418>)
 800af26:	601a      	str	r2, [r3, #0]
	pkm_d = ASC2Dec(pkm);
 800af28:	4b23      	ldr	r3, [pc, #140]	@ (800afb8 <E_read+0x3f0>)
 800af2a:	0018      	movs	r0, r3
 800af2c:	f7ff fe1f 	bl	800ab6e <ASC2Dec>
 800af30:	0002      	movs	r2, r0
 800af32:	4b2c      	ldr	r3, [pc, #176]	@ (800afe4 <E_read+0x41c>)
 800af34:	601a      	str	r2, [r3, #0]
	tflag_d = ASC2Dec(tflag);
 800af36:	4b21      	ldr	r3, [pc, #132]	@ (800afbc <E_read+0x3f4>)
 800af38:	0018      	movs	r0, r3
 800af3a:	f7ff fe18 	bl	800ab6e <ASC2Dec>
 800af3e:	0002      	movs	r2, r0
 800af40:	4b29      	ldr	r3, [pc, #164]	@ (800afe8 <E_read+0x420>)
 800af42:	601a      	str	r2, [r3, #0]
	cflag_d = ASC2Dec(cflag);
 800af44:	4b1e      	ldr	r3, [pc, #120]	@ (800afc0 <E_read+0x3f8>)
 800af46:	0018      	movs	r0, r3
 800af48:	f7ff fe11 	bl	800ab6e <ASC2Dec>
 800af4c:	0002      	movs	r2, r0
 800af4e:	4b27      	ldr	r3, [pc, #156]	@ (800afec <E_read+0x424>)
 800af50:	601a      	str	r2, [r3, #0]
	tpulse_d = ASC2Dec(tpulse);
 800af52:	4b1c      	ldr	r3, [pc, #112]	@ (800afc4 <E_read+0x3fc>)
 800af54:	0018      	movs	r0, r3
 800af56:	f7ff fe0a 	bl	800ab6e <ASC2Dec>
 800af5a:	0002      	movs	r2, r0
 800af5c:	4b24      	ldr	r3, [pc, #144]	@ (800aff0 <E_read+0x428>)
 800af5e:	601a      	str	r2, [r3, #0]
	tfare_d = ASC2Dec(tfare);
 800af60:	4b19      	ldr	r3, [pc, #100]	@ (800afc8 <E_read+0x400>)
 800af62:	0018      	movs	r0, r3
 800af64:	f7ff fe03 	bl	800ab6e <ASC2Dec>
 800af68:	0002      	movs	r2, r0
 800af6a:	4b22      	ldr	r3, [pc, #136]	@ (800aff4 <E_read+0x42c>)
 800af6c:	601a      	str	r2, [r3, #0]
	tsub_d = ASC2Dec(tsub);
 800af6e:	4b17      	ldr	r3, [pc, #92]	@ (800afcc <E_read+0x404>)
 800af70:	0018      	movs	r0, r3
 800af72:	f7ff fdfc 	bl	800ab6e <ASC2Dec>
 800af76:	0002      	movs	r2, r0
 800af78:	4b1f      	ldr	r3, [pc, #124]	@ (800aff8 <E_read+0x430>)
 800af7a:	601a      	str	r2, [r3, #0]
	cfare_d = ASC2Dec(cfare);
 800af7c:	4b14      	ldr	r3, [pc, #80]	@ (800afd0 <E_read+0x408>)
 800af7e:	0018      	movs	r0, r3
 800af80:	f7ff fdf5 	bl	800ab6e <ASC2Dec>
 800af84:	0002      	movs	r2, r0
 800af86:	4b1d      	ldr	r3, [pc, #116]	@ (800affc <E_read+0x434>)
 800af88:	601a      	str	r2, [r3, #0]
	csub_d = ASC2Dec(csub);
 800af8a:	4b12      	ldr	r3, [pc, #72]	@ (800afd4 <E_read+0x40c>)
 800af8c:	0018      	movs	r0, r3
 800af8e:	f7ff fdee 	bl	800ab6e <ASC2Dec>
 800af92:	0002      	movs	r2, r0
 800af94:	4b1a      	ldr	r3, [pc, #104]	@ (800b000 <E_read+0x438>)
 800af96:	601a      	str	r2, [r3, #0]
//	ttime_d = ASC2Dec(ttime);
	ttime_x = ASC2Dec(ttime);
 800af98:	4b0f      	ldr	r3, [pc, #60]	@ (800afd8 <E_read+0x410>)
 800af9a:	0018      	movs	r0, r3
 800af9c:	f7ff fde7 	bl	800ab6e <ASC2Dec>
 800afa0:	0002      	movs	r2, r0
 800afa2:	4b18      	ldr	r3, [pc, #96]	@ (800b004 <E_read+0x43c>)
 800afa4:	601a      	str	r2, [r3, #0]
//	Long_to_byte(csub_d_x10, temp_array);
//	memcpy(dataDisplay+36, temp_array, sizeof(uint8_t)*4);
//
//	memcpy(total_hmi+6, dataDisplay, sizeof(uint8_t)*40);
//	HAL_UART_Transmit(&huart1, total_hmi, 46, 0x0E);
}
 800afa6:	46c0      	nop			@ (mov r8, r8)
 800afa8:	46bd      	mov	sp, r7
 800afaa:	e02d      	b.n	800b008 <E_read+0x440>
 800afac:	20000570 	.word	0x20000570
 800afb0:	20000d4c 	.word	0x20000d4c
 800afb4:	20000e50 	.word	0x20000e50
 800afb8:	20000e58 	.word	0x20000e58
 800afbc:	20000e60 	.word	0x20000e60
 800afc0:	20000e68 	.word	0x20000e68
 800afc4:	20000e70 	.word	0x20000e70
 800afc8:	20000e78 	.word	0x20000e78
 800afcc:	20000e80 	.word	0x20000e80
 800afd0:	20000e88 	.word	0x20000e88
 800afd4:	20000e90 	.word	0x20000e90
 800afd8:	20000e98 	.word	0x20000e98
 800afdc:	20000eb0 	.word	0x20000eb0
 800afe0:	20000e14 	.word	0x20000e14
 800afe4:	20000e18 	.word	0x20000e18
 800afe8:	20000e1c 	.word	0x20000e1c
 800afec:	20000e20 	.word	0x20000e20
 800aff0:	20000e24 	.word	0x20000e24
 800aff4:	20000e28 	.word	0x20000e28
 800aff8:	20000e2c 	.word	0x20000e2c
 800affc:	20000e30 	.word	0x20000e30
 800b000:	20000e34 	.word	0x20000e34
 800b004:	20000e3c 	.word	0x20000e3c
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	46c0      	nop			@ (mov r8, r8)

0800b00c <E_write>:

void E_write(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af04      	add	r7, sp, #16
	dataWrite[0] = tkm[0];
 800b012:	4bf4      	ldr	r3, [pc, #976]	@ (800b3e4 <E_write+0x3d8>)
 800b014:	781a      	ldrb	r2, [r3, #0]
 800b016:	4bf4      	ldr	r3, [pc, #976]	@ (800b3e8 <E_write+0x3dc>)
 800b018:	701a      	strb	r2, [r3, #0]
	dataWrite[1] = tkm[1];
 800b01a:	4bf2      	ldr	r3, [pc, #968]	@ (800b3e4 <E_write+0x3d8>)
 800b01c:	785a      	ldrb	r2, [r3, #1]
 800b01e:	4bf2      	ldr	r3, [pc, #968]	@ (800b3e8 <E_write+0x3dc>)
 800b020:	705a      	strb	r2, [r3, #1]
	dataWrite[2] = tkm[2];
 800b022:	4bf0      	ldr	r3, [pc, #960]	@ (800b3e4 <E_write+0x3d8>)
 800b024:	789a      	ldrb	r2, [r3, #2]
 800b026:	4bf0      	ldr	r3, [pc, #960]	@ (800b3e8 <E_write+0x3dc>)
 800b028:	709a      	strb	r2, [r3, #2]
	dataWrite[3] = tkm[3];
 800b02a:	4bee      	ldr	r3, [pc, #952]	@ (800b3e4 <E_write+0x3d8>)
 800b02c:	78da      	ldrb	r2, [r3, #3]
 800b02e:	4bee      	ldr	r3, [pc, #952]	@ (800b3e8 <E_write+0x3dc>)
 800b030:	70da      	strb	r2, [r3, #3]
	dataWrite[4] = tkm[4];
 800b032:	4bec      	ldr	r3, [pc, #944]	@ (800b3e4 <E_write+0x3d8>)
 800b034:	791a      	ldrb	r2, [r3, #4]
 800b036:	4bec      	ldr	r3, [pc, #944]	@ (800b3e8 <E_write+0x3dc>)
 800b038:	711a      	strb	r2, [r3, #4]
	dataWrite[5] = tkm[5];
 800b03a:	4bea      	ldr	r3, [pc, #936]	@ (800b3e4 <E_write+0x3d8>)
 800b03c:	795a      	ldrb	r2, [r3, #5]
 800b03e:	4bea      	ldr	r3, [pc, #936]	@ (800b3e8 <E_write+0x3dc>)
 800b040:	715a      	strb	r2, [r3, #5]
	dataWrite[6] = tkm[6];
 800b042:	4be8      	ldr	r3, [pc, #928]	@ (800b3e4 <E_write+0x3d8>)
 800b044:	799a      	ldrb	r2, [r3, #6]
 800b046:	4be8      	ldr	r3, [pc, #928]	@ (800b3e8 <E_write+0x3dc>)
 800b048:	719a      	strb	r2, [r3, #6]
	dataWrite[7] = tkm[7];
 800b04a:	4be6      	ldr	r3, [pc, #920]	@ (800b3e4 <E_write+0x3d8>)
 800b04c:	79da      	ldrb	r2, [r3, #7]
 800b04e:	4be6      	ldr	r3, [pc, #920]	@ (800b3e8 <E_write+0x3dc>)
 800b050:	71da      	strb	r2, [r3, #7]

	dataWrite[8] = pkm[0];
 800b052:	4be6      	ldr	r3, [pc, #920]	@ (800b3ec <E_write+0x3e0>)
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	4be4      	ldr	r3, [pc, #912]	@ (800b3e8 <E_write+0x3dc>)
 800b058:	721a      	strb	r2, [r3, #8]
	dataWrite[9] = pkm[1];
 800b05a:	4be4      	ldr	r3, [pc, #912]	@ (800b3ec <E_write+0x3e0>)
 800b05c:	785a      	ldrb	r2, [r3, #1]
 800b05e:	4be2      	ldr	r3, [pc, #904]	@ (800b3e8 <E_write+0x3dc>)
 800b060:	725a      	strb	r2, [r3, #9]
	dataWrite[10] = pkm[2];
 800b062:	4be2      	ldr	r3, [pc, #904]	@ (800b3ec <E_write+0x3e0>)
 800b064:	789a      	ldrb	r2, [r3, #2]
 800b066:	4be0      	ldr	r3, [pc, #896]	@ (800b3e8 <E_write+0x3dc>)
 800b068:	729a      	strb	r2, [r3, #10]
	dataWrite[11] = pkm[3];
 800b06a:	4be0      	ldr	r3, [pc, #896]	@ (800b3ec <E_write+0x3e0>)
 800b06c:	78da      	ldrb	r2, [r3, #3]
 800b06e:	4bde      	ldr	r3, [pc, #888]	@ (800b3e8 <E_write+0x3dc>)
 800b070:	72da      	strb	r2, [r3, #11]
	dataWrite[12] = pkm[4];
 800b072:	4bde      	ldr	r3, [pc, #888]	@ (800b3ec <E_write+0x3e0>)
 800b074:	791a      	ldrb	r2, [r3, #4]
 800b076:	4bdc      	ldr	r3, [pc, #880]	@ (800b3e8 <E_write+0x3dc>)
 800b078:	731a      	strb	r2, [r3, #12]
	dataWrite[13] = pkm[5];
 800b07a:	4bdc      	ldr	r3, [pc, #880]	@ (800b3ec <E_write+0x3e0>)
 800b07c:	795a      	ldrb	r2, [r3, #5]
 800b07e:	4bda      	ldr	r3, [pc, #872]	@ (800b3e8 <E_write+0x3dc>)
 800b080:	735a      	strb	r2, [r3, #13]
	dataWrite[14] = pkm[6];
 800b082:	4bda      	ldr	r3, [pc, #872]	@ (800b3ec <E_write+0x3e0>)
 800b084:	799a      	ldrb	r2, [r3, #6]
 800b086:	4bd8      	ldr	r3, [pc, #864]	@ (800b3e8 <E_write+0x3dc>)
 800b088:	739a      	strb	r2, [r3, #14]
	dataWrite[15] = pkm[7];
 800b08a:	4bd8      	ldr	r3, [pc, #864]	@ (800b3ec <E_write+0x3e0>)
 800b08c:	79da      	ldrb	r2, [r3, #7]
 800b08e:	4bd6      	ldr	r3, [pc, #856]	@ (800b3e8 <E_write+0x3dc>)
 800b090:	73da      	strb	r2, [r3, #15]

	dataWrite[16] = tflag[0];
 800b092:	4bd7      	ldr	r3, [pc, #860]	@ (800b3f0 <E_write+0x3e4>)
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	4bd4      	ldr	r3, [pc, #848]	@ (800b3e8 <E_write+0x3dc>)
 800b098:	741a      	strb	r2, [r3, #16]
	dataWrite[17] = tflag[1];
 800b09a:	4bd5      	ldr	r3, [pc, #852]	@ (800b3f0 <E_write+0x3e4>)
 800b09c:	785a      	ldrb	r2, [r3, #1]
 800b09e:	4bd2      	ldr	r3, [pc, #840]	@ (800b3e8 <E_write+0x3dc>)
 800b0a0:	745a      	strb	r2, [r3, #17]
	dataWrite[18] = tflag[2];
 800b0a2:	4bd3      	ldr	r3, [pc, #844]	@ (800b3f0 <E_write+0x3e4>)
 800b0a4:	789a      	ldrb	r2, [r3, #2]
 800b0a6:	4bd0      	ldr	r3, [pc, #832]	@ (800b3e8 <E_write+0x3dc>)
 800b0a8:	749a      	strb	r2, [r3, #18]
	dataWrite[19] = tflag[3];
 800b0aa:	4bd1      	ldr	r3, [pc, #836]	@ (800b3f0 <E_write+0x3e4>)
 800b0ac:	78da      	ldrb	r2, [r3, #3]
 800b0ae:	4bce      	ldr	r3, [pc, #824]	@ (800b3e8 <E_write+0x3dc>)
 800b0b0:	74da      	strb	r2, [r3, #19]
	dataWrite[20] = tflag[4];
 800b0b2:	4bcf      	ldr	r3, [pc, #828]	@ (800b3f0 <E_write+0x3e4>)
 800b0b4:	791a      	ldrb	r2, [r3, #4]
 800b0b6:	4bcc      	ldr	r3, [pc, #816]	@ (800b3e8 <E_write+0x3dc>)
 800b0b8:	751a      	strb	r2, [r3, #20]
	dataWrite[21] = tflag[5];
 800b0ba:	4bcd      	ldr	r3, [pc, #820]	@ (800b3f0 <E_write+0x3e4>)
 800b0bc:	795a      	ldrb	r2, [r3, #5]
 800b0be:	4bca      	ldr	r3, [pc, #808]	@ (800b3e8 <E_write+0x3dc>)
 800b0c0:	755a      	strb	r2, [r3, #21]
	dataWrite[22] = tflag[6];
 800b0c2:	4bcb      	ldr	r3, [pc, #812]	@ (800b3f0 <E_write+0x3e4>)
 800b0c4:	799a      	ldrb	r2, [r3, #6]
 800b0c6:	4bc8      	ldr	r3, [pc, #800]	@ (800b3e8 <E_write+0x3dc>)
 800b0c8:	759a      	strb	r2, [r3, #22]
	dataWrite[23] = tflag[7];
 800b0ca:	4bc9      	ldr	r3, [pc, #804]	@ (800b3f0 <E_write+0x3e4>)
 800b0cc:	79da      	ldrb	r2, [r3, #7]
 800b0ce:	4bc6      	ldr	r3, [pc, #792]	@ (800b3e8 <E_write+0x3dc>)
 800b0d0:	75da      	strb	r2, [r3, #23]

	dataWrite[24] = cflag[0];
 800b0d2:	4bc8      	ldr	r3, [pc, #800]	@ (800b3f4 <E_write+0x3e8>)
 800b0d4:	781a      	ldrb	r2, [r3, #0]
 800b0d6:	4bc4      	ldr	r3, [pc, #784]	@ (800b3e8 <E_write+0x3dc>)
 800b0d8:	761a      	strb	r2, [r3, #24]
	dataWrite[25] = cflag[1];
 800b0da:	4bc6      	ldr	r3, [pc, #792]	@ (800b3f4 <E_write+0x3e8>)
 800b0dc:	785a      	ldrb	r2, [r3, #1]
 800b0de:	4bc2      	ldr	r3, [pc, #776]	@ (800b3e8 <E_write+0x3dc>)
 800b0e0:	765a      	strb	r2, [r3, #25]
	dataWrite[26] = cflag[2];
 800b0e2:	4bc4      	ldr	r3, [pc, #784]	@ (800b3f4 <E_write+0x3e8>)
 800b0e4:	789a      	ldrb	r2, [r3, #2]
 800b0e6:	4bc0      	ldr	r3, [pc, #768]	@ (800b3e8 <E_write+0x3dc>)
 800b0e8:	769a      	strb	r2, [r3, #26]
	dataWrite[27] = cflag[3];
 800b0ea:	4bc2      	ldr	r3, [pc, #776]	@ (800b3f4 <E_write+0x3e8>)
 800b0ec:	78da      	ldrb	r2, [r3, #3]
 800b0ee:	4bbe      	ldr	r3, [pc, #760]	@ (800b3e8 <E_write+0x3dc>)
 800b0f0:	76da      	strb	r2, [r3, #27]
	dataWrite[28] = cflag[4];
 800b0f2:	4bc0      	ldr	r3, [pc, #768]	@ (800b3f4 <E_write+0x3e8>)
 800b0f4:	791a      	ldrb	r2, [r3, #4]
 800b0f6:	4bbc      	ldr	r3, [pc, #752]	@ (800b3e8 <E_write+0x3dc>)
 800b0f8:	771a      	strb	r2, [r3, #28]
	dataWrite[29] = cflag[5];
 800b0fa:	4bbe      	ldr	r3, [pc, #760]	@ (800b3f4 <E_write+0x3e8>)
 800b0fc:	795a      	ldrb	r2, [r3, #5]
 800b0fe:	4bba      	ldr	r3, [pc, #744]	@ (800b3e8 <E_write+0x3dc>)
 800b100:	775a      	strb	r2, [r3, #29]
	dataWrite[30] = cflag[6];
 800b102:	4bbc      	ldr	r3, [pc, #752]	@ (800b3f4 <E_write+0x3e8>)
 800b104:	799a      	ldrb	r2, [r3, #6]
 800b106:	4bb8      	ldr	r3, [pc, #736]	@ (800b3e8 <E_write+0x3dc>)
 800b108:	779a      	strb	r2, [r3, #30]
	dataWrite[31] = cflag[7];
 800b10a:	4bba      	ldr	r3, [pc, #744]	@ (800b3f4 <E_write+0x3e8>)
 800b10c:	79da      	ldrb	r2, [r3, #7]
 800b10e:	4bb6      	ldr	r3, [pc, #728]	@ (800b3e8 <E_write+0x3dc>)
 800b110:	77da      	strb	r2, [r3, #31]

	dataWrite[32] = tpulse[0];
 800b112:	4bb9      	ldr	r3, [pc, #740]	@ (800b3f8 <E_write+0x3ec>)
 800b114:	7819      	ldrb	r1, [r3, #0]
 800b116:	4bb4      	ldr	r3, [pc, #720]	@ (800b3e8 <E_write+0x3dc>)
 800b118:	2220      	movs	r2, #32
 800b11a:	5499      	strb	r1, [r3, r2]
	dataWrite[33] = tpulse[1];
 800b11c:	4bb6      	ldr	r3, [pc, #728]	@ (800b3f8 <E_write+0x3ec>)
 800b11e:	7859      	ldrb	r1, [r3, #1]
 800b120:	4bb1      	ldr	r3, [pc, #708]	@ (800b3e8 <E_write+0x3dc>)
 800b122:	2221      	movs	r2, #33	@ 0x21
 800b124:	5499      	strb	r1, [r3, r2]
	dataWrite[34] = tpulse[2];
 800b126:	4bb4      	ldr	r3, [pc, #720]	@ (800b3f8 <E_write+0x3ec>)
 800b128:	7899      	ldrb	r1, [r3, #2]
 800b12a:	4baf      	ldr	r3, [pc, #700]	@ (800b3e8 <E_write+0x3dc>)
 800b12c:	2222      	movs	r2, #34	@ 0x22
 800b12e:	5499      	strb	r1, [r3, r2]
	dataWrite[35] = tpulse[3];
 800b130:	4bb1      	ldr	r3, [pc, #708]	@ (800b3f8 <E_write+0x3ec>)
 800b132:	78d9      	ldrb	r1, [r3, #3]
 800b134:	4bac      	ldr	r3, [pc, #688]	@ (800b3e8 <E_write+0x3dc>)
 800b136:	2223      	movs	r2, #35	@ 0x23
 800b138:	5499      	strb	r1, [r3, r2]
	dataWrite[36] = tpulse[4];
 800b13a:	4baf      	ldr	r3, [pc, #700]	@ (800b3f8 <E_write+0x3ec>)
 800b13c:	7919      	ldrb	r1, [r3, #4]
 800b13e:	4baa      	ldr	r3, [pc, #680]	@ (800b3e8 <E_write+0x3dc>)
 800b140:	2224      	movs	r2, #36	@ 0x24
 800b142:	5499      	strb	r1, [r3, r2]
	dataWrite[37] = tpulse[5];
 800b144:	4bac      	ldr	r3, [pc, #688]	@ (800b3f8 <E_write+0x3ec>)
 800b146:	7959      	ldrb	r1, [r3, #5]
 800b148:	4ba7      	ldr	r3, [pc, #668]	@ (800b3e8 <E_write+0x3dc>)
 800b14a:	2225      	movs	r2, #37	@ 0x25
 800b14c:	5499      	strb	r1, [r3, r2]
	dataWrite[38] = tpulse[6];
 800b14e:	4baa      	ldr	r3, [pc, #680]	@ (800b3f8 <E_write+0x3ec>)
 800b150:	7999      	ldrb	r1, [r3, #6]
 800b152:	4ba5      	ldr	r3, [pc, #660]	@ (800b3e8 <E_write+0x3dc>)
 800b154:	2226      	movs	r2, #38	@ 0x26
 800b156:	5499      	strb	r1, [r3, r2]
	dataWrite[39] = tpulse[7];
 800b158:	4ba7      	ldr	r3, [pc, #668]	@ (800b3f8 <E_write+0x3ec>)
 800b15a:	79d9      	ldrb	r1, [r3, #7]
 800b15c:	4ba2      	ldr	r3, [pc, #648]	@ (800b3e8 <E_write+0x3dc>)
 800b15e:	2227      	movs	r2, #39	@ 0x27
 800b160:	5499      	strb	r1, [r3, r2]

	dataWrite[40] = tfare[0];
 800b162:	4ba6      	ldr	r3, [pc, #664]	@ (800b3fc <E_write+0x3f0>)
 800b164:	7819      	ldrb	r1, [r3, #0]
 800b166:	4ba0      	ldr	r3, [pc, #640]	@ (800b3e8 <E_write+0x3dc>)
 800b168:	2228      	movs	r2, #40	@ 0x28
 800b16a:	5499      	strb	r1, [r3, r2]
	dataWrite[41] = tfare[1];
 800b16c:	4ba3      	ldr	r3, [pc, #652]	@ (800b3fc <E_write+0x3f0>)
 800b16e:	7859      	ldrb	r1, [r3, #1]
 800b170:	4b9d      	ldr	r3, [pc, #628]	@ (800b3e8 <E_write+0x3dc>)
 800b172:	2229      	movs	r2, #41	@ 0x29
 800b174:	5499      	strb	r1, [r3, r2]
	dataWrite[42] = tfare[2];
 800b176:	4ba1      	ldr	r3, [pc, #644]	@ (800b3fc <E_write+0x3f0>)
 800b178:	7899      	ldrb	r1, [r3, #2]
 800b17a:	4b9b      	ldr	r3, [pc, #620]	@ (800b3e8 <E_write+0x3dc>)
 800b17c:	222a      	movs	r2, #42	@ 0x2a
 800b17e:	5499      	strb	r1, [r3, r2]
	dataWrite[43] = tfare[3];
 800b180:	4b9e      	ldr	r3, [pc, #632]	@ (800b3fc <E_write+0x3f0>)
 800b182:	78d9      	ldrb	r1, [r3, #3]
 800b184:	4b98      	ldr	r3, [pc, #608]	@ (800b3e8 <E_write+0x3dc>)
 800b186:	222b      	movs	r2, #43	@ 0x2b
 800b188:	5499      	strb	r1, [r3, r2]
	dataWrite[44] = tfare[4];
 800b18a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3fc <E_write+0x3f0>)
 800b18c:	7919      	ldrb	r1, [r3, #4]
 800b18e:	4b96      	ldr	r3, [pc, #600]	@ (800b3e8 <E_write+0x3dc>)
 800b190:	222c      	movs	r2, #44	@ 0x2c
 800b192:	5499      	strb	r1, [r3, r2]
	dataWrite[45] = tfare[5];
 800b194:	4b99      	ldr	r3, [pc, #612]	@ (800b3fc <E_write+0x3f0>)
 800b196:	7959      	ldrb	r1, [r3, #5]
 800b198:	4b93      	ldr	r3, [pc, #588]	@ (800b3e8 <E_write+0x3dc>)
 800b19a:	222d      	movs	r2, #45	@ 0x2d
 800b19c:	5499      	strb	r1, [r3, r2]
	dataWrite[46] = tfare[6];
 800b19e:	4b97      	ldr	r3, [pc, #604]	@ (800b3fc <E_write+0x3f0>)
 800b1a0:	7999      	ldrb	r1, [r3, #6]
 800b1a2:	4b91      	ldr	r3, [pc, #580]	@ (800b3e8 <E_write+0x3dc>)
 800b1a4:	222e      	movs	r2, #46	@ 0x2e
 800b1a6:	5499      	strb	r1, [r3, r2]
	dataWrite[47] = tfare[7];
 800b1a8:	4b94      	ldr	r3, [pc, #592]	@ (800b3fc <E_write+0x3f0>)
 800b1aa:	79d9      	ldrb	r1, [r3, #7]
 800b1ac:	4b8e      	ldr	r3, [pc, #568]	@ (800b3e8 <E_write+0x3dc>)
 800b1ae:	222f      	movs	r2, #47	@ 0x2f
 800b1b0:	5499      	strb	r1, [r3, r2]

	dataWrite[48] = tsub[0];
 800b1b2:	4b93      	ldr	r3, [pc, #588]	@ (800b400 <E_write+0x3f4>)
 800b1b4:	7819      	ldrb	r1, [r3, #0]
 800b1b6:	4b8c      	ldr	r3, [pc, #560]	@ (800b3e8 <E_write+0x3dc>)
 800b1b8:	2230      	movs	r2, #48	@ 0x30
 800b1ba:	5499      	strb	r1, [r3, r2]
	dataWrite[49] = tsub[1];
 800b1bc:	4b90      	ldr	r3, [pc, #576]	@ (800b400 <E_write+0x3f4>)
 800b1be:	7859      	ldrb	r1, [r3, #1]
 800b1c0:	4b89      	ldr	r3, [pc, #548]	@ (800b3e8 <E_write+0x3dc>)
 800b1c2:	2231      	movs	r2, #49	@ 0x31
 800b1c4:	5499      	strb	r1, [r3, r2]
	dataWrite[50] = tsub[2];
 800b1c6:	4b8e      	ldr	r3, [pc, #568]	@ (800b400 <E_write+0x3f4>)
 800b1c8:	7899      	ldrb	r1, [r3, #2]
 800b1ca:	4b87      	ldr	r3, [pc, #540]	@ (800b3e8 <E_write+0x3dc>)
 800b1cc:	2232      	movs	r2, #50	@ 0x32
 800b1ce:	5499      	strb	r1, [r3, r2]
	dataWrite[51] = tsub[3];
 800b1d0:	4b8b      	ldr	r3, [pc, #556]	@ (800b400 <E_write+0x3f4>)
 800b1d2:	78d9      	ldrb	r1, [r3, #3]
 800b1d4:	4b84      	ldr	r3, [pc, #528]	@ (800b3e8 <E_write+0x3dc>)
 800b1d6:	2233      	movs	r2, #51	@ 0x33
 800b1d8:	5499      	strb	r1, [r3, r2]
	dataWrite[52] = tsub[4];
 800b1da:	4b89      	ldr	r3, [pc, #548]	@ (800b400 <E_write+0x3f4>)
 800b1dc:	7919      	ldrb	r1, [r3, #4]
 800b1de:	4b82      	ldr	r3, [pc, #520]	@ (800b3e8 <E_write+0x3dc>)
 800b1e0:	2234      	movs	r2, #52	@ 0x34
 800b1e2:	5499      	strb	r1, [r3, r2]
	dataWrite[53] = tsub[5];
 800b1e4:	4b86      	ldr	r3, [pc, #536]	@ (800b400 <E_write+0x3f4>)
 800b1e6:	7959      	ldrb	r1, [r3, #5]
 800b1e8:	4b7f      	ldr	r3, [pc, #508]	@ (800b3e8 <E_write+0x3dc>)
 800b1ea:	2235      	movs	r2, #53	@ 0x35
 800b1ec:	5499      	strb	r1, [r3, r2]
	dataWrite[54] = tsub[6];
 800b1ee:	4b84      	ldr	r3, [pc, #528]	@ (800b400 <E_write+0x3f4>)
 800b1f0:	7999      	ldrb	r1, [r3, #6]
 800b1f2:	4b7d      	ldr	r3, [pc, #500]	@ (800b3e8 <E_write+0x3dc>)
 800b1f4:	2236      	movs	r2, #54	@ 0x36
 800b1f6:	5499      	strb	r1, [r3, r2]
	dataWrite[55] = tsub[7];
 800b1f8:	4b81      	ldr	r3, [pc, #516]	@ (800b400 <E_write+0x3f4>)
 800b1fa:	79d9      	ldrb	r1, [r3, #7]
 800b1fc:	4b7a      	ldr	r3, [pc, #488]	@ (800b3e8 <E_write+0x3dc>)
 800b1fe:	2237      	movs	r2, #55	@ 0x37
 800b200:	5499      	strb	r1, [r3, r2]

	dataWrite[56] = cfare[0];
 800b202:	4b80      	ldr	r3, [pc, #512]	@ (800b404 <E_write+0x3f8>)
 800b204:	7819      	ldrb	r1, [r3, #0]
 800b206:	4b78      	ldr	r3, [pc, #480]	@ (800b3e8 <E_write+0x3dc>)
 800b208:	2238      	movs	r2, #56	@ 0x38
 800b20a:	5499      	strb	r1, [r3, r2]
	dataWrite[57] = cfare[1];
 800b20c:	4b7d      	ldr	r3, [pc, #500]	@ (800b404 <E_write+0x3f8>)
 800b20e:	7859      	ldrb	r1, [r3, #1]
 800b210:	4b75      	ldr	r3, [pc, #468]	@ (800b3e8 <E_write+0x3dc>)
 800b212:	2239      	movs	r2, #57	@ 0x39
 800b214:	5499      	strb	r1, [r3, r2]
	dataWrite[58] = cfare[2];
 800b216:	4b7b      	ldr	r3, [pc, #492]	@ (800b404 <E_write+0x3f8>)
 800b218:	7899      	ldrb	r1, [r3, #2]
 800b21a:	4b73      	ldr	r3, [pc, #460]	@ (800b3e8 <E_write+0x3dc>)
 800b21c:	223a      	movs	r2, #58	@ 0x3a
 800b21e:	5499      	strb	r1, [r3, r2]
	dataWrite[59] = cfare[3];
 800b220:	4b78      	ldr	r3, [pc, #480]	@ (800b404 <E_write+0x3f8>)
 800b222:	78d9      	ldrb	r1, [r3, #3]
 800b224:	4b70      	ldr	r3, [pc, #448]	@ (800b3e8 <E_write+0x3dc>)
 800b226:	223b      	movs	r2, #59	@ 0x3b
 800b228:	5499      	strb	r1, [r3, r2]
	dataWrite[60] = cfare[4];
 800b22a:	4b76      	ldr	r3, [pc, #472]	@ (800b404 <E_write+0x3f8>)
 800b22c:	7919      	ldrb	r1, [r3, #4]
 800b22e:	4b6e      	ldr	r3, [pc, #440]	@ (800b3e8 <E_write+0x3dc>)
 800b230:	223c      	movs	r2, #60	@ 0x3c
 800b232:	5499      	strb	r1, [r3, r2]
	dataWrite[61] = cfare[5];
 800b234:	4b73      	ldr	r3, [pc, #460]	@ (800b404 <E_write+0x3f8>)
 800b236:	7959      	ldrb	r1, [r3, #5]
 800b238:	4b6b      	ldr	r3, [pc, #428]	@ (800b3e8 <E_write+0x3dc>)
 800b23a:	223d      	movs	r2, #61	@ 0x3d
 800b23c:	5499      	strb	r1, [r3, r2]
	dataWrite[62] = cfare[6];
 800b23e:	4b71      	ldr	r3, [pc, #452]	@ (800b404 <E_write+0x3f8>)
 800b240:	7999      	ldrb	r1, [r3, #6]
 800b242:	4b69      	ldr	r3, [pc, #420]	@ (800b3e8 <E_write+0x3dc>)
 800b244:	223e      	movs	r2, #62	@ 0x3e
 800b246:	5499      	strb	r1, [r3, r2]
	dataWrite[63] = cfare[7];
 800b248:	4b6e      	ldr	r3, [pc, #440]	@ (800b404 <E_write+0x3f8>)
 800b24a:	79d9      	ldrb	r1, [r3, #7]
 800b24c:	4b66      	ldr	r3, [pc, #408]	@ (800b3e8 <E_write+0x3dc>)
 800b24e:	223f      	movs	r2, #63	@ 0x3f
 800b250:	5499      	strb	r1, [r3, r2]

	dataWrite[64] = csub[0];
 800b252:	4b6d      	ldr	r3, [pc, #436]	@ (800b408 <E_write+0x3fc>)
 800b254:	7819      	ldrb	r1, [r3, #0]
 800b256:	4b64      	ldr	r3, [pc, #400]	@ (800b3e8 <E_write+0x3dc>)
 800b258:	2240      	movs	r2, #64	@ 0x40
 800b25a:	5499      	strb	r1, [r3, r2]
	dataWrite[65] = csub[1];
 800b25c:	4b6a      	ldr	r3, [pc, #424]	@ (800b408 <E_write+0x3fc>)
 800b25e:	7859      	ldrb	r1, [r3, #1]
 800b260:	4b61      	ldr	r3, [pc, #388]	@ (800b3e8 <E_write+0x3dc>)
 800b262:	2241      	movs	r2, #65	@ 0x41
 800b264:	5499      	strb	r1, [r3, r2]
	dataWrite[66] = csub[2];
 800b266:	4b68      	ldr	r3, [pc, #416]	@ (800b408 <E_write+0x3fc>)
 800b268:	7899      	ldrb	r1, [r3, #2]
 800b26a:	4b5f      	ldr	r3, [pc, #380]	@ (800b3e8 <E_write+0x3dc>)
 800b26c:	2242      	movs	r2, #66	@ 0x42
 800b26e:	5499      	strb	r1, [r3, r2]
	dataWrite[67] = csub[3];
 800b270:	4b65      	ldr	r3, [pc, #404]	@ (800b408 <E_write+0x3fc>)
 800b272:	78d9      	ldrb	r1, [r3, #3]
 800b274:	4b5c      	ldr	r3, [pc, #368]	@ (800b3e8 <E_write+0x3dc>)
 800b276:	2243      	movs	r2, #67	@ 0x43
 800b278:	5499      	strb	r1, [r3, r2]
	dataWrite[68] = csub[4];
 800b27a:	4b63      	ldr	r3, [pc, #396]	@ (800b408 <E_write+0x3fc>)
 800b27c:	7919      	ldrb	r1, [r3, #4]
 800b27e:	4b5a      	ldr	r3, [pc, #360]	@ (800b3e8 <E_write+0x3dc>)
 800b280:	2244      	movs	r2, #68	@ 0x44
 800b282:	5499      	strb	r1, [r3, r2]
	dataWrite[69] = csub[5];
 800b284:	4b60      	ldr	r3, [pc, #384]	@ (800b408 <E_write+0x3fc>)
 800b286:	7959      	ldrb	r1, [r3, #5]
 800b288:	4b57      	ldr	r3, [pc, #348]	@ (800b3e8 <E_write+0x3dc>)
 800b28a:	2245      	movs	r2, #69	@ 0x45
 800b28c:	5499      	strb	r1, [r3, r2]
	dataWrite[70] = csub[6];
 800b28e:	4b5e      	ldr	r3, [pc, #376]	@ (800b408 <E_write+0x3fc>)
 800b290:	7999      	ldrb	r1, [r3, #6]
 800b292:	4b55      	ldr	r3, [pc, #340]	@ (800b3e8 <E_write+0x3dc>)
 800b294:	2246      	movs	r2, #70	@ 0x46
 800b296:	5499      	strb	r1, [r3, r2]
	dataWrite[71] = csub[7];
 800b298:	4b5b      	ldr	r3, [pc, #364]	@ (800b408 <E_write+0x3fc>)
 800b29a:	79d9      	ldrb	r1, [r3, #7]
 800b29c:	4b52      	ldr	r3, [pc, #328]	@ (800b3e8 <E_write+0x3dc>)
 800b29e:	2247      	movs	r2, #71	@ 0x47
 800b2a0:	5499      	strb	r1, [r3, r2]

	dataWrite[72] = ttime[0];
 800b2a2:	4b5a      	ldr	r3, [pc, #360]	@ (800b40c <E_write+0x400>)
 800b2a4:	7819      	ldrb	r1, [r3, #0]
 800b2a6:	4b50      	ldr	r3, [pc, #320]	@ (800b3e8 <E_write+0x3dc>)
 800b2a8:	2248      	movs	r2, #72	@ 0x48
 800b2aa:	5499      	strb	r1, [r3, r2]
	dataWrite[73] = ttime[1];
 800b2ac:	4b57      	ldr	r3, [pc, #348]	@ (800b40c <E_write+0x400>)
 800b2ae:	7859      	ldrb	r1, [r3, #1]
 800b2b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b3e8 <E_write+0x3dc>)
 800b2b2:	2249      	movs	r2, #73	@ 0x49
 800b2b4:	5499      	strb	r1, [r3, r2]
	dataWrite[74] = ttime[2];
 800b2b6:	4b55      	ldr	r3, [pc, #340]	@ (800b40c <E_write+0x400>)
 800b2b8:	7899      	ldrb	r1, [r3, #2]
 800b2ba:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e8 <E_write+0x3dc>)
 800b2bc:	224a      	movs	r2, #74	@ 0x4a
 800b2be:	5499      	strb	r1, [r3, r2]
	dataWrite[75] = ttime[3];
 800b2c0:	4b52      	ldr	r3, [pc, #328]	@ (800b40c <E_write+0x400>)
 800b2c2:	78d9      	ldrb	r1, [r3, #3]
 800b2c4:	4b48      	ldr	r3, [pc, #288]	@ (800b3e8 <E_write+0x3dc>)
 800b2c6:	224b      	movs	r2, #75	@ 0x4b
 800b2c8:	5499      	strb	r1, [r3, r2]
	dataWrite[76] = ttime[4];
 800b2ca:	4b50      	ldr	r3, [pc, #320]	@ (800b40c <E_write+0x400>)
 800b2cc:	7919      	ldrb	r1, [r3, #4]
 800b2ce:	4b46      	ldr	r3, [pc, #280]	@ (800b3e8 <E_write+0x3dc>)
 800b2d0:	224c      	movs	r2, #76	@ 0x4c
 800b2d2:	5499      	strb	r1, [r3, r2]
	dataWrite[77] = ttime[5];
 800b2d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b40c <E_write+0x400>)
 800b2d6:	7959      	ldrb	r1, [r3, #5]
 800b2d8:	4b43      	ldr	r3, [pc, #268]	@ (800b3e8 <E_write+0x3dc>)
 800b2da:	224d      	movs	r2, #77	@ 0x4d
 800b2dc:	5499      	strb	r1, [r3, r2]
	dataWrite[78] = ttime[6];
 800b2de:	4b4b      	ldr	r3, [pc, #300]	@ (800b40c <E_write+0x400>)
 800b2e0:	7999      	ldrb	r1, [r3, #6]
 800b2e2:	4b41      	ldr	r3, [pc, #260]	@ (800b3e8 <E_write+0x3dc>)
 800b2e4:	224e      	movs	r2, #78	@ 0x4e
 800b2e6:	5499      	strb	r1, [r3, r2]
	dataWrite[79] = ttime[7];
 800b2e8:	4b48      	ldr	r3, [pc, #288]	@ (800b40c <E_write+0x400>)
 800b2ea:	79d9      	ldrb	r1, [r3, #7]
 800b2ec:	4b3e      	ldr	r3, [pc, #248]	@ (800b3e8 <E_write+0x3dc>)
 800b2ee:	224f      	movs	r2, #79	@ 0x4f
 800b2f0:	5499      	strb	r1, [r3, r2]

	dataWrite[80] = pulses[0];
 800b2f2:	4b47      	ldr	r3, [pc, #284]	@ (800b410 <E_write+0x404>)
 800b2f4:	7819      	ldrb	r1, [r3, #0]
 800b2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800b3e8 <E_write+0x3dc>)
 800b2f8:	2250      	movs	r2, #80	@ 0x50
 800b2fa:	5499      	strb	r1, [r3, r2]
	dataWrite[81] = pulses[1];
 800b2fc:	4b44      	ldr	r3, [pc, #272]	@ (800b410 <E_write+0x404>)
 800b2fe:	7859      	ldrb	r1, [r3, #1]
 800b300:	4b39      	ldr	r3, [pc, #228]	@ (800b3e8 <E_write+0x3dc>)
 800b302:	2251      	movs	r2, #81	@ 0x51
 800b304:	5499      	strb	r1, [r3, r2]
	dataWrite[82] = pulses[2];
 800b306:	4b42      	ldr	r3, [pc, #264]	@ (800b410 <E_write+0x404>)
 800b308:	7899      	ldrb	r1, [r3, #2]
 800b30a:	4b37      	ldr	r3, [pc, #220]	@ (800b3e8 <E_write+0x3dc>)
 800b30c:	2252      	movs	r2, #82	@ 0x52
 800b30e:	5499      	strb	r1, [r3, r2]
	dataWrite[83] = pulses[3];
 800b310:	4b3f      	ldr	r3, [pc, #252]	@ (800b410 <E_write+0x404>)
 800b312:	78d9      	ldrb	r1, [r3, #3]
 800b314:	4b34      	ldr	r3, [pc, #208]	@ (800b3e8 <E_write+0x3dc>)
 800b316:	2253      	movs	r2, #83	@ 0x53
 800b318:	5499      	strb	r1, [r3, r2]
	dataWrite[84] = pulses[4];
 800b31a:	4b3d      	ldr	r3, [pc, #244]	@ (800b410 <E_write+0x404>)
 800b31c:	7919      	ldrb	r1, [r3, #4]
 800b31e:	4b32      	ldr	r3, [pc, #200]	@ (800b3e8 <E_write+0x3dc>)
 800b320:	2254      	movs	r2, #84	@ 0x54
 800b322:	5499      	strb	r1, [r3, r2]
	dataWrite[85] = pulses[5];
 800b324:	4b3a      	ldr	r3, [pc, #232]	@ (800b410 <E_write+0x404>)
 800b326:	7959      	ldrb	r1, [r3, #5]
 800b328:	4b2f      	ldr	r3, [pc, #188]	@ (800b3e8 <E_write+0x3dc>)
 800b32a:	2255      	movs	r2, #85	@ 0x55
 800b32c:	5499      	strb	r1, [r3, r2]
	dataWrite[86] = pulses[6];
 800b32e:	4b38      	ldr	r3, [pc, #224]	@ (800b410 <E_write+0x404>)
 800b330:	7999      	ldrb	r1, [r3, #6]
 800b332:	4b2d      	ldr	r3, [pc, #180]	@ (800b3e8 <E_write+0x3dc>)
 800b334:	2256      	movs	r2, #86	@ 0x56
 800b336:	5499      	strb	r1, [r3, r2]
	dataWrite[87] = pulses[7];
 800b338:	4b35      	ldr	r3, [pc, #212]	@ (800b410 <E_write+0x404>)
 800b33a:	79d9      	ldrb	r1, [r3, #7]
 800b33c:	4b2a      	ldr	r3, [pc, #168]	@ (800b3e8 <E_write+0x3dc>)
 800b33e:	2257      	movs	r2, #87	@ 0x57
 800b340:	5499      	strb	r1, [r3, r2]

	dataWrite[88] = dt[0];
 800b342:	4b34      	ldr	r3, [pc, #208]	@ (800b414 <E_write+0x408>)
 800b344:	7819      	ldrb	r1, [r3, #0]
 800b346:	4b28      	ldr	r3, [pc, #160]	@ (800b3e8 <E_write+0x3dc>)
 800b348:	2258      	movs	r2, #88	@ 0x58
 800b34a:	5499      	strb	r1, [r3, r2]
	dataWrite[89] = dt[1];
 800b34c:	4b31      	ldr	r3, [pc, #196]	@ (800b414 <E_write+0x408>)
 800b34e:	7859      	ldrb	r1, [r3, #1]
 800b350:	4b25      	ldr	r3, [pc, #148]	@ (800b3e8 <E_write+0x3dc>)
 800b352:	2259      	movs	r2, #89	@ 0x59
 800b354:	5499      	strb	r1, [r3, r2]
	dataWrite[90] = dt[2];
 800b356:	4b2f      	ldr	r3, [pc, #188]	@ (800b414 <E_write+0x408>)
 800b358:	7899      	ldrb	r1, [r3, #2]
 800b35a:	4b23      	ldr	r3, [pc, #140]	@ (800b3e8 <E_write+0x3dc>)
 800b35c:	225a      	movs	r2, #90	@ 0x5a
 800b35e:	5499      	strb	r1, [r3, r2]
	dataWrite[91] = dt[3];
 800b360:	4b2c      	ldr	r3, [pc, #176]	@ (800b414 <E_write+0x408>)
 800b362:	78d9      	ldrb	r1, [r3, #3]
 800b364:	4b20      	ldr	r3, [pc, #128]	@ (800b3e8 <E_write+0x3dc>)
 800b366:	225b      	movs	r2, #91	@ 0x5b
 800b368:	5499      	strb	r1, [r3, r2]
	dataWrite[92] = dt[4];
 800b36a:	4b2a      	ldr	r3, [pc, #168]	@ (800b414 <E_write+0x408>)
 800b36c:	7919      	ldrb	r1, [r3, #4]
 800b36e:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e8 <E_write+0x3dc>)
 800b370:	225c      	movs	r2, #92	@ 0x5c
 800b372:	5499      	strb	r1, [r3, r2]
	dataWrite[93] = dt[5];
 800b374:	4b27      	ldr	r3, [pc, #156]	@ (800b414 <E_write+0x408>)
 800b376:	7959      	ldrb	r1, [r3, #5]
 800b378:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e8 <E_write+0x3dc>)
 800b37a:	225d      	movs	r2, #93	@ 0x5d
 800b37c:	5499      	strb	r1, [r3, r2]
	dataWrite[94] = dt[6];
 800b37e:	4b25      	ldr	r3, [pc, #148]	@ (800b414 <E_write+0x408>)
 800b380:	7999      	ldrb	r1, [r3, #6]
 800b382:	4b19      	ldr	r3, [pc, #100]	@ (800b3e8 <E_write+0x3dc>)
 800b384:	225e      	movs	r2, #94	@ 0x5e
 800b386:	5499      	strb	r1, [r3, r2]
	dataWrite[95] = dt[7];
 800b388:	4b22      	ldr	r3, [pc, #136]	@ (800b414 <E_write+0x408>)
 800b38a:	79d9      	ldrb	r1, [r3, #7]
 800b38c:	4b16      	ldr	r3, [pc, #88]	@ (800b3e8 <E_write+0x3dc>)
 800b38e:	225f      	movs	r2, #95	@ 0x5f
 800b390:	5499      	strb	r1, [r3, r2]
	dataWrite[96] = dt[8];
 800b392:	4b20      	ldr	r3, [pc, #128]	@ (800b414 <E_write+0x408>)
 800b394:	7a19      	ldrb	r1, [r3, #8]
 800b396:	4b14      	ldr	r3, [pc, #80]	@ (800b3e8 <E_write+0x3dc>)
 800b398:	2260      	movs	r2, #96	@ 0x60
 800b39a:	5499      	strb	r1, [r3, r2]
	dataWrite[97] = dt[9];
 800b39c:	4b1d      	ldr	r3, [pc, #116]	@ (800b414 <E_write+0x408>)
 800b39e:	7a59      	ldrb	r1, [r3, #9]
 800b3a0:	4b11      	ldr	r3, [pc, #68]	@ (800b3e8 <E_write+0x3dc>)
 800b3a2:	2261      	movs	r2, #97	@ 0x61
 800b3a4:	5499      	strb	r1, [r3, r2]
	dataWrite[98] = dt[10];
 800b3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800b414 <E_write+0x408>)
 800b3a8:	7a99      	ldrb	r1, [r3, #10]
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e8 <E_write+0x3dc>)
 800b3ac:	2262      	movs	r2, #98	@ 0x62
 800b3ae:	5499      	strb	r1, [r3, r2]
	dataWrite[99] = dt[11];
 800b3b0:	4b18      	ldr	r3, [pc, #96]	@ (800b414 <E_write+0x408>)
 800b3b2:	7ad9      	ldrb	r1, [r3, #11]
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e8 <E_write+0x3dc>)
 800b3b6:	2263      	movs	r2, #99	@ 0x63
 800b3b8:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(&hi2c2, 0xA0, (3<<7), 2, dataWrite, 100, 1000);
 800b3ba:	23c0      	movs	r3, #192	@ 0xc0
 800b3bc:	005a      	lsls	r2, r3, #1
 800b3be:	4816      	ldr	r0, [pc, #88]	@ (800b418 <E_write+0x40c>)
 800b3c0:	23fa      	movs	r3, #250	@ 0xfa
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	9302      	str	r3, [sp, #8]
 800b3c6:	2364      	movs	r3, #100	@ 0x64
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	4b07      	ldr	r3, [pc, #28]	@ (800b3e8 <E_write+0x3dc>)
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	21a0      	movs	r1, #160	@ 0xa0
 800b3d2:	f003 fbb1 	bl	800eb38 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800b3d6:	2005      	movs	r0, #5
 800b3d8:	f002 fb1e 	bl	800da18 <HAL_Delay>
}
 800b3dc:	46c0      	nop			@ (mov r8, r8)
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	e01c      	b.n	800b41c <E_write+0x410>
 800b3e2:	46c0      	nop			@ (mov r8, r8)
 800b3e4:	20000e50 	.word	0x20000e50
 800b3e8:	20000db0 	.word	0x20000db0
 800b3ec:	20000e58 	.word	0x20000e58
 800b3f0:	20000e60 	.word	0x20000e60
 800b3f4:	20000e68 	.word	0x20000e68
 800b3f8:	20000e70 	.word	0x20000e70
 800b3fc:	20000e78 	.word	0x20000e78
 800b400:	20000e80 	.word	0x20000e80
 800b404:	20000e88 	.word	0x20000e88
 800b408:	20000e90 	.word	0x20000e90
 800b40c:	20000e98 	.word	0x20000e98
 800b410:	20000eb0 	.word	0x20000eb0
 800b414:	20000eb8 	.word	0x20000eb8
 800b418:	20000570 	.word	0x20000570
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	46c0      	nop			@ (mov r8, r8)

0800b420 <Voice_init>:

//voice
void Voice_init(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
	//v_can_start[5][6] ~ [15][16], odd-0x35(number)/0x30(letter), even = plate_qr[6]-[11]
	//v_cn_start[5][6] ~ [15][16], odd-0x4A(number)/0x30(letter), even = plate_qr[6]-[11]
	for (int i=6; i<=11; i++)
 800b426:	2306      	movs	r3, #6
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	e045      	b.n	800b4b8 <Voice_init+0x98>
	{
		if (plate_qr[i] < 0x41)
 800b42c:	4a3f      	ldr	r2, [pc, #252]	@ (800b52c <Voice_init+0x10c>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	18d3      	adds	r3, r2, r3
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b40      	cmp	r3, #64	@ 0x40
 800b436:	d81e      	bhi.n	800b476 <Voice_init+0x56>
		{
			v_can_start[2*i-7] = 0x35;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	3b07      	subs	r3, #7
 800b43e:	4a3c      	ldr	r2, [pc, #240]	@ (800b530 <Voice_init+0x110>)
 800b440:	2135      	movs	r1, #53	@ 0x35
 800b442:	54d1      	strb	r1, [r2, r3]
			v_can_start[2*i-6] = plate_qr[i];
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3b03      	subs	r3, #3
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	4938      	ldr	r1, [pc, #224]	@ (800b52c <Voice_init+0x10c>)
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	188a      	adds	r2, r1, r2
 800b450:	7811      	ldrb	r1, [r2, #0]
 800b452:	4a37      	ldr	r2, [pc, #220]	@ (800b530 <Voice_init+0x110>)
 800b454:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-7] = 0x4A;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	3b07      	subs	r3, #7
 800b45c:	4a35      	ldr	r2, [pc, #212]	@ (800b534 <Voice_init+0x114>)
 800b45e:	214a      	movs	r1, #74	@ 0x4a
 800b460:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-6] = plate_qr[i];
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3b03      	subs	r3, #3
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	4930      	ldr	r1, [pc, #192]	@ (800b52c <Voice_init+0x10c>)
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	188a      	adds	r2, r1, r2
 800b46e:	7811      	ldrb	r1, [r2, #0]
 800b470:	4a30      	ldr	r2, [pc, #192]	@ (800b534 <Voice_init+0x114>)
 800b472:	54d1      	strb	r1, [r2, r3]
 800b474:	e01d      	b.n	800b4b2 <Voice_init+0x92>
		}
		else
		{
			v_can_start[2*i-7] = 0x30;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	3b07      	subs	r3, #7
 800b47c:	4a2c      	ldr	r2, [pc, #176]	@ (800b530 <Voice_init+0x110>)
 800b47e:	2130      	movs	r1, #48	@ 0x30
 800b480:	54d1      	strb	r1, [r2, r3]
			v_can_start[2*i-6] = plate_qr[i];
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3b03      	subs	r3, #3
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4928      	ldr	r1, [pc, #160]	@ (800b52c <Voice_init+0x10c>)
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	188a      	adds	r2, r1, r2
 800b48e:	7811      	ldrb	r1, [r2, #0]
 800b490:	4a27      	ldr	r2, [pc, #156]	@ (800b530 <Voice_init+0x110>)
 800b492:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-7] = 0x30;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	3b07      	subs	r3, #7
 800b49a:	4a26      	ldr	r2, [pc, #152]	@ (800b534 <Voice_init+0x114>)
 800b49c:	2130      	movs	r1, #48	@ 0x30
 800b49e:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-6] = plate_qr[i];
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3b03      	subs	r3, #3
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4921      	ldr	r1, [pc, #132]	@ (800b52c <Voice_init+0x10c>)
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	188a      	adds	r2, r1, r2
 800b4ac:	7811      	ldrb	r1, [r2, #0]
 800b4ae:	4a21      	ldr	r2, [pc, #132]	@ (800b534 <Voice_init+0x114>)
 800b4b0:	54d1      	strb	r1, [r2, r3]
	for (int i=6; i<=11; i++)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	607b      	str	r3, [r7, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b0b      	cmp	r3, #11
 800b4bc:	ddb6      	ble.n	800b42c <Voice_init+0xc>
		}
	}

	v_en_start[6] = plate_qr[6];
 800b4be:	4b1b      	ldr	r3, [pc, #108]	@ (800b52c <Voice_init+0x10c>)
 800b4c0:	799a      	ldrb	r2, [r3, #6]
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b538 <Voice_init+0x118>)
 800b4c4:	719a      	strb	r2, [r3, #6]
	v_en_start[8] = plate_qr[7];
 800b4c6:	4b19      	ldr	r3, [pc, #100]	@ (800b52c <Voice_init+0x10c>)
 800b4c8:	79da      	ldrb	r2, [r3, #7]
 800b4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b538 <Voice_init+0x118>)
 800b4cc:	721a      	strb	r2, [r3, #8]
	v_en_start[10] = plate_qr[8];
 800b4ce:	4b17      	ldr	r3, [pc, #92]	@ (800b52c <Voice_init+0x10c>)
 800b4d0:	7a1a      	ldrb	r2, [r3, #8]
 800b4d2:	4b19      	ldr	r3, [pc, #100]	@ (800b538 <Voice_init+0x118>)
 800b4d4:	729a      	strb	r2, [r3, #10]
	v_en_start[12] = plate_qr[9];
 800b4d6:	4b15      	ldr	r3, [pc, #84]	@ (800b52c <Voice_init+0x10c>)
 800b4d8:	7a5a      	ldrb	r2, [r3, #9]
 800b4da:	4b17      	ldr	r3, [pc, #92]	@ (800b538 <Voice_init+0x118>)
 800b4dc:	731a      	strb	r2, [r3, #12]
	v_en_start[14] = plate_qr[10];
 800b4de:	4b13      	ldr	r3, [pc, #76]	@ (800b52c <Voice_init+0x10c>)
 800b4e0:	7a9a      	ldrb	r2, [r3, #10]
 800b4e2:	4b15      	ldr	r3, [pc, #84]	@ (800b538 <Voice_init+0x118>)
 800b4e4:	739a      	strb	r2, [r3, #14]
	v_en_start[16] = plate_qr[11];
 800b4e6:	4b11      	ldr	r3, [pc, #68]	@ (800b52c <Voice_init+0x10c>)
 800b4e8:	7ada      	ldrb	r2, [r3, #11]
 800b4ea:	4b13      	ldr	r3, [pc, #76]	@ (800b538 <Voice_init+0x118>)
 800b4ec:	741a      	strb	r2, [r3, #16]

	v_can_start[19] = checksum_8bit(v_can_start,20);
 800b4ee:	4b10      	ldr	r3, [pc, #64]	@ (800b530 <Voice_init+0x110>)
 800b4f0:	2114      	movs	r1, #20
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f7fc fc5e 	bl	8007db4 <checksum_8bit>
 800b4f8:	0003      	movs	r3, r0
 800b4fa:	001a      	movs	r2, r3
 800b4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b530 <Voice_init+0x110>)
 800b4fe:	74da      	strb	r2, [r3, #19]
	v_cn_start[19] = checksum_8bit(v_cn_start,20);
 800b500:	4b0c      	ldr	r3, [pc, #48]	@ (800b534 <Voice_init+0x114>)
 800b502:	2114      	movs	r1, #20
 800b504:	0018      	movs	r0, r3
 800b506:	f7fc fc55 	bl	8007db4 <checksum_8bit>
 800b50a:	0003      	movs	r3, r0
 800b50c:	001a      	movs	r2, r3
 800b50e:	4b09      	ldr	r3, [pc, #36]	@ (800b534 <Voice_init+0x114>)
 800b510:	74da      	strb	r2, [r3, #19]
	v_en_start[19] = checksum_8bit(v_en_start,20);
 800b512:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <Voice_init+0x118>)
 800b514:	2114      	movs	r1, #20
 800b516:	0018      	movs	r0, r3
 800b518:	f7fc fc4c 	bl	8007db4 <checksum_8bit>
 800b51c:	0003      	movs	r3, r0
 800b51e:	001a      	movs	r2, r3
 800b520:	4b05      	ldr	r3, [pc, #20]	@ (800b538 <Voice_init+0x118>)
 800b522:	74da      	strb	r2, [r3, #19]
}
 800b524:	46c0      	nop			@ (mov r8, r8)
 800b526:	46bd      	mov	sp, r7
 800b528:	b002      	add	sp, #8
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000098 	.word	0x20000098
 800b530:	200003e8 	.word	0x200003e8
 800b534:	200003fc 	.word	0x200003fc
 800b538:	20000410 	.word	0x20000410

0800b53c <Voice_start>:

void Voice_start(unsigned char data[])
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)data, 20, 1000);
 800b544:	23fa      	movs	r3, #250	@ 0xfa
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4804      	ldr	r0, [pc, #16]	@ (800b55c <Voice_start+0x20>)
 800b54c:	2214      	movs	r2, #20
 800b54e:	f007 fce9 	bl	8012f24 <HAL_UART_Transmit>
}
 800b552:	46c0      	nop			@ (mov r8, r8)
 800b554:	46bd      	mov	sp, r7
 800b556:	b002      	add	sp, #8
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	200006dc 	.word	0x200006dc

0800b560 <Voice_end>:

void Voice_end(unsigned char data[])
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)data, 32, 1000);
 800b568:	23fa      	movs	r3, #250	@ 0xfa
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	4804      	ldr	r0, [pc, #16]	@ (800b580 <Voice_end+0x20>)
 800b570:	2220      	movs	r2, #32
 800b572:	f007 fcd7 	bl	8012f24 <HAL_UART_Transmit>
}
 800b576:	46c0      	nop			@ (mov r8, r8)
 800b578:	46bd      	mov	sp, r7
 800b57a:	b002      	add	sp, #8
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	200006dc 	.word	0x200006dc

0800b584 <cal_vcan>:

void cal_vcan(unsigned char data[], unsigned char result[])
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3301      	adds	r3, #1
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b30      	cmp	r3, #48	@ 0x30
 800b596:	d100      	bne.n	800b59a <cal_vcan+0x16>
 800b598:	e0ba      	b.n	800b710 <cal_vcan+0x18c>
	{
		result[0] += 2;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	3302      	adds	r3, #2
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	701a      	strb	r2, [r3, #0]
		//x000 - (1000 ~ 9000)
		result[1] = 0x46;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	2246      	movs	r2, #70	@ 0x46
 800b5ac:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	7852      	ldrb	r2, [r2, #1]
 800b5b6:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3302      	adds	r3, #2
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b30      	cmp	r3, #48	@ 0x30
 800b5c0:	d14f      	bne.n	800b662 <cal_vcan+0xde>
		{
			if (data[3] == 0x30)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3303      	adds	r3, #3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b30      	cmp	r3, #48	@ 0x30
 800b5ca:	d11d      	bne.n	800b608 <cal_vcan+0x84>
			{
				if (data[4] != 0x30)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b30      	cmp	r3, #48	@ 0x30
 800b5d4:	d100      	bne.n	800b5d8 <cal_vcan+0x54>
 800b5d6:	e118      	b.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 4;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	b2da      	uxtb	r2, r3
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	701a      	strb	r2, [r3, #0]
					//0x - (1001 ~ 9009)
					result[3] = 0x35;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	3303      	adds	r3, #3
 800b5e8:	2235      	movs	r2, #53	@ 0x35
 800b5ea:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	2230      	movs	r2, #48	@ 0x30
 800b5f2:	701a      	strb	r2, [r3, #0]
					result[5] = 0x35;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	3305      	adds	r3, #5
 800b5f8:	2235      	movs	r2, #53	@ 0x35
 800b5fa:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	3306      	adds	r3, #6
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	7912      	ldrb	r2, [r2, #4]
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e100      	b.n	800b80a <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 4;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	3304      	adds	r3, #4
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	701a      	strb	r2, [r3, #0]
				//0x0 - (x0x0 1010 ~ 9090)
				result[3] = 0x35;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	3303      	adds	r3, #3
 800b618:	2235      	movs	r2, #53	@ 0x35
 800b61a:	701a      	strb	r2, [r3, #0]
				result[4] = 0x30;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	3304      	adds	r3, #4
 800b620:	2230      	movs	r2, #48	@ 0x30
 800b622:	701a      	strb	r2, [r3, #0]
				result[5] = 0x44;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	3305      	adds	r3, #5
 800b628:	2244      	movs	r2, #68	@ 0x44
 800b62a:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	3306      	adds	r3, #6
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	78d2      	ldrb	r2, [r2, #3]
 800b634:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b30      	cmp	r3, #48	@ 0x30
 800b63e:	d100      	bne.n	800b642 <cal_vcan+0xbe>
 800b640:	e0e3      	b.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 2;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	3302      	adds	r3, #2
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	701a      	strb	r2, [r3, #0]
					//x - (x0xx 1011 ~ 9099)
					result[7] = 0x35;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	3307      	adds	r3, #7
 800b652:	2235      	movs	r2, #53	@ 0x35
 800b654:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	7912      	ldrb	r2, [r2, #4]
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	e0d3      	b.n	800b80a <cal_vcan+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	3302      	adds	r3, #2
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	701a      	strb	r2, [r3, #0]
			//xx00 (1100 ~ 9900)
			result[3] = 0x45;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	3303      	adds	r3, #3
 800b672:	2245      	movs	r2, #69	@ 0x45
 800b674:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	3304      	adds	r3, #4
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	7892      	ldrb	r2, [r2, #2]
 800b67e:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3303      	adds	r3, #3
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b30      	cmp	r3, #48	@ 0x30
 800b688:	d11d      	bne.n	800b6c6 <cal_vcan+0x142>
			{
				if (data[4] != 0x30)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3304      	adds	r3, #4
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b30      	cmp	r3, #48	@ 0x30
 800b692:	d100      	bne.n	800b696 <cal_vcan+0x112>
 800b694:	e0b9      	b.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 4;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	3304      	adds	r3, #4
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	701a      	strb	r2, [r3, #0]
					//0x (1101 ~ 9909)
					result[5] = 0x35;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	3305      	adds	r3, #5
 800b6a6:	2235      	movs	r2, #53	@ 0x35
 800b6a8:	701a      	strb	r2, [r3, #0]
					result[6] = 0x30;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	3306      	adds	r3, #6
 800b6ae:	2230      	movs	r2, #48	@ 0x30
 800b6b0:	701a      	strb	r2, [r3, #0]
					result[7] = 0x35;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	3307      	adds	r3, #7
 800b6b6:	2235      	movs	r2, #53	@ 0x35
 800b6b8:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	7912      	ldrb	r2, [r2, #4]
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	e0a1      	b.n	800b80a <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	3302      	adds	r3, #2
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	701a      	strb	r2, [r3, #0]
				//x0 - (1110 ~ 9990)
				result[5] = 0x44;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	3305      	adds	r3, #5
 800b6d6:	2244      	movs	r2, #68	@ 0x44
 800b6d8:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	3306      	adds	r3, #6
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	78d2      	ldrb	r2, [r2, #3]
 800b6e2:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b30      	cmp	r3, #48	@ 0x30
 800b6ec:	d100      	bne.n	800b6f0 <cal_vcan+0x16c>
 800b6ee:	e08c      	b.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 2;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	3302      	adds	r3, #2
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	701a      	strb	r2, [r3, #0]
					//x - (1111 ~ 9999)
					result[7] = 0x35;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	3307      	adds	r3, #7
 800b700:	2235      	movs	r2, #53	@ 0x35
 800b702:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	3308      	adds	r3, #8
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	7912      	ldrb	r2, [r2, #4]
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e07c      	b.n	800b80a <cal_vcan+0x286>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3302      	adds	r3, #2
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b30      	cmp	r3, #48	@ 0x30
 800b718:	d054      	beq.n	800b7c4 <cal_vcan+0x240>
		{
			result[0] += 2;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	3302      	adds	r3, #2
 800b720:	b2da      	uxtb	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	701a      	strb	r2, [r3, #0]
			//x?�� - (100 ~ 900)
			result[1] = 0x45;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	3301      	adds	r3, #1
 800b72a:	2245      	movs	r2, #69	@ 0x45
 800b72c:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	3302      	adds	r3, #2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	7892      	ldrb	r2, [r2, #2]
 800b736:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3303      	adds	r3, #3
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b30      	cmp	r3, #48	@ 0x30
 800b740:	d11c      	bne.n	800b77c <cal_vcan+0x1f8>
			{
				if (data[4] != 0x30)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3304      	adds	r3, #4
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b30      	cmp	r3, #48	@ 0x30
 800b74a:	d05e      	beq.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 4;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	3304      	adds	r3, #4
 800b752:	b2da      	uxtb	r2, r3
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[3] = 0x35;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	3303      	adds	r3, #3
 800b75c:	2235      	movs	r2, #53	@ 0x35
 800b75e:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	3304      	adds	r3, #4
 800b764:	2230      	movs	r2, #48	@ 0x30
 800b766:	701a      	strb	r2, [r3, #0]
					result[5] = 0x35;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	3305      	adds	r3, #5
 800b76c:	2235      	movs	r2, #53	@ 0x35
 800b76e:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	3306      	adds	r3, #6
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	7912      	ldrb	r2, [r2, #4]
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	e046      	b.n	800b80a <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	3302      	adds	r3, #2
 800b782:	b2da      	uxtb	r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[3] = 0x44;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	3303      	adds	r3, #3
 800b78c:	2244      	movs	r2, #68	@ 0x44
 800b78e:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	3304      	adds	r3, #4
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	78d2      	ldrb	r2, [r2, #3]
 800b798:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3304      	adds	r3, #4
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b30      	cmp	r3, #48	@ 0x30
 800b7a2:	d032      	beq.n	800b80a <cal_vcan+0x286>
				{
					result[0] += 2;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[5] = 0x35;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	3305      	adds	r3, #5
 800b7b4:	2235      	movs	r2, #53	@ 0x35
 800b7b6:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	3306      	adds	r3, #6
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	7912      	ldrb	r2, [r2, #4]
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e022      	b.n	800b80a <cal_vcan+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	701a      	strb	r2, [r3, #0]
			//x0 - (30 ~ 90)
			result[1] = 0x44;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	2244      	movs	r2, #68	@ 0x44
 800b7d6:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	3302      	adds	r3, #2
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	78d2      	ldrb	r2, [r2, #3]
 800b7e0:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b30      	cmp	r3, #48	@ 0x30
 800b7ea:	d00e      	beq.n	800b80a <cal_vcan+0x286>
			{
				result[0] += 2;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	3302      	adds	r3, #2
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	701a      	strb	r2, [r3, #0]
				//x - (23 ~ 99)
				result[3] = 0x35;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	3303      	adds	r3, #3
 800b7fc:	2235      	movs	r2, #53	@ 0x35
 800b7fe:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	3304      	adds	r3, #4
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7912      	ldrb	r2, [r2, #4]
 800b808:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//yuan
	result[0] += 2;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	3302      	adds	r3, #2
 800b810:	b2da      	uxtb	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x36;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	18d3      	adds	r3, r2, r3
 800b820:	2236      	movs	r2, #54	@ 0x36
 800b822:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x34;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	001a      	movs	r2, r3
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	189b      	adds	r3, r3, r2
 800b82e:	2234      	movs	r2, #52	@ 0x34
 800b830:	701a      	strb	r2, [r3, #0]

	if (data[5] != 0x30)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3305      	adds	r3, #5
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b30      	cmp	r3, #48	@ 0x30
 800b83a:	d022      	beq.n	800b882 <cal_vcan+0x2fe>
	{
		result[0] += 4;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	3304      	adds	r3, #4
 800b842:	b2da      	uxtb	r2, r3
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	701a      	strb	r2, [r3, #0]
		result[result[0] - 3] = 0x35;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	3b03      	subs	r3, #3
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	18d3      	adds	r3, r2, r3
 800b852:	2235      	movs	r2, #53	@ 0x35
 800b854:	701a      	strb	r2, [r3, #0]
		result[result[0] - 2] = data[5];
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	3b02      	subs	r3, #2
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	18d3      	adds	r3, r2, r3
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	7952      	ldrb	r2, [r2, #5]
 800b864:	701a      	strb	r2, [r3, #0]
		//hau
		result[result[0] - 1] = 0x36;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	18d3      	adds	r3, r2, r3
 800b870:	2236      	movs	r2, #54	@ 0x36
 800b872:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x33;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	001a      	movs	r2, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	189b      	adds	r3, r3, r2
 800b87e:	2233      	movs	r2, #51	@ 0x33
 800b880:	701a      	strb	r2, [r3, #0]
	}

	if (data[0] != 0)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d100      	bne.n	800b88c <cal_vcan+0x308>
 800b88a:	e11f      	b.n	800bacc <cal_vcan+0x548>
	{
		//surcharge
		result[0] += 2;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	3302      	adds	r3, #2
 800b892:	b2da      	uxtb	r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x37;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	18d3      	adds	r3, r2, r3
 800b8a2:	2237      	movs	r2, #55	@ 0x37
 800b8a4:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x32;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	001a      	movs	r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	189b      	adds	r3, r3, r2
 800b8b0:	2232      	movs	r2, #50	@ 0x32
 800b8b2:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3306      	adds	r3, #6
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b30      	cmp	r3, #48	@ 0x30
 800b8bc:	d074      	beq.n	800b9a8 <cal_vcan+0x424>
		{
			result[0] += 2;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	3302      	adds	r3, #2
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	701a      	strb	r2, [r3, #0]
			//x?�� - (x?��)
			result[result[0] - 1] = 0x45;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	18d3      	adds	r3, r2, r3
 800b8d4:	2245      	movs	r2, #69	@ 0x45
 800b8d6:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	001a      	movs	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	189b      	adds	r3, r3, r2
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	7992      	ldrb	r2, [r2, #6]
 800b8e6:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3307      	adds	r3, #7
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	2b30      	cmp	r3, #48	@ 0x30
 800b8f0:	d129      	bne.n	800b946 <cal_vcan+0x3c2>
			{
				if (data[8] != 0x30)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b30      	cmp	r3, #48	@ 0x30
 800b8fa:	d100      	bne.n	800b8fe <cal_vcan+0x37a>
 800b8fc:	e0d2      	b.n	800baa4 <cal_vcan+0x520>
				{
					result[0] += 4;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	3304      	adds	r3, #4
 800b904:	b2da      	uxtb	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[result[0] - 3] = 0x35;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	3b03      	subs	r3, #3
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	18d3      	adds	r3, r2, r3
 800b914:	2235      	movs	r2, #53	@ 0x35
 800b916:	701a      	strb	r2, [r3, #0]
					result[result[0] - 2] = 0x30;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	3b02      	subs	r3, #2
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	18d3      	adds	r3, r2, r3
 800b922:	2230      	movs	r2, #48	@ 0x30
 800b924:	701a      	strb	r2, [r3, #0]
					result[result[0] - 1] = 0x35;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	18d3      	adds	r3, r2, r3
 800b930:	2235      	movs	r2, #53	@ 0x35
 800b932:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	001a      	movs	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	189b      	adds	r3, r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	7a12      	ldrb	r2, [r2, #8]
 800b942:	701a      	strb	r2, [r3, #0]
 800b944:	e0ae      	b.n	800baa4 <cal_vcan+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	3302      	adds	r3, #2
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[result[0] - 1] = 0x44;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	3b01      	subs	r3, #1
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	18d3      	adds	r3, r2, r3
 800b95c:	2244      	movs	r2, #68	@ 0x44
 800b95e:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	001a      	movs	r2, r3
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	189b      	adds	r3, r3, r2
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	79d2      	ldrb	r2, [r2, #7]
 800b96e:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3308      	adds	r3, #8
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b30      	cmp	r3, #48	@ 0x30
 800b978:	d100      	bne.n	800b97c <cal_vcan+0x3f8>
 800b97a:	e093      	b.n	800baa4 <cal_vcan+0x520>
				{
					result[0] += 2;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	3302      	adds	r3, #2
 800b982:	b2da      	uxtb	r2, r3
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[result[0] - 1] = 0x35;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	2235      	movs	r2, #53	@ 0x35
 800b994:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	001a      	movs	r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	189b      	adds	r3, r3, r2
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	7a12      	ldrb	r2, [r2, #8]
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	e07d      	b.n	800baa4 <cal_vcan+0x520>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	3307      	adds	r3, #7
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b31      	cmp	r3, #49	@ 0x31
 800b9b0:	d12e      	bne.n	800ba10 <cal_vcan+0x48c>
			{
				result[0] += 2;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	3302      	adds	r3, #2
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	701a      	strb	r2, [r3, #0]
				//10 - (10)
				result[result[0] - 1] = 0x36;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	18d3      	adds	r3, r2, r3
 800b9c8:	2236      	movs	r2, #54	@ 0x36
 800b9ca:	701a      	strb	r2, [r3, #0]
				result[result[0]] = 0x30;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	001a      	movs	r2, r3
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	189b      	adds	r3, r3, r2
 800b9d6:	2230      	movs	r2, #48	@ 0x30
 800b9d8:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3308      	adds	r3, #8
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b30      	cmp	r3, #48	@ 0x30
 800b9e2:	d05f      	beq.n	800baa4 <cal_vcan+0x520>
				{
					result[0] += 2;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	3302      	adds	r3, #2
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	701a      	strb	r2, [r3, #0]
					//x - (11 ~ 19)
					result[result[0] - 1] = 0x35;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	18d3      	adds	r3, r2, r3
 800b9fa:	2235      	movs	r2, #53	@ 0x35
 800b9fc:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	001a      	movs	r2, r3
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	189b      	adds	r3, r3, r2
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7a12      	ldrb	r2, [r2, #8]
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	e049      	b.n	800baa4 <cal_vcan+0x520>
				}
			}
			else if (data[7] != 0x30)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3307      	adds	r3, #7
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b30      	cmp	r3, #48	@ 0x30
 800ba18:	d02f      	beq.n	800ba7a <cal_vcan+0x4f6>
			{
				result[0] += 2;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	3302      	adds	r3, #2
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
				//x0 - (20 ~ 90)
				result[result[0] - 1] = 0x44;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	18d3      	adds	r3, r2, r3
 800ba30:	2244      	movs	r2, #68	@ 0x44
 800ba32:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	001a      	movs	r2, r3
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	189b      	adds	r3, r3, r2
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	79d2      	ldrb	r2, [r2, #7]
 800ba42:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3308      	adds	r3, #8
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b30      	cmp	r3, #48	@ 0x30
 800ba4c:	d02a      	beq.n	800baa4 <cal_vcan+0x520>
				{
					result[0] += 2;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	3302      	adds	r3, #2
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	701a      	strb	r2, [r3, #0]
					//x - (21 ~ 99)
					result[result[0] - 1] = 0x35;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	18d3      	adds	r3, r2, r3
 800ba64:	2235      	movs	r2, #53	@ 0x35
 800ba66:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	001a      	movs	r2, r3
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	189b      	adds	r3, r3, r2
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	7a12      	ldrb	r2, [r2, #8]
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	e014      	b.n	800baa4 <cal_vcan+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	3302      	adds	r3, #2
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	701a      	strb	r2, [r3, #0]
				//x - (1 ~ 9)
				result[result[0] - 1] = 0x35;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	18d3      	adds	r3, r2, r3
 800ba90:	2235      	movs	r2, #53	@ 0x35
 800ba92:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	001a      	movs	r2, r3
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	189b      	adds	r3, r3, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	7a12      	ldrb	r2, [r2, #8]
 800baa2:	701a      	strb	r2, [r3, #0]
			}
		}
		//yuan
		result[0] += 2;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	3302      	adds	r3, #2
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x36;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	18d3      	adds	r3, r2, r3
 800baba:	2236      	movs	r2, #54	@ 0x36
 800babc:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x34;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	001a      	movs	r2, r3
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	189b      	adds	r3, r3, r2
 800bac8:	2234      	movs	r2, #52	@ 0x34
 800baca:	701a      	strb	r2, [r3, #0]
	}
	//thx, bye
	result[0] += 2;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	3302      	adds	r3, #2
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x37;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	3b01      	subs	r3, #1
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	18d3      	adds	r3, r2, r3
 800bae2:	2237      	movs	r2, #55	@ 0x37
 800bae4:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x31;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	001a      	movs	r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	189b      	adds	r3, r3, r2
 800baf0:	2231      	movs	r2, #49	@ 0x31
 800baf2:	701a      	strb	r2, [r3, #0]
}
 800baf4:	46c0      	nop			@ (mov r8, r8)
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b002      	add	sp, #8
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <cal_vcn>:

void cal_vcn(unsigned char data[], unsigned char result[])
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b30      	cmp	r3, #48	@ 0x30
 800bb0e:	d100      	bne.n	800bb12 <cal_vcn+0x16>
 800bb10:	e0ba      	b.n	800bc88 <cal_vcn+0x18c>
	{
		result[0] += 2;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	3302      	adds	r3, #2
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	701a      	strb	r2, [r3, #0]
		//x000 - (1000 ~ 9000)
		result[1] = 0x49;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	3301      	adds	r3, #1
 800bb22:	2249      	movs	r2, #73	@ 0x49
 800bb24:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	3302      	adds	r3, #2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	7852      	ldrb	r2, [r2, #1]
 800bb2e:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3302      	adds	r3, #2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b30      	cmp	r3, #48	@ 0x30
 800bb38:	d14f      	bne.n	800bbda <cal_vcn+0xde>
		{
			if (data[3] == 0x30)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3303      	adds	r3, #3
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b30      	cmp	r3, #48	@ 0x30
 800bb42:	d11d      	bne.n	800bb80 <cal_vcn+0x84>
			{
				if (data[4] != 0x30)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b30      	cmp	r3, #48	@ 0x30
 800bb4c:	d100      	bne.n	800bb50 <cal_vcn+0x54>
 800bb4e:	e118      	b.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 4;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	3304      	adds	r3, #4
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	701a      	strb	r2, [r3, #0]
					//0x - (1001 ~ 9009)
					result[3] = 0x4A;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	3303      	adds	r3, #3
 800bb60:	224a      	movs	r2, #74	@ 0x4a
 800bb62:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	3304      	adds	r3, #4
 800bb68:	2230      	movs	r2, #48	@ 0x30
 800bb6a:	701a      	strb	r2, [r3, #0]
					result[5] = 0x4A;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	3305      	adds	r3, #5
 800bb70:	224a      	movs	r2, #74	@ 0x4a
 800bb72:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	3306      	adds	r3, #6
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	7912      	ldrb	r2, [r2, #4]
 800bb7c:	701a      	strb	r2, [r3, #0]
 800bb7e:	e100      	b.n	800bd82 <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 4;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	3304      	adds	r3, #4
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	701a      	strb	r2, [r3, #0]
				//0x0 - (1010 ~ 9090)
				result[3] = 0x4A;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	3303      	adds	r3, #3
 800bb90:	224a      	movs	r2, #74	@ 0x4a
 800bb92:	701a      	strb	r2, [r3, #0]
				result[4] = 0x30;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	3304      	adds	r3, #4
 800bb98:	2230      	movs	r2, #48	@ 0x30
 800bb9a:	701a      	strb	r2, [r3, #0]
				result[5] = 0x47;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	3305      	adds	r3, #5
 800bba0:	2247      	movs	r2, #71	@ 0x47
 800bba2:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	3306      	adds	r3, #6
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	78d2      	ldrb	r2, [r2, #3]
 800bbac:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b30      	cmp	r3, #48	@ 0x30
 800bbb6:	d100      	bne.n	800bbba <cal_vcn+0xbe>
 800bbb8:	e0e3      	b.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 2;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	3302      	adds	r3, #2
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	701a      	strb	r2, [r3, #0]
					//x - (1011 ~ 9099)
					result[7] = 0x4A;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	3307      	adds	r3, #7
 800bbca:	224a      	movs	r2, #74	@ 0x4a
 800bbcc:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	7912      	ldrb	r2, [r2, #4]
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	e0d3      	b.n	800bd82 <cal_vcn+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	3302      	adds	r3, #2
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[3] = 0x48;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	3303      	adds	r3, #3
 800bbea:	2248      	movs	r2, #72	@ 0x48
 800bbec:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	7892      	ldrb	r2, [r2, #2]
 800bbf6:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b30      	cmp	r3, #48	@ 0x30
 800bc00:	d11d      	bne.n	800bc3e <cal_vcn+0x142>
			{
				if (data[4] != 0x30)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3304      	adds	r3, #4
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b30      	cmp	r3, #48	@ 0x30
 800bc0a:	d100      	bne.n	800bc0e <cal_vcn+0x112>
 800bc0c:	e0b9      	b.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 4;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	3304      	adds	r3, #4
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	701a      	strb	r2, [r3, #0]
					//0x - (1101 ~ 9909)
					result[5] = 0x4A;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	3305      	adds	r3, #5
 800bc1e:	224a      	movs	r2, #74	@ 0x4a
 800bc20:	701a      	strb	r2, [r3, #0]
					result[6] = 0x30;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	3306      	adds	r3, #6
 800bc26:	2230      	movs	r2, #48	@ 0x30
 800bc28:	701a      	strb	r2, [r3, #0]
					result[7] = 0x4A;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	3307      	adds	r3, #7
 800bc2e:	224a      	movs	r2, #74	@ 0x4a
 800bc30:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	3308      	adds	r3, #8
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	7912      	ldrb	r2, [r2, #4]
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e0a1      	b.n	800bd82 <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	3302      	adds	r3, #2
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	701a      	strb	r2, [r3, #0]
				//x0 - (1110 ~ 9990)
				result[5] = 0x47;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	3305      	adds	r3, #5
 800bc4e:	2247      	movs	r2, #71	@ 0x47
 800bc50:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	3306      	adds	r3, #6
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	78d2      	ldrb	r2, [r2, #3]
 800bc5a:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b30      	cmp	r3, #48	@ 0x30
 800bc64:	d100      	bne.n	800bc68 <cal_vcn+0x16c>
 800bc66:	e08c      	b.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 2;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	701a      	strb	r2, [r3, #0]
					//x - (1111 ~ 9999)
					result[7] = 0x4A;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	3307      	adds	r3, #7
 800bc78:	224a      	movs	r2, #74	@ 0x4a
 800bc7a:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	3308      	adds	r3, #8
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	7912      	ldrb	r2, [r2, #4]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e07c      	b.n	800bd82 <cal_vcn+0x286>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3302      	adds	r3, #2
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b30      	cmp	r3, #48	@ 0x30
 800bc90:	d054      	beq.n	800bd3c <cal_vcn+0x240>
		{
			result[0] += 2;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	3302      	adds	r3, #2
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[1] = 0x48;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3301      	adds	r3, #1
 800bca2:	2248      	movs	r2, #72	@ 0x48
 800bca4:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	3302      	adds	r3, #2
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	7892      	ldrb	r2, [r2, #2]
 800bcae:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3303      	adds	r3, #3
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b30      	cmp	r3, #48	@ 0x30
 800bcb8:	d11c      	bne.n	800bcf4 <cal_vcn+0x1f8>
			{
				if (data[4] != 0x30)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b30      	cmp	r3, #48	@ 0x30
 800bcc2:	d05e      	beq.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 4;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[3] = 0x4A;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	3303      	adds	r3, #3
 800bcd4:	224a      	movs	r2, #74	@ 0x4a
 800bcd6:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	2230      	movs	r2, #48	@ 0x30
 800bcde:	701a      	strb	r2, [r3, #0]
					result[5] = 0x4A;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	3305      	adds	r3, #5
 800bce4:	224a      	movs	r2, #74	@ 0x4a
 800bce6:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	3306      	adds	r3, #6
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	7912      	ldrb	r2, [r2, #4]
 800bcf0:	701a      	strb	r2, [r3, #0]
 800bcf2:	e046      	b.n	800bd82 <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	3302      	adds	r3, #2
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[3] = 0x47;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	3303      	adds	r3, #3
 800bd04:	2247      	movs	r2, #71	@ 0x47
 800bd06:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	78d2      	ldrb	r2, [r2, #3]
 800bd10:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3304      	adds	r3, #4
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b30      	cmp	r3, #48	@ 0x30
 800bd1a:	d032      	beq.n	800bd82 <cal_vcn+0x286>
				{
					result[0] += 2;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	3302      	adds	r3, #2
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[5] = 0x4A;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	3305      	adds	r3, #5
 800bd2c:	224a      	movs	r2, #74	@ 0x4a
 800bd2e:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	3306      	adds	r3, #6
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7912      	ldrb	r2, [r2, #4]
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	e022      	b.n	800bd82 <cal_vcn+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	3302      	adds	r3, #2
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	701a      	strb	r2, [r3, #0]
			//x0 - (30 ~ 90)
			result[1] = 0x47;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	2247      	movs	r2, #71	@ 0x47
 800bd4e:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	3302      	adds	r3, #2
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	78d2      	ldrb	r2, [r2, #3]
 800bd58:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b30      	cmp	r3, #48	@ 0x30
 800bd62:	d00e      	beq.n	800bd82 <cal_vcn+0x286>
			{
				result[0] += 2;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	3302      	adds	r3, #2
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	701a      	strb	r2, [r3, #0]
				//x - (23 ~ 99)
				result[3] = 0x4A;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	3303      	adds	r3, #3
 800bd74:	224a      	movs	r2, #74	@ 0x4a
 800bd76:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	7912      	ldrb	r2, [r2, #4]
 800bd80:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (data[5] != 0x30)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3305      	adds	r3, #5
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b30      	cmp	r3, #48	@ 0x30
 800bd8a:	d022      	beq.n	800bdd2 <cal_vcn+0x2d6>
	{
		result[0] += 4;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	3304      	adds	r3, #4
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	701a      	strb	r2, [r3, #0]
		//dot
		result[result[0] - 3] = 0x38;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	3b03      	subs	r3, #3
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	18d3      	adds	r3, r2, r3
 800bda2:	2238      	movs	r2, #56	@ 0x38
 800bda4:	701a      	strb	r2, [r3, #0]
		result[result[0] - 2] = 0x38;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	3b02      	subs	r3, #2
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	18d3      	adds	r3, r2, r3
 800bdb0:	2238      	movs	r2, #56	@ 0x38
 800bdb2:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x4A;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	18d3      	adds	r3, r2, r3
 800bdbe:	224a      	movs	r2, #74	@ 0x4a
 800bdc0:	701a      	strb	r2, [r3, #0]
		result[result[0]] = data[5];
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	001a      	movs	r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7952      	ldrb	r2, [r2, #5]
 800bdd0:	701a      	strb	r2, [r3, #0]
	}
	//yuan
	result[0] += 2;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x38;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	18d3      	adds	r3, r2, r3
 800bde8:	2238      	movs	r2, #56	@ 0x38
 800bdea:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x39;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	001a      	movs	r2, r3
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	189b      	adds	r3, r3, r2
 800bdf6:	2239      	movs	r2, #57	@ 0x39
 800bdf8:	701a      	strb	r2, [r3, #0]

	if (data[0] != 0)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d100      	bne.n	800be04 <cal_vcn+0x308>
 800be02:	e11f      	b.n	800c044 <cal_vcn+0x548>
	{
		//surcharge
		result[0] += 2;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	3302      	adds	r3, #2
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x39;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	3b01      	subs	r3, #1
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	18d3      	adds	r3, r2, r3
 800be1a:	2239      	movs	r2, #57	@ 0x39
 800be1c:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x37;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	001a      	movs	r2, r3
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	189b      	adds	r3, r3, r2
 800be28:	2237      	movs	r2, #55	@ 0x37
 800be2a:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3306      	adds	r3, #6
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b30      	cmp	r3, #48	@ 0x30
 800be34:	d074      	beq.n	800bf20 <cal_vcn+0x424>
		{
			result[0] += 2;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	3302      	adds	r3, #2
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[result[0] - 1] = 0x48;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	3b01      	subs	r3, #1
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	18d3      	adds	r3, r2, r3
 800be4c:	2248      	movs	r2, #72	@ 0x48
 800be4e:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	001a      	movs	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	189b      	adds	r3, r3, r2
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	7992      	ldrb	r2, [r2, #6]
 800be5e:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3307      	adds	r3, #7
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b30      	cmp	r3, #48	@ 0x30
 800be68:	d129      	bne.n	800bebe <cal_vcn+0x3c2>
			{
				if (data[8] != 0x30)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	3308      	adds	r3, #8
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b30      	cmp	r3, #48	@ 0x30
 800be72:	d100      	bne.n	800be76 <cal_vcn+0x37a>
 800be74:	e0d2      	b.n	800c01c <cal_vcn+0x520>
				{
					result[0] += 4;
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	3304      	adds	r3, #4
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[result[0] - 3] = 0x4A;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	3b03      	subs	r3, #3
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	18d3      	adds	r3, r2, r3
 800be8c:	224a      	movs	r2, #74	@ 0x4a
 800be8e:	701a      	strb	r2, [r3, #0]
					result[result[0] - 2] = 0x30;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	3b02      	subs	r3, #2
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	18d3      	adds	r3, r2, r3
 800be9a:	2230      	movs	r2, #48	@ 0x30
 800be9c:	701a      	strb	r2, [r3, #0]
					result[result[0] - 1] = 0x4A;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	18d3      	adds	r3, r2, r3
 800bea8:	224a      	movs	r2, #74	@ 0x4a
 800beaa:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	001a      	movs	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	189b      	adds	r3, r3, r2
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	7a12      	ldrb	r2, [r2, #8]
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	e0ae      	b.n	800c01c <cal_vcn+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	3302      	adds	r3, #2
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[result[0] - 1] = 0x47;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	3b01      	subs	r3, #1
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	18d3      	adds	r3, r2, r3
 800bed4:	2247      	movs	r2, #71	@ 0x47
 800bed6:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	001a      	movs	r2, r3
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	189b      	adds	r3, r3, r2
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	79d2      	ldrb	r2, [r2, #7]
 800bee6:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	3308      	adds	r3, #8
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b30      	cmp	r3, #48	@ 0x30
 800bef0:	d100      	bne.n	800bef4 <cal_vcn+0x3f8>
 800bef2:	e093      	b.n	800c01c <cal_vcn+0x520>
				{
					result[0] += 2;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	3302      	adds	r3, #2
 800befa:	b2da      	uxtb	r2, r3
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[result[0] - 1] = 0x4A;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	18d3      	adds	r3, r2, r3
 800bf0a:	224a      	movs	r2, #74	@ 0x4a
 800bf0c:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	001a      	movs	r2, r3
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	7a12      	ldrb	r2, [r2, #8]
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	e07d      	b.n	800c01c <cal_vcn+0x520>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3307      	adds	r3, #7
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b31      	cmp	r3, #49	@ 0x31
 800bf28:	d12e      	bne.n	800bf88 <cal_vcn+0x48c>
			{
				result[0] += 2;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	3302      	adds	r3, #2
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	701a      	strb	r2, [r3, #0]
				//10 - (10)
				result[result[0] - 1] = 0x38;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	18d3      	adds	r3, r2, r3
 800bf40:	2238      	movs	r2, #56	@ 0x38
 800bf42:	701a      	strb	r2, [r3, #0]
				result[result[0]] = 0x35;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	001a      	movs	r2, r3
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	189b      	adds	r3, r3, r2
 800bf4e:	2235      	movs	r2, #53	@ 0x35
 800bf50:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3308      	adds	r3, #8
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	2b30      	cmp	r3, #48	@ 0x30
 800bf5a:	d05f      	beq.n	800c01c <cal_vcn+0x520>
				{
					result[0] += 2;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	3302      	adds	r3, #2
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	701a      	strb	r2, [r3, #0]
					//x - (11 ~ 19)
					result[result[0] - 1] = 0x4A;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	18d3      	adds	r3, r2, r3
 800bf72:	224a      	movs	r2, #74	@ 0x4a
 800bf74:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	001a      	movs	r2, r3
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	7a12      	ldrb	r2, [r2, #8]
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e049      	b.n	800c01c <cal_vcn+0x520>
				}
			}
			else if (data[7] != 0x30)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3307      	adds	r3, #7
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b30      	cmp	r3, #48	@ 0x30
 800bf90:	d02f      	beq.n	800bff2 <cal_vcn+0x4f6>
			{
				result[0] += 2;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	3302      	adds	r3, #2
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	701a      	strb	r2, [r3, #0]
				//x0 - (20 ~ 90)
				result[result[0] - 1] = 0x47;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	18d3      	adds	r3, r2, r3
 800bfa8:	2247      	movs	r2, #71	@ 0x47
 800bfaa:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	189b      	adds	r3, r3, r2
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	79d2      	ldrb	r2, [r2, #7]
 800bfba:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b30      	cmp	r3, #48	@ 0x30
 800bfc4:	d02a      	beq.n	800c01c <cal_vcn+0x520>
				{
					result[0] += 2;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	3302      	adds	r3, #2
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	701a      	strb	r2, [r3, #0]
					//x - (21 ~ 99)
					result[result[0] - 1] = 0x4A;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	18d3      	adds	r3, r2, r3
 800bfdc:	224a      	movs	r2, #74	@ 0x4a
 800bfde:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	189b      	adds	r3, r3, r2
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	7a12      	ldrb	r2, [r2, #8]
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	e014      	b.n	800c01c <cal_vcn+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	3302      	adds	r3, #2
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	701a      	strb	r2, [r3, #0]
				//x - (1 ~ 9)
				result[result[0] - 1] = 0x4A;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	3b01      	subs	r3, #1
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	18d3      	adds	r3, r2, r3
 800c008:	224a      	movs	r2, #74	@ 0x4a
 800c00a:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	001a      	movs	r2, r3
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	189b      	adds	r3, r3, r2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	7a12      	ldrb	r2, [r2, #8]
 800c01a:	701a      	strb	r2, [r3, #0]
			}
		}
		//yuan
		result[0] += 2;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	3302      	adds	r3, #2
 800c022:	b2da      	uxtb	r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x38;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	18d3      	adds	r3, r2, r3
 800c032:	2238      	movs	r2, #56	@ 0x38
 800c034:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x39;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	001a      	movs	r2, r3
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	189b      	adds	r3, r3, r2
 800c040:	2239      	movs	r2, #57	@ 0x39
 800c042:	701a      	strb	r2, [r3, #0]
	}
	//thx, bye
	result[0] += 2;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	3302      	adds	r3, #2
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x39;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	3b01      	subs	r3, #1
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	18d3      	adds	r3, r2, r3
 800c05a:	2239      	movs	r2, #57	@ 0x39
 800c05c:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x36;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	001a      	movs	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	189b      	adds	r3, r3, r2
 800c068:	2236      	movs	r2, #54	@ 0x36
 800c06a:	701a      	strb	r2, [r3, #0]
}
 800c06c:	46c0      	nop			@ (mov r8, r8)
 800c06e:	46bd      	mov	sp, r7
 800c070:	b002      	add	sp, #8
 800c072:	bd80      	pop	{r7, pc}

0800c074 <cal_ven>:

void cal_ven(unsigned char data[], unsigned char result[])
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3301      	adds	r3, #1
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b30      	cmp	r3, #48	@ 0x30
 800c086:	d100      	bne.n	800c08a <cal_ven+0x16>
 800c088:	e0cc      	b.n	800c224 <cal_ven+0x1b0>
	{
		result[0] += 2;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	3302      	adds	r3, #2
 800c090:	b2da      	uxtb	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	701a      	strb	r2, [r3, #0]
		//x thousand - (1000 ~ 9000)
		result[1] = 0x42;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	3301      	adds	r3, #1
 800c09a:	2242      	movs	r2, #66	@ 0x42
 800c09c:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3302      	adds	r3, #2
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	7852      	ldrb	r2, [r2, #1]
 800c0a6:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3302      	adds	r3, #2
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b30      	cmp	r3, #48	@ 0x30
 800c0b0:	d154      	bne.n	800c15c <cal_ven+0xe8>
		{
			if (data[3] == 0x30)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3303      	adds	r3, #3
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	2b30      	cmp	r3, #48	@ 0x30
 800c0ba:	d115      	bne.n	800c0e8 <cal_ven+0x74>
			{
				if (data[4] != 0x30)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b30      	cmp	r3, #48	@ 0x30
 800c0c4:	d100      	bne.n	800c0c8 <cal_ven+0x54>
 800c0c6:	e137      	b.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	3302      	adds	r3, #2
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	701a      	strb	r2, [r3, #0]
					//x - (1001 ~ 9009)
					result[3] = 0x30;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	3303      	adds	r3, #3
 800c0d8:	2230      	movs	r2, #48	@ 0x30
 800c0da:	701a      	strb	r2, [r3, #0]
					result[4] = data[4];
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7912      	ldrb	r2, [r2, #4]
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	e127      	b.n	800c338 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3303      	adds	r3, #3
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b31      	cmp	r3, #49	@ 0x31
 800c0f0:	d10f      	bne.n	800c112 <cal_ven+0x9e>
			{
				result[0] += 2;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	3302      	adds	r3, #2
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x thousand ten/eleven/.../nineteen)
				result[3] = 0x31;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	3303      	adds	r3, #3
 800c102:	2231      	movs	r2, #49	@ 0x31
 800c104:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	3304      	adds	r3, #4
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	7912      	ldrb	r2, [r2, #4]
 800c10e:	701a      	strb	r2, [r3, #0]
 800c110:	e112      	b.n	800c338 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	3302      	adds	r3, #2
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety (x thousand twenty/.../ninety)
				result[3] = 0x32;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	3303      	adds	r3, #3
 800c122:	2232      	movs	r2, #50	@ 0x32
 800c124:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	3304      	adds	r3, #4
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	78d2      	ldrb	r2, [r2, #3]
 800c12e:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3304      	adds	r3, #4
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b30      	cmp	r3, #48	@ 0x30
 800c138:	d100      	bne.n	800c13c <cal_ven+0xc8>
 800c13a:	e0fd      	b.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	3302      	adds	r3, #2
 800c142:	b2da      	uxtb	r2, r3
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	701a      	strb	r2, [r3, #0]
					//x - (x thousand twenty/.../ninety x)
					result[5] = 0x30;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	3305      	adds	r3, #5
 800c14c:	2230      	movs	r2, #48	@ 0x30
 800c14e:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	3306      	adds	r3, #6
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	7912      	ldrb	r2, [r2, #4]
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	e0ed      	b.n	800c338 <cal_ven+0x2c4>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	3302      	adds	r3, #2
 800c162:	b2da      	uxtb	r2, r3
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	701a      	strb	r2, [r3, #0]
			//x hundred (x thousand x hundred)
			result[3] = 0x41;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	3303      	adds	r3, #3
 800c16c:	2241      	movs	r2, #65	@ 0x41
 800c16e:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	3304      	adds	r3, #4
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	7892      	ldrb	r2, [r2, #2]
 800c178:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3303      	adds	r3, #3
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	2b30      	cmp	r3, #48	@ 0x30
 800c182:	d115      	bne.n	800c1b0 <cal_ven+0x13c>
			{
				if (data[4] != 0x30)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	3304      	adds	r3, #4
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	2b30      	cmp	r3, #48	@ 0x30
 800c18c:	d100      	bne.n	800c190 <cal_ven+0x11c>
 800c18e:	e0d3      	b.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	3302      	adds	r3, #2
 800c196:	b2da      	uxtb	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	701a      	strb	r2, [r3, #0]
					//x - (x thousand x hundred x)
					result[5] = 0x30;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	3305      	adds	r3, #5
 800c1a0:	2230      	movs	r2, #48	@ 0x30
 800c1a2:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	3306      	adds	r3, #6
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	7912      	ldrb	r2, [r2, #4]
 800c1ac:	701a      	strb	r2, [r3, #0]
 800c1ae:	e0c3      	b.n	800c338 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3303      	adds	r3, #3
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b31      	cmp	r3, #49	@ 0x31
 800c1b8:	d10f      	bne.n	800c1da <cal_ven+0x166>
			{
				result[0] += 2;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	3302      	adds	r3, #2
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x thousand x hundred ten/eleven/.../nineteen)
				result[5] = 0x31;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	3305      	adds	r3, #5
 800c1ca:	2231      	movs	r2, #49	@ 0x31
 800c1cc:	701a      	strb	r2, [r3, #0]
				result[6] = data[4];
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	3306      	adds	r3, #6
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	7912      	ldrb	r2, [r2, #4]
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e0ae      	b.n	800c338 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	3302      	adds	r3, #2
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety (x thousand x hundred twenty/.../ninety)
				result[5] = 0x32;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	3305      	adds	r3, #5
 800c1ea:	2232      	movs	r2, #50	@ 0x32
 800c1ec:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	3306      	adds	r3, #6
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	78d2      	ldrb	r2, [r2, #3]
 800c1f6:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b30      	cmp	r3, #48	@ 0x30
 800c200:	d100      	bne.n	800c204 <cal_ven+0x190>
 800c202:	e099      	b.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	3302      	adds	r3, #2
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	701a      	strb	r2, [r3, #0]
					//x (x thousand x hundred twenty/.../ninety x)
					result[7] = 0x30;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	3307      	adds	r3, #7
 800c214:	2230      	movs	r2, #48	@ 0x30
 800c216:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	7912      	ldrb	r2, [r2, #4]
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e089      	b.n	800c338 <cal_ven+0x2c4>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3302      	adds	r3, #2
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b30      	cmp	r3, #48	@ 0x30
 800c22c:	d061      	beq.n	800c2f2 <cal_ven+0x27e>
		{
			result[0] += 2;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	3302      	adds	r3, #2
 800c234:	b2da      	uxtb	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	701a      	strb	r2, [r3, #0]
			//x hundred - (x hundred)
			result[1] = 0x41;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	3301      	adds	r3, #1
 800c23e:	2241      	movs	r2, #65	@ 0x41
 800c240:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	3302      	adds	r3, #2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	7892      	ldrb	r2, [r2, #2]
 800c24a:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3303      	adds	r3, #3
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b30      	cmp	r3, #48	@ 0x30
 800c254:	d114      	bne.n	800c280 <cal_ven+0x20c>
			{
				if (data[4] != 0x30)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	3304      	adds	r3, #4
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b30      	cmp	r3, #48	@ 0x30
 800c25e:	d06b      	beq.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 4;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	3304      	adds	r3, #4
 800c266:	b2da      	uxtb	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	701a      	strb	r2, [r3, #0]
					//x - (x hundred x)
					result[3] = 0x30;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	3303      	adds	r3, #3
 800c270:	2230      	movs	r2, #48	@ 0x30
 800c272:	701a      	strb	r2, [r3, #0]
					result[4] = data[4];
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	7912      	ldrb	r2, [r2, #4]
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e05b      	b.n	800c338 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3303      	adds	r3, #3
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b31      	cmp	r3, #49	@ 0x31
 800c288:	d10f      	bne.n	800c2aa <cal_ven+0x236>
			{
				result[0] += 2;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	3302      	adds	r3, #2
 800c290:	b2da      	uxtb	r2, r3
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x hundred ten/eleven/.../nineteen)
				result[3] = 0x31;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	3303      	adds	r3, #3
 800c29a:	2231      	movs	r2, #49	@ 0x31
 800c29c:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	7912      	ldrb	r2, [r2, #4]
 800c2a6:	701a      	strb	r2, [r3, #0]
 800c2a8:	e046      	b.n	800c338 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	3302      	adds	r3, #2
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety - (x hundred twenty/.../ninety)
				result[3] = 0x32;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	3303      	adds	r3, #3
 800c2ba:	2232      	movs	r2, #50	@ 0x32
 800c2bc:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	78d2      	ldrb	r2, [r2, #3]
 800c2c6:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b30      	cmp	r3, #48	@ 0x30
 800c2d0:	d032      	beq.n	800c338 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	3302      	adds	r3, #2
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	701a      	strb	r2, [r3, #0]
					//x - (x hundred twenty/.../ninety x)
					result[5] = 0x30;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	3305      	adds	r3, #5
 800c2e2:	2230      	movs	r2, #48	@ 0x30
 800c2e4:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	3306      	adds	r3, #6
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	7912      	ldrb	r2, [r2, #4]
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e022      	b.n	800c338 <cal_ven+0x2c4>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	701a      	strb	r2, [r3, #0]
			//twenty, ..., ninety - (twenty/.../ninety)
			result[1] = 0x32;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	2232      	movs	r2, #50	@ 0x32
 800c304:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	3302      	adds	r3, #2
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	78d2      	ldrb	r2, [r2, #3]
 800c30e:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3304      	adds	r3, #4
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b30      	cmp	r3, #48	@ 0x30
 800c318:	d00e      	beq.n	800c338 <cal_ven+0x2c4>
			{
				result[0] += 2;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	3302      	adds	r3, #2
 800c320:	b2da      	uxtb	r2, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	701a      	strb	r2, [r3, #0]
				//x - (twenty/.../ninety x)
				result[3] = 0x30;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	3303      	adds	r3, #3
 800c32a:	2230      	movs	r2, #48	@ 0x30
 800c32c:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	3304      	adds	r3, #4
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	7912      	ldrb	r2, [r2, #4]
 800c336:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//dollars
	result[0] += 2;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	3302      	adds	r3, #2
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x33;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	3b01      	subs	r3, #1
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	18d3      	adds	r3, r2, r3
 800c34e:	2233      	movs	r2, #51	@ 0x33
 800c350:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x32;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	001a      	movs	r2, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	189b      	adds	r3, r3, r2
 800c35c:	2232      	movs	r2, #50	@ 0x32
 800c35e:	701a      	strb	r2, [r3, #0]

	if (data[5] != 0x30)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	3305      	adds	r3, #5
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b30      	cmp	r3, #48	@ 0x30
 800c368:	d044      	beq.n	800c3f4 <cal_ven+0x380>
	{
		result[0] += 6;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	3306      	adds	r3, #6
 800c370:	b2da      	uxtb	r2, r3
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	701a      	strb	r2, [r3, #0]
		//and
		result[result[0] - 5] = 0x33;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	3b05      	subs	r3, #5
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	18d3      	adds	r3, r2, r3
 800c380:	2233      	movs	r2, #51	@ 0x33
 800c382:	701a      	strb	r2, [r3, #0]
		result[result[0] - 4] = 0x30;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	3b04      	subs	r3, #4
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	18d3      	adds	r3, r2, r3
 800c38e:	2230      	movs	r2, #48	@ 0x30
 800c390:	701a      	strb	r2, [r3, #0]
		if (data[5] == 0x31)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3305      	adds	r3, #5
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b31      	cmp	r3, #49	@ 0x31
 800c39a:	d10e      	bne.n	800c3ba <cal_ven+0x346>
		{
			//ten
			result[result[0] - 3] = 0x31;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	3b03      	subs	r3, #3
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	18d3      	adds	r3, r2, r3
 800c3a6:	2231      	movs	r2, #49	@ 0x31
 800c3a8:	701a      	strb	r2, [r3, #0]
			result[result[0] - 2] = 0x30;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	3b02      	subs	r3, #2
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	18d3      	adds	r3, r2, r3
 800c3b4:	2230      	movs	r2, #48	@ 0x30
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	e00e      	b.n	800c3d8 <cal_ven+0x364>
		}
		else
		{
			//twenty/.../ninety
			result[result[0] - 3] = 0x32;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	3b03      	subs	r3, #3
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	18d3      	adds	r3, r2, r3
 800c3c4:	2232      	movs	r2, #50	@ 0x32
 800c3c6:	701a      	strb	r2, [r3, #0]
			result[result[0] - 2] = data[5];
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	3b02      	subs	r3, #2
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	18d3      	adds	r3, r2, r3
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	7952      	ldrb	r2, [r2, #5]
 800c3d6:	701a      	strb	r2, [r3, #0]
		}
		//cents
		result[result[0] - 1] = 0x33;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	18d3      	adds	r3, r2, r3
 800c3e2:	2233      	movs	r2, #51	@ 0x33
 800c3e4:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x31;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	001a      	movs	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	189b      	adds	r3, r3, r2
 800c3f0:	2231      	movs	r2, #49	@ 0x31
 800c3f2:	701a      	strb	r2, [r3, #0]
	}

	if (data[0] != 0)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d100      	bne.n	800c3fe <cal_ven+0x38a>
 800c3fc:	e114      	b.n	800c628 <cal_ven+0x5b4>
	{
		//including the surcharge
		result[0] += 2;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	3302      	adds	r3, #2
 800c404:	b2da      	uxtb	r2, r3
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x33;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	3b01      	subs	r3, #1
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	18d3      	adds	r3, r2, r3
 800c414:	2233      	movs	r2, #51	@ 0x33
 800c416:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x39;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	001a      	movs	r2, r3
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	189b      	adds	r3, r3, r2
 800c422:	2239      	movs	r2, #57	@ 0x39
 800c424:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3306      	adds	r3, #6
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b30      	cmp	r3, #48	@ 0x30
 800c42e:	d100      	bne.n	800c432 <cal_ven+0x3be>
 800c430:	e081      	b.n	800c536 <cal_ven+0x4c2>
		{
			result[0] += 2;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	3302      	adds	r3, #2
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	701a      	strb	r2, [r3, #0]
			//x hundred - (x hundred)
			result[result[0] - 1] = 0x41;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	3b01      	subs	r3, #1
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	18d3      	adds	r3, r2, r3
 800c448:	2241      	movs	r2, #65	@ 0x41
 800c44a:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	001a      	movs	r2, r3
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	189b      	adds	r3, r3, r2
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	7992      	ldrb	r2, [r2, #6]
 800c45a:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3307      	adds	r3, #7
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	2b30      	cmp	r3, #48	@ 0x30
 800c464:	d11b      	bne.n	800c49e <cal_ven+0x42a>
			{
				if (data[8] != 0x30)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3308      	adds	r3, #8
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b30      	cmp	r3, #48	@ 0x30
 800c46e:	d100      	bne.n	800c472 <cal_ven+0x3fe>
 800c470:	e0c6      	b.n	800c600 <cal_ven+0x58c>
				{
					result[0] += 2;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	3302      	adds	r3, #2
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	701a      	strb	r2, [r3, #0]
					//x - (x hundred x)
					result[result[0] - 1] = 0x30;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	3b01      	subs	r3, #1
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	18d3      	adds	r3, r2, r3
 800c488:	2230      	movs	r2, #48	@ 0x30
 800c48a:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	001a      	movs	r2, r3
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	189b      	adds	r3, r3, r2
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	7a12      	ldrb	r2, [r2, #8]
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	e0b0      	b.n	800c600 <cal_ven+0x58c>
				}
			}
			else
			{
				if (data[7] == 0x31)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3307      	adds	r3, #7
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b31      	cmp	r3, #49	@ 0x31
 800c4a6:	d115      	bne.n	800c4d4 <cal_ven+0x460>
				{
					result[0] += 2;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	3302      	adds	r3, #2
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	701a      	strb	r2, [r3, #0]
					//ten, eleven, ..., nineteen (x hundred ten/eleven/.../nineteen)
					result[result[0] - 1] = 0x30;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	18d3      	adds	r3, r2, r3
 800c4be:	2230      	movs	r2, #48	@ 0x30
 800c4c0:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	001a      	movs	r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	189b      	adds	r3, r3, r2
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7a12      	ldrb	r2, [r2, #8]
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	e095      	b.n	800c600 <cal_ven+0x58c>
				}
				else
				{
					result[0] += 2;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	3302      	adds	r3, #2
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	701a      	strb	r2, [r3, #0]
					//twenty, ..., ninety - (x hundred twenty/.../ninety)
					result[result[0] - 1] = 0x32;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	18d3      	adds	r3, r2, r3
 800c4ea:	2232      	movs	r2, #50	@ 0x32
 800c4ec:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[7];
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	001a      	movs	r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	189b      	adds	r3, r3, r2
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	79d2      	ldrb	r2, [r2, #7]
 800c4fc:	701a      	strb	r2, [r3, #0]
					if (data[8] != 0x30)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3308      	adds	r3, #8
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b30      	cmp	r3, #48	@ 0x30
 800c506:	d100      	bne.n	800c50a <cal_ven+0x496>
 800c508:	e07a      	b.n	800c600 <cal_ven+0x58c>
					{
						result[0] += 2;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	3302      	adds	r3, #2
 800c510:	b2da      	uxtb	r2, r3
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	701a      	strb	r2, [r3, #0]
						//x - (x hundred twenty/.../ninety x)
						result[result[0] - 1] = 0x30;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	18d3      	adds	r3, r2, r3
 800c520:	2230      	movs	r2, #48	@ 0x30
 800c522:	701a      	strb	r2, [r3, #0]
						result[result[0]] = data[8];
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	001a      	movs	r2, r3
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	189b      	adds	r3, r3, r2
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	7a12      	ldrb	r2, [r2, #8]
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	e064      	b.n	800c600 <cal_ven+0x58c>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3307      	adds	r3, #7
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b31      	cmp	r3, #49	@ 0x31
 800c53e:	d115      	bne.n	800c56c <cal_ven+0x4f8>
			{
				result[0] += 2;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	3302      	adds	r3, #2
 800c546:	b2da      	uxtb	r2, r3
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen - (ten/eleven/.../nineteen)
				result[result[0] - 1] = 0x31;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	3b01      	subs	r3, #1
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	18d3      	adds	r3, r2, r3
 800c556:	2231      	movs	r2, #49	@ 0x31
 800c558:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	001a      	movs	r2, r3
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	189b      	adds	r3, r3, r2
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	7a12      	ldrb	r2, [r2, #8]
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	e049      	b.n	800c600 <cal_ven+0x58c>
			}
			else if (data[7] != 0x30)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3307      	adds	r3, #7
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b30      	cmp	r3, #48	@ 0x30
 800c574:	d02f      	beq.n	800c5d6 <cal_ven+0x562>
			{
				result[0] += 2;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	3302      	adds	r3, #2
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety - (twenty/.../ninety)
				result[result[0] - 1] = 0x32;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	3b01      	subs	r3, #1
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	18d3      	adds	r3, r2, r3
 800c58c:	2232      	movs	r2, #50	@ 0x32
 800c58e:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	001a      	movs	r2, r3
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	189b      	adds	r3, r3, r2
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	79d2      	ldrb	r2, [r2, #7]
 800c59e:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b30      	cmp	r3, #48	@ 0x30
 800c5a8:	d02a      	beq.n	800c600 <cal_ven+0x58c>
				{
					result[0] += 2;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	3302      	adds	r3, #2
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	701a      	strb	r2, [r3, #0]
					//x - (twenty/.../ninety x)
					result[result[0] - 1] = 0x30;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	18d3      	adds	r3, r2, r3
 800c5c0:	2230      	movs	r2, #48	@ 0x30
 800c5c2:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	001a      	movs	r2, r3
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	189b      	adds	r3, r3, r2
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	7a12      	ldrb	r2, [r2, #8]
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	e014      	b.n	800c600 <cal_ven+0x58c>
				}
			}
			else
			{
				result[0] += 2;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	3302      	adds	r3, #2
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	701a      	strb	r2, [r3, #0]
				//x - (x)
				result[result[0] - 1] = 0x30;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	18d3      	adds	r3, r2, r3
 800c5ec:	2230      	movs	r2, #48	@ 0x30
 800c5ee:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	001a      	movs	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	189b      	adds	r3, r3, r2
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	7a12      	ldrb	r2, [r2, #8]
 800c5fe:	701a      	strb	r2, [r3, #0]
			}
		}
		//dollars
		result[0] += 2;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	3302      	adds	r3, #2
 800c606:	b2da      	uxtb	r2, r3
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x33;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	3b01      	subs	r3, #1
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	18d3      	adds	r3, r2, r3
 800c616:	2233      	movs	r2, #51	@ 0x33
 800c618:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x32;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	001a      	movs	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	189b      	adds	r3, r3, r2
 800c624:	2232      	movs	r2, #50	@ 0x32
 800c626:	701a      	strb	r2, [r3, #0]
	}
	//thank you, have a nice day
	result[0] += 2;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	3302      	adds	r3, #2
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x34;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	3b01      	subs	r3, #1
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	18d3      	adds	r3, r2, r3
 800c63e:	2234      	movs	r2, #52	@ 0x34
 800c640:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x30;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	001a      	movs	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	189b      	adds	r3, r3, r2
 800c64c:	2230      	movs	r2, #48	@ 0x30
 800c64e:	701a      	strb	r2, [r3, #0]
}
 800c650:	46c0      	nop			@ (mov r8, r8)
 800c652:	46bd      	mov	sp, r7
 800c654:	b002      	add	sp, #8
 800c656:	bd80      	pop	{r7, pc}

0800c658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c65c:	b672      	cpsid	i
}
 800c65e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c660:	46c0      	nop			@ (mov r8, r8)
 800c662:	e7fd      	b.n	800c660 <Error_Handler+0x8>

0800c664 <PCF2129_Init>:
 *  @note :
 *  @param :         使用HAL庫 I2C接口 (Use HAL library I2C interface)
 *  @retva l: None
=============================================================================
*/
void PCF2129_Init(I2C_HandleTypeDef i2c_h,uint8_t addr) {
 800c664:	b084      	sub	sp, #16
 800c666:	b5b0      	push	{r4, r5, r7, lr}
 800c668:	af00      	add	r7, sp, #0
 800c66a:	2510      	movs	r5, #16
 800c66c:	197c      	adds	r4, r7, r5
 800c66e:	6020      	str	r0, [r4, #0]
 800c670:	6061      	str	r1, [r4, #4]
 800c672:	60a2      	str	r2, [r4, #8]
 800c674:	60e3      	str	r3, [r4, #12]
    pcf2129.i2c_h = i2c_h;
 800c676:	4a0b      	ldr	r2, [pc, #44]	@ (800c6a4 <PCF2129_Init+0x40>)
 800c678:	002c      	movs	r4, r5
 800c67a:	193b      	adds	r3, r7, r4
 800c67c:	0010      	movs	r0, r2
 800c67e:	0019      	movs	r1, r3
 800c680:	234c      	movs	r3, #76	@ 0x4c
 800c682:	001a      	movs	r2, r3
 800c684:	f00b ffd2 	bl	801862c <memcpy>
    pcf2129.i2caddr = addr;
 800c688:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <PCF2129_Init+0x40>)
 800c68a:	224c      	movs	r2, #76	@ 0x4c
 800c68c:	1912      	adds	r2, r2, r4
 800c68e:	19d2      	adds	r2, r2, r7
 800c690:	214c      	movs	r1, #76	@ 0x4c
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	545a      	strb	r2, [r3, r1]
}
 800c696:	46c0      	nop			@ (mov r8, r8)
 800c698:	46bd      	mov	sp, r7
 800c69a:	bcb0      	pop	{r4, r5, r7}
 800c69c:	bc08      	pop	{r3}
 800c69e:	b004      	add	sp, #16
 800c6a0:	4718      	bx	r3
 800c6a2:	46c0      	nop			@ (mov r8, r8)
 800c6a4:	20003404 	.word	0x20003404

0800c6a8 <PCF2129_configure>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_configure(void) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
    PCF2129_set24mode();
 800c6ac:	f000 f90c 	bl	800c8c8 <PCF2129_set24mode>
}
 800c6b0:	46c0      	nop			@ (mov r8, r8)
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <PCF2129_getDate>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
PCF2129_t PCF2129_getDate(void)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af02      	add	r7, sp, #8
 800c6be:	6078      	str	r0, [r7, #4]
	uint8_t datecontent;

	datecontent = PCF2129_REG_SECONDS;
 800c6c0:	240f      	movs	r4, #15
 800c6c2:	193b      	adds	r3, r7, r4
 800c6c4:	2203      	movs	r2, #3
 800c6c6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c6c8:	193a      	adds	r2, r7, r4
 800c6ca:	485d      	ldr	r0, [pc, #372]	@ (800c840 <PCF2129_getDate+0x188>)
 800c6cc:	231e      	movs	r3, #30
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	21a2      	movs	r1, #162	@ 0xa2
 800c6d4:	f002 f820 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c6d8:	4b59      	ldr	r3, [pc, #356]	@ (800c840 <PCF2129_getDate+0x188>)
 800c6da:	224c      	movs	r2, #76	@ 0x4c
 800c6dc:	5c9b      	ldrb	r3, [r3, r2]
 800c6de:	0019      	movs	r1, r3
 800c6e0:	193a      	adds	r2, r7, r4
 800c6e2:	4857      	ldr	r0, [pc, #348]	@ (800c840 <PCF2129_getDate+0x188>)
 800c6e4:	231e      	movs	r3, #30
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f002 f91d 	bl	800e928 <HAL_I2C_Master_Receive>
 800c6ee:	1e03      	subs	r3, r0, #0
 800c6f0:	d104      	bne.n	800c6fc <PCF2129_getDate+0x44>
    	pcf2129.date.ss = datecontent;
 800c6f2:	193b      	adds	r3, r7, r4
 800c6f4:	7819      	ldrb	r1, [r3, #0]
 800c6f6:	4b52      	ldr	r3, [pc, #328]	@ (800c840 <PCF2129_getDate+0x188>)
 800c6f8:	2253      	movs	r2, #83	@ 0x53
 800c6fa:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_MINUTES;
 800c6fc:	240f      	movs	r4, #15
 800c6fe:	193b      	adds	r3, r7, r4
 800c700:	2204      	movs	r2, #4
 800c702:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c704:	193a      	adds	r2, r7, r4
 800c706:	484e      	ldr	r0, [pc, #312]	@ (800c840 <PCF2129_getDate+0x188>)
 800c708:	231e      	movs	r3, #30
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	2301      	movs	r3, #1
 800c70e:	21a2      	movs	r1, #162	@ 0xa2
 800c710:	f002 f802 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c714:	4b4a      	ldr	r3, [pc, #296]	@ (800c840 <PCF2129_getDate+0x188>)
 800c716:	224c      	movs	r2, #76	@ 0x4c
 800c718:	5c9b      	ldrb	r3, [r3, r2]
 800c71a:	0019      	movs	r1, r3
 800c71c:	193a      	adds	r2, r7, r4
 800c71e:	4848      	ldr	r0, [pc, #288]	@ (800c840 <PCF2129_getDate+0x188>)
 800c720:	231e      	movs	r3, #30
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	2301      	movs	r3, #1
 800c726:	f002 f8ff 	bl	800e928 <HAL_I2C_Master_Receive>
 800c72a:	1e03      	subs	r3, r0, #0
 800c72c:	d104      	bne.n	800c738 <PCF2129_getDate+0x80>
    	pcf2129.date.mm= datecontent;
 800c72e:	193b      	adds	r3, r7, r4
 800c730:	7819      	ldrb	r1, [r3, #0]
 800c732:	4b43      	ldr	r3, [pc, #268]	@ (800c840 <PCF2129_getDate+0x188>)
 800c734:	2252      	movs	r2, #82	@ 0x52
 800c736:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_HOURS;
 800c738:	240f      	movs	r4, #15
 800c73a:	193b      	adds	r3, r7, r4
 800c73c:	2205      	movs	r2, #5
 800c73e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c740:	193a      	adds	r2, r7, r4
 800c742:	483f      	ldr	r0, [pc, #252]	@ (800c840 <PCF2129_getDate+0x188>)
 800c744:	231e      	movs	r3, #30
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	2301      	movs	r3, #1
 800c74a:	21a2      	movs	r1, #162	@ 0xa2
 800c74c:	f001 ffe4 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c750:	4b3b      	ldr	r3, [pc, #236]	@ (800c840 <PCF2129_getDate+0x188>)
 800c752:	224c      	movs	r2, #76	@ 0x4c
 800c754:	5c9b      	ldrb	r3, [r3, r2]
 800c756:	0019      	movs	r1, r3
 800c758:	193a      	adds	r2, r7, r4
 800c75a:	4839      	ldr	r0, [pc, #228]	@ (800c840 <PCF2129_getDate+0x188>)
 800c75c:	231e      	movs	r3, #30
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	2301      	movs	r3, #1
 800c762:	f002 f8e1 	bl	800e928 <HAL_I2C_Master_Receive>
 800c766:	1e03      	subs	r3, r0, #0
 800c768:	d104      	bne.n	800c774 <PCF2129_getDate+0xbc>
    	pcf2129.date.hh = datecontent;
 800c76a:	193b      	adds	r3, r7, r4
 800c76c:	7819      	ldrb	r1, [r3, #0]
 800c76e:	4b34      	ldr	r3, [pc, #208]	@ (800c840 <PCF2129_getDate+0x188>)
 800c770:	2251      	movs	r2, #81	@ 0x51
 800c772:	5499      	strb	r1, [r3, r2]
//    datecontent = PCF2129_WEEKDAYS;
//    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
//    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
//        pcf2129.date.w= datecontent;

    datecontent = PCF2129_REG_DAYS;
 800c774:	240f      	movs	r4, #15
 800c776:	193b      	adds	r3, r7, r4
 800c778:	2206      	movs	r2, #6
 800c77a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c77c:	193a      	adds	r2, r7, r4
 800c77e:	4830      	ldr	r0, [pc, #192]	@ (800c840 <PCF2129_getDate+0x188>)
 800c780:	231e      	movs	r3, #30
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	2301      	movs	r3, #1
 800c786:	21a2      	movs	r1, #162	@ 0xa2
 800c788:	f001 ffc6 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c78c:	4b2c      	ldr	r3, [pc, #176]	@ (800c840 <PCF2129_getDate+0x188>)
 800c78e:	224c      	movs	r2, #76	@ 0x4c
 800c790:	5c9b      	ldrb	r3, [r3, r2]
 800c792:	0019      	movs	r1, r3
 800c794:	193a      	adds	r2, r7, r4
 800c796:	482a      	ldr	r0, [pc, #168]	@ (800c840 <PCF2129_getDate+0x188>)
 800c798:	231e      	movs	r3, #30
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	2301      	movs	r3, #1
 800c79e:	f002 f8c3 	bl	800e928 <HAL_I2C_Master_Receive>
 800c7a2:	1e03      	subs	r3, r0, #0
 800c7a4:	d104      	bne.n	800c7b0 <PCF2129_getDate+0xf8>
    	pcf2129.date.d= datecontent;
 800c7a6:	193b      	adds	r3, r7, r4
 800c7a8:	7819      	ldrb	r1, [r3, #0]
 800c7aa:	4b25      	ldr	r3, [pc, #148]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7ac:	224f      	movs	r2, #79	@ 0x4f
 800c7ae:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_MONTHS;
 800c7b0:	240f      	movs	r4, #15
 800c7b2:	193b      	adds	r3, r7, r4
 800c7b4:	2208      	movs	r2, #8
 800c7b6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c7b8:	193a      	adds	r2, r7, r4
 800c7ba:	4821      	ldr	r0, [pc, #132]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7bc:	231e      	movs	r3, #30
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	21a2      	movs	r1, #162	@ 0xa2
 800c7c4:	f001 ffa8 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c7c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7ca:	224c      	movs	r2, #76	@ 0x4c
 800c7cc:	5c9b      	ldrb	r3, [r3, r2]
 800c7ce:	0019      	movs	r1, r3
 800c7d0:	193a      	adds	r2, r7, r4
 800c7d2:	481b      	ldr	r0, [pc, #108]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7d4:	231e      	movs	r3, #30
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f002 f8a5 	bl	800e928 <HAL_I2C_Master_Receive>
 800c7de:	1e03      	subs	r3, r0, #0
 800c7e0:	d104      	bne.n	800c7ec <PCF2129_getDate+0x134>
        pcf2129.date.m= datecontent;
 800c7e2:	193b      	adds	r3, r7, r4
 800c7e4:	7819      	ldrb	r1, [r3, #0]
 800c7e6:	4b16      	ldr	r3, [pc, #88]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7e8:	224e      	movs	r2, #78	@ 0x4e
 800c7ea:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_YEARS;
 800c7ec:	240f      	movs	r4, #15
 800c7ee:	193b      	adds	r3, r7, r4
 800c7f0:	2209      	movs	r2, #9
 800c7f2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800c7f4:	193a      	adds	r2, r7, r4
 800c7f6:	4812      	ldr	r0, [pc, #72]	@ (800c840 <PCF2129_getDate+0x188>)
 800c7f8:	231e      	movs	r3, #30
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	21a2      	movs	r1, #162	@ 0xa2
 800c800:	f001 ff8a 	bl	800e718 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800c804:	4b0e      	ldr	r3, [pc, #56]	@ (800c840 <PCF2129_getDate+0x188>)
 800c806:	224c      	movs	r2, #76	@ 0x4c
 800c808:	5c9b      	ldrb	r3, [r3, r2]
 800c80a:	0019      	movs	r1, r3
 800c80c:	193a      	adds	r2, r7, r4
 800c80e:	480c      	ldr	r0, [pc, #48]	@ (800c840 <PCF2129_getDate+0x188>)
 800c810:	231e      	movs	r3, #30
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	2301      	movs	r3, #1
 800c816:	f002 f887 	bl	800e928 <HAL_I2C_Master_Receive>
 800c81a:	1e03      	subs	r3, r0, #0
 800c81c:	d104      	bne.n	800c828 <PCF2129_getDate+0x170>
        pcf2129.date.y= datecontent;
 800c81e:	193b      	adds	r3, r7, r4
 800c820:	7819      	ldrb	r1, [r3, #0]
 800c822:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <PCF2129_getDate+0x188>)
 800c824:	224d      	movs	r2, #77	@ 0x4d
 800c826:	5499      	strb	r1, [r3, r2]
	pcf2129.date.hh = PCF2129_read(PCF2129_REG_HOURS);
	pcf2129.date.d = PCF2129_read(PCF2129_REG_DAYS);
	pcf2129.date.m = PCF2129_read(PCF2129_REG_MONTHS);
	pcf2129.date.y = PCF2129_read(PCF2129_REG_YEARS);
	*/
    return pcf2129;
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	4b05      	ldr	r3, [pc, #20]	@ (800c840 <PCF2129_getDate+0x188>)
 800c82c:	0010      	movs	r0, r2
 800c82e:	0019      	movs	r1, r3
 800c830:	2358      	movs	r3, #88	@ 0x58
 800c832:	001a      	movs	r2, r3
 800c834:	f00b fefa 	bl	801862c <memcpy>
}
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b005      	add	sp, #20
 800c83e:	bd90      	pop	{r4, r7, pc}
 800c840:	20003404 	.word	0x20003404

0800c844 <PCF2129_setDate>:
 *  @retva l: None
=============================================================================
*/
void PCF2129_setDate(uint16_t years, uint8_t months, uint8_t days,
                     uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 800c844:	b5b0      	push	{r4, r5, r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	0005      	movs	r5, r0
 800c84c:	000c      	movs	r4, r1
 800c84e:	0010      	movs	r0, r2
 800c850:	0019      	movs	r1, r3
 800c852:	1dbb      	adds	r3, r7, #6
 800c854:	1c2a      	adds	r2, r5, #0
 800c856:	801a      	strh	r2, [r3, #0]
 800c858:	1d7b      	adds	r3, r7, #5
 800c85a:	1c22      	adds	r2, r4, #0
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	1d3b      	adds	r3, r7, #4
 800c860:	1c02      	adds	r2, r0, #0
 800c862:	701a      	strb	r2, [r3, #0]
 800c864:	1cfb      	adds	r3, r7, #3
 800c866:	1c0a      	adds	r2, r1, #0
 800c868:	701a      	strb	r2, [r3, #0]
    PCF2129_write(PCF2129_REG_SECONDS,seconds);
 800c86a:	231c      	movs	r3, #28
 800c86c:	18fb      	adds	r3, r7, r3
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	0019      	movs	r1, r3
 800c872:	2003      	movs	r0, #3
 800c874:	f000 f86a 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_MINUTES,minutes);
 800c878:	2318      	movs	r3, #24
 800c87a:	18fb      	adds	r3, r7, r3
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	0019      	movs	r1, r3
 800c880:	2004      	movs	r0, #4
 800c882:	f000 f863 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_HOURS,hours);
 800c886:	1cfb      	adds	r3, r7, #3
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	0019      	movs	r1, r3
 800c88c:	2005      	movs	r0, #5
 800c88e:	f000 f85d 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_DAYS,days);
 800c892:	1d3b      	adds	r3, r7, #4
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	0019      	movs	r1, r3
 800c898:	2006      	movs	r0, #6
 800c89a:	f000 f857 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_WEEKDAYS,0x00);
 800c89e:	2100      	movs	r1, #0
 800c8a0:	2007      	movs	r0, #7
 800c8a2:	f000 f853 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_MONTHS,months);
 800c8a6:	1d7b      	adds	r3, r7, #5
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	0019      	movs	r1, r3
 800c8ac:	2008      	movs	r0, #8
 800c8ae:	f000 f84d 	bl	800c94c <PCF2129_write>
    PCF2129_write(PCF2129_REG_YEARS,years);
 800c8b2:	1dbb      	adds	r3, r7, #6
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	0019      	movs	r1, r3
 800c8ba:	2009      	movs	r0, #9
 800c8bc:	f000 f846 	bl	800c94c <PCF2129_write>
}
 800c8c0:	46c0      	nop			@ (mov r8, r8)
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	b002      	add	sp, #8
 800c8c6:	bdb0      	pop	{r4, r5, r7, pc}

0800c8c8 <PCF2129_set24mode>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_set24mode(void) {
 800c8c8:	b590      	push	{r4, r7, lr}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	ctrl = PCF2129_readCtrl(PCF2129_REG_CONTROL1);
 800c8ce:	1dfc      	adds	r4, r7, #7
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f000 f85b 	bl	800c98c <PCF2129_readCtrl>
 800c8d6:	0003      	movs	r3, r0
 800c8d8:	7023      	strb	r3, [r4, #0]
	ctrl &= ~(PCF2129_CONTROL_12_24);
 800c8da:	1dfb      	adds	r3, r7, #7
 800c8dc:	1dfa      	adds	r2, r7, #7
 800c8de:	7812      	ldrb	r2, [r2, #0]
 800c8e0:	2104      	movs	r1, #4
 800c8e2:	438a      	bics	r2, r1
 800c8e4:	701a      	strb	r2, [r3, #0]
	PCF2129_writeCtrl(PCF2129_REG_CONTROL1, ctrl);
 800c8e6:	1dfb      	adds	r3, r7, #7
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	0019      	movs	r1, r3
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f000 f85b 	bl	800c9a8 <PCF2129_writeCtrl>
}
 800c8f2:	46c0      	nop			@ (mov r8, r8)
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b003      	add	sp, #12
 800c8f8:	bd90      	pop	{r4, r7, pc}
	...

0800c8fc <PCF2129_read>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t PCF2129_read(uint8_t address)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af02      	add	r7, sp, #8
 800c902:	0002      	movs	r2, r0
 800c904:	1dfb      	adds	r3, r7, #7
 800c906:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &address, 1, I2C_TIMEOUT);
 800c908:	1dfa      	adds	r2, r7, #7
 800c90a:	480f      	ldr	r0, [pc, #60]	@ (800c948 <PCF2129_read+0x4c>)
 800c90c:	231e      	movs	r3, #30
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2301      	movs	r3, #1
 800c912:	21a2      	movs	r1, #162	@ 0xa2
 800c914:	f001 ff00 	bl	800e718 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &address, 1, I2C_TIMEOUT) == 0)
 800c918:	4b0b      	ldr	r3, [pc, #44]	@ (800c948 <PCF2129_read+0x4c>)
 800c91a:	224c      	movs	r2, #76	@ 0x4c
 800c91c:	5c9b      	ldrb	r3, [r3, r2]
 800c91e:	0019      	movs	r1, r3
 800c920:	1dfa      	adds	r2, r7, #7
 800c922:	4809      	ldr	r0, [pc, #36]	@ (800c948 <PCF2129_read+0x4c>)
 800c924:	231e      	movs	r3, #30
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	2301      	movs	r3, #1
 800c92a:	f001 fffd 	bl	800e928 <HAL_I2C_Master_Receive>
 800c92e:	1e03      	subs	r3, r0, #0
 800c930:	d104      	bne.n	800c93c <PCF2129_read+0x40>
	    	pcf2129.cdata.data = address;
 800c932:	1dfb      	adds	r3, r7, #7
 800c934:	7819      	ldrb	r1, [r3, #0]
 800c936:	4b04      	ldr	r3, [pc, #16]	@ (800c948 <PCF2129_read+0x4c>)
 800c938:	2254      	movs	r2, #84	@ 0x54
 800c93a:	5499      	strb	r1, [r3, r2]

	return address;
 800c93c:	1dfb      	adds	r3, r7, #7
 800c93e:	781b      	ldrb	r3, [r3, #0]
	/*
	uint8_t data;
	HAL_I2C_Mem_Read(&(pcf2129.i2c_h), pcf2129.i2caddr, address-1, 1, &data, 1, I2C_TIMEOUT);
	return data;
	*/
}
 800c940:	0018      	movs	r0, r3
 800c942:	46bd      	mov	sp, r7
 800c944:	b002      	add	sp, #8
 800c946:	bd80      	pop	{r7, pc}
 800c948:	20003404 	.word	0x20003404

0800c94c <PCF2129_write>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_write(uint8_t address, uint8_t data)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af04      	add	r7, sp, #16
 800c952:	0002      	movs	r2, r0
 800c954:	1dfb      	adds	r3, r7, #7
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	1dbb      	adds	r3, r7, #6
 800c95a:	1c0a      	adds	r2, r1, #0
 800c95c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&(pcf2129.i2c_h), pcf2129.i2caddr, address, 1, &data, 1, I2C_TIMEOUT);
 800c95e:	4b0a      	ldr	r3, [pc, #40]	@ (800c988 <PCF2129_write+0x3c>)
 800c960:	224c      	movs	r2, #76	@ 0x4c
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	0019      	movs	r1, r3
 800c966:	1dfb      	adds	r3, r7, #7
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	4806      	ldr	r0, [pc, #24]	@ (800c988 <PCF2129_write+0x3c>)
 800c96e:	231e      	movs	r3, #30
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	2301      	movs	r3, #1
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	1dbb      	adds	r3, r7, #6
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	2301      	movs	r3, #1
 800c97c:	f002 f8dc 	bl	800eb38 <HAL_I2C_Mem_Write>
}
 800c980:	46c0      	nop			@ (mov r8, r8)
 800c982:	46bd      	mov	sp, r7
 800c984:	b002      	add	sp, #8
 800c986:	bd80      	pop	{r7, pc}
 800c988:	20003404 	.word	0x20003404

0800c98c <PCF2129_readCtrl>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t PCF2129_readCtrl(uint8_t address) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	0002      	movs	r2, r0
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	701a      	strb	r2, [r3, #0]
    return PCF2129_read(PCF2129_REG_CONTROL1);
 800c998:	2000      	movs	r0, #0
 800c99a:	f7ff ffaf 	bl	800c8fc <PCF2129_read>
 800c99e:	0003      	movs	r3, r0
}
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <PCF2129_writeCtrl>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_writeCtrl(uint8_t address, uint8_t data) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	0002      	movs	r2, r0
 800c9b0:	1dfb      	adds	r3, r7, #7
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	1dbb      	adds	r3, r7, #6
 800c9b6:	1c0a      	adds	r2, r1, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
    PCF2129_write(PCF2129_REG_CONTROL1, data);
 800c9ba:	1dbb      	adds	r3, r7, #6
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	0019      	movs	r1, r3
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	f7ff ffc3 	bl	800c94c <PCF2129_write>
}
 800c9c6:	46c0      	nop			@ (mov r8, r8)
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b002      	add	sp, #8
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <bcdToDec>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t bcdToDec(uint8_t value) {
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	0002      	movs	r2, r0
 800c9d6:	1dfb      	adds	r3, r7, #7
 800c9d8:	701a      	strb	r2, [r3, #0]
    return (uint8_t) ( (value/16*10) + (value%16) );
 800c9da:	1dfb      	adds	r3, r7, #7
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	091b      	lsrs	r3, r3, #4
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	1c1a      	adds	r2, r3, #0
 800c9e4:	0092      	lsls	r2, r2, #2
 800c9e6:	18d3      	adds	r3, r2, r3
 800c9e8:	18db      	adds	r3, r3, r3
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	1dfb      	adds	r3, r7, #7
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	210f      	movs	r1, #15
 800c9f2:	400b      	ands	r3, r1
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	18d3      	adds	r3, r2, r3
 800c9f8:	b2db      	uxtb	r3, r3
}
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	b002      	add	sp, #8
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <decToBcd>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t decToBcd(uint8_t value) {
 800ca02:	b590      	push	{r4, r7, lr}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	0002      	movs	r2, r0
 800ca0a:	1dfb      	adds	r3, r7, #7
 800ca0c:	701a      	strb	r2, [r3, #0]
    return (uint8_t) ( (value/10*16) + (value%10) );
 800ca0e:	1dfb      	adds	r3, r7, #7
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	210a      	movs	r1, #10
 800ca14:	0018      	movs	r0, r3
 800ca16:	f7f3 fb87 	bl	8000128 <__udivsi3>
 800ca1a:	0003      	movs	r3, r0
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	011b      	lsls	r3, r3, #4
 800ca20:	b2dc      	uxtb	r4, r3
 800ca22:	1dfb      	adds	r3, r7, #7
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	210a      	movs	r1, #10
 800ca28:	0018      	movs	r0, r3
 800ca2a:	f7f3 fc03 	bl	8000234 <__aeabi_uidivmod>
 800ca2e:	000b      	movs	r3, r1
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	18e3      	adds	r3, r4, r3
 800ca34:	b2db      	uxtb	r3, r3
}
 800ca36:	0018      	movs	r0, r3
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	b003      	add	sp, #12
 800ca3c:	bd90      	pop	{r4, r7, pc}
	...

0800ca40 <unixToUtc>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
utc_t unixToUtc(uint32_t u32UnixTimeStamp)
{
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b08f      	sub	sp, #60	@ 0x3c
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	uint8_t flat_year_month_day[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800ca4a:	231c      	movs	r3, #28
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	4a99      	ldr	r2, [pc, #612]	@ (800ccb4 <unixToUtc+0x274>)
 800ca50:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ca52:	c313      	stmia	r3!, {r0, r1, r4}
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	701a      	strb	r2, [r3, #0]
	uint8_t leap_year_month_day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800ca58:	230c      	movs	r3, #12
 800ca5a:	18fb      	adds	r3, r7, r3
 800ca5c:	4a96      	ldr	r2, [pc, #600]	@ (800ccb8 <unixToUtc+0x278>)
 800ca5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ca60:	c313      	stmia	r3!, {r0, r1, r4}
 800ca62:	7812      	ldrb	r2, [r2, #0]
 800ca64:	701a      	strb	r2, [r3, #0]

	int32_t year_temp = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t day_temp = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t cnt_temp = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t is_leap_or_flat_year;
	uint8_t i;

	cnt_temp = u32UnixTimeStamp;
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while(cnt_temp >= 126230400)
 800ca76:	e007      	b.n	800ca88 <unixToUtc+0x48>
	{
		year_temp ++;
 800ca78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	637b      	str	r3, [r7, #52]	@ 0x34
		cnt_temp = cnt_temp - 126230400;
 800ca7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca80:	4a8e      	ldr	r2, [pc, #568]	@ (800ccbc <unixToUtc+0x27c>)
 800ca82:	4694      	mov	ip, r2
 800ca84:	4463      	add	r3, ip
 800ca86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while(cnt_temp >= 126230400)
 800ca88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8a:	4a8d      	ldr	r2, [pc, #564]	@ (800ccc0 <unixToUtc+0x280>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	dcf3      	bgt.n	800ca78 <unixToUtc+0x38>
	}

	UtcTime.year = UNIX_TIME_YEAR + (4 * year_temp);
 800ca90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	3b4e      	subs	r3, #78	@ 0x4e
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	4b89      	ldr	r3, [pc, #548]	@ (800ccc4 <unixToUtc+0x284>)
 800ca9e:	701a      	strb	r2, [r3, #0]

	if(cnt_temp >= 31536000)
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	4a89      	ldr	r2, [pc, #548]	@ (800ccc8 <unixToUtc+0x288>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	dd37      	ble.n	800cb18 <unixToUtc+0xd8>
	{
		UtcTime.year ++;
 800caa8:	4b86      	ldr	r3, [pc, #536]	@ (800ccc4 <unixToUtc+0x284>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b84      	ldr	r3, [pc, #528]	@ (800ccc4 <unixToUtc+0x284>)
 800cab2:	701a      	strb	r2, [r3, #0]
		cnt_temp -= 31536000;
 800cab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab6:	4a85      	ldr	r2, [pc, #532]	@ (800cccc <unixToUtc+0x28c>)
 800cab8:	4694      	mov	ip, r2
 800caba:	4463      	add	r3, ip
 800cabc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(cnt_temp >= 31536000)
 800cabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac0:	4a81      	ldr	r2, [pc, #516]	@ (800ccc8 <unixToUtc+0x288>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	dd28      	ble.n	800cb18 <unixToUtc+0xd8>
		{
			UtcTime.year ++;
 800cac6:	4b7f      	ldr	r3, [pc, #508]	@ (800ccc4 <unixToUtc+0x284>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	4b7d      	ldr	r3, [pc, #500]	@ (800ccc4 <unixToUtc+0x284>)
 800cad0:	701a      	strb	r2, [r3, #0]
			cnt_temp -= 31536000;
 800cad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad4:	4a7d      	ldr	r2, [pc, #500]	@ (800cccc <unixToUtc+0x28c>)
 800cad6:	4694      	mov	ip, r2
 800cad8:	4463      	add	r3, ip
 800cada:	62fb      	str	r3, [r7, #44]	@ 0x2c

			if(cnt_temp >= 31622400)
 800cadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cade:	4a7c      	ldr	r2, [pc, #496]	@ (800ccd0 <unixToUtc+0x290>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	dd19      	ble.n	800cb18 <unixToUtc+0xd8>
			{
				UtcTime.year ++;
 800cae4:	4b77      	ldr	r3, [pc, #476]	@ (800ccc4 <unixToUtc+0x284>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	b2da      	uxtb	r2, r3
 800caec:	4b75      	ldr	r3, [pc, #468]	@ (800ccc4 <unixToUtc+0x284>)
 800caee:	701a      	strb	r2, [r3, #0]
				cnt_temp -= 31622400;
 800caf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf2:	4a78      	ldr	r2, [pc, #480]	@ (800ccd4 <unixToUtc+0x294>)
 800caf4:	4694      	mov	ip, r2
 800caf6:	4463      	add	r3, ip
 800caf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

				if(cnt_temp >= 31536000)
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	4a72      	ldr	r2, [pc, #456]	@ (800ccc8 <unixToUtc+0x288>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	dd0a      	ble.n	800cb18 <unixToUtc+0xd8>
				{
					UtcTime.year ++;
 800cb02:	4b70      	ldr	r3, [pc, #448]	@ (800ccc4 <unixToUtc+0x284>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	4b6e      	ldr	r3, [pc, #440]	@ (800ccc4 <unixToUtc+0x284>)
 800cb0c:	701a      	strb	r2, [r3, #0]
					cnt_temp -= 31536000;
 800cb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb10:	4a6e      	ldr	r2, [pc, #440]	@ (800cccc <unixToUtc+0x28c>)
 800cb12:	4694      	mov	ip, r2
 800cb14:	4463      	add	r3, ip
 800cb16:	62fb      	str	r3, [r7, #44]	@ 0x2c
				}
			}
		}
	}

	if((((UtcTime.year % 4) == 0) && ((UtcTime.year % 100) != 0)) || ((UtcTime.year % 400) == 0))
 800cb18:	4b6a      	ldr	r3, [pc, #424]	@ (800ccc4 <unixToUtc+0x284>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	4013      	ands	r3, r2
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d109      	bne.n	800cb3a <unixToUtc+0xfa>
 800cb26:	4b67      	ldr	r3, [pc, #412]	@ (800ccc4 <unixToUtc+0x284>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2164      	movs	r1, #100	@ 0x64
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f7f3 fb81 	bl	8000234 <__aeabi_uidivmod>
 800cb32:	000b      	movs	r3, r1
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d109      	bne.n	800cb4e <unixToUtc+0x10e>
 800cb3a:	4b62      	ldr	r3, [pc, #392]	@ (800ccc4 <unixToUtc+0x284>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	001a      	movs	r2, r3
 800cb40:	23c8      	movs	r3, #200	@ 0xc8
 800cb42:	0059      	lsls	r1, r3, #1
 800cb44:	0010      	movs	r0, r2
 800cb46:	f7f3 fc5f 	bl	8000408 <__aeabi_idivmod>
 800cb4a:	1e0b      	subs	r3, r1, #0
 800cb4c:	d104      	bne.n	800cb58 <unixToUtc+0x118>
	{
		is_leap_or_flat_year = LEAP_YEAR;
 800cb4e:	232b      	movs	r3, #43	@ 0x2b
 800cb50:	18fb      	adds	r3, r7, r3
 800cb52:	2201      	movs	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
 800cb56:	e003      	b.n	800cb60 <unixToUtc+0x120>
	}
	else
	{
		is_leap_or_flat_year = FLAT_YEAR;
 800cb58:	232b      	movs	r3, #43	@ 0x2b
 800cb5a:	18fb      	adds	r3, r7, r3
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
	}

	day_temp = cnt_temp / 86400;
 800cb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb62:	495d      	ldr	r1, [pc, #372]	@ (800ccd8 <unixToUtc+0x298>)
 800cb64:	0018      	movs	r0, r3
 800cb66:	f7f3 fb69 	bl	800023c <__divsi3>
 800cb6a:	0003      	movs	r3, r0
 800cb6c:	633b      	str	r3, [r7, #48]	@ 0x30

	UtcTime.hour = (cnt_temp - day_temp * 86400) / 3600; //Calculate hours
 800cb6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb70:	0013      	movs	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	189b      	adds	r3, r3, r2
 800cb76:	011a      	lsls	r2, r3, #4
 800cb78:	1ad2      	subs	r2, r2, r3
 800cb7a:	0113      	lsls	r3, r2, #4
 800cb7c:	1a9b      	subs	r3, r3, r2
 800cb7e:	01db      	lsls	r3, r3, #7
 800cb80:	425a      	negs	r2, r3
 800cb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb84:	18d3      	adds	r3, r2, r3
 800cb86:	22e1      	movs	r2, #225	@ 0xe1
 800cb88:	0111      	lsls	r1, r2, #4
 800cb8a:	0018      	movs	r0, r3
 800cb8c:	f7f3 fb56 	bl	800023c <__divsi3>
 800cb90:	0003      	movs	r3, r0
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	4b4b      	ldr	r3, [pc, #300]	@ (800ccc4 <unixToUtc+0x284>)
 800cb96:	70da      	strb	r2, [r3, #3]
	UtcTime.minute = (cnt_temp - day_temp * 86400 - UtcTime.hour * 3600) / 60; //Calculate minutes
 800cb98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb9a:	0013      	movs	r3, r2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	189b      	adds	r3, r3, r2
 800cba0:	011a      	lsls	r2, r3, #4
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	0113      	lsls	r3, r2, #4
 800cba6:	1a9b      	subs	r3, r3, r2
 800cba8:	01db      	lsls	r3, r3, #7
 800cbaa:	425a      	negs	r2, r3
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	18d1      	adds	r1, r2, r3
 800cbb0:	4b44      	ldr	r3, [pc, #272]	@ (800ccc4 <unixToUtc+0x284>)
 800cbb2:	78db      	ldrb	r3, [r3, #3]
 800cbb4:	001a      	movs	r2, r3
 800cbb6:	0013      	movs	r3, r2
 800cbb8:	051b      	lsls	r3, r3, #20
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	189b      	adds	r3, r3, r2
 800cbc0:	015b      	lsls	r3, r3, #5
 800cbc2:	1a9b      	subs	r3, r3, r2
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	18cb      	adds	r3, r1, r3
 800cbc8:	213c      	movs	r1, #60	@ 0x3c
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f7f3 fb36 	bl	800023c <__divsi3>
 800cbd0:	0003      	movs	r3, r0
 800cbd2:	b2da      	uxtb	r2, r3
 800cbd4:	4b3b      	ldr	r3, [pc, #236]	@ (800ccc4 <unixToUtc+0x284>)
 800cbd6:	711a      	strb	r2, [r3, #4]
	UtcTime.second = cnt_temp % 60;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	213c      	movs	r1, #60	@ 0x3c
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f7f3 fc13 	bl	8000408 <__aeabi_idivmod>
 800cbe2:	000b      	movs	r3, r1
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	4b37      	ldr	r3, [pc, #220]	@ (800ccc4 <unixToUtc+0x284>)
 800cbe8:	715a      	strb	r2, [r3, #5]

	UtcTime.month = 1;
 800cbea:	4b36      	ldr	r3, [pc, #216]	@ (800ccc4 <unixToUtc+0x284>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	705a      	strb	r2, [r3, #1]
	for(i = 0; i < 12; i ++)
 800cbf0:	232a      	movs	r3, #42	@ 0x2a
 800cbf2:	18fb      	adds	r3, r7, r3
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	e044      	b.n	800cc84 <unixToUtc+0x244>
	{
		if(is_leap_or_flat_year == FLAT_YEAR)
 800cbfa:	232b      	movs	r3, #43	@ 0x2b
 800cbfc:	18fb      	adds	r3, r7, r3
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d11a      	bne.n	800cc3a <unixToUtc+0x1fa>
		{
			if(day_temp >= flat_year_month_day[i + 1])
 800cc04:	212a      	movs	r1, #42	@ 0x2a
 800cc06:	187b      	adds	r3, r7, r1
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	201c      	movs	r0, #28
 800cc0e:	183a      	adds	r2, r7, r0
 800cc10:	5cd3      	ldrb	r3, [r2, r3]
 800cc12:	001a      	movs	r2, r3
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	4293      	cmp	r3, r2
 800cc18:	db2e      	blt.n	800cc78 <unixToUtc+0x238>
			{
				UtcTime.month ++; day_temp -= flat_year_month_day[i + 1];
 800cc1a:	4b2a      	ldr	r3, [pc, #168]	@ (800ccc4 <unixToUtc+0x284>)
 800cc1c:	785b      	ldrb	r3, [r3, #1]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	4b28      	ldr	r3, [pc, #160]	@ (800ccc4 <unixToUtc+0x284>)
 800cc24:	705a      	strb	r2, [r3, #1]
 800cc26:	187b      	adds	r3, r7, r1
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	183a      	adds	r2, r7, r0
 800cc2e:	5cd3      	ldrb	r3, [r2, r3]
 800cc30:	001a      	movs	r2, r3
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc38:	e01e      	b.n	800cc78 <unixToUtc+0x238>
			}
		}
		else if(is_leap_or_flat_year == LEAP_YEAR)
 800cc3a:	232b      	movs	r3, #43	@ 0x2b
 800cc3c:	18fb      	adds	r3, r7, r3
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d119      	bne.n	800cc78 <unixToUtc+0x238>
		{
			if(day_temp >= leap_year_month_day[i + 1])
 800cc44:	212a      	movs	r1, #42	@ 0x2a
 800cc46:	187b      	adds	r3, r7, r1
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	200c      	movs	r0, #12
 800cc4e:	183a      	adds	r2, r7, r0
 800cc50:	5cd3      	ldrb	r3, [r2, r3]
 800cc52:	001a      	movs	r2, r3
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	4293      	cmp	r3, r2
 800cc58:	db0e      	blt.n	800cc78 <unixToUtc+0x238>
			{
				UtcTime.month ++;
 800cc5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc4 <unixToUtc+0x284>)
 800cc5c:	785b      	ldrb	r3, [r3, #1]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	4b18      	ldr	r3, [pc, #96]	@ (800ccc4 <unixToUtc+0x284>)
 800cc64:	705a      	strb	r2, [r3, #1]
				day_temp -= leap_year_month_day[i + 1];
 800cc66:	187b      	adds	r3, r7, r1
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	183a      	adds	r2, r7, r0
 800cc6e:	5cd3      	ldrb	r3, [r2, r3]
 800cc70:	001a      	movs	r2, r3
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	633b      	str	r3, [r7, #48]	@ 0x30
	for(i = 0; i < 12; i ++)
 800cc78:	212a      	movs	r1, #42	@ 0x2a
 800cc7a:	187b      	adds	r3, r7, r1
 800cc7c:	781a      	ldrb	r2, [r3, #0]
 800cc7e:	187b      	adds	r3, r7, r1
 800cc80:	3201      	adds	r2, #1
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	232a      	movs	r3, #42	@ 0x2a
 800cc86:	18fb      	adds	r3, r7, r3
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b0b      	cmp	r3, #11
 800cc8c:	d9b5      	bls.n	800cbfa <unixToUtc+0x1ba>
			}
		}
	}

	UtcTime.date = day_temp + 1;
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	3301      	adds	r3, #1
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc4 <unixToUtc+0x284>)
 800cc98:	709a      	strb	r2, [r3, #2]

	return UtcTime;
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <unixToUtc+0x284>)
 800cc9e:	0010      	movs	r0, r2
 800cca0:	0019      	movs	r1, r3
 800cca2:	2306      	movs	r3, #6
 800cca4:	001a      	movs	r2, r3
 800cca6:	f00b fcc1 	bl	801862c <memcpy>
}
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	46bd      	mov	sp, r7
 800ccae:	b00f      	add	sp, #60	@ 0x3c
 800ccb0:	bd90      	pop	{r4, r7, pc}
 800ccb2:	46c0      	nop			@ (mov r8, r8)
 800ccb4:	080193bc 	.word	0x080193bc
 800ccb8:	080193cc 	.word	0x080193cc
 800ccbc:	f879e080 	.word	0xf879e080
 800ccc0:	07861f7f 	.word	0x07861f7f
 800ccc4:	20000c78 	.word	0x20000c78
 800ccc8:	01e1337f 	.word	0x01e1337f
 800cccc:	fe1ecc80 	.word	0xfe1ecc80
 800ccd0:	01e284ff 	.word	0x01e284ff
 800ccd4:	fe1d7b00 	.word	0xfe1d7b00
 800ccd8:	00015180 	.word	0x00015180

0800ccdc <utcToUnix>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint32_t utcToUnix(time_tt *time)
{
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b08f      	sub	sp, #60	@ 0x3c
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	uint8_t FlatYearMonthDay[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800cce4:	2318      	movs	r3, #24
 800cce6:	18fb      	adds	r3, r7, r3
 800cce8:	4a84      	ldr	r2, [pc, #528]	@ (800cefc <utcToUnix+0x220>)
 800ccea:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ccec:	c313      	stmia	r3!, {r0, r1, r4}
 800ccee:	7812      	ldrb	r2, [r2, #0]
 800ccf0:	701a      	strb	r2, [r3, #0]
	uint8_t LeapYearMonthDay[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800ccf2:	2308      	movs	r3, #8
 800ccf4:	18fb      	adds	r3, r7, r3
 800ccf6:	4a82      	ldr	r2, [pc, #520]	@ (800cf00 <utcToUnix+0x224>)
 800ccf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ccfa:	c313      	stmia	r3!, {r0, r1, r4}
 800ccfc:	7812      	ldrb	r2, [r2, #0]
 800ccfe:	701a      	strb	r2, [r3, #0]

	uint16_t i;
	uint16_t ThisYear;

	uint16_t LeapYearNumber = 0;
 800cd00:	2332      	movs	r3, #50	@ 0x32
 800cd02:	18fb      	adds	r3, r7, r3
 800cd04:	2200      	movs	r2, #0
 800cd06:	801a      	strh	r2, [r3, #0]
	uint16_t FlatYearNumber = 0;
 800cd08:	2330      	movs	r3, #48	@ 0x30
 800cd0a:	18fb      	adds	r3, r7, r3
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	801a      	strh	r2, [r3, #0]
	uint16_t LastMonDays =  0;
 800cd10:	232e      	movs	r3, #46	@ 0x2e
 800cd12:	18fb      	adds	r3, r7, r3
 800cd14:	2200      	movs	r2, #0
 800cd16:	801a      	strh	r2, [r3, #0]

	uint32_t TimeStamp = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (i = 1970; i < stCurrentTime.year; i ++)
 800cd1c:	2336      	movs	r3, #54	@ 0x36
 800cd1e:	18fb      	adds	r3, r7, r3
 800cd20:	4a78      	ldr	r2, [pc, #480]	@ (800cf04 <utcToUnix+0x228>)
 800cd22:	801a      	strh	r2, [r3, #0]
 800cd24:	e030      	b.n	800cd88 <utcToUnix+0xac>
	{
		if((((i % 4) == 0) && ((i % 100) != 0)) || ((i % 400) == 0))
 800cd26:	2136      	movs	r1, #54	@ 0x36
 800cd28:	187b      	adds	r3, r7, r1
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	2203      	movs	r2, #3
 800cd2e:	4013      	ands	r3, r2
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d109      	bne.n	800cd4a <utcToUnix+0x6e>
 800cd36:	187b      	adds	r3, r7, r1
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	2164      	movs	r1, #100	@ 0x64
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	f7f3 fa79 	bl	8000234 <__aeabi_uidivmod>
 800cd42:	000b      	movs	r3, r1
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10b      	bne.n	800cd62 <utcToUnix+0x86>
 800cd4a:	2336      	movs	r3, #54	@ 0x36
 800cd4c:	18fb      	adds	r3, r7, r3
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	22c8      	movs	r2, #200	@ 0xc8
 800cd52:	0051      	lsls	r1, r2, #1
 800cd54:	0018      	movs	r0, r3
 800cd56:	f7f3 fa6d 	bl	8000234 <__aeabi_uidivmod>
 800cd5a:	000b      	movs	r3, r1
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <utcToUnix+0x94>
		{
			LeapYearNumber ++;
 800cd62:	2132      	movs	r1, #50	@ 0x32
 800cd64:	187b      	adds	r3, r7, r1
 800cd66:	881a      	ldrh	r2, [r3, #0]
 800cd68:	187b      	adds	r3, r7, r1
 800cd6a:	3201      	adds	r2, #1
 800cd6c:	801a      	strh	r2, [r3, #0]
 800cd6e:	e005      	b.n	800cd7c <utcToUnix+0xa0>
		}
		else
		{
			FlatYearNumber ++;
 800cd70:	2130      	movs	r1, #48	@ 0x30
 800cd72:	187b      	adds	r3, r7, r1
 800cd74:	881a      	ldrh	r2, [r3, #0]
 800cd76:	187b      	adds	r3, r7, r1
 800cd78:	3201      	adds	r2, #1
 800cd7a:	801a      	strh	r2, [r3, #0]
	for (i = 1970; i < stCurrentTime.year; i ++)
 800cd7c:	2136      	movs	r1, #54	@ 0x36
 800cd7e:	187b      	adds	r3, r7, r1
 800cd80:	881a      	ldrh	r2, [r3, #0]
 800cd82:	187b      	adds	r3, r7, r1
 800cd84:	3201      	adds	r2, #1
 800cd86:	801a      	strh	r2, [r3, #0]
 800cd88:	4b5f      	ldr	r3, [pc, #380]	@ (800cf08 <utcToUnix+0x22c>)
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	2236      	movs	r2, #54	@ 0x36
 800cd8e:	18ba      	adds	r2, r7, r2
 800cd90:	8812      	ldrh	r2, [r2, #0]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d3c7      	bcc.n	800cd26 <utcToUnix+0x4a>
		}
	}
	TimeStamp = LeapYearNumber * 31622400 + FlatYearNumber * 31536000;
 800cd96:	2332      	movs	r3, #50	@ 0x32
 800cd98:	18fb      	adds	r3, r7, r3
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	4a5b      	ldr	r2, [pc, #364]	@ (800cf0c <utcToUnix+0x230>)
 800cd9e:	435a      	muls	r2, r3
 800cda0:	0011      	movs	r1, r2
 800cda2:	2330      	movs	r3, #48	@ 0x30
 800cda4:	18fb      	adds	r3, r7, r3
 800cda6:	881a      	ldrh	r2, [r3, #0]
 800cda8:	0013      	movs	r3, r2
 800cdaa:	025b      	lsls	r3, r3, #9
 800cdac:	189b      	adds	r3, r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	189b      	adds	r3, r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	189b      	adds	r3, r3, r2
 800cdb6:	011a      	lsls	r2, r3, #4
 800cdb8:	1ad2      	subs	r2, r2, r3
 800cdba:	01d3      	lsls	r3, r2, #7
 800cdbc:	001a      	movs	r2, r3
 800cdbe:	0013      	movs	r3, r2
 800cdc0:	18cb      	adds	r3, r1, r3
 800cdc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	if((((stCurrentTime.year % 4) == 0) && ((stCurrentTime.year % 100) != 0)) || ((stCurrentTime.year % 400) == 0))
 800cdc4:	4b50      	ldr	r3, [pc, #320]	@ (800cf08 <utcToUnix+0x22c>)
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	2203      	movs	r2, #3
 800cdca:	4013      	ands	r3, r2
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d109      	bne.n	800cde6 <utcToUnix+0x10a>
 800cdd2:	4b4d      	ldr	r3, [pc, #308]	@ (800cf08 <utcToUnix+0x22c>)
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	2164      	movs	r1, #100	@ 0x64
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f7f3 fa2b 	bl	8000234 <__aeabi_uidivmod>
 800cdde:	000b      	movs	r3, r1
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <utcToUnix+0x120>
 800cde6:	4b48      	ldr	r3, [pc, #288]	@ (800cf08 <utcToUnix+0x22c>)
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	22c8      	movs	r2, #200	@ 0xc8
 800cdec:	0051      	lsls	r1, r2, #1
 800cdee:	0018      	movs	r0, r3
 800cdf0:	f7f3 fa20 	bl	8000234 <__aeabi_uidivmod>
 800cdf4:	000b      	movs	r3, r1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <utcToUnix+0x12a>
	{
		ThisYear = LEAP_YEAR;
 800cdfc:	2334      	movs	r3, #52	@ 0x34
 800cdfe:	18fb      	adds	r3, r7, r3
 800ce00:	2201      	movs	r2, #1
 800ce02:	801a      	strh	r2, [r3, #0]
 800ce04:	e003      	b.n	800ce0e <utcToUnix+0x132>
	}
	else
	{
		ThisYear = FLAT_YEAR;
 800ce06:	2334      	movs	r3, #52	@ 0x34
 800ce08:	18fb      	adds	r3, r7, r3
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	801a      	strh	r2, [r3, #0]
	}

	for ( i = 1; i < stCurrentTime.month; i ++)
 800ce0e:	2336      	movs	r3, #54	@ 0x36
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	2201      	movs	r2, #1
 800ce14:	801a      	strh	r2, [r3, #0]
 800ce16:	e02a      	b.n	800ce6e <utcToUnix+0x192>
	{
		if(ThisYear == LEAP_YEAR)
 800ce18:	2334      	movs	r3, #52	@ 0x34
 800ce1a:	18fb      	adds	r3, r7, r3
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d10d      	bne.n	800ce3e <utcToUnix+0x162>
		{
			LastMonDays += LeapYearMonthDay[i];
 800ce22:	2336      	movs	r3, #54	@ 0x36
 800ce24:	18fb      	adds	r3, r7, r3
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	2208      	movs	r2, #8
 800ce2a:	18ba      	adds	r2, r7, r2
 800ce2c:	5cd3      	ldrb	r3, [r2, r3]
 800ce2e:	0019      	movs	r1, r3
 800ce30:	222e      	movs	r2, #46	@ 0x2e
 800ce32:	18bb      	adds	r3, r7, r2
 800ce34:	18ba      	adds	r2, r7, r2
 800ce36:	8812      	ldrh	r2, [r2, #0]
 800ce38:	188a      	adds	r2, r1, r2
 800ce3a:	801a      	strh	r2, [r3, #0]
 800ce3c:	e011      	b.n	800ce62 <utcToUnix+0x186>
		}
		else if(ThisYear == FLAT_YEAR)
 800ce3e:	2334      	movs	r3, #52	@ 0x34
 800ce40:	18fb      	adds	r3, r7, r3
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10c      	bne.n	800ce62 <utcToUnix+0x186>
		{
			LastMonDays += FlatYearMonthDay[i];
 800ce48:	2336      	movs	r3, #54	@ 0x36
 800ce4a:	18fb      	adds	r3, r7, r3
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	2218      	movs	r2, #24
 800ce50:	18ba      	adds	r2, r7, r2
 800ce52:	5cd3      	ldrb	r3, [r2, r3]
 800ce54:	0019      	movs	r1, r3
 800ce56:	222e      	movs	r2, #46	@ 0x2e
 800ce58:	18bb      	adds	r3, r7, r2
 800ce5a:	18ba      	adds	r2, r7, r2
 800ce5c:	8812      	ldrh	r2, [r2, #0]
 800ce5e:	188a      	adds	r2, r1, r2
 800ce60:	801a      	strh	r2, [r3, #0]
	for ( i = 1; i < stCurrentTime.month; i ++)
 800ce62:	2136      	movs	r1, #54	@ 0x36
 800ce64:	187b      	adds	r3, r7, r1
 800ce66:	881a      	ldrh	r2, [r3, #0]
 800ce68:	187b      	adds	r3, r7, r1
 800ce6a:	3201      	adds	r2, #1
 800ce6c:	801a      	strh	r2, [r3, #0]
 800ce6e:	4b26      	ldr	r3, [pc, #152]	@ (800cf08 <utcToUnix+0x22c>)
 800ce70:	789b      	ldrb	r3, [r3, #2]
 800ce72:	001a      	movs	r2, r3
 800ce74:	2336      	movs	r3, #54	@ 0x36
 800ce76:	18fb      	adds	r3, r7, r3
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d3cc      	bcc.n	800ce18 <utcToUnix+0x13c>
		}
	}
	LastMonDays = LastMonDays + stCurrentTime.date - 1;
 800ce7e:	4b22      	ldr	r3, [pc, #136]	@ (800cf08 <utcToUnix+0x22c>)
 800ce80:	78db      	ldrb	r3, [r3, #3]
 800ce82:	001a      	movs	r2, r3
 800ce84:	212e      	movs	r1, #46	@ 0x2e
 800ce86:	187b      	adds	r3, r7, r1
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	18d3      	adds	r3, r2, r3
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	187b      	adds	r3, r7, r1
 800ce90:	3a01      	subs	r2, #1
 800ce92:	801a      	strh	r2, [r3, #0]
	TimeStamp += LastMonDays * 86400;
 800ce94:	187b      	adds	r3, r7, r1
 800ce96:	881a      	ldrh	r2, [r3, #0]
 800ce98:	0013      	movs	r3, r2
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	189b      	adds	r3, r3, r2
 800ce9e:	011a      	lsls	r2, r3, #4
 800cea0:	1ad2      	subs	r2, r2, r3
 800cea2:	0113      	lsls	r3, r2, #4
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	01db      	lsls	r3, r3, #7
 800cea8:	001a      	movs	r2, r3
 800ceaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceac:	189b      	adds	r3, r3, r2
 800ceae:	62bb      	str	r3, [r7, #40]	@ 0x28

	TimeStamp += stCurrentTime.hour * 3600;
 800ceb0:	4b15      	ldr	r3, [pc, #84]	@ (800cf08 <utcToUnix+0x22c>)
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	001a      	movs	r2, r3
 800ceb6:	0013      	movs	r3, r2
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	1a9b      	subs	r3, r3, r2
 800cebc:	011a      	lsls	r2, r3, #4
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	0113      	lsls	r3, r2, #4
 800cec2:	001a      	movs	r2, r3
 800cec4:	0013      	movs	r3, r2
 800cec6:	001a      	movs	r2, r3
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	189b      	adds	r3, r3, r2
 800cecc:	62bb      	str	r3, [r7, #40]	@ 0x28
	TimeStamp += stCurrentTime.minute * 60;
 800cece:	4b0e      	ldr	r3, [pc, #56]	@ (800cf08 <utcToUnix+0x22c>)
 800ced0:	795b      	ldrb	r3, [r3, #5]
 800ced2:	001a      	movs	r2, r3
 800ced4:	0013      	movs	r3, r2
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	001a      	movs	r2, r3
 800cede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee0:	189b      	adds	r3, r3, r2
 800cee2:	62bb      	str	r3, [r7, #40]	@ 0x28
	TimeStamp += stCurrentTime.second;
 800cee4:	4b08      	ldr	r3, [pc, #32]	@ (800cf08 <utcToUnix+0x22c>)
 800cee6:	799b      	ldrb	r3, [r3, #6]
 800cee8:	001a      	movs	r2, r3
 800ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceec:	189b      	adds	r3, r3, r2
 800ceee:	62bb      	str	r3, [r7, #40]	@ 0x28

	return TimeStamp;
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800cef2:	0018      	movs	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	b00f      	add	sp, #60	@ 0x3c
 800cef8:	bd90      	pop	{r4, r7, pc}
 800cefa:	46c0      	nop			@ (mov r8, r8)
 800cefc:	080193bc 	.word	0x080193bc
 800cf00:	080193cc 	.word	0x080193cc
 800cf04:	000007b2 	.word	0x000007b2
 800cf08:	20000c84 	.word	0x20000c84
 800cf0c:	01e28500 	.word	0x01e28500

0800cf10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf16:	4b11      	ldr	r3, [pc, #68]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf1a:	4b10      	ldr	r3, [pc, #64]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf1c:	2101      	movs	r1, #1
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	641a      	str	r2, [r3, #64]	@ 0x40
 800cf22:	4b0e      	ldr	r3, [pc, #56]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf26:	2201      	movs	r2, #1
 800cf28:	4013      	ands	r3, r2
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cf2e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf32:	4b0a      	ldr	r3, [pc, #40]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf34:	2180      	movs	r1, #128	@ 0x80
 800cf36:	0549      	lsls	r1, r1, #21
 800cf38:	430a      	orrs	r2, r1
 800cf3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800cf3c:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <HAL_MspInit+0x4c>)
 800cf3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf40:	2380      	movs	r3, #128	@ 0x80
 800cf42:	055b      	lsls	r3, r3, #21
 800cf44:	4013      	ands	r3, r2
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800cf4a:	23c0      	movs	r3, #192	@ 0xc0
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f000 fd86 	bl	800da60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cf54:	46c0      	nop			@ (mov r8, r8)
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b002      	add	sp, #8
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	40021000 	.word	0x40021000

0800cf60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b099      	sub	sp, #100	@ 0x64
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf68:	234c      	movs	r3, #76	@ 0x4c
 800cf6a:	18fb      	adds	r3, r7, r3
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	2314      	movs	r3, #20
 800cf70:	001a      	movs	r2, r3
 800cf72:	2100      	movs	r1, #0
 800cf74:	f00b fb26 	bl	80185c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cf78:	2418      	movs	r4, #24
 800cf7a:	193b      	adds	r3, r7, r4
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	2334      	movs	r3, #52	@ 0x34
 800cf80:	001a      	movs	r2, r3
 800cf82:	2100      	movs	r1, #0
 800cf84:	f00b fb1e 	bl	80185c4 <memset>
  if(hi2c->Instance==I2C1)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a42      	ldr	r2, [pc, #264]	@ (800d098 <HAL_I2C_MspInit+0x138>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d148      	bne.n	800d024 <HAL_I2C_MspInit+0xc4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800cf92:	193b      	adds	r3, r7, r4
 800cf94:	2220      	movs	r2, #32
 800cf96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800cf98:	193b      	adds	r3, r7, r4
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cf9e:	193b      	adds	r3, r7, r4
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f003 ff2b 	bl	8010dfc <HAL_RCCEx_PeriphCLKConfig>
 800cfa6:	1e03      	subs	r3, r0, #0
 800cfa8:	d001      	beq.n	800cfae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800cfaa:	f7ff fb55 	bl	800c658 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfae:	4b3b      	ldr	r3, [pc, #236]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800cfb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfb2:	4b3a      	ldr	r3, [pc, #232]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800cfb4:	2101      	movs	r1, #1
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	635a      	str	r2, [r3, #52]	@ 0x34
 800cfba:	4b38      	ldr	r3, [pc, #224]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]
 800cfc4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cfc6:	214c      	movs	r1, #76	@ 0x4c
 800cfc8:	187b      	adds	r3, r7, r1
 800cfca:	22c0      	movs	r2, #192	@ 0xc0
 800cfcc:	00d2      	lsls	r2, r2, #3
 800cfce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cfd0:	187b      	adds	r3, r7, r1
 800cfd2:	2212      	movs	r2, #18
 800cfd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfd6:	187b      	adds	r3, r7, r1
 800cfd8:	2200      	movs	r2, #0
 800cfda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfdc:	187b      	adds	r3, r7, r1
 800cfde:	2200      	movs	r2, #0
 800cfe0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800cfe2:	187b      	adds	r3, r7, r1
 800cfe4:	2206      	movs	r2, #6
 800cfe6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfe8:	187a      	adds	r2, r7, r1
 800cfea:	23a0      	movs	r3, #160	@ 0xa0
 800cfec:	05db      	lsls	r3, r3, #23
 800cfee:	0011      	movs	r1, r2
 800cff0:	0018      	movs	r0, r3
 800cff2:	f001 f95d 	bl	800e2b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cff6:	4b29      	ldr	r3, [pc, #164]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800cff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cffa:	4b28      	ldr	r3, [pc, #160]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800cffc:	2180      	movs	r1, #128	@ 0x80
 800cffe:	0389      	lsls	r1, r1, #14
 800d000:	430a      	orrs	r2, r1
 800d002:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d004:	4b25      	ldr	r3, [pc, #148]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d008:	2380      	movs	r3, #128	@ 0x80
 800d00a:	039b      	lsls	r3, r3, #14
 800d00c:	4013      	ands	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]
 800d010:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800d012:	2200      	movs	r2, #0
 800d014:	2100      	movs	r1, #0
 800d016:	2017      	movs	r0, #23
 800d018:	f000 fde4 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800d01c:	2017      	movs	r0, #23
 800d01e:	f000 fdf6 	bl	800dc0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d022:	e035      	b.n	800d090 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a1d      	ldr	r2, [pc, #116]	@ (800d0a0 <HAL_I2C_MspInit+0x140>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d130      	bne.n	800d090 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d02e:	4b1b      	ldr	r3, [pc, #108]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d032:	4b1a      	ldr	r3, [pc, #104]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d034:	2102      	movs	r1, #2
 800d036:	430a      	orrs	r2, r1
 800d038:	635a      	str	r2, [r3, #52]	@ 0x34
 800d03a:	4b18      	ldr	r3, [pc, #96]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03e:	2202      	movs	r2, #2
 800d040:	4013      	ands	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d046:	214c      	movs	r1, #76	@ 0x4c
 800d048:	187b      	adds	r3, r7, r1
 800d04a:	22c0      	movs	r2, #192	@ 0xc0
 800d04c:	0112      	lsls	r2, r2, #4
 800d04e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d050:	187b      	adds	r3, r7, r1
 800d052:	2212      	movs	r2, #18
 800d054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d056:	187b      	adds	r3, r7, r1
 800d058:	2200      	movs	r2, #0
 800d05a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d05c:	187b      	adds	r3, r7, r1
 800d05e:	2200      	movs	r2, #0
 800d060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800d062:	187b      	adds	r3, r7, r1
 800d064:	2206      	movs	r2, #6
 800d066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d068:	187b      	adds	r3, r7, r1
 800d06a:	4a0e      	ldr	r2, [pc, #56]	@ (800d0a4 <HAL_I2C_MspInit+0x144>)
 800d06c:	0019      	movs	r1, r3
 800d06e:	0010      	movs	r0, r2
 800d070:	f001 f91e 	bl	800e2b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d074:	4b09      	ldr	r3, [pc, #36]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d078:	4b08      	ldr	r3, [pc, #32]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d07a:	2180      	movs	r1, #128	@ 0x80
 800d07c:	03c9      	lsls	r1, r1, #15
 800d07e:	430a      	orrs	r2, r1
 800d080:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d082:	4b06      	ldr	r3, [pc, #24]	@ (800d09c <HAL_I2C_MspInit+0x13c>)
 800d084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d086:	2380      	movs	r3, #128	@ 0x80
 800d088:	03db      	lsls	r3, r3, #15
 800d08a:	4013      	ands	r3, r2
 800d08c:	60bb      	str	r3, [r7, #8]
 800d08e:	68bb      	ldr	r3, [r7, #8]
}
 800d090:	46c0      	nop			@ (mov r8, r8)
 800d092:	46bd      	mov	sp, r7
 800d094:	b019      	add	sp, #100	@ 0x64
 800d096:	bd90      	pop	{r4, r7, pc}
 800d098:	40005400 	.word	0x40005400
 800d09c:	40021000 	.word	0x40021000
 800d0a0:	40005800 	.word	0x40005800
 800d0a4:	50000400 	.word	0x50000400

0800d0a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b0a1      	sub	sp, #132	@ 0x84
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0b0:	236c      	movs	r3, #108	@ 0x6c
 800d0b2:	18fb      	adds	r3, r7, r3
 800d0b4:	0018      	movs	r0, r3
 800d0b6:	2314      	movs	r3, #20
 800d0b8:	001a      	movs	r2, r3
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	f00b fa82 	bl	80185c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0c0:	2438      	movs	r4, #56	@ 0x38
 800d0c2:	193b      	adds	r3, r7, r4
 800d0c4:	0018      	movs	r0, r3
 800d0c6:	2334      	movs	r3, #52	@ 0x34
 800d0c8:	001a      	movs	r2, r3
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	f00b fa7a 	bl	80185c4 <memset>
  if(huart->Instance==LPUART1)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4ad4      	ldr	r2, [pc, #848]	@ (800d428 <HAL_UART_MspInit+0x380>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d147      	bne.n	800d16a <HAL_UART_MspInit+0xc2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800d0da:	193b      	adds	r3, r7, r4
 800d0dc:	2210      	movs	r2, #16
 800d0de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800d0e0:	193b      	adds	r3, r7, r4
 800d0e2:	2280      	movs	r2, #128	@ 0x80
 800d0e4:	0112      	lsls	r2, r2, #4
 800d0e6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d0e8:	193b      	adds	r3, r7, r4
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	f003 fe86 	bl	8010dfc <HAL_RCCEx_PeriphCLKConfig>
 800d0f0:	1e03      	subs	r3, r0, #0
 800d0f2:	d001      	beq.n	800d0f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800d0f4:	f7ff fab0 	bl	800c658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d0f8:	4bcc      	ldr	r3, [pc, #816]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d0fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0fc:	4bcb      	ldr	r3, [pc, #812]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d0fe:	2180      	movs	r1, #128	@ 0x80
 800d100:	0349      	lsls	r1, r1, #13
 800d102:	430a      	orrs	r2, r1
 800d104:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d106:	4bc9      	ldr	r3, [pc, #804]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d10a:	2380      	movs	r3, #128	@ 0x80
 800d10c:	035b      	lsls	r3, r3, #13
 800d10e:	4013      	ands	r3, r2
 800d110:	637b      	str	r3, [r7, #52]	@ 0x34
 800d112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d114:	4bc5      	ldr	r3, [pc, #788]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d118:	4bc4      	ldr	r3, [pc, #784]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d11a:	2104      	movs	r1, #4
 800d11c:	430a      	orrs	r2, r1
 800d11e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d120:	4bc2      	ldr	r3, [pc, #776]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d124:	2204      	movs	r2, #4
 800d126:	4013      	ands	r3, r2
 800d128:	633b      	str	r3, [r7, #48]	@ 0x30
 800d12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d12c:	216c      	movs	r1, #108	@ 0x6c
 800d12e:	187b      	adds	r3, r7, r1
 800d130:	2203      	movs	r2, #3
 800d132:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d134:	187b      	adds	r3, r7, r1
 800d136:	2202      	movs	r2, #2
 800d138:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d13a:	187b      	adds	r3, r7, r1
 800d13c:	2200      	movs	r2, #0
 800d13e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d140:	187b      	adds	r3, r7, r1
 800d142:	2200      	movs	r2, #0
 800d144:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 800d146:	187b      	adds	r3, r7, r1
 800d148:	2201      	movs	r2, #1
 800d14a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d14c:	187b      	adds	r3, r7, r1
 800d14e:	4ab8      	ldr	r2, [pc, #736]	@ (800d430 <HAL_UART_MspInit+0x388>)
 800d150:	0019      	movs	r1, r3
 800d152:	0010      	movs	r0, r2
 800d154:	f001 f8ac 	bl	800e2b0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800d158:	2200      	movs	r2, #0
 800d15a:	2102      	movs	r1, #2
 800d15c:	201d      	movs	r0, #29
 800d15e:	f000 fd41 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800d162:	201d      	movs	r0, #29
 800d164:	f000 fd53 	bl	800dc0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800d168:	e15a      	b.n	800d420 <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART1)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4ab1      	ldr	r2, [pc, #708]	@ (800d434 <HAL_UART_MspInit+0x38c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d168      	bne.n	800d246 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800d174:	2138      	movs	r1, #56	@ 0x38
 800d176:	187b      	adds	r3, r7, r1
 800d178:	2201      	movs	r2, #1
 800d17a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800d17c:	187b      	adds	r3, r7, r1
 800d17e:	2200      	movs	r2, #0
 800d180:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d182:	187b      	adds	r3, r7, r1
 800d184:	0018      	movs	r0, r3
 800d186:	f003 fe39 	bl	8010dfc <HAL_RCCEx_PeriphCLKConfig>
 800d18a:	1e03      	subs	r3, r0, #0
 800d18c:	d001      	beq.n	800d192 <HAL_UART_MspInit+0xea>
      Error_Handler();
 800d18e:	f7ff fa63 	bl	800c658 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d192:	4ba6      	ldr	r3, [pc, #664]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d196:	4ba5      	ldr	r3, [pc, #660]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d198:	2180      	movs	r1, #128	@ 0x80
 800d19a:	01c9      	lsls	r1, r1, #7
 800d19c:	430a      	orrs	r2, r1
 800d19e:	641a      	str	r2, [r3, #64]	@ 0x40
 800d1a0:	4ba2      	ldr	r3, [pc, #648]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d1a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d1a4:	2380      	movs	r3, #128	@ 0x80
 800d1a6:	01db      	lsls	r3, r3, #7
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1ae:	4b9f      	ldr	r3, [pc, #636]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d1b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1b2:	4b9e      	ldr	r3, [pc, #632]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d1b4:	2104      	movs	r1, #4
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800d1ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1be:	2204      	movs	r2, #4
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800d1c6:	216c      	movs	r1, #108	@ 0x6c
 800d1c8:	187b      	adds	r3, r7, r1
 800d1ca:	2230      	movs	r2, #48	@ 0x30
 800d1cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ce:	187b      	adds	r3, r7, r1
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1d4:	187b      	adds	r3, r7, r1
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1da:	187b      	adds	r3, r7, r1
 800d1dc:	2200      	movs	r2, #0
 800d1de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800d1e0:	187b      	adds	r3, r7, r1
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d1e6:	187b      	adds	r3, r7, r1
 800d1e8:	4a91      	ldr	r2, [pc, #580]	@ (800d430 <HAL_UART_MspInit+0x388>)
 800d1ea:	0019      	movs	r1, r3
 800d1ec:	0010      	movs	r0, r2
 800d1ee:	f001 f85f 	bl	800e2b0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800d1f2:	4b91      	ldr	r3, [pc, #580]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d1f4:	4a91      	ldr	r2, [pc, #580]	@ (800d43c <HAL_UART_MspInit+0x394>)
 800d1f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800d1f8:	4b8f      	ldr	r3, [pc, #572]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d1fa:	2232      	movs	r2, #50	@ 0x32
 800d1fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d1fe:	4b8e      	ldr	r3, [pc, #568]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d200:	2200      	movs	r2, #0
 800d202:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d204:	4b8c      	ldr	r3, [pc, #560]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d206:	2200      	movs	r2, #0
 800d208:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d20a:	4b8b      	ldr	r3, [pc, #556]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d20c:	2280      	movs	r2, #128	@ 0x80
 800d20e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d210:	4b89      	ldr	r3, [pc, #548]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d212:	2200      	movs	r2, #0
 800d214:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d216:	4b88      	ldr	r3, [pc, #544]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d218:	2200      	movs	r2, #0
 800d21a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800d21c:	4b86      	ldr	r3, [pc, #536]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d21e:	2220      	movs	r2, #32
 800d220:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d222:	4b85      	ldr	r3, [pc, #532]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d224:	2200      	movs	r2, #0
 800d226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d228:	4b83      	ldr	r3, [pc, #524]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d22a:	0018      	movs	r0, r3
 800d22c:	f000 fd0c 	bl	800dc48 <HAL_DMA_Init>
 800d230:	1e03      	subs	r3, r0, #0
 800d232:	d001      	beq.n	800d238 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800d234:	f7ff fa10 	bl	800c658 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a7f      	ldr	r2, [pc, #508]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d23c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800d23e:	4b7e      	ldr	r3, [pc, #504]	@ (800d438 <HAL_UART_MspInit+0x390>)
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d244:	e0ec      	b.n	800d420 <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART2)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a7d      	ldr	r2, [pc, #500]	@ (800d440 <HAL_UART_MspInit+0x398>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d148      	bne.n	800d2e2 <HAL_UART_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800d250:	2138      	movs	r1, #56	@ 0x38
 800d252:	187b      	adds	r3, r7, r1
 800d254:	2202      	movs	r2, #2
 800d256:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800d258:	187b      	adds	r3, r7, r1
 800d25a:	2200      	movs	r2, #0
 800d25c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d25e:	187b      	adds	r3, r7, r1
 800d260:	0018      	movs	r0, r3
 800d262:	f003 fdcb 	bl	8010dfc <HAL_RCCEx_PeriphCLKConfig>
 800d266:	1e03      	subs	r3, r0, #0
 800d268:	d001      	beq.n	800d26e <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 800d26a:	f7ff f9f5 	bl	800c658 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d26e:	4b6f      	ldr	r3, [pc, #444]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d272:	4b6e      	ldr	r3, [pc, #440]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d274:	2180      	movs	r1, #128	@ 0x80
 800d276:	0289      	lsls	r1, r1, #10
 800d278:	430a      	orrs	r2, r1
 800d27a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d27c:	4b6b      	ldr	r3, [pc, #428]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d27e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d280:	2380      	movs	r3, #128	@ 0x80
 800d282:	029b      	lsls	r3, r3, #10
 800d284:	4013      	ands	r3, r2
 800d286:	627b      	str	r3, [r7, #36]	@ 0x24
 800d288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d28a:	4b68      	ldr	r3, [pc, #416]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d28c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d28e:	4b67      	ldr	r3, [pc, #412]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d290:	2101      	movs	r1, #1
 800d292:	430a      	orrs	r2, r1
 800d294:	635a      	str	r2, [r3, #52]	@ 0x34
 800d296:	4b65      	ldr	r3, [pc, #404]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d29a:	2201      	movs	r2, #1
 800d29c:	4013      	ands	r3, r2
 800d29e:	623b      	str	r3, [r7, #32]
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d2a2:	216c      	movs	r1, #108	@ 0x6c
 800d2a4:	187b      	adds	r3, r7, r1
 800d2a6:	220c      	movs	r2, #12
 800d2a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2aa:	187b      	adds	r3, r7, r1
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b0:	187b      	adds	r3, r7, r1
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2b6:	187b      	adds	r3, r7, r1
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d2bc:	187b      	adds	r3, r7, r1
 800d2be:	2201      	movs	r2, #1
 800d2c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2c2:	187a      	adds	r2, r7, r1
 800d2c4:	23a0      	movs	r3, #160	@ 0xa0
 800d2c6:	05db      	lsls	r3, r3, #23
 800d2c8:	0011      	movs	r1, r2
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f000 fff0 	bl	800e2b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2102      	movs	r1, #2
 800d2d4:	201c      	movs	r0, #28
 800d2d6:	f000 fc85 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d2da:	201c      	movs	r0, #28
 800d2dc:	f000 fc97 	bl	800dc0e <HAL_NVIC_EnableIRQ>
}
 800d2e0:	e09e      	b.n	800d420 <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART3)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a57      	ldr	r2, [pc, #348]	@ (800d444 <HAL_UART_MspInit+0x39c>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d15b      	bne.n	800d3a4 <HAL_UART_MspInit+0x2fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d2ec:	4b4f      	ldr	r3, [pc, #316]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d2ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2f0:	4b4e      	ldr	r3, [pc, #312]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d2f2:	2180      	movs	r1, #128	@ 0x80
 800d2f4:	02c9      	lsls	r1, r1, #11
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d2fa:	4b4c      	ldr	r3, [pc, #304]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d2fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2fe:	2380      	movs	r3, #128	@ 0x80
 800d300:	02db      	lsls	r3, r3, #11
 800d302:	4013      	ands	r3, r2
 800d304:	61fb      	str	r3, [r7, #28]
 800d306:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d308:	4b48      	ldr	r3, [pc, #288]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d30a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d30c:	4b47      	ldr	r3, [pc, #284]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d30e:	2101      	movs	r1, #1
 800d310:	430a      	orrs	r2, r1
 800d312:	635a      	str	r2, [r3, #52]	@ 0x34
 800d314:	4b45      	ldr	r3, [pc, #276]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d318:	2201      	movs	r2, #1
 800d31a:	4013      	ands	r3, r2
 800d31c:	61bb      	str	r3, [r7, #24]
 800d31e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d320:	4b42      	ldr	r3, [pc, #264]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d324:	4b41      	ldr	r3, [pc, #260]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d326:	2102      	movs	r1, #2
 800d328:	430a      	orrs	r2, r1
 800d32a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d32c:	4b3f      	ldr	r3, [pc, #252]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d330:	2202      	movs	r2, #2
 800d332:	4013      	ands	r3, r2
 800d334:	617b      	str	r3, [r7, #20]
 800d336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d338:	246c      	movs	r4, #108	@ 0x6c
 800d33a:	193b      	adds	r3, r7, r4
 800d33c:	2220      	movs	r2, #32
 800d33e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d340:	193b      	adds	r3, r7, r4
 800d342:	2202      	movs	r2, #2
 800d344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d346:	193b      	adds	r3, r7, r4
 800d348:	2200      	movs	r2, #0
 800d34a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d34c:	193b      	adds	r3, r7, r4
 800d34e:	2200      	movs	r2, #0
 800d350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800d352:	193b      	adds	r3, r7, r4
 800d354:	2204      	movs	r2, #4
 800d356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d358:	193a      	adds	r2, r7, r4
 800d35a:	23a0      	movs	r3, #160	@ 0xa0
 800d35c:	05db      	lsls	r3, r3, #23
 800d35e:	0011      	movs	r1, r2
 800d360:	0018      	movs	r0, r3
 800d362:	f000 ffa5 	bl	800e2b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d366:	0021      	movs	r1, r4
 800d368:	187b      	adds	r3, r7, r1
 800d36a:	2201      	movs	r2, #1
 800d36c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d36e:	187b      	adds	r3, r7, r1
 800d370:	2202      	movs	r2, #2
 800d372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d374:	187b      	adds	r3, r7, r1
 800d376:	2200      	movs	r2, #0
 800d378:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d37a:	187b      	adds	r3, r7, r1
 800d37c:	2200      	movs	r2, #0
 800d37e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800d380:	187b      	adds	r3, r7, r1
 800d382:	2204      	movs	r2, #4
 800d384:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d386:	187b      	adds	r3, r7, r1
 800d388:	4a2f      	ldr	r2, [pc, #188]	@ (800d448 <HAL_UART_MspInit+0x3a0>)
 800d38a:	0019      	movs	r1, r3
 800d38c:	0010      	movs	r0, r2
 800d38e:	f000 ff8f 	bl	800e2b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800d392:	2200      	movs	r2, #0
 800d394:	2102      	movs	r1, #2
 800d396:	201d      	movs	r0, #29
 800d398:	f000 fc24 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800d39c:	201d      	movs	r0, #29
 800d39e:	f000 fc36 	bl	800dc0e <HAL_NVIC_EnableIRQ>
}
 800d3a2:	e03d      	b.n	800d420 <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART4)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a28      	ldr	r2, [pc, #160]	@ (800d44c <HAL_UART_MspInit+0x3a4>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d138      	bne.n	800d420 <HAL_UART_MspInit+0x378>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d3ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3b4:	2180      	movs	r1, #128	@ 0x80
 800d3b6:	0309      	lsls	r1, r1, #12
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d3bc:	4b1b      	ldr	r3, [pc, #108]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3c0:	2380      	movs	r3, #128	@ 0x80
 800d3c2:	031b      	lsls	r3, r3, #12
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	613b      	str	r3, [r7, #16]
 800d3c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3ca:	4b18      	ldr	r3, [pc, #96]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3ce:	4b17      	ldr	r3, [pc, #92]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3d0:	2104      	movs	r1, #4
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	635a      	str	r2, [r3, #52]	@ 0x34
 800d3d6:	4b15      	ldr	r3, [pc, #84]	@ (800d42c <HAL_UART_MspInit+0x384>)
 800d3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3da:	2204      	movs	r2, #4
 800d3dc:	4013      	ands	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800d3e2:	216c      	movs	r1, #108	@ 0x6c
 800d3e4:	187b      	adds	r3, r7, r1
 800d3e6:	22c0      	movs	r2, #192	@ 0xc0
 800d3e8:	0112      	lsls	r2, r2, #4
 800d3ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3ec:	187b      	adds	r3, r7, r1
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3f8:	187b      	adds	r3, r7, r1
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 800d3fe:	187b      	adds	r3, r7, r1
 800d400:	2201      	movs	r2, #1
 800d402:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d404:	187b      	adds	r3, r7, r1
 800d406:	4a0a      	ldr	r2, [pc, #40]	@ (800d430 <HAL_UART_MspInit+0x388>)
 800d408:	0019      	movs	r1, r3
 800d40a:	0010      	movs	r0, r2
 800d40c:	f000 ff50 	bl	800e2b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800d410:	2200      	movs	r2, #0
 800d412:	2102      	movs	r1, #2
 800d414:	201d      	movs	r0, #29
 800d416:	f000 fbe5 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800d41a:	201d      	movs	r0, #29
 800d41c:	f000 fbf7 	bl	800dc0e <HAL_NVIC_EnableIRQ>
}
 800d420:	46c0      	nop			@ (mov r8, r8)
 800d422:	46bd      	mov	sp, r7
 800d424:	b021      	add	sp, #132	@ 0x84
 800d426:	bd90      	pop	{r4, r7, pc}
 800d428:	40008000 	.word	0x40008000
 800d42c:	40021000 	.word	0x40021000
 800d430:	50000800 	.word	0x50000800
 800d434:	40013800 	.word	0x40013800
 800d438:	2000088c 	.word	0x2000088c
 800d43c:	40020008 	.word	0x40020008
 800d440:	40004400 	.word	0x40004400
 800d444:	40004800 	.word	0x40004800
 800d448:	50000400 	.word	0x50000400
 800d44c:	40004c00 	.word	0x40004c00

0800d450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d450:	b590      	push	{r4, r7, lr}
 800d452:	b08b      	sub	sp, #44	@ 0x2c
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d458:	2414      	movs	r4, #20
 800d45a:	193b      	adds	r3, r7, r4
 800d45c:	0018      	movs	r0, r3
 800d45e:	2314      	movs	r3, #20
 800d460:	001a      	movs	r2, r3
 800d462:	2100      	movs	r1, #0
 800d464:	f00b f8ae 	bl	80185c4 <memset>
  if(hspi->Instance==SPI1)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a1f      	ldr	r2, [pc, #124]	@ (800d4ec <HAL_SPI_MspInit+0x9c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d138      	bne.n	800d4e4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d472:	4b1f      	ldr	r3, [pc, #124]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d476:	4b1e      	ldr	r3, [pc, #120]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d478:	2180      	movs	r1, #128	@ 0x80
 800d47a:	0149      	lsls	r1, r1, #5
 800d47c:	430a      	orrs	r2, r1
 800d47e:	641a      	str	r2, [r3, #64]	@ 0x40
 800d480:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d484:	2380      	movs	r3, #128	@ 0x80
 800d486:	015b      	lsls	r3, r3, #5
 800d488:	4013      	ands	r3, r2
 800d48a:	613b      	str	r3, [r7, #16]
 800d48c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d48e:	4b18      	ldr	r3, [pc, #96]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d492:	4b17      	ldr	r3, [pc, #92]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d494:	2101      	movs	r1, #1
 800d496:	430a      	orrs	r2, r1
 800d498:	635a      	str	r2, [r3, #52]	@ 0x34
 800d49a:	4b15      	ldr	r3, [pc, #84]	@ (800d4f0 <HAL_SPI_MspInit+0xa0>)
 800d49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d49e:	2201      	movs	r2, #1
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800d4a6:	0021      	movs	r1, r4
 800d4a8:	187b      	adds	r3, r7, r1
 800d4aa:	22c2      	movs	r2, #194	@ 0xc2
 800d4ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ae:	187b      	adds	r3, r7, r1
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4b4:	187b      	adds	r3, r7, r1
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4ba:	187b      	adds	r3, r7, r1
 800d4bc:	2200      	movs	r2, #0
 800d4be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800d4c0:	187b      	adds	r3, r7, r1
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4c6:	187a      	adds	r2, r7, r1
 800d4c8:	23a0      	movs	r3, #160	@ 0xa0
 800d4ca:	05db      	lsls	r3, r3, #23
 800d4cc:	0011      	movs	r1, r2
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	f000 feee 	bl	800e2b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	2019      	movs	r0, #25
 800d4da:	f000 fb83 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800d4de:	2019      	movs	r0, #25
 800d4e0:	f000 fb95 	bl	800dc0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d4e4:	46c0      	nop			@ (mov r8, r8)
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	b00b      	add	sp, #44	@ 0x2c
 800d4ea:	bd90      	pop	{r4, r7, pc}
 800d4ec:	40013000 	.word	0x40013000
 800d4f0:	40021000 	.word	0x40021000

0800d4f4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800d4f4:	b590      	push	{r4, r7, lr}
 800d4f6:	b099      	sub	sp, #100	@ 0x64
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4fc:	234c      	movs	r3, #76	@ 0x4c
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	0018      	movs	r0, r3
 800d502:	2314      	movs	r3, #20
 800d504:	001a      	movs	r2, r3
 800d506:	2100      	movs	r1, #0
 800d508:	f00b f85c 	bl	80185c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d50c:	2418      	movs	r4, #24
 800d50e:	193b      	adds	r3, r7, r4
 800d510:	0018      	movs	r0, r3
 800d512:	2334      	movs	r3, #52	@ 0x34
 800d514:	001a      	movs	r2, r3
 800d516:	2100      	movs	r1, #0
 800d518:	f00b f854 	bl	80185c4 <memset>
  if(htim_ic->Instance==TIM1)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a46      	ldr	r2, [pc, #280]	@ (800d63c <HAL_TIM_IC_MspInit+0x148>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d148      	bne.n	800d5b8 <HAL_TIM_IC_MspInit+0xc4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800d526:	193b      	adds	r3, r7, r4
 800d528:	2280      	movs	r2, #128	@ 0x80
 800d52a:	0392      	lsls	r2, r2, #14
 800d52c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800d52e:	193b      	adds	r3, r7, r4
 800d530:	2200      	movs	r2, #0
 800d532:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d534:	193b      	adds	r3, r7, r4
 800d536:	0018      	movs	r0, r3
 800d538:	f003 fc60 	bl	8010dfc <HAL_RCCEx_PeriphCLKConfig>
 800d53c:	1e03      	subs	r3, r0, #0
 800d53e:	d001      	beq.n	800d544 <HAL_TIM_IC_MspInit+0x50>
    {
      Error_Handler();
 800d540:	f7ff f88a 	bl	800c658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d544:	4b3e      	ldr	r3, [pc, #248]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d548:	4b3d      	ldr	r3, [pc, #244]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d54a:	2180      	movs	r1, #128	@ 0x80
 800d54c:	0109      	lsls	r1, r1, #4
 800d54e:	430a      	orrs	r2, r1
 800d550:	641a      	str	r2, [r3, #64]	@ 0x40
 800d552:	4b3b      	ldr	r3, [pc, #236]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d556:	2380      	movs	r3, #128	@ 0x80
 800d558:	011b      	lsls	r3, r3, #4
 800d55a:	4013      	ands	r3, r2
 800d55c:	617b      	str	r3, [r7, #20]
 800d55e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d560:	4b37      	ldr	r3, [pc, #220]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d564:	4b36      	ldr	r3, [pc, #216]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d566:	2104      	movs	r1, #4
 800d568:	430a      	orrs	r2, r1
 800d56a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d56c:	4b34      	ldr	r3, [pc, #208]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d56e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d570:	2204      	movs	r2, #4
 800d572:	4013      	ands	r3, r2
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800d578:	214c      	movs	r1, #76	@ 0x4c
 800d57a:	187b      	adds	r3, r7, r1
 800d57c:	2280      	movs	r2, #128	@ 0x80
 800d57e:	0052      	lsls	r2, r2, #1
 800d580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d582:	187b      	adds	r3, r7, r1
 800d584:	2202      	movs	r2, #2
 800d586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d588:	187b      	adds	r3, r7, r1
 800d58a:	2200      	movs	r2, #0
 800d58c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d58e:	187b      	adds	r3, r7, r1
 800d590:	2200      	movs	r2, #0
 800d592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800d594:	187b      	adds	r3, r7, r1
 800d596:	2202      	movs	r2, #2
 800d598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d59a:	187b      	adds	r3, r7, r1
 800d59c:	4a29      	ldr	r2, [pc, #164]	@ (800d644 <HAL_TIM_IC_MspInit+0x150>)
 800d59e:	0019      	movs	r1, r3
 800d5a0:	0010      	movs	r0, r2
 800d5a2:	f000 fe85 	bl	800e2b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	200e      	movs	r0, #14
 800d5ac:	f000 fb1a 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800d5b0:	200e      	movs	r0, #14
 800d5b2:	f000 fb2c 	bl	800dc0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800d5b6:	e03d      	b.n	800d634 <HAL_TIM_IC_MspInit+0x140>
  else if(htim_ic->Instance==TIM2)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	2380      	movs	r3, #128	@ 0x80
 800d5be:	05db      	lsls	r3, r3, #23
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d137      	bne.n	800d634 <HAL_TIM_IC_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d5c4:	4b1e      	ldr	r3, [pc, #120]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5dc:	4b18      	ldr	r3, [pc, #96]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5e0:	4b17      	ldr	r3, [pc, #92]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d5e8:	4b15      	ldr	r3, [pc, #84]	@ (800d640 <HAL_TIM_IC_MspInit+0x14c>)
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	60bb      	str	r3, [r7, #8]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d5f4:	214c      	movs	r1, #76	@ 0x4c
 800d5f6:	187b      	adds	r3, r7, r1
 800d5f8:	2280      	movs	r2, #128	@ 0x80
 800d5fa:	0212      	lsls	r2, r2, #8
 800d5fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	2202      	movs	r2, #2
 800d602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d604:	187b      	adds	r3, r7, r1
 800d606:	2200      	movs	r2, #0
 800d608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d60a:	187b      	adds	r3, r7, r1
 800d60c:	2200      	movs	r2, #0
 800d60e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d610:	187b      	adds	r3, r7, r1
 800d612:	2202      	movs	r2, #2
 800d614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d616:	187a      	adds	r2, r7, r1
 800d618:	23a0      	movs	r3, #160	@ 0xa0
 800d61a:	05db      	lsls	r3, r3, #23
 800d61c:	0011      	movs	r1, r2
 800d61e:	0018      	movs	r0, r3
 800d620:	f000 fe46 	bl	800e2b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d624:	2200      	movs	r2, #0
 800d626:	2100      	movs	r1, #0
 800d628:	200f      	movs	r0, #15
 800d62a:	f000 fadb 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d62e:	200f      	movs	r0, #15
 800d630:	f000 faed 	bl	800dc0e <HAL_NVIC_EnableIRQ>
}
 800d634:	46c0      	nop			@ (mov r8, r8)
 800d636:	46bd      	mov	sp, r7
 800d638:	b019      	add	sp, #100	@ 0x64
 800d63a:	bd90      	pop	{r4, r7, pc}
 800d63c:	40012c00 	.word	0x40012c00
 800d640:	40021000 	.word	0x40021000
 800d644:	50000800 	.word	0x50000800

0800d648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a0d      	ldr	r2, [pc, #52]	@ (800d68c <HAL_TIM_Base_MspInit+0x44>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d113      	bne.n	800d682 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d65a:	4b0d      	ldr	r3, [pc, #52]	@ (800d690 <HAL_TIM_Base_MspInit+0x48>)
 800d65c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d65e:	4b0c      	ldr	r3, [pc, #48]	@ (800d690 <HAL_TIM_Base_MspInit+0x48>)
 800d660:	2102      	movs	r1, #2
 800d662:	430a      	orrs	r2, r1
 800d664:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d666:	4b0a      	ldr	r3, [pc, #40]	@ (800d690 <HAL_TIM_Base_MspInit+0x48>)
 800d668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66a:	2202      	movs	r2, #2
 800d66c:	4013      	ands	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d672:	2200      	movs	r2, #0
 800d674:	2100      	movs	r1, #0
 800d676:	2010      	movs	r0, #16
 800d678:	f000 fab4 	bl	800dbe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d67c:	2010      	movs	r0, #16
 800d67e:	f000 fac6 	bl	800dc0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800d682:	46c0      	nop			@ (mov r8, r8)
 800d684:	46bd      	mov	sp, r7
 800d686:	b004      	add	sp, #16
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	46c0      	nop			@ (mov r8, r8)
 800d68c:	40000400 	.word	0x40000400
 800d690:	40021000 	.word	0x40021000

0800d694 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800d698:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d0 <SDTimer_Handler+0x3c>)
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d006      	beq.n	800d6b0 <SDTimer_Handler+0x1c>
    Timer1--;
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d0 <SDTimer_Handler+0x3c>)
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	4b08      	ldr	r3, [pc, #32]	@ (800d6d0 <SDTimer_Handler+0x3c>)
 800d6ae:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800d6b0:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <SDTimer_Handler+0x40>)
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d006      	beq.n	800d6c8 <SDTimer_Handler+0x34>
    Timer2--;
 800d6ba:	4b06      	ldr	r3, [pc, #24]	@ (800d6d4 <SDTimer_Handler+0x40>)
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	4b03      	ldr	r3, [pc, #12]	@ (800d6d4 <SDTimer_Handler+0x40>)
 800d6c6:	801a      	strh	r2, [r3, #0]
}
 800d6c8:	46c0      	nop			@ (mov r8, r8)
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	46c0      	nop			@ (mov r8, r8)
 800d6d0:	2000345e 	.word	0x2000345e
 800d6d4:	20003460 	.word	0x20003460

0800d6d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d6dc:	46c0      	nop			@ (mov r8, r8)
 800d6de:	e7fd      	b.n	800d6dc <NMI_Handler+0x4>

0800d6e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d6e4:	46c0      	nop			@ (mov r8, r8)
 800d6e6:	e7fd      	b.n	800d6e4 <HardFault_Handler+0x4>

0800d6e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d6ec:	46c0      	nop			@ (mov r8, r8)
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d6f6:	46c0      	nop			@ (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800d700:	4b0a      	ldr	r3, [pc, #40]	@ (800d72c <SysTick_Handler+0x30>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b2db      	uxtb	r3, r3
 800d706:	3301      	adds	r3, #1
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	4b08      	ldr	r3, [pc, #32]	@ (800d72c <SysTick_Handler+0x30>)
 800d70c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800d70e:	4b07      	ldr	r3, [pc, #28]	@ (800d72c <SysTick_Handler+0x30>)
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b09      	cmp	r3, #9
 800d716:	d904      	bls.n	800d722 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800d718:	4b04      	ldr	r3, [pc, #16]	@ (800d72c <SysTick_Handler+0x30>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
		  SDTimer_Handler();
 800d71e:	f7ff ffb9 	bl	800d694 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d722:	f000 f95d 	bl	800d9e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d726:	46c0      	nop			@ (mov r8, r8)
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	2000345c 	.word	0x2000345c

0800d730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800d734:	4b03      	ldr	r3, [pc, #12]	@ (800d744 <DMA1_Channel1_IRQHandler+0x14>)
 800d736:	0018      	movs	r0, r3
 800d738:	f000 fc62 	bl	800e000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800d73c:	46c0      	nop			@ (mov r8, r8)
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	46c0      	nop			@ (mov r8, r8)
 800d744:	2000088c 	.word	0x2000088c

0800d748 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d74c:	4b03      	ldr	r3, [pc, #12]	@ (800d75c <TIM1_CC_IRQHandler+0x14>)
 800d74e:	0018      	movs	r0, r3
 800d750:	f004 fdb0 	bl	80122b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800d754:	46c0      	nop			@ (mov r8, r8)
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	46c0      	nop			@ (mov r8, r8)
 800d75c:	2000094c 	.word	0x2000094c

0800d760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d764:	4b03      	ldr	r3, [pc, #12]	@ (800d774 <TIM2_IRQHandler+0x14>)
 800d766:	0018      	movs	r0, r3
 800d768:	f004 fda4 	bl	80122b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800d76c:	46c0      	nop			@ (mov r8, r8)
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	20000998 	.word	0x20000998

0800d778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d77c:	4b03      	ldr	r3, [pc, #12]	@ (800d78c <TIM3_IRQHandler+0x14>)
 800d77e:	0018      	movs	r0, r3
 800d780:	f004 fd98 	bl	80122b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d784:	46c0      	nop			@ (mov r8, r8)
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	200009e4 	.word	0x200009e4

0800d790 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800d794:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <I2C1_IRQHandler+0x2c>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	699a      	ldr	r2, [r3, #24]
 800d79a:	23e0      	movs	r3, #224	@ 0xe0
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	4013      	ands	r3, r2
 800d7a0:	d004      	beq.n	800d7ac <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d7a2:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <I2C1_IRQHandler+0x2c>)
 800d7a4:	0018      	movs	r0, r3
 800d7a6:	f001 fc43 	bl	800f030 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d7aa:	e003      	b.n	800d7b4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d7ac:	4b03      	ldr	r3, [pc, #12]	@ (800d7bc <I2C1_IRQHandler+0x2c>)
 800d7ae:	0018      	movs	r0, r3
 800d7b0:	f001 fc24 	bl	800effc <HAL_I2C_EV_IRQHandler>
}
 800d7b4:	46c0      	nop			@ (mov r8, r8)
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	46c0      	nop			@ (mov r8, r8)
 800d7bc:	20000524 	.word	0x20000524

0800d7c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800d7c4:	4b03      	ldr	r3, [pc, #12]	@ (800d7d4 <SPI1_IRQHandler+0x14>)
 800d7c6:	0018      	movs	r0, r3
 800d7c8:	f004 f8b2 	bl	8011930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800d7cc:	46c0      	nop			@ (mov r8, r8)
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	46c0      	nop			@ (mov r8, r8)
 800d7d4:	200008e8 	.word	0x200008e8

0800d7d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <USART1_IRQHandler+0x1c>)
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f005 fe62 	bl	80134a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800d7e4:	4b03      	ldr	r3, [pc, #12]	@ (800d7f4 <USART1_IRQHandler+0x1c>)
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	f7f6 fbf4 	bl	8003fd4 <USER_UART_IRQHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 800d7ec:	46c0      	nop			@ (mov r8, r8)
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	46c0      	nop			@ (mov r8, r8)
 800d7f4:	2000064c 	.word	0x2000064c

0800d7f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d7fc:	4b03      	ldr	r3, [pc, #12]	@ (800d80c <USART2_IRQHandler+0x14>)
 800d7fe:	0018      	movs	r0, r3
 800d800:	f005 fe52 	bl	80134a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d804:	46c0      	nop			@ (mov r8, r8)
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	46c0      	nop			@ (mov r8, r8)
 800d80c:	200006dc 	.word	0x200006dc

0800d810 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d814:	4b07      	ldr	r3, [pc, #28]	@ (800d834 <USART3_4_LPUART1_IRQHandler+0x24>)
 800d816:	0018      	movs	r0, r3
 800d818:	f005 fe46 	bl	80134a8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800d81c:	4b06      	ldr	r3, [pc, #24]	@ (800d838 <USART3_4_LPUART1_IRQHandler+0x28>)
 800d81e:	0018      	movs	r0, r3
 800d820:	f005 fe42 	bl	80134a8 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&hlpuart1);
 800d824:	4b05      	ldr	r3, [pc, #20]	@ (800d83c <USART3_4_LPUART1_IRQHandler+0x2c>)
 800d826:	0018      	movs	r0, r3
 800d828:	f005 fe3e 	bl	80134a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	46c0      	nop			@ (mov r8, r8)
 800d834:	2000076c 	.word	0x2000076c
 800d838:	200007fc 	.word	0x200007fc
 800d83c:	200005bc 	.word	0x200005bc

0800d840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d848:	4a14      	ldr	r2, [pc, #80]	@ (800d89c <_sbrk+0x5c>)
 800d84a:	4b15      	ldr	r3, [pc, #84]	@ (800d8a0 <_sbrk+0x60>)
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d854:	4b13      	ldr	r3, [pc, #76]	@ (800d8a4 <_sbrk+0x64>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d102      	bne.n	800d862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d85c:	4b11      	ldr	r3, [pc, #68]	@ (800d8a4 <_sbrk+0x64>)
 800d85e:	4a12      	ldr	r2, [pc, #72]	@ (800d8a8 <_sbrk+0x68>)
 800d860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d862:	4b10      	ldr	r3, [pc, #64]	@ (800d8a4 <_sbrk+0x64>)
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	18d3      	adds	r3, r2, r3
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d207      	bcs.n	800d880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d870:	f00a feb0 	bl	80185d4 <__errno>
 800d874:	0003      	movs	r3, r0
 800d876:	220c      	movs	r2, #12
 800d878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d87a:	2301      	movs	r3, #1
 800d87c:	425b      	negs	r3, r3
 800d87e:	e009      	b.n	800d894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d880:	4b08      	ldr	r3, [pc, #32]	@ (800d8a4 <_sbrk+0x64>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d886:	4b07      	ldr	r3, [pc, #28]	@ (800d8a4 <_sbrk+0x64>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	18d2      	adds	r2, r2, r3
 800d88e:	4b05      	ldr	r3, [pc, #20]	@ (800d8a4 <_sbrk+0x64>)
 800d890:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d892:	68fb      	ldr	r3, [r7, #12]
}
 800d894:	0018      	movs	r0, r3
 800d896:	46bd      	mov	sp, r7
 800d898:	b006      	add	sp, #24
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20009000 	.word	0x20009000
 800d8a0:	00000400 	.word	0x00000400
 800d8a4:	20003464 	.word	0x20003464
 800d8a8:	200035f0 	.word	0x200035f0

0800d8ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d8b0:	46c0      	nop			@ (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d8b8:	480d      	ldr	r0, [pc, #52]	@ (800d8f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d8ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d8bc:	f7ff fff6 	bl	800d8ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d8c0:	480c      	ldr	r0, [pc, #48]	@ (800d8f4 <LoopForever+0x6>)
  ldr r1, =_edata
 800d8c2:	490d      	ldr	r1, [pc, #52]	@ (800d8f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d8c4:	4a0d      	ldr	r2, [pc, #52]	@ (800d8fc <LoopForever+0xe>)
  movs r3, #0
 800d8c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d8c8:	e002      	b.n	800d8d0 <LoopCopyDataInit>

0800d8ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d8ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d8cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d8ce:	3304      	adds	r3, #4

0800d8d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d8d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d8d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d8d4:	d3f9      	bcc.n	800d8ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d8d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d900 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d8d8:	4c0a      	ldr	r4, [pc, #40]	@ (800d904 <LoopForever+0x16>)
  movs r3, #0
 800d8da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d8dc:	e001      	b.n	800d8e2 <LoopFillZerobss>

0800d8de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d8de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d8e0:	3204      	adds	r2, #4

0800d8e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d8e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d8e4:	d3fb      	bcc.n	800d8de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800d8e6:	f00a fe7b 	bl	80185e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800d8ea:	f7f6 fd1d 	bl	8004328 <main>

0800d8ee <LoopForever>:

LoopForever:
  b LoopForever
 800d8ee:	e7fe      	b.n	800d8ee <LoopForever>
  ldr   r0, =_estack
 800d8f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800d8f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d8f8:	20000504 	.word	0x20000504
  ldr r2, =_sidata
 800d8fc:	080196cc 	.word	0x080196cc
  ldr r2, =_sbss
 800d900:	20000504 	.word	0x20000504
  ldr r4, =_ebss
 800d904:	200035f0 	.word	0x200035f0

0800d908 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d908:	e7fe      	b.n	800d908 <ADC1_COMP_IRQHandler>
	...

0800d90c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d912:	1dfb      	adds	r3, r7, #7
 800d914:	2200      	movs	r2, #0
 800d916:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d918:	4b0b      	ldr	r3, [pc, #44]	@ (800d948 <HAL_Init+0x3c>)
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	4b0a      	ldr	r3, [pc, #40]	@ (800d948 <HAL_Init+0x3c>)
 800d91e:	2180      	movs	r1, #128	@ 0x80
 800d920:	0049      	lsls	r1, r1, #1
 800d922:	430a      	orrs	r2, r1
 800d924:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d926:	2000      	movs	r0, #0
 800d928:	f000 f810 	bl	800d94c <HAL_InitTick>
 800d92c:	1e03      	subs	r3, r0, #0
 800d92e:	d003      	beq.n	800d938 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800d930:	1dfb      	adds	r3, r7, #7
 800d932:	2201      	movs	r2, #1
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e001      	b.n	800d93c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800d938:	f7ff faea 	bl	800cf10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d93c:	1dfb      	adds	r3, r7, #7
 800d93e:	781b      	ldrb	r3, [r3, #0]
}
 800d940:	0018      	movs	r0, r3
 800d942:	46bd      	mov	sp, r7
 800d944:	b002      	add	sp, #8
 800d946:	bd80      	pop	{r7, pc}
 800d948:	40022000 	.word	0x40022000

0800d94c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d94c:	b590      	push	{r4, r7, lr}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d954:	230f      	movs	r3, #15
 800d956:	18fb      	adds	r3, r7, r3
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800d95c:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d4 <HAL_InitTick+0x88>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02b      	beq.n	800d9bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800d964:	4b1c      	ldr	r3, [pc, #112]	@ (800d9d8 <HAL_InitTick+0x8c>)
 800d966:	681c      	ldr	r4, [r3, #0]
 800d968:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d4 <HAL_InitTick+0x88>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	0019      	movs	r1, r3
 800d96e:	23fa      	movs	r3, #250	@ 0xfa
 800d970:	0098      	lsls	r0, r3, #2
 800d972:	f7f2 fbd9 	bl	8000128 <__udivsi3>
 800d976:	0003      	movs	r3, r0
 800d978:	0019      	movs	r1, r3
 800d97a:	0020      	movs	r0, r4
 800d97c:	f7f2 fbd4 	bl	8000128 <__udivsi3>
 800d980:	0003      	movs	r3, r0
 800d982:	0018      	movs	r0, r3
 800d984:	f000 f953 	bl	800dc2e <HAL_SYSTICK_Config>
 800d988:	1e03      	subs	r3, r0, #0
 800d98a:	d112      	bne.n	800d9b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d80a      	bhi.n	800d9a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	2301      	movs	r3, #1
 800d996:	425b      	negs	r3, r3
 800d998:	2200      	movs	r2, #0
 800d99a:	0018      	movs	r0, r3
 800d99c:	f000 f922 	bl	800dbe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d9dc <HAL_InitTick+0x90>)
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	e00d      	b.n	800d9c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800d9a8:	230f      	movs	r3, #15
 800d9aa:	18fb      	adds	r3, r7, r3
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e008      	b.n	800d9c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d9b2:	230f      	movs	r3, #15
 800d9b4:	18fb      	adds	r3, r7, r3
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	e003      	b.n	800d9c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d9bc:	230f      	movs	r3, #15
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800d9c4:	230f      	movs	r3, #15
 800d9c6:	18fb      	adds	r3, r7, r3
 800d9c8:	781b      	ldrb	r3, [r3, #0]
}
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	b005      	add	sp, #20
 800d9d0:	bd90      	pop	{r4, r7, pc}
 800d9d2:	46c0      	nop			@ (mov r8, r8)
 800d9d4:	2000049c 	.word	0x2000049c
 800d9d8:	20000494 	.word	0x20000494
 800d9dc:	20000498 	.word	0x20000498

0800d9e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d9e4:	4b05      	ldr	r3, [pc, #20]	@ (800d9fc <HAL_IncTick+0x1c>)
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	001a      	movs	r2, r3
 800d9ea:	4b05      	ldr	r3, [pc, #20]	@ (800da00 <HAL_IncTick+0x20>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	18d2      	adds	r2, r2, r3
 800d9f0:	4b03      	ldr	r3, [pc, #12]	@ (800da00 <HAL_IncTick+0x20>)
 800d9f2:	601a      	str	r2, [r3, #0]
}
 800d9f4:	46c0      	nop			@ (mov r8, r8)
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	46c0      	nop			@ (mov r8, r8)
 800d9fc:	2000049c 	.word	0x2000049c
 800da00:	20003468 	.word	0x20003468

0800da04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  return uwTick;
 800da08:	4b02      	ldr	r3, [pc, #8]	@ (800da14 <HAL_GetTick+0x10>)
 800da0a:	681b      	ldr	r3, [r3, #0]
}
 800da0c:	0018      	movs	r0, r3
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	46c0      	nop			@ (mov r8, r8)
 800da14:	20003468 	.word	0x20003468

0800da18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800da20:	f7ff fff0 	bl	800da04 <HAL_GetTick>
 800da24:	0003      	movs	r3, r0
 800da26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3301      	adds	r3, #1
 800da30:	d005      	beq.n	800da3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800da32:	4b0a      	ldr	r3, [pc, #40]	@ (800da5c <HAL_Delay+0x44>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	001a      	movs	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	189b      	adds	r3, r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800da3e:	46c0      	nop			@ (mov r8, r8)
 800da40:	f7ff ffe0 	bl	800da04 <HAL_GetTick>
 800da44:	0002      	movs	r2, r0
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d8f7      	bhi.n	800da40 <HAL_Delay+0x28>
  {
  }
}
 800da50:	46c0      	nop			@ (mov r8, r8)
 800da52:	46c0      	nop			@ (mov r8, r8)
 800da54:	46bd      	mov	sp, r7
 800da56:	b004      	add	sp, #16
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	46c0      	nop			@ (mov r8, r8)
 800da5c:	2000049c 	.word	0x2000049c

0800da60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800da68:	4b06      	ldr	r3, [pc, #24]	@ (800da84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a06      	ldr	r2, [pc, #24]	@ (800da88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800da6e:	4013      	ands	r3, r2
 800da70:	0019      	movs	r1, r3
 800da72:	4b04      	ldr	r3, [pc, #16]	@ (800da84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	430a      	orrs	r2, r1
 800da78:	601a      	str	r2, [r3, #0]
}
 800da7a:	46c0      	nop			@ (mov r8, r8)
 800da7c:	46bd      	mov	sp, r7
 800da7e:	b002      	add	sp, #8
 800da80:	bd80      	pop	{r7, pc}
 800da82:	46c0      	nop			@ (mov r8, r8)
 800da84:	40010000 	.word	0x40010000
 800da88:	fffff9ff 	.word	0xfffff9ff

0800da8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	0002      	movs	r2, r0
 800da94:	1dfb      	adds	r3, r7, #7
 800da96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800da98:	1dfb      	adds	r3, r7, #7
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800da9e:	d809      	bhi.n	800dab4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800daa0:	1dfb      	adds	r3, r7, #7
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	001a      	movs	r2, r3
 800daa6:	231f      	movs	r3, #31
 800daa8:	401a      	ands	r2, r3
 800daaa:	4b04      	ldr	r3, [pc, #16]	@ (800dabc <__NVIC_EnableIRQ+0x30>)
 800daac:	2101      	movs	r1, #1
 800daae:	4091      	lsls	r1, r2
 800dab0:	000a      	movs	r2, r1
 800dab2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800dab4:	46c0      	nop			@ (mov r8, r8)
 800dab6:	46bd      	mov	sp, r7
 800dab8:	b002      	add	sp, #8
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	e000e100 	.word	0xe000e100

0800dac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	0002      	movs	r2, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	1dfb      	adds	r3, r7, #7
 800dacc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dace:	1dfb      	adds	r3, r7, #7
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dad4:	d828      	bhi.n	800db28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dad6:	4a2f      	ldr	r2, [pc, #188]	@ (800db94 <__NVIC_SetPriority+0xd4>)
 800dad8:	1dfb      	adds	r3, r7, #7
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	b25b      	sxtb	r3, r3
 800dade:	089b      	lsrs	r3, r3, #2
 800dae0:	33c0      	adds	r3, #192	@ 0xc0
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	589b      	ldr	r3, [r3, r2]
 800dae6:	1dfa      	adds	r2, r7, #7
 800dae8:	7812      	ldrb	r2, [r2, #0]
 800daea:	0011      	movs	r1, r2
 800daec:	2203      	movs	r2, #3
 800daee:	400a      	ands	r2, r1
 800daf0:	00d2      	lsls	r2, r2, #3
 800daf2:	21ff      	movs	r1, #255	@ 0xff
 800daf4:	4091      	lsls	r1, r2
 800daf6:	000a      	movs	r2, r1
 800daf8:	43d2      	mvns	r2, r2
 800dafa:	401a      	ands	r2, r3
 800dafc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	019b      	lsls	r3, r3, #6
 800db02:	22ff      	movs	r2, #255	@ 0xff
 800db04:	401a      	ands	r2, r3
 800db06:	1dfb      	adds	r3, r7, #7
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	0018      	movs	r0, r3
 800db0c:	2303      	movs	r3, #3
 800db0e:	4003      	ands	r3, r0
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800db14:	481f      	ldr	r0, [pc, #124]	@ (800db94 <__NVIC_SetPriority+0xd4>)
 800db16:	1dfb      	adds	r3, r7, #7
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	b25b      	sxtb	r3, r3
 800db1c:	089b      	lsrs	r3, r3, #2
 800db1e:	430a      	orrs	r2, r1
 800db20:	33c0      	adds	r3, #192	@ 0xc0
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800db26:	e031      	b.n	800db8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800db28:	4a1b      	ldr	r2, [pc, #108]	@ (800db98 <__NVIC_SetPriority+0xd8>)
 800db2a:	1dfb      	adds	r3, r7, #7
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	0019      	movs	r1, r3
 800db30:	230f      	movs	r3, #15
 800db32:	400b      	ands	r3, r1
 800db34:	3b08      	subs	r3, #8
 800db36:	089b      	lsrs	r3, r3, #2
 800db38:	3306      	adds	r3, #6
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	18d3      	adds	r3, r2, r3
 800db3e:	3304      	adds	r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	1dfa      	adds	r2, r7, #7
 800db44:	7812      	ldrb	r2, [r2, #0]
 800db46:	0011      	movs	r1, r2
 800db48:	2203      	movs	r2, #3
 800db4a:	400a      	ands	r2, r1
 800db4c:	00d2      	lsls	r2, r2, #3
 800db4e:	21ff      	movs	r1, #255	@ 0xff
 800db50:	4091      	lsls	r1, r2
 800db52:	000a      	movs	r2, r1
 800db54:	43d2      	mvns	r2, r2
 800db56:	401a      	ands	r2, r3
 800db58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	019b      	lsls	r3, r3, #6
 800db5e:	22ff      	movs	r2, #255	@ 0xff
 800db60:	401a      	ands	r2, r3
 800db62:	1dfb      	adds	r3, r7, #7
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	0018      	movs	r0, r3
 800db68:	2303      	movs	r3, #3
 800db6a:	4003      	ands	r3, r0
 800db6c:	00db      	lsls	r3, r3, #3
 800db6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800db70:	4809      	ldr	r0, [pc, #36]	@ (800db98 <__NVIC_SetPriority+0xd8>)
 800db72:	1dfb      	adds	r3, r7, #7
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	001c      	movs	r4, r3
 800db78:	230f      	movs	r3, #15
 800db7a:	4023      	ands	r3, r4
 800db7c:	3b08      	subs	r3, #8
 800db7e:	089b      	lsrs	r3, r3, #2
 800db80:	430a      	orrs	r2, r1
 800db82:	3306      	adds	r3, #6
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	18c3      	adds	r3, r0, r3
 800db88:	3304      	adds	r3, #4
 800db8a:	601a      	str	r2, [r3, #0]
}
 800db8c:	46c0      	nop			@ (mov r8, r8)
 800db8e:	46bd      	mov	sp, r7
 800db90:	b003      	add	sp, #12
 800db92:	bd90      	pop	{r4, r7, pc}
 800db94:	e000e100 	.word	0xe000e100
 800db98:	e000ed00 	.word	0xe000ed00

0800db9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	1e5a      	subs	r2, r3, #1
 800dba8:	2380      	movs	r3, #128	@ 0x80
 800dbaa:	045b      	lsls	r3, r3, #17
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d301      	bcc.n	800dbb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e010      	b.n	800dbd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe0 <SysTick_Config+0x44>)
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	3a01      	subs	r2, #1
 800dbba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	425b      	negs	r3, r3
 800dbc0:	2103      	movs	r1, #3
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	f7ff ff7c 	bl	800dac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dbc8:	4b05      	ldr	r3, [pc, #20]	@ (800dbe0 <SysTick_Config+0x44>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dbce:	4b04      	ldr	r3, [pc, #16]	@ (800dbe0 <SysTick_Config+0x44>)
 800dbd0:	2207      	movs	r2, #7
 800dbd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	0018      	movs	r0, r3
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	b002      	add	sp, #8
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	46c0      	nop			@ (mov r8, r8)
 800dbe0:	e000e010 	.word	0xe000e010

0800dbe4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
 800dbee:	210f      	movs	r1, #15
 800dbf0:	187b      	adds	r3, r7, r1
 800dbf2:	1c02      	adds	r2, r0, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	187b      	adds	r3, r7, r1
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	b25b      	sxtb	r3, r3
 800dbfe:	0011      	movs	r1, r2
 800dc00:	0018      	movs	r0, r3
 800dc02:	f7ff ff5d 	bl	800dac0 <__NVIC_SetPriority>
}
 800dc06:	46c0      	nop			@ (mov r8, r8)
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	b004      	add	sp, #16
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	0002      	movs	r2, r0
 800dc16:	1dfb      	adds	r3, r7, #7
 800dc18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc1a:	1dfb      	adds	r3, r7, #7
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	b25b      	sxtb	r3, r3
 800dc20:	0018      	movs	r0, r3
 800dc22:	f7ff ff33 	bl	800da8c <__NVIC_EnableIRQ>
}
 800dc26:	46c0      	nop			@ (mov r8, r8)
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	b002      	add	sp, #8
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	0018      	movs	r0, r3
 800dc3a:	f7ff ffaf 	bl	800db9c <SysTick_Config>
 800dc3e:	0003      	movs	r3, r0
}
 800dc40:	0018      	movs	r0, r3
 800dc42:	46bd      	mov	sp, r7
 800dc44:	b002      	add	sp, #8
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e077      	b.n	800dd4a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a3d      	ldr	r2, [pc, #244]	@ (800dd54 <HAL_DMA_Init+0x10c>)
 800dc60:	4694      	mov	ip, r2
 800dc62:	4463      	add	r3, ip
 800dc64:	2114      	movs	r1, #20
 800dc66:	0018      	movs	r0, r3
 800dc68:	f7f2 fa5e 	bl	8000128 <__udivsi3>
 800dc6c:	0003      	movs	r3, r0
 800dc6e:	009a      	lsls	r2, r3, #2
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2225      	movs	r2, #37	@ 0x25
 800dc78:	2102      	movs	r1, #2
 800dc7a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4934      	ldr	r1, [pc, #208]	@ (800dd58 <HAL_DMA_Init+0x110>)
 800dc88:	400a      	ands	r2, r1
 800dc8a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6819      	ldr	r1, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	431a      	orrs	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	431a      	orrs	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	69db      	ldr	r3, [r3, #28]
 800dcb2:	431a      	orrs	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6a1b      	ldr	r3, [r3, #32]
 800dcb8:	431a      	orrs	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	f000 faa3 	bl	800e210 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	689a      	ldr	r2, [r3, #8]
 800dcce:	2380      	movs	r3, #128	@ 0x80
 800dcd0:	01db      	lsls	r3, r3, #7
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d102      	bne.n	800dcdc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce4:	213f      	movs	r1, #63	@ 0x3f
 800dce6:	400a      	ands	r2, r1
 800dce8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800dcf2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d011      	beq.n	800dd20 <HAL_DMA_Init+0xd8>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d80d      	bhi.n	800dd20 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	0018      	movs	r0, r3
 800dd08:	f000 faae 	bl	800e268 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800dd1c:	605a      	str	r2, [r3, #4]
 800dd1e:	e008      	b.n	800dd32 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2225      	movs	r2, #37	@ 0x25
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2224      	movs	r2, #36	@ 0x24
 800dd44:	2100      	movs	r1, #0
 800dd46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	b002      	add	sp, #8
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	46c0      	nop			@ (mov r8, r8)
 800dd54:	bffdfff8 	.word	0xbffdfff8
 800dd58:	ffff800f 	.word	0xffff800f

0800dd5c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd6a:	2317      	movs	r3, #23
 800dd6c:	18fb      	adds	r3, r7, r3
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2224      	movs	r2, #36	@ 0x24
 800dd76:	5c9b      	ldrb	r3, [r3, r2]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d101      	bne.n	800dd80 <HAL_DMA_Start_IT+0x24>
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	e06f      	b.n	800de60 <HAL_DMA_Start_IT+0x104>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2224      	movs	r2, #36	@ 0x24
 800dd84:	2101      	movs	r1, #1
 800dd86:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2225      	movs	r2, #37	@ 0x25
 800dd8c:	5c9b      	ldrb	r3, [r3, r2]
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d157      	bne.n	800de44 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2225      	movs	r2, #37	@ 0x25
 800dd98:	2102      	movs	r1, #2
 800dd9a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2101      	movs	r1, #1
 800ddae:	438a      	bics	r2, r1
 800ddb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 f9e9 	bl	800e190 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d008      	beq.n	800ddd8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	210e      	movs	r1, #14
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	e00f      	b.n	800ddf8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2104      	movs	r1, #4
 800dde4:	438a      	bics	r2, r1
 800dde6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	210a      	movs	r1, #10
 800ddf4:	430a      	orrs	r2, r1
 800ddf6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	2380      	movs	r3, #128	@ 0x80
 800de00:	025b      	lsls	r3, r3, #9
 800de02:	4013      	ands	r3, r2
 800de04:	d008      	beq.n	800de18 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de10:	2180      	movs	r1, #128	@ 0x80
 800de12:	0049      	lsls	r1, r1, #1
 800de14:	430a      	orrs	r2, r1
 800de16:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d008      	beq.n	800de32 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de2a:	2180      	movs	r1, #128	@ 0x80
 800de2c:	0049      	lsls	r1, r1, #1
 800de2e:	430a      	orrs	r2, r1
 800de30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2101      	movs	r1, #1
 800de3e:	430a      	orrs	r2, r1
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	e00a      	b.n	800de5a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2280      	movs	r2, #128	@ 0x80
 800de48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2224      	movs	r2, #36	@ 0x24
 800de4e:	2100      	movs	r1, #0
 800de50:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800de52:	2317      	movs	r3, #23
 800de54:	18fb      	adds	r3, r7, r3
 800de56:	2201      	movs	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800de5a:	2317      	movs	r3, #23
 800de5c:	18fb      	adds	r3, r7, r3
 800de5e:	781b      	ldrb	r3, [r3, #0]
}
 800de60:	0018      	movs	r0, r3
 800de62:	46bd      	mov	sp, r7
 800de64:	b006      	add	sp, #24
 800de66:	bd80      	pop	{r7, pc}

0800de68 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e050      	b.n	800df1c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2225      	movs	r2, #37	@ 0x25
 800de7e:	5c9b      	ldrb	r3, [r3, r2]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b02      	cmp	r3, #2
 800de84:	d008      	beq.n	800de98 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2204      	movs	r2, #4
 800de8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2224      	movs	r2, #36	@ 0x24
 800de90:	2100      	movs	r1, #0
 800de92:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	e041      	b.n	800df1c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	210e      	movs	r1, #14
 800dea4:	438a      	bics	r2, r1
 800dea6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deb2:	491c      	ldr	r1, [pc, #112]	@ (800df24 <HAL_DMA_Abort+0xbc>)
 800deb4:	400a      	ands	r2, r1
 800deb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2101      	movs	r1, #1
 800dec4:	438a      	bics	r2, r1
 800dec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800dec8:	4b17      	ldr	r3, [pc, #92]	@ (800df28 <HAL_DMA_Abort+0xc0>)
 800deca:	6859      	ldr	r1, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ded0:	221c      	movs	r2, #28
 800ded2:	4013      	ands	r3, r2
 800ded4:	2201      	movs	r2, #1
 800ded6:	409a      	lsls	r2, r3
 800ded8:	4b13      	ldr	r3, [pc, #76]	@ (800df28 <HAL_DMA_Abort+0xc0>)
 800deda:	430a      	orrs	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800dee6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00c      	beq.n	800df0a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800defa:	490a      	ldr	r1, [pc, #40]	@ (800df24 <HAL_DMA_Abort+0xbc>)
 800defc:	400a      	ands	r2, r1
 800defe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800df08:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2225      	movs	r2, #37	@ 0x25
 800df0e:	2101      	movs	r1, #1
 800df10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2224      	movs	r2, #36	@ 0x24
 800df16:	2100      	movs	r1, #0
 800df18:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	0018      	movs	r0, r3
 800df1e:	46bd      	mov	sp, r7
 800df20:	b002      	add	sp, #8
 800df22:	bd80      	pop	{r7, pc}
 800df24:	fffffeff 	.word	0xfffffeff
 800df28:	40020000 	.word	0x40020000

0800df2c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df34:	210f      	movs	r1, #15
 800df36:	187b      	adds	r3, r7, r1
 800df38:	2200      	movs	r2, #0
 800df3a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2225      	movs	r2, #37	@ 0x25
 800df40:	5c9b      	ldrb	r3, [r3, r2]
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b02      	cmp	r3, #2
 800df46:	d006      	beq.n	800df56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2204      	movs	r2, #4
 800df4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800df4e:	187b      	adds	r3, r7, r1
 800df50:	2201      	movs	r2, #1
 800df52:	701a      	strb	r2, [r3, #0]
 800df54:	e049      	b.n	800dfea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	210e      	movs	r1, #14
 800df62:	438a      	bics	r2, r1
 800df64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2101      	movs	r1, #1
 800df72:	438a      	bics	r2, r1
 800df74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df80:	491d      	ldr	r1, [pc, #116]	@ (800dff8 <HAL_DMA_Abort_IT+0xcc>)
 800df82:	400a      	ands	r2, r1
 800df84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800df86:	4b1d      	ldr	r3, [pc, #116]	@ (800dffc <HAL_DMA_Abort_IT+0xd0>)
 800df88:	6859      	ldr	r1, [r3, #4]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df8e:	221c      	movs	r2, #28
 800df90:	4013      	ands	r3, r2
 800df92:	2201      	movs	r2, #1
 800df94:	409a      	lsls	r2, r3
 800df96:	4b19      	ldr	r3, [pc, #100]	@ (800dffc <HAL_DMA_Abort_IT+0xd0>)
 800df98:	430a      	orrs	r2, r1
 800df9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800dfa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00c      	beq.n	800dfc8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfb8:	490f      	ldr	r1, [pc, #60]	@ (800dff8 <HAL_DMA_Abort_IT+0xcc>)
 800dfba:	400a      	ands	r2, r1
 800dfbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800dfc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2225      	movs	r2, #37	@ 0x25
 800dfcc:	2101      	movs	r1, #1
 800dfce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2224      	movs	r2, #36	@ 0x24
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d004      	beq.n	800dfea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	0010      	movs	r0, r2
 800dfe8:	4798      	blx	r3
    }
  }
  return status;
 800dfea:	230f      	movs	r3, #15
 800dfec:	18fb      	adds	r3, r7, r3
 800dfee:	781b      	ldrb	r3, [r3, #0]
}
 800dff0:	0018      	movs	r0, r3
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b004      	add	sp, #16
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	fffffeff 	.word	0xfffffeff
 800dffc:	40020000 	.word	0x40020000

0800e000 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800e008:	4b55      	ldr	r3, [pc, #340]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e01a:	221c      	movs	r2, #28
 800e01c:	4013      	ands	r3, r2
 800e01e:	2204      	movs	r2, #4
 800e020:	409a      	lsls	r2, r3
 800e022:	0013      	movs	r3, r2
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4013      	ands	r3, r2
 800e028:	d027      	beq.n	800e07a <HAL_DMA_IRQHandler+0x7a>
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2204      	movs	r2, #4
 800e02e:	4013      	ands	r3, r2
 800e030:	d023      	beq.n	800e07a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2220      	movs	r2, #32
 800e03a:	4013      	ands	r3, r2
 800e03c:	d107      	bne.n	800e04e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2104      	movs	r1, #4
 800e04a:	438a      	bics	r2, r1
 800e04c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800e04e:	4b44      	ldr	r3, [pc, #272]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e050:	6859      	ldr	r1, [r3, #4]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e056:	221c      	movs	r2, #28
 800e058:	4013      	ands	r3, r2
 800e05a:	2204      	movs	r2, #4
 800e05c:	409a      	lsls	r2, r3
 800e05e:	4b40      	ldr	r3, [pc, #256]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e060:	430a      	orrs	r2, r1
 800e062:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d100      	bne.n	800e06e <HAL_DMA_IRQHandler+0x6e>
 800e06c:	e073      	b.n	800e156 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	0010      	movs	r0, r2
 800e076:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800e078:	e06d      	b.n	800e156 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07e:	221c      	movs	r2, #28
 800e080:	4013      	ands	r3, r2
 800e082:	2202      	movs	r2, #2
 800e084:	409a      	lsls	r2, r3
 800e086:	0013      	movs	r3, r2
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4013      	ands	r3, r2
 800e08c:	d02e      	beq.n	800e0ec <HAL_DMA_IRQHandler+0xec>
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2202      	movs	r2, #2
 800e092:	4013      	ands	r3, r2
 800e094:	d02a      	beq.n	800e0ec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2220      	movs	r2, #32
 800e09e:	4013      	ands	r3, r2
 800e0a0:	d10b      	bne.n	800e0ba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	210a      	movs	r1, #10
 800e0ae:	438a      	bics	r2, r1
 800e0b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2225      	movs	r2, #37	@ 0x25
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800e0ba:	4b29      	ldr	r3, [pc, #164]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e0bc:	6859      	ldr	r1, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0c2:	221c      	movs	r2, #28
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	409a      	lsls	r2, r3
 800e0ca:	4b25      	ldr	r3, [pc, #148]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2224      	movs	r2, #36	@ 0x24
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d03a      	beq.n	800e156 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	0010      	movs	r0, r2
 800e0e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800e0ea:	e034      	b.n	800e156 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0f0:	221c      	movs	r2, #28
 800e0f2:	4013      	ands	r3, r2
 800e0f4:	2208      	movs	r2, #8
 800e0f6:	409a      	lsls	r2, r3
 800e0f8:	0013      	movs	r3, r2
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	d02b      	beq.n	800e158 <HAL_DMA_IRQHandler+0x158>
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2208      	movs	r2, #8
 800e104:	4013      	ands	r3, r2
 800e106:	d027      	beq.n	800e158 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	210e      	movs	r1, #14
 800e114:	438a      	bics	r2, r1
 800e116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800e118:	4b11      	ldr	r3, [pc, #68]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e11a:	6859      	ldr	r1, [r3, #4]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e120:	221c      	movs	r2, #28
 800e122:	4013      	ands	r3, r2
 800e124:	2201      	movs	r2, #1
 800e126:	409a      	lsls	r2, r3
 800e128:	4b0d      	ldr	r3, [pc, #52]	@ (800e160 <HAL_DMA_IRQHandler+0x160>)
 800e12a:	430a      	orrs	r2, r1
 800e12c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2225      	movs	r2, #37	@ 0x25
 800e138:	2101      	movs	r1, #1
 800e13a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2224      	movs	r2, #36	@ 0x24
 800e140:	2100      	movs	r1, #0
 800e142:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	0010      	movs	r0, r2
 800e154:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e156:	46c0      	nop			@ (mov r8, r8)
 800e158:	46c0      	nop			@ (mov r8, r8)
}
 800e15a:	46bd      	mov	sp, r7
 800e15c:	b004      	add	sp, #16
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	40020000 	.word	0x40020000

0800e164 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2225      	movs	r2, #37	@ 0x25
 800e170:	5c9b      	ldrb	r3, [r3, r2]
 800e172:	b2db      	uxtb	r3, r3
}
 800e174:	0018      	movs	r0, r3
 800e176:	46bd      	mov	sp, r7
 800e178:	b002      	add	sp, #8
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800e188:	0018      	movs	r0, r3
 800e18a:	46bd      	mov	sp, r7
 800e18c:	b002      	add	sp, #8
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800e1a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800e1b8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800e1ba:	4b14      	ldr	r3, [pc, #80]	@ (800e20c <DMA_SetConfig+0x7c>)
 800e1bc:	6859      	ldr	r1, [r3, #4]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c2:	221c      	movs	r2, #28
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	409a      	lsls	r2, r3
 800e1ca:	4b10      	ldr	r3, [pc, #64]	@ (800e20c <DMA_SetConfig+0x7c>)
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	683a      	ldr	r2, [r7, #0]
 800e1d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	d108      	bne.n	800e1f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e1f0:	e007      	b.n	800e202 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	60da      	str	r2, [r3, #12]
}
 800e202:	46c0      	nop			@ (mov r8, r8)
 800e204:	46bd      	mov	sp, r7
 800e206:	b004      	add	sp, #16
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	46c0      	nop			@ (mov r8, r8)
 800e20c:	40020000 	.word	0x40020000

0800e210 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e21c:	089b      	lsrs	r3, r3, #2
 800e21e:	4a10      	ldr	r2, [pc, #64]	@ (800e260 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800e220:	4694      	mov	ip, r2
 800e222:	4463      	add	r3, ip
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	001a      	movs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	001a      	movs	r2, r3
 800e232:	23ff      	movs	r3, #255	@ 0xff
 800e234:	4013      	ands	r3, r2
 800e236:	3b08      	subs	r3, #8
 800e238:	2114      	movs	r1, #20
 800e23a:	0018      	movs	r0, r3
 800e23c:	f7f1 ff74 	bl	8000128 <__udivsi3>
 800e240:	0003      	movs	r3, r0
 800e242:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a07      	ldr	r2, [pc, #28]	@ (800e264 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800e248:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	221f      	movs	r2, #31
 800e24e:	4013      	ands	r3, r2
 800e250:	2201      	movs	r2, #1
 800e252:	409a      	lsls	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800e258:	46c0      	nop			@ (mov r8, r8)
 800e25a:	46bd      	mov	sp, r7
 800e25c:	b004      	add	sp, #16
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	10008200 	.word	0x10008200
 800e264:	40020880 	.word	0x40020880

0800e268 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	223f      	movs	r2, #63	@ 0x3f
 800e276:	4013      	ands	r3, r2
 800e278:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	4a0a      	ldr	r2, [pc, #40]	@ (800e2a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800e27e:	4694      	mov	ip, r2
 800e280:	4463      	add	r3, ip
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	001a      	movs	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a07      	ldr	r2, [pc, #28]	@ (800e2ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800e28e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3b01      	subs	r3, #1
 800e294:	2203      	movs	r2, #3
 800e296:	4013      	ands	r3, r2
 800e298:	2201      	movs	r2, #1
 800e29a:	409a      	lsls	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800e2a0:	46c0      	nop			@ (mov r8, r8)
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	b004      	add	sp, #16
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	1000823f 	.word	0x1000823f
 800e2ac:	40020940 	.word	0x40020940

0800e2b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e2be:	e147      	b.n	800e550 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4091      	lsls	r1, r2
 800e2ca:	000a      	movs	r2, r1
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d100      	bne.n	800e2d8 <HAL_GPIO_Init+0x28>
 800e2d6:	e138      	b.n	800e54a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	2203      	movs	r2, #3
 800e2de:	4013      	ands	r3, r2
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d005      	beq.n	800e2f0 <HAL_GPIO_Init+0x40>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	2203      	movs	r2, #3
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	d130      	bne.n	800e352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	2203      	movs	r2, #3
 800e2fc:	409a      	lsls	r2, r3
 800e2fe:	0013      	movs	r3, r2
 800e300:	43da      	mvns	r2, r3
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	4013      	ands	r3, r2
 800e306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	68da      	ldr	r2, [r3, #12]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	409a      	lsls	r2, r3
 800e312:	0013      	movs	r3, r2
 800e314:	693a      	ldr	r2, [r7, #16]
 800e316:	4313      	orrs	r3, r2
 800e318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e326:	2201      	movs	r2, #1
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	409a      	lsls	r2, r3
 800e32c:	0013      	movs	r3, r2
 800e32e:	43da      	mvns	r2, r3
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	4013      	ands	r3, r2
 800e334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	091b      	lsrs	r3, r3, #4
 800e33c:	2201      	movs	r2, #1
 800e33e:	401a      	ands	r2, r3
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	409a      	lsls	r2, r3
 800e344:	0013      	movs	r3, r2
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	4313      	orrs	r3, r2
 800e34a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	693a      	ldr	r2, [r7, #16]
 800e350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	2203      	movs	r2, #3
 800e358:	4013      	ands	r3, r2
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d017      	beq.n	800e38e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	2203      	movs	r2, #3
 800e36a:	409a      	lsls	r2, r3
 800e36c:	0013      	movs	r3, r2
 800e36e:	43da      	mvns	r2, r3
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	4013      	ands	r3, r2
 800e374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	689a      	ldr	r2, [r3, #8]
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	409a      	lsls	r2, r3
 800e380:	0013      	movs	r3, r2
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	4313      	orrs	r3, r2
 800e386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	2203      	movs	r2, #3
 800e394:	4013      	ands	r3, r2
 800e396:	2b02      	cmp	r3, #2
 800e398:	d123      	bne.n	800e3e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	08da      	lsrs	r2, r3, #3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3208      	adds	r2, #8
 800e3a2:	0092      	lsls	r2, r2, #2
 800e3a4:	58d3      	ldr	r3, [r2, r3]
 800e3a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2207      	movs	r2, #7
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	220f      	movs	r2, #15
 800e3b2:	409a      	lsls	r2, r3
 800e3b4:	0013      	movs	r3, r2
 800e3b6:	43da      	mvns	r2, r3
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	691a      	ldr	r2, [r3, #16]
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2107      	movs	r1, #7
 800e3c6:	400b      	ands	r3, r1
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	409a      	lsls	r2, r3
 800e3cc:	0013      	movs	r3, r2
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	08da      	lsrs	r2, r3, #3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3208      	adds	r2, #8
 800e3dc:	0092      	lsls	r2, r2, #2
 800e3de:	6939      	ldr	r1, [r7, #16]
 800e3e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	2203      	movs	r2, #3
 800e3ee:	409a      	lsls	r2, r3
 800e3f0:	0013      	movs	r3, r2
 800e3f2:	43da      	mvns	r2, r3
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	2203      	movs	r2, #3
 800e400:	401a      	ands	r2, r3
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	409a      	lsls	r2, r3
 800e408:	0013      	movs	r3, r2
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	685a      	ldr	r2, [r3, #4]
 800e41a:	23c0      	movs	r3, #192	@ 0xc0
 800e41c:	029b      	lsls	r3, r3, #10
 800e41e:	4013      	ands	r3, r2
 800e420:	d100      	bne.n	800e424 <HAL_GPIO_Init+0x174>
 800e422:	e092      	b.n	800e54a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800e424:	4a50      	ldr	r2, [pc, #320]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	089b      	lsrs	r3, r3, #2
 800e42a:	3318      	adds	r3, #24
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	589b      	ldr	r3, [r3, r2]
 800e430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2203      	movs	r2, #3
 800e436:	4013      	ands	r3, r2
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	220f      	movs	r2, #15
 800e43c:	409a      	lsls	r2, r3
 800e43e:	0013      	movs	r3, r2
 800e440:	43da      	mvns	r2, r3
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	4013      	ands	r3, r2
 800e446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	23a0      	movs	r3, #160	@ 0xa0
 800e44c:	05db      	lsls	r3, r3, #23
 800e44e:	429a      	cmp	r2, r3
 800e450:	d013      	beq.n	800e47a <HAL_GPIO_Init+0x1ca>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a45      	ldr	r2, [pc, #276]	@ (800e56c <HAL_GPIO_Init+0x2bc>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d00d      	beq.n	800e476 <HAL_GPIO_Init+0x1c6>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4a44      	ldr	r2, [pc, #272]	@ (800e570 <HAL_GPIO_Init+0x2c0>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d007      	beq.n	800e472 <HAL_GPIO_Init+0x1c2>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a43      	ldr	r2, [pc, #268]	@ (800e574 <HAL_GPIO_Init+0x2c4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d101      	bne.n	800e46e <HAL_GPIO_Init+0x1be>
 800e46a:	2303      	movs	r3, #3
 800e46c:	e006      	b.n	800e47c <HAL_GPIO_Init+0x1cc>
 800e46e:	2305      	movs	r3, #5
 800e470:	e004      	b.n	800e47c <HAL_GPIO_Init+0x1cc>
 800e472:	2302      	movs	r3, #2
 800e474:	e002      	b.n	800e47c <HAL_GPIO_Init+0x1cc>
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <HAL_GPIO_Init+0x1cc>
 800e47a:	2300      	movs	r3, #0
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	2103      	movs	r1, #3
 800e480:	400a      	ands	r2, r1
 800e482:	00d2      	lsls	r2, r2, #3
 800e484:	4093      	lsls	r3, r2
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	4313      	orrs	r3, r2
 800e48a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800e48c:	4936      	ldr	r1, [pc, #216]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	089b      	lsrs	r3, r3, #2
 800e492:	3318      	adds	r3, #24
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e49a:	4b33      	ldr	r3, [pc, #204]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	43da      	mvns	r2, r3
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	2380      	movs	r3, #128	@ 0x80
 800e4b0:	035b      	lsls	r3, r3, #13
 800e4b2:	4013      	ands	r3, r2
 800e4b4:	d003      	beq.n	800e4be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e4be:	4b2a      	ldr	r3, [pc, #168]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800e4c4:	4b28      	ldr	r3, [pc, #160]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	43da      	mvns	r2, r3
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	2380      	movs	r3, #128	@ 0x80
 800e4da:	039b      	lsls	r3, r3, #14
 800e4dc:	4013      	ands	r3, r2
 800e4de:	d003      	beq.n	800e4e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e4e8:	4b1f      	ldr	r3, [pc, #124]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e4ee:	4a1e      	ldr	r2, [pc, #120]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e4f0:	2384      	movs	r3, #132	@ 0x84
 800e4f2:	58d3      	ldr	r3, [r2, r3]
 800e4f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	43da      	mvns	r2, r3
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	2380      	movs	r3, #128	@ 0x80
 800e506:	029b      	lsls	r3, r3, #10
 800e508:	4013      	ands	r3, r2
 800e50a:	d003      	beq.n	800e514 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	4313      	orrs	r3, r2
 800e512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e514:	4914      	ldr	r1, [pc, #80]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e516:	2284      	movs	r2, #132	@ 0x84
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800e51c:	4a12      	ldr	r2, [pc, #72]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e51e:	2380      	movs	r3, #128	@ 0x80
 800e520:	58d3      	ldr	r3, [r2, r3]
 800e522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	43da      	mvns	r2, r3
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	4013      	ands	r3, r2
 800e52c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	2380      	movs	r3, #128	@ 0x80
 800e534:	025b      	lsls	r3, r3, #9
 800e536:	4013      	ands	r3, r2
 800e538:	d003      	beq.n	800e542 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800e53a:	693a      	ldr	r2, [r7, #16]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4313      	orrs	r3, r2
 800e540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e542:	4909      	ldr	r1, [pc, #36]	@ (800e568 <HAL_GPIO_Init+0x2b8>)
 800e544:	2280      	movs	r2, #128	@ 0x80
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	3301      	adds	r3, #1
 800e54e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	40da      	lsrs	r2, r3
 800e558:	1e13      	subs	r3, r2, #0
 800e55a:	d000      	beq.n	800e55e <HAL_GPIO_Init+0x2ae>
 800e55c:	e6b0      	b.n	800e2c0 <HAL_GPIO_Init+0x10>
  }
}
 800e55e:	46c0      	nop			@ (mov r8, r8)
 800e560:	46c0      	nop			@ (mov r8, r8)
 800e562:	46bd      	mov	sp, r7
 800e564:	b006      	add	sp, #24
 800e566:	bd80      	pop	{r7, pc}
 800e568:	40021800 	.word	0x40021800
 800e56c:	50000400 	.word	0x50000400
 800e570:	50000800 	.word	0x50000800
 800e574:	50000c00 	.word	0x50000c00

0800e578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	000a      	movs	r2, r1
 800e582:	1cbb      	adds	r3, r7, #2
 800e584:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	1cba      	adds	r2, r7, #2
 800e58c:	8812      	ldrh	r2, [r2, #0]
 800e58e:	4013      	ands	r3, r2
 800e590:	d004      	beq.n	800e59c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800e592:	230f      	movs	r3, #15
 800e594:	18fb      	adds	r3, r7, r3
 800e596:	2201      	movs	r2, #1
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	e003      	b.n	800e5a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e59c:	230f      	movs	r3, #15
 800e59e:	18fb      	adds	r3, r7, r3
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800e5a4:	230f      	movs	r3, #15
 800e5a6:	18fb      	adds	r3, r7, r3
 800e5a8:	781b      	ldrb	r3, [r3, #0]
}
 800e5aa:	0018      	movs	r0, r3
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	b004      	add	sp, #16
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b082      	sub	sp, #8
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	0008      	movs	r0, r1
 800e5bc:	0011      	movs	r1, r2
 800e5be:	1cbb      	adds	r3, r7, #2
 800e5c0:	1c02      	adds	r2, r0, #0
 800e5c2:	801a      	strh	r2, [r3, #0]
 800e5c4:	1c7b      	adds	r3, r7, #1
 800e5c6:	1c0a      	adds	r2, r1, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e5ca:	1c7b      	adds	r3, r7, #1
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e5d2:	1cbb      	adds	r3, r7, #2
 800e5d4:	881a      	ldrh	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e5da:	e003      	b.n	800e5e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e5dc:	1cbb      	adds	r3, r7, #2
 800e5de:	881a      	ldrh	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e5e4:	46c0      	nop			@ (mov r8, r8)
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	b002      	add	sp, #8
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e082      	b.n	800e704 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2241      	movs	r2, #65	@ 0x41
 800e602:	5c9b      	ldrb	r3, [r3, r2]
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d107      	bne.n	800e61a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2240      	movs	r2, #64	@ 0x40
 800e60e:	2100      	movs	r1, #0
 800e610:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	0018      	movs	r0, r3
 800e616:	f7fe fca3 	bl	800cf60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2241      	movs	r2, #65	@ 0x41
 800e61e:	2124      	movs	r1, #36	@ 0x24
 800e620:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2101      	movs	r1, #1
 800e62e:	438a      	bics	r2, r1
 800e630:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4934      	ldr	r1, [pc, #208]	@ (800e70c <HAL_I2C_Init+0x120>)
 800e63c:	400a      	ands	r2, r1
 800e63e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689a      	ldr	r2, [r3, #8]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4931      	ldr	r1, [pc, #196]	@ (800e710 <HAL_I2C_Init+0x124>)
 800e64c:	400a      	ands	r2, r1
 800e64e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d108      	bne.n	800e66a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2180      	movs	r1, #128	@ 0x80
 800e662:	0209      	lsls	r1, r1, #8
 800e664:	430a      	orrs	r2, r1
 800e666:	609a      	str	r2, [r3, #8]
 800e668:	e007      	b.n	800e67a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	689a      	ldr	r2, [r3, #8]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2184      	movs	r1, #132	@ 0x84
 800e674:	0209      	lsls	r1, r1, #8
 800e676:	430a      	orrs	r2, r1
 800e678:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d104      	bne.n	800e68c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2280      	movs	r2, #128	@ 0x80
 800e688:	0112      	lsls	r2, r2, #4
 800e68a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	491f      	ldr	r1, [pc, #124]	@ (800e714 <HAL_I2C_Init+0x128>)
 800e698:	430a      	orrs	r2, r1
 800e69a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68da      	ldr	r2, [r3, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	491a      	ldr	r1, [pc, #104]	@ (800e710 <HAL_I2C_Init+0x124>)
 800e6a8:	400a      	ands	r2, r1
 800e6aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	691a      	ldr	r2, [r3, #16]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	69d9      	ldr	r1, [r3, #28]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a1a      	ldr	r2, [r3, #32]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	430a      	orrs	r2, r1
 800e6d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2241      	movs	r2, #65	@ 0x41
 800e6f0:	2120      	movs	r1, #32
 800e6f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2242      	movs	r2, #66	@ 0x42
 800e6fe:	2100      	movs	r1, #0
 800e700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	0018      	movs	r0, r3
 800e706:	46bd      	mov	sp, r7
 800e708:	b002      	add	sp, #8
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	f0ffffff 	.word	0xf0ffffff
 800e710:	ffff7fff 	.word	0xffff7fff
 800e714:	02008000 	.word	0x02008000

0800e718 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e718:	b590      	push	{r4, r7, lr}
 800e71a:	b089      	sub	sp, #36	@ 0x24
 800e71c:	af02      	add	r7, sp, #8
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	0008      	movs	r0, r1
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	0019      	movs	r1, r3
 800e726:	230a      	movs	r3, #10
 800e728:	18fb      	adds	r3, r7, r3
 800e72a:	1c02      	adds	r2, r0, #0
 800e72c:	801a      	strh	r2, [r3, #0]
 800e72e:	2308      	movs	r3, #8
 800e730:	18fb      	adds	r3, r7, r3
 800e732:	1c0a      	adds	r2, r1, #0
 800e734:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2241      	movs	r2, #65	@ 0x41
 800e73a:	5c9b      	ldrb	r3, [r3, r2]
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d000      	beq.n	800e744 <HAL_I2C_Master_Transmit+0x2c>
 800e742:	e0e7      	b.n	800e914 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2240      	movs	r2, #64	@ 0x40
 800e748:	5c9b      	ldrb	r3, [r3, r2]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d101      	bne.n	800e752 <HAL_I2C_Master_Transmit+0x3a>
 800e74e:	2302      	movs	r3, #2
 800e750:	e0e1      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2240      	movs	r2, #64	@ 0x40
 800e756:	2101      	movs	r1, #1
 800e758:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e75a:	f7ff f953 	bl	800da04 <HAL_GetTick>
 800e75e:	0003      	movs	r3, r0
 800e760:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e762:	2380      	movs	r3, #128	@ 0x80
 800e764:	0219      	lsls	r1, r3, #8
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	2319      	movs	r3, #25
 800e76e:	2201      	movs	r2, #1
 800e770:	f001 fa82 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800e774:	1e03      	subs	r3, r0, #0
 800e776:	d001      	beq.n	800e77c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800e778:	2301      	movs	r3, #1
 800e77a:	e0cc      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2241      	movs	r2, #65	@ 0x41
 800e780:	2121      	movs	r1, #33	@ 0x21
 800e782:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2242      	movs	r2, #66	@ 0x42
 800e788:	2110      	movs	r1, #16
 800e78a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2208      	movs	r2, #8
 800e79c:	18ba      	adds	r2, r7, r2
 800e79e:	8812      	ldrh	r2, [r2, #0]
 800e7a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	2bff      	cmp	r3, #255	@ 0xff
 800e7b0:	d911      	bls.n	800e7d6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	22ff      	movs	r2, #255	@ 0xff
 800e7b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	2380      	movs	r3, #128	@ 0x80
 800e7c0:	045c      	lsls	r4, r3, #17
 800e7c2:	230a      	movs	r3, #10
 800e7c4:	18fb      	adds	r3, r7, r3
 800e7c6:	8819      	ldrh	r1, [r3, #0]
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	4b55      	ldr	r3, [pc, #340]	@ (800e920 <HAL_I2C_Master_Transmit+0x208>)
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	0023      	movs	r3, r4
 800e7d0:	f001 fc8e 	bl	80100f0 <I2C_TransferConfig>
 800e7d4:	e075      	b.n	800e8c2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7e4:	b2da      	uxtb	r2, r3
 800e7e6:	2380      	movs	r3, #128	@ 0x80
 800e7e8:	049c      	lsls	r4, r3, #18
 800e7ea:	230a      	movs	r3, #10
 800e7ec:	18fb      	adds	r3, r7, r3
 800e7ee:	8819      	ldrh	r1, [r3, #0]
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	4b4b      	ldr	r3, [pc, #300]	@ (800e920 <HAL_I2C_Master_Transmit+0x208>)
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	0023      	movs	r3, r4
 800e7f8:	f001 fc7a 	bl	80100f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e7fc:	e061      	b.n	800e8c2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	0018      	movs	r0, r3
 800e806:	f001 fa76 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e80a:	1e03      	subs	r3, r0, #0
 800e80c:	d001      	beq.n	800e812 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800e80e:	2301      	movs	r3, #1
 800e810:	e081      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e816:	781a      	ldrb	r2, [r3, #0]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	3b01      	subs	r3, #1
 800e830:	b29a      	uxth	r2, r3
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e83a:	3b01      	subs	r3, #1
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e846:	b29b      	uxth	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d03a      	beq.n	800e8c2 <HAL_I2C_Master_Transmit+0x1aa>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e850:	2b00      	cmp	r3, #0
 800e852:	d136      	bne.n	800e8c2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	0013      	movs	r3, r2
 800e85e:	2200      	movs	r2, #0
 800e860:	2180      	movs	r1, #128	@ 0x80
 800e862:	f001 fa09 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800e866:	1e03      	subs	r3, r0, #0
 800e868:	d001      	beq.n	800e86e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e053      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e872:	b29b      	uxth	r3, r3
 800e874:	2bff      	cmp	r3, #255	@ 0xff
 800e876:	d911      	bls.n	800e89c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	22ff      	movs	r2, #255	@ 0xff
 800e87c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e882:	b2da      	uxtb	r2, r3
 800e884:	2380      	movs	r3, #128	@ 0x80
 800e886:	045c      	lsls	r4, r3, #17
 800e888:	230a      	movs	r3, #10
 800e88a:	18fb      	adds	r3, r7, r3
 800e88c:	8819      	ldrh	r1, [r3, #0]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	2300      	movs	r3, #0
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	0023      	movs	r3, r4
 800e896:	f001 fc2b 	bl	80100f0 <I2C_TransferConfig>
 800e89a:	e012      	b.n	800e8c2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	2380      	movs	r3, #128	@ 0x80
 800e8ae:	049c      	lsls	r4, r3, #18
 800e8b0:	230a      	movs	r3, #10
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	8819      	ldrh	r1, [r3, #0]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	0023      	movs	r3, r4
 800e8be:	f001 fc17 	bl	80100f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d198      	bne.n	800e7fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e8cc:	697a      	ldr	r2, [r7, #20]
 800e8ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	f001 fa4e 	bl	800fd74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e8d8:	1e03      	subs	r3, r0, #0
 800e8da:	d001      	beq.n	800e8e0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e01a      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	490c      	ldr	r1, [pc, #48]	@ (800e924 <HAL_I2C_Master_Transmit+0x20c>)
 800e8f4:	400a      	ands	r2, r1
 800e8f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2241      	movs	r2, #65	@ 0x41
 800e8fc:	2120      	movs	r1, #32
 800e8fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2242      	movs	r2, #66	@ 0x42
 800e904:	2100      	movs	r1, #0
 800e906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2240      	movs	r2, #64	@ 0x40
 800e90c:	2100      	movs	r1, #0
 800e90e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800e910:	2300      	movs	r3, #0
 800e912:	e000      	b.n	800e916 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800e914:	2302      	movs	r3, #2
  }
}
 800e916:	0018      	movs	r0, r3
 800e918:	46bd      	mov	sp, r7
 800e91a:	b007      	add	sp, #28
 800e91c:	bd90      	pop	{r4, r7, pc}
 800e91e:	46c0      	nop			@ (mov r8, r8)
 800e920:	80002000 	.word	0x80002000
 800e924:	fe00e800 	.word	0xfe00e800

0800e928 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e928:	b590      	push	{r4, r7, lr}
 800e92a:	b089      	sub	sp, #36	@ 0x24
 800e92c:	af02      	add	r7, sp, #8
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	0008      	movs	r0, r1
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	0019      	movs	r1, r3
 800e936:	230a      	movs	r3, #10
 800e938:	18fb      	adds	r3, r7, r3
 800e93a:	1c02      	adds	r2, r0, #0
 800e93c:	801a      	strh	r2, [r3, #0]
 800e93e:	2308      	movs	r3, #8
 800e940:	18fb      	adds	r3, r7, r3
 800e942:	1c0a      	adds	r2, r1, #0
 800e944:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2241      	movs	r2, #65	@ 0x41
 800e94a:	5c9b      	ldrb	r3, [r3, r2]
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b20      	cmp	r3, #32
 800e950:	d000      	beq.n	800e954 <HAL_I2C_Master_Receive+0x2c>
 800e952:	e0e8      	b.n	800eb26 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2240      	movs	r2, #64	@ 0x40
 800e958:	5c9b      	ldrb	r3, [r3, r2]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d101      	bne.n	800e962 <HAL_I2C_Master_Receive+0x3a>
 800e95e:	2302      	movs	r3, #2
 800e960:	e0e2      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2240      	movs	r2, #64	@ 0x40
 800e966:	2101      	movs	r1, #1
 800e968:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e96a:	f7ff f84b 	bl	800da04 <HAL_GetTick>
 800e96e:	0003      	movs	r3, r0
 800e970:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e972:	2380      	movs	r3, #128	@ 0x80
 800e974:	0219      	lsls	r1, r3, #8
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	2319      	movs	r3, #25
 800e97e:	2201      	movs	r2, #1
 800e980:	f001 f97a 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800e984:	1e03      	subs	r3, r0, #0
 800e986:	d001      	beq.n	800e98c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e0cd      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2241      	movs	r2, #65	@ 0x41
 800e990:	2122      	movs	r1, #34	@ 0x22
 800e992:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2242      	movs	r2, #66	@ 0x42
 800e998:	2110      	movs	r1, #16
 800e99a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2208      	movs	r2, #8
 800e9ac:	18ba      	adds	r2, r7, r2
 800e9ae:	8812      	ldrh	r2, [r2, #0]
 800e9b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	2bff      	cmp	r3, #255	@ 0xff
 800e9c0:	d911      	bls.n	800e9e6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	22ff      	movs	r2, #255	@ 0xff
 800e9c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	2380      	movs	r3, #128	@ 0x80
 800e9d0:	045c      	lsls	r4, r3, #17
 800e9d2:	230a      	movs	r3, #10
 800e9d4:	18fb      	adds	r3, r7, r3
 800e9d6:	8819      	ldrh	r1, [r3, #0]
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	4b55      	ldr	r3, [pc, #340]	@ (800eb30 <HAL_I2C_Master_Receive+0x208>)
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	0023      	movs	r3, r4
 800e9e0:	f001 fb86 	bl	80100f0 <I2C_TransferConfig>
 800e9e4:	e076      	b.n	800ead4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	2380      	movs	r3, #128	@ 0x80
 800e9f8:	049c      	lsls	r4, r3, #18
 800e9fa:	230a      	movs	r3, #10
 800e9fc:	18fb      	adds	r3, r7, r3
 800e9fe:	8819      	ldrh	r1, [r3, #0]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	4b4b      	ldr	r3, [pc, #300]	@ (800eb30 <HAL_I2C_Master_Receive+0x208>)
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	0023      	movs	r3, r4
 800ea08:	f001 fb72 	bl	80100f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ea0c:	e062      	b.n	800ead4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	0018      	movs	r0, r3
 800ea16:	f001 f9e9 	bl	800fdec <I2C_WaitOnRXNEFlagUntilTimeout>
 800ea1a:	1e03      	subs	r3, r0, #0
 800ea1c:	d001      	beq.n	800ea22 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e082      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea2c:	b2d2      	uxtb	r2, r2
 800ea2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea34:	1c5a      	adds	r2, r3, #1
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d03a      	beq.n	800ead4 <HAL_I2C_Master_Receive+0x1ac>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d136      	bne.n	800ead4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	0013      	movs	r3, r2
 800ea70:	2200      	movs	r2, #0
 800ea72:	2180      	movs	r1, #128	@ 0x80
 800ea74:	f001 f900 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800ea78:	1e03      	subs	r3, r0, #0
 800ea7a:	d001      	beq.n	800ea80 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e053      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	2bff      	cmp	r3, #255	@ 0xff
 800ea88:	d911      	bls.n	800eaae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	22ff      	movs	r2, #255	@ 0xff
 800ea8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea94:	b2da      	uxtb	r2, r3
 800ea96:	2380      	movs	r3, #128	@ 0x80
 800ea98:	045c      	lsls	r4, r3, #17
 800ea9a:	230a      	movs	r3, #10
 800ea9c:	18fb      	adds	r3, r7, r3
 800ea9e:	8819      	ldrh	r1, [r3, #0]
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	0023      	movs	r3, r4
 800eaa8:	f001 fb22 	bl	80100f0 <I2C_TransferConfig>
 800eaac:	e012      	b.n	800ead4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	2380      	movs	r3, #128	@ 0x80
 800eac0:	049c      	lsls	r4, r3, #18
 800eac2:	230a      	movs	r3, #10
 800eac4:	18fb      	adds	r3, r7, r3
 800eac6:	8819      	ldrh	r1, [r3, #0]
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	0023      	movs	r3, r4
 800ead0:	f001 fb0e 	bl	80100f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ead8:	b29b      	uxth	r3, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d197      	bne.n	800ea0e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	0018      	movs	r0, r3
 800eae6:	f001 f945 	bl	800fd74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eaea:	1e03      	subs	r3, r0, #0
 800eaec:	d001      	beq.n	800eaf2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e01a      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2220      	movs	r2, #32
 800eaf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	490b      	ldr	r1, [pc, #44]	@ (800eb34 <HAL_I2C_Master_Receive+0x20c>)
 800eb06:	400a      	ands	r2, r1
 800eb08:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2241      	movs	r2, #65	@ 0x41
 800eb0e:	2120      	movs	r1, #32
 800eb10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2242      	movs	r2, #66	@ 0x42
 800eb16:	2100      	movs	r1, #0
 800eb18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2240      	movs	r2, #64	@ 0x40
 800eb1e:	2100      	movs	r1, #0
 800eb20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e000      	b.n	800eb28 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800eb26:	2302      	movs	r3, #2
  }
}
 800eb28:	0018      	movs	r0, r3
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	b007      	add	sp, #28
 800eb2e:	bd90      	pop	{r4, r7, pc}
 800eb30:	80002400 	.word	0x80002400
 800eb34:	fe00e800 	.word	0xfe00e800

0800eb38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b089      	sub	sp, #36	@ 0x24
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	000c      	movs	r4, r1
 800eb42:	0010      	movs	r0, r2
 800eb44:	0019      	movs	r1, r3
 800eb46:	230a      	movs	r3, #10
 800eb48:	18fb      	adds	r3, r7, r3
 800eb4a:	1c22      	adds	r2, r4, #0
 800eb4c:	801a      	strh	r2, [r3, #0]
 800eb4e:	2308      	movs	r3, #8
 800eb50:	18fb      	adds	r3, r7, r3
 800eb52:	1c02      	adds	r2, r0, #0
 800eb54:	801a      	strh	r2, [r3, #0]
 800eb56:	1dbb      	adds	r3, r7, #6
 800eb58:	1c0a      	adds	r2, r1, #0
 800eb5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2241      	movs	r2, #65	@ 0x41
 800eb60:	5c9b      	ldrb	r3, [r3, r2]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b20      	cmp	r3, #32
 800eb66:	d000      	beq.n	800eb6a <HAL_I2C_Mem_Write+0x32>
 800eb68:	e10c      	b.n	800ed84 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d004      	beq.n	800eb7a <HAL_I2C_Mem_Write+0x42>
 800eb70:	232c      	movs	r3, #44	@ 0x2c
 800eb72:	18fb      	adds	r3, r7, r3
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d105      	bne.n	800eb86 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2280      	movs	r2, #128	@ 0x80
 800eb7e:	0092      	lsls	r2, r2, #2
 800eb80:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e0ff      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2240      	movs	r2, #64	@ 0x40
 800eb8a:	5c9b      	ldrb	r3, [r3, r2]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d101      	bne.n	800eb94 <HAL_I2C_Mem_Write+0x5c>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e0f8      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2240      	movs	r2, #64	@ 0x40
 800eb98:	2101      	movs	r1, #1
 800eb9a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eb9c:	f7fe ff32 	bl	800da04 <HAL_GetTick>
 800eba0:	0003      	movs	r3, r0
 800eba2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800eba4:	2380      	movs	r3, #128	@ 0x80
 800eba6:	0219      	lsls	r1, r3, #8
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	2319      	movs	r3, #25
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	f001 f861 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800ebb6:	1e03      	subs	r3, r0, #0
 800ebb8:	d001      	beq.n	800ebbe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e0e3      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2241      	movs	r2, #65	@ 0x41
 800ebc2:	2121      	movs	r1, #33	@ 0x21
 800ebc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2242      	movs	r2, #66	@ 0x42
 800ebca:	2140      	movs	r1, #64	@ 0x40
 800ebcc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	222c      	movs	r2, #44	@ 0x2c
 800ebde:	18ba      	adds	r2, r7, r2
 800ebe0:	8812      	ldrh	r2, [r2, #0]
 800ebe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ebea:	1dbb      	adds	r3, r7, #6
 800ebec:	881c      	ldrh	r4, [r3, #0]
 800ebee:	2308      	movs	r3, #8
 800ebf0:	18fb      	adds	r3, r7, r3
 800ebf2:	881a      	ldrh	r2, [r3, #0]
 800ebf4:	230a      	movs	r3, #10
 800ebf6:	18fb      	adds	r3, r7, r3
 800ebf8:	8819      	ldrh	r1, [r3, #0]
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	0023      	movs	r3, r4
 800ec06:	f000 fba5 	bl	800f354 <I2C_RequestMemoryWrite>
 800ec0a:	1e03      	subs	r3, r0, #0
 800ec0c:	d005      	beq.n	800ec1a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2240      	movs	r2, #64	@ 0x40
 800ec12:	2100      	movs	r1, #0
 800ec14:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	e0b5      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	2bff      	cmp	r3, #255	@ 0xff
 800ec22:	d911      	bls.n	800ec48 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	22ff      	movs	r2, #255	@ 0xff
 800ec28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	2380      	movs	r3, #128	@ 0x80
 800ec32:	045c      	lsls	r4, r3, #17
 800ec34:	230a      	movs	r3, #10
 800ec36:	18fb      	adds	r3, r7, r3
 800ec38:	8819      	ldrh	r1, [r3, #0]
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	0023      	movs	r3, r4
 800ec42:	f001 fa55 	bl	80100f0 <I2C_TransferConfig>
 800ec46:	e012      	b.n	800ec6e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	2380      	movs	r3, #128	@ 0x80
 800ec5a:	049c      	lsls	r4, r3, #18
 800ec5c:	230a      	movs	r3, #10
 800ec5e:	18fb      	adds	r3, r7, r3
 800ec60:	8819      	ldrh	r1, [r3, #0]
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	2300      	movs	r3, #0
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	0023      	movs	r3, r4
 800ec6a:	f001 fa41 	bl	80100f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	0018      	movs	r0, r3
 800ec76:	f001 f83e 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ec7a:	1e03      	subs	r3, r0, #0
 800ec7c:	d001      	beq.n	800ec82 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e081      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec86:	781a      	ldrb	r2, [r3, #0]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d03a      	beq.n	800ed32 <HAL_I2C_Mem_Write+0x1fa>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d136      	bne.n	800ed32 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ecc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	0013      	movs	r3, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	2180      	movs	r1, #128	@ 0x80
 800ecd2:	f000 ffd1 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800ecd6:	1e03      	subs	r3, r0, #0
 800ecd8:	d001      	beq.n	800ecde <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e053      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	2bff      	cmp	r3, #255	@ 0xff
 800ece6:	d911      	bls.n	800ed0c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	22ff      	movs	r2, #255	@ 0xff
 800ecec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	2380      	movs	r3, #128	@ 0x80
 800ecf6:	045c      	lsls	r4, r3, #17
 800ecf8:	230a      	movs	r3, #10
 800ecfa:	18fb      	adds	r3, r7, r3
 800ecfc:	8819      	ldrh	r1, [r3, #0]
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	2300      	movs	r3, #0
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	0023      	movs	r3, r4
 800ed06:	f001 f9f3 	bl	80100f0 <I2C_TransferConfig>
 800ed0a:	e012      	b.n	800ed32 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed1a:	b2da      	uxtb	r2, r3
 800ed1c:	2380      	movs	r3, #128	@ 0x80
 800ed1e:	049c      	lsls	r4, r3, #18
 800ed20:	230a      	movs	r3, #10
 800ed22:	18fb      	adds	r3, r7, r3
 800ed24:	8819      	ldrh	r1, [r3, #0]
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	0023      	movs	r3, r4
 800ed2e:	f001 f9df 	bl	80100f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d198      	bne.n	800ec6e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed3c:	697a      	ldr	r2, [r7, #20]
 800ed3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	0018      	movs	r0, r3
 800ed44:	f001 f816 	bl	800fd74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed48:	1e03      	subs	r3, r0, #0
 800ed4a:	d001      	beq.n	800ed50 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e01a      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2220      	movs	r2, #32
 800ed56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	490b      	ldr	r1, [pc, #44]	@ (800ed90 <HAL_I2C_Mem_Write+0x258>)
 800ed64:	400a      	ands	r2, r1
 800ed66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2241      	movs	r2, #65	@ 0x41
 800ed6c:	2120      	movs	r1, #32
 800ed6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2242      	movs	r2, #66	@ 0x42
 800ed74:	2100      	movs	r1, #0
 800ed76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2240      	movs	r2, #64	@ 0x40
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e000      	b.n	800ed86 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800ed84:	2302      	movs	r3, #2
  }
}
 800ed86:	0018      	movs	r0, r3
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	b007      	add	sp, #28
 800ed8c:	bd90      	pop	{r4, r7, pc}
 800ed8e:	46c0      	nop			@ (mov r8, r8)
 800ed90:	fe00e800 	.word	0xfe00e800

0800ed94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed94:	b590      	push	{r4, r7, lr}
 800ed96:	b089      	sub	sp, #36	@ 0x24
 800ed98:	af02      	add	r7, sp, #8
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	000c      	movs	r4, r1
 800ed9e:	0010      	movs	r0, r2
 800eda0:	0019      	movs	r1, r3
 800eda2:	230a      	movs	r3, #10
 800eda4:	18fb      	adds	r3, r7, r3
 800eda6:	1c22      	adds	r2, r4, #0
 800eda8:	801a      	strh	r2, [r3, #0]
 800edaa:	2308      	movs	r3, #8
 800edac:	18fb      	adds	r3, r7, r3
 800edae:	1c02      	adds	r2, r0, #0
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	1dbb      	adds	r3, r7, #6
 800edb4:	1c0a      	adds	r2, r1, #0
 800edb6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2241      	movs	r2, #65	@ 0x41
 800edbc:	5c9b      	ldrb	r3, [r3, r2]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b20      	cmp	r3, #32
 800edc2:	d000      	beq.n	800edc6 <HAL_I2C_Mem_Read+0x32>
 800edc4:	e110      	b.n	800efe8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800edc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <HAL_I2C_Mem_Read+0x42>
 800edcc:	232c      	movs	r3, #44	@ 0x2c
 800edce:	18fb      	adds	r3, r7, r3
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d105      	bne.n	800ede2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2280      	movs	r2, #128	@ 0x80
 800edda:	0092      	lsls	r2, r2, #2
 800eddc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800edde:	2301      	movs	r3, #1
 800ede0:	e103      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2240      	movs	r2, #64	@ 0x40
 800ede6:	5c9b      	ldrb	r3, [r3, r2]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d101      	bne.n	800edf0 <HAL_I2C_Mem_Read+0x5c>
 800edec:	2302      	movs	r3, #2
 800edee:	e0fc      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2240      	movs	r2, #64	@ 0x40
 800edf4:	2101      	movs	r1, #1
 800edf6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800edf8:	f7fe fe04 	bl	800da04 <HAL_GetTick>
 800edfc:	0003      	movs	r3, r0
 800edfe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ee00:	2380      	movs	r3, #128	@ 0x80
 800ee02:	0219      	lsls	r1, r3, #8
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	2319      	movs	r3, #25
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f000 ff33 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800ee12:	1e03      	subs	r3, r0, #0
 800ee14:	d001      	beq.n	800ee1a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e0e7      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2241      	movs	r2, #65	@ 0x41
 800ee1e:	2122      	movs	r1, #34	@ 0x22
 800ee20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2242      	movs	r2, #66	@ 0x42
 800ee26:	2140      	movs	r1, #64	@ 0x40
 800ee28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	222c      	movs	r2, #44	@ 0x2c
 800ee3a:	18ba      	adds	r2, r7, r2
 800ee3c:	8812      	ldrh	r2, [r2, #0]
 800ee3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ee46:	1dbb      	adds	r3, r7, #6
 800ee48:	881c      	ldrh	r4, [r3, #0]
 800ee4a:	2308      	movs	r3, #8
 800ee4c:	18fb      	adds	r3, r7, r3
 800ee4e:	881a      	ldrh	r2, [r3, #0]
 800ee50:	230a      	movs	r3, #10
 800ee52:	18fb      	adds	r3, r7, r3
 800ee54:	8819      	ldrh	r1, [r3, #0]
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	0023      	movs	r3, r4
 800ee62:	f000 fadb 	bl	800f41c <I2C_RequestMemoryRead>
 800ee66:	1e03      	subs	r3, r0, #0
 800ee68:	d005      	beq.n	800ee76 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2240      	movs	r2, #64	@ 0x40
 800ee6e:	2100      	movs	r1, #0
 800ee70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e0b9      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d911      	bls.n	800eea4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	22ff      	movs	r2, #255	@ 0xff
 800ee84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	2380      	movs	r3, #128	@ 0x80
 800ee8e:	045c      	lsls	r4, r3, #17
 800ee90:	230a      	movs	r3, #10
 800ee92:	18fb      	adds	r3, r7, r3
 800ee94:	8819      	ldrh	r1, [r3, #0]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	4b56      	ldr	r3, [pc, #344]	@ (800eff4 <HAL_I2C_Mem_Read+0x260>)
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	0023      	movs	r3, r4
 800ee9e:	f001 f927 	bl	80100f0 <I2C_TransferConfig>
 800eea2:	e012      	b.n	800eeca <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eea8:	b29a      	uxth	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	2380      	movs	r3, #128	@ 0x80
 800eeb6:	049c      	lsls	r4, r3, #18
 800eeb8:	230a      	movs	r3, #10
 800eeba:	18fb      	adds	r3, r7, r3
 800eebc:	8819      	ldrh	r1, [r3, #0]
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	4b4c      	ldr	r3, [pc, #304]	@ (800eff4 <HAL_I2C_Mem_Read+0x260>)
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	0023      	movs	r3, r4
 800eec6:	f001 f913 	bl	80100f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800eeca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	0013      	movs	r3, r2
 800eed4:	2200      	movs	r2, #0
 800eed6:	2104      	movs	r1, #4
 800eed8:	f000 fece 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800eedc:	1e03      	subs	r3, r0, #0
 800eede:	d001      	beq.n	800eee4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800eee0:	2301      	movs	r3, #1
 800eee2:	e082      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeee:	b2d2      	uxtb	r2, r2
 800eef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef6:	1c5a      	adds	r2, r3, #1
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	b29a      	uxth	r2, r3
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d03a      	beq.n	800ef96 <HAL_I2C_Mem_Read+0x202>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d136      	bne.n	800ef96 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ef28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	0013      	movs	r3, r2
 800ef32:	2200      	movs	r2, #0
 800ef34:	2180      	movs	r1, #128	@ 0x80
 800ef36:	f000 fe9f 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800ef3a:	1e03      	subs	r3, r0, #0
 800ef3c:	d001      	beq.n	800ef42 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e053      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	2bff      	cmp	r3, #255	@ 0xff
 800ef4a:	d911      	bls.n	800ef70 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	22ff      	movs	r2, #255	@ 0xff
 800ef50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	2380      	movs	r3, #128	@ 0x80
 800ef5a:	045c      	lsls	r4, r3, #17
 800ef5c:	230a      	movs	r3, #10
 800ef5e:	18fb      	adds	r3, r7, r3
 800ef60:	8819      	ldrh	r1, [r3, #0]
 800ef62:	68f8      	ldr	r0, [r7, #12]
 800ef64:	2300      	movs	r3, #0
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	0023      	movs	r3, r4
 800ef6a:	f001 f8c1 	bl	80100f0 <I2C_TransferConfig>
 800ef6e:	e012      	b.n	800ef96 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	2380      	movs	r3, #128	@ 0x80
 800ef82:	049c      	lsls	r4, r3, #18
 800ef84:	230a      	movs	r3, #10
 800ef86:	18fb      	adds	r3, r7, r3
 800ef88:	8819      	ldrh	r1, [r3, #0]
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	0023      	movs	r3, r4
 800ef92:	f001 f8ad 	bl	80100f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d194      	bne.n	800eeca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800efa0:	697a      	ldr	r2, [r7, #20]
 800efa2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	0018      	movs	r0, r3
 800efa8:	f000 fee4 	bl	800fd74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800efac:	1e03      	subs	r3, r0, #0
 800efae:	d001      	beq.n	800efb4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800efb0:	2301      	movs	r3, #1
 800efb2:	e01a      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2220      	movs	r2, #32
 800efba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	490c      	ldr	r1, [pc, #48]	@ (800eff8 <HAL_I2C_Mem_Read+0x264>)
 800efc8:	400a      	ands	r2, r1
 800efca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2241      	movs	r2, #65	@ 0x41
 800efd0:	2120      	movs	r1, #32
 800efd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2242      	movs	r2, #66	@ 0x42
 800efd8:	2100      	movs	r1, #0
 800efda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2240      	movs	r2, #64	@ 0x40
 800efe0:	2100      	movs	r1, #0
 800efe2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	e000      	b.n	800efea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800efe8:	2302      	movs	r3, #2
  }
}
 800efea:	0018      	movs	r0, r3
 800efec:	46bd      	mov	sp, r7
 800efee:	b007      	add	sp, #28
 800eff0:	bd90      	pop	{r4, r7, pc}
 800eff2:	46c0      	nop			@ (mov r8, r8)
 800eff4:	80002400 	.word	0x80002400
 800eff8:	fe00e800 	.word	0xfe00e800

0800effc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d005      	beq.n	800f028 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	68f9      	ldr	r1, [r7, #12]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
  }
}
 800f028:	46c0      	nop			@ (mov r8, r8)
 800f02a:	46bd      	mov	sp, r7
 800f02c:	b004      	add	sp, #16
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f048:	697a      	ldr	r2, [r7, #20]
 800f04a:	2380      	movs	r3, #128	@ 0x80
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4013      	ands	r3, r2
 800f050:	d00e      	beq.n	800f070 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	2280      	movs	r2, #128	@ 0x80
 800f056:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f058:	d00a      	beq.n	800f070 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f05e:	2201      	movs	r2, #1
 800f060:	431a      	orrs	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2280      	movs	r2, #128	@ 0x80
 800f06c:	0052      	lsls	r2, r2, #1
 800f06e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	2380      	movs	r3, #128	@ 0x80
 800f074:	00db      	lsls	r3, r3, #3
 800f076:	4013      	ands	r3, r2
 800f078:	d00e      	beq.n	800f098 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2280      	movs	r2, #128	@ 0x80
 800f07e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f080:	d00a      	beq.n	800f098 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f086:	2208      	movs	r2, #8
 800f088:	431a      	orrs	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2280      	movs	r2, #128	@ 0x80
 800f094:	00d2      	lsls	r2, r2, #3
 800f096:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f098:	697a      	ldr	r2, [r7, #20]
 800f09a:	2380      	movs	r3, #128	@ 0x80
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4013      	ands	r3, r2
 800f0a0:	d00e      	beq.n	800f0c0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	2280      	movs	r2, #128	@ 0x80
 800f0a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f0a8:	d00a      	beq.n	800f0c0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2280      	movs	r2, #128	@ 0x80
 800f0bc:	0092      	lsls	r2, r2, #2
 800f0be:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0c4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	220b      	movs	r2, #11
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	d005      	beq.n	800f0da <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	0011      	movs	r1, r2
 800f0d4:	0018      	movs	r0, r3
 800f0d6:	f000 fc83 	bl	800f9e0 <I2C_ITError>
  }
}
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b006      	add	sp, #24
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f0ea:	46c0      	nop			@ (mov r8, r8)
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	b002      	add	sp, #8
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b082      	sub	sp, #8
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f0fa:	46c0      	nop			@ (mov r8, r8)
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	b002      	add	sp, #8
 800f100:	bd80      	pop	{r7, pc}

0800f102 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	0008      	movs	r0, r1
 800f10c:	0011      	movs	r1, r2
 800f10e:	1cfb      	adds	r3, r7, #3
 800f110:	1c02      	adds	r2, r0, #0
 800f112:	701a      	strb	r2, [r3, #0]
 800f114:	003b      	movs	r3, r7
 800f116:	1c0a      	adds	r2, r1, #0
 800f118:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f11a:	46c0      	nop			@ (mov r8, r8)
 800f11c:	46bd      	mov	sp, r7
 800f11e:	b002      	add	sp, #8
 800f120:	bd80      	pop	{r7, pc}

0800f122 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b082      	sub	sp, #8
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f12a:	46c0      	nop			@ (mov r8, r8)
 800f12c:	46bd      	mov	sp, r7
 800f12e:	b002      	add	sp, #8
 800f130:	bd80      	pop	{r7, pc}

0800f132 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f13a:	46c0      	nop			@ (mov r8, r8)
 800f13c:	46bd      	mov	sp, r7
 800f13e:	b002      	add	sp, #8
 800f140:	bd80      	pop	{r7, pc}

0800f142 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b082      	sub	sp, #8
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f14a:	46c0      	nop			@ (mov r8, r8)
 800f14c:	46bd      	mov	sp, r7
 800f14e:	b002      	add	sp, #8
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f164:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2240      	movs	r2, #64	@ 0x40
 800f16e:	5c9b      	ldrb	r3, [r3, r2]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <I2C_Slave_ISR_IT+0x24>
 800f174:	2302      	movs	r3, #2
 800f176:	e0e6      	b.n	800f346 <I2C_Slave_ISR_IT+0x1f2>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2240      	movs	r2, #64	@ 0x40
 800f17c:	2101      	movs	r1, #1
 800f17e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	2220      	movs	r2, #32
 800f184:	4013      	ands	r3, r2
 800f186:	d009      	beq.n	800f19c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f18e:	d005      	beq.n	800f19c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f190:	693a      	ldr	r2, [r7, #16]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	0011      	movs	r1, r2
 800f196:	0018      	movs	r0, r3
 800f198:	f000 faaa 	bl	800f6f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	2210      	movs	r2, #16
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	d052      	beq.n	800f24a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2210      	movs	r2, #16
 800f1a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f1aa:	d04e      	beq.n	800f24a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d12d      	bne.n	800f212 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2241      	movs	r2, #65	@ 0x41
 800f1ba:	5c9b      	ldrb	r3, [r3, r2]
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	2b28      	cmp	r3, #40	@ 0x28
 800f1c0:	d10b      	bne.n	800f1da <I2C_Slave_ISR_IT+0x86>
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	2380      	movs	r3, #128	@ 0x80
 800f1c6:	049b      	lsls	r3, r3, #18
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d106      	bne.n	800f1da <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	0011      	movs	r1, r2
 800f1d2:	0018      	movs	r0, r3
 800f1d4:	f000 fbac 	bl	800f930 <I2C_ITListenCplt>
 800f1d8:	e036      	b.n	800f248 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2241      	movs	r2, #65	@ 0x41
 800f1de:	5c9b      	ldrb	r3, [r3, r2]
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	2b29      	cmp	r3, #41	@ 0x29
 800f1e4:	d110      	bne.n	800f208 <I2C_Slave_ISR_IT+0xb4>
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	4a59      	ldr	r2, [pc, #356]	@ (800f350 <I2C_Slave_ISR_IT+0x1fc>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d00c      	beq.n	800f208 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2210      	movs	r2, #16
 800f1f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f000 fcfc 	bl	800fbf6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	0018      	movs	r0, r3
 800f202:	f000 fa11 	bl	800f628 <I2C_ITSlaveSeqCplt>
 800f206:	e01f      	b.n	800f248 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2210      	movs	r2, #16
 800f20e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f210:	e091      	b.n	800f336 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2210      	movs	r2, #16
 800f218:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f21e:	2204      	movs	r2, #4
 800f220:	431a      	orrs	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d005      	beq.n	800f238 <I2C_Slave_ISR_IT+0xe4>
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	2380      	movs	r3, #128	@ 0x80
 800f230:	045b      	lsls	r3, r3, #17
 800f232:	429a      	cmp	r2, r3
 800f234:	d000      	beq.n	800f238 <I2C_Slave_ISR_IT+0xe4>
 800f236:	e07e      	b.n	800f336 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	0011      	movs	r1, r2
 800f240:	0018      	movs	r0, r3
 800f242:	f000 fbcd 	bl	800f9e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f246:	e076      	b.n	800f336 <I2C_Slave_ISR_IT+0x1e2>
 800f248:	e075      	b.n	800f336 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2204      	movs	r2, #4
 800f24e:	4013      	ands	r3, r2
 800f250:	d02f      	beq.n	800f2b2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2204      	movs	r2, #4
 800f256:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f258:	d02b      	beq.n	800f2b2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f25e:	b29b      	uxth	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d018      	beq.n	800f296 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26e:	b2d2      	uxtb	r2, r2
 800f270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f280:	3b01      	subs	r3, #1
 800f282:	b29a      	uxth	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	3b01      	subs	r3, #1
 800f290:	b29a      	uxth	r2, r3
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d14c      	bne.n	800f33a <I2C_Slave_ISR_IT+0x1e6>
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	4a2b      	ldr	r2, [pc, #172]	@ (800f350 <I2C_Slave_ISR_IT+0x1fc>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d048      	beq.n	800f33a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	f000 f9bc 	bl	800f628 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f2b0:	e043      	b.n	800f33a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	2208      	movs	r2, #8
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	d00a      	beq.n	800f2d0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2208      	movs	r2, #8
 800f2be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f2c0:	d006      	beq.n	800f2d0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f2c2:	693a      	ldr	r2, [r7, #16]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	0011      	movs	r1, r2
 800f2c8:	0018      	movs	r0, r3
 800f2ca:	f000 f909 	bl	800f4e0 <I2C_ITAddrCplt>
 800f2ce:	e035      	b.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	d031      	beq.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2202      	movs	r2, #2
 800f2dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f2de:	d02d      	beq.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d018      	beq.n	800f31c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f304:	b29b      	uxth	r3, r3
 800f306:	3b01      	subs	r3, #1
 800f308:	b29a      	uxth	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f312:	3b01      	subs	r3, #1
 800f314:	b29a      	uxth	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f31a:	e00f      	b.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	2380      	movs	r3, #128	@ 0x80
 800f320:	045b      	lsls	r3, r3, #17
 800f322:	429a      	cmp	r2, r3
 800f324:	d002      	beq.n	800f32c <I2C_Slave_ISR_IT+0x1d8>
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d107      	bne.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	0018      	movs	r0, r3
 800f330:	f000 f97a 	bl	800f628 <I2C_ITSlaveSeqCplt>
 800f334:	e002      	b.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800f336:	46c0      	nop			@ (mov r8, r8)
 800f338:	e000      	b.n	800f33c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800f33a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2240      	movs	r2, #64	@ 0x40
 800f340:	2100      	movs	r1, #0
 800f342:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	0018      	movs	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	b006      	add	sp, #24
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	46c0      	nop			@ (mov r8, r8)
 800f350:	ffff0000 	.word	0xffff0000

0800f354 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f354:	b5b0      	push	{r4, r5, r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af02      	add	r7, sp, #8
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	000c      	movs	r4, r1
 800f35e:	0010      	movs	r0, r2
 800f360:	0019      	movs	r1, r3
 800f362:	250a      	movs	r5, #10
 800f364:	197b      	adds	r3, r7, r5
 800f366:	1c22      	adds	r2, r4, #0
 800f368:	801a      	strh	r2, [r3, #0]
 800f36a:	2308      	movs	r3, #8
 800f36c:	18fb      	adds	r3, r7, r3
 800f36e:	1c02      	adds	r2, r0, #0
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	1dbb      	adds	r3, r7, #6
 800f374:	1c0a      	adds	r2, r1, #0
 800f376:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f378:	1dbb      	adds	r3, r7, #6
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	b2da      	uxtb	r2, r3
 800f37e:	2380      	movs	r3, #128	@ 0x80
 800f380:	045c      	lsls	r4, r3, #17
 800f382:	197b      	adds	r3, r7, r5
 800f384:	8819      	ldrh	r1, [r3, #0]
 800f386:	68f8      	ldr	r0, [r7, #12]
 800f388:	4b23      	ldr	r3, [pc, #140]	@ (800f418 <I2C_RequestMemoryWrite+0xc4>)
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	0023      	movs	r3, r4
 800f38e:	f000 feaf 	bl	80100f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f394:	6a39      	ldr	r1, [r7, #32]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	0018      	movs	r0, r3
 800f39a:	f000 fcac 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800f39e:	1e03      	subs	r3, r0, #0
 800f3a0:	d001      	beq.n	800f3a6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e033      	b.n	800f40e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f3a6:	1dbb      	adds	r3, r7, #6
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d107      	bne.n	800f3be <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f3ae:	2308      	movs	r3, #8
 800f3b0:	18fb      	adds	r3, r7, r3
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800f3bc:	e019      	b.n	800f3f2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f3be:	2308      	movs	r3, #8
 800f3c0:	18fb      	adds	r3, r7, r3
 800f3c2:	881b      	ldrh	r3, [r3, #0]
 800f3c4:	0a1b      	lsrs	r3, r3, #8
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f3d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3d2:	6a39      	ldr	r1, [r7, #32]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	0018      	movs	r0, r3
 800f3d8:	f000 fc8d 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800f3dc:	1e03      	subs	r3, r0, #0
 800f3de:	d001      	beq.n	800f3e4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e014      	b.n	800f40e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f3e4:	2308      	movs	r3, #8
 800f3e6:	18fb      	adds	r3, r7, r3
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f3f2:	6a3a      	ldr	r2, [r7, #32]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	0013      	movs	r3, r2
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2180      	movs	r1, #128	@ 0x80
 800f400:	f000 fc3a 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800f404:	1e03      	subs	r3, r0, #0
 800f406:	d001      	beq.n	800f40c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800f408:	2301      	movs	r3, #1
 800f40a:	e000      	b.n	800f40e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	0018      	movs	r0, r3
 800f410:	46bd      	mov	sp, r7
 800f412:	b004      	add	sp, #16
 800f414:	bdb0      	pop	{r4, r5, r7, pc}
 800f416:	46c0      	nop			@ (mov r8, r8)
 800f418:	80002000 	.word	0x80002000

0800f41c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f41c:	b5b0      	push	{r4, r5, r7, lr}
 800f41e:	b086      	sub	sp, #24
 800f420:	af02      	add	r7, sp, #8
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	000c      	movs	r4, r1
 800f426:	0010      	movs	r0, r2
 800f428:	0019      	movs	r1, r3
 800f42a:	250a      	movs	r5, #10
 800f42c:	197b      	adds	r3, r7, r5
 800f42e:	1c22      	adds	r2, r4, #0
 800f430:	801a      	strh	r2, [r3, #0]
 800f432:	2308      	movs	r3, #8
 800f434:	18fb      	adds	r3, r7, r3
 800f436:	1c02      	adds	r2, r0, #0
 800f438:	801a      	strh	r2, [r3, #0]
 800f43a:	1dbb      	adds	r3, r7, #6
 800f43c:	1c0a      	adds	r2, r1, #0
 800f43e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f440:	1dbb      	adds	r3, r7, #6
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	b2da      	uxtb	r2, r3
 800f446:	197b      	adds	r3, r7, r5
 800f448:	8819      	ldrh	r1, [r3, #0]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	4b23      	ldr	r3, [pc, #140]	@ (800f4dc <I2C_RequestMemoryRead+0xc0>)
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	f000 fe4d 	bl	80100f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f458:	6a39      	ldr	r1, [r7, #32]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	0018      	movs	r0, r3
 800f45e:	f000 fc4a 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800f462:	1e03      	subs	r3, r0, #0
 800f464:	d001      	beq.n	800f46a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e033      	b.n	800f4d2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f46a:	1dbb      	adds	r3, r7, #6
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d107      	bne.n	800f482 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f472:	2308      	movs	r3, #8
 800f474:	18fb      	adds	r3, r7, r3
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	629a      	str	r2, [r3, #40]	@ 0x28
 800f480:	e019      	b.n	800f4b6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f482:	2308      	movs	r3, #8
 800f484:	18fb      	adds	r3, r7, r3
 800f486:	881b      	ldrh	r3, [r3, #0]
 800f488:	0a1b      	lsrs	r3, r3, #8
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	b2da      	uxtb	r2, r3
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f496:	6a39      	ldr	r1, [r7, #32]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	0018      	movs	r0, r3
 800f49c:	f000 fc2b 	bl	800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800f4a0:	1e03      	subs	r3, r0, #0
 800f4a2:	d001      	beq.n	800f4a8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e014      	b.n	800f4d2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f4a8:	2308      	movs	r3, #8
 800f4aa:	18fb      	adds	r3, r7, r3
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f4b6:	6a3a      	ldr	r2, [r7, #32]
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	0013      	movs	r3, r2
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2140      	movs	r1, #64	@ 0x40
 800f4c4:	f000 fbd8 	bl	800fc78 <I2C_WaitOnFlagUntilTimeout>
 800f4c8:	1e03      	subs	r3, r0, #0
 800f4ca:	d001      	beq.n	800f4d0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e000      	b.n	800f4d2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	b004      	add	sp, #16
 800f4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f4da:	46c0      	nop			@ (mov r8, r8)
 800f4dc:	80002000 	.word	0x80002000

0800f4e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f4e0:	b5b0      	push	{r4, r5, r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2241      	movs	r2, #65	@ 0x41
 800f4ee:	5c9b      	ldrb	r3, [r3, r2]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	001a      	movs	r2, r3
 800f4f4:	2328      	movs	r3, #40	@ 0x28
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	2b28      	cmp	r3, #40	@ 0x28
 800f4fa:	d000      	beq.n	800f4fe <I2C_ITAddrCplt+0x1e>
 800f4fc:	e088      	b.n	800f610 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	0c1b      	lsrs	r3, r3, #16
 800f506:	b2da      	uxtb	r2, r3
 800f508:	250f      	movs	r5, #15
 800f50a:	197b      	adds	r3, r7, r5
 800f50c:	2101      	movs	r1, #1
 800f50e:	400a      	ands	r2, r1
 800f510:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	0c1b      	lsrs	r3, r3, #16
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	200c      	movs	r0, #12
 800f51e:	183b      	adds	r3, r7, r0
 800f520:	21fe      	movs	r1, #254	@ 0xfe
 800f522:	400a      	ands	r2, r1
 800f524:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	240a      	movs	r4, #10
 800f530:	193b      	adds	r3, r7, r4
 800f532:	0592      	lsls	r2, r2, #22
 800f534:	0d92      	lsrs	r2, r2, #22
 800f536:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	b29a      	uxth	r2, r3
 800f540:	2308      	movs	r3, #8
 800f542:	18fb      	adds	r3, r7, r3
 800f544:	21fe      	movs	r1, #254	@ 0xfe
 800f546:	400a      	ands	r2, r1
 800f548:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b02      	cmp	r3, #2
 800f550:	d148      	bne.n	800f5e4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f552:	0021      	movs	r1, r4
 800f554:	187b      	adds	r3, r7, r1
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	09db      	lsrs	r3, r3, #7
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	183b      	adds	r3, r7, r0
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	4053      	eors	r3, r2
 800f562:	b29b      	uxth	r3, r3
 800f564:	001a      	movs	r2, r3
 800f566:	2306      	movs	r3, #6
 800f568:	4013      	ands	r3, r2
 800f56a:	d120      	bne.n	800f5ae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800f56c:	183b      	adds	r3, r7, r0
 800f56e:	187a      	adds	r2, r7, r1
 800f570:	8812      	ldrh	r2, [r2, #0]
 800f572:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f578:	1c5a      	adds	r2, r3, #1
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f582:	2b02      	cmp	r3, #2
 800f584:	d14c      	bne.n	800f620 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2208      	movs	r2, #8
 800f592:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2240      	movs	r2, #64	@ 0x40
 800f598:	2100      	movs	r1, #0
 800f59a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f59c:	183b      	adds	r3, r7, r0
 800f59e:	881a      	ldrh	r2, [r3, #0]
 800f5a0:	197b      	adds	r3, r7, r5
 800f5a2:	7819      	ldrb	r1, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	0018      	movs	r0, r3
 800f5a8:	f7ff fdab 	bl	800f102 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f5ac:	e038      	b.n	800f620 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800f5ae:	240c      	movs	r4, #12
 800f5b0:	193b      	adds	r3, r7, r4
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	18ba      	adds	r2, r7, r2
 800f5b6:	8812      	ldrh	r2, [r2, #0]
 800f5b8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f5ba:	2380      	movs	r3, #128	@ 0x80
 800f5bc:	021a      	lsls	r2, r3, #8
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	0011      	movs	r1, r2
 800f5c2:	0018      	movs	r0, r3
 800f5c4:	f000 fdce 	bl	8010164 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2240      	movs	r2, #64	@ 0x40
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f5d0:	193b      	adds	r3, r7, r4
 800f5d2:	881a      	ldrh	r2, [r3, #0]
 800f5d4:	230f      	movs	r3, #15
 800f5d6:	18fb      	adds	r3, r7, r3
 800f5d8:	7819      	ldrb	r1, [r3, #0]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	0018      	movs	r0, r3
 800f5de:	f7ff fd90 	bl	800f102 <HAL_I2C_AddrCallback>
}
 800f5e2:	e01d      	b.n	800f620 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f5e4:	2380      	movs	r3, #128	@ 0x80
 800f5e6:	021a      	lsls	r2, r3, #8
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	0011      	movs	r1, r2
 800f5ec:	0018      	movs	r0, r3
 800f5ee:	f000 fdb9 	bl	8010164 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2240      	movs	r2, #64	@ 0x40
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f5fa:	230c      	movs	r3, #12
 800f5fc:	18fb      	adds	r3, r7, r3
 800f5fe:	881a      	ldrh	r2, [r3, #0]
 800f600:	230f      	movs	r3, #15
 800f602:	18fb      	adds	r3, r7, r3
 800f604:	7819      	ldrb	r1, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	0018      	movs	r0, r3
 800f60a:	f7ff fd7a 	bl	800f102 <HAL_I2C_AddrCallback>
}
 800f60e:	e007      	b.n	800f620 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2208      	movs	r2, #8
 800f616:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2240      	movs	r2, #64	@ 0x40
 800f61c:	2100      	movs	r1, #0
 800f61e:	5499      	strb	r1, [r3, r2]
}
 800f620:	46c0      	nop			@ (mov r8, r8)
 800f622:	46bd      	mov	sp, r7
 800f624:	b004      	add	sp, #16
 800f626:	bdb0      	pop	{r4, r5, r7, pc}

0800f628 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2242      	movs	r2, #66	@ 0x42
 800f63c:	2100      	movs	r1, #0
 800f63e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	2380      	movs	r3, #128	@ 0x80
 800f644:	01db      	lsls	r3, r3, #7
 800f646:	4013      	ands	r3, r2
 800f648:	d008      	beq.n	800f65c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4924      	ldr	r1, [pc, #144]	@ (800f6e8 <I2C_ITSlaveSeqCplt+0xc0>)
 800f656:	400a      	ands	r2, r1
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	e00c      	b.n	800f676 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	2380      	movs	r3, #128	@ 0x80
 800f660:	021b      	lsls	r3, r3, #8
 800f662:	4013      	ands	r3, r2
 800f664:	d007      	beq.n	800f676 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	491e      	ldr	r1, [pc, #120]	@ (800f6ec <I2C_ITSlaveSeqCplt+0xc4>)
 800f672:	400a      	ands	r2, r1
 800f674:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2241      	movs	r2, #65	@ 0x41
 800f67a:	5c9b      	ldrb	r3, [r3, r2]
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b29      	cmp	r3, #41	@ 0x29
 800f680:	d114      	bne.n	800f6ac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2241      	movs	r2, #65	@ 0x41
 800f686:	2128      	movs	r1, #40	@ 0x28
 800f688:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2221      	movs	r2, #33	@ 0x21
 800f68e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2101      	movs	r1, #1
 800f694:	0018      	movs	r0, r3
 800f696:	f000 fd65 	bl	8010164 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2240      	movs	r2, #64	@ 0x40
 800f69e:	2100      	movs	r1, #0
 800f6a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	0018      	movs	r0, r3
 800f6a6:	f7ff fd1c 	bl	800f0e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f6aa:	e019      	b.n	800f6e0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2241      	movs	r2, #65	@ 0x41
 800f6b0:	5c9b      	ldrb	r3, [r3, r2]
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6b6:	d113      	bne.n	800f6e0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2241      	movs	r2, #65	@ 0x41
 800f6bc:	2128      	movs	r1, #40	@ 0x28
 800f6be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2222      	movs	r2, #34	@ 0x22
 800f6c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2102      	movs	r1, #2
 800f6ca:	0018      	movs	r0, r3
 800f6cc:	f000 fd4a 	bl	8010164 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2240      	movs	r2, #64	@ 0x40
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	0018      	movs	r0, r3
 800f6dc:	f7ff fd09 	bl	800f0f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800f6e0:	46c0      	nop			@ (mov r8, r8)
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	b004      	add	sp, #16
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	ffffbfff 	.word	0xffffbfff
 800f6ec:	ffff7fff 	.word	0xffff7fff

0800f6f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f706:	200f      	movs	r0, #15
 800f708:	183b      	adds	r3, r7, r0
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	2141      	movs	r1, #65	@ 0x41
 800f70e:	5c52      	ldrb	r2, [r2, r1]
 800f710:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2220      	movs	r2, #32
 800f718:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f71a:	183b      	adds	r3, r7, r0
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b21      	cmp	r3, #33	@ 0x21
 800f720:	d003      	beq.n	800f72a <I2C_ITSlaveCplt+0x3a>
 800f722:	183b      	adds	r3, r7, r0
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	2b29      	cmp	r3, #41	@ 0x29
 800f728:	d109      	bne.n	800f73e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f72a:	4a7b      	ldr	r2, [pc, #492]	@ (800f918 <I2C_ITSlaveCplt+0x228>)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	0011      	movs	r1, r2
 800f730:	0018      	movs	r0, r3
 800f732:	f000 fd17 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2221      	movs	r2, #33	@ 0x21
 800f73a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f73c:	e011      	b.n	800f762 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f73e:	220f      	movs	r2, #15
 800f740:	18bb      	adds	r3, r7, r2
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b22      	cmp	r3, #34	@ 0x22
 800f746:	d003      	beq.n	800f750 <I2C_ITSlaveCplt+0x60>
 800f748:	18bb      	adds	r3, r7, r2
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f74e:	d108      	bne.n	800f762 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f750:	4a72      	ldr	r2, [pc, #456]	@ (800f91c <I2C_ITSlaveCplt+0x22c>)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	0011      	movs	r1, r2
 800f756:	0018      	movs	r0, r3
 800f758:	f000 fd04 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2222      	movs	r2, #34	@ 0x22
 800f760:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	685a      	ldr	r2, [r3, #4]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2180      	movs	r1, #128	@ 0x80
 800f76e:	0209      	lsls	r1, r1, #8
 800f770:	430a      	orrs	r2, r1
 800f772:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4968      	ldr	r1, [pc, #416]	@ (800f920 <I2C_ITSlaveCplt+0x230>)
 800f780:	400a      	ands	r2, r1
 800f782:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	0018      	movs	r0, r3
 800f788:	f000 fa35 	bl	800fbf6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	2380      	movs	r3, #128	@ 0x80
 800f790:	01db      	lsls	r3, r3, #7
 800f792:	4013      	ands	r3, r2
 800f794:	d013      	beq.n	800f7be <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4960      	ldr	r1, [pc, #384]	@ (800f924 <I2C_ITSlaveCplt+0x234>)
 800f7a2:	400a      	ands	r2, r1
 800f7a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d01f      	beq.n	800f7ee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f7bc:	e017      	b.n	800f7ee <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f7be:	693a      	ldr	r2, [r7, #16]
 800f7c0:	2380      	movs	r3, #128	@ 0x80
 800f7c2:	021b      	lsls	r3, r3, #8
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	d012      	beq.n	800f7ee <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4955      	ldr	r1, [pc, #340]	@ (800f928 <I2C_ITSlaveCplt+0x238>)
 800f7d4:	400a      	ands	r2, r1
 800f7d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d006      	beq.n	800f7ee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2204      	movs	r2, #4
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	d020      	beq.n	800f838 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2204      	movs	r2, #4
 800f7fa:	4393      	bics	r3, r2
 800f7fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f808:	b2d2      	uxtb	r2, r2
 800f80a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00c      	beq.n	800f838 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f822:	3b01      	subs	r3, #1
 800f824:	b29a      	uxth	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f82e:	b29b      	uxth	r3, r3
 800f830:	3b01      	subs	r3, #1
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d005      	beq.n	800f84e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f846:	2204      	movs	r2, #4
 800f848:	431a      	orrs	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2242      	movs	r2, #66	@ 0x42
 800f852:	2100      	movs	r1, #0
 800f854:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f860:	2b00      	cmp	r3, #0
 800f862:	d013      	beq.n	800f88c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	0011      	movs	r1, r2
 800f86c:	0018      	movs	r0, r3
 800f86e:	f000 f8b7 	bl	800f9e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2241      	movs	r2, #65	@ 0x41
 800f876:	5c9b      	ldrb	r3, [r3, r2]
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b28      	cmp	r3, #40	@ 0x28
 800f87c:	d147      	bne.n	800f90e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	0011      	movs	r1, r2
 800f884:	0018      	movs	r0, r3
 800f886:	f000 f853 	bl	800f930 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f88a:	e040      	b.n	800f90e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f890:	4a26      	ldr	r2, [pc, #152]	@ (800f92c <I2C_ITSlaveCplt+0x23c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d016      	beq.n	800f8c4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	0018      	movs	r0, r3
 800f89a:	f7ff fec5 	bl	800f628 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a22      	ldr	r2, [pc, #136]	@ (800f92c <I2C_ITSlaveCplt+0x23c>)
 800f8a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2241      	movs	r2, #65	@ 0x41
 800f8a8:	2120      	movs	r1, #32
 800f8aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2240      	movs	r2, #64	@ 0x40
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	0018      	movs	r0, r3
 800f8be:	f7ff fc30 	bl	800f122 <HAL_I2C_ListenCpltCallback>
}
 800f8c2:	e024      	b.n	800f90e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2241      	movs	r2, #65	@ 0x41
 800f8c8:	5c9b      	ldrb	r3, [r3, r2]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b22      	cmp	r3, #34	@ 0x22
 800f8ce:	d10f      	bne.n	800f8f0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2241      	movs	r2, #65	@ 0x41
 800f8d4:	2120      	movs	r1, #32
 800f8d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2240      	movs	r2, #64	@ 0x40
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f7ff fc02 	bl	800f0f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800f8ee:	e00e      	b.n	800f90e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2241      	movs	r2, #65	@ 0x41
 800f8f4:	2120      	movs	r1, #32
 800f8f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2240      	movs	r2, #64	@ 0x40
 800f902:	2100      	movs	r1, #0
 800f904:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	0018      	movs	r0, r3
 800f90a:	f7ff fbea 	bl	800f0e2 <HAL_I2C_SlaveTxCpltCallback>
}
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	46bd      	mov	sp, r7
 800f912:	b006      	add	sp, #24
 800f914:	bd80      	pop	{r7, pc}
 800f916:	46c0      	nop			@ (mov r8, r8)
 800f918:	00008001 	.word	0x00008001
 800f91c:	00008002 	.word	0x00008002
 800f920:	fe00e800 	.word	0xfe00e800
 800f924:	ffffbfff 	.word	0xffffbfff
 800f928:	ffff7fff 	.word	0xffff7fff
 800f92c:	ffff0000 	.word	0xffff0000

0800f930 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4a26      	ldr	r2, [pc, #152]	@ (800f9d8 <I2C_ITListenCplt+0xa8>)
 800f93e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2241      	movs	r2, #65	@ 0x41
 800f94a:	2120      	movs	r1, #32
 800f94c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2242      	movs	r2, #66	@ 0x42
 800f952:	2100      	movs	r1, #0
 800f954:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	2204      	movs	r2, #4
 800f960:	4013      	ands	r3, r2
 800f962:	d022      	beq.n	800f9aa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f96e:	b2d2      	uxtb	r2, r2
 800f970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f980:	2b00      	cmp	r3, #0
 800f982:	d012      	beq.n	800f9aa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f988:	3b01      	subs	r3, #1
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f994:	b29b      	uxth	r3, r3
 800f996:	3b01      	subs	r3, #1
 800f998:	b29a      	uxth	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9a2:	2204      	movs	r2, #4
 800f9a4:	431a      	orrs	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800f9dc <I2C_ITListenCplt+0xac>)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	0011      	movs	r1, r2
 800f9b0:	0018      	movs	r0, r3
 800f9b2:	f000 fbd7 	bl	8010164 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2210      	movs	r2, #16
 800f9bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2240      	movs	r2, #64	@ 0x40
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	0018      	movs	r0, r3
 800f9ca:	f7ff fbaa 	bl	800f122 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800f9ce:	46c0      	nop			@ (mov r8, r8)
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	b002      	add	sp, #8
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	46c0      	nop			@ (mov r8, r8)
 800f9d8:	ffff0000 	.word	0xffff0000
 800f9dc:	00008003 	.word	0x00008003

0800f9e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f9ea:	200f      	movs	r0, #15
 800f9ec:	183b      	adds	r3, r7, r0
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	2141      	movs	r1, #65	@ 0x41
 800f9f2:	5c52      	ldrb	r2, [r2, r1]
 800f9f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2242      	movs	r2, #66	@ 0x42
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a62      	ldr	r2, [pc, #392]	@ (800fb8c <I2C_ITError+0x1ac>)
 800fa02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	431a      	orrs	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800fa16:	183b      	adds	r3, r7, r0
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b28      	cmp	r3, #40	@ 0x28
 800fa1c:	d007      	beq.n	800fa2e <I2C_ITError+0x4e>
 800fa1e:	183b      	adds	r3, r7, r0
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b29      	cmp	r3, #41	@ 0x29
 800fa24:	d003      	beq.n	800fa2e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800fa26:	183b      	adds	r3, r7, r0
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa2c:	d10c      	bne.n	800fa48 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2103      	movs	r1, #3
 800fa32:	0018      	movs	r0, r3
 800fa34:	f000 fb96 	bl	8010164 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2241      	movs	r2, #65	@ 0x41
 800fa3c:	2128      	movs	r1, #40	@ 0x28
 800fa3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a53      	ldr	r2, [pc, #332]	@ (800fb90 <I2C_ITError+0x1b0>)
 800fa44:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa46:	e012      	b.n	800fa6e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa48:	4a52      	ldr	r2, [pc, #328]	@ (800fb94 <I2C_ITError+0x1b4>)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	0011      	movs	r1, r2
 800fa4e:	0018      	movs	r0, r3
 800fa50:	f000 fb88 	bl	8010164 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2241      	movs	r2, #65	@ 0x41
 800fa58:	5c9b      	ldrb	r3, [r3, r2]
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b60      	cmp	r3, #96	@ 0x60
 800fa5e:	d003      	beq.n	800fa68 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2241      	movs	r2, #65	@ 0x41
 800fa64:	2120      	movs	r1, #32
 800fa66:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa72:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d03b      	beq.n	800faf4 <I2C_ITError+0x114>
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b11      	cmp	r3, #17
 800fa80:	d002      	beq.n	800fa88 <I2C_ITError+0xa8>
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b21      	cmp	r3, #33	@ 0x21
 800fa86:	d135      	bne.n	800faf4 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	2380      	movs	r3, #128	@ 0x80
 800fa90:	01db      	lsls	r3, r3, #7
 800fa92:	401a      	ands	r2, r3
 800fa94:	2380      	movs	r3, #128	@ 0x80
 800fa96:	01db      	lsls	r3, r3, #7
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d107      	bne.n	800faac <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	493c      	ldr	r1, [pc, #240]	@ (800fb98 <I2C_ITError+0x1b8>)
 800faa8:	400a      	ands	r2, r1
 800faaa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fab0:	0018      	movs	r0, r3
 800fab2:	f7fe fb57 	bl	800e164 <HAL_DMA_GetState>
 800fab6:	0003      	movs	r3, r0
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d016      	beq.n	800faea <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac0:	4a36      	ldr	r2, [pc, #216]	@ (800fb9c <I2C_ITError+0x1bc>)
 800fac2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2240      	movs	r2, #64	@ 0x40
 800fac8:	2100      	movs	r1, #0
 800faca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad0:	0018      	movs	r0, r3
 800fad2:	f7fe fa2b 	bl	800df2c <HAL_DMA_Abort_IT>
 800fad6:	1e03      	subs	r3, r0, #0
 800fad8:	d051      	beq.n	800fb7e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae4:	0018      	movs	r0, r3
 800fae6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fae8:	e049      	b.n	800fb7e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	0018      	movs	r0, r3
 800faee:	f000 f859 	bl	800fba4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800faf2:	e044      	b.n	800fb7e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d03b      	beq.n	800fb74 <I2C_ITError+0x194>
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	2b12      	cmp	r3, #18
 800fb00:	d002      	beq.n	800fb08 <I2C_ITError+0x128>
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	2b22      	cmp	r3, #34	@ 0x22
 800fb06:	d135      	bne.n	800fb74 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	2380      	movs	r3, #128	@ 0x80
 800fb10:	021b      	lsls	r3, r3, #8
 800fb12:	401a      	ands	r2, r3
 800fb14:	2380      	movs	r3, #128	@ 0x80
 800fb16:	021b      	lsls	r3, r3, #8
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d107      	bne.n	800fb2c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	491e      	ldr	r1, [pc, #120]	@ (800fba0 <I2C_ITError+0x1c0>)
 800fb28:	400a      	ands	r2, r1
 800fb2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb30:	0018      	movs	r0, r3
 800fb32:	f7fe fb17 	bl	800e164 <HAL_DMA_GetState>
 800fb36:	0003      	movs	r3, r0
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d016      	beq.n	800fb6a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb40:	4a16      	ldr	r2, [pc, #88]	@ (800fb9c <I2C_ITError+0x1bc>)
 800fb42:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2240      	movs	r2, #64	@ 0x40
 800fb48:	2100      	movs	r1, #0
 800fb4a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb50:	0018      	movs	r0, r3
 800fb52:	f7fe f9eb 	bl	800df2c <HAL_DMA_Abort_IT>
 800fb56:	1e03      	subs	r3, r0, #0
 800fb58:	d013      	beq.n	800fb82 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb64:	0018      	movs	r0, r3
 800fb66:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb68:	e00b      	b.n	800fb82 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	0018      	movs	r0, r3
 800fb6e:	f000 f819 	bl	800fba4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb72:	e006      	b.n	800fb82 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	0018      	movs	r0, r3
 800fb78:	f000 f814 	bl	800fba4 <I2C_TreatErrorCallback>
  }
}
 800fb7c:	e002      	b.n	800fb84 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fb7e:	46c0      	nop			@ (mov r8, r8)
 800fb80:	e000      	b.n	800fb84 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb82:	46c0      	nop			@ (mov r8, r8)
}
 800fb84:	46c0      	nop			@ (mov r8, r8)
 800fb86:	46bd      	mov	sp, r7
 800fb88:	b004      	add	sp, #16
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	ffff0000 	.word	0xffff0000
 800fb90:	0800f155 	.word	0x0800f155
 800fb94:	00008003 	.word	0x00008003
 800fb98:	ffffbfff 	.word	0xffffbfff
 800fb9c:	0800fc3b 	.word	0x0800fc3b
 800fba0:	ffff7fff 	.word	0xffff7fff

0800fba4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2241      	movs	r2, #65	@ 0x41
 800fbb0:	5c9b      	ldrb	r3, [r3, r2]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b60      	cmp	r3, #96	@ 0x60
 800fbb6:	d10f      	bne.n	800fbd8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2241      	movs	r2, #65	@ 0x41
 800fbbc:	2120      	movs	r1, #32
 800fbbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2240      	movs	r2, #64	@ 0x40
 800fbca:	2100      	movs	r1, #0
 800fbcc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	0018      	movs	r0, r3
 800fbd2:	f7ff fab6 	bl	800f142 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fbd6:	e00a      	b.n	800fbee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2240      	movs	r2, #64	@ 0x40
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	0018      	movs	r0, r3
 800fbea:	f7ff faa2 	bl	800f132 <HAL_I2C_ErrorCallback>
}
 800fbee:	46c0      	nop			@ (mov r8, r8)
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	b002      	add	sp, #8
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	699b      	ldr	r3, [r3, #24]
 800fc04:	2202      	movs	r2, #2
 800fc06:	4013      	ands	r3, r2
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d103      	bne.n	800fc14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2200      	movs	r2, #0
 800fc12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	4013      	ands	r3, r2
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d007      	beq.n	800fc32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	699a      	ldr	r2, [r3, #24]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	430a      	orrs	r2, r1
 800fc30:	619a      	str	r2, [r3, #24]
  }
}
 800fc32:	46c0      	nop			@ (mov r8, r8)
 800fc34:	46bd      	mov	sp, r7
 800fc36:	b002      	add	sp, #8
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d003      	beq.n	800fc58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc54:	2200      	movs	r2, #0
 800fc56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d003      	beq.n	800fc68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc64:	2200      	movs	r2, #0
 800fc66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	0018      	movs	r0, r3
 800fc6c:	f7ff ff9a 	bl	800fba4 <I2C_TreatErrorCallback>
}
 800fc70:	46c0      	nop			@ (mov r8, r8)
 800fc72:	46bd      	mov	sp, r7
 800fc74:	b004      	add	sp, #16
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	603b      	str	r3, [r7, #0]
 800fc84:	1dfb      	adds	r3, r7, #7
 800fc86:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fc88:	e021      	b.n	800fcce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	d01e      	beq.n	800fcce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc90:	f7fd feb8 	bl	800da04 <HAL_GetTick>
 800fc94:	0002      	movs	r2, r0
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d302      	bcc.n	800fca6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d113      	bne.n	800fcce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcaa:	2220      	movs	r2, #32
 800fcac:	431a      	orrs	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2241      	movs	r2, #65	@ 0x41
 800fcb6:	2120      	movs	r1, #32
 800fcb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2242      	movs	r2, #66	@ 0x42
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2240      	movs	r2, #64	@ 0x40
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	e00f      	b.n	800fcee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	4013      	ands	r3, r2
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	425a      	negs	r2, r3
 800fcde:	4153      	adcs	r3, r2
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	001a      	movs	r2, r3
 800fce4:	1dfb      	adds	r3, r7, #7
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d0ce      	beq.n	800fc8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fcec:	2300      	movs	r3, #0
}
 800fcee:	0018      	movs	r0, r3
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	b004      	add	sp, #16
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b084      	sub	sp, #16
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	60f8      	str	r0, [r7, #12]
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fd02:	e02b      	b.n	800fd5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	68b9      	ldr	r1, [r7, #8]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	f000 f8e8 	bl	800fee0 <I2C_IsErrorOccurred>
 800fd10:	1e03      	subs	r3, r0, #0
 800fd12:	d001      	beq.n	800fd18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fd14:	2301      	movs	r3, #1
 800fd16:	e029      	b.n	800fd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	d01e      	beq.n	800fd5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd1e:	f7fd fe71 	bl	800da04 <HAL_GetTick>
 800fd22:	0002      	movs	r2, r0
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d302      	bcc.n	800fd34 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d113      	bne.n	800fd5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd38:	2220      	movs	r2, #32
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2241      	movs	r2, #65	@ 0x41
 800fd44:	2120      	movs	r1, #32
 800fd46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2242      	movs	r2, #66	@ 0x42
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2240      	movs	r2, #64	@ 0x40
 800fd54:	2100      	movs	r1, #0
 800fd56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e007      	b.n	800fd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	699b      	ldr	r3, [r3, #24]
 800fd62:	2202      	movs	r2, #2
 800fd64:	4013      	ands	r3, r2
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d1cc      	bne.n	800fd04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	0018      	movs	r0, r3
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	b004      	add	sp, #16
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fd80:	e028      	b.n	800fdd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	68b9      	ldr	r1, [r7, #8]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	0018      	movs	r0, r3
 800fd8a:	f000 f8a9 	bl	800fee0 <I2C_IsErrorOccurred>
 800fd8e:	1e03      	subs	r3, r0, #0
 800fd90:	d001      	beq.n	800fd96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e026      	b.n	800fde4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd96:	f7fd fe35 	bl	800da04 <HAL_GetTick>
 800fd9a:	0002      	movs	r2, r0
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d302      	bcc.n	800fdac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d113      	bne.n	800fdd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdb0:	2220      	movs	r2, #32
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2241      	movs	r2, #65	@ 0x41
 800fdbc:	2120      	movs	r1, #32
 800fdbe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2242      	movs	r2, #66	@ 0x42
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2240      	movs	r2, #64	@ 0x40
 800fdcc:	2100      	movs	r1, #0
 800fdce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e007      	b.n	800fde4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	699b      	ldr	r3, [r3, #24]
 800fdda:	2220      	movs	r2, #32
 800fddc:	4013      	ands	r3, r2
 800fdde:	2b20      	cmp	r3, #32
 800fde0:	d1cf      	bne.n	800fd82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800fde2:	2300      	movs	r3, #0
}
 800fde4:	0018      	movs	r0, r3
 800fde6:	46bd      	mov	sp, r7
 800fde8:	b004      	add	sp, #16
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800fdf8:	e064      	b.n	800fec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	68b9      	ldr	r1, [r7, #8]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	0018      	movs	r0, r3
 800fe02:	f000 f86d 	bl	800fee0 <I2C_IsErrorOccurred>
 800fe06:	1e03      	subs	r3, r0, #0
 800fe08:	d001      	beq.n	800fe0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e062      	b.n	800fed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	2220      	movs	r2, #32
 800fe16:	4013      	ands	r3, r2
 800fe18:	2b20      	cmp	r3, #32
 800fe1a:	d138      	bne.n	800fe8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	2204      	movs	r2, #4
 800fe24:	4013      	ands	r3, r2
 800fe26:	2b04      	cmp	r3, #4
 800fe28:	d105      	bne.n	800fe36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	e04e      	b.n	800fed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	2210      	movs	r2, #16
 800fe3e:	4013      	ands	r3, r2
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	d107      	bne.n	800fe54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2210      	movs	r2, #16
 800fe4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	645a      	str	r2, [r3, #68]	@ 0x44
 800fe52:	e002      	b.n	800fe5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2220      	movs	r2, #32
 800fe60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	491b      	ldr	r1, [pc, #108]	@ (800fedc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800fe6e:	400a      	ands	r2, r1
 800fe70:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2241      	movs	r2, #65	@ 0x41
 800fe76:	2120      	movs	r1, #32
 800fe78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2242      	movs	r2, #66	@ 0x42
 800fe7e:	2100      	movs	r1, #0
 800fe80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2240      	movs	r2, #64	@ 0x40
 800fe86:	2100      	movs	r1, #0
 800fe88:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e022      	b.n	800fed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe8e:	f7fd fdb9 	bl	800da04 <HAL_GetTick>
 800fe92:	0002      	movs	r2, r0
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d302      	bcc.n	800fea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d10f      	bne.n	800fec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fea8:	2220      	movs	r2, #32
 800feaa:	431a      	orrs	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2241      	movs	r2, #65	@ 0x41
 800feb4:	2120      	movs	r1, #32
 800feb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2240      	movs	r2, #64	@ 0x40
 800febc:	2100      	movs	r1, #0
 800febe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800fec0:	2301      	movs	r3, #1
 800fec2:	e007      	b.n	800fed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	2204      	movs	r2, #4
 800fecc:	4013      	ands	r3, r2
 800fece:	2b04      	cmp	r3, #4
 800fed0:	d193      	bne.n	800fdfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	0018      	movs	r0, r3
 800fed6:	46bd      	mov	sp, r7
 800fed8:	b004      	add	sp, #16
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	fe00e800 	.word	0xfe00e800

0800fee0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08a      	sub	sp, #40	@ 0x28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800feec:	2327      	movs	r3, #39	@ 0x27
 800feee:	18fb      	adds	r3, r7, r3
 800fef0:	2200      	movs	r2, #0
 800fef2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	699b      	ldr	r3, [r3, #24]
 800fefa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800fefc:	2300      	movs	r3, #0
 800fefe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	2210      	movs	r2, #16
 800ff08:	4013      	ands	r3, r2
 800ff0a:	d100      	bne.n	800ff0e <I2C_IsErrorOccurred+0x2e>
 800ff0c:	e08a      	b.n	8010024 <I2C_IsErrorOccurred+0x144>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2210      	movs	r2, #16
 800ff14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ff16:	e068      	b.n	800ffea <I2C_IsErrorOccurred+0x10a>
 800ff18:	2227      	movs	r2, #39	@ 0x27
 800ff1a:	18bb      	adds	r3, r7, r2
 800ff1c:	18ba      	adds	r2, r7, r2
 800ff1e:	7812      	ldrb	r2, [r2, #0]
 800ff20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	3301      	adds	r3, #1
 800ff26:	d060      	beq.n	800ffea <I2C_IsErrorOccurred+0x10a>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ff28:	f7fd fd6c 	bl	800da04 <HAL_GetTick>
 800ff2c:	0002      	movs	r2, r0
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	68ba      	ldr	r2, [r7, #8]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d302      	bcc.n	800ff3e <I2C_IsErrorOccurred+0x5e>
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d155      	bne.n	800ffea <I2C_IsErrorOccurred+0x10a>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	685a      	ldr	r2, [r3, #4]
 800ff44:	2380      	movs	r3, #128	@ 0x80
 800ff46:	01db      	lsls	r3, r3, #7
 800ff48:	4013      	ands	r3, r2
 800ff4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ff4c:	2013      	movs	r0, #19
 800ff4e:	183b      	adds	r3, r7, r0
 800ff50:	68fa      	ldr	r2, [r7, #12]
 800ff52:	2142      	movs	r1, #66	@ 0x42
 800ff54:	5c52      	ldrb	r2, [r2, r1]
 800ff56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	699a      	ldr	r2, [r3, #24]
 800ff5e:	2380      	movs	r3, #128	@ 0x80
 800ff60:	021b      	lsls	r3, r3, #8
 800ff62:	401a      	ands	r2, r3
 800ff64:	2380      	movs	r3, #128	@ 0x80
 800ff66:	021b      	lsls	r3, r3, #8
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d137      	bne.n	800ffdc <I2C_IsErrorOccurred+0xfc>
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	2380      	movs	r3, #128	@ 0x80
 800ff70:	01db      	lsls	r3, r3, #7
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d032      	beq.n	800ffdc <I2C_IsErrorOccurred+0xfc>
              (tmp1 != I2C_CR2_STOP) && \
 800ff76:	183b      	adds	r3, r7, r0
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b20      	cmp	r3, #32
 800ff7c:	d02e      	beq.n	800ffdc <I2C_IsErrorOccurred+0xfc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2180      	movs	r1, #128	@ 0x80
 800ff8a:	01c9      	lsls	r1, r1, #7
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ff90:	f7fd fd38 	bl	800da04 <HAL_GetTick>
 800ff94:	0003      	movs	r3, r0
 800ff96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ff98:	e020      	b.n	800ffdc <I2C_IsErrorOccurred+0xfc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ff9a:	f7fd fd33 	bl	800da04 <HAL_GetTick>
 800ff9e:	0002      	movs	r2, r0
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	1ad3      	subs	r3, r2, r3
 800ffa4:	2027      	movs	r0, #39	@ 0x27
 800ffa6:	183a      	adds	r2, r7, r0
 800ffa8:	1839      	adds	r1, r7, r0
 800ffaa:	7809      	ldrb	r1, [r1, #0]
 800ffac:	7011      	strb	r1, [r2, #0]
 800ffae:	2b19      	cmp	r3, #25
 800ffb0:	d914      	bls.n	800ffdc <I2C_IsErrorOccurred+0xfc>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	431a      	orrs	r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2241      	movs	r2, #65	@ 0x41
 800ffc2:	2120      	movs	r1, #32
 800ffc4:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2242      	movs	r2, #66	@ 0x42
 800ffca:	2100      	movs	r1, #0
 800ffcc:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2240      	movs	r2, #64	@ 0x40
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800ffd6:	183b      	adds	r3, r7, r0
 800ffd8:	2201      	movs	r2, #1
 800ffda:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	699b      	ldr	r3, [r3, #24]
 800ffe2:	2220      	movs	r2, #32
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	2b20      	cmp	r3, #32
 800ffe8:	d1d7      	bne.n	800ff9a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	2220      	movs	r2, #32
 800fff2:	4013      	ands	r3, r2
 800fff4:	2b20      	cmp	r3, #32
 800fff6:	d004      	beq.n	8010002 <I2C_IsErrorOccurred+0x122>
 800fff8:	2327      	movs	r3, #39	@ 0x27
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d08a      	beq.n	800ff18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010002:	2327      	movs	r3, #39	@ 0x27
 8010004:	18fb      	adds	r3, r7, r3
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d103      	bne.n	8010014 <I2C_IsErrorOccurred+0x134>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2220      	movs	r2, #32
 8010012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010014:	6a3b      	ldr	r3, [r7, #32]
 8010016:	2204      	movs	r2, #4
 8010018:	4313      	orrs	r3, r2
 801001a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801001c:	2327      	movs	r3, #39	@ 0x27
 801001e:	18fb      	adds	r3, r7, r3
 8010020:	2201      	movs	r2, #1
 8010022:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	699b      	ldr	r3, [r3, #24]
 801002a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801002c:	69ba      	ldr	r2, [r7, #24]
 801002e:	2380      	movs	r3, #128	@ 0x80
 8010030:	005b      	lsls	r3, r3, #1
 8010032:	4013      	ands	r3, r2
 8010034:	d00c      	beq.n	8010050 <I2C_IsErrorOccurred+0x170>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010036:	6a3b      	ldr	r3, [r7, #32]
 8010038:	2201      	movs	r2, #1
 801003a:	4313      	orrs	r3, r2
 801003c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2280      	movs	r2, #128	@ 0x80
 8010044:	0052      	lsls	r2, r2, #1
 8010046:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010048:	2327      	movs	r3, #39	@ 0x27
 801004a:	18fb      	adds	r3, r7, r3
 801004c:	2201      	movs	r2, #1
 801004e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010050:	69ba      	ldr	r2, [r7, #24]
 8010052:	2380      	movs	r3, #128	@ 0x80
 8010054:	00db      	lsls	r3, r3, #3
 8010056:	4013      	ands	r3, r2
 8010058:	d00c      	beq.n	8010074 <I2C_IsErrorOccurred+0x194>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	2208      	movs	r2, #8
 801005e:	4313      	orrs	r3, r2
 8010060:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2280      	movs	r2, #128	@ 0x80
 8010068:	00d2      	lsls	r2, r2, #3
 801006a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801006c:	2327      	movs	r3, #39	@ 0x27
 801006e:	18fb      	adds	r3, r7, r3
 8010070:	2201      	movs	r2, #1
 8010072:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010074:	69ba      	ldr	r2, [r7, #24]
 8010076:	2380      	movs	r3, #128	@ 0x80
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	4013      	ands	r3, r2
 801007c:	d00c      	beq.n	8010098 <I2C_IsErrorOccurred+0x1b8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	2202      	movs	r2, #2
 8010082:	4313      	orrs	r3, r2
 8010084:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2280      	movs	r2, #128	@ 0x80
 801008c:	0092      	lsls	r2, r2, #2
 801008e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010090:	2327      	movs	r3, #39	@ 0x27
 8010092:	18fb      	adds	r3, r7, r3
 8010094:	2201      	movs	r2, #1
 8010096:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8010098:	2327      	movs	r3, #39	@ 0x27
 801009a:	18fb      	adds	r3, r7, r3
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d01d      	beq.n	80100de <I2C_IsErrorOccurred+0x1fe>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	0018      	movs	r0, r3
 80100a6:	f7ff fda6 	bl	800fbf6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	685a      	ldr	r2, [r3, #4]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	490d      	ldr	r1, [pc, #52]	@ (80100ec <I2C_IsErrorOccurred+0x20c>)
 80100b6:	400a      	ands	r2, r1
 80100b8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	431a      	orrs	r2, r3
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2241      	movs	r2, #65	@ 0x41
 80100ca:	2120      	movs	r1, #32
 80100cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2242      	movs	r2, #66	@ 0x42
 80100d2:	2100      	movs	r1, #0
 80100d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2240      	movs	r2, #64	@ 0x40
 80100da:	2100      	movs	r1, #0
 80100dc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80100de:	2327      	movs	r3, #39	@ 0x27
 80100e0:	18fb      	adds	r3, r7, r3
 80100e2:	781b      	ldrb	r3, [r3, #0]
}
 80100e4:	0018      	movs	r0, r3
 80100e6:	46bd      	mov	sp, r7
 80100e8:	b00a      	add	sp, #40	@ 0x28
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	fe00e800 	.word	0xfe00e800

080100f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80100f0:	b590      	push	{r4, r7, lr}
 80100f2:	b087      	sub	sp, #28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	0008      	movs	r0, r1
 80100fa:	0011      	movs	r1, r2
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	240a      	movs	r4, #10
 8010100:	193b      	adds	r3, r7, r4
 8010102:	1c02      	adds	r2, r0, #0
 8010104:	801a      	strh	r2, [r3, #0]
 8010106:	2009      	movs	r0, #9
 8010108:	183b      	adds	r3, r7, r0
 801010a:	1c0a      	adds	r2, r1, #0
 801010c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801010e:	193b      	adds	r3, r7, r4
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	059b      	lsls	r3, r3, #22
 8010114:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010116:	183b      	adds	r3, r7, r0
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	0419      	lsls	r1, r3, #16
 801011c:	23ff      	movs	r3, #255	@ 0xff
 801011e:	041b      	lsls	r3, r3, #16
 8010120:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010122:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012a:	4313      	orrs	r3, r2
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	085b      	lsrs	r3, r3, #1
 8010130:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801013a:	0d51      	lsrs	r1, r2, #21
 801013c:	2280      	movs	r2, #128	@ 0x80
 801013e:	00d2      	lsls	r2, r2, #3
 8010140:	400a      	ands	r2, r1
 8010142:	4907      	ldr	r1, [pc, #28]	@ (8010160 <I2C_TransferConfig+0x70>)
 8010144:	430a      	orrs	r2, r1
 8010146:	43d2      	mvns	r2, r2
 8010148:	401a      	ands	r2, r3
 801014a:	0011      	movs	r1, r2
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	697a      	ldr	r2, [r7, #20]
 8010152:	430a      	orrs	r2, r1
 8010154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010156:	46c0      	nop			@ (mov r8, r8)
 8010158:	46bd      	mov	sp, r7
 801015a:	b007      	add	sp, #28
 801015c:	bd90      	pop	{r4, r7, pc}
 801015e:	46c0      	nop			@ (mov r8, r8)
 8010160:	03ff63ff 	.word	0x03ff63ff

08010164 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	000a      	movs	r2, r1
 801016e:	1cbb      	adds	r3, r7, #2
 8010170:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8010172:	2300      	movs	r3, #0
 8010174:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010176:	1cbb      	adds	r3, r7, #2
 8010178:	881b      	ldrh	r3, [r3, #0]
 801017a:	2201      	movs	r2, #1
 801017c:	4013      	ands	r3, r2
 801017e:	d010      	beq.n	80101a2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2242      	movs	r2, #66	@ 0x42
 8010184:	4313      	orrs	r3, r2
 8010186:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2241      	movs	r2, #65	@ 0x41
 801018c:	5c9b      	ldrb	r3, [r3, r2]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	001a      	movs	r2, r3
 8010192:	2328      	movs	r3, #40	@ 0x28
 8010194:	4013      	ands	r3, r2
 8010196:	2b28      	cmp	r3, #40	@ 0x28
 8010198:	d003      	beq.n	80101a2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	22b0      	movs	r2, #176	@ 0xb0
 801019e:	4313      	orrs	r3, r2
 80101a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80101a2:	1cbb      	adds	r3, r7, #2
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	2202      	movs	r2, #2
 80101a8:	4013      	ands	r3, r2
 80101aa:	d010      	beq.n	80101ce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2244      	movs	r2, #68	@ 0x44
 80101b0:	4313      	orrs	r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2241      	movs	r2, #65	@ 0x41
 80101b8:	5c9b      	ldrb	r3, [r3, r2]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	001a      	movs	r2, r3
 80101be:	2328      	movs	r3, #40	@ 0x28
 80101c0:	4013      	ands	r3, r2
 80101c2:	2b28      	cmp	r3, #40	@ 0x28
 80101c4:	d003      	beq.n	80101ce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	22b0      	movs	r2, #176	@ 0xb0
 80101ca:	4313      	orrs	r3, r2
 80101cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80101ce:	1cbb      	adds	r3, r7, #2
 80101d0:	2200      	movs	r2, #0
 80101d2:	5e9b      	ldrsh	r3, [r3, r2]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	da03      	bge.n	80101e0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	22b8      	movs	r2, #184	@ 0xb8
 80101dc:	4313      	orrs	r3, r2
 80101de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80101e0:	1cbb      	adds	r3, r7, #2
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	2b10      	cmp	r3, #16
 80101e6:	d103      	bne.n	80101f0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2290      	movs	r2, #144	@ 0x90
 80101ec:	4313      	orrs	r3, r2
 80101ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80101f0:	1cbb      	adds	r3, r7, #2
 80101f2:	881b      	ldrh	r3, [r3, #0]
 80101f4:	2b20      	cmp	r3, #32
 80101f6:	d103      	bne.n	8010200 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2220      	movs	r2, #32
 80101fc:	4313      	orrs	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010200:	1cbb      	adds	r3, r7, #2
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	2b40      	cmp	r3, #64	@ 0x40
 8010206:	d103      	bne.n	8010210 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2240      	movs	r2, #64	@ 0x40
 801020c:	4313      	orrs	r3, r2
 801020e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	43d9      	mvns	r1, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	400a      	ands	r2, r1
 8010220:	601a      	str	r2, [r3, #0]
}
 8010222:	46c0      	nop			@ (mov r8, r8)
 8010224:	46bd      	mov	sp, r7
 8010226:	b004      	add	sp, #16
 8010228:	bd80      	pop	{r7, pc}
	...

0801022c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2241      	movs	r2, #65	@ 0x41
 801023a:	5c9b      	ldrb	r3, [r3, r2]
 801023c:	b2db      	uxtb	r3, r3
 801023e:	2b20      	cmp	r3, #32
 8010240:	d138      	bne.n	80102b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2240      	movs	r2, #64	@ 0x40
 8010246:	5c9b      	ldrb	r3, [r3, r2]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d101      	bne.n	8010250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801024c:	2302      	movs	r3, #2
 801024e:	e032      	b.n	80102b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2240      	movs	r2, #64	@ 0x40
 8010254:	2101      	movs	r1, #1
 8010256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2241      	movs	r2, #65	@ 0x41
 801025c:	2124      	movs	r1, #36	@ 0x24
 801025e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2101      	movs	r1, #1
 801026c:	438a      	bics	r2, r1
 801026e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4911      	ldr	r1, [pc, #68]	@ (80102c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801027c:	400a      	ands	r2, r1
 801027e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	6819      	ldr	r1, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	430a      	orrs	r2, r1
 801028e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2101      	movs	r1, #1
 801029c:	430a      	orrs	r2, r1
 801029e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2241      	movs	r2, #65	@ 0x41
 80102a4:	2120      	movs	r1, #32
 80102a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2240      	movs	r2, #64	@ 0x40
 80102ac:	2100      	movs	r1, #0
 80102ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	e000      	b.n	80102b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80102b4:	2302      	movs	r3, #2
  }
}
 80102b6:	0018      	movs	r0, r3
 80102b8:	46bd      	mov	sp, r7
 80102ba:	b002      	add	sp, #8
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	46c0      	nop			@ (mov r8, r8)
 80102c0:	ffffefff 	.word	0xffffefff

080102c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2241      	movs	r2, #65	@ 0x41
 80102d2:	5c9b      	ldrb	r3, [r3, r2]
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b20      	cmp	r3, #32
 80102d8:	d139      	bne.n	801034e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2240      	movs	r2, #64	@ 0x40
 80102de:	5c9b      	ldrb	r3, [r3, r2]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d101      	bne.n	80102e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80102e4:	2302      	movs	r3, #2
 80102e6:	e033      	b.n	8010350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2240      	movs	r2, #64	@ 0x40
 80102ec:	2101      	movs	r1, #1
 80102ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2241      	movs	r2, #65	@ 0x41
 80102f4:	2124      	movs	r1, #36	@ 0x24
 80102f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2101      	movs	r1, #1
 8010304:	438a      	bics	r2, r1
 8010306:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4a11      	ldr	r2, [pc, #68]	@ (8010358 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8010314:	4013      	ands	r3, r2
 8010316:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	021b      	lsls	r3, r3, #8
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4313      	orrs	r3, r2
 8010320:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2101      	movs	r1, #1
 8010336:	430a      	orrs	r2, r1
 8010338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2241      	movs	r2, #65	@ 0x41
 801033e:	2120      	movs	r1, #32
 8010340:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2240      	movs	r2, #64	@ 0x40
 8010346:	2100      	movs	r1, #0
 8010348:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	e000      	b.n	8010350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801034e:	2302      	movs	r3, #2
  }
}
 8010350:	0018      	movs	r0, r3
 8010352:	46bd      	mov	sp, r7
 8010354:	b004      	add	sp, #16
 8010356:	bd80      	pop	{r7, pc}
 8010358:	fffff0ff 	.word	0xfffff0ff

0801035c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8010364:	4b19      	ldr	r3, [pc, #100]	@ (80103cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4a19      	ldr	r2, [pc, #100]	@ (80103d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 801036a:	4013      	ands	r3, r2
 801036c:	0019      	movs	r1, r3
 801036e:	4b17      	ldr	r3, [pc, #92]	@ (80103cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	430a      	orrs	r2, r1
 8010374:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	2380      	movs	r3, #128	@ 0x80
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	429a      	cmp	r2, r3
 801037e:	d11f      	bne.n	80103c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8010380:	4b14      	ldr	r3, [pc, #80]	@ (80103d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	0013      	movs	r3, r2
 8010386:	005b      	lsls	r3, r3, #1
 8010388:	189b      	adds	r3, r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4912      	ldr	r1, [pc, #72]	@ (80103d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801038e:	0018      	movs	r0, r3
 8010390:	f7ef feca 	bl	8000128 <__udivsi3>
 8010394:	0003      	movs	r3, r0
 8010396:	3301      	adds	r3, #1
 8010398:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801039a:	e008      	b.n	80103ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e001      	b.n	80103ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80103aa:	2303      	movs	r3, #3
 80103ac:	e009      	b.n	80103c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80103ae:	4b07      	ldr	r3, [pc, #28]	@ (80103cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80103b0:	695a      	ldr	r2, [r3, #20]
 80103b2:	2380      	movs	r3, #128	@ 0x80
 80103b4:	00db      	lsls	r3, r3, #3
 80103b6:	401a      	ands	r2, r3
 80103b8:	2380      	movs	r3, #128	@ 0x80
 80103ba:	00db      	lsls	r3, r3, #3
 80103bc:	429a      	cmp	r2, r3
 80103be:	d0ed      	beq.n	801039c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80103c0:	2300      	movs	r3, #0
}
 80103c2:	0018      	movs	r0, r3
 80103c4:	46bd      	mov	sp, r7
 80103c6:	b004      	add	sp, #16
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	46c0      	nop			@ (mov r8, r8)
 80103cc:	40007000 	.word	0x40007000
 80103d0:	fffff9ff 	.word	0xfffff9ff
 80103d4:	20000494 	.word	0x20000494
 80103d8:	000f4240 	.word	0x000f4240

080103dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80103e0:	4b03      	ldr	r3, [pc, #12]	@ (80103f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80103e2:	689a      	ldr	r2, [r3, #8]
 80103e4:	23e0      	movs	r3, #224	@ 0xe0
 80103e6:	01db      	lsls	r3, r3, #7
 80103e8:	4013      	ands	r3, r2
}
 80103ea:	0018      	movs	r0, r3
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	40021000 	.word	0x40021000

080103f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b088      	sub	sp, #32
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d101      	bne.n	8010406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	e2fe      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2201      	movs	r2, #1
 801040c:	4013      	ands	r3, r2
 801040e:	d100      	bne.n	8010412 <HAL_RCC_OscConfig+0x1e>
 8010410:	e07c      	b.n	801050c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010412:	4bc3      	ldr	r3, [pc, #780]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	2238      	movs	r2, #56	@ 0x38
 8010418:	4013      	ands	r3, r2
 801041a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801041c:	4bc0      	ldr	r3, [pc, #768]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	2203      	movs	r2, #3
 8010422:	4013      	ands	r3, r2
 8010424:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	2b10      	cmp	r3, #16
 801042a:	d102      	bne.n	8010432 <HAL_RCC_OscConfig+0x3e>
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d002      	beq.n	8010438 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	2b08      	cmp	r3, #8
 8010436:	d10b      	bne.n	8010450 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010438:	4bb9      	ldr	r3, [pc, #740]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	2380      	movs	r3, #128	@ 0x80
 801043e:	029b      	lsls	r3, r3, #10
 8010440:	4013      	ands	r3, r2
 8010442:	d062      	beq.n	801050a <HAL_RCC_OscConfig+0x116>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d15e      	bne.n	801050a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	e2d9      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685a      	ldr	r2, [r3, #4]
 8010454:	2380      	movs	r3, #128	@ 0x80
 8010456:	025b      	lsls	r3, r3, #9
 8010458:	429a      	cmp	r2, r3
 801045a:	d107      	bne.n	801046c <HAL_RCC_OscConfig+0x78>
 801045c:	4bb0      	ldr	r3, [pc, #704]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	4baf      	ldr	r3, [pc, #700]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010462:	2180      	movs	r1, #128	@ 0x80
 8010464:	0249      	lsls	r1, r1, #9
 8010466:	430a      	orrs	r2, r1
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	e020      	b.n	80104ae <HAL_RCC_OscConfig+0xba>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685a      	ldr	r2, [r3, #4]
 8010470:	23a0      	movs	r3, #160	@ 0xa0
 8010472:	02db      	lsls	r3, r3, #11
 8010474:	429a      	cmp	r2, r3
 8010476:	d10e      	bne.n	8010496 <HAL_RCC_OscConfig+0xa2>
 8010478:	4ba9      	ldr	r3, [pc, #676]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	4ba8      	ldr	r3, [pc, #672]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801047e:	2180      	movs	r1, #128	@ 0x80
 8010480:	02c9      	lsls	r1, r1, #11
 8010482:	430a      	orrs	r2, r1
 8010484:	601a      	str	r2, [r3, #0]
 8010486:	4ba6      	ldr	r3, [pc, #664]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	4ba5      	ldr	r3, [pc, #660]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801048c:	2180      	movs	r1, #128	@ 0x80
 801048e:	0249      	lsls	r1, r1, #9
 8010490:	430a      	orrs	r2, r1
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	e00b      	b.n	80104ae <HAL_RCC_OscConfig+0xba>
 8010496:	4ba2      	ldr	r3, [pc, #648]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	4ba1      	ldr	r3, [pc, #644]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801049c:	49a1      	ldr	r1, [pc, #644]	@ (8010724 <HAL_RCC_OscConfig+0x330>)
 801049e:	400a      	ands	r2, r1
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	4b9f      	ldr	r3, [pc, #636]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	4b9e      	ldr	r3, [pc, #632]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80104a8:	499f      	ldr	r1, [pc, #636]	@ (8010728 <HAL_RCC_OscConfig+0x334>)
 80104aa:	400a      	ands	r2, r1
 80104ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d014      	beq.n	80104e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104b6:	f7fd faa5 	bl	800da04 <HAL_GetTick>
 80104ba:	0003      	movs	r3, r0
 80104bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80104be:	e008      	b.n	80104d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80104c0:	f7fd faa0 	bl	800da04 <HAL_GetTick>
 80104c4:	0002      	movs	r2, r0
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	2b64      	cmp	r3, #100	@ 0x64
 80104cc:	d901      	bls.n	80104d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80104ce:	2303      	movs	r3, #3
 80104d0:	e298      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80104d2:	4b93      	ldr	r3, [pc, #588]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	2380      	movs	r3, #128	@ 0x80
 80104d8:	029b      	lsls	r3, r3, #10
 80104da:	4013      	ands	r3, r2
 80104dc:	d0f0      	beq.n	80104c0 <HAL_RCC_OscConfig+0xcc>
 80104de:	e015      	b.n	801050c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104e0:	f7fd fa90 	bl	800da04 <HAL_GetTick>
 80104e4:	0003      	movs	r3, r0
 80104e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80104e8:	e008      	b.n	80104fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80104ea:	f7fd fa8b 	bl	800da04 <HAL_GetTick>
 80104ee:	0002      	movs	r2, r0
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	1ad3      	subs	r3, r2, r3
 80104f4:	2b64      	cmp	r3, #100	@ 0x64
 80104f6:	d901      	bls.n	80104fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80104f8:	2303      	movs	r3, #3
 80104fa:	e283      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80104fc:	4b88      	ldr	r3, [pc, #544]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	2380      	movs	r3, #128	@ 0x80
 8010502:	029b      	lsls	r3, r3, #10
 8010504:	4013      	ands	r3, r2
 8010506:	d1f0      	bne.n	80104ea <HAL_RCC_OscConfig+0xf6>
 8010508:	e000      	b.n	801050c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801050a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2202      	movs	r2, #2
 8010512:	4013      	ands	r3, r2
 8010514:	d100      	bne.n	8010518 <HAL_RCC_OscConfig+0x124>
 8010516:	e099      	b.n	801064c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010518:	4b81      	ldr	r3, [pc, #516]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	2238      	movs	r2, #56	@ 0x38
 801051e:	4013      	ands	r3, r2
 8010520:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010522:	4b7f      	ldr	r3, [pc, #508]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	2203      	movs	r2, #3
 8010528:	4013      	ands	r3, r2
 801052a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	2b10      	cmp	r3, #16
 8010530:	d102      	bne.n	8010538 <HAL_RCC_OscConfig+0x144>
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b02      	cmp	r3, #2
 8010536:	d002      	beq.n	801053e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d135      	bne.n	80105aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801053e:	4b78      	ldr	r3, [pc, #480]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	2380      	movs	r3, #128	@ 0x80
 8010544:	00db      	lsls	r3, r3, #3
 8010546:	4013      	ands	r3, r2
 8010548:	d005      	beq.n	8010556 <HAL_RCC_OscConfig+0x162>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	e256      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010556:	4b72      	ldr	r3, [pc, #456]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	4a74      	ldr	r2, [pc, #464]	@ (801072c <HAL_RCC_OscConfig+0x338>)
 801055c:	4013      	ands	r3, r2
 801055e:	0019      	movs	r1, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	021a      	lsls	r2, r3, #8
 8010566:	4b6e      	ldr	r3, [pc, #440]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010568:	430a      	orrs	r2, r1
 801056a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d112      	bne.n	8010598 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8010572:	4b6b      	ldr	r3, [pc, #428]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a6e      	ldr	r2, [pc, #440]	@ (8010730 <HAL_RCC_OscConfig+0x33c>)
 8010578:	4013      	ands	r3, r2
 801057a:	0019      	movs	r1, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	691a      	ldr	r2, [r3, #16]
 8010580:	4b67      	ldr	r3, [pc, #412]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010582:	430a      	orrs	r2, r1
 8010584:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8010586:	4b66      	ldr	r3, [pc, #408]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	0adb      	lsrs	r3, r3, #11
 801058c:	2207      	movs	r2, #7
 801058e:	4013      	ands	r3, r2
 8010590:	4a68      	ldr	r2, [pc, #416]	@ (8010734 <HAL_RCC_OscConfig+0x340>)
 8010592:	40da      	lsrs	r2, r3
 8010594:	4b68      	ldr	r3, [pc, #416]	@ (8010738 <HAL_RCC_OscConfig+0x344>)
 8010596:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8010598:	4b68      	ldr	r3, [pc, #416]	@ (801073c <HAL_RCC_OscConfig+0x348>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	0018      	movs	r0, r3
 801059e:	f7fd f9d5 	bl	800d94c <HAL_InitTick>
 80105a2:	1e03      	subs	r3, r0, #0
 80105a4:	d051      	beq.n	801064a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e22c      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d030      	beq.n	8010614 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80105b2:	4b5b      	ldr	r3, [pc, #364]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a5e      	ldr	r2, [pc, #376]	@ (8010730 <HAL_RCC_OscConfig+0x33c>)
 80105b8:	4013      	ands	r3, r2
 80105ba:	0019      	movs	r1, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	691a      	ldr	r2, [r3, #16]
 80105c0:	4b57      	ldr	r3, [pc, #348]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105c2:	430a      	orrs	r2, r1
 80105c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80105c6:	4b56      	ldr	r3, [pc, #344]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	4b55      	ldr	r3, [pc, #340]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105cc:	2180      	movs	r1, #128	@ 0x80
 80105ce:	0049      	lsls	r1, r1, #1
 80105d0:	430a      	orrs	r2, r1
 80105d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105d4:	f7fd fa16 	bl	800da04 <HAL_GetTick>
 80105d8:	0003      	movs	r3, r0
 80105da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80105dc:	e008      	b.n	80105f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80105de:	f7fd fa11 	bl	800da04 <HAL_GetTick>
 80105e2:	0002      	movs	r2, r0
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	1ad3      	subs	r3, r2, r3
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	d901      	bls.n	80105f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80105ec:	2303      	movs	r3, #3
 80105ee:	e209      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80105f0:	4b4b      	ldr	r3, [pc, #300]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	2380      	movs	r3, #128	@ 0x80
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	4013      	ands	r3, r2
 80105fa:	d0f0      	beq.n	80105de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105fc:	4b48      	ldr	r3, [pc, #288]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4a4a      	ldr	r2, [pc, #296]	@ (801072c <HAL_RCC_OscConfig+0x338>)
 8010602:	4013      	ands	r3, r2
 8010604:	0019      	movs	r1, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	695b      	ldr	r3, [r3, #20]
 801060a:	021a      	lsls	r2, r3, #8
 801060c:	4b44      	ldr	r3, [pc, #272]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801060e:	430a      	orrs	r2, r1
 8010610:	605a      	str	r2, [r3, #4]
 8010612:	e01b      	b.n	801064c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8010614:	4b42      	ldr	r3, [pc, #264]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	4b41      	ldr	r3, [pc, #260]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801061a:	4949      	ldr	r1, [pc, #292]	@ (8010740 <HAL_RCC_OscConfig+0x34c>)
 801061c:	400a      	ands	r2, r1
 801061e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010620:	f7fd f9f0 	bl	800da04 <HAL_GetTick>
 8010624:	0003      	movs	r3, r0
 8010626:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010628:	e008      	b.n	801063c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801062a:	f7fd f9eb 	bl	800da04 <HAL_GetTick>
 801062e:	0002      	movs	r2, r0
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	2b02      	cmp	r3, #2
 8010636:	d901      	bls.n	801063c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010638:	2303      	movs	r3, #3
 801063a:	e1e3      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801063c:	4b38      	ldr	r3, [pc, #224]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	2380      	movs	r3, #128	@ 0x80
 8010642:	00db      	lsls	r3, r3, #3
 8010644:	4013      	ands	r3, r2
 8010646:	d1f0      	bne.n	801062a <HAL_RCC_OscConfig+0x236>
 8010648:	e000      	b.n	801064c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801064a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2208      	movs	r2, #8
 8010652:	4013      	ands	r3, r2
 8010654:	d047      	beq.n	80106e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8010656:	4b32      	ldr	r3, [pc, #200]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	2238      	movs	r2, #56	@ 0x38
 801065c:	4013      	ands	r3, r2
 801065e:	2b18      	cmp	r3, #24
 8010660:	d10a      	bne.n	8010678 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8010662:	4b2f      	ldr	r3, [pc, #188]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010666:	2202      	movs	r2, #2
 8010668:	4013      	ands	r3, r2
 801066a:	d03c      	beq.n	80106e6 <HAL_RCC_OscConfig+0x2f2>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d138      	bne.n	80106e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	e1c5      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d019      	beq.n	80106b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8010680:	4b27      	ldr	r3, [pc, #156]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010682:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010684:	4b26      	ldr	r3, [pc, #152]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010686:	2101      	movs	r1, #1
 8010688:	430a      	orrs	r2, r1
 801068a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801068c:	f7fd f9ba 	bl	800da04 <HAL_GetTick>
 8010690:	0003      	movs	r3, r0
 8010692:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010694:	e008      	b.n	80106a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010696:	f7fd f9b5 	bl	800da04 <HAL_GetTick>
 801069a:	0002      	movs	r2, r0
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d901      	bls.n	80106a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80106a4:	2303      	movs	r3, #3
 80106a6:	e1ad      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80106a8:	4b1d      	ldr	r3, [pc, #116]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80106aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106ac:	2202      	movs	r2, #2
 80106ae:	4013      	ands	r3, r2
 80106b0:	d0f1      	beq.n	8010696 <HAL_RCC_OscConfig+0x2a2>
 80106b2:	e018      	b.n	80106e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80106b4:	4b1a      	ldr	r3, [pc, #104]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80106b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80106b8:	4b19      	ldr	r3, [pc, #100]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80106ba:	2101      	movs	r1, #1
 80106bc:	438a      	bics	r2, r1
 80106be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106c0:	f7fd f9a0 	bl	800da04 <HAL_GetTick>
 80106c4:	0003      	movs	r3, r0
 80106c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80106c8:	e008      	b.n	80106dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80106ca:	f7fd f99b 	bl	800da04 <HAL_GetTick>
 80106ce:	0002      	movs	r2, r0
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d901      	bls.n	80106dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80106d8:	2303      	movs	r3, #3
 80106da:	e193      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80106dc:	4b10      	ldr	r3, [pc, #64]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80106de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106e0:	2202      	movs	r2, #2
 80106e2:	4013      	ands	r3, r2
 80106e4:	d1f1      	bne.n	80106ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2204      	movs	r2, #4
 80106ec:	4013      	ands	r3, r2
 80106ee:	d100      	bne.n	80106f2 <HAL_RCC_OscConfig+0x2fe>
 80106f0:	e0c6      	b.n	8010880 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80106f2:	231f      	movs	r3, #31
 80106f4:	18fb      	adds	r3, r7, r3
 80106f6:	2200      	movs	r2, #0
 80106f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80106fa:	4b09      	ldr	r3, [pc, #36]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 80106fc:	689b      	ldr	r3, [r3, #8]
 80106fe:	2238      	movs	r2, #56	@ 0x38
 8010700:	4013      	ands	r3, r2
 8010702:	2b20      	cmp	r3, #32
 8010704:	d11e      	bne.n	8010744 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8010706:	4b06      	ldr	r3, [pc, #24]	@ (8010720 <HAL_RCC_OscConfig+0x32c>)
 8010708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801070a:	2202      	movs	r2, #2
 801070c:	4013      	ands	r3, r2
 801070e:	d100      	bne.n	8010712 <HAL_RCC_OscConfig+0x31e>
 8010710:	e0b6      	b.n	8010880 <HAL_RCC_OscConfig+0x48c>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d000      	beq.n	801071c <HAL_RCC_OscConfig+0x328>
 801071a:	e0b1      	b.n	8010880 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 801071c:	2301      	movs	r3, #1
 801071e:	e171      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
 8010720:	40021000 	.word	0x40021000
 8010724:	fffeffff 	.word	0xfffeffff
 8010728:	fffbffff 	.word	0xfffbffff
 801072c:	ffff80ff 	.word	0xffff80ff
 8010730:	ffffc7ff 	.word	0xffffc7ff
 8010734:	00f42400 	.word	0x00f42400
 8010738:	20000494 	.word	0x20000494
 801073c:	20000498 	.word	0x20000498
 8010740:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010744:	4bb1      	ldr	r3, [pc, #708]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010748:	2380      	movs	r3, #128	@ 0x80
 801074a:	055b      	lsls	r3, r3, #21
 801074c:	4013      	ands	r3, r2
 801074e:	d101      	bne.n	8010754 <HAL_RCC_OscConfig+0x360>
 8010750:	2301      	movs	r3, #1
 8010752:	e000      	b.n	8010756 <HAL_RCC_OscConfig+0x362>
 8010754:	2300      	movs	r3, #0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d011      	beq.n	801077e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 801075a:	4bac      	ldr	r3, [pc, #688]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801075c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801075e:	4bab      	ldr	r3, [pc, #684]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010760:	2180      	movs	r1, #128	@ 0x80
 8010762:	0549      	lsls	r1, r1, #21
 8010764:	430a      	orrs	r2, r1
 8010766:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010768:	4ba8      	ldr	r3, [pc, #672]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801076a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801076c:	2380      	movs	r3, #128	@ 0x80
 801076e:	055b      	lsls	r3, r3, #21
 8010770:	4013      	ands	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]
 8010774:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8010776:	231f      	movs	r3, #31
 8010778:	18fb      	adds	r3, r7, r3
 801077a:	2201      	movs	r2, #1
 801077c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801077e:	4ba4      	ldr	r3, [pc, #656]	@ (8010a10 <HAL_RCC_OscConfig+0x61c>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	2380      	movs	r3, #128	@ 0x80
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	4013      	ands	r3, r2
 8010788:	d11a      	bne.n	80107c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801078a:	4ba1      	ldr	r3, [pc, #644]	@ (8010a10 <HAL_RCC_OscConfig+0x61c>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	4ba0      	ldr	r3, [pc, #640]	@ (8010a10 <HAL_RCC_OscConfig+0x61c>)
 8010790:	2180      	movs	r1, #128	@ 0x80
 8010792:	0049      	lsls	r1, r1, #1
 8010794:	430a      	orrs	r2, r1
 8010796:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8010798:	f7fd f934 	bl	800da04 <HAL_GetTick>
 801079c:	0003      	movs	r3, r0
 801079e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80107a0:	e008      	b.n	80107b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80107a2:	f7fd f92f 	bl	800da04 <HAL_GetTick>
 80107a6:	0002      	movs	r2, r0
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d901      	bls.n	80107b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80107b0:	2303      	movs	r3, #3
 80107b2:	e127      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80107b4:	4b96      	ldr	r3, [pc, #600]	@ (8010a10 <HAL_RCC_OscConfig+0x61c>)
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	2380      	movs	r3, #128	@ 0x80
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	4013      	ands	r3, r2
 80107be:	d0f0      	beq.n	80107a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d106      	bne.n	80107d6 <HAL_RCC_OscConfig+0x3e2>
 80107c8:	4b90      	ldr	r3, [pc, #576]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107cc:	4b8f      	ldr	r3, [pc, #572]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107ce:	2101      	movs	r1, #1
 80107d0:	430a      	orrs	r2, r1
 80107d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80107d4:	e01c      	b.n	8010810 <HAL_RCC_OscConfig+0x41c>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	2b05      	cmp	r3, #5
 80107dc:	d10c      	bne.n	80107f8 <HAL_RCC_OscConfig+0x404>
 80107de:	4b8b      	ldr	r3, [pc, #556]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107e2:	4b8a      	ldr	r3, [pc, #552]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107e4:	2104      	movs	r1, #4
 80107e6:	430a      	orrs	r2, r1
 80107e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80107ea:	4b88      	ldr	r3, [pc, #544]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107ee:	4b87      	ldr	r3, [pc, #540]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107f0:	2101      	movs	r1, #1
 80107f2:	430a      	orrs	r2, r1
 80107f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80107f6:	e00b      	b.n	8010810 <HAL_RCC_OscConfig+0x41c>
 80107f8:	4b84      	ldr	r3, [pc, #528]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107fc:	4b83      	ldr	r3, [pc, #524]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80107fe:	2101      	movs	r1, #1
 8010800:	438a      	bics	r2, r1
 8010802:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010804:	4b81      	ldr	r3, [pc, #516]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010806:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010808:	4b80      	ldr	r3, [pc, #512]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801080a:	2104      	movs	r1, #4
 801080c:	438a      	bics	r2, r1
 801080e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d014      	beq.n	8010842 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010818:	f7fd f8f4 	bl	800da04 <HAL_GetTick>
 801081c:	0003      	movs	r3, r0
 801081e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010820:	e009      	b.n	8010836 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010822:	f7fd f8ef 	bl	800da04 <HAL_GetTick>
 8010826:	0002      	movs	r2, r0
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	4a79      	ldr	r2, [pc, #484]	@ (8010a14 <HAL_RCC_OscConfig+0x620>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d901      	bls.n	8010836 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8010832:	2303      	movs	r3, #3
 8010834:	e0e6      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010836:	4b75      	ldr	r3, [pc, #468]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801083a:	2202      	movs	r2, #2
 801083c:	4013      	ands	r3, r2
 801083e:	d0f0      	beq.n	8010822 <HAL_RCC_OscConfig+0x42e>
 8010840:	e013      	b.n	801086a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010842:	f7fd f8df 	bl	800da04 <HAL_GetTick>
 8010846:	0003      	movs	r3, r0
 8010848:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801084a:	e009      	b.n	8010860 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801084c:	f7fd f8da 	bl	800da04 <HAL_GetTick>
 8010850:	0002      	movs	r2, r0
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	4a6f      	ldr	r2, [pc, #444]	@ (8010a14 <HAL_RCC_OscConfig+0x620>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d901      	bls.n	8010860 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 801085c:	2303      	movs	r3, #3
 801085e:	e0d1      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010860:	4b6a      	ldr	r3, [pc, #424]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010864:	2202      	movs	r2, #2
 8010866:	4013      	ands	r3, r2
 8010868:	d1f0      	bne.n	801084c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 801086a:	231f      	movs	r3, #31
 801086c:	18fb      	adds	r3, r7, r3
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d105      	bne.n	8010880 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8010874:	4b65      	ldr	r3, [pc, #404]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010878:	4b64      	ldr	r3, [pc, #400]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801087a:	4967      	ldr	r1, [pc, #412]	@ (8010a18 <HAL_RCC_OscConfig+0x624>)
 801087c:	400a      	ands	r2, r1
 801087e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	69db      	ldr	r3, [r3, #28]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d100      	bne.n	801088a <HAL_RCC_OscConfig+0x496>
 8010888:	e0bb      	b.n	8010a02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801088a:	4b60      	ldr	r3, [pc, #384]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801088c:	689b      	ldr	r3, [r3, #8]
 801088e:	2238      	movs	r2, #56	@ 0x38
 8010890:	4013      	ands	r3, r2
 8010892:	2b10      	cmp	r3, #16
 8010894:	d100      	bne.n	8010898 <HAL_RCC_OscConfig+0x4a4>
 8010896:	e07b      	b.n	8010990 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	2b02      	cmp	r3, #2
 801089e:	d156      	bne.n	801094e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80108a0:	4b5a      	ldr	r3, [pc, #360]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	4b59      	ldr	r3, [pc, #356]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80108a6:	495d      	ldr	r1, [pc, #372]	@ (8010a1c <HAL_RCC_OscConfig+0x628>)
 80108a8:	400a      	ands	r2, r1
 80108aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108ac:	f7fd f8aa 	bl	800da04 <HAL_GetTick>
 80108b0:	0003      	movs	r3, r0
 80108b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80108b4:	e008      	b.n	80108c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80108b6:	f7fd f8a5 	bl	800da04 <HAL_GetTick>
 80108ba:	0002      	movs	r2, r0
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d901      	bls.n	80108c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80108c4:	2303      	movs	r3, #3
 80108c6:	e09d      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80108c8:	4b50      	ldr	r3, [pc, #320]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	2380      	movs	r3, #128	@ 0x80
 80108ce:	049b      	lsls	r3, r3, #18
 80108d0:	4013      	ands	r3, r2
 80108d2:	d1f0      	bne.n	80108b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80108d4:	4b4d      	ldr	r3, [pc, #308]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	4a51      	ldr	r2, [pc, #324]	@ (8010a20 <HAL_RCC_OscConfig+0x62c>)
 80108da:	4013      	ands	r3, r2
 80108dc:	0019      	movs	r1, r3
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a1a      	ldr	r2, [r3, #32]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108e6:	431a      	orrs	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108ec:	021b      	lsls	r3, r3, #8
 80108ee:	431a      	orrs	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f4:	431a      	orrs	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108fa:	431a      	orrs	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010900:	431a      	orrs	r2, r3
 8010902:	4b42      	ldr	r3, [pc, #264]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010904:	430a      	orrs	r2, r1
 8010906:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010908:	4b40      	ldr	r3, [pc, #256]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	4b3f      	ldr	r3, [pc, #252]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801090e:	2180      	movs	r1, #128	@ 0x80
 8010910:	0449      	lsls	r1, r1, #17
 8010912:	430a      	orrs	r2, r1
 8010914:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8010916:	4b3d      	ldr	r3, [pc, #244]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010918:	68da      	ldr	r2, [r3, #12]
 801091a:	4b3c      	ldr	r3, [pc, #240]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801091c:	2180      	movs	r1, #128	@ 0x80
 801091e:	0549      	lsls	r1, r1, #21
 8010920:	430a      	orrs	r2, r1
 8010922:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010924:	f7fd f86e 	bl	800da04 <HAL_GetTick>
 8010928:	0003      	movs	r3, r0
 801092a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801092c:	e008      	b.n	8010940 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801092e:	f7fd f869 	bl	800da04 <HAL_GetTick>
 8010932:	0002      	movs	r2, r0
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	2b02      	cmp	r3, #2
 801093a:	d901      	bls.n	8010940 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 801093c:	2303      	movs	r3, #3
 801093e:	e061      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010940:	4b32      	ldr	r3, [pc, #200]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	2380      	movs	r3, #128	@ 0x80
 8010946:	049b      	lsls	r3, r3, #18
 8010948:	4013      	ands	r3, r2
 801094a:	d0f0      	beq.n	801092e <HAL_RCC_OscConfig+0x53a>
 801094c:	e059      	b.n	8010a02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801094e:	4b2f      	ldr	r3, [pc, #188]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4b2e      	ldr	r3, [pc, #184]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010954:	4931      	ldr	r1, [pc, #196]	@ (8010a1c <HAL_RCC_OscConfig+0x628>)
 8010956:	400a      	ands	r2, r1
 8010958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801095a:	f7fd f853 	bl	800da04 <HAL_GetTick>
 801095e:	0003      	movs	r3, r0
 8010960:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010962:	e008      	b.n	8010976 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010964:	f7fd f84e 	bl	800da04 <HAL_GetTick>
 8010968:	0002      	movs	r2, r0
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	2b02      	cmp	r3, #2
 8010970:	d901      	bls.n	8010976 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8010972:	2303      	movs	r3, #3
 8010974:	e046      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010976:	4b25      	ldr	r3, [pc, #148]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	2380      	movs	r3, #128	@ 0x80
 801097c:	049b      	lsls	r3, r3, #18
 801097e:	4013      	ands	r3, r2
 8010980:	d1f0      	bne.n	8010964 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8010982:	4b22      	ldr	r3, [pc, #136]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010984:	68da      	ldr	r2, [r3, #12]
 8010986:	4b21      	ldr	r3, [pc, #132]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 8010988:	4926      	ldr	r1, [pc, #152]	@ (8010a24 <HAL_RCC_OscConfig+0x630>)
 801098a:	400a      	ands	r2, r1
 801098c:	60da      	str	r2, [r3, #12]
 801098e:	e038      	b.n	8010a02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d101      	bne.n	801099c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	e033      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 801099c:	4b1b      	ldr	r3, [pc, #108]	@ (8010a0c <HAL_RCC_OscConfig+0x618>)
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2203      	movs	r2, #3
 80109a6:	401a      	ands	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a1b      	ldr	r3, [r3, #32]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d126      	bne.n	80109fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	2270      	movs	r2, #112	@ 0x70
 80109b4:	401a      	ands	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d11f      	bne.n	80109fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80109be:	697a      	ldr	r2, [r7, #20]
 80109c0:	23fe      	movs	r3, #254	@ 0xfe
 80109c2:	01db      	lsls	r3, r3, #7
 80109c4:	401a      	ands	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d116      	bne.n	80109fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80109d0:	697a      	ldr	r2, [r7, #20]
 80109d2:	23f8      	movs	r3, #248	@ 0xf8
 80109d4:	039b      	lsls	r3, r3, #14
 80109d6:	401a      	ands	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80109dc:	429a      	cmp	r2, r3
 80109de:	d10e      	bne.n	80109fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80109e0:	697a      	ldr	r2, [r7, #20]
 80109e2:	23e0      	movs	r3, #224	@ 0xe0
 80109e4:	051b      	lsls	r3, r3, #20
 80109e6:	401a      	ands	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d106      	bne.n	80109fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	0f5b      	lsrs	r3, r3, #29
 80109f4:	075a      	lsls	r2, r3, #29
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d001      	beq.n	8010a02 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e000      	b.n	8010a04 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	0018      	movs	r0, r3
 8010a06:	46bd      	mov	sp, r7
 8010a08:	b008      	add	sp, #32
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	40021000 	.word	0x40021000
 8010a10:	40007000 	.word	0x40007000
 8010a14:	00001388 	.word	0x00001388
 8010a18:	efffffff 	.word	0xefffffff
 8010a1c:	feffffff 	.word	0xfeffffff
 8010a20:	11c1808c 	.word	0x11c1808c
 8010a24:	eefefffc 	.word	0xeefefffc

08010a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e0e9      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010a3c:	4b76      	ldr	r3, [pc, #472]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2207      	movs	r2, #7
 8010a42:	4013      	ands	r3, r2
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d91e      	bls.n	8010a88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a4a:	4b73      	ldr	r3, [pc, #460]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2207      	movs	r2, #7
 8010a50:	4393      	bics	r3, r2
 8010a52:	0019      	movs	r1, r3
 8010a54:	4b70      	ldr	r3, [pc, #448]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	430a      	orrs	r2, r1
 8010a5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010a5c:	f7fc ffd2 	bl	800da04 <HAL_GetTick>
 8010a60:	0003      	movs	r3, r0
 8010a62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010a64:	e009      	b.n	8010a7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010a66:	f7fc ffcd 	bl	800da04 <HAL_GetTick>
 8010a6a:	0002      	movs	r2, r0
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	4a6a      	ldr	r2, [pc, #424]	@ (8010c1c <HAL_RCC_ClockConfig+0x1f4>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d901      	bls.n	8010a7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8010a76:	2303      	movs	r3, #3
 8010a78:	e0ca      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010a7a:	4b67      	ldr	r3, [pc, #412]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2207      	movs	r2, #7
 8010a80:	4013      	ands	r3, r2
 8010a82:	683a      	ldr	r2, [r7, #0]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d1ee      	bne.n	8010a66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	4013      	ands	r3, r2
 8010a90:	d015      	beq.n	8010abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2204      	movs	r2, #4
 8010a98:	4013      	ands	r3, r2
 8010a9a:	d006      	beq.n	8010aaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8010a9c:	4b60      	ldr	r3, [pc, #384]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010a9e:	689a      	ldr	r2, [r3, #8]
 8010aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010aa2:	21e0      	movs	r1, #224	@ 0xe0
 8010aa4:	01c9      	lsls	r1, r1, #7
 8010aa6:	430a      	orrs	r2, r1
 8010aa8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	4a5d      	ldr	r2, [pc, #372]	@ (8010c24 <HAL_RCC_ClockConfig+0x1fc>)
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	0019      	movs	r1, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	689a      	ldr	r2, [r3, #8]
 8010ab8:	4b59      	ldr	r3, [pc, #356]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010aba:	430a      	orrs	r2, r1
 8010abc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	d057      	beq.n	8010b78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d107      	bne.n	8010ae0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010ad0:	4b53      	ldr	r3, [pc, #332]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	2380      	movs	r3, #128	@ 0x80
 8010ad6:	029b      	lsls	r3, r3, #10
 8010ad8:	4013      	ands	r3, r2
 8010ada:	d12b      	bne.n	8010b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e097      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d107      	bne.n	8010af8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	2380      	movs	r3, #128	@ 0x80
 8010aee:	049b      	lsls	r3, r3, #18
 8010af0:	4013      	ands	r3, r2
 8010af2:	d11f      	bne.n	8010b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8010af4:	2301      	movs	r3, #1
 8010af6:	e08b      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d107      	bne.n	8010b10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010b00:	4b47      	ldr	r3, [pc, #284]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	2380      	movs	r3, #128	@ 0x80
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	4013      	ands	r3, r2
 8010b0a:	d113      	bne.n	8010b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e07f      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d106      	bne.n	8010b26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010b18:	4b41      	ldr	r3, [pc, #260]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010b1c:	2202      	movs	r2, #2
 8010b1e:	4013      	ands	r3, r2
 8010b20:	d108      	bne.n	8010b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8010b22:	2301      	movs	r3, #1
 8010b24:	e074      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010b26:	4b3e      	ldr	r3, [pc, #248]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b2a:	2202      	movs	r2, #2
 8010b2c:	4013      	ands	r3, r2
 8010b2e:	d101      	bne.n	8010b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8010b30:	2301      	movs	r3, #1
 8010b32:	e06d      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010b34:	4b3a      	ldr	r3, [pc, #232]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	2207      	movs	r2, #7
 8010b3a:	4393      	bics	r3, r2
 8010b3c:	0019      	movs	r1, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	4b37      	ldr	r3, [pc, #220]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b44:	430a      	orrs	r2, r1
 8010b46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010b48:	f7fc ff5c 	bl	800da04 <HAL_GetTick>
 8010b4c:	0003      	movs	r3, r0
 8010b4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b50:	e009      	b.n	8010b66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b52:	f7fc ff57 	bl	800da04 <HAL_GetTick>
 8010b56:	0002      	movs	r2, r0
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	1ad3      	subs	r3, r2, r3
 8010b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8010c1c <HAL_RCC_ClockConfig+0x1f4>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d901      	bls.n	8010b66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8010b62:	2303      	movs	r3, #3
 8010b64:	e054      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b66:	4b2e      	ldr	r3, [pc, #184]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010b68:	689b      	ldr	r3, [r3, #8]
 8010b6a:	2238      	movs	r2, #56	@ 0x38
 8010b6c:	401a      	ands	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d1ec      	bne.n	8010b52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010b78:	4b27      	ldr	r3, [pc, #156]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2207      	movs	r2, #7
 8010b7e:	4013      	ands	r3, r2
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d21e      	bcs.n	8010bc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b86:	4b24      	ldr	r3, [pc, #144]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2207      	movs	r2, #7
 8010b8c:	4393      	bics	r3, r2
 8010b8e:	0019      	movs	r1, r3
 8010b90:	4b21      	ldr	r3, [pc, #132]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010b92:	683a      	ldr	r2, [r7, #0]
 8010b94:	430a      	orrs	r2, r1
 8010b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010b98:	f7fc ff34 	bl	800da04 <HAL_GetTick>
 8010b9c:	0003      	movs	r3, r0
 8010b9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010ba0:	e009      	b.n	8010bb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010ba2:	f7fc ff2f 	bl	800da04 <HAL_GetTick>
 8010ba6:	0002      	movs	r2, r0
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	4a1b      	ldr	r2, [pc, #108]	@ (8010c1c <HAL_RCC_ClockConfig+0x1f4>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d901      	bls.n	8010bb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	e02c      	b.n	8010c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8010bb6:	4b18      	ldr	r3, [pc, #96]	@ (8010c18 <HAL_RCC_ClockConfig+0x1f0>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2207      	movs	r2, #7
 8010bbc:	4013      	ands	r3, r2
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d1ee      	bne.n	8010ba2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2204      	movs	r2, #4
 8010bca:	4013      	ands	r3, r2
 8010bcc:	d009      	beq.n	8010be2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010bce:	4b14      	ldr	r3, [pc, #80]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	4a15      	ldr	r2, [pc, #84]	@ (8010c28 <HAL_RCC_ClockConfig+0x200>)
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	0019      	movs	r1, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	68da      	ldr	r2, [r3, #12]
 8010bdc:	4b10      	ldr	r3, [pc, #64]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010bde:	430a      	orrs	r2, r1
 8010be0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8010be2:	f000 f869 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8010be6:	0001      	movs	r1, r0
 8010be8:	4b0d      	ldr	r3, [pc, #52]	@ (8010c20 <HAL_RCC_ClockConfig+0x1f8>)
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	0a1b      	lsrs	r3, r3, #8
 8010bee:	220f      	movs	r2, #15
 8010bf0:	401a      	ands	r2, r3
 8010bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8010c2c <HAL_RCC_ClockConfig+0x204>)
 8010bf4:	0092      	lsls	r2, r2, #2
 8010bf6:	58d3      	ldr	r3, [r2, r3]
 8010bf8:	221f      	movs	r2, #31
 8010bfa:	4013      	ands	r3, r2
 8010bfc:	000a      	movs	r2, r1
 8010bfe:	40da      	lsrs	r2, r3
 8010c00:	4b0b      	ldr	r3, [pc, #44]	@ (8010c30 <HAL_RCC_ClockConfig+0x208>)
 8010c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8010c04:	4b0b      	ldr	r3, [pc, #44]	@ (8010c34 <HAL_RCC_ClockConfig+0x20c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	0018      	movs	r0, r3
 8010c0a:	f7fc fe9f 	bl	800d94c <HAL_InitTick>
 8010c0e:	0003      	movs	r3, r0
}
 8010c10:	0018      	movs	r0, r3
 8010c12:	46bd      	mov	sp, r7
 8010c14:	b004      	add	sp, #16
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	40022000 	.word	0x40022000
 8010c1c:	00001388 	.word	0x00001388
 8010c20:	40021000 	.word	0x40021000
 8010c24:	fffff0ff 	.word	0xfffff0ff
 8010c28:	ffff8fff 	.word	0xffff8fff
 8010c2c:	08019580 	.word	0x08019580
 8010c30:	20000494 	.word	0x20000494
 8010c34:	20000498 	.word	0x20000498

08010c38 <HAL_RCC_MCOConfig>:
  *
  * (*) Feature not available on all devices of the family
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b08a      	sub	sp, #40	@ 0x28
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8010c44:	2014      	movs	r0, #20
 8010c46:	183b      	adds	r3, r7, r0
 8010c48:	2202      	movs	r2, #2
 8010c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c4c:	183b      	adds	r3, r7, r0
 8010c4e:	2203      	movs	r2, #3
 8010c50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8010c52:	183b      	adds	r3, r7, r0
 8010c54:	2200      	movs	r2, #0
 8010c56:	609a      	str	r2, [r3, #8]

  if (RCC_MCOx == RCC_MCO1)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d124      	bne.n	8010ca8 <HAL_RCC_MCOConfig+0x70>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8010c5e:	4b14      	ldr	r3, [pc, #80]	@ (8010cb0 <HAL_RCC_MCOConfig+0x78>)
 8010c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c62:	4b13      	ldr	r3, [pc, #76]	@ (8010cb0 <HAL_RCC_MCOConfig+0x78>)
 8010c64:	2101      	movs	r1, #1
 8010c66:	430a      	orrs	r2, r1
 8010c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c6a:	4b11      	ldr	r3, [pc, #68]	@ (8010cb0 <HAL_RCC_MCOConfig+0x78>)
 8010c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c6e:	2201      	movs	r2, #1
 8010c70:	4013      	ands	r3, r2
 8010c72:	613b      	str	r3, [r7, #16]
 8010c74:	693b      	ldr	r3, [r7, #16]
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010c76:	183b      	adds	r3, r7, r0
 8010c78:	2280      	movs	r2, #128	@ 0x80
 8010c7a:	0052      	lsls	r2, r2, #1
 8010c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010c7e:	183b      	adds	r3, r7, r0
 8010c80:	2200      	movs	r2, #0
 8010c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8010c84:	183a      	adds	r2, r7, r0
 8010c86:	23a0      	movs	r3, #160	@ 0xa0
 8010c88:	05db      	lsls	r3, r3, #23
 8010c8a:	0011      	movs	r1, r2
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	f7fd fb0f 	bl	800e2b0 <HAL_GPIO_Init>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8010c92:	4b07      	ldr	r3, [pc, #28]	@ (8010cb0 <HAL_RCC_MCOConfig+0x78>)
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	4a07      	ldr	r2, [pc, #28]	@ (8010cb4 <HAL_RCC_MCOConfig+0x7c>)
 8010c98:	4013      	ands	r3, r2
 8010c9a:	0019      	movs	r1, r3
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	431a      	orrs	r2, r3
 8010ca2:	4b03      	ldr	r3, [pc, #12]	@ (8010cb0 <HAL_RCC_MCOConfig+0x78>)
 8010ca4:	430a      	orrs	r2, r1
 8010ca6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
  }
#endif /* RCC_MCO2_SUPPORT */
}
 8010ca8:	46c0      	nop			@ (mov r8, r8)
 8010caa:	46bd      	mov	sp, r7
 8010cac:	b00a      	add	sp, #40	@ 0x28
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	40021000 	.word	0x40021000
 8010cb4:	88ffffff 	.word	0x88ffffff

08010cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	2238      	movs	r2, #56	@ 0x38
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	d10f      	bne.n	8010ce8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8010cc8:	4b39      	ldr	r3, [pc, #228]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	0adb      	lsrs	r3, r3, #11
 8010cce:	2207      	movs	r2, #7
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	409a      	lsls	r2, r3
 8010cd6:	0013      	movs	r3, r2
 8010cd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4835      	ldr	r0, [pc, #212]	@ (8010db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8010cde:	f7ef fa23 	bl	8000128 <__udivsi3>
 8010ce2:	0003      	movs	r3, r0
 8010ce4:	613b      	str	r3, [r7, #16]
 8010ce6:	e05d      	b.n	8010da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010ce8:	4b31      	ldr	r3, [pc, #196]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	2238      	movs	r2, #56	@ 0x38
 8010cee:	4013      	ands	r3, r2
 8010cf0:	2b08      	cmp	r3, #8
 8010cf2:	d102      	bne.n	8010cfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010cf4:	4b30      	ldr	r3, [pc, #192]	@ (8010db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8010cf6:	613b      	str	r3, [r7, #16]
 8010cf8:	e054      	b.n	8010da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010cfc:	689b      	ldr	r3, [r3, #8]
 8010cfe:	2238      	movs	r2, #56	@ 0x38
 8010d00:	4013      	ands	r3, r2
 8010d02:	2b10      	cmp	r3, #16
 8010d04:	d138      	bne.n	8010d78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8010d06:	4b2a      	ldr	r3, [pc, #168]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	2203      	movs	r2, #3
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010d10:	4b27      	ldr	r3, [pc, #156]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	091b      	lsrs	r3, r3, #4
 8010d16:	2207      	movs	r2, #7
 8010d18:	4013      	ands	r3, r2
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2b03      	cmp	r3, #3
 8010d22:	d10d      	bne.n	8010d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	4824      	ldr	r0, [pc, #144]	@ (8010db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8010d28:	f7ef f9fe 	bl	8000128 <__udivsi3>
 8010d2c:	0003      	movs	r3, r0
 8010d2e:	0019      	movs	r1, r3
 8010d30:	4b1f      	ldr	r3, [pc, #124]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	0a1b      	lsrs	r3, r3, #8
 8010d36:	227f      	movs	r2, #127	@ 0x7f
 8010d38:	4013      	ands	r3, r2
 8010d3a:	434b      	muls	r3, r1
 8010d3c:	617b      	str	r3, [r7, #20]
        break;
 8010d3e:	e00d      	b.n	8010d5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8010d40:	68b9      	ldr	r1, [r7, #8]
 8010d42:	481c      	ldr	r0, [pc, #112]	@ (8010db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8010d44:	f7ef f9f0 	bl	8000128 <__udivsi3>
 8010d48:	0003      	movs	r3, r0
 8010d4a:	0019      	movs	r1, r3
 8010d4c:	4b18      	ldr	r3, [pc, #96]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	0a1b      	lsrs	r3, r3, #8
 8010d52:	227f      	movs	r2, #127	@ 0x7f
 8010d54:	4013      	ands	r3, r2
 8010d56:	434b      	muls	r3, r1
 8010d58:	617b      	str	r3, [r7, #20]
        break;
 8010d5a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8010d5c:	4b14      	ldr	r3, [pc, #80]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	0f5b      	lsrs	r3, r3, #29
 8010d62:	2207      	movs	r2, #7
 8010d64:	4013      	ands	r3, r2
 8010d66:	3301      	adds	r3, #1
 8010d68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	6978      	ldr	r0, [r7, #20]
 8010d6e:	f7ef f9db 	bl	8000128 <__udivsi3>
 8010d72:	0003      	movs	r3, r0
 8010d74:	613b      	str	r3, [r7, #16]
 8010d76:	e015      	b.n	8010da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8010d78:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	2238      	movs	r2, #56	@ 0x38
 8010d7e:	4013      	ands	r3, r2
 8010d80:	2b20      	cmp	r3, #32
 8010d82:	d103      	bne.n	8010d8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8010d84:	2380      	movs	r3, #128	@ 0x80
 8010d86:	021b      	lsls	r3, r3, #8
 8010d88:	613b      	str	r3, [r7, #16]
 8010d8a:	e00b      	b.n	8010da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8010d8c:	4b08      	ldr	r3, [pc, #32]	@ (8010db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	2238      	movs	r2, #56	@ 0x38
 8010d92:	4013      	ands	r3, r2
 8010d94:	2b18      	cmp	r3, #24
 8010d96:	d103      	bne.n	8010da0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8010d98:	23fa      	movs	r3, #250	@ 0xfa
 8010d9a:	01db      	lsls	r3, r3, #7
 8010d9c:	613b      	str	r3, [r7, #16]
 8010d9e:	e001      	b.n	8010da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8010da0:	2300      	movs	r3, #0
 8010da2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8010da4:	693b      	ldr	r3, [r7, #16]
}
 8010da6:	0018      	movs	r0, r3
 8010da8:	46bd      	mov	sp, r7
 8010daa:	b006      	add	sp, #24
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	46c0      	nop			@ (mov r8, r8)
 8010db0:	40021000 	.word	0x40021000
 8010db4:	00f42400 	.word	0x00f42400
 8010db8:	007a1200 	.word	0x007a1200

08010dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010dc0:	4b02      	ldr	r3, [pc, #8]	@ (8010dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
}
 8010dc4:	0018      	movs	r0, r3
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	46c0      	nop			@ (mov r8, r8)
 8010dcc:	20000494 	.word	0x20000494

08010dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010dd0:	b5b0      	push	{r4, r5, r7, lr}
 8010dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8010dd4:	f7ff fff2 	bl	8010dbc <HAL_RCC_GetHCLKFreq>
 8010dd8:	0004      	movs	r4, r0
 8010dda:	f7ff faff 	bl	80103dc <LL_RCC_GetAPB1Prescaler>
 8010dde:	0003      	movs	r3, r0
 8010de0:	0b1a      	lsrs	r2, r3, #12
 8010de2:	4b05      	ldr	r3, [pc, #20]	@ (8010df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010de4:	0092      	lsls	r2, r2, #2
 8010de6:	58d3      	ldr	r3, [r2, r3]
 8010de8:	221f      	movs	r2, #31
 8010dea:	4013      	ands	r3, r2
 8010dec:	40dc      	lsrs	r4, r3
 8010dee:	0023      	movs	r3, r4
}
 8010df0:	0018      	movs	r0, r3
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bdb0      	pop	{r4, r5, r7, pc}
 8010df6:	46c0      	nop			@ (mov r8, r8)
 8010df8:	080195c0 	.word	0x080195c0

08010dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8010e04:	2313      	movs	r3, #19
 8010e06:	18fb      	adds	r3, r7, r3
 8010e08:	2200      	movs	r2, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010e0c:	2312      	movs	r3, #18
 8010e0e:	18fb      	adds	r3, r7, r3
 8010e10:	2200      	movs	r2, #0
 8010e12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	2380      	movs	r3, #128	@ 0x80
 8010e1a:	029b      	lsls	r3, r3, #10
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	d100      	bne.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8010e20:	e0a3      	b.n	8010f6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010e22:	2011      	movs	r0, #17
 8010e24:	183b      	adds	r3, r7, r0
 8010e26:	2200      	movs	r2, #0
 8010e28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010e2a:	4bc3      	ldr	r3, [pc, #780]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e2e:	2380      	movs	r3, #128	@ 0x80
 8010e30:	055b      	lsls	r3, r3, #21
 8010e32:	4013      	ands	r3, r2
 8010e34:	d110      	bne.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010e36:	4bc0      	ldr	r3, [pc, #768]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010e38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e3a:	4bbf      	ldr	r3, [pc, #764]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010e3c:	2180      	movs	r1, #128	@ 0x80
 8010e3e:	0549      	lsls	r1, r1, #21
 8010e40:	430a      	orrs	r2, r1
 8010e42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010e44:	4bbc      	ldr	r3, [pc, #752]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e48:	2380      	movs	r3, #128	@ 0x80
 8010e4a:	055b      	lsls	r3, r3, #21
 8010e4c:	4013      	ands	r3, r2
 8010e4e:	60bb      	str	r3, [r7, #8]
 8010e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010e52:	183b      	adds	r3, r7, r0
 8010e54:	2201      	movs	r2, #1
 8010e56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010e58:	4bb8      	ldr	r3, [pc, #736]	@ (801113c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	4bb7      	ldr	r3, [pc, #732]	@ (801113c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8010e5e:	2180      	movs	r1, #128	@ 0x80
 8010e60:	0049      	lsls	r1, r1, #1
 8010e62:	430a      	orrs	r2, r1
 8010e64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010e66:	f7fc fdcd 	bl	800da04 <HAL_GetTick>
 8010e6a:	0003      	movs	r3, r0
 8010e6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010e6e:	e00b      	b.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e70:	f7fc fdc8 	bl	800da04 <HAL_GetTick>
 8010e74:	0002      	movs	r2, r0
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	2b02      	cmp	r3, #2
 8010e7c:	d904      	bls.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8010e7e:	2313      	movs	r3, #19
 8010e80:	18fb      	adds	r3, r7, r3
 8010e82:	2203      	movs	r2, #3
 8010e84:	701a      	strb	r2, [r3, #0]
        break;
 8010e86:	e005      	b.n	8010e94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010e88:	4bac      	ldr	r3, [pc, #688]	@ (801113c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	2380      	movs	r3, #128	@ 0x80
 8010e8e:	005b      	lsls	r3, r3, #1
 8010e90:	4013      	ands	r3, r2
 8010e92:	d0ed      	beq.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8010e94:	2313      	movs	r3, #19
 8010e96:	18fb      	adds	r3, r7, r3
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d154      	bne.n	8010f48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010e9e:	4ba6      	ldr	r3, [pc, #664]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ea0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ea2:	23c0      	movs	r3, #192	@ 0xc0
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4013      	ands	r3, r2
 8010ea8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d019      	beq.n	8010ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d014      	beq.n	8010ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010eba:	4b9f      	ldr	r3, [pc, #636]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ebe:	4aa0      	ldr	r2, [pc, #640]	@ (8011140 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ec6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010eca:	2180      	movs	r1, #128	@ 0x80
 8010ecc:	0249      	lsls	r1, r1, #9
 8010ece:	430a      	orrs	r2, r1
 8010ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010ed2:	4b99      	ldr	r3, [pc, #612]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ed4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ed6:	4b98      	ldr	r3, [pc, #608]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ed8:	499a      	ldr	r1, [pc, #616]	@ (8011144 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8010eda:	400a      	ands	r2, r1
 8010edc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010ede:	4b96      	ldr	r3, [pc, #600]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ee0:	697a      	ldr	r2, [r7, #20]
 8010ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	4013      	ands	r3, r2
 8010eea:	d016      	beq.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eec:	f7fc fd8a 	bl	800da04 <HAL_GetTick>
 8010ef0:	0003      	movs	r3, r0
 8010ef2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010ef4:	e00c      	b.n	8010f10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010ef6:	f7fc fd85 	bl	800da04 <HAL_GetTick>
 8010efa:	0002      	movs	r2, r0
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	4a91      	ldr	r2, [pc, #580]	@ (8011148 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d904      	bls.n	8010f10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8010f06:	2313      	movs	r3, #19
 8010f08:	18fb      	adds	r3, r7, r3
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	701a      	strb	r2, [r3, #0]
            break;
 8010f0e:	e004      	b.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010f10:	4b89      	ldr	r3, [pc, #548]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f14:	2202      	movs	r2, #2
 8010f16:	4013      	ands	r3, r2
 8010f18:	d0ed      	beq.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8010f1a:	2313      	movs	r3, #19
 8010f1c:	18fb      	adds	r3, r7, r3
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d10a      	bne.n	8010f3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f24:	4b84      	ldr	r3, [pc, #528]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f28:	4a85      	ldr	r2, [pc, #532]	@ (8011140 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	0019      	movs	r1, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f32:	4b81      	ldr	r3, [pc, #516]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f34:	430a      	orrs	r2, r1
 8010f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010f38:	e00c      	b.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010f3a:	2312      	movs	r3, #18
 8010f3c:	18fb      	adds	r3, r7, r3
 8010f3e:	2213      	movs	r2, #19
 8010f40:	18ba      	adds	r2, r7, r2
 8010f42:	7812      	ldrb	r2, [r2, #0]
 8010f44:	701a      	strb	r2, [r3, #0]
 8010f46:	e005      	b.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f48:	2312      	movs	r3, #18
 8010f4a:	18fb      	adds	r3, r7, r3
 8010f4c:	2213      	movs	r2, #19
 8010f4e:	18ba      	adds	r2, r7, r2
 8010f50:	7812      	ldrb	r2, [r2, #0]
 8010f52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010f54:	2311      	movs	r3, #17
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d105      	bne.n	8010f6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010f5e:	4b76      	ldr	r3, [pc, #472]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f62:	4b75      	ldr	r3, [pc, #468]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f64:	4979      	ldr	r1, [pc, #484]	@ (801114c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8010f66:	400a      	ands	r2, r1
 8010f68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	4013      	ands	r3, r2
 8010f72:	d009      	beq.n	8010f88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010f74:	4b70      	ldr	r3, [pc, #448]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f78:	2203      	movs	r2, #3
 8010f7a:	4393      	bics	r3, r2
 8010f7c:	0019      	movs	r1, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	685a      	ldr	r2, [r3, #4]
 8010f82:	4b6d      	ldr	r3, [pc, #436]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f84:	430a      	orrs	r2, r1
 8010f86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	4013      	ands	r3, r2
 8010f90:	d009      	beq.n	8010fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010f92:	4b69      	ldr	r3, [pc, #420]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f96:	220c      	movs	r2, #12
 8010f98:	4393      	bics	r3, r2
 8010f9a:	0019      	movs	r1, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	689a      	ldr	r2, [r3, #8]
 8010fa0:	4b65      	ldr	r3, [pc, #404]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2210      	movs	r2, #16
 8010fac:	4013      	ands	r3, r2
 8010fae:	d009      	beq.n	8010fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010fb0:	4b61      	ldr	r3, [pc, #388]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fb4:	4a66      	ldr	r2, [pc, #408]	@ (8011150 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8010fb6:	4013      	ands	r3, r2
 8010fb8:	0019      	movs	r1, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	68da      	ldr	r2, [r3, #12]
 8010fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	2380      	movs	r3, #128	@ 0x80
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4013      	ands	r3, r2
 8010fce:	d009      	beq.n	8010fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010fd0:	4b59      	ldr	r3, [pc, #356]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8011154 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	0019      	movs	r1, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	699a      	ldr	r2, [r3, #24]
 8010fde:	4b56      	ldr	r3, [pc, #344]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010fe0:	430a      	orrs	r2, r1
 8010fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	2380      	movs	r3, #128	@ 0x80
 8010fea:	00db      	lsls	r3, r3, #3
 8010fec:	4013      	ands	r3, r2
 8010fee:	d009      	beq.n	8011004 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010ff0:	4b51      	ldr	r3, [pc, #324]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8010ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ff4:	4a58      	ldr	r2, [pc, #352]	@ (8011158 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8010ff6:	4013      	ands	r3, r2
 8010ff8:	0019      	movs	r1, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	69da      	ldr	r2, [r3, #28]
 8010ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011000:	430a      	orrs	r2, r1
 8011002:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2220      	movs	r2, #32
 801100a:	4013      	ands	r3, r2
 801100c:	d009      	beq.n	8011022 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801100e:	4b4a      	ldr	r3, [pc, #296]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011012:	4a52      	ldr	r2, [pc, #328]	@ (801115c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8011014:	4013      	ands	r3, r2
 8011016:	0019      	movs	r1, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	691a      	ldr	r2, [r3, #16]
 801101c:	4b46      	ldr	r3, [pc, #280]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 801101e:	430a      	orrs	r2, r1
 8011020:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	2380      	movs	r3, #128	@ 0x80
 8011028:	01db      	lsls	r3, r3, #7
 801102a:	4013      	ands	r3, r2
 801102c:	d015      	beq.n	801105a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801102e:	4b42      	ldr	r3, [pc, #264]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	0899      	lsrs	r1, r3, #2
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6a1a      	ldr	r2, [r3, #32]
 801103a:	4b3f      	ldr	r3, [pc, #252]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 801103c:	430a      	orrs	r2, r1
 801103e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a1a      	ldr	r2, [r3, #32]
 8011044:	2380      	movs	r3, #128	@ 0x80
 8011046:	05db      	lsls	r3, r3, #23
 8011048:	429a      	cmp	r2, r3
 801104a:	d106      	bne.n	801105a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 801104c:	4b3a      	ldr	r3, [pc, #232]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 801104e:	68da      	ldr	r2, [r3, #12]
 8011050:	4b39      	ldr	r3, [pc, #228]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011052:	2180      	movs	r1, #128	@ 0x80
 8011054:	0249      	lsls	r1, r1, #9
 8011056:	430a      	orrs	r2, r1
 8011058:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	2380      	movs	r3, #128	@ 0x80
 8011060:	031b      	lsls	r3, r3, #12
 8011062:	4013      	ands	r3, r2
 8011064:	d009      	beq.n	801107a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011066:	4b34      	ldr	r3, [pc, #208]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801106a:	2240      	movs	r2, #64	@ 0x40
 801106c:	4393      	bics	r3, r2
 801106e:	0019      	movs	r1, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011074:	4b30      	ldr	r3, [pc, #192]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011076:	430a      	orrs	r2, r1
 8011078:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	2380      	movs	r3, #128	@ 0x80
 8011080:	039b      	lsls	r3, r3, #14
 8011082:	4013      	ands	r3, r2
 8011084:	d016      	beq.n	80110b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8011086:	4b2c      	ldr	r3, [pc, #176]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801108a:	4a35      	ldr	r2, [pc, #212]	@ (8011160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 801108c:	4013      	ands	r3, r2
 801108e:	0019      	movs	r1, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011094:	4b28      	ldr	r3, [pc, #160]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011096:	430a      	orrs	r2, r1
 8011098:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801109e:	2380      	movs	r3, #128	@ 0x80
 80110a0:	03db      	lsls	r3, r3, #15
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d106      	bne.n	80110b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80110a6:	4b24      	ldr	r3, [pc, #144]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110a8:	68da      	ldr	r2, [r3, #12]
 80110aa:	4b23      	ldr	r3, [pc, #140]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110ac:	2180      	movs	r1, #128	@ 0x80
 80110ae:	0449      	lsls	r1, r1, #17
 80110b0:	430a      	orrs	r2, r1
 80110b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	2380      	movs	r3, #128	@ 0x80
 80110ba:	03db      	lsls	r3, r3, #15
 80110bc:	4013      	ands	r3, r2
 80110be:	d016      	beq.n	80110ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80110c0:	4b1d      	ldr	r3, [pc, #116]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110c4:	4a27      	ldr	r2, [pc, #156]	@ (8011164 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80110c6:	4013      	ands	r3, r2
 80110c8:	0019      	movs	r1, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ce:	4b1a      	ldr	r3, [pc, #104]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110d0:	430a      	orrs	r2, r1
 80110d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110d8:	2380      	movs	r3, #128	@ 0x80
 80110da:	045b      	lsls	r3, r3, #17
 80110dc:	429a      	cmp	r2, r3
 80110de:	d106      	bne.n	80110ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80110e0:	4b15      	ldr	r3, [pc, #84]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110e2:	68da      	ldr	r2, [r3, #12]
 80110e4:	4b14      	ldr	r3, [pc, #80]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110e6:	2180      	movs	r1, #128	@ 0x80
 80110e8:	0449      	lsls	r1, r1, #17
 80110ea:	430a      	orrs	r2, r1
 80110ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	2380      	movs	r3, #128	@ 0x80
 80110f4:	011b      	lsls	r3, r3, #4
 80110f6:	4013      	ands	r3, r2
 80110f8:	d016      	beq.n	8011128 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80110fa:	4b0f      	ldr	r3, [pc, #60]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80110fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110fe:	4a1a      	ldr	r2, [pc, #104]	@ (8011168 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8011100:	4013      	ands	r3, r2
 8011102:	0019      	movs	r1, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	695a      	ldr	r2, [r3, #20]
 8011108:	4b0b      	ldr	r3, [pc, #44]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 801110a:	430a      	orrs	r2, r1
 801110c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	695a      	ldr	r2, [r3, #20]
 8011112:	2380      	movs	r3, #128	@ 0x80
 8011114:	01db      	lsls	r3, r3, #7
 8011116:	429a      	cmp	r2, r3
 8011118:	d106      	bne.n	8011128 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 801111a:	4b07      	ldr	r3, [pc, #28]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 801111c:	68da      	ldr	r2, [r3, #12]
 801111e:	4b06      	ldr	r3, [pc, #24]	@ (8011138 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011120:	2180      	movs	r1, #128	@ 0x80
 8011122:	0249      	lsls	r1, r1, #9
 8011124:	430a      	orrs	r2, r1
 8011126:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8011128:	2312      	movs	r3, #18
 801112a:	18fb      	adds	r3, r7, r3
 801112c:	781b      	ldrb	r3, [r3, #0]
}
 801112e:	0018      	movs	r0, r3
 8011130:	46bd      	mov	sp, r7
 8011132:	b006      	add	sp, #24
 8011134:	bd80      	pop	{r7, pc}
 8011136:	46c0      	nop			@ (mov r8, r8)
 8011138:	40021000 	.word	0x40021000
 801113c:	40007000 	.word	0x40007000
 8011140:	fffffcff 	.word	0xfffffcff
 8011144:	fffeffff 	.word	0xfffeffff
 8011148:	00001388 	.word	0x00001388
 801114c:	efffffff 	.word	0xefffffff
 8011150:	fffff3ff 	.word	0xfffff3ff
 8011154:	fff3ffff 	.word	0xfff3ffff
 8011158:	ffcfffff 	.word	0xffcfffff
 801115c:	ffffcfff 	.word	0xffffcfff
 8011160:	ffbfffff 	.word	0xffbfffff
 8011164:	feffffff 	.word	0xfeffffff
 8011168:	ffff3fff 	.word	0xffff3fff

0801116c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d101      	bne.n	801117e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801117a:	2301      	movs	r3, #1
 801117c:	e0a8      	b.n	80112d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011182:	2b00      	cmp	r3, #0
 8011184:	d109      	bne.n	801119a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	2382      	movs	r3, #130	@ 0x82
 801118c:	005b      	lsls	r3, r3, #1
 801118e:	429a      	cmp	r2, r3
 8011190:	d009      	beq.n	80111a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2200      	movs	r2, #0
 8011196:	61da      	str	r2, [r3, #28]
 8011198:	e005      	b.n	80111a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	225d      	movs	r2, #93	@ 0x5d
 80111b0:	5c9b      	ldrb	r3, [r3, r2]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d107      	bne.n	80111c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	225c      	movs	r2, #92	@ 0x5c
 80111bc:	2100      	movs	r1, #0
 80111be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	0018      	movs	r0, r3
 80111c4:	f7fc f944 	bl	800d450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	225d      	movs	r2, #93	@ 0x5d
 80111cc:	2102      	movs	r1, #2
 80111ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2140      	movs	r1, #64	@ 0x40
 80111dc:	438a      	bics	r2, r1
 80111de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	23e0      	movs	r3, #224	@ 0xe0
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d902      	bls.n	80111f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80111ec:	2300      	movs	r3, #0
 80111ee:	60fb      	str	r3, [r7, #12]
 80111f0:	e002      	b.n	80111f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80111f2:	2380      	movs	r3, #128	@ 0x80
 80111f4:	015b      	lsls	r3, r3, #5
 80111f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	68da      	ldr	r2, [r3, #12]
 80111fc:	23f0      	movs	r3, #240	@ 0xf0
 80111fe:	011b      	lsls	r3, r3, #4
 8011200:	429a      	cmp	r2, r3
 8011202:	d008      	beq.n	8011216 <HAL_SPI_Init+0xaa>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	23e0      	movs	r3, #224	@ 0xe0
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	429a      	cmp	r2, r3
 801120e:	d002      	beq.n	8011216 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	685a      	ldr	r2, [r3, #4]
 801121a:	2382      	movs	r3, #130	@ 0x82
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	401a      	ands	r2, r3
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6899      	ldr	r1, [r3, #8]
 8011224:	2384      	movs	r3, #132	@ 0x84
 8011226:	021b      	lsls	r3, r3, #8
 8011228:	400b      	ands	r3, r1
 801122a:	431a      	orrs	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	2102      	movs	r1, #2
 8011232:	400b      	ands	r3, r1
 8011234:	431a      	orrs	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	695b      	ldr	r3, [r3, #20]
 801123a:	2101      	movs	r1, #1
 801123c:	400b      	ands	r3, r1
 801123e:	431a      	orrs	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6999      	ldr	r1, [r3, #24]
 8011244:	2380      	movs	r3, #128	@ 0x80
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	400b      	ands	r3, r1
 801124a:	431a      	orrs	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	69db      	ldr	r3, [r3, #28]
 8011250:	2138      	movs	r1, #56	@ 0x38
 8011252:	400b      	ands	r3, r1
 8011254:	431a      	orrs	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	2180      	movs	r1, #128	@ 0x80
 801125c:	400b      	ands	r3, r1
 801125e:	431a      	orrs	r2, r3
 8011260:	0011      	movs	r1, r2
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011266:	2380      	movs	r3, #128	@ 0x80
 8011268:	019b      	lsls	r3, r3, #6
 801126a:	401a      	ands	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	430a      	orrs	r2, r1
 8011272:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	699b      	ldr	r3, [r3, #24]
 8011278:	0c1b      	lsrs	r3, r3, #16
 801127a:	2204      	movs	r2, #4
 801127c:	401a      	ands	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011282:	2110      	movs	r1, #16
 8011284:	400b      	ands	r3, r1
 8011286:	431a      	orrs	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801128c:	2108      	movs	r1, #8
 801128e:	400b      	ands	r3, r1
 8011290:	431a      	orrs	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	68d9      	ldr	r1, [r3, #12]
 8011296:	23f0      	movs	r3, #240	@ 0xf0
 8011298:	011b      	lsls	r3, r3, #4
 801129a:	400b      	ands	r3, r1
 801129c:	431a      	orrs	r2, r3
 801129e:	0011      	movs	r1, r2
 80112a0:	68fa      	ldr	r2, [r7, #12]
 80112a2:	2380      	movs	r3, #128	@ 0x80
 80112a4:	015b      	lsls	r3, r3, #5
 80112a6:	401a      	ands	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	69da      	ldr	r2, [r3, #28]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4907      	ldr	r1, [pc, #28]	@ (80112d8 <HAL_SPI_Init+0x16c>)
 80112bc:	400a      	ands	r2, r1
 80112be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	225d      	movs	r2, #93	@ 0x5d
 80112ca:	2101      	movs	r1, #1
 80112cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	0018      	movs	r0, r3
 80112d2:	46bd      	mov	sp, r7
 80112d4:	b004      	add	sp, #16
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	fffff7ff 	.word	0xfffff7ff

080112dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	603b      	str	r3, [r7, #0]
 80112e8:	1dbb      	adds	r3, r7, #6
 80112ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80112ec:	231f      	movs	r3, #31
 80112ee:	18fb      	adds	r3, r7, r3
 80112f0:	2200      	movs	r2, #0
 80112f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	225c      	movs	r2, #92	@ 0x5c
 80112f8:	5c9b      	ldrb	r3, [r3, r2]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d101      	bne.n	8011302 <HAL_SPI_Transmit+0x26>
 80112fe:	2302      	movs	r3, #2
 8011300:	e140      	b.n	8011584 <HAL_SPI_Transmit+0x2a8>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	225c      	movs	r2, #92	@ 0x5c
 8011306:	2101      	movs	r1, #1
 8011308:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801130a:	f7fc fb7b 	bl	800da04 <HAL_GetTick>
 801130e:	0003      	movs	r3, r0
 8011310:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011312:	2316      	movs	r3, #22
 8011314:	18fb      	adds	r3, r7, r3
 8011316:	1dba      	adds	r2, r7, #6
 8011318:	8812      	ldrh	r2, [r2, #0]
 801131a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	225d      	movs	r2, #93	@ 0x5d
 8011320:	5c9b      	ldrb	r3, [r3, r2]
 8011322:	b2db      	uxtb	r3, r3
 8011324:	2b01      	cmp	r3, #1
 8011326:	d004      	beq.n	8011332 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8011328:	231f      	movs	r3, #31
 801132a:	18fb      	adds	r3, r7, r3
 801132c:	2202      	movs	r2, #2
 801132e:	701a      	strb	r2, [r3, #0]
    goto error;
 8011330:	e11d      	b.n	801156e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d003      	beq.n	8011340 <HAL_SPI_Transmit+0x64>
 8011338:	1dbb      	adds	r3, r7, #6
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d104      	bne.n	801134a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8011340:	231f      	movs	r3, #31
 8011342:	18fb      	adds	r3, r7, r3
 8011344:	2201      	movs	r2, #1
 8011346:	701a      	strb	r2, [r3, #0]
    goto error;
 8011348:	e111      	b.n	801156e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	225d      	movs	r2, #93	@ 0x5d
 801134e:	2103      	movs	r1, #3
 8011350:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2200      	movs	r2, #0
 8011356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	68ba      	ldr	r2, [r7, #8]
 801135c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	1dba      	adds	r2, r7, #6
 8011362:	8812      	ldrh	r2, [r2, #0]
 8011364:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	1dba      	adds	r2, r7, #6
 801136a:	8812      	ldrh	r2, [r2, #0]
 801136c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2244      	movs	r2, #68	@ 0x44
 8011378:	2100      	movs	r1, #0
 801137a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2246      	movs	r2, #70	@ 0x46
 8011380:	2100      	movs	r1, #0
 8011382:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2200      	movs	r2, #0
 8011388:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2200      	movs	r2, #0
 801138e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	689a      	ldr	r2, [r3, #8]
 8011394:	2380      	movs	r3, #128	@ 0x80
 8011396:	021b      	lsls	r3, r3, #8
 8011398:	429a      	cmp	r2, r3
 801139a:	d110      	bne.n	80113be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2140      	movs	r1, #64	@ 0x40
 80113a8:	438a      	bics	r2, r1
 80113aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2180      	movs	r1, #128	@ 0x80
 80113b8:	01c9      	lsls	r1, r1, #7
 80113ba:	430a      	orrs	r2, r1
 80113bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2240      	movs	r2, #64	@ 0x40
 80113c6:	4013      	ands	r3, r2
 80113c8:	2b40      	cmp	r3, #64	@ 0x40
 80113ca:	d007      	beq.n	80113dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2140      	movs	r1, #64	@ 0x40
 80113d8:	430a      	orrs	r2, r1
 80113da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	68da      	ldr	r2, [r3, #12]
 80113e0:	23e0      	movs	r3, #224	@ 0xe0
 80113e2:	00db      	lsls	r3, r3, #3
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d94e      	bls.n	8011486 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d004      	beq.n	80113fa <HAL_SPI_Transmit+0x11e>
 80113f0:	2316      	movs	r3, #22
 80113f2:	18fb      	adds	r3, r7, r3
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d13f      	bne.n	801147a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113fe:	881a      	ldrh	r2, [r3, #0]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801140a:	1c9a      	adds	r2, r3, #2
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011414:	b29b      	uxth	r3, r3
 8011416:	3b01      	subs	r3, #1
 8011418:	b29a      	uxth	r2, r3
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801141e:	e02c      	b.n	801147a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	2202      	movs	r2, #2
 8011428:	4013      	ands	r3, r2
 801142a:	2b02      	cmp	r3, #2
 801142c:	d112      	bne.n	8011454 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011432:	881a      	ldrh	r2, [r3, #0]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143e:	1c9a      	adds	r2, r3, #2
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011448:	b29b      	uxth	r3, r3
 801144a:	3b01      	subs	r3, #1
 801144c:	b29a      	uxth	r2, r3
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011452:	e012      	b.n	801147a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011454:	f7fc fad6 	bl	800da04 <HAL_GetTick>
 8011458:	0002      	movs	r2, r0
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	429a      	cmp	r2, r3
 8011462:	d802      	bhi.n	801146a <HAL_SPI_Transmit+0x18e>
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	3301      	adds	r3, #1
 8011468:	d102      	bne.n	8011470 <HAL_SPI_Transmit+0x194>
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d104      	bne.n	801147a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8011470:	231f      	movs	r3, #31
 8011472:	18fb      	adds	r3, r7, r3
 8011474:	2203      	movs	r2, #3
 8011476:	701a      	strb	r2, [r3, #0]
          goto error;
 8011478:	e079      	b.n	801156e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801147e:	b29b      	uxth	r3, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1cd      	bne.n	8011420 <HAL_SPI_Transmit+0x144>
 8011484:	e04f      	b.n	8011526 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d004      	beq.n	8011498 <HAL_SPI_Transmit+0x1bc>
 801148e:	2316      	movs	r3, #22
 8011490:	18fb      	adds	r3, r7, r3
 8011492:	881b      	ldrh	r3, [r3, #0]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d141      	bne.n	801151c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	330c      	adds	r3, #12
 80114a2:	7812      	ldrb	r2, [r2, #0]
 80114a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114aa:	1c5a      	adds	r2, r3, #1
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	3b01      	subs	r3, #1
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80114be:	e02d      	b.n	801151c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	2202      	movs	r2, #2
 80114c8:	4013      	ands	r3, r2
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d113      	bne.n	80114f6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	330c      	adds	r3, #12
 80114d8:	7812      	ldrb	r2, [r2, #0]
 80114da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	3b01      	subs	r3, #1
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80114f4:	e012      	b.n	801151c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114f6:	f7fc fa85 	bl	800da04 <HAL_GetTick>
 80114fa:	0002      	movs	r2, r0
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	429a      	cmp	r2, r3
 8011504:	d802      	bhi.n	801150c <HAL_SPI_Transmit+0x230>
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	3301      	adds	r3, #1
 801150a:	d102      	bne.n	8011512 <HAL_SPI_Transmit+0x236>
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d104      	bne.n	801151c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8011512:	231f      	movs	r3, #31
 8011514:	18fb      	adds	r3, r7, r3
 8011516:	2203      	movs	r2, #3
 8011518:	701a      	strb	r2, [r3, #0]
          goto error;
 801151a:	e028      	b.n	801156e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011520:	b29b      	uxth	r3, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1cc      	bne.n	80114c0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011526:	69ba      	ldr	r2, [r7, #24]
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	0018      	movs	r0, r3
 801152e:	f000 fc37 	bl	8011da0 <SPI_EndRxTxTransaction>
 8011532:	1e03      	subs	r3, r0, #0
 8011534:	d002      	beq.n	801153c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2220      	movs	r2, #32
 801153a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d10a      	bne.n	801155a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011544:	2300      	movs	r3, #0
 8011546:	613b      	str	r3, [r7, #16]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	613b      	str	r3, [r7, #16]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	613b      	str	r3, [r7, #16]
 8011558:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801155e:	2b00      	cmp	r3, #0
 8011560:	d004      	beq.n	801156c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8011562:	231f      	movs	r3, #31
 8011564:	18fb      	adds	r3, r7, r3
 8011566:	2201      	movs	r2, #1
 8011568:	701a      	strb	r2, [r3, #0]
 801156a:	e000      	b.n	801156e <HAL_SPI_Transmit+0x292>
  }

error:
 801156c:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	225d      	movs	r2, #93	@ 0x5d
 8011572:	2101      	movs	r1, #1
 8011574:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	225c      	movs	r2, #92	@ 0x5c
 801157a:	2100      	movs	r1, #0
 801157c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 801157e:	231f      	movs	r3, #31
 8011580:	18fb      	adds	r3, r7, r3
 8011582:	781b      	ldrb	r3, [r3, #0]
}
 8011584:	0018      	movs	r0, r3
 8011586:	46bd      	mov	sp, r7
 8011588:	b008      	add	sp, #32
 801158a:	bd80      	pop	{r7, pc}

0801158c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08a      	sub	sp, #40	@ 0x28
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
 8011598:	001a      	movs	r2, r3
 801159a:	1cbb      	adds	r3, r7, #2
 801159c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801159e:	2301      	movs	r3, #1
 80115a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80115a2:	2323      	movs	r3, #35	@ 0x23
 80115a4:	18fb      	adds	r3, r7, r3
 80115a6:	2200      	movs	r2, #0
 80115a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	225c      	movs	r2, #92	@ 0x5c
 80115ae:	5c9b      	ldrb	r3, [r3, r2]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d101      	bne.n	80115b8 <HAL_SPI_TransmitReceive+0x2c>
 80115b4:	2302      	movs	r3, #2
 80115b6:	e1b5      	b.n	8011924 <HAL_SPI_TransmitReceive+0x398>
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	225c      	movs	r2, #92	@ 0x5c
 80115bc:	2101      	movs	r1, #1
 80115be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80115c0:	f7fc fa20 	bl	800da04 <HAL_GetTick>
 80115c4:	0003      	movs	r3, r0
 80115c6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80115c8:	201b      	movs	r0, #27
 80115ca:	183b      	adds	r3, r7, r0
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	215d      	movs	r1, #93	@ 0x5d
 80115d0:	5c52      	ldrb	r2, [r2, r1]
 80115d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80115da:	2312      	movs	r3, #18
 80115dc:	18fb      	adds	r3, r7, r3
 80115de:	1cba      	adds	r2, r7, #2
 80115e0:	8812      	ldrh	r2, [r2, #0]
 80115e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80115e4:	183b      	adds	r3, r7, r0
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d011      	beq.n	8011610 <HAL_SPI_TransmitReceive+0x84>
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	2382      	movs	r3, #130	@ 0x82
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d107      	bne.n	8011606 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d103      	bne.n	8011606 <HAL_SPI_TransmitReceive+0x7a>
 80115fe:	183b      	adds	r3, r7, r0
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	2b04      	cmp	r3, #4
 8011604:	d004      	beq.n	8011610 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8011606:	2323      	movs	r3, #35	@ 0x23
 8011608:	18fb      	adds	r3, r7, r3
 801160a:	2202      	movs	r2, #2
 801160c:	701a      	strb	r2, [r3, #0]
    goto error;
 801160e:	e17e      	b.n	801190e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d006      	beq.n	8011624 <HAL_SPI_TransmitReceive+0x98>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d003      	beq.n	8011624 <HAL_SPI_TransmitReceive+0x98>
 801161c:	1cbb      	adds	r3, r7, #2
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d104      	bne.n	801162e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8011624:	2323      	movs	r3, #35	@ 0x23
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	2201      	movs	r2, #1
 801162a:	701a      	strb	r2, [r3, #0]
    goto error;
 801162c:	e16f      	b.n	801190e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	225d      	movs	r2, #93	@ 0x5d
 8011632:	5c9b      	ldrb	r3, [r3, r2]
 8011634:	b2db      	uxtb	r3, r3
 8011636:	2b04      	cmp	r3, #4
 8011638:	d003      	beq.n	8011642 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	225d      	movs	r2, #93	@ 0x5d
 801163e:	2105      	movs	r1, #5
 8011640:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2200      	movs	r2, #0
 8011646:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	1cba      	adds	r2, r7, #2
 8011652:	2146      	movs	r1, #70	@ 0x46
 8011654:	8812      	ldrh	r2, [r2, #0]
 8011656:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	1cba      	adds	r2, r7, #2
 801165c:	2144      	movs	r1, #68	@ 0x44
 801165e:	8812      	ldrh	r2, [r2, #0]
 8011660:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	1cba      	adds	r2, r7, #2
 801166c:	8812      	ldrh	r2, [r2, #0]
 801166e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	1cba      	adds	r2, r7, #2
 8011674:	8812      	ldrh	r2, [r2, #0]
 8011676:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	68da      	ldr	r2, [r3, #12]
 8011688:	23e0      	movs	r3, #224	@ 0xe0
 801168a:	00db      	lsls	r3, r3, #3
 801168c:	429a      	cmp	r2, r3
 801168e:	d908      	bls.n	80116a2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	49a4      	ldr	r1, [pc, #656]	@ (801192c <HAL_SPI_TransmitReceive+0x3a0>)
 801169c:	400a      	ands	r2, r1
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	e008      	b.n	80116b4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	685a      	ldr	r2, [r3, #4]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2180      	movs	r1, #128	@ 0x80
 80116ae:	0149      	lsls	r1, r1, #5
 80116b0:	430a      	orrs	r2, r1
 80116b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2240      	movs	r2, #64	@ 0x40
 80116bc:	4013      	ands	r3, r2
 80116be:	2b40      	cmp	r3, #64	@ 0x40
 80116c0:	d007      	beq.n	80116d2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2140      	movs	r1, #64	@ 0x40
 80116ce:	430a      	orrs	r2, r1
 80116d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	68da      	ldr	r2, [r3, #12]
 80116d6:	23e0      	movs	r3, #224	@ 0xe0
 80116d8:	00db      	lsls	r3, r3, #3
 80116da:	429a      	cmp	r2, r3
 80116dc:	d800      	bhi.n	80116e0 <HAL_SPI_TransmitReceive+0x154>
 80116de:	e07f      	b.n	80117e0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <HAL_SPI_TransmitReceive+0x168>
 80116e8:	2312      	movs	r3, #18
 80116ea:	18fb      	adds	r3, r7, r3
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d000      	beq.n	80116f4 <HAL_SPI_TransmitReceive+0x168>
 80116f2:	e069      	b.n	80117c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f8:	881a      	ldrh	r2, [r3, #0]
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011704:	1c9a      	adds	r2, r3, #2
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801170e:	b29b      	uxth	r3, r3
 8011710:	3b01      	subs	r3, #1
 8011712:	b29a      	uxth	r2, r3
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011718:	e056      	b.n	80117c8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	2202      	movs	r2, #2
 8011722:	4013      	ands	r3, r2
 8011724:	2b02      	cmp	r3, #2
 8011726:	d11b      	bne.n	8011760 <HAL_SPI_TransmitReceive+0x1d4>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801172c:	b29b      	uxth	r3, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d016      	beq.n	8011760 <HAL_SPI_TransmitReceive+0x1d4>
 8011732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011734:	2b01      	cmp	r3, #1
 8011736:	d113      	bne.n	8011760 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801173c:	881a      	ldrh	r2, [r3, #0]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011748:	1c9a      	adds	r2, r3, #2
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011752:	b29b      	uxth	r3, r3
 8011754:	3b01      	subs	r3, #1
 8011756:	b29a      	uxth	r2, r3
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801175c:	2300      	movs	r3, #0
 801175e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	689b      	ldr	r3, [r3, #8]
 8011766:	2201      	movs	r2, #1
 8011768:	4013      	ands	r3, r2
 801176a:	2b01      	cmp	r3, #1
 801176c:	d11c      	bne.n	80117a8 <HAL_SPI_TransmitReceive+0x21c>
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2246      	movs	r2, #70	@ 0x46
 8011772:	5a9b      	ldrh	r3, [r3, r2]
 8011774:	b29b      	uxth	r3, r3
 8011776:	2b00      	cmp	r3, #0
 8011778:	d016      	beq.n	80117a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68da      	ldr	r2, [r3, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011784:	b292      	uxth	r2, r2
 8011786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801178c:	1c9a      	adds	r2, r3, #2
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2246      	movs	r2, #70	@ 0x46
 8011796:	5a9b      	ldrh	r3, [r3, r2]
 8011798:	b29b      	uxth	r3, r3
 801179a:	3b01      	subs	r3, #1
 801179c:	b299      	uxth	r1, r3
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2246      	movs	r2, #70	@ 0x46
 80117a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80117a4:	2301      	movs	r3, #1
 80117a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80117a8:	f7fc f92c 	bl	800da04 <HAL_GetTick>
 80117ac:	0002      	movs	r2, r0
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d807      	bhi.n	80117c8 <HAL_SPI_TransmitReceive+0x23c>
 80117b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ba:	3301      	adds	r3, #1
 80117bc:	d004      	beq.n	80117c8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80117be:	2323      	movs	r3, #35	@ 0x23
 80117c0:	18fb      	adds	r3, r7, r3
 80117c2:	2203      	movs	r2, #3
 80117c4:	701a      	strb	r2, [r3, #0]
        goto error;
 80117c6:	e0a2      	b.n	801190e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1a3      	bne.n	801171a <HAL_SPI_TransmitReceive+0x18e>
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2246      	movs	r2, #70	@ 0x46
 80117d6:	5a9b      	ldrh	r3, [r3, r2]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d19d      	bne.n	801171a <HAL_SPI_TransmitReceive+0x18e>
 80117de:	e085      	b.n	80118ec <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d005      	beq.n	80117f4 <HAL_SPI_TransmitReceive+0x268>
 80117e8:	2312      	movs	r3, #18
 80117ea:	18fb      	adds	r3, r7, r3
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d000      	beq.n	80117f4 <HAL_SPI_TransmitReceive+0x268>
 80117f2:	e070      	b.n	80118d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	330c      	adds	r3, #12
 80117fe:	7812      	ldrb	r2, [r2, #0]
 8011800:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011810:	b29b      	uxth	r3, r3
 8011812:	3b01      	subs	r3, #1
 8011814:	b29a      	uxth	r2, r3
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801181a:	e05c      	b.n	80118d6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	2202      	movs	r2, #2
 8011824:	4013      	ands	r3, r2
 8011826:	2b02      	cmp	r3, #2
 8011828:	d11c      	bne.n	8011864 <HAL_SPI_TransmitReceive+0x2d8>
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801182e:	b29b      	uxth	r3, r3
 8011830:	2b00      	cmp	r3, #0
 8011832:	d017      	beq.n	8011864 <HAL_SPI_TransmitReceive+0x2d8>
 8011834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011836:	2b01      	cmp	r3, #1
 8011838:	d114      	bne.n	8011864 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	330c      	adds	r3, #12
 8011844:	7812      	ldrb	r2, [r2, #0]
 8011846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184c:	1c5a      	adds	r2, r3, #1
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011856:	b29b      	uxth	r3, r3
 8011858:	3b01      	subs	r3, #1
 801185a:	b29a      	uxth	r2, r3
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011860:	2300      	movs	r3, #0
 8011862:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	2201      	movs	r2, #1
 801186c:	4013      	ands	r3, r2
 801186e:	2b01      	cmp	r3, #1
 8011870:	d11e      	bne.n	80118b0 <HAL_SPI_TransmitReceive+0x324>
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2246      	movs	r2, #70	@ 0x46
 8011876:	5a9b      	ldrh	r3, [r3, r2]
 8011878:	b29b      	uxth	r3, r3
 801187a:	2b00      	cmp	r3, #0
 801187c:	d018      	beq.n	80118b0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	330c      	adds	r3, #12
 8011884:	001a      	movs	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	b2d2      	uxtb	r2, r2
 801188e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2246      	movs	r2, #70	@ 0x46
 801189e:	5a9b      	ldrh	r3, [r3, r2]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	3b01      	subs	r3, #1
 80118a4:	b299      	uxth	r1, r3
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2246      	movs	r2, #70	@ 0x46
 80118aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80118ac:	2301      	movs	r3, #1
 80118ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80118b0:	f7fc f8a8 	bl	800da04 <HAL_GetTick>
 80118b4:	0002      	movs	r2, r0
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	1ad3      	subs	r3, r2, r3
 80118ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118bc:	429a      	cmp	r2, r3
 80118be:	d802      	bhi.n	80118c6 <HAL_SPI_TransmitReceive+0x33a>
 80118c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c2:	3301      	adds	r3, #1
 80118c4:	d102      	bne.n	80118cc <HAL_SPI_TransmitReceive+0x340>
 80118c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d104      	bne.n	80118d6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80118cc:	2323      	movs	r3, #35	@ 0x23
 80118ce:	18fb      	adds	r3, r7, r3
 80118d0:	2203      	movs	r2, #3
 80118d2:	701a      	strb	r2, [r3, #0]
        goto error;
 80118d4:	e01b      	b.n	801190e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118da:	b29b      	uxth	r3, r3
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d19d      	bne.n	801181c <HAL_SPI_TransmitReceive+0x290>
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2246      	movs	r2, #70	@ 0x46
 80118e4:	5a9b      	ldrh	r3, [r3, r2]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d197      	bne.n	801181c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80118ec:	69fa      	ldr	r2, [r7, #28]
 80118ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	0018      	movs	r0, r3
 80118f4:	f000 fa54 	bl	8011da0 <SPI_EndRxTxTransaction>
 80118f8:	1e03      	subs	r3, r0, #0
 80118fa:	d007      	beq.n	801190c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80118fc:	2323      	movs	r3, #35	@ 0x23
 80118fe:	18fb      	adds	r3, r7, r3
 8011900:	2201      	movs	r2, #1
 8011902:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2220      	movs	r2, #32
 8011908:	661a      	str	r2, [r3, #96]	@ 0x60
 801190a:	e000      	b.n	801190e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 801190c:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	225d      	movs	r2, #93	@ 0x5d
 8011912:	2101      	movs	r1, #1
 8011914:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	225c      	movs	r2, #92	@ 0x5c
 801191a:	2100      	movs	r1, #0
 801191c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 801191e:	2323      	movs	r3, #35	@ 0x23
 8011920:	18fb      	adds	r3, r7, r3
 8011922:	781b      	ldrb	r3, [r3, #0]
}
 8011924:	0018      	movs	r0, r3
 8011926:	46bd      	mov	sp, r7
 8011928:	b00a      	add	sp, #40	@ 0x28
 801192a:	bd80      	pop	{r7, pc}
 801192c:	ffffefff 	.word	0xffffefff

08011930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b088      	sub	sp, #32
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	689b      	ldr	r3, [r3, #8]
 8011946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	2240      	movs	r2, #64	@ 0x40
 801194c:	4013      	ands	r3, r2
 801194e:	d10d      	bne.n	801196c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	2201      	movs	r2, #1
 8011954:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011956:	d009      	beq.n	801196c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	2240      	movs	r2, #64	@ 0x40
 801195c:	4013      	ands	r3, r2
 801195e:	d005      	beq.n	801196c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	0010      	movs	r0, r2
 8011968:	4798      	blx	r3
    return;
 801196a:	e0c5      	b.n	8011af8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	2202      	movs	r2, #2
 8011970:	4013      	ands	r3, r2
 8011972:	d009      	beq.n	8011988 <HAL_SPI_IRQHandler+0x58>
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	2280      	movs	r2, #128	@ 0x80
 8011978:	4013      	ands	r3, r2
 801197a:	d005      	beq.n	8011988 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	0010      	movs	r0, r2
 8011984:	4798      	blx	r3
    return;
 8011986:	e0b7      	b.n	8011af8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	2220      	movs	r2, #32
 801198c:	4013      	ands	r3, r2
 801198e:	d109      	bne.n	80119a4 <HAL_SPI_IRQHandler+0x74>
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	2240      	movs	r2, #64	@ 0x40
 8011994:	4013      	ands	r3, r2
 8011996:	d105      	bne.n	80119a4 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	2380      	movs	r3, #128	@ 0x80
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	4013      	ands	r3, r2
 80119a0:	d100      	bne.n	80119a4 <HAL_SPI_IRQHandler+0x74>
 80119a2:	e0a9      	b.n	8011af8 <HAL_SPI_IRQHandler+0x1c8>
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	2220      	movs	r2, #32
 80119a8:	4013      	ands	r3, r2
 80119aa:	d100      	bne.n	80119ae <HAL_SPI_IRQHandler+0x7e>
 80119ac:	e0a4      	b.n	8011af8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	2240      	movs	r2, #64	@ 0x40
 80119b2:	4013      	ands	r3, r2
 80119b4:	d023      	beq.n	80119fe <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	225d      	movs	r2, #93	@ 0x5d
 80119ba:	5c9b      	ldrb	r3, [r3, r2]
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	2b03      	cmp	r3, #3
 80119c0:	d011      	beq.n	80119e6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80119c6:	2204      	movs	r2, #4
 80119c8:	431a      	orrs	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119ce:	2300      	movs	r3, #0
 80119d0:	617b      	str	r3, [r7, #20]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	617b      	str	r3, [r7, #20]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	617b      	str	r3, [r7, #20]
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	e00b      	b.n	80119fe <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119e6:	2300      	movs	r3, #0
 80119e8:	613b      	str	r3, [r7, #16]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	613b      	str	r3, [r7, #16]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	689b      	ldr	r3, [r3, #8]
 80119f8:	613b      	str	r3, [r7, #16]
 80119fa:	693b      	ldr	r3, [r7, #16]
        return;
 80119fc:	e07c      	b.n	8011af8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	2220      	movs	r2, #32
 8011a02:	4013      	ands	r3, r2
 8011a04:	d014      	beq.n	8011a30 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	431a      	orrs	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a12:	2300      	movs	r3, #0
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	60fb      	str	r3, [r7, #12]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2140      	movs	r1, #64	@ 0x40
 8011a2a:	438a      	bics	r2, r1
 8011a2c:	601a      	str	r2, [r3, #0]
 8011a2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8011a30:	69ba      	ldr	r2, [r7, #24]
 8011a32:	2380      	movs	r3, #128	@ 0x80
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4013      	ands	r3, r2
 8011a38:	d00c      	beq.n	8011a54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011a3e:	2208      	movs	r2, #8
 8011a40:	431a      	orrs	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011a46:	2300      	movs	r3, #0
 8011a48:	60bb      	str	r3, [r7, #8]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	60bb      	str	r3, [r7, #8]
 8011a52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d04c      	beq.n	8011af6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	685a      	ldr	r2, [r3, #4]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	21e0      	movs	r1, #224	@ 0xe0
 8011a68:	438a      	bics	r2, r1
 8011a6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	225d      	movs	r2, #93	@ 0x5d
 8011a70:	2101      	movs	r1, #1
 8011a72:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	2202      	movs	r2, #2
 8011a78:	4013      	ands	r3, r2
 8011a7a:	d103      	bne.n	8011a84 <HAL_SPI_IRQHandler+0x154>
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	2201      	movs	r2, #1
 8011a80:	4013      	ands	r3, r2
 8011a82:	d032      	beq.n	8011aea <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	685a      	ldr	r2, [r3, #4]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2103      	movs	r1, #3
 8011a90:	438a      	bics	r2, r1
 8011a92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d010      	beq.n	8011abe <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011aa0:	4a17      	ldr	r2, [pc, #92]	@ (8011b00 <HAL_SPI_IRQHandler+0x1d0>)
 8011aa2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011aa8:	0018      	movs	r0, r3
 8011aaa:	f7fc fa3f 	bl	800df2c <HAL_DMA_Abort_IT>
 8011aae:	1e03      	subs	r3, r0, #0
 8011ab0:	d005      	beq.n	8011abe <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011ab6:	2240      	movs	r2, #64	@ 0x40
 8011ab8:	431a      	orrs	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d016      	beq.n	8011af4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aca:	4a0d      	ldr	r2, [pc, #52]	@ (8011b00 <HAL_SPI_IRQHandler+0x1d0>)
 8011acc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ad2:	0018      	movs	r0, r3
 8011ad4:	f7fc fa2a 	bl	800df2c <HAL_DMA_Abort_IT>
 8011ad8:	1e03      	subs	r3, r0, #0
 8011ada:	d00b      	beq.n	8011af4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011ae0:	2240      	movs	r2, #64	@ 0x40
 8011ae2:	431a      	orrs	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8011ae8:	e004      	b.n	8011af4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	0018      	movs	r0, r3
 8011aee:	f000 f809 	bl	8011b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011af2:	e000      	b.n	8011af6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8011af4:	46c0      	nop			@ (mov r8, r8)
    return;
 8011af6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8011af8:	46bd      	mov	sp, r7
 8011afa:	b008      	add	sp, #32
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	46c0      	nop			@ (mov r8, r8)
 8011b00:	08011b15 	.word	0x08011b15

08011b04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011b0c:	46c0      	nop			@ (mov r8, r8)
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	b002      	add	sp, #8
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2246      	movs	r2, #70	@ 0x46
 8011b26:	2100      	movs	r1, #0
 8011b28:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	0018      	movs	r0, r3
 8011b34:	f7ff ffe6 	bl	8011b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011b38:	46c0      	nop			@ (mov r8, r8)
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	b004      	add	sp, #16
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b088      	sub	sp, #32
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	603b      	str	r3, [r7, #0]
 8011b4c:	1dfb      	adds	r3, r7, #7
 8011b4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011b50:	f7fb ff58 	bl	800da04 <HAL_GetTick>
 8011b54:	0002      	movs	r2, r0
 8011b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b58:	1a9b      	subs	r3, r3, r2
 8011b5a:	683a      	ldr	r2, [r7, #0]
 8011b5c:	18d3      	adds	r3, r2, r3
 8011b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011b60:	f7fb ff50 	bl	800da04 <HAL_GetTick>
 8011b64:	0003      	movs	r3, r0
 8011b66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011b68:	4b3a      	ldr	r3, [pc, #232]	@ (8011c54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	015b      	lsls	r3, r3, #5
 8011b6e:	0d1b      	lsrs	r3, r3, #20
 8011b70:	69fa      	ldr	r2, [r7, #28]
 8011b72:	4353      	muls	r3, r2
 8011b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011b76:	e058      	b.n	8011c2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	d055      	beq.n	8011c2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011b7e:	f7fb ff41 	bl	800da04 <HAL_GetTick>
 8011b82:	0002      	movs	r2, r0
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	69fa      	ldr	r2, [r7, #28]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d902      	bls.n	8011b94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d142      	bne.n	8011c1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	685a      	ldr	r2, [r3, #4]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	21e0      	movs	r1, #224	@ 0xe0
 8011ba0:	438a      	bics	r2, r1
 8011ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	685a      	ldr	r2, [r3, #4]
 8011ba8:	2382      	movs	r3, #130	@ 0x82
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d113      	bne.n	8011bd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	689a      	ldr	r2, [r3, #8]
 8011bb4:	2380      	movs	r3, #128	@ 0x80
 8011bb6:	021b      	lsls	r3, r3, #8
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d005      	beq.n	8011bc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	2380      	movs	r3, #128	@ 0x80
 8011bc2:	00db      	lsls	r3, r3, #3
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d107      	bne.n	8011bd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2140      	movs	r1, #64	@ 0x40
 8011bd4:	438a      	bics	r2, r1
 8011bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011bdc:	2380      	movs	r3, #128	@ 0x80
 8011bde:	019b      	lsls	r3, r3, #6
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d110      	bne.n	8011c06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	491a      	ldr	r1, [pc, #104]	@ (8011c58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8011bf0:	400a      	ands	r2, r1
 8011bf2:	601a      	str	r2, [r3, #0]
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2180      	movs	r1, #128	@ 0x80
 8011c00:	0189      	lsls	r1, r1, #6
 8011c02:	430a      	orrs	r2, r1
 8011c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	225d      	movs	r2, #93	@ 0x5d
 8011c0a:	2101      	movs	r1, #1
 8011c0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	225c      	movs	r2, #92	@ 0x5c
 8011c12:	2100      	movs	r1, #0
 8011c14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011c16:	2303      	movs	r3, #3
 8011c18:	e017      	b.n	8011c4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d101      	bne.n	8011c24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8011c20:	2300      	movs	r3, #0
 8011c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	4013      	ands	r3, r2
 8011c34:	68ba      	ldr	r2, [r7, #8]
 8011c36:	1ad3      	subs	r3, r2, r3
 8011c38:	425a      	negs	r2, r3
 8011c3a:	4153      	adcs	r3, r2
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	001a      	movs	r2, r3
 8011c40:	1dfb      	adds	r3, r7, #7
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d197      	bne.n	8011b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	0018      	movs	r0, r3
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	b008      	add	sp, #32
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	20000494 	.word	0x20000494
 8011c58:	ffffdfff 	.word	0xffffdfff

08011c5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b08a      	sub	sp, #40	@ 0x28
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
 8011c68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011c6a:	2317      	movs	r3, #23
 8011c6c:	18fb      	adds	r3, r7, r3
 8011c6e:	2200      	movs	r2, #0
 8011c70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011c72:	f7fb fec7 	bl	800da04 <HAL_GetTick>
 8011c76:	0002      	movs	r2, r0
 8011c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c7a:	1a9b      	subs	r3, r3, r2
 8011c7c:	683a      	ldr	r2, [r7, #0]
 8011c7e:	18d3      	adds	r3, r2, r3
 8011c80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011c82:	f7fb febf 	bl	800da04 <HAL_GetTick>
 8011c86:	0003      	movs	r3, r0
 8011c88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	330c      	adds	r3, #12
 8011c90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011c92:	4b41      	ldr	r3, [pc, #260]	@ (8011d98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8011c94:	681a      	ldr	r2, [r3, #0]
 8011c96:	0013      	movs	r3, r2
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	189b      	adds	r3, r3, r2
 8011c9c:	00da      	lsls	r2, r3, #3
 8011c9e:	1ad3      	subs	r3, r2, r3
 8011ca0:	0d1b      	lsrs	r3, r3, #20
 8011ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ca4:	4353      	muls	r3, r2
 8011ca6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011ca8:	e068      	b.n	8011d7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011caa:	68ba      	ldr	r2, [r7, #8]
 8011cac:	23c0      	movs	r3, #192	@ 0xc0
 8011cae:	00db      	lsls	r3, r3, #3
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d10a      	bne.n	8011cca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d107      	bne.n	8011cca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	2117      	movs	r1, #23
 8011cc2:	187b      	adds	r3, r7, r1
 8011cc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011cc6:	187b      	adds	r3, r7, r1
 8011cc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	d055      	beq.n	8011d7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011cd0:	f7fb fe98 	bl	800da04 <HAL_GetTick>
 8011cd4:	0002      	movs	r2, r0
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d902      	bls.n	8011ce6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d142      	bne.n	8011d6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	21e0      	movs	r1, #224	@ 0xe0
 8011cf2:	438a      	bics	r2, r1
 8011cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	685a      	ldr	r2, [r3, #4]
 8011cfa:	2382      	movs	r3, #130	@ 0x82
 8011cfc:	005b      	lsls	r3, r3, #1
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d113      	bne.n	8011d2a <SPI_WaitFifoStateUntilTimeout+0xce>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	689a      	ldr	r2, [r3, #8]
 8011d06:	2380      	movs	r3, #128	@ 0x80
 8011d08:	021b      	lsls	r3, r3, #8
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d005      	beq.n	8011d1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	689a      	ldr	r2, [r3, #8]
 8011d12:	2380      	movs	r3, #128	@ 0x80
 8011d14:	00db      	lsls	r3, r3, #3
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d107      	bne.n	8011d2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2140      	movs	r1, #64	@ 0x40
 8011d26:	438a      	bics	r2, r1
 8011d28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011d2e:	2380      	movs	r3, #128	@ 0x80
 8011d30:	019b      	lsls	r3, r3, #6
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d110      	bne.n	8011d58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4916      	ldr	r1, [pc, #88]	@ (8011d9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8011d42:	400a      	ands	r2, r1
 8011d44:	601a      	str	r2, [r3, #0]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2180      	movs	r1, #128	@ 0x80
 8011d52:	0189      	lsls	r1, r1, #6
 8011d54:	430a      	orrs	r2, r1
 8011d56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	225d      	movs	r2, #93	@ 0x5d
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	225c      	movs	r2, #92	@ 0x5c
 8011d64:	2100      	movs	r1, #0
 8011d66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	e010      	b.n	8011d8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d101      	bne.n	8011d76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8011d72:	2300      	movs	r3, #0
 8011d74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	689b      	ldr	r3, [r3, #8]
 8011d82:	68ba      	ldr	r2, [r7, #8]
 8011d84:	4013      	ands	r3, r2
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d18e      	bne.n	8011caa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	0018      	movs	r0, r3
 8011d90:	46bd      	mov	sp, r7
 8011d92:	b00a      	add	sp, #40	@ 0x28
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	46c0      	nop			@ (mov r8, r8)
 8011d98:	20000494 	.word	0x20000494
 8011d9c:	ffffdfff 	.word	0xffffdfff

08011da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af02      	add	r7, sp, #8
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	23c0      	movs	r3, #192	@ 0xc0
 8011db0:	0159      	lsls	r1, r3, #5
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	0013      	movs	r3, r2
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f7ff ff4e 	bl	8011c5c <SPI_WaitFifoStateUntilTimeout>
 8011dc0:	1e03      	subs	r3, r0, #0
 8011dc2:	d007      	beq.n	8011dd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011dc8:	2220      	movs	r2, #32
 8011dca:	431a      	orrs	r2, r3
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011dd0:	2303      	movs	r3, #3
 8011dd2:	e027      	b.n	8011e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	0013      	movs	r3, r2
 8011dde:	2200      	movs	r2, #0
 8011de0:	2180      	movs	r1, #128	@ 0x80
 8011de2:	f7ff fead 	bl	8011b40 <SPI_WaitFlagStateUntilTimeout>
 8011de6:	1e03      	subs	r3, r0, #0
 8011de8:	d007      	beq.n	8011dfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011dee:	2220      	movs	r2, #32
 8011df0:	431a      	orrs	r2, r3
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011df6:	2303      	movs	r3, #3
 8011df8:	e014      	b.n	8011e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011dfa:	68ba      	ldr	r2, [r7, #8]
 8011dfc:	23c0      	movs	r3, #192	@ 0xc0
 8011dfe:	00d9      	lsls	r1, r3, #3
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	0013      	movs	r3, r2
 8011e08:	2200      	movs	r2, #0
 8011e0a:	f7ff ff27 	bl	8011c5c <SPI_WaitFifoStateUntilTimeout>
 8011e0e:	1e03      	subs	r3, r0, #0
 8011e10:	d007      	beq.n	8011e22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e16:	2220      	movs	r2, #32
 8011e18:	431a      	orrs	r2, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	e000      	b.n	8011e24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	0018      	movs	r0, r3
 8011e26:	46bd      	mov	sp, r7
 8011e28:	b004      	add	sp, #16
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d101      	bne.n	8011e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	e04a      	b.n	8011ed4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	223d      	movs	r2, #61	@ 0x3d
 8011e42:	5c9b      	ldrb	r3, [r3, r2]
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d107      	bne.n	8011e5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	223c      	movs	r2, #60	@ 0x3c
 8011e4e:	2100      	movs	r1, #0
 8011e50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	0018      	movs	r0, r3
 8011e56:	f7fb fbf7 	bl	800d648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	223d      	movs	r2, #61	@ 0x3d
 8011e5e:	2102      	movs	r1, #2
 8011e60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	3304      	adds	r3, #4
 8011e6a:	0019      	movs	r1, r3
 8011e6c:	0010      	movs	r0, r2
 8011e6e:	f000 fd19 	bl	80128a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2248      	movs	r2, #72	@ 0x48
 8011e76:	2101      	movs	r1, #1
 8011e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	223e      	movs	r2, #62	@ 0x3e
 8011e7e:	2101      	movs	r1, #1
 8011e80:	5499      	strb	r1, [r3, r2]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	223f      	movs	r2, #63	@ 0x3f
 8011e86:	2101      	movs	r1, #1
 8011e88:	5499      	strb	r1, [r3, r2]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2240      	movs	r2, #64	@ 0x40
 8011e8e:	2101      	movs	r1, #1
 8011e90:	5499      	strb	r1, [r3, r2]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2241      	movs	r2, #65	@ 0x41
 8011e96:	2101      	movs	r1, #1
 8011e98:	5499      	strb	r1, [r3, r2]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2242      	movs	r2, #66	@ 0x42
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	5499      	strb	r1, [r3, r2]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2243      	movs	r2, #67	@ 0x43
 8011ea6:	2101      	movs	r1, #1
 8011ea8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2244      	movs	r2, #68	@ 0x44
 8011eae:	2101      	movs	r1, #1
 8011eb0:	5499      	strb	r1, [r3, r2]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2245      	movs	r2, #69	@ 0x45
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	5499      	strb	r1, [r3, r2]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2246      	movs	r2, #70	@ 0x46
 8011ebe:	2101      	movs	r1, #1
 8011ec0:	5499      	strb	r1, [r3, r2]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2247      	movs	r2, #71	@ 0x47
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	223d      	movs	r2, #61	@ 0x3d
 8011ece:	2101      	movs	r1, #1
 8011ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	0018      	movs	r0, r3
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	b002      	add	sp, #8
 8011eda:	bd80      	pop	{r7, pc}

08011edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	223d      	movs	r2, #61	@ 0x3d
 8011ee8:	5c9b      	ldrb	r3, [r3, r2]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d001      	beq.n	8011ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e042      	b.n	8011f7a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	223d      	movs	r2, #61	@ 0x3d
 8011ef8:	2102      	movs	r1, #2
 8011efa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68da      	ldr	r2, [r3, #12]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2101      	movs	r1, #1
 8011f08:	430a      	orrs	r2, r1
 8011f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4a1c      	ldr	r2, [pc, #112]	@ (8011f84 <HAL_TIM_Base_Start_IT+0xa8>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d00f      	beq.n	8011f36 <HAL_TIM_Base_Start_IT+0x5a>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	2380      	movs	r3, #128	@ 0x80
 8011f1c:	05db      	lsls	r3, r3, #23
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d009      	beq.n	8011f36 <HAL_TIM_Base_Start_IT+0x5a>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a18      	ldr	r2, [pc, #96]	@ (8011f88 <HAL_TIM_Base_Start_IT+0xac>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d004      	beq.n	8011f36 <HAL_TIM_Base_Start_IT+0x5a>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a16      	ldr	r2, [pc, #88]	@ (8011f8c <HAL_TIM_Base_Start_IT+0xb0>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d116      	bne.n	8011f64 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	4a14      	ldr	r2, [pc, #80]	@ (8011f90 <HAL_TIM_Base_Start_IT+0xb4>)
 8011f3e:	4013      	ands	r3, r2
 8011f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2b06      	cmp	r3, #6
 8011f46:	d016      	beq.n	8011f76 <HAL_TIM_Base_Start_IT+0x9a>
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	2380      	movs	r3, #128	@ 0x80
 8011f4c:	025b      	lsls	r3, r3, #9
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d011      	beq.n	8011f76 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2101      	movs	r1, #1
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011f62:	e008      	b.n	8011f76 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2101      	movs	r1, #1
 8011f70:	430a      	orrs	r2, r1
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	e000      	b.n	8011f78 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011f76:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8011f78:	2300      	movs	r3, #0
}
 8011f7a:	0018      	movs	r0, r3
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	b004      	add	sp, #16
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	46c0      	nop			@ (mov r8, r8)
 8011f84:	40012c00 	.word	0x40012c00
 8011f88:	40000400 	.word	0x40000400
 8011f8c:	40014000 	.word	0x40014000
 8011f90:	00010007 	.word	0x00010007

08011f94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d101      	bne.n	8011fa6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e04a      	b.n	801203c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	223d      	movs	r2, #61	@ 0x3d
 8011faa:	5c9b      	ldrb	r3, [r3, r2]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d107      	bne.n	8011fc2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	223c      	movs	r2, #60	@ 0x3c
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	f7fb fa99 	bl	800d4f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	223d      	movs	r2, #61	@ 0x3d
 8011fc6:	2102      	movs	r1, #2
 8011fc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681a      	ldr	r2, [r3, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	3304      	adds	r3, #4
 8011fd2:	0019      	movs	r1, r3
 8011fd4:	0010      	movs	r0, r2
 8011fd6:	f000 fc65 	bl	80128a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2248      	movs	r2, #72	@ 0x48
 8011fde:	2101      	movs	r1, #1
 8011fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	223e      	movs	r2, #62	@ 0x3e
 8011fe6:	2101      	movs	r1, #1
 8011fe8:	5499      	strb	r1, [r3, r2]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	223f      	movs	r2, #63	@ 0x3f
 8011fee:	2101      	movs	r1, #1
 8011ff0:	5499      	strb	r1, [r3, r2]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2240      	movs	r2, #64	@ 0x40
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	5499      	strb	r1, [r3, r2]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2241      	movs	r2, #65	@ 0x41
 8011ffe:	2101      	movs	r1, #1
 8012000:	5499      	strb	r1, [r3, r2]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2242      	movs	r2, #66	@ 0x42
 8012006:	2101      	movs	r1, #1
 8012008:	5499      	strb	r1, [r3, r2]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2243      	movs	r2, #67	@ 0x43
 801200e:	2101      	movs	r1, #1
 8012010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2244      	movs	r2, #68	@ 0x44
 8012016:	2101      	movs	r1, #1
 8012018:	5499      	strb	r1, [r3, r2]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2245      	movs	r2, #69	@ 0x45
 801201e:	2101      	movs	r1, #1
 8012020:	5499      	strb	r1, [r3, r2]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2246      	movs	r2, #70	@ 0x46
 8012026:	2101      	movs	r1, #1
 8012028:	5499      	strb	r1, [r3, r2]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2247      	movs	r2, #71	@ 0x47
 801202e:	2101      	movs	r1, #1
 8012030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	223d      	movs	r2, #61	@ 0x3d
 8012036:	2101      	movs	r1, #1
 8012038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	0018      	movs	r0, r3
 801203e:	46bd      	mov	sp, r7
 8012040:	b002      	add	sp, #8
 8012042:	bd80      	pop	{r7, pc}

08012044 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801204e:	230f      	movs	r3, #15
 8012050:	18fb      	adds	r3, r7, r3
 8012052:	2200      	movs	r2, #0
 8012054:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d104      	bne.n	8012066 <HAL_TIM_IC_Start_IT+0x22>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	223e      	movs	r2, #62	@ 0x3e
 8012060:	5c9b      	ldrb	r3, [r3, r2]
 8012062:	b2db      	uxtb	r3, r3
 8012064:	e023      	b.n	80120ae <HAL_TIM_IC_Start_IT+0x6a>
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2b04      	cmp	r3, #4
 801206a:	d104      	bne.n	8012076 <HAL_TIM_IC_Start_IT+0x32>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	223f      	movs	r2, #63	@ 0x3f
 8012070:	5c9b      	ldrb	r3, [r3, r2]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	e01b      	b.n	80120ae <HAL_TIM_IC_Start_IT+0x6a>
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	2b08      	cmp	r3, #8
 801207a:	d104      	bne.n	8012086 <HAL_TIM_IC_Start_IT+0x42>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2240      	movs	r2, #64	@ 0x40
 8012080:	5c9b      	ldrb	r3, [r3, r2]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	e013      	b.n	80120ae <HAL_TIM_IC_Start_IT+0x6a>
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b0c      	cmp	r3, #12
 801208a:	d104      	bne.n	8012096 <HAL_TIM_IC_Start_IT+0x52>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2241      	movs	r2, #65	@ 0x41
 8012090:	5c9b      	ldrb	r3, [r3, r2]
 8012092:	b2db      	uxtb	r3, r3
 8012094:	e00b      	b.n	80120ae <HAL_TIM_IC_Start_IT+0x6a>
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	2b10      	cmp	r3, #16
 801209a:	d104      	bne.n	80120a6 <HAL_TIM_IC_Start_IT+0x62>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2242      	movs	r2, #66	@ 0x42
 80120a0:	5c9b      	ldrb	r3, [r3, r2]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	e003      	b.n	80120ae <HAL_TIM_IC_Start_IT+0x6a>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2243      	movs	r2, #67	@ 0x43
 80120aa:	5c9b      	ldrb	r3, [r3, r2]
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	220e      	movs	r2, #14
 80120b0:	18ba      	adds	r2, r7, r2
 80120b2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d104      	bne.n	80120c4 <HAL_TIM_IC_Start_IT+0x80>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2244      	movs	r2, #68	@ 0x44
 80120be:	5c9b      	ldrb	r3, [r3, r2]
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	e013      	b.n	80120ec <HAL_TIM_IC_Start_IT+0xa8>
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	2b04      	cmp	r3, #4
 80120c8:	d104      	bne.n	80120d4 <HAL_TIM_IC_Start_IT+0x90>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2245      	movs	r2, #69	@ 0x45
 80120ce:	5c9b      	ldrb	r3, [r3, r2]
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	e00b      	b.n	80120ec <HAL_TIM_IC_Start_IT+0xa8>
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	2b08      	cmp	r3, #8
 80120d8:	d104      	bne.n	80120e4 <HAL_TIM_IC_Start_IT+0xa0>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2246      	movs	r2, #70	@ 0x46
 80120de:	5c9b      	ldrb	r3, [r3, r2]
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	e003      	b.n	80120ec <HAL_TIM_IC_Start_IT+0xa8>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2247      	movs	r2, #71	@ 0x47
 80120e8:	5c9b      	ldrb	r3, [r3, r2]
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	210d      	movs	r1, #13
 80120ee:	187a      	adds	r2, r7, r1
 80120f0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80120f2:	230e      	movs	r3, #14
 80120f4:	18fb      	adds	r3, r7, r3
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d103      	bne.n	8012104 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80120fc:	187b      	adds	r3, r7, r1
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d001      	beq.n	8012108 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	e0c8      	b.n	801229a <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d104      	bne.n	8012118 <HAL_TIM_IC_Start_IT+0xd4>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	223e      	movs	r2, #62	@ 0x3e
 8012112:	2102      	movs	r1, #2
 8012114:	5499      	strb	r1, [r3, r2]
 8012116:	e023      	b.n	8012160 <HAL_TIM_IC_Start_IT+0x11c>
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2b04      	cmp	r3, #4
 801211c:	d104      	bne.n	8012128 <HAL_TIM_IC_Start_IT+0xe4>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	223f      	movs	r2, #63	@ 0x3f
 8012122:	2102      	movs	r1, #2
 8012124:	5499      	strb	r1, [r3, r2]
 8012126:	e01b      	b.n	8012160 <HAL_TIM_IC_Start_IT+0x11c>
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	2b08      	cmp	r3, #8
 801212c:	d104      	bne.n	8012138 <HAL_TIM_IC_Start_IT+0xf4>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2240      	movs	r2, #64	@ 0x40
 8012132:	2102      	movs	r1, #2
 8012134:	5499      	strb	r1, [r3, r2]
 8012136:	e013      	b.n	8012160 <HAL_TIM_IC_Start_IT+0x11c>
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	2b0c      	cmp	r3, #12
 801213c:	d104      	bne.n	8012148 <HAL_TIM_IC_Start_IT+0x104>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2241      	movs	r2, #65	@ 0x41
 8012142:	2102      	movs	r1, #2
 8012144:	5499      	strb	r1, [r3, r2]
 8012146:	e00b      	b.n	8012160 <HAL_TIM_IC_Start_IT+0x11c>
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2b10      	cmp	r3, #16
 801214c:	d104      	bne.n	8012158 <HAL_TIM_IC_Start_IT+0x114>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2242      	movs	r2, #66	@ 0x42
 8012152:	2102      	movs	r1, #2
 8012154:	5499      	strb	r1, [r3, r2]
 8012156:	e003      	b.n	8012160 <HAL_TIM_IC_Start_IT+0x11c>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2243      	movs	r2, #67	@ 0x43
 801215c:	2102      	movs	r1, #2
 801215e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d104      	bne.n	8012170 <HAL_TIM_IC_Start_IT+0x12c>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2244      	movs	r2, #68	@ 0x44
 801216a:	2102      	movs	r1, #2
 801216c:	5499      	strb	r1, [r3, r2]
 801216e:	e013      	b.n	8012198 <HAL_TIM_IC_Start_IT+0x154>
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b04      	cmp	r3, #4
 8012174:	d104      	bne.n	8012180 <HAL_TIM_IC_Start_IT+0x13c>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2245      	movs	r2, #69	@ 0x45
 801217a:	2102      	movs	r1, #2
 801217c:	5499      	strb	r1, [r3, r2]
 801217e:	e00b      	b.n	8012198 <HAL_TIM_IC_Start_IT+0x154>
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	2b08      	cmp	r3, #8
 8012184:	d104      	bne.n	8012190 <HAL_TIM_IC_Start_IT+0x14c>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2246      	movs	r2, #70	@ 0x46
 801218a:	2102      	movs	r1, #2
 801218c:	5499      	strb	r1, [r3, r2]
 801218e:	e003      	b.n	8012198 <HAL_TIM_IC_Start_IT+0x154>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2247      	movs	r2, #71	@ 0x47
 8012194:	2102      	movs	r1, #2
 8012196:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2b0c      	cmp	r3, #12
 801219c:	d02a      	beq.n	80121f4 <HAL_TIM_IC_Start_IT+0x1b0>
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	2b0c      	cmp	r3, #12
 80121a2:	d830      	bhi.n	8012206 <HAL_TIM_IC_Start_IT+0x1c2>
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b08      	cmp	r3, #8
 80121a8:	d01b      	beq.n	80121e2 <HAL_TIM_IC_Start_IT+0x19e>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	2b08      	cmp	r3, #8
 80121ae:	d82a      	bhi.n	8012206 <HAL_TIM_IC_Start_IT+0x1c2>
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d003      	beq.n	80121be <HAL_TIM_IC_Start_IT+0x17a>
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	2b04      	cmp	r3, #4
 80121ba:	d009      	beq.n	80121d0 <HAL_TIM_IC_Start_IT+0x18c>
 80121bc:	e023      	b.n	8012206 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	68da      	ldr	r2, [r3, #12]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2102      	movs	r1, #2
 80121ca:	430a      	orrs	r2, r1
 80121cc:	60da      	str	r2, [r3, #12]
      break;
 80121ce:	e01f      	b.n	8012210 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	68da      	ldr	r2, [r3, #12]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2104      	movs	r1, #4
 80121dc:	430a      	orrs	r2, r1
 80121de:	60da      	str	r2, [r3, #12]
      break;
 80121e0:	e016      	b.n	8012210 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	68da      	ldr	r2, [r3, #12]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2108      	movs	r1, #8
 80121ee:	430a      	orrs	r2, r1
 80121f0:	60da      	str	r2, [r3, #12]
      break;
 80121f2:	e00d      	b.n	8012210 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68da      	ldr	r2, [r3, #12]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2110      	movs	r1, #16
 8012200:	430a      	orrs	r2, r1
 8012202:	60da      	str	r2, [r3, #12]
      break;
 8012204:	e004      	b.n	8012210 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8012206:	230f      	movs	r3, #15
 8012208:	18fb      	adds	r3, r7, r3
 801220a:	2201      	movs	r2, #1
 801220c:	701a      	strb	r2, [r3, #0]
      break;
 801220e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8012210:	230f      	movs	r3, #15
 8012212:	18fb      	adds	r3, r7, r3
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d13c      	bne.n	8012294 <HAL_TIM_IC_Start_IT+0x250>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6839      	ldr	r1, [r7, #0]
 8012220:	2201      	movs	r2, #1
 8012222:	0018      	movs	r0, r3
 8012224:	f000 fd7e 	bl	8012d24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4a1d      	ldr	r2, [pc, #116]	@ (80122a4 <HAL_TIM_IC_Start_IT+0x260>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d00f      	beq.n	8012252 <HAL_TIM_IC_Start_IT+0x20e>
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	2380      	movs	r3, #128	@ 0x80
 8012238:	05db      	lsls	r3, r3, #23
 801223a:	429a      	cmp	r2, r3
 801223c:	d009      	beq.n	8012252 <HAL_TIM_IC_Start_IT+0x20e>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4a19      	ldr	r2, [pc, #100]	@ (80122a8 <HAL_TIM_IC_Start_IT+0x264>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d004      	beq.n	8012252 <HAL_TIM_IC_Start_IT+0x20e>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4a17      	ldr	r2, [pc, #92]	@ (80122ac <HAL_TIM_IC_Start_IT+0x268>)
 801224e:	4293      	cmp	r3, r2
 8012250:	d116      	bne.n	8012280 <HAL_TIM_IC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	4a15      	ldr	r2, [pc, #84]	@ (80122b0 <HAL_TIM_IC_Start_IT+0x26c>)
 801225a:	4013      	ands	r3, r2
 801225c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	2b06      	cmp	r3, #6
 8012262:	d016      	beq.n	8012292 <HAL_TIM_IC_Start_IT+0x24e>
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	2380      	movs	r3, #128	@ 0x80
 8012268:	025b      	lsls	r3, r3, #9
 801226a:	429a      	cmp	r2, r3
 801226c:	d011      	beq.n	8012292 <HAL_TIM_IC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	681a      	ldr	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2101      	movs	r1, #1
 801227a:	430a      	orrs	r2, r1
 801227c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801227e:	e008      	b.n	8012292 <HAL_TIM_IC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2101      	movs	r1, #1
 801228c:	430a      	orrs	r2, r1
 801228e:	601a      	str	r2, [r3, #0]
 8012290:	e000      	b.n	8012294 <HAL_TIM_IC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012292:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8012294:	230f      	movs	r3, #15
 8012296:	18fb      	adds	r3, r7, r3
 8012298:	781b      	ldrb	r3, [r3, #0]
}
 801229a:	0018      	movs	r0, r3
 801229c:	46bd      	mov	sp, r7
 801229e:	b004      	add	sp, #16
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	46c0      	nop			@ (mov r8, r8)
 80122a4:	40012c00 	.word	0x40012c00
 80122a8:	40000400 	.word	0x40000400
 80122ac:	40014000 	.word	0x40014000
 80122b0:	00010007 	.word	0x00010007

080122b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	691b      	ldr	r3, [r3, #16]
 80122c2:	2202      	movs	r2, #2
 80122c4:	4013      	ands	r3, r2
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d124      	bne.n	8012314 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	2202      	movs	r2, #2
 80122d2:	4013      	ands	r3, r2
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	d11d      	bne.n	8012314 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2203      	movs	r2, #3
 80122de:	4252      	negs	r2, r2
 80122e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2201      	movs	r2, #1
 80122e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	699b      	ldr	r3, [r3, #24]
 80122ee:	2203      	movs	r2, #3
 80122f0:	4013      	ands	r3, r2
 80122f2:	d004      	beq.n	80122fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	0018      	movs	r0, r3
 80122f8:	f7f1 ff42 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 80122fc:	e007      	b.n	801230e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	0018      	movs	r0, r3
 8012302:	f000 fab7 	bl	8012874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	0018      	movs	r0, r3
 801230a:	f000 fabb 	bl	8012884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	691b      	ldr	r3, [r3, #16]
 801231a:	2204      	movs	r2, #4
 801231c:	4013      	ands	r3, r2
 801231e:	2b04      	cmp	r3, #4
 8012320:	d125      	bne.n	801236e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	2204      	movs	r2, #4
 801232a:	4013      	ands	r3, r2
 801232c:	2b04      	cmp	r3, #4
 801232e:	d11e      	bne.n	801236e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2205      	movs	r2, #5
 8012336:	4252      	negs	r2, r2
 8012338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2202      	movs	r2, #2
 801233e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	699a      	ldr	r2, [r3, #24]
 8012346:	23c0      	movs	r3, #192	@ 0xc0
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	4013      	ands	r3, r2
 801234c:	d004      	beq.n	8012358 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	0018      	movs	r0, r3
 8012352:	f7f1 ff15 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8012356:	e007      	b.n	8012368 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	0018      	movs	r0, r3
 801235c:	f000 fa8a 	bl	8012874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	0018      	movs	r0, r3
 8012364:	f000 fa8e 	bl	8012884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	691b      	ldr	r3, [r3, #16]
 8012374:	2208      	movs	r2, #8
 8012376:	4013      	ands	r3, r2
 8012378:	2b08      	cmp	r3, #8
 801237a:	d124      	bne.n	80123c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	2208      	movs	r2, #8
 8012384:	4013      	ands	r3, r2
 8012386:	2b08      	cmp	r3, #8
 8012388:	d11d      	bne.n	80123c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2209      	movs	r2, #9
 8012390:	4252      	negs	r2, r2
 8012392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2204      	movs	r2, #4
 8012398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	69db      	ldr	r3, [r3, #28]
 80123a0:	2203      	movs	r2, #3
 80123a2:	4013      	ands	r3, r2
 80123a4:	d004      	beq.n	80123b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	0018      	movs	r0, r3
 80123aa:	f7f1 fee9 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 80123ae:	e007      	b.n	80123c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	0018      	movs	r0, r3
 80123b4:	f000 fa5e 	bl	8012874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	0018      	movs	r0, r3
 80123bc:	f000 fa62 	bl	8012884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	691b      	ldr	r3, [r3, #16]
 80123cc:	2210      	movs	r2, #16
 80123ce:	4013      	ands	r3, r2
 80123d0:	2b10      	cmp	r3, #16
 80123d2:	d125      	bne.n	8012420 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	2210      	movs	r2, #16
 80123dc:	4013      	ands	r3, r2
 80123de:	2b10      	cmp	r3, #16
 80123e0:	d11e      	bne.n	8012420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2211      	movs	r2, #17
 80123e8:	4252      	negs	r2, r2
 80123ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2208      	movs	r2, #8
 80123f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	69da      	ldr	r2, [r3, #28]
 80123f8:	23c0      	movs	r3, #192	@ 0xc0
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	4013      	ands	r3, r2
 80123fe:	d004      	beq.n	801240a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	0018      	movs	r0, r3
 8012404:	f7f1 febc 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8012408:	e007      	b.n	801241a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	0018      	movs	r0, r3
 801240e:	f000 fa31 	bl	8012874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	0018      	movs	r0, r3
 8012416:	f000 fa35 	bl	8012884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	691b      	ldr	r3, [r3, #16]
 8012426:	2201      	movs	r2, #1
 8012428:	4013      	ands	r3, r2
 801242a:	2b01      	cmp	r3, #1
 801242c:	d10f      	bne.n	801244e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	2201      	movs	r2, #1
 8012436:	4013      	ands	r3, r2
 8012438:	2b01      	cmp	r3, #1
 801243a:	d108      	bne.n	801244e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2202      	movs	r2, #2
 8012442:	4252      	negs	r2, r2
 8012444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	0018      	movs	r0, r3
 801244a:	f7f1 ff55 	bl	80042f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	691b      	ldr	r3, [r3, #16]
 8012454:	2280      	movs	r2, #128	@ 0x80
 8012456:	4013      	ands	r3, r2
 8012458:	2b80      	cmp	r3, #128	@ 0x80
 801245a:	d10f      	bne.n	801247c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	2280      	movs	r2, #128	@ 0x80
 8012464:	4013      	ands	r3, r2
 8012466:	2b80      	cmp	r3, #128	@ 0x80
 8012468:	d108      	bne.n	801247c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2281      	movs	r2, #129	@ 0x81
 8012470:	4252      	negs	r2, r2
 8012472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	0018      	movs	r0, r3
 8012478:	f000 fcee 	bl	8012e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	691a      	ldr	r2, [r3, #16]
 8012482:	2380      	movs	r3, #128	@ 0x80
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	401a      	ands	r2, r3
 8012488:	2380      	movs	r3, #128	@ 0x80
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	429a      	cmp	r2, r3
 801248e:	d10e      	bne.n	80124ae <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	2280      	movs	r2, #128	@ 0x80
 8012498:	4013      	ands	r3, r2
 801249a:	2b80      	cmp	r3, #128	@ 0x80
 801249c:	d107      	bne.n	80124ae <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4a1c      	ldr	r2, [pc, #112]	@ (8012514 <HAL_TIM_IRQHandler+0x260>)
 80124a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	0018      	movs	r0, r3
 80124aa:	f000 fcdd 	bl	8012e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	2240      	movs	r2, #64	@ 0x40
 80124b6:	4013      	ands	r3, r2
 80124b8:	2b40      	cmp	r3, #64	@ 0x40
 80124ba:	d10f      	bne.n	80124dc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	2240      	movs	r2, #64	@ 0x40
 80124c4:	4013      	ands	r3, r2
 80124c6:	2b40      	cmp	r3, #64	@ 0x40
 80124c8:	d108      	bne.n	80124dc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	2241      	movs	r2, #65	@ 0x41
 80124d0:	4252      	negs	r2, r2
 80124d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	0018      	movs	r0, r3
 80124d8:	f000 f9dc 	bl	8012894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	691b      	ldr	r3, [r3, #16]
 80124e2:	2220      	movs	r2, #32
 80124e4:	4013      	ands	r3, r2
 80124e6:	2b20      	cmp	r3, #32
 80124e8:	d10f      	bne.n	801250a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	2220      	movs	r2, #32
 80124f2:	4013      	ands	r3, r2
 80124f4:	2b20      	cmp	r3, #32
 80124f6:	d108      	bne.n	801250a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2221      	movs	r2, #33	@ 0x21
 80124fe:	4252      	negs	r2, r2
 8012500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	0018      	movs	r0, r3
 8012506:	f000 fc9f 	bl	8012e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801250a:	46c0      	nop			@ (mov r8, r8)
 801250c:	46bd      	mov	sp, r7
 801250e:	b002      	add	sp, #8
 8012510:	bd80      	pop	{r7, pc}
 8012512:	46c0      	nop			@ (mov r8, r8)
 8012514:	fffffeff 	.word	0xfffffeff

08012518 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012524:	2317      	movs	r3, #23
 8012526:	18fb      	adds	r3, r7, r3
 8012528:	2200      	movs	r2, #0
 801252a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	223c      	movs	r2, #60	@ 0x3c
 8012530:	5c9b      	ldrb	r3, [r3, r2]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d101      	bne.n	801253a <HAL_TIM_IC_ConfigChannel+0x22>
 8012536:	2302      	movs	r3, #2
 8012538:	e08c      	b.n	8012654 <HAL_TIM_IC_ConfigChannel+0x13c>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	223c      	movs	r2, #60	@ 0x3c
 801253e:	2101      	movs	r1, #1
 8012540:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d11b      	bne.n	8012580 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8012558:	f000 fa24 	bl	80129a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	699a      	ldr	r2, [r3, #24]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	210c      	movs	r1, #12
 8012568:	438a      	bics	r2, r1
 801256a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6999      	ldr	r1, [r3, #24]
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	689a      	ldr	r2, [r3, #8]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	430a      	orrs	r2, r1
 801257c:	619a      	str	r2, [r3, #24]
 801257e:	e062      	b.n	8012646 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b04      	cmp	r3, #4
 8012584:	d11c      	bne.n	80125c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8012596:	f000 fa8f 	bl	8012ab8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	699a      	ldr	r2, [r3, #24]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	492d      	ldr	r1, [pc, #180]	@ (801265c <HAL_TIM_IC_ConfigChannel+0x144>)
 80125a6:	400a      	ands	r2, r1
 80125a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6999      	ldr	r1, [r3, #24]
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	021a      	lsls	r2, r3, #8
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	430a      	orrs	r2, r1
 80125bc:	619a      	str	r2, [r3, #24]
 80125be:	e042      	b.n	8012646 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b08      	cmp	r3, #8
 80125c4:	d11b      	bne.n	80125fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80125d6:	f000 fae3 	bl	8012ba0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	69da      	ldr	r2, [r3, #28]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	210c      	movs	r1, #12
 80125e6:	438a      	bics	r2, r1
 80125e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	69d9      	ldr	r1, [r3, #28]
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	689a      	ldr	r2, [r3, #8]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	430a      	orrs	r2, r1
 80125fa:	61da      	str	r2, [r3, #28]
 80125fc:	e023      	b.n	8012646 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b0c      	cmp	r3, #12
 8012602:	d11c      	bne.n	801263e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8012614:	f000 fb04 	bl	8012c20 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	69da      	ldr	r2, [r3, #28]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	490e      	ldr	r1, [pc, #56]	@ (801265c <HAL_TIM_IC_ConfigChannel+0x144>)
 8012624:	400a      	ands	r2, r1
 8012626:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	69d9      	ldr	r1, [r3, #28]
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	021a      	lsls	r2, r3, #8
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	430a      	orrs	r2, r1
 801263a:	61da      	str	r2, [r3, #28]
 801263c:	e003      	b.n	8012646 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 801263e:	2317      	movs	r3, #23
 8012640:	18fb      	adds	r3, r7, r3
 8012642:	2201      	movs	r2, #1
 8012644:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	223c      	movs	r2, #60	@ 0x3c
 801264a:	2100      	movs	r1, #0
 801264c:	5499      	strb	r1, [r3, r2]

  return status;
 801264e:	2317      	movs	r3, #23
 8012650:	18fb      	adds	r3, r7, r3
 8012652:	781b      	ldrb	r3, [r3, #0]
}
 8012654:	0018      	movs	r0, r3
 8012656:	46bd      	mov	sp, r7
 8012658:	b006      	add	sp, #24
 801265a:	bd80      	pop	{r7, pc}
 801265c:	fffff3ff 	.word	0xfffff3ff

08012660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801266a:	230f      	movs	r3, #15
 801266c:	18fb      	adds	r3, r7, r3
 801266e:	2200      	movs	r2, #0
 8012670:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	223c      	movs	r2, #60	@ 0x3c
 8012676:	5c9b      	ldrb	r3, [r3, r2]
 8012678:	2b01      	cmp	r3, #1
 801267a:	d101      	bne.n	8012680 <HAL_TIM_ConfigClockSource+0x20>
 801267c:	2302      	movs	r3, #2
 801267e:	e0bc      	b.n	80127fa <HAL_TIM_ConfigClockSource+0x19a>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	223c      	movs	r2, #60	@ 0x3c
 8012684:	2101      	movs	r1, #1
 8012686:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	223d      	movs	r2, #61	@ 0x3d
 801268c:	2102      	movs	r1, #2
 801268e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	689b      	ldr	r3, [r3, #8]
 8012696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	4a5a      	ldr	r2, [pc, #360]	@ (8012804 <HAL_TIM_ConfigClockSource+0x1a4>)
 801269c:	4013      	ands	r3, r2
 801269e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	4a59      	ldr	r2, [pc, #356]	@ (8012808 <HAL_TIM_ConfigClockSource+0x1a8>)
 80126a4:	4013      	ands	r3, r2
 80126a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	68ba      	ldr	r2, [r7, #8]
 80126ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2280      	movs	r2, #128	@ 0x80
 80126b6:	0192      	lsls	r2, r2, #6
 80126b8:	4293      	cmp	r3, r2
 80126ba:	d040      	beq.n	801273e <HAL_TIM_ConfigClockSource+0xde>
 80126bc:	2280      	movs	r2, #128	@ 0x80
 80126be:	0192      	lsls	r2, r2, #6
 80126c0:	4293      	cmp	r3, r2
 80126c2:	d900      	bls.n	80126c6 <HAL_TIM_ConfigClockSource+0x66>
 80126c4:	e088      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126c6:	2280      	movs	r2, #128	@ 0x80
 80126c8:	0152      	lsls	r2, r2, #5
 80126ca:	4293      	cmp	r3, r2
 80126cc:	d100      	bne.n	80126d0 <HAL_TIM_ConfigClockSource+0x70>
 80126ce:	e088      	b.n	80127e2 <HAL_TIM_ConfigClockSource+0x182>
 80126d0:	2280      	movs	r2, #128	@ 0x80
 80126d2:	0152      	lsls	r2, r2, #5
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d900      	bls.n	80126da <HAL_TIM_ConfigClockSource+0x7a>
 80126d8:	e07e      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126da:	2b70      	cmp	r3, #112	@ 0x70
 80126dc:	d018      	beq.n	8012710 <HAL_TIM_ConfigClockSource+0xb0>
 80126de:	d900      	bls.n	80126e2 <HAL_TIM_ConfigClockSource+0x82>
 80126e0:	e07a      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126e2:	2b60      	cmp	r3, #96	@ 0x60
 80126e4:	d04f      	beq.n	8012786 <HAL_TIM_ConfigClockSource+0x126>
 80126e6:	d900      	bls.n	80126ea <HAL_TIM_ConfigClockSource+0x8a>
 80126e8:	e076      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126ea:	2b50      	cmp	r3, #80	@ 0x50
 80126ec:	d03b      	beq.n	8012766 <HAL_TIM_ConfigClockSource+0x106>
 80126ee:	d900      	bls.n	80126f2 <HAL_TIM_ConfigClockSource+0x92>
 80126f0:	e072      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126f2:	2b40      	cmp	r3, #64	@ 0x40
 80126f4:	d057      	beq.n	80127a6 <HAL_TIM_ConfigClockSource+0x146>
 80126f6:	d900      	bls.n	80126fa <HAL_TIM_ConfigClockSource+0x9a>
 80126f8:	e06e      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 80126fa:	2b30      	cmp	r3, #48	@ 0x30
 80126fc:	d063      	beq.n	80127c6 <HAL_TIM_ConfigClockSource+0x166>
 80126fe:	d86b      	bhi.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 8012700:	2b20      	cmp	r3, #32
 8012702:	d060      	beq.n	80127c6 <HAL_TIM_ConfigClockSource+0x166>
 8012704:	d868      	bhi.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
 8012706:	2b00      	cmp	r3, #0
 8012708:	d05d      	beq.n	80127c6 <HAL_TIM_ConfigClockSource+0x166>
 801270a:	2b10      	cmp	r3, #16
 801270c:	d05b      	beq.n	80127c6 <HAL_TIM_ConfigClockSource+0x166>
 801270e:	e063      	b.n	80127d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012720:	f000 fae0 	bl	8012ce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	2277      	movs	r2, #119	@ 0x77
 8012730:	4313      	orrs	r3, r2
 8012732:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	609a      	str	r2, [r3, #8]
      break;
 801273c:	e052      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801274e:	f000 fac9 	bl	8012ce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	689a      	ldr	r2, [r3, #8]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	2180      	movs	r1, #128	@ 0x80
 801275e:	01c9      	lsls	r1, r1, #7
 8012760:	430a      	orrs	r2, r1
 8012762:	609a      	str	r2, [r3, #8]
      break;
 8012764:	e03e      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012772:	001a      	movs	r2, r3
 8012774:	f000 f972 	bl	8012a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2150      	movs	r1, #80	@ 0x50
 801277e:	0018      	movs	r0, r3
 8012780:	f000 fa94 	bl	8012cac <TIM_ITRx_SetConfig>
      break;
 8012784:	e02e      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012792:	001a      	movs	r2, r3
 8012794:	f000 f9d2 	bl	8012b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2160      	movs	r1, #96	@ 0x60
 801279e:	0018      	movs	r0, r3
 80127a0:	f000 fa84 	bl	8012cac <TIM_ITRx_SetConfig>
      break;
 80127a4:	e01e      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80127b2:	001a      	movs	r2, r3
 80127b4:	f000 f952 	bl	8012a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2140      	movs	r1, #64	@ 0x40
 80127be:	0018      	movs	r0, r3
 80127c0:	f000 fa74 	bl	8012cac <TIM_ITRx_SetConfig>
      break;
 80127c4:	e00e      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	0019      	movs	r1, r3
 80127d0:	0010      	movs	r0, r2
 80127d2:	f000 fa6b 	bl	8012cac <TIM_ITRx_SetConfig>
      break;
 80127d6:	e005      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80127d8:	230f      	movs	r3, #15
 80127da:	18fb      	adds	r3, r7, r3
 80127dc:	2201      	movs	r2, #1
 80127de:	701a      	strb	r2, [r3, #0]
      break;
 80127e0:	e000      	b.n	80127e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80127e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	223d      	movs	r2, #61	@ 0x3d
 80127e8:	2101      	movs	r1, #1
 80127ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	223c      	movs	r2, #60	@ 0x3c
 80127f0:	2100      	movs	r1, #0
 80127f2:	5499      	strb	r1, [r3, r2]

  return status;
 80127f4:	230f      	movs	r3, #15
 80127f6:	18fb      	adds	r3, r7, r3
 80127f8:	781b      	ldrb	r3, [r3, #0]
}
 80127fa:	0018      	movs	r0, r3
 80127fc:	46bd      	mov	sp, r7
 80127fe:	b004      	add	sp, #16
 8012800:	bd80      	pop	{r7, pc}
 8012802:	46c0      	nop			@ (mov r8, r8)
 8012804:	ffceff88 	.word	0xffceff88
 8012808:	ffff00ff 	.word	0xffff00ff

0801280c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8012816:	2300      	movs	r3, #0
 8012818:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2b0c      	cmp	r3, #12
 801281e:	d01e      	beq.n	801285e <HAL_TIM_ReadCapturedValue+0x52>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b0c      	cmp	r3, #12
 8012824:	d820      	bhi.n	8012868 <HAL_TIM_ReadCapturedValue+0x5c>
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	2b08      	cmp	r3, #8
 801282a:	d013      	beq.n	8012854 <HAL_TIM_ReadCapturedValue+0x48>
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	2b08      	cmp	r3, #8
 8012830:	d81a      	bhi.n	8012868 <HAL_TIM_ReadCapturedValue+0x5c>
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d003      	beq.n	8012840 <HAL_TIM_ReadCapturedValue+0x34>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2b04      	cmp	r3, #4
 801283c:	d005      	beq.n	801284a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 801283e:	e013      	b.n	8012868 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012846:	60fb      	str	r3, [r7, #12]
      break;
 8012848:	e00f      	b.n	801286a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012850:	60fb      	str	r3, [r7, #12]
      break;
 8012852:	e00a      	b.n	801286a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801285a:	60fb      	str	r3, [r7, #12]
      break;
 801285c:	e005      	b.n	801286a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012864:	60fb      	str	r3, [r7, #12]
      break;
 8012866:	e000      	b.n	801286a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8012868:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 801286a:	68fb      	ldr	r3, [r7, #12]
}
 801286c:	0018      	movs	r0, r3
 801286e:	46bd      	mov	sp, r7
 8012870:	b004      	add	sp, #16
 8012872:	bd80      	pop	{r7, pc}

08012874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801287c:	46c0      	nop			@ (mov r8, r8)
 801287e:	46bd      	mov	sp, r7
 8012880:	b002      	add	sp, #8
 8012882:	bd80      	pop	{r7, pc}

08012884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801288c:	46c0      	nop			@ (mov r8, r8)
 801288e:	46bd      	mov	sp, r7
 8012890:	b002      	add	sp, #8
 8012892:	bd80      	pop	{r7, pc}

08012894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801289c:	46c0      	nop			@ (mov r8, r8)
 801289e:	46bd      	mov	sp, r7
 80128a0:	b002      	add	sp, #8
 80128a2:	bd80      	pop	{r7, pc}

080128a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	4a34      	ldr	r2, [pc, #208]	@ (8012988 <TIM_Base_SetConfig+0xe4>)
 80128b8:	4293      	cmp	r3, r2
 80128ba:	d008      	beq.n	80128ce <TIM_Base_SetConfig+0x2a>
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	2380      	movs	r3, #128	@ 0x80
 80128c0:	05db      	lsls	r3, r3, #23
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d003      	beq.n	80128ce <TIM_Base_SetConfig+0x2a>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4a30      	ldr	r2, [pc, #192]	@ (801298c <TIM_Base_SetConfig+0xe8>)
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d108      	bne.n	80128e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2270      	movs	r2, #112	@ 0x70
 80128d2:	4393      	bics	r3, r2
 80128d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	4313      	orrs	r3, r2
 80128de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4a29      	ldr	r2, [pc, #164]	@ (8012988 <TIM_Base_SetConfig+0xe4>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d018      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	2380      	movs	r3, #128	@ 0x80
 80128ec:	05db      	lsls	r3, r3, #23
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d013      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4a25      	ldr	r2, [pc, #148]	@ (801298c <TIM_Base_SetConfig+0xe8>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d00f      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4a24      	ldr	r2, [pc, #144]	@ (8012990 <TIM_Base_SetConfig+0xec>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	d00b      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4a23      	ldr	r2, [pc, #140]	@ (8012994 <TIM_Base_SetConfig+0xf0>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d007      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4a22      	ldr	r2, [pc, #136]	@ (8012998 <TIM_Base_SetConfig+0xf4>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d003      	beq.n	801291a <TIM_Base_SetConfig+0x76>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4a21      	ldr	r2, [pc, #132]	@ (801299c <TIM_Base_SetConfig+0xf8>)
 8012916:	4293      	cmp	r3, r2
 8012918:	d108      	bne.n	801292c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	4a20      	ldr	r2, [pc, #128]	@ (80129a0 <TIM_Base_SetConfig+0xfc>)
 801291e:	4013      	ands	r3, r2
 8012920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	4313      	orrs	r3, r2
 801292a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2280      	movs	r2, #128	@ 0x80
 8012930:	4393      	bics	r3, r2
 8012932:	001a      	movs	r2, r3
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	4313      	orrs	r3, r2
 801293a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	689a      	ldr	r2, [r3, #8]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4a0c      	ldr	r2, [pc, #48]	@ (8012988 <TIM_Base_SetConfig+0xe4>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d00b      	beq.n	8012972 <TIM_Base_SetConfig+0xce>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	4a0d      	ldr	r2, [pc, #52]	@ (8012994 <TIM_Base_SetConfig+0xf0>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d007      	beq.n	8012972 <TIM_Base_SetConfig+0xce>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4a0c      	ldr	r2, [pc, #48]	@ (8012998 <TIM_Base_SetConfig+0xf4>)
 8012966:	4293      	cmp	r3, r2
 8012968:	d003      	beq.n	8012972 <TIM_Base_SetConfig+0xce>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	4a0b      	ldr	r2, [pc, #44]	@ (801299c <TIM_Base_SetConfig+0xf8>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d103      	bne.n	801297a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	691a      	ldr	r2, [r3, #16]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2201      	movs	r2, #1
 801297e:	615a      	str	r2, [r3, #20]
}
 8012980:	46c0      	nop			@ (mov r8, r8)
 8012982:	46bd      	mov	sp, r7
 8012984:	b004      	add	sp, #16
 8012986:	bd80      	pop	{r7, pc}
 8012988:	40012c00 	.word	0x40012c00
 801298c:	40000400 	.word	0x40000400
 8012990:	40002000 	.word	0x40002000
 8012994:	40014000 	.word	0x40014000
 8012998:	40014400 	.word	0x40014400
 801299c:	40014800 	.word	0x40014800
 80129a0:	fffffcff 	.word	0xfffffcff

080129a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	607a      	str	r2, [r7, #4]
 80129b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	2201      	movs	r2, #1
 80129b8:	4393      	bics	r3, r2
 80129ba:	001a      	movs	r2, r3
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	699b      	ldr	r3, [r3, #24]
 80129c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6a1b      	ldr	r3, [r3, #32]
 80129ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	4a20      	ldr	r2, [pc, #128]	@ (8012a50 <TIM_TI1_SetConfig+0xac>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d00c      	beq.n	80129ee <TIM_TI1_SetConfig+0x4a>
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	2380      	movs	r3, #128	@ 0x80
 80129d8:	05db      	lsls	r3, r3, #23
 80129da:	429a      	cmp	r2, r3
 80129dc:	d007      	beq.n	80129ee <TIM_TI1_SetConfig+0x4a>
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	4a1c      	ldr	r2, [pc, #112]	@ (8012a54 <TIM_TI1_SetConfig+0xb0>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d003      	beq.n	80129ee <TIM_TI1_SetConfig+0x4a>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	4a1b      	ldr	r2, [pc, #108]	@ (8012a58 <TIM_TI1_SetConfig+0xb4>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d101      	bne.n	80129f2 <TIM_TI1_SetConfig+0x4e>
 80129ee:	2301      	movs	r3, #1
 80129f0:	e000      	b.n	80129f4 <TIM_TI1_SetConfig+0x50>
 80129f2:	2300      	movs	r3, #0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d008      	beq.n	8012a0a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	2203      	movs	r2, #3
 80129fc:	4393      	bics	r3, r2
 80129fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012a00:	697a      	ldr	r2, [r7, #20]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4313      	orrs	r3, r2
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	e003      	b.n	8012a12 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	22f0      	movs	r2, #240	@ 0xf0
 8012a16:	4393      	bics	r3, r2
 8012a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	011b      	lsls	r3, r3, #4
 8012a1e:	22ff      	movs	r2, #255	@ 0xff
 8012a20:	4013      	ands	r3, r2
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	220a      	movs	r2, #10
 8012a2c:	4393      	bics	r3, r2
 8012a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	220a      	movs	r2, #10
 8012a34:	4013      	ands	r3, r2
 8012a36:	693a      	ldr	r2, [r7, #16]
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	693a      	ldr	r2, [r7, #16]
 8012a46:	621a      	str	r2, [r3, #32]
}
 8012a48:	46c0      	nop			@ (mov r8, r8)
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	b006      	add	sp, #24
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	40012c00 	.word	0x40012c00
 8012a54:	40000400 	.word	0x40000400
 8012a58:	40014000 	.word	0x40014000

08012a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b086      	sub	sp, #24
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6a1b      	ldr	r3, [r3, #32]
 8012a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	2201      	movs	r2, #1
 8012a74:	4393      	bics	r3, r2
 8012a76:	001a      	movs	r2, r3
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	699b      	ldr	r3, [r3, #24]
 8012a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	22f0      	movs	r2, #240	@ 0xf0
 8012a86:	4393      	bics	r3, r2
 8012a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	011b      	lsls	r3, r3, #4
 8012a8e:	693a      	ldr	r2, [r7, #16]
 8012a90:	4313      	orrs	r3, r2
 8012a92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	220a      	movs	r2, #10
 8012a98:	4393      	bics	r3, r2
 8012a9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012a9c:	697a      	ldr	r2, [r7, #20]
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	693a      	ldr	r2, [r7, #16]
 8012aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	697a      	ldr	r2, [r7, #20]
 8012aae:	621a      	str	r2, [r3, #32]
}
 8012ab0:	46c0      	nop			@ (mov r8, r8)
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	b006      	add	sp, #24
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	6a1b      	ldr	r3, [r3, #32]
 8012aca:	2210      	movs	r2, #16
 8012acc:	4393      	bics	r3, r2
 8012ace:	001a      	movs	r2, r3
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	699b      	ldr	r3, [r3, #24]
 8012ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	6a1b      	ldr	r3, [r3, #32]
 8012ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	4a14      	ldr	r2, [pc, #80]	@ (8012b34 <TIM_TI2_SetConfig+0x7c>)
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	021b      	lsls	r3, r3, #8
 8012aec:	697a      	ldr	r2, [r7, #20]
 8012aee:	4313      	orrs	r3, r2
 8012af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	4a10      	ldr	r2, [pc, #64]	@ (8012b38 <TIM_TI2_SetConfig+0x80>)
 8012af6:	4013      	ands	r3, r2
 8012af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	031b      	lsls	r3, r3, #12
 8012afe:	041b      	lsls	r3, r3, #16
 8012b00:	0c1b      	lsrs	r3, r3, #16
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	4313      	orrs	r3, r2
 8012b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	22a0      	movs	r2, #160	@ 0xa0
 8012b0c:	4393      	bics	r3, r2
 8012b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	011b      	lsls	r3, r3, #4
 8012b14:	22a0      	movs	r2, #160	@ 0xa0
 8012b16:	4013      	ands	r3, r2
 8012b18:	693a      	ldr	r2, [r7, #16]
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	697a      	ldr	r2, [r7, #20]
 8012b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	693a      	ldr	r2, [r7, #16]
 8012b28:	621a      	str	r2, [r3, #32]
}
 8012b2a:	46c0      	nop			@ (mov r8, r8)
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	b006      	add	sp, #24
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	46c0      	nop			@ (mov r8, r8)
 8012b34:	fffffcff 	.word	0xfffffcff
 8012b38:	ffff0fff 	.word	0xffff0fff

08012b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	6a1b      	ldr	r3, [r3, #32]
 8012b4c:	2210      	movs	r2, #16
 8012b4e:	4393      	bics	r3, r2
 8012b50:	001a      	movs	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	699b      	ldr	r3, [r3, #24]
 8012b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	6a1b      	ldr	r3, [r3, #32]
 8012b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	4a0d      	ldr	r2, [pc, #52]	@ (8012b9c <TIM_TI2_ConfigInputStage+0x60>)
 8012b66:	4013      	ands	r3, r2
 8012b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	031b      	lsls	r3, r3, #12
 8012b6e:	697a      	ldr	r2, [r7, #20]
 8012b70:	4313      	orrs	r3, r2
 8012b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	22a0      	movs	r2, #160	@ 0xa0
 8012b78:	4393      	bics	r3, r2
 8012b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	011b      	lsls	r3, r3, #4
 8012b80:	693a      	ldr	r2, [r7, #16]
 8012b82:	4313      	orrs	r3, r2
 8012b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	697a      	ldr	r2, [r7, #20]
 8012b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	693a      	ldr	r2, [r7, #16]
 8012b90:	621a      	str	r2, [r3, #32]
}
 8012b92:	46c0      	nop			@ (mov r8, r8)
 8012b94:	46bd      	mov	sp, r7
 8012b96:	b006      	add	sp, #24
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	46c0      	nop			@ (mov r8, r8)
 8012b9c:	ffff0fff 	.word	0xffff0fff

08012ba0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b086      	sub	sp, #24
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6a1b      	ldr	r3, [r3, #32]
 8012bb2:	4a19      	ldr	r2, [pc, #100]	@ (8012c18 <TIM_TI3_SetConfig+0x78>)
 8012bb4:	401a      	ands	r2, r3
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	69db      	ldr	r3, [r3, #28]
 8012bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6a1b      	ldr	r3, [r3, #32]
 8012bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	2203      	movs	r2, #3
 8012bca:	4393      	bics	r3, r2
 8012bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	22f0      	movs	r2, #240	@ 0xf0
 8012bda:	4393      	bics	r3, r2
 8012bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	011b      	lsls	r3, r3, #4
 8012be2:	22ff      	movs	r2, #255	@ 0xff
 8012be4:	4013      	ands	r3, r2
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	4313      	orrs	r3, r2
 8012bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	4a0b      	ldr	r2, [pc, #44]	@ (8012c1c <TIM_TI3_SetConfig+0x7c>)
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	021a      	lsls	r2, r3, #8
 8012bf8:	23a0      	movs	r3, #160	@ 0xa0
 8012bfa:	011b      	lsls	r3, r3, #4
 8012bfc:	4013      	ands	r3, r2
 8012bfe:	693a      	ldr	r2, [r7, #16]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	697a      	ldr	r2, [r7, #20]
 8012c08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	693a      	ldr	r2, [r7, #16]
 8012c0e:	621a      	str	r2, [r3, #32]
}
 8012c10:	46c0      	nop			@ (mov r8, r8)
 8012c12:	46bd      	mov	sp, r7
 8012c14:	b006      	add	sp, #24
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	fffffeff 	.word	0xfffffeff
 8012c1c:	fffff5ff 	.word	0xfffff5ff

08012c20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b086      	sub	sp, #24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
 8012c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	6a1b      	ldr	r3, [r3, #32]
 8012c32:	4a1a      	ldr	r2, [pc, #104]	@ (8012c9c <TIM_TI4_SetConfig+0x7c>)
 8012c34:	401a      	ands	r2, r3
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	69db      	ldr	r3, [r3, #28]
 8012c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6a1b      	ldr	r3, [r3, #32]
 8012c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	4a15      	ldr	r2, [pc, #84]	@ (8012ca0 <TIM_TI4_SetConfig+0x80>)
 8012c4a:	4013      	ands	r3, r2
 8012c4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	021b      	lsls	r3, r3, #8
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	4313      	orrs	r3, r2
 8012c56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	4a12      	ldr	r2, [pc, #72]	@ (8012ca4 <TIM_TI4_SetConfig+0x84>)
 8012c5c:	4013      	ands	r3, r2
 8012c5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	031b      	lsls	r3, r3, #12
 8012c64:	041b      	lsls	r3, r3, #16
 8012c66:	0c1b      	lsrs	r3, r3, #16
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	4a0d      	ldr	r2, [pc, #52]	@ (8012ca8 <TIM_TI4_SetConfig+0x88>)
 8012c72:	4013      	ands	r3, r2
 8012c74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	031a      	lsls	r2, r3, #12
 8012c7a:	23a0      	movs	r3, #160	@ 0xa0
 8012c7c:	021b      	lsls	r3, r3, #8
 8012c7e:	4013      	ands	r3, r2
 8012c80:	693a      	ldr	r2, [r7, #16]
 8012c82:	4313      	orrs	r3, r2
 8012c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	697a      	ldr	r2, [r7, #20]
 8012c8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	693a      	ldr	r2, [r7, #16]
 8012c90:	621a      	str	r2, [r3, #32]
}
 8012c92:	46c0      	nop			@ (mov r8, r8)
 8012c94:	46bd      	mov	sp, r7
 8012c96:	b006      	add	sp, #24
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	46c0      	nop			@ (mov r8, r8)
 8012c9c:	ffffefff 	.word	0xffffefff
 8012ca0:	fffffcff 	.word	0xfffffcff
 8012ca4:	ffff0fff 	.word	0xffff0fff
 8012ca8:	ffff5fff 	.word	0xffff5fff

08012cac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	4a08      	ldr	r2, [pc, #32]	@ (8012ce0 <TIM_ITRx_SetConfig+0x34>)
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	2207      	movs	r2, #7
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	609a      	str	r2, [r3, #8]
}
 8012cd6:	46c0      	nop			@ (mov r8, r8)
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	b004      	add	sp, #16
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	46c0      	nop			@ (mov r8, r8)
 8012ce0:	ffcfff8f 	.word	0xffcfff8f

08012ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
 8012cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	4a09      	ldr	r2, [pc, #36]	@ (8012d20 <TIM_ETR_SetConfig+0x3c>)
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	021a      	lsls	r2, r3, #8
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	431a      	orrs	r2, r3
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	697a      	ldr	r2, [r7, #20]
 8012d0e:	4313      	orrs	r3, r2
 8012d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	697a      	ldr	r2, [r7, #20]
 8012d16:	609a      	str	r2, [r3, #8]
}
 8012d18:	46c0      	nop			@ (mov r8, r8)
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	b006      	add	sp, #24
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	ffff00ff 	.word	0xffff00ff

08012d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	221f      	movs	r2, #31
 8012d34:	4013      	ands	r3, r2
 8012d36:	2201      	movs	r2, #1
 8012d38:	409a      	lsls	r2, r3
 8012d3a:	0013      	movs	r3, r2
 8012d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6a1b      	ldr	r3, [r3, #32]
 8012d42:	697a      	ldr	r2, [r7, #20]
 8012d44:	43d2      	mvns	r2, r2
 8012d46:	401a      	ands	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	6a1a      	ldr	r2, [r3, #32]
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	211f      	movs	r1, #31
 8012d54:	400b      	ands	r3, r1
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	4099      	lsls	r1, r3
 8012d5a:	000b      	movs	r3, r1
 8012d5c:	431a      	orrs	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	621a      	str	r2, [r3, #32]
}
 8012d62:	46c0      	nop			@ (mov r8, r8)
 8012d64:	46bd      	mov	sp, r7
 8012d66:	b006      	add	sp, #24
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	223c      	movs	r2, #60	@ 0x3c
 8012d7a:	5c9b      	ldrb	r3, [r3, r2]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d101      	bne.n	8012d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012d80:	2302      	movs	r3, #2
 8012d82:	e055      	b.n	8012e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	223c      	movs	r2, #60	@ 0x3c
 8012d88:	2101      	movs	r1, #1
 8012d8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	223d      	movs	r2, #61	@ 0x3d
 8012d90:	2102      	movs	r1, #2
 8012d92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4a23      	ldr	r2, [pc, #140]	@ (8012e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d108      	bne.n	8012dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	4a22      	ldr	r2, [pc, #136]	@ (8012e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8012db2:	4013      	ands	r3, r2
 8012db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2270      	movs	r2, #112	@ 0x70
 8012dc4:	4393      	bics	r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	4313      	orrs	r3, r2
 8012dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	68fa      	ldr	r2, [r7, #12]
 8012dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a16      	ldr	r2, [pc, #88]	@ (8012e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d00f      	beq.n	8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	2380      	movs	r3, #128	@ 0x80
 8012dea:	05db      	lsls	r3, r3, #23
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d009      	beq.n	8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4a12      	ldr	r2, [pc, #72]	@ (8012e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d004      	beq.n	8012e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4a11      	ldr	r2, [pc, #68]	@ (8012e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d10c      	bne.n	8012e1e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	2280      	movs	r2, #128	@ 0x80
 8012e08:	4393      	bics	r3, r2
 8012e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	68ba      	ldr	r2, [r7, #8]
 8012e12:	4313      	orrs	r3, r2
 8012e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	223d      	movs	r2, #61	@ 0x3d
 8012e22:	2101      	movs	r1, #1
 8012e24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	223c      	movs	r2, #60	@ 0x3c
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012e2e:	2300      	movs	r3, #0
}
 8012e30:	0018      	movs	r0, r3
 8012e32:	46bd      	mov	sp, r7
 8012e34:	b004      	add	sp, #16
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	40012c00 	.word	0x40012c00
 8012e3c:	ff0fffff 	.word	0xff0fffff
 8012e40:	40000400 	.word	0x40000400
 8012e44:	40014000 	.word	0x40014000

08012e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012e50:	46c0      	nop			@ (mov r8, r8)
 8012e52:	46bd      	mov	sp, r7
 8012e54:	b002      	add	sp, #8
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012e60:	46c0      	nop			@ (mov r8, r8)
 8012e62:	46bd      	mov	sp, r7
 8012e64:	b002      	add	sp, #8
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012e70:	46c0      	nop			@ (mov r8, r8)
 8012e72:	46bd      	mov	sp, r7
 8012e74:	b002      	add	sp, #8
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d101      	bne.n	8012e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012e86:	2301      	movs	r3, #1
 8012e88:	e046      	b.n	8012f18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2284      	movs	r2, #132	@ 0x84
 8012e8e:	589b      	ldr	r3, [r3, r2]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d107      	bne.n	8012ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2280      	movs	r2, #128	@ 0x80
 8012e98:	2100      	movs	r1, #0
 8012e9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	0018      	movs	r0, r3
 8012ea0:	f7fa f902 	bl	800d0a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2284      	movs	r2, #132	@ 0x84
 8012ea8:	2124      	movs	r1, #36	@ 0x24
 8012eaa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2101      	movs	r1, #1
 8012eb8:	438a      	bics	r2, r1
 8012eba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	f000 fe28 	bl	8013b14 <UART_SetConfig>
 8012ec4:	0003      	movs	r3, r0
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d101      	bne.n	8012ece <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e024      	b.n	8012f18 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d003      	beq.n	8012ede <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	0018      	movs	r0, r3
 8012eda:	f001 f8d9 	bl	8014090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	685a      	ldr	r2, [r3, #4]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	490d      	ldr	r1, [pc, #52]	@ (8012f20 <HAL_UART_Init+0xa8>)
 8012eea:	400a      	ands	r2, r1
 8012eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	689a      	ldr	r2, [r3, #8]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	212a      	movs	r1, #42	@ 0x2a
 8012efa:	438a      	bics	r2, r1
 8012efc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	2101      	movs	r1, #1
 8012f0a:	430a      	orrs	r2, r1
 8012f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	0018      	movs	r0, r3
 8012f12:	f001 f971 	bl	80141f8 <UART_CheckIdleState>
 8012f16:	0003      	movs	r3, r0
}
 8012f18:	0018      	movs	r0, r3
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	b002      	add	sp, #8
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	ffffb7ff 	.word	0xffffb7ff

08012f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08a      	sub	sp, #40	@ 0x28
 8012f28:	af02      	add	r7, sp, #8
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	603b      	str	r3, [r7, #0]
 8012f30:	1dbb      	adds	r3, r7, #6
 8012f32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2284      	movs	r2, #132	@ 0x84
 8012f38:	589b      	ldr	r3, [r3, r2]
 8012f3a:	2b20      	cmp	r3, #32
 8012f3c:	d000      	beq.n	8012f40 <HAL_UART_Transmit+0x1c>
 8012f3e:	e097      	b.n	8013070 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d003      	beq.n	8012f4e <HAL_UART_Transmit+0x2a>
 8012f46:	1dbb      	adds	r3, r7, #6
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d101      	bne.n	8012f52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e08f      	b.n	8013072 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	689a      	ldr	r2, [r3, #8]
 8012f56:	2380      	movs	r3, #128	@ 0x80
 8012f58:	015b      	lsls	r3, r3, #5
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d109      	bne.n	8012f72 <HAL_UART_Transmit+0x4e>
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d105      	bne.n	8012f72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2201      	movs	r2, #1
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	d001      	beq.n	8012f72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e07f      	b.n	8013072 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2280      	movs	r2, #128	@ 0x80
 8012f76:	5c9b      	ldrb	r3, [r3, r2]
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d101      	bne.n	8012f80 <HAL_UART_Transmit+0x5c>
 8012f7c:	2302      	movs	r3, #2
 8012f7e:	e078      	b.n	8013072 <HAL_UART_Transmit+0x14e>
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	2280      	movs	r2, #128	@ 0x80
 8012f84:	2101      	movs	r1, #1
 8012f86:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	228c      	movs	r2, #140	@ 0x8c
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2284      	movs	r2, #132	@ 0x84
 8012f94:	2121      	movs	r1, #33	@ 0x21
 8012f96:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012f98:	f7fa fd34 	bl	800da04 <HAL_GetTick>
 8012f9c:	0003      	movs	r3, r0
 8012f9e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	1dba      	adds	r2, r7, #6
 8012fa4:	2154      	movs	r1, #84	@ 0x54
 8012fa6:	8812      	ldrh	r2, [r2, #0]
 8012fa8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	1dba      	adds	r2, r7, #6
 8012fae:	2156      	movs	r1, #86	@ 0x56
 8012fb0:	8812      	ldrh	r2, [r2, #0]
 8012fb2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	689a      	ldr	r2, [r3, #8]
 8012fb8:	2380      	movs	r3, #128	@ 0x80
 8012fba:	015b      	lsls	r3, r3, #5
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d108      	bne.n	8012fd2 <HAL_UART_Transmit+0xae>
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d104      	bne.n	8012fd2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	61bb      	str	r3, [r7, #24]
 8012fd0:	e003      	b.n	8012fda <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2280      	movs	r2, #128	@ 0x80
 8012fde:	2100      	movs	r1, #0
 8012fe0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8012fe2:	e02c      	b.n	801303e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012fe4:	697a      	ldr	r2, [r7, #20]
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	0013      	movs	r3, r2
 8012fee:	2200      	movs	r2, #0
 8012ff0:	2180      	movs	r1, #128	@ 0x80
 8012ff2:	f001 f94b 	bl	801428c <UART_WaitOnFlagUntilTimeout>
 8012ff6:	1e03      	subs	r3, r0, #0
 8012ff8:	d001      	beq.n	8012ffe <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8012ffa:	2303      	movs	r3, #3
 8012ffc:	e039      	b.n	8013072 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10b      	bne.n	801301c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	881b      	ldrh	r3, [r3, #0]
 8013008:	001a      	movs	r2, r3
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	05d2      	lsls	r2, r2, #23
 8013010:	0dd2      	lsrs	r2, r2, #23
 8013012:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	3302      	adds	r3, #2
 8013018:	61bb      	str	r3, [r7, #24]
 801301a:	e007      	b.n	801302c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	781a      	ldrb	r2, [r3, #0]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	3301      	adds	r3, #1
 801302a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2256      	movs	r2, #86	@ 0x56
 8013030:	5a9b      	ldrh	r3, [r3, r2]
 8013032:	b29b      	uxth	r3, r3
 8013034:	3b01      	subs	r3, #1
 8013036:	b299      	uxth	r1, r3
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2256      	movs	r2, #86	@ 0x56
 801303c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2256      	movs	r2, #86	@ 0x56
 8013042:	5a9b      	ldrh	r3, [r3, r2]
 8013044:	b29b      	uxth	r3, r3
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1cc      	bne.n	8012fe4 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801304a:	697a      	ldr	r2, [r7, #20]
 801304c:	68f8      	ldr	r0, [r7, #12]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	0013      	movs	r3, r2
 8013054:	2200      	movs	r2, #0
 8013056:	2140      	movs	r1, #64	@ 0x40
 8013058:	f001 f918 	bl	801428c <UART_WaitOnFlagUntilTimeout>
 801305c:	1e03      	subs	r3, r0, #0
 801305e:	d001      	beq.n	8013064 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8013060:	2303      	movs	r3, #3
 8013062:	e006      	b.n	8013072 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2284      	movs	r2, #132	@ 0x84
 8013068:	2120      	movs	r1, #32
 801306a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	e000      	b.n	8013072 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8013070:	2302      	movs	r3, #2
  }
}
 8013072:	0018      	movs	r0, r3
 8013074:	46bd      	mov	sp, r7
 8013076:	b008      	add	sp, #32
 8013078:	bd80      	pop	{r7, pc}
	...

0801307c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b088      	sub	sp, #32
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	60b9      	str	r1, [r7, #8]
 8013086:	1dbb      	adds	r3, r7, #6
 8013088:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	2288      	movs	r2, #136	@ 0x88
 801308e:	589b      	ldr	r3, [r3, r2]
 8013090:	2b20      	cmp	r3, #32
 8013092:	d155      	bne.n	8013140 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d003      	beq.n	80130a2 <HAL_UART_Receive_IT+0x26>
 801309a:	1dbb      	adds	r3, r7, #6
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d101      	bne.n	80130a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	e04d      	b.n	8013142 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	689a      	ldr	r2, [r3, #8]
 80130aa:	2380      	movs	r3, #128	@ 0x80
 80130ac:	015b      	lsls	r3, r3, #5
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d109      	bne.n	80130c6 <HAL_UART_Receive_IT+0x4a>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	691b      	ldr	r3, [r3, #16]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d105      	bne.n	80130c6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	2201      	movs	r2, #1
 80130be:	4013      	ands	r3, r2
 80130c0:	d001      	beq.n	80130c6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80130c2:	2301      	movs	r3, #1
 80130c4:	e03d      	b.n	8013142 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2280      	movs	r2, #128	@ 0x80
 80130ca:	5c9b      	ldrb	r3, [r3, r2]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d101      	bne.n	80130d4 <HAL_UART_Receive_IT+0x58>
 80130d0:	2302      	movs	r3, #2
 80130d2:	e036      	b.n	8013142 <HAL_UART_Receive_IT+0xc6>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2280      	movs	r2, #128	@ 0x80
 80130d8:	2101      	movs	r1, #1
 80130da:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2200      	movs	r2, #0
 80130e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4a19      	ldr	r2, [pc, #100]	@ (801314c <HAL_UART_Receive_IT+0xd0>)
 80130e8:	4293      	cmp	r3, r2
 80130ea:	d020      	beq.n	801312e <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	685a      	ldr	r2, [r3, #4]
 80130f2:	2380      	movs	r3, #128	@ 0x80
 80130f4:	041b      	lsls	r3, r3, #16
 80130f6:	4013      	ands	r3, r2
 80130f8:	d019      	beq.n	801312e <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130fa:	f3ef 8310 	mrs	r3, PRIMASK
 80130fe:	613b      	str	r3, [r7, #16]
  return(result);
 8013100:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013102:	61fb      	str	r3, [r7, #28]
 8013104:	2301      	movs	r3, #1
 8013106:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	f383 8810 	msr	PRIMASK, r3
}
 801310e:	46c0      	nop			@ (mov r8, r8)
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2180      	movs	r1, #128	@ 0x80
 801311c:	04c9      	lsls	r1, r1, #19
 801311e:	430a      	orrs	r2, r1
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	f383 8810 	msr	PRIMASK, r3
}
 801312c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801312e:	1dbb      	adds	r3, r7, #6
 8013130:	881a      	ldrh	r2, [r3, #0]
 8013132:	68b9      	ldr	r1, [r7, #8]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	0018      	movs	r0, r3
 8013138:	f001 f970 	bl	801441c <UART_Start_Receive_IT>
 801313c:	0003      	movs	r3, r0
 801313e:	e000      	b.n	8013142 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8013140:	2302      	movs	r3, #2
  }
}
 8013142:	0018      	movs	r0, r3
 8013144:	46bd      	mov	sp, r7
 8013146:	b008      	add	sp, #32
 8013148:	bd80      	pop	{r7, pc}
 801314a:	46c0      	nop			@ (mov r8, r8)
 801314c:	40008000 	.word	0x40008000

08013150 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b088      	sub	sp, #32
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	1dbb      	adds	r3, r7, #6
 801315c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2288      	movs	r2, #136	@ 0x88
 8013162:	589b      	ldr	r3, [r3, r2]
 8013164:	2b20      	cmp	r3, #32
 8013166:	d155      	bne.n	8013214 <HAL_UART_Receive_DMA+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d003      	beq.n	8013176 <HAL_UART_Receive_DMA+0x26>
 801316e:	1dbb      	adds	r3, r7, #6
 8013170:	881b      	ldrh	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d101      	bne.n	801317a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8013176:	2301      	movs	r3, #1
 8013178:	e04d      	b.n	8013216 <HAL_UART_Receive_DMA+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	689a      	ldr	r2, [r3, #8]
 801317e:	2380      	movs	r3, #128	@ 0x80
 8013180:	015b      	lsls	r3, r3, #5
 8013182:	429a      	cmp	r2, r3
 8013184:	d109      	bne.n	801319a <HAL_UART_Receive_DMA+0x4a>
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d105      	bne.n	801319a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	2201      	movs	r2, #1
 8013192:	4013      	ands	r3, r2
 8013194:	d001      	beq.n	801319a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013196:	2301      	movs	r3, #1
 8013198:	e03d      	b.n	8013216 <HAL_UART_Receive_DMA+0xc6>
      }
    }

    __HAL_LOCK(huart);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2280      	movs	r2, #128	@ 0x80
 801319e:	5c9b      	ldrb	r3, [r3, r2]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d101      	bne.n	80131a8 <HAL_UART_Receive_DMA+0x58>
 80131a4:	2302      	movs	r3, #2
 80131a6:	e036      	b.n	8013216 <HAL_UART_Receive_DMA+0xc6>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2280      	movs	r2, #128	@ 0x80
 80131ac:	2101      	movs	r1, #1
 80131ae:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2200      	movs	r2, #0
 80131b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4a19      	ldr	r2, [pc, #100]	@ (8013220 <HAL_UART_Receive_DMA+0xd0>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d020      	beq.n	8013202 <HAL_UART_Receive_DMA+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	685a      	ldr	r2, [r3, #4]
 80131c6:	2380      	movs	r3, #128	@ 0x80
 80131c8:	041b      	lsls	r3, r3, #16
 80131ca:	4013      	ands	r3, r2
 80131cc:	d019      	beq.n	8013202 <HAL_UART_Receive_DMA+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131ce:	f3ef 8310 	mrs	r3, PRIMASK
 80131d2:	613b      	str	r3, [r7, #16]
  return(result);
 80131d4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80131d6:	61fb      	str	r3, [r7, #28]
 80131d8:	2301      	movs	r3, #1
 80131da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	f383 8810 	msr	PRIMASK, r3
}
 80131e2:	46c0      	nop			@ (mov r8, r8)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2180      	movs	r1, #128	@ 0x80
 80131f0:	04c9      	lsls	r1, r1, #19
 80131f2:	430a      	orrs	r2, r1
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	69fb      	ldr	r3, [r7, #28]
 80131f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	f383 8810 	msr	PRIMASK, r3
}
 8013200:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013202:	1dbb      	adds	r3, r7, #6
 8013204:	881a      	ldrh	r2, [r3, #0]
 8013206:	68b9      	ldr	r1, [r7, #8]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	0018      	movs	r0, r3
 801320c:	f001 fa32 	bl	8014674 <UART_Start_Receive_DMA>
 8013210:	0003      	movs	r3, r0
 8013212:	e000      	b.n	8013216 <HAL_UART_Receive_DMA+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8013214:	2302      	movs	r3, #2
  }
}
 8013216:	0018      	movs	r0, r3
 8013218:	46bd      	mov	sp, r7
 801321a:	b008      	add	sp, #32
 801321c:	bd80      	pop	{r7, pc}
 801321e:	46c0      	nop			@ (mov r8, r8)
 8013220:	40008000 	.word	0x40008000

08013224 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b08c      	sub	sp, #48	@ 0x30
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2284      	movs	r2, #132	@ 0x84
 8013230:	589b      	ldr	r3, [r3, r2]
 8013232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2288      	movs	r2, #136	@ 0x88
 8013238:	589b      	ldr	r3, [r3, r2]
 801323a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	2280      	movs	r2, #128	@ 0x80
 8013244:	4013      	ands	r3, r2
 8013246:	2b80      	cmp	r3, #128	@ 0x80
 8013248:	d138      	bne.n	80132bc <HAL_UART_DMAStop+0x98>
 801324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324c:	2b21      	cmp	r3, #33	@ 0x21
 801324e:	d135      	bne.n	80132bc <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013250:	f3ef 8310 	mrs	r3, PRIMASK
 8013254:	617b      	str	r3, [r7, #20]
  return(result);
 8013256:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013258:	627b      	str	r3, [r7, #36]	@ 0x24
 801325a:	2301      	movs	r3, #1
 801325c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	f383 8810 	msr	PRIMASK, r3
}
 8013264:	46c0      	nop			@ (mov r8, r8)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	689a      	ldr	r2, [r3, #8]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	2180      	movs	r1, #128	@ 0x80
 8013272:	438a      	bics	r2, r1
 8013274:	609a      	str	r2, [r3, #8]
 8013276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	f383 8810 	msr	PRIMASK, r3
}
 8013280:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013286:	2b00      	cmp	r3, #0
 8013288:	d014      	beq.n	80132b4 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801328e:	0018      	movs	r0, r3
 8013290:	f7fa fdea 	bl	800de68 <HAL_DMA_Abort>
 8013294:	1e03      	subs	r3, r0, #0
 8013296:	d00d      	beq.n	80132b4 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801329c:	0018      	movs	r0, r3
 801329e:	f7fa ff6d 	bl	800e17c <HAL_DMA_GetError>
 80132a2:	0003      	movs	r3, r0
 80132a4:	2b20      	cmp	r3, #32
 80132a6:	d105      	bne.n	80132b4 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	228c      	movs	r2, #140	@ 0x8c
 80132ac:	2110      	movs	r1, #16
 80132ae:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e044      	b.n	801333e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	0018      	movs	r0, r3
 80132b8:	f001 fa84 	bl	80147c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	689b      	ldr	r3, [r3, #8]
 80132c2:	2240      	movs	r2, #64	@ 0x40
 80132c4:	4013      	ands	r3, r2
 80132c6:	2b40      	cmp	r3, #64	@ 0x40
 80132c8:	d138      	bne.n	801333c <HAL_UART_DMAStop+0x118>
 80132ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132cc:	2b22      	cmp	r3, #34	@ 0x22
 80132ce:	d135      	bne.n	801333c <HAL_UART_DMAStop+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132d0:	f3ef 8310 	mrs	r3, PRIMASK
 80132d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80132d6:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80132d8:	623b      	str	r3, [r7, #32]
 80132da:	2301      	movs	r3, #1
 80132dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f383 8810 	msr	PRIMASK, r3
}
 80132e4:	46c0      	nop			@ (mov r8, r8)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	689a      	ldr	r2, [r3, #8]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2140      	movs	r1, #64	@ 0x40
 80132f2:	438a      	bics	r2, r1
 80132f4:	609a      	str	r2, [r3, #8]
 80132f6:	6a3b      	ldr	r3, [r7, #32]
 80132f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	f383 8810 	msr	PRIMASK, r3
}
 8013300:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013306:	2b00      	cmp	r3, #0
 8013308:	d014      	beq.n	8013334 <HAL_UART_DMAStop+0x110>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801330e:	0018      	movs	r0, r3
 8013310:	f7fa fdaa 	bl	800de68 <HAL_DMA_Abort>
 8013314:	1e03      	subs	r3, r0, #0
 8013316:	d00d      	beq.n	8013334 <HAL_UART_DMAStop+0x110>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801331c:	0018      	movs	r0, r3
 801331e:	f7fa ff2d 	bl	800e17c <HAL_DMA_GetError>
 8013322:	0003      	movs	r3, r0
 8013324:	2b20      	cmp	r3, #32
 8013326:	d105      	bne.n	8013334 <HAL_UART_DMAStop+0x110>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	228c      	movs	r2, #140	@ 0x8c
 801332c:	2110      	movs	r1, #16
 801332e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013330:	2303      	movs	r3, #3
 8013332:	e004      	b.n	801333e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	0018      	movs	r0, r3
 8013338:	f001 fa84 	bl	8014844 <UART_EndRxTransfer>
  }

  return HAL_OK;
 801333c:	2300      	movs	r3, #0
}
 801333e:	0018      	movs	r0, r3
 8013340:	46bd      	mov	sp, r7
 8013342:	b00c      	add	sp, #48	@ 0x30
 8013344:	bd80      	pop	{r7, pc}
	...

08013348 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b092      	sub	sp, #72	@ 0x48
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013350:	f3ef 8310 	mrs	r3, PRIMASK
 8013354:	623b      	str	r3, [r7, #32]
  return(result);
 8013356:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013358:	647b      	str	r3, [r7, #68]	@ 0x44
 801335a:	2301      	movs	r3, #1
 801335c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013360:	f383 8810 	msr	PRIMASK, r3
}
 8013364:	46c0      	nop			@ (mov r8, r8)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	494b      	ldr	r1, [pc, #300]	@ (80134a0 <HAL_UART_AbortReceive+0x158>)
 8013372:	400a      	ands	r2, r1
 8013374:	601a      	str	r2, [r3, #0]
 8013376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013378:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801337c:	f383 8810 	msr	PRIMASK, r3
}
 8013380:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013382:	f3ef 8310 	mrs	r3, PRIMASK
 8013386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8013388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801338a:	643b      	str	r3, [r7, #64]	@ 0x40
 801338c:	2301      	movs	r3, #1
 801338e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013392:	f383 8810 	msr	PRIMASK, r3
}
 8013396:	46c0      	nop			@ (mov r8, r8)
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	689a      	ldr	r2, [r3, #8]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	4940      	ldr	r1, [pc, #256]	@ (80134a4 <HAL_UART_AbortReceive+0x15c>)
 80133a4:	400a      	ands	r2, r1
 80133a6:	609a      	str	r2, [r3, #8]
 80133a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ae:	f383 8810 	msr	PRIMASK, r3
}
 80133b2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d118      	bne.n	80133ee <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133bc:	f3ef 8310 	mrs	r3, PRIMASK
 80133c0:	617b      	str	r3, [r7, #20]
  return(result);
 80133c2:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80133c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133c6:	2301      	movs	r3, #1
 80133c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	f383 8810 	msr	PRIMASK, r3
}
 80133d0:	46c0      	nop			@ (mov r8, r8)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	2110      	movs	r1, #16
 80133de:	438a      	bics	r2, r1
 80133e0:	601a      	str	r2, [r3, #0]
 80133e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	f383 8810 	msr	PRIMASK, r3
}
 80133ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	2240      	movs	r2, #64	@ 0x40
 80133f6:	4013      	ands	r3, r2
 80133f8:	2b40      	cmp	r3, #64	@ 0x40
 80133fa:	d135      	bne.n	8013468 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133fc:	f3ef 8310 	mrs	r3, PRIMASK
 8013400:	60bb      	str	r3, [r7, #8]
  return(result);
 8013402:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013406:	2301      	movs	r3, #1
 8013408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f383 8810 	msr	PRIMASK, r3
}
 8013410:	46c0      	nop			@ (mov r8, r8)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	689a      	ldr	r2, [r3, #8]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2140      	movs	r1, #64	@ 0x40
 801341e:	438a      	bics	r2, r1
 8013420:	609a      	str	r2, [r3, #8]
 8013422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	f383 8810 	msr	PRIMASK, r3
}
 801342c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013432:	2b00      	cmp	r3, #0
 8013434:	d018      	beq.n	8013468 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801343a:	2200      	movs	r2, #0
 801343c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013442:	0018      	movs	r0, r3
 8013444:	f7fa fd10 	bl	800de68 <HAL_DMA_Abort>
 8013448:	1e03      	subs	r3, r0, #0
 801344a:	d00d      	beq.n	8013468 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013450:	0018      	movs	r0, r3
 8013452:	f7fa fe93 	bl	800e17c <HAL_DMA_GetError>
 8013456:	0003      	movs	r3, r0
 8013458:	2b20      	cmp	r3, #32
 801345a:	d105      	bne.n	8013468 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	228c      	movs	r2, #140	@ 0x8c
 8013460:	2110      	movs	r1, #16
 8013462:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013464:	2303      	movs	r3, #3
 8013466:	e017      	b.n	8013498 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	225e      	movs	r2, #94	@ 0x5e
 801346c:	2100      	movs	r1, #0
 801346e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	220f      	movs	r2, #15
 8013476:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	699a      	ldr	r2, [r3, #24]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2108      	movs	r1, #8
 8013484:	430a      	orrs	r2, r1
 8013486:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2288      	movs	r2, #136	@ 0x88
 801348c:	2120      	movs	r1, #32
 801348e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8013496:	2300      	movs	r3, #0
}
 8013498:	0018      	movs	r0, r3
 801349a:	46bd      	mov	sp, r7
 801349c:	b012      	add	sp, #72	@ 0x48
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	fffffedf 	.word	0xfffffedf
 80134a4:	effffffe 	.word	0xeffffffe

080134a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80134a8:	b5b0      	push	{r4, r5, r7, lr}
 80134aa:	b0aa      	sub	sp, #168	@ 0xa8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	69db      	ldr	r3, [r3, #28]
 80134b6:	22a4      	movs	r2, #164	@ 0xa4
 80134b8:	18b9      	adds	r1, r7, r2
 80134ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	20a0      	movs	r0, #160	@ 0xa0
 80134c4:	1839      	adds	r1, r7, r0
 80134c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	249c      	movs	r4, #156	@ 0x9c
 80134d0:	1939      	adds	r1, r7, r4
 80134d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80134d4:	0011      	movs	r1, r2
 80134d6:	18bb      	adds	r3, r7, r2
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4aa0      	ldr	r2, [pc, #640]	@ (801375c <HAL_UART_IRQHandler+0x2b4>)
 80134dc:	4013      	ands	r3, r2
 80134de:	2298      	movs	r2, #152	@ 0x98
 80134e0:	18bd      	adds	r5, r7, r2
 80134e2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80134e4:	18bb      	adds	r3, r7, r2
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d11a      	bne.n	8013522 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80134ec:	187b      	adds	r3, r7, r1
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2220      	movs	r2, #32
 80134f2:	4013      	ands	r3, r2
 80134f4:	d015      	beq.n	8013522 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80134f6:	183b      	adds	r3, r7, r0
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2220      	movs	r2, #32
 80134fc:	4013      	ands	r3, r2
 80134fe:	d105      	bne.n	801350c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013500:	193b      	adds	r3, r7, r4
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	2380      	movs	r3, #128	@ 0x80
 8013506:	055b      	lsls	r3, r3, #21
 8013508:	4013      	ands	r3, r2
 801350a:	d00a      	beq.n	8013522 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013510:	2b00      	cmp	r3, #0
 8013512:	d100      	bne.n	8013516 <HAL_UART_IRQHandler+0x6e>
 8013514:	e2cf      	b.n	8013ab6 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	0010      	movs	r0, r2
 801351e:	4798      	blx	r3
      }
      return;
 8013520:	e2c9      	b.n	8013ab6 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013522:	2398      	movs	r3, #152	@ 0x98
 8013524:	18fb      	adds	r3, r7, r3
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d100      	bne.n	801352e <HAL_UART_IRQHandler+0x86>
 801352c:	e11e      	b.n	801376c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801352e:	239c      	movs	r3, #156	@ 0x9c
 8013530:	18fb      	adds	r3, r7, r3
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	4a8a      	ldr	r2, [pc, #552]	@ (8013760 <HAL_UART_IRQHandler+0x2b8>)
 8013536:	4013      	ands	r3, r2
 8013538:	d106      	bne.n	8013548 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801353a:	23a0      	movs	r3, #160	@ 0xa0
 801353c:	18fb      	adds	r3, r7, r3
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	4a88      	ldr	r2, [pc, #544]	@ (8013764 <HAL_UART_IRQHandler+0x2bc>)
 8013542:	4013      	ands	r3, r2
 8013544:	d100      	bne.n	8013548 <HAL_UART_IRQHandler+0xa0>
 8013546:	e111      	b.n	801376c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013548:	23a4      	movs	r3, #164	@ 0xa4
 801354a:	18fb      	adds	r3, r7, r3
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2201      	movs	r2, #1
 8013550:	4013      	ands	r3, r2
 8013552:	d012      	beq.n	801357a <HAL_UART_IRQHandler+0xd2>
 8013554:	23a0      	movs	r3, #160	@ 0xa0
 8013556:	18fb      	adds	r3, r7, r3
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	2380      	movs	r3, #128	@ 0x80
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	4013      	ands	r3, r2
 8013560:	d00b      	beq.n	801357a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2201      	movs	r2, #1
 8013568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	228c      	movs	r2, #140	@ 0x8c
 801356e:	589b      	ldr	r3, [r3, r2]
 8013570:	2201      	movs	r2, #1
 8013572:	431a      	orrs	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	218c      	movs	r1, #140	@ 0x8c
 8013578:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801357a:	23a4      	movs	r3, #164	@ 0xa4
 801357c:	18fb      	adds	r3, r7, r3
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2202      	movs	r2, #2
 8013582:	4013      	ands	r3, r2
 8013584:	d011      	beq.n	80135aa <HAL_UART_IRQHandler+0x102>
 8013586:	239c      	movs	r3, #156	@ 0x9c
 8013588:	18fb      	adds	r3, r7, r3
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2201      	movs	r2, #1
 801358e:	4013      	ands	r3, r2
 8013590:	d00b      	beq.n	80135aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2202      	movs	r2, #2
 8013598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	228c      	movs	r2, #140	@ 0x8c
 801359e:	589b      	ldr	r3, [r3, r2]
 80135a0:	2204      	movs	r2, #4
 80135a2:	431a      	orrs	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	218c      	movs	r1, #140	@ 0x8c
 80135a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80135aa:	23a4      	movs	r3, #164	@ 0xa4
 80135ac:	18fb      	adds	r3, r7, r3
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2204      	movs	r2, #4
 80135b2:	4013      	ands	r3, r2
 80135b4:	d011      	beq.n	80135da <HAL_UART_IRQHandler+0x132>
 80135b6:	239c      	movs	r3, #156	@ 0x9c
 80135b8:	18fb      	adds	r3, r7, r3
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2201      	movs	r2, #1
 80135be:	4013      	ands	r3, r2
 80135c0:	d00b      	beq.n	80135da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2204      	movs	r2, #4
 80135c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	228c      	movs	r2, #140	@ 0x8c
 80135ce:	589b      	ldr	r3, [r3, r2]
 80135d0:	2202      	movs	r2, #2
 80135d2:	431a      	orrs	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	218c      	movs	r1, #140	@ 0x8c
 80135d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80135da:	23a4      	movs	r3, #164	@ 0xa4
 80135dc:	18fb      	adds	r3, r7, r3
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2208      	movs	r2, #8
 80135e2:	4013      	ands	r3, r2
 80135e4:	d017      	beq.n	8013616 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80135e6:	23a0      	movs	r3, #160	@ 0xa0
 80135e8:	18fb      	adds	r3, r7, r3
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2220      	movs	r2, #32
 80135ee:	4013      	ands	r3, r2
 80135f0:	d105      	bne.n	80135fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80135f2:	239c      	movs	r3, #156	@ 0x9c
 80135f4:	18fb      	adds	r3, r7, r3
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	4a59      	ldr	r2, [pc, #356]	@ (8013760 <HAL_UART_IRQHandler+0x2b8>)
 80135fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80135fc:	d00b      	beq.n	8013616 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2208      	movs	r2, #8
 8013604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	228c      	movs	r2, #140	@ 0x8c
 801360a:	589b      	ldr	r3, [r3, r2]
 801360c:	2208      	movs	r2, #8
 801360e:	431a      	orrs	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	218c      	movs	r1, #140	@ 0x8c
 8013614:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013616:	23a4      	movs	r3, #164	@ 0xa4
 8013618:	18fb      	adds	r3, r7, r3
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	2380      	movs	r3, #128	@ 0x80
 801361e:	011b      	lsls	r3, r3, #4
 8013620:	4013      	ands	r3, r2
 8013622:	d013      	beq.n	801364c <HAL_UART_IRQHandler+0x1a4>
 8013624:	23a0      	movs	r3, #160	@ 0xa0
 8013626:	18fb      	adds	r3, r7, r3
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	2380      	movs	r3, #128	@ 0x80
 801362c:	04db      	lsls	r3, r3, #19
 801362e:	4013      	ands	r3, r2
 8013630:	d00c      	beq.n	801364c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2280      	movs	r2, #128	@ 0x80
 8013638:	0112      	lsls	r2, r2, #4
 801363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	228c      	movs	r2, #140	@ 0x8c
 8013640:	589b      	ldr	r3, [r3, r2]
 8013642:	2220      	movs	r2, #32
 8013644:	431a      	orrs	r2, r3
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	218c      	movs	r1, #140	@ 0x8c
 801364a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	228c      	movs	r2, #140	@ 0x8c
 8013650:	589b      	ldr	r3, [r3, r2]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d100      	bne.n	8013658 <HAL_UART_IRQHandler+0x1b0>
 8013656:	e230      	b.n	8013aba <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013658:	23a4      	movs	r3, #164	@ 0xa4
 801365a:	18fb      	adds	r3, r7, r3
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2220      	movs	r2, #32
 8013660:	4013      	ands	r3, r2
 8013662:	d015      	beq.n	8013690 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013664:	23a0      	movs	r3, #160	@ 0xa0
 8013666:	18fb      	adds	r3, r7, r3
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2220      	movs	r2, #32
 801366c:	4013      	ands	r3, r2
 801366e:	d106      	bne.n	801367e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013670:	239c      	movs	r3, #156	@ 0x9c
 8013672:	18fb      	adds	r3, r7, r3
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	2380      	movs	r3, #128	@ 0x80
 8013678:	055b      	lsls	r3, r3, #21
 801367a:	4013      	ands	r3, r2
 801367c:	d008      	beq.n	8013690 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013682:	2b00      	cmp	r3, #0
 8013684:	d004      	beq.n	8013690 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	0010      	movs	r0, r2
 801368e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	228c      	movs	r2, #140	@ 0x8c
 8013694:	589b      	ldr	r3, [r3, r2]
 8013696:	2194      	movs	r1, #148	@ 0x94
 8013698:	187a      	adds	r2, r7, r1
 801369a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	2240      	movs	r2, #64	@ 0x40
 80136a4:	4013      	ands	r3, r2
 80136a6:	2b40      	cmp	r3, #64	@ 0x40
 80136a8:	d004      	beq.n	80136b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80136aa:	187b      	adds	r3, r7, r1
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2228      	movs	r2, #40	@ 0x28
 80136b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80136b2:	d047      	beq.n	8013744 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	0018      	movs	r0, r3
 80136b8:	f001 f8c4 	bl	8014844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	689b      	ldr	r3, [r3, #8]
 80136c2:	2240      	movs	r2, #64	@ 0x40
 80136c4:	4013      	ands	r3, r2
 80136c6:	2b40      	cmp	r3, #64	@ 0x40
 80136c8:	d137      	bne.n	801373a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136ca:	f3ef 8310 	mrs	r3, PRIMASK
 80136ce:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80136d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136d2:	2090      	movs	r0, #144	@ 0x90
 80136d4:	183a      	adds	r2, r7, r0
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	2301      	movs	r3, #1
 80136da:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80136de:	f383 8810 	msr	PRIMASK, r3
}
 80136e2:	46c0      	nop			@ (mov r8, r8)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	689a      	ldr	r2, [r3, #8]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	2140      	movs	r1, #64	@ 0x40
 80136f0:	438a      	bics	r2, r1
 80136f2:	609a      	str	r2, [r3, #8]
 80136f4:	183b      	adds	r3, r7, r0
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80136fc:	f383 8810 	msr	PRIMASK, r3
}
 8013700:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013706:	2b00      	cmp	r3, #0
 8013708:	d012      	beq.n	8013730 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801370e:	4a16      	ldr	r2, [pc, #88]	@ (8013768 <HAL_UART_IRQHandler+0x2c0>)
 8013710:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013716:	0018      	movs	r0, r3
 8013718:	f7fa fc08 	bl	800df2c <HAL_DMA_Abort_IT>
 801371c:	1e03      	subs	r3, r0, #0
 801371e:	d01a      	beq.n	8013756 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801372a:	0018      	movs	r0, r3
 801372c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801372e:	e012      	b.n	8013756 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	0018      	movs	r0, r3
 8013734:	f7f0 fc6e 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013738:	e00d      	b.n	8013756 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	0018      	movs	r0, r3
 801373e:	f7f0 fc69 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013742:	e008      	b.n	8013756 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	0018      	movs	r0, r3
 8013748:	f7f0 fc64 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	228c      	movs	r2, #140	@ 0x8c
 8013750:	2100      	movs	r1, #0
 8013752:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013754:	e1b1      	b.n	8013aba <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013756:	46c0      	nop			@ (mov r8, r8)
    return;
 8013758:	e1af      	b.n	8013aba <HAL_UART_IRQHandler+0x612>
 801375a:	46c0      	nop			@ (mov r8, r8)
 801375c:	0000080f 	.word	0x0000080f
 8013760:	10000001 	.word	0x10000001
 8013764:	04000120 	.word	0x04000120
 8013768:	08014afb 	.word	0x08014afb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013770:	2b01      	cmp	r3, #1
 8013772:	d000      	beq.n	8013776 <HAL_UART_IRQHandler+0x2ce>
 8013774:	e135      	b.n	80139e2 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013776:	23a4      	movs	r3, #164	@ 0xa4
 8013778:	18fb      	adds	r3, r7, r3
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2210      	movs	r2, #16
 801377e:	4013      	ands	r3, r2
 8013780:	d100      	bne.n	8013784 <HAL_UART_IRQHandler+0x2dc>
 8013782:	e12e      	b.n	80139e2 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013784:	23a0      	movs	r3, #160	@ 0xa0
 8013786:	18fb      	adds	r3, r7, r3
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2210      	movs	r2, #16
 801378c:	4013      	ands	r3, r2
 801378e:	d100      	bne.n	8013792 <HAL_UART_IRQHandler+0x2ea>
 8013790:	e127      	b.n	80139e2 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2210      	movs	r2, #16
 8013798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	2240      	movs	r2, #64	@ 0x40
 80137a2:	4013      	ands	r3, r2
 80137a4:	2b40      	cmp	r3, #64	@ 0x40
 80137a6:	d000      	beq.n	80137aa <HAL_UART_IRQHandler+0x302>
 80137a8:	e09e      	b.n	80138e8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	217e      	movs	r1, #126	@ 0x7e
 80137b4:	187b      	adds	r3, r7, r1
 80137b6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80137b8:	187b      	adds	r3, r7, r1
 80137ba:	881b      	ldrh	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d100      	bne.n	80137c2 <HAL_UART_IRQHandler+0x31a>
 80137c0:	e17d      	b.n	8013abe <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	225c      	movs	r2, #92	@ 0x5c
 80137c6:	5a9b      	ldrh	r3, [r3, r2]
 80137c8:	187a      	adds	r2, r7, r1
 80137ca:	8812      	ldrh	r2, [r2, #0]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d300      	bcc.n	80137d2 <HAL_UART_IRQHandler+0x32a>
 80137d0:	e175      	b.n	8013abe <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	187a      	adds	r2, r7, r1
 80137d6:	215e      	movs	r1, #94	@ 0x5e
 80137d8:	8812      	ldrh	r2, [r2, #0]
 80137da:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2220      	movs	r2, #32
 80137e6:	4013      	ands	r3, r2
 80137e8:	d16f      	bne.n	80138ca <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137ea:	f3ef 8310 	mrs	r3, PRIMASK
 80137ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80137f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80137f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80137f4:	2301      	movs	r3, #1
 80137f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137fa:	f383 8810 	msr	PRIMASK, r3
}
 80137fe:	46c0      	nop			@ (mov r8, r8)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	49b1      	ldr	r1, [pc, #708]	@ (8013ad0 <HAL_UART_IRQHandler+0x628>)
 801380c:	400a      	ands	r2, r1
 801380e:	601a      	str	r2, [r3, #0]
 8013810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013812:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013816:	f383 8810 	msr	PRIMASK, r3
}
 801381a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801381c:	f3ef 8310 	mrs	r3, PRIMASK
 8013820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013824:	677b      	str	r3, [r7, #116]	@ 0x74
 8013826:	2301      	movs	r3, #1
 8013828:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801382c:	f383 8810 	msr	PRIMASK, r3
}
 8013830:	46c0      	nop			@ (mov r8, r8)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	689a      	ldr	r2, [r3, #8]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2101      	movs	r1, #1
 801383e:	438a      	bics	r2, r1
 8013840:	609a      	str	r2, [r3, #8]
 8013842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013844:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013848:	f383 8810 	msr	PRIMASK, r3
}
 801384c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801384e:	f3ef 8310 	mrs	r3, PRIMASK
 8013852:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013856:	673b      	str	r3, [r7, #112]	@ 0x70
 8013858:	2301      	movs	r3, #1
 801385a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801385c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801385e:	f383 8810 	msr	PRIMASK, r3
}
 8013862:	46c0      	nop			@ (mov r8, r8)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	689a      	ldr	r2, [r3, #8]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	2140      	movs	r1, #64	@ 0x40
 8013870:	438a      	bics	r2, r1
 8013872:	609a      	str	r2, [r3, #8]
 8013874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013876:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801387a:	f383 8810 	msr	PRIMASK, r3
}
 801387e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2288      	movs	r2, #136	@ 0x88
 8013884:	2120      	movs	r1, #32
 8013886:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2200      	movs	r2, #0
 801388c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801388e:	f3ef 8310 	mrs	r3, PRIMASK
 8013892:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013898:	2301      	movs	r3, #1
 801389a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801389c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801389e:	f383 8810 	msr	PRIMASK, r3
}
 80138a2:	46c0      	nop			@ (mov r8, r8)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2110      	movs	r1, #16
 80138b0:	438a      	bics	r2, r1
 80138b2:	601a      	str	r2, [r3, #0]
 80138b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80138b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138ba:	f383 8810 	msr	PRIMASK, r3
}
 80138be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80138c4:	0018      	movs	r0, r3
 80138c6:	f7fa facf 	bl	800de68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	225c      	movs	r2, #92	@ 0x5c
 80138ce:	5a9a      	ldrh	r2, [r3, r2]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	215e      	movs	r1, #94	@ 0x5e
 80138d4:	5a5b      	ldrh	r3, [r3, r1]
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	b29a      	uxth	r2, r3
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	0011      	movs	r1, r2
 80138e0:	0018      	movs	r0, r3
 80138e2:	f000 f90b 	bl	8013afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80138e6:	e0ea      	b.n	8013abe <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	225c      	movs	r2, #92	@ 0x5c
 80138ec:	5a99      	ldrh	r1, [r3, r2]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	225e      	movs	r2, #94	@ 0x5e
 80138f2:	5a9b      	ldrh	r3, [r3, r2]
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	208e      	movs	r0, #142	@ 0x8e
 80138f8:	183b      	adds	r3, r7, r0
 80138fa:	1a8a      	subs	r2, r1, r2
 80138fc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	225e      	movs	r2, #94	@ 0x5e
 8013902:	5a9b      	ldrh	r3, [r3, r2]
 8013904:	b29b      	uxth	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d100      	bne.n	801390c <HAL_UART_IRQHandler+0x464>
 801390a:	e0da      	b.n	8013ac2 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 801390c:	183b      	adds	r3, r7, r0
 801390e:	881b      	ldrh	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d100      	bne.n	8013916 <HAL_UART_IRQHandler+0x46e>
 8013914:	e0d5      	b.n	8013ac2 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013916:	f3ef 8310 	mrs	r3, PRIMASK
 801391a:	60fb      	str	r3, [r7, #12]
  return(result);
 801391c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801391e:	2488      	movs	r4, #136	@ 0x88
 8013920:	193a      	adds	r2, r7, r4
 8013922:	6013      	str	r3, [r2, #0]
 8013924:	2301      	movs	r3, #1
 8013926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	f383 8810 	msr	PRIMASK, r3
}
 801392e:	46c0      	nop			@ (mov r8, r8)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	4966      	ldr	r1, [pc, #408]	@ (8013ad4 <HAL_UART_IRQHandler+0x62c>)
 801393c:	400a      	ands	r2, r1
 801393e:	601a      	str	r2, [r3, #0]
 8013940:	193b      	adds	r3, r7, r4
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	f383 8810 	msr	PRIMASK, r3
}
 801394c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801394e:	f3ef 8310 	mrs	r3, PRIMASK
 8013952:	61bb      	str	r3, [r7, #24]
  return(result);
 8013954:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013956:	2484      	movs	r4, #132	@ 0x84
 8013958:	193a      	adds	r2, r7, r4
 801395a:	6013      	str	r3, [r2, #0]
 801395c:	2301      	movs	r3, #1
 801395e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	f383 8810 	msr	PRIMASK, r3
}
 8013966:	46c0      	nop			@ (mov r8, r8)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	689a      	ldr	r2, [r3, #8]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4959      	ldr	r1, [pc, #356]	@ (8013ad8 <HAL_UART_IRQHandler+0x630>)
 8013974:	400a      	ands	r2, r1
 8013976:	609a      	str	r2, [r3, #8]
 8013978:	193b      	adds	r3, r7, r4
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	f383 8810 	msr	PRIMASK, r3
}
 8013984:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2288      	movs	r2, #136	@ 0x88
 801398a:	2120      	movs	r1, #32
 801398c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2200      	movs	r2, #0
 8013992:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2200      	movs	r2, #0
 8013998:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801399a:	f3ef 8310 	mrs	r3, PRIMASK
 801399e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80139a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139a2:	2480      	movs	r4, #128	@ 0x80
 80139a4:	193a      	adds	r2, r7, r4
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	2301      	movs	r3, #1
 80139aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ae:	f383 8810 	msr	PRIMASK, r3
}
 80139b2:	46c0      	nop			@ (mov r8, r8)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	681a      	ldr	r2, [r3, #0]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2110      	movs	r1, #16
 80139c0:	438a      	bics	r2, r1
 80139c2:	601a      	str	r2, [r3, #0]
 80139c4:	193b      	adds	r3, r7, r4
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139cc:	f383 8810 	msr	PRIMASK, r3
}
 80139d0:	46c0      	nop			@ (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80139d2:	183b      	adds	r3, r7, r0
 80139d4:	881a      	ldrh	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	0011      	movs	r1, r2
 80139da:	0018      	movs	r0, r3
 80139dc:	f000 f88e 	bl	8013afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80139e0:	e06f      	b.n	8013ac2 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80139e2:	23a4      	movs	r3, #164	@ 0xa4
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	2380      	movs	r3, #128	@ 0x80
 80139ea:	035b      	lsls	r3, r3, #13
 80139ec:	4013      	ands	r3, r2
 80139ee:	d010      	beq.n	8013a12 <HAL_UART_IRQHandler+0x56a>
 80139f0:	239c      	movs	r3, #156	@ 0x9c
 80139f2:	18fb      	adds	r3, r7, r3
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	2380      	movs	r3, #128	@ 0x80
 80139f8:	03db      	lsls	r3, r3, #15
 80139fa:	4013      	ands	r3, r2
 80139fc:	d009      	beq.n	8013a12 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2280      	movs	r2, #128	@ 0x80
 8013a04:	0352      	lsls	r2, r2, #13
 8013a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	0018      	movs	r0, r3
 8013a0c:	f001 fd08 	bl	8015420 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013a10:	e05a      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013a12:	23a4      	movs	r3, #164	@ 0xa4
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2280      	movs	r2, #128	@ 0x80
 8013a1a:	4013      	ands	r3, r2
 8013a1c:	d016      	beq.n	8013a4c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013a1e:	23a0      	movs	r3, #160	@ 0xa0
 8013a20:	18fb      	adds	r3, r7, r3
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2280      	movs	r2, #128	@ 0x80
 8013a26:	4013      	ands	r3, r2
 8013a28:	d106      	bne.n	8013a38 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013a2a:	239c      	movs	r3, #156	@ 0x9c
 8013a2c:	18fb      	adds	r3, r7, r3
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	2380      	movs	r3, #128	@ 0x80
 8013a32:	041b      	lsls	r3, r3, #16
 8013a34:	4013      	ands	r3, r2
 8013a36:	d009      	beq.n	8013a4c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d042      	beq.n	8013ac6 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	0010      	movs	r0, r2
 8013a48:	4798      	blx	r3
    }
    return;
 8013a4a:	e03c      	b.n	8013ac6 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013a4c:	23a4      	movs	r3, #164	@ 0xa4
 8013a4e:	18fb      	adds	r3, r7, r3
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2240      	movs	r2, #64	@ 0x40
 8013a54:	4013      	ands	r3, r2
 8013a56:	d00a      	beq.n	8013a6e <HAL_UART_IRQHandler+0x5c6>
 8013a58:	23a0      	movs	r3, #160	@ 0xa0
 8013a5a:	18fb      	adds	r3, r7, r3
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2240      	movs	r2, #64	@ 0x40
 8013a60:	4013      	ands	r3, r2
 8013a62:	d004      	beq.n	8013a6e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	0018      	movs	r0, r3
 8013a68:	f001 f85e 	bl	8014b28 <UART_EndTransmit_IT>
    return;
 8013a6c:	e02c      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013a6e:	23a4      	movs	r3, #164	@ 0xa4
 8013a70:	18fb      	adds	r3, r7, r3
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	2380      	movs	r3, #128	@ 0x80
 8013a76:	041b      	lsls	r3, r3, #16
 8013a78:	4013      	ands	r3, r2
 8013a7a:	d00b      	beq.n	8013a94 <HAL_UART_IRQHandler+0x5ec>
 8013a7c:	23a0      	movs	r3, #160	@ 0xa0
 8013a7e:	18fb      	adds	r3, r7, r3
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	2380      	movs	r3, #128	@ 0x80
 8013a84:	05db      	lsls	r3, r3, #23
 8013a86:	4013      	ands	r3, r2
 8013a88:	d004      	beq.n	8013a94 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	0018      	movs	r0, r3
 8013a8e:	f001 fcd7 	bl	8015440 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013a92:	e019      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013a94:	23a4      	movs	r3, #164	@ 0xa4
 8013a96:	18fb      	adds	r3, r7, r3
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	2380      	movs	r3, #128	@ 0x80
 8013a9c:	045b      	lsls	r3, r3, #17
 8013a9e:	4013      	ands	r3, r2
 8013aa0:	d012      	beq.n	8013ac8 <HAL_UART_IRQHandler+0x620>
 8013aa2:	23a0      	movs	r3, #160	@ 0xa0
 8013aa4:	18fb      	adds	r3, r7, r3
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	da0d      	bge.n	8013ac8 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	0018      	movs	r0, r3
 8013ab0:	f001 fcbe 	bl	8015430 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ab4:	e008      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
      return;
 8013ab6:	46c0      	nop			@ (mov r8, r8)
 8013ab8:	e006      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
    return;
 8013aba:	46c0      	nop			@ (mov r8, r8)
 8013abc:	e004      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
      return;
 8013abe:	46c0      	nop			@ (mov r8, r8)
 8013ac0:	e002      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
      return;
 8013ac2:	46c0      	nop			@ (mov r8, r8)
 8013ac4:	e000      	b.n	8013ac8 <HAL_UART_IRQHandler+0x620>
    return;
 8013ac6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	b02a      	add	sp, #168	@ 0xa8
 8013acc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ace:	46c0      	nop			@ (mov r8, r8)
 8013ad0:	fffffeff 	.word	0xfffffeff
 8013ad4:	fffffedf 	.word	0xfffffedf
 8013ad8:	effffffe 	.word	0xeffffffe

08013adc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013ae4:	46c0      	nop			@ (mov r8, r8)
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	b002      	add	sp, #8
 8013aea:	bd80      	pop	{r7, pc}

08013aec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013af4:	46c0      	nop			@ (mov r8, r8)
 8013af6:	46bd      	mov	sp, r7
 8013af8:	b002      	add	sp, #8
 8013afa:	bd80      	pop	{r7, pc}

08013afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	000a      	movs	r2, r1
 8013b06:	1cbb      	adds	r3, r7, #2
 8013b08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013b0a:	46c0      	nop			@ (mov r8, r8)
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	b002      	add	sp, #8
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013b14:	b5b0      	push	{r4, r5, r7, lr}
 8013b16:	b090      	sub	sp, #64	@ 0x40
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b1c:	231a      	movs	r3, #26
 8013b1e:	2220      	movs	r2, #32
 8013b20:	189b      	adds	r3, r3, r2
 8013b22:	19db      	adds	r3, r3, r7
 8013b24:	2200      	movs	r2, #0
 8013b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b2a:	689a      	ldr	r2, [r3, #8]
 8013b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	431a      	orrs	r2, r3
 8013b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b34:	695b      	ldr	r3, [r3, #20]
 8013b36:	431a      	orrs	r2, r3
 8013b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3a:	69db      	ldr	r3, [r3, #28]
 8013b3c:	4313      	orrs	r3, r2
 8013b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4aaf      	ldr	r2, [pc, #700]	@ (8013e04 <UART_SetConfig+0x2f0>)
 8013b48:	4013      	ands	r3, r2
 8013b4a:	0019      	movs	r1, r3
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b52:	430b      	orrs	r3, r1
 8013b54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	4aaa      	ldr	r2, [pc, #680]	@ (8013e08 <UART_SetConfig+0x2f4>)
 8013b5e:	4013      	ands	r3, r2
 8013b60:	0018      	movs	r0, r3
 8013b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b64:	68d9      	ldr	r1, [r3, #12]
 8013b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	0003      	movs	r3, r0
 8013b6c:	430b      	orrs	r3, r1
 8013b6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b72:	699b      	ldr	r3, [r3, #24]
 8013b74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	4aa4      	ldr	r2, [pc, #656]	@ (8013e0c <UART_SetConfig+0x2f8>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d004      	beq.n	8013b8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b82:	6a1b      	ldr	r3, [r3, #32]
 8013b84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b86:	4313      	orrs	r3, r2
 8013b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	4a9f      	ldr	r2, [pc, #636]	@ (8013e10 <UART_SetConfig+0x2fc>)
 8013b92:	4013      	ands	r3, r2
 8013b94:	0019      	movs	r1, r3
 8013b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b9c:	430b      	orrs	r3, r1
 8013b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ba6:	220f      	movs	r2, #15
 8013ba8:	4393      	bics	r3, r2
 8013baa:	0018      	movs	r0, r3
 8013bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	0003      	movs	r3, r0
 8013bb6:	430b      	orrs	r3, r1
 8013bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4a95      	ldr	r2, [pc, #596]	@ (8013e14 <UART_SetConfig+0x300>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d131      	bne.n	8013c28 <UART_SetConfig+0x114>
 8013bc4:	4b94      	ldr	r3, [pc, #592]	@ (8013e18 <UART_SetConfig+0x304>)
 8013bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bc8:	2203      	movs	r2, #3
 8013bca:	4013      	ands	r3, r2
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	d01d      	beq.n	8013c0c <UART_SetConfig+0xf8>
 8013bd0:	d823      	bhi.n	8013c1a <UART_SetConfig+0x106>
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d00c      	beq.n	8013bf0 <UART_SetConfig+0xdc>
 8013bd6:	d820      	bhi.n	8013c1a <UART_SetConfig+0x106>
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <UART_SetConfig+0xce>
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d00e      	beq.n	8013bfe <UART_SetConfig+0xea>
 8013be0:	e01b      	b.n	8013c1a <UART_SetConfig+0x106>
 8013be2:	231b      	movs	r3, #27
 8013be4:	2220      	movs	r2, #32
 8013be6:	189b      	adds	r3, r3, r2
 8013be8:	19db      	adds	r3, r3, r7
 8013bea:	2200      	movs	r2, #0
 8013bec:	701a      	strb	r2, [r3, #0]
 8013bee:	e0b4      	b.n	8013d5a <UART_SetConfig+0x246>
 8013bf0:	231b      	movs	r3, #27
 8013bf2:	2220      	movs	r2, #32
 8013bf4:	189b      	adds	r3, r3, r2
 8013bf6:	19db      	adds	r3, r3, r7
 8013bf8:	2202      	movs	r2, #2
 8013bfa:	701a      	strb	r2, [r3, #0]
 8013bfc:	e0ad      	b.n	8013d5a <UART_SetConfig+0x246>
 8013bfe:	231b      	movs	r3, #27
 8013c00:	2220      	movs	r2, #32
 8013c02:	189b      	adds	r3, r3, r2
 8013c04:	19db      	adds	r3, r3, r7
 8013c06:	2204      	movs	r2, #4
 8013c08:	701a      	strb	r2, [r3, #0]
 8013c0a:	e0a6      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c0c:	231b      	movs	r3, #27
 8013c0e:	2220      	movs	r2, #32
 8013c10:	189b      	adds	r3, r3, r2
 8013c12:	19db      	adds	r3, r3, r7
 8013c14:	2208      	movs	r2, #8
 8013c16:	701a      	strb	r2, [r3, #0]
 8013c18:	e09f      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c1a:	231b      	movs	r3, #27
 8013c1c:	2220      	movs	r2, #32
 8013c1e:	189b      	adds	r3, r3, r2
 8013c20:	19db      	adds	r3, r3, r7
 8013c22:	2210      	movs	r2, #16
 8013c24:	701a      	strb	r2, [r3, #0]
 8013c26:	e098      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	4a7b      	ldr	r2, [pc, #492]	@ (8013e1c <UART_SetConfig+0x308>)
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d131      	bne.n	8013c96 <UART_SetConfig+0x182>
 8013c32:	4b79      	ldr	r3, [pc, #484]	@ (8013e18 <UART_SetConfig+0x304>)
 8013c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c36:	220c      	movs	r2, #12
 8013c38:	4013      	ands	r3, r2
 8013c3a:	2b0c      	cmp	r3, #12
 8013c3c:	d01d      	beq.n	8013c7a <UART_SetConfig+0x166>
 8013c3e:	d823      	bhi.n	8013c88 <UART_SetConfig+0x174>
 8013c40:	2b08      	cmp	r3, #8
 8013c42:	d00c      	beq.n	8013c5e <UART_SetConfig+0x14a>
 8013c44:	d820      	bhi.n	8013c88 <UART_SetConfig+0x174>
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d002      	beq.n	8013c50 <UART_SetConfig+0x13c>
 8013c4a:	2b04      	cmp	r3, #4
 8013c4c:	d00e      	beq.n	8013c6c <UART_SetConfig+0x158>
 8013c4e:	e01b      	b.n	8013c88 <UART_SetConfig+0x174>
 8013c50:	231b      	movs	r3, #27
 8013c52:	2220      	movs	r2, #32
 8013c54:	189b      	adds	r3, r3, r2
 8013c56:	19db      	adds	r3, r3, r7
 8013c58:	2200      	movs	r2, #0
 8013c5a:	701a      	strb	r2, [r3, #0]
 8013c5c:	e07d      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c5e:	231b      	movs	r3, #27
 8013c60:	2220      	movs	r2, #32
 8013c62:	189b      	adds	r3, r3, r2
 8013c64:	19db      	adds	r3, r3, r7
 8013c66:	2202      	movs	r2, #2
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	e076      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c6c:	231b      	movs	r3, #27
 8013c6e:	2220      	movs	r2, #32
 8013c70:	189b      	adds	r3, r3, r2
 8013c72:	19db      	adds	r3, r3, r7
 8013c74:	2204      	movs	r2, #4
 8013c76:	701a      	strb	r2, [r3, #0]
 8013c78:	e06f      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c7a:	231b      	movs	r3, #27
 8013c7c:	2220      	movs	r2, #32
 8013c7e:	189b      	adds	r3, r3, r2
 8013c80:	19db      	adds	r3, r3, r7
 8013c82:	2208      	movs	r2, #8
 8013c84:	701a      	strb	r2, [r3, #0]
 8013c86:	e068      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c88:	231b      	movs	r3, #27
 8013c8a:	2220      	movs	r2, #32
 8013c8c:	189b      	adds	r3, r3, r2
 8013c8e:	19db      	adds	r3, r3, r7
 8013c90:	2210      	movs	r2, #16
 8013c92:	701a      	strb	r2, [r3, #0]
 8013c94:	e061      	b.n	8013d5a <UART_SetConfig+0x246>
 8013c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4a61      	ldr	r2, [pc, #388]	@ (8013e20 <UART_SetConfig+0x30c>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d106      	bne.n	8013cae <UART_SetConfig+0x19a>
 8013ca0:	231b      	movs	r3, #27
 8013ca2:	2220      	movs	r2, #32
 8013ca4:	189b      	adds	r3, r3, r2
 8013ca6:	19db      	adds	r3, r3, r7
 8013ca8:	2200      	movs	r2, #0
 8013caa:	701a      	strb	r2, [r3, #0]
 8013cac:	e055      	b.n	8013d5a <UART_SetConfig+0x246>
 8013cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8013e24 <UART_SetConfig+0x310>)
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d106      	bne.n	8013cc6 <UART_SetConfig+0x1b2>
 8013cb8:	231b      	movs	r3, #27
 8013cba:	2220      	movs	r2, #32
 8013cbc:	189b      	adds	r3, r3, r2
 8013cbe:	19db      	adds	r3, r3, r7
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	701a      	strb	r2, [r3, #0]
 8013cc4:	e049      	b.n	8013d5a <UART_SetConfig+0x246>
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4a50      	ldr	r2, [pc, #320]	@ (8013e0c <UART_SetConfig+0x2f8>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d13e      	bne.n	8013d4e <UART_SetConfig+0x23a>
 8013cd0:	4b51      	ldr	r3, [pc, #324]	@ (8013e18 <UART_SetConfig+0x304>)
 8013cd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013cd4:	23c0      	movs	r3, #192	@ 0xc0
 8013cd6:	011b      	lsls	r3, r3, #4
 8013cd8:	4013      	ands	r3, r2
 8013cda:	22c0      	movs	r2, #192	@ 0xc0
 8013cdc:	0112      	lsls	r2, r2, #4
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d027      	beq.n	8013d32 <UART_SetConfig+0x21e>
 8013ce2:	22c0      	movs	r2, #192	@ 0xc0
 8013ce4:	0112      	lsls	r2, r2, #4
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	d82a      	bhi.n	8013d40 <UART_SetConfig+0x22c>
 8013cea:	2280      	movs	r2, #128	@ 0x80
 8013cec:	0112      	lsls	r2, r2, #4
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	d011      	beq.n	8013d16 <UART_SetConfig+0x202>
 8013cf2:	2280      	movs	r2, #128	@ 0x80
 8013cf4:	0112      	lsls	r2, r2, #4
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d822      	bhi.n	8013d40 <UART_SetConfig+0x22c>
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d004      	beq.n	8013d08 <UART_SetConfig+0x1f4>
 8013cfe:	2280      	movs	r2, #128	@ 0x80
 8013d00:	00d2      	lsls	r2, r2, #3
 8013d02:	4293      	cmp	r3, r2
 8013d04:	d00e      	beq.n	8013d24 <UART_SetConfig+0x210>
 8013d06:	e01b      	b.n	8013d40 <UART_SetConfig+0x22c>
 8013d08:	231b      	movs	r3, #27
 8013d0a:	2220      	movs	r2, #32
 8013d0c:	189b      	adds	r3, r3, r2
 8013d0e:	19db      	adds	r3, r3, r7
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
 8013d14:	e021      	b.n	8013d5a <UART_SetConfig+0x246>
 8013d16:	231b      	movs	r3, #27
 8013d18:	2220      	movs	r2, #32
 8013d1a:	189b      	adds	r3, r3, r2
 8013d1c:	19db      	adds	r3, r3, r7
 8013d1e:	2202      	movs	r2, #2
 8013d20:	701a      	strb	r2, [r3, #0]
 8013d22:	e01a      	b.n	8013d5a <UART_SetConfig+0x246>
 8013d24:	231b      	movs	r3, #27
 8013d26:	2220      	movs	r2, #32
 8013d28:	189b      	adds	r3, r3, r2
 8013d2a:	19db      	adds	r3, r3, r7
 8013d2c:	2204      	movs	r2, #4
 8013d2e:	701a      	strb	r2, [r3, #0]
 8013d30:	e013      	b.n	8013d5a <UART_SetConfig+0x246>
 8013d32:	231b      	movs	r3, #27
 8013d34:	2220      	movs	r2, #32
 8013d36:	189b      	adds	r3, r3, r2
 8013d38:	19db      	adds	r3, r3, r7
 8013d3a:	2208      	movs	r2, #8
 8013d3c:	701a      	strb	r2, [r3, #0]
 8013d3e:	e00c      	b.n	8013d5a <UART_SetConfig+0x246>
 8013d40:	231b      	movs	r3, #27
 8013d42:	2220      	movs	r2, #32
 8013d44:	189b      	adds	r3, r3, r2
 8013d46:	19db      	adds	r3, r3, r7
 8013d48:	2210      	movs	r2, #16
 8013d4a:	701a      	strb	r2, [r3, #0]
 8013d4c:	e005      	b.n	8013d5a <UART_SetConfig+0x246>
 8013d4e:	231b      	movs	r3, #27
 8013d50:	2220      	movs	r2, #32
 8013d52:	189b      	adds	r3, r3, r2
 8013d54:	19db      	adds	r3, r3, r7
 8013d56:	2210      	movs	r2, #16
 8013d58:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8013e0c <UART_SetConfig+0x2f8>)
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d000      	beq.n	8013d66 <UART_SetConfig+0x252>
 8013d64:	e0a9      	b.n	8013eba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013d66:	231b      	movs	r3, #27
 8013d68:	2220      	movs	r2, #32
 8013d6a:	189b      	adds	r3, r3, r2
 8013d6c:	19db      	adds	r3, r3, r7
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	2b08      	cmp	r3, #8
 8013d72:	d015      	beq.n	8013da0 <UART_SetConfig+0x28c>
 8013d74:	dc18      	bgt.n	8013da8 <UART_SetConfig+0x294>
 8013d76:	2b04      	cmp	r3, #4
 8013d78:	d00d      	beq.n	8013d96 <UART_SetConfig+0x282>
 8013d7a:	dc15      	bgt.n	8013da8 <UART_SetConfig+0x294>
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <UART_SetConfig+0x272>
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d005      	beq.n	8013d90 <UART_SetConfig+0x27c>
 8013d84:	e010      	b.n	8013da8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013d86:	f7fd f823 	bl	8010dd0 <HAL_RCC_GetPCLK1Freq>
 8013d8a:	0003      	movs	r3, r0
 8013d8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013d8e:	e014      	b.n	8013dba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013d90:	4b25      	ldr	r3, [pc, #148]	@ (8013e28 <UART_SetConfig+0x314>)
 8013d92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013d94:	e011      	b.n	8013dba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013d96:	f7fc ff8f 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8013d9a:	0003      	movs	r3, r0
 8013d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013d9e:	e00c      	b.n	8013dba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013da0:	2380      	movs	r3, #128	@ 0x80
 8013da2:	021b      	lsls	r3, r3, #8
 8013da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013da6:	e008      	b.n	8013dba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8013da8:	2300      	movs	r3, #0
 8013daa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8013dac:	231a      	movs	r3, #26
 8013dae:	2220      	movs	r2, #32
 8013db0:	189b      	adds	r3, r3, r2
 8013db2:	19db      	adds	r3, r3, r7
 8013db4:	2201      	movs	r2, #1
 8013db6:	701a      	strb	r2, [r3, #0]
        break;
 8013db8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d100      	bne.n	8013dc2 <UART_SetConfig+0x2ae>
 8013dc0:	e14b      	b.n	801405a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013dc6:	4b19      	ldr	r3, [pc, #100]	@ (8013e2c <UART_SetConfig+0x318>)
 8013dc8:	0052      	lsls	r2, r2, #1
 8013dca:	5ad3      	ldrh	r3, [r2, r3]
 8013dcc:	0019      	movs	r1, r3
 8013dce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013dd0:	f7ec f9aa 	bl	8000128 <__udivsi3>
 8013dd4:	0003      	movs	r3, r0
 8013dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	0013      	movs	r3, r2
 8013dde:	005b      	lsls	r3, r3, #1
 8013de0:	189b      	adds	r3, r3, r2
 8013de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d305      	bcc.n	8013df4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d91d      	bls.n	8013e30 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8013df4:	231a      	movs	r3, #26
 8013df6:	2220      	movs	r2, #32
 8013df8:	189b      	adds	r3, r3, r2
 8013dfa:	19db      	adds	r3, r3, r7
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	701a      	strb	r2, [r3, #0]
 8013e00:	e12b      	b.n	801405a <UART_SetConfig+0x546>
 8013e02:	46c0      	nop			@ (mov r8, r8)
 8013e04:	cfff69f3 	.word	0xcfff69f3
 8013e08:	ffffcfff 	.word	0xffffcfff
 8013e0c:	40008000 	.word	0x40008000
 8013e10:	11fff4ff 	.word	0x11fff4ff
 8013e14:	40013800 	.word	0x40013800
 8013e18:	40021000 	.word	0x40021000
 8013e1c:	40004400 	.word	0x40004400
 8013e20:	40004800 	.word	0x40004800
 8013e24:	40004c00 	.word	0x40004c00
 8013e28:	00f42400 	.word	0x00f42400
 8013e2c:	080195e0 	.word	0x080195e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e32:	61bb      	str	r3, [r7, #24]
 8013e34:	2300      	movs	r3, #0
 8013e36:	61fb      	str	r3, [r7, #28]
 8013e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e3c:	4b92      	ldr	r3, [pc, #584]	@ (8014088 <UART_SetConfig+0x574>)
 8013e3e:	0052      	lsls	r2, r2, #1
 8013e40:	5ad3      	ldrh	r3, [r2, r3]
 8013e42:	613b      	str	r3, [r7, #16]
 8013e44:	2300      	movs	r3, #0
 8013e46:	617b      	str	r3, [r7, #20]
 8013e48:	693a      	ldr	r2, [r7, #16]
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	69b8      	ldr	r0, [r7, #24]
 8013e4e:	69f9      	ldr	r1, [r7, #28]
 8013e50:	f7ec fb58 	bl	8000504 <__aeabi_uldivmod>
 8013e54:	0002      	movs	r2, r0
 8013e56:	000b      	movs	r3, r1
 8013e58:	0e11      	lsrs	r1, r2, #24
 8013e5a:	021d      	lsls	r5, r3, #8
 8013e5c:	430d      	orrs	r5, r1
 8013e5e:	0214      	lsls	r4, r2, #8
 8013e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	085b      	lsrs	r3, r3, #1
 8013e66:	60bb      	str	r3, [r7, #8]
 8013e68:	2300      	movs	r3, #0
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	68b8      	ldr	r0, [r7, #8]
 8013e6e:	68f9      	ldr	r1, [r7, #12]
 8013e70:	1900      	adds	r0, r0, r4
 8013e72:	4169      	adcs	r1, r5
 8013e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	603b      	str	r3, [r7, #0]
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	607b      	str	r3, [r7, #4]
 8013e7e:	683a      	ldr	r2, [r7, #0]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f7ec fb3f 	bl	8000504 <__aeabi_uldivmod>
 8013e86:	0002      	movs	r2, r0
 8013e88:	000b      	movs	r3, r1
 8013e8a:	0013      	movs	r3, r2
 8013e8c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e90:	23c0      	movs	r3, #192	@ 0xc0
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d309      	bcc.n	8013eac <UART_SetConfig+0x398>
 8013e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e9a:	2380      	movs	r3, #128	@ 0x80
 8013e9c:	035b      	lsls	r3, r3, #13
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d204      	bcs.n	8013eac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ea8:	60da      	str	r2, [r3, #12]
 8013eaa:	e0d6      	b.n	801405a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8013eac:	231a      	movs	r3, #26
 8013eae:	2220      	movs	r2, #32
 8013eb0:	189b      	adds	r3, r3, r2
 8013eb2:	19db      	adds	r3, r3, r7
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	701a      	strb	r2, [r3, #0]
 8013eb8:	e0cf      	b.n	801405a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebc:	69da      	ldr	r2, [r3, #28]
 8013ebe:	2380      	movs	r3, #128	@ 0x80
 8013ec0:	021b      	lsls	r3, r3, #8
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d000      	beq.n	8013ec8 <UART_SetConfig+0x3b4>
 8013ec6:	e070      	b.n	8013faa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8013ec8:	231b      	movs	r3, #27
 8013eca:	2220      	movs	r2, #32
 8013ecc:	189b      	adds	r3, r3, r2
 8013ece:	19db      	adds	r3, r3, r7
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	2b08      	cmp	r3, #8
 8013ed4:	d015      	beq.n	8013f02 <UART_SetConfig+0x3ee>
 8013ed6:	dc18      	bgt.n	8013f0a <UART_SetConfig+0x3f6>
 8013ed8:	2b04      	cmp	r3, #4
 8013eda:	d00d      	beq.n	8013ef8 <UART_SetConfig+0x3e4>
 8013edc:	dc15      	bgt.n	8013f0a <UART_SetConfig+0x3f6>
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d002      	beq.n	8013ee8 <UART_SetConfig+0x3d4>
 8013ee2:	2b02      	cmp	r3, #2
 8013ee4:	d005      	beq.n	8013ef2 <UART_SetConfig+0x3de>
 8013ee6:	e010      	b.n	8013f0a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ee8:	f7fc ff72 	bl	8010dd0 <HAL_RCC_GetPCLK1Freq>
 8013eec:	0003      	movs	r3, r0
 8013eee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013ef0:	e014      	b.n	8013f1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013ef2:	4b66      	ldr	r3, [pc, #408]	@ (801408c <UART_SetConfig+0x578>)
 8013ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013ef6:	e011      	b.n	8013f1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013ef8:	f7fc fede 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8013efc:	0003      	movs	r3, r0
 8013efe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013f00:	e00c      	b.n	8013f1c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013f02:	2380      	movs	r3, #128	@ 0x80
 8013f04:	021b      	lsls	r3, r3, #8
 8013f06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013f08:	e008      	b.n	8013f1c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8013f0e:	231a      	movs	r3, #26
 8013f10:	2220      	movs	r2, #32
 8013f12:	189b      	adds	r3, r3, r2
 8013f14:	19db      	adds	r3, r3, r7
 8013f16:	2201      	movs	r2, #1
 8013f18:	701a      	strb	r2, [r3, #0]
        break;
 8013f1a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d100      	bne.n	8013f24 <UART_SetConfig+0x410>
 8013f22:	e09a      	b.n	801405a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f28:	4b57      	ldr	r3, [pc, #348]	@ (8014088 <UART_SetConfig+0x574>)
 8013f2a:	0052      	lsls	r2, r2, #1
 8013f2c:	5ad3      	ldrh	r3, [r2, r3]
 8013f2e:	0019      	movs	r1, r3
 8013f30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013f32:	f7ec f8f9 	bl	8000128 <__udivsi3>
 8013f36:	0003      	movs	r3, r0
 8013f38:	005a      	lsls	r2, r3, #1
 8013f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	085b      	lsrs	r3, r3, #1
 8013f40:	18d2      	adds	r2, r2, r3
 8013f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	0019      	movs	r1, r3
 8013f48:	0010      	movs	r0, r2
 8013f4a:	f7ec f8ed 	bl	8000128 <__udivsi3>
 8013f4e:	0003      	movs	r3, r0
 8013f50:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f54:	2b0f      	cmp	r3, #15
 8013f56:	d921      	bls.n	8013f9c <UART_SetConfig+0x488>
 8013f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f5a:	2380      	movs	r3, #128	@ 0x80
 8013f5c:	025b      	lsls	r3, r3, #9
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d21c      	bcs.n	8013f9c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	200e      	movs	r0, #14
 8013f68:	2420      	movs	r4, #32
 8013f6a:	1903      	adds	r3, r0, r4
 8013f6c:	19db      	adds	r3, r3, r7
 8013f6e:	210f      	movs	r1, #15
 8013f70:	438a      	bics	r2, r1
 8013f72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f76:	085b      	lsrs	r3, r3, #1
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	2207      	movs	r2, #7
 8013f7c:	4013      	ands	r3, r2
 8013f7e:	b299      	uxth	r1, r3
 8013f80:	1903      	adds	r3, r0, r4
 8013f82:	19db      	adds	r3, r3, r7
 8013f84:	1902      	adds	r2, r0, r4
 8013f86:	19d2      	adds	r2, r2, r7
 8013f88:	8812      	ldrh	r2, [r2, #0]
 8013f8a:	430a      	orrs	r2, r1
 8013f8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8013f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	1902      	adds	r2, r0, r4
 8013f94:	19d2      	adds	r2, r2, r7
 8013f96:	8812      	ldrh	r2, [r2, #0]
 8013f98:	60da      	str	r2, [r3, #12]
 8013f9a:	e05e      	b.n	801405a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8013f9c:	231a      	movs	r3, #26
 8013f9e:	2220      	movs	r2, #32
 8013fa0:	189b      	adds	r3, r3, r2
 8013fa2:	19db      	adds	r3, r3, r7
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	701a      	strb	r2, [r3, #0]
 8013fa8:	e057      	b.n	801405a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013faa:	231b      	movs	r3, #27
 8013fac:	2220      	movs	r2, #32
 8013fae:	189b      	adds	r3, r3, r2
 8013fb0:	19db      	adds	r3, r3, r7
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	2b08      	cmp	r3, #8
 8013fb6:	d015      	beq.n	8013fe4 <UART_SetConfig+0x4d0>
 8013fb8:	dc18      	bgt.n	8013fec <UART_SetConfig+0x4d8>
 8013fba:	2b04      	cmp	r3, #4
 8013fbc:	d00d      	beq.n	8013fda <UART_SetConfig+0x4c6>
 8013fbe:	dc15      	bgt.n	8013fec <UART_SetConfig+0x4d8>
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d002      	beq.n	8013fca <UART_SetConfig+0x4b6>
 8013fc4:	2b02      	cmp	r3, #2
 8013fc6:	d005      	beq.n	8013fd4 <UART_SetConfig+0x4c0>
 8013fc8:	e010      	b.n	8013fec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013fca:	f7fc ff01 	bl	8010dd0 <HAL_RCC_GetPCLK1Freq>
 8013fce:	0003      	movs	r3, r0
 8013fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013fd2:	e014      	b.n	8013ffe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013fd4:	4b2d      	ldr	r3, [pc, #180]	@ (801408c <UART_SetConfig+0x578>)
 8013fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013fd8:	e011      	b.n	8013ffe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013fda:	f7fc fe6d 	bl	8010cb8 <HAL_RCC_GetSysClockFreq>
 8013fde:	0003      	movs	r3, r0
 8013fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013fe2:	e00c      	b.n	8013ffe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013fe4:	2380      	movs	r3, #128	@ 0x80
 8013fe6:	021b      	lsls	r3, r3, #8
 8013fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8013fea:	e008      	b.n	8013ffe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8013fec:	2300      	movs	r3, #0
 8013fee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8013ff0:	231a      	movs	r3, #26
 8013ff2:	2220      	movs	r2, #32
 8013ff4:	189b      	adds	r3, r3, r2
 8013ff6:	19db      	adds	r3, r3, r7
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	701a      	strb	r2, [r3, #0]
        break;
 8013ffc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8013ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014000:	2b00      	cmp	r3, #0
 8014002:	d02a      	beq.n	801405a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014008:	4b1f      	ldr	r3, [pc, #124]	@ (8014088 <UART_SetConfig+0x574>)
 801400a:	0052      	lsls	r2, r2, #1
 801400c:	5ad3      	ldrh	r3, [r2, r3]
 801400e:	0019      	movs	r1, r3
 8014010:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014012:	f7ec f889 	bl	8000128 <__udivsi3>
 8014016:	0003      	movs	r3, r0
 8014018:	001a      	movs	r2, r3
 801401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	085b      	lsrs	r3, r3, #1
 8014020:	18d2      	adds	r2, r2, r3
 8014022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	0019      	movs	r1, r3
 8014028:	0010      	movs	r0, r2
 801402a:	f7ec f87d 	bl	8000128 <__udivsi3>
 801402e:	0003      	movs	r3, r0
 8014030:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014034:	2b0f      	cmp	r3, #15
 8014036:	d90a      	bls.n	801404e <UART_SetConfig+0x53a>
 8014038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801403a:	2380      	movs	r3, #128	@ 0x80
 801403c:	025b      	lsls	r3, r3, #9
 801403e:	429a      	cmp	r2, r3
 8014040:	d205      	bcs.n	801404e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014044:	b29a      	uxth	r2, r3
 8014046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	60da      	str	r2, [r3, #12]
 801404c:	e005      	b.n	801405a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 801404e:	231a      	movs	r3, #26
 8014050:	2220      	movs	r2, #32
 8014052:	189b      	adds	r3, r3, r2
 8014054:	19db      	adds	r3, r3, r7
 8014056:	2201      	movs	r2, #1
 8014058:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801405c:	226a      	movs	r2, #106	@ 0x6a
 801405e:	2101      	movs	r1, #1
 8014060:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8014062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014064:	2268      	movs	r2, #104	@ 0x68
 8014066:	2101      	movs	r1, #1
 8014068:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801406c:	2200      	movs	r2, #0
 801406e:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8014070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014072:	2200      	movs	r2, #0
 8014074:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8014076:	231a      	movs	r3, #26
 8014078:	2220      	movs	r2, #32
 801407a:	189b      	adds	r3, r3, r2
 801407c:	19db      	adds	r3, r3, r7
 801407e:	781b      	ldrb	r3, [r3, #0]
}
 8014080:	0018      	movs	r0, r3
 8014082:	46bd      	mov	sp, r7
 8014084:	b010      	add	sp, #64	@ 0x40
 8014086:	bdb0      	pop	{r4, r5, r7, pc}
 8014088:	080195e0 	.word	0x080195e0
 801408c:	00f42400 	.word	0x00f42400

08014090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801409c:	2201      	movs	r2, #1
 801409e:	4013      	ands	r3, r2
 80140a0:	d00b      	beq.n	80140ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	4a4a      	ldr	r2, [pc, #296]	@ (80141d4 <UART_AdvFeatureConfig+0x144>)
 80140aa:	4013      	ands	r3, r2
 80140ac:	0019      	movs	r1, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	430a      	orrs	r2, r1
 80140b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140be:	2202      	movs	r2, #2
 80140c0:	4013      	ands	r3, r2
 80140c2:	d00b      	beq.n	80140dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	4a43      	ldr	r2, [pc, #268]	@ (80141d8 <UART_AdvFeatureConfig+0x148>)
 80140cc:	4013      	ands	r3, r2
 80140ce:	0019      	movs	r1, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	430a      	orrs	r2, r1
 80140da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140e0:	2204      	movs	r2, #4
 80140e2:	4013      	ands	r3, r2
 80140e4:	d00b      	beq.n	80140fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	4a3b      	ldr	r2, [pc, #236]	@ (80141dc <UART_AdvFeatureConfig+0x14c>)
 80140ee:	4013      	ands	r3, r2
 80140f0:	0019      	movs	r1, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	430a      	orrs	r2, r1
 80140fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014102:	2208      	movs	r2, #8
 8014104:	4013      	ands	r3, r2
 8014106:	d00b      	beq.n	8014120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	4a34      	ldr	r2, [pc, #208]	@ (80141e0 <UART_AdvFeatureConfig+0x150>)
 8014110:	4013      	ands	r3, r2
 8014112:	0019      	movs	r1, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	430a      	orrs	r2, r1
 801411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014124:	2210      	movs	r2, #16
 8014126:	4013      	ands	r3, r2
 8014128:	d00b      	beq.n	8014142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	689b      	ldr	r3, [r3, #8]
 8014130:	4a2c      	ldr	r2, [pc, #176]	@ (80141e4 <UART_AdvFeatureConfig+0x154>)
 8014132:	4013      	ands	r3, r2
 8014134:	0019      	movs	r1, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	430a      	orrs	r2, r1
 8014140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014146:	2220      	movs	r2, #32
 8014148:	4013      	ands	r3, r2
 801414a:	d00b      	beq.n	8014164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	4a25      	ldr	r2, [pc, #148]	@ (80141e8 <UART_AdvFeatureConfig+0x158>)
 8014154:	4013      	ands	r3, r2
 8014156:	0019      	movs	r1, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	430a      	orrs	r2, r1
 8014162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014168:	2240      	movs	r2, #64	@ 0x40
 801416a:	4013      	ands	r3, r2
 801416c:	d01d      	beq.n	80141aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	4a1d      	ldr	r2, [pc, #116]	@ (80141ec <UART_AdvFeatureConfig+0x15c>)
 8014176:	4013      	ands	r3, r2
 8014178:	0019      	movs	r1, r3
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	430a      	orrs	r2, r1
 8014184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801418a:	2380      	movs	r3, #128	@ 0x80
 801418c:	035b      	lsls	r3, r3, #13
 801418e:	429a      	cmp	r2, r3
 8014190:	d10b      	bne.n	80141aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	4a15      	ldr	r2, [pc, #84]	@ (80141f0 <UART_AdvFeatureConfig+0x160>)
 801419a:	4013      	ands	r3, r2
 801419c:	0019      	movs	r1, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	430a      	orrs	r2, r1
 80141a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141ae:	2280      	movs	r2, #128	@ 0x80
 80141b0:	4013      	ands	r3, r2
 80141b2:	d00b      	beq.n	80141cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	4a0e      	ldr	r2, [pc, #56]	@ (80141f4 <UART_AdvFeatureConfig+0x164>)
 80141bc:	4013      	ands	r3, r2
 80141be:	0019      	movs	r1, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	430a      	orrs	r2, r1
 80141ca:	605a      	str	r2, [r3, #4]
  }
}
 80141cc:	46c0      	nop			@ (mov r8, r8)
 80141ce:	46bd      	mov	sp, r7
 80141d0:	b002      	add	sp, #8
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	fffdffff 	.word	0xfffdffff
 80141d8:	fffeffff 	.word	0xfffeffff
 80141dc:	fffbffff 	.word	0xfffbffff
 80141e0:	ffff7fff 	.word	0xffff7fff
 80141e4:	ffffefff 	.word	0xffffefff
 80141e8:	ffffdfff 	.word	0xffffdfff
 80141ec:	ffefffff 	.word	0xffefffff
 80141f0:	ff9fffff 	.word	0xff9fffff
 80141f4:	fff7ffff 	.word	0xfff7ffff

080141f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af02      	add	r7, sp, #8
 80141fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	228c      	movs	r2, #140	@ 0x8c
 8014204:	2100      	movs	r1, #0
 8014206:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014208:	f7f9 fbfc 	bl	800da04 <HAL_GetTick>
 801420c:	0003      	movs	r3, r0
 801420e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2208      	movs	r2, #8
 8014218:	4013      	ands	r3, r2
 801421a:	2b08      	cmp	r3, #8
 801421c:	d10c      	bne.n	8014238 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	2280      	movs	r2, #128	@ 0x80
 8014222:	0391      	lsls	r1, r2, #14
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	4a18      	ldr	r2, [pc, #96]	@ (8014288 <UART_CheckIdleState+0x90>)
 8014228:	9200      	str	r2, [sp, #0]
 801422a:	2200      	movs	r2, #0
 801422c:	f000 f82e 	bl	801428c <UART_WaitOnFlagUntilTimeout>
 8014230:	1e03      	subs	r3, r0, #0
 8014232:	d001      	beq.n	8014238 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014234:	2303      	movs	r3, #3
 8014236:	e023      	b.n	8014280 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	2204      	movs	r2, #4
 8014240:	4013      	ands	r3, r2
 8014242:	2b04      	cmp	r3, #4
 8014244:	d10c      	bne.n	8014260 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2280      	movs	r2, #128	@ 0x80
 801424a:	03d1      	lsls	r1, r2, #15
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	4a0e      	ldr	r2, [pc, #56]	@ (8014288 <UART_CheckIdleState+0x90>)
 8014250:	9200      	str	r2, [sp, #0]
 8014252:	2200      	movs	r2, #0
 8014254:	f000 f81a 	bl	801428c <UART_WaitOnFlagUntilTimeout>
 8014258:	1e03      	subs	r3, r0, #0
 801425a:	d001      	beq.n	8014260 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801425c:	2303      	movs	r3, #3
 801425e:	e00f      	b.n	8014280 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2284      	movs	r2, #132	@ 0x84
 8014264:	2120      	movs	r1, #32
 8014266:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2288      	movs	r2, #136	@ 0x88
 801426c:	2120      	movs	r1, #32
 801426e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2280      	movs	r2, #128	@ 0x80
 801427a:	2100      	movs	r1, #0
 801427c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801427e:	2300      	movs	r3, #0
}
 8014280:	0018      	movs	r0, r3
 8014282:	46bd      	mov	sp, r7
 8014284:	b004      	add	sp, #16
 8014286:	bd80      	pop	{r7, pc}
 8014288:	01ffffff 	.word	0x01ffffff

0801428c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b094      	sub	sp, #80	@ 0x50
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	603b      	str	r3, [r7, #0]
 8014298:	1dfb      	adds	r3, r7, #7
 801429a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801429c:	e0a7      	b.n	80143ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801429e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142a0:	3301      	adds	r3, #1
 80142a2:	d100      	bne.n	80142a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80142a4:	e0a3      	b.n	80143ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80142a6:	f7f9 fbad 	bl	800da04 <HAL_GetTick>
 80142aa:	0002      	movs	r2, r0
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d302      	bcc.n	80142bc <UART_WaitOnFlagUntilTimeout+0x30>
 80142b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d13f      	bne.n	801433c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80142bc:	f3ef 8310 	mrs	r3, PRIMASK
 80142c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80142c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80142c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80142c6:	2301      	movs	r3, #1
 80142c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	f383 8810 	msr	PRIMASK, r3
}
 80142d0:	46c0      	nop			@ (mov r8, r8)
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	494e      	ldr	r1, [pc, #312]	@ (8014418 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80142de:	400a      	ands	r2, r1
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142e4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e8:	f383 8810 	msr	PRIMASK, r3
}
 80142ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80142ee:	f3ef 8310 	mrs	r3, PRIMASK
 80142f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80142f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80142f8:	2301      	movs	r3, #1
 80142fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142fe:	f383 8810 	msr	PRIMASK, r3
}
 8014302:	46c0      	nop			@ (mov r8, r8)
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	689a      	ldr	r2, [r3, #8]
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2101      	movs	r1, #1
 8014310:	438a      	bics	r2, r1
 8014312:	609a      	str	r2, [r3, #8]
 8014314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801431a:	f383 8810 	msr	PRIMASK, r3
}
 801431e:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2284      	movs	r2, #132	@ 0x84
 8014324:	2120      	movs	r1, #32
 8014326:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	2288      	movs	r2, #136	@ 0x88
 801432c:	2120      	movs	r1, #32
 801432e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2280      	movs	r2, #128	@ 0x80
 8014334:	2100      	movs	r1, #0
 8014336:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014338:	2303      	movs	r3, #3
 801433a:	e069      	b.n	8014410 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2204      	movs	r2, #4
 8014344:	4013      	ands	r3, r2
 8014346:	d052      	beq.n	80143ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	69da      	ldr	r2, [r3, #28]
 801434e:	2380      	movs	r3, #128	@ 0x80
 8014350:	011b      	lsls	r3, r3, #4
 8014352:	401a      	ands	r2, r3
 8014354:	2380      	movs	r3, #128	@ 0x80
 8014356:	011b      	lsls	r3, r3, #4
 8014358:	429a      	cmp	r2, r3
 801435a:	d148      	bne.n	80143ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2280      	movs	r2, #128	@ 0x80
 8014362:	0112      	lsls	r2, r2, #4
 8014364:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014366:	f3ef 8310 	mrs	r3, PRIMASK
 801436a:	613b      	str	r3, [r7, #16]
  return(result);
 801436c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014370:	2301      	movs	r3, #1
 8014372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	f383 8810 	msr	PRIMASK, r3
}
 801437a:	46c0      	nop			@ (mov r8, r8)
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4924      	ldr	r1, [pc, #144]	@ (8014418 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8014388:	400a      	ands	r2, r1
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801438e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014390:	69bb      	ldr	r3, [r7, #24]
 8014392:	f383 8810 	msr	PRIMASK, r3
}
 8014396:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014398:	f3ef 8310 	mrs	r3, PRIMASK
 801439c:	61fb      	str	r3, [r7, #28]
  return(result);
 801439e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80143a2:	2301      	movs	r3, #1
 80143a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143a6:	6a3b      	ldr	r3, [r7, #32]
 80143a8:	f383 8810 	msr	PRIMASK, r3
}
 80143ac:	46c0      	nop			@ (mov r8, r8)
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	689a      	ldr	r2, [r3, #8]
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2101      	movs	r1, #1
 80143ba:	438a      	bics	r2, r1
 80143bc:	609a      	str	r2, [r3, #8]
 80143be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143c4:	f383 8810 	msr	PRIMASK, r3
}
 80143c8:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2284      	movs	r2, #132	@ 0x84
 80143ce:	2120      	movs	r1, #32
 80143d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	2288      	movs	r2, #136	@ 0x88
 80143d6:	2120      	movs	r1, #32
 80143d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	228c      	movs	r2, #140	@ 0x8c
 80143de:	2120      	movs	r1, #32
 80143e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2280      	movs	r2, #128	@ 0x80
 80143e6:	2100      	movs	r1, #0
 80143e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80143ea:	2303      	movs	r3, #3
 80143ec:	e010      	b.n	8014410 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	69db      	ldr	r3, [r3, #28]
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	4013      	ands	r3, r2
 80143f8:	68ba      	ldr	r2, [r7, #8]
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	425a      	negs	r2, r3
 80143fe:	4153      	adcs	r3, r2
 8014400:	b2db      	uxtb	r3, r3
 8014402:	001a      	movs	r2, r3
 8014404:	1dfb      	adds	r3, r7, #7
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	429a      	cmp	r2, r3
 801440a:	d100      	bne.n	801440e <UART_WaitOnFlagUntilTimeout+0x182>
 801440c:	e747      	b.n	801429e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801440e:	2300      	movs	r3, #0
}
 8014410:	0018      	movs	r0, r3
 8014412:	46bd      	mov	sp, r7
 8014414:	b014      	add	sp, #80	@ 0x50
 8014416:	bd80      	pop	{r7, pc}
 8014418:	fffffe5f 	.word	0xfffffe5f

0801441c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b098      	sub	sp, #96	@ 0x60
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	1dbb      	adds	r3, r7, #6
 8014428:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	68ba      	ldr	r2, [r7, #8]
 801442e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	1dba      	adds	r2, r7, #6
 8014434:	215c      	movs	r1, #92	@ 0x5c
 8014436:	8812      	ldrh	r2, [r2, #0]
 8014438:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	1dba      	adds	r2, r7, #6
 801443e:	215e      	movs	r1, #94	@ 0x5e
 8014440:	8812      	ldrh	r2, [r2, #0]
 8014442:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	2200      	movs	r2, #0
 8014448:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	689a      	ldr	r2, [r3, #8]
 801444e:	2380      	movs	r3, #128	@ 0x80
 8014450:	015b      	lsls	r3, r3, #5
 8014452:	429a      	cmp	r2, r3
 8014454:	d10d      	bne.n	8014472 <UART_Start_Receive_IT+0x56>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	691b      	ldr	r3, [r3, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d104      	bne.n	8014468 <UART_Start_Receive_IT+0x4c>
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2260      	movs	r2, #96	@ 0x60
 8014462:	497f      	ldr	r1, [pc, #508]	@ (8014660 <UART_Start_Receive_IT+0x244>)
 8014464:	5299      	strh	r1, [r3, r2]
 8014466:	e02e      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2260      	movs	r2, #96	@ 0x60
 801446c:	21ff      	movs	r1, #255	@ 0xff
 801446e:	5299      	strh	r1, [r3, r2]
 8014470:	e029      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	689b      	ldr	r3, [r3, #8]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d10d      	bne.n	8014496 <UART_Start_Receive_IT+0x7a>
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	691b      	ldr	r3, [r3, #16]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d104      	bne.n	801448c <UART_Start_Receive_IT+0x70>
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2260      	movs	r2, #96	@ 0x60
 8014486:	21ff      	movs	r1, #255	@ 0xff
 8014488:	5299      	strh	r1, [r3, r2]
 801448a:	e01c      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2260      	movs	r2, #96	@ 0x60
 8014490:	217f      	movs	r1, #127	@ 0x7f
 8014492:	5299      	strh	r1, [r3, r2]
 8014494:	e017      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	689a      	ldr	r2, [r3, #8]
 801449a:	2380      	movs	r3, #128	@ 0x80
 801449c:	055b      	lsls	r3, r3, #21
 801449e:	429a      	cmp	r2, r3
 80144a0:	d10d      	bne.n	80144be <UART_Start_Receive_IT+0xa2>
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	691b      	ldr	r3, [r3, #16]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d104      	bne.n	80144b4 <UART_Start_Receive_IT+0x98>
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2260      	movs	r2, #96	@ 0x60
 80144ae:	217f      	movs	r1, #127	@ 0x7f
 80144b0:	5299      	strh	r1, [r3, r2]
 80144b2:	e008      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	2260      	movs	r2, #96	@ 0x60
 80144b8:	213f      	movs	r1, #63	@ 0x3f
 80144ba:	5299      	strh	r1, [r3, r2]
 80144bc:	e003      	b.n	80144c6 <UART_Start_Receive_IT+0xaa>
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	2260      	movs	r2, #96	@ 0x60
 80144c2:	2100      	movs	r1, #0
 80144c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	228c      	movs	r2, #140	@ 0x8c
 80144ca:	2100      	movs	r1, #0
 80144cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2288      	movs	r2, #136	@ 0x88
 80144d2:	2122      	movs	r1, #34	@ 0x22
 80144d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144d6:	f3ef 8310 	mrs	r3, PRIMASK
 80144da:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80144dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80144de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80144e0:	2301      	movs	r3, #1
 80144e2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144e6:	f383 8810 	msr	PRIMASK, r3
}
 80144ea:	46c0      	nop			@ (mov r8, r8)
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	689a      	ldr	r2, [r3, #8]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2101      	movs	r1, #1
 80144f8:	430a      	orrs	r2, r1
 80144fa:	609a      	str	r2, [r3, #8]
 80144fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014502:	f383 8810 	msr	PRIMASK, r3
}
 8014506:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801450c:	2380      	movs	r3, #128	@ 0x80
 801450e:	059b      	lsls	r3, r3, #22
 8014510:	429a      	cmp	r2, r3
 8014512:	d154      	bne.n	80145be <UART_Start_Receive_IT+0x1a2>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2268      	movs	r2, #104	@ 0x68
 8014518:	5a9b      	ldrh	r3, [r3, r2]
 801451a:	1dba      	adds	r2, r7, #6
 801451c:	8812      	ldrh	r2, [r2, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	d34d      	bcc.n	80145be <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	689a      	ldr	r2, [r3, #8]
 8014526:	2380      	movs	r3, #128	@ 0x80
 8014528:	015b      	lsls	r3, r3, #5
 801452a:	429a      	cmp	r2, r3
 801452c:	d107      	bne.n	801453e <UART_Start_Receive_IT+0x122>
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	691b      	ldr	r3, [r3, #16]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d103      	bne.n	801453e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	4a4a      	ldr	r2, [pc, #296]	@ (8014664 <UART_Start_Receive_IT+0x248>)
 801453a:	671a      	str	r2, [r3, #112]	@ 0x70
 801453c:	e002      	b.n	8014544 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	4a49      	ldr	r2, [pc, #292]	@ (8014668 <UART_Start_Receive_IT+0x24c>)
 8014542:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2280      	movs	r2, #128	@ 0x80
 8014548:	2100      	movs	r1, #0
 801454a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	691b      	ldr	r3, [r3, #16]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d019      	beq.n	8014588 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014554:	f3ef 8310 	mrs	r3, PRIMASK
 8014558:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 801455a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801455c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801455e:	2301      	movs	r3, #1
 8014560:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014564:	f383 8810 	msr	PRIMASK, r3
}
 8014568:	46c0      	nop			@ (mov r8, r8)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2180      	movs	r1, #128	@ 0x80
 8014576:	0049      	lsls	r1, r1, #1
 8014578:	430a      	orrs	r2, r1
 801457a:	601a      	str	r2, [r3, #0]
 801457c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014582:	f383 8810 	msr	PRIMASK, r3
}
 8014586:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014588:	f3ef 8310 	mrs	r3, PRIMASK
 801458c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014590:	657b      	str	r3, [r7, #84]	@ 0x54
 8014592:	2301      	movs	r3, #1
 8014594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014598:	f383 8810 	msr	PRIMASK, r3
}
 801459c:	46c0      	nop			@ (mov r8, r8)
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	689a      	ldr	r2, [r3, #8]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2180      	movs	r1, #128	@ 0x80
 80145aa:	0549      	lsls	r1, r1, #21
 80145ac:	430a      	orrs	r2, r1
 80145ae:	609a      	str	r2, [r3, #8]
 80145b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b6:	f383 8810 	msr	PRIMASK, r3
}
 80145ba:	46c0      	nop			@ (mov r8, r8)
 80145bc:	e04b      	b.n	8014656 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	689a      	ldr	r2, [r3, #8]
 80145c2:	2380      	movs	r3, #128	@ 0x80
 80145c4:	015b      	lsls	r3, r3, #5
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d107      	bne.n	80145da <UART_Start_Receive_IT+0x1be>
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d103      	bne.n	80145da <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	4a25      	ldr	r2, [pc, #148]	@ (801466c <UART_Start_Receive_IT+0x250>)
 80145d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80145d8:	e002      	b.n	80145e0 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	4a24      	ldr	r2, [pc, #144]	@ (8014670 <UART_Start_Receive_IT+0x254>)
 80145de:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2280      	movs	r2, #128	@ 0x80
 80145e4:	2100      	movs	r1, #0
 80145e6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	691b      	ldr	r3, [r3, #16]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d019      	beq.n	8014624 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80145f0:	f3ef 8310 	mrs	r3, PRIMASK
 80145f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80145f6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80145f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145fa:	2301      	movs	r3, #1
 80145fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145fe:	6a3b      	ldr	r3, [r7, #32]
 8014600:	f383 8810 	msr	PRIMASK, r3
}
 8014604:	46c0      	nop			@ (mov r8, r8)
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	2190      	movs	r1, #144	@ 0x90
 8014612:	0049      	lsls	r1, r1, #1
 8014614:	430a      	orrs	r2, r1
 8014616:	601a      	str	r2, [r3, #0]
 8014618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801461a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801461e:	f383 8810 	msr	PRIMASK, r3
}
 8014622:	e018      	b.n	8014656 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014624:	f3ef 8310 	mrs	r3, PRIMASK
 8014628:	613b      	str	r3, [r7, #16]
  return(result);
 801462a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801462c:	653b      	str	r3, [r7, #80]	@ 0x50
 801462e:	2301      	movs	r3, #1
 8014630:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	f383 8810 	msr	PRIMASK, r3
}
 8014638:	46c0      	nop			@ (mov r8, r8)
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2120      	movs	r1, #32
 8014646:	430a      	orrs	r2, r1
 8014648:	601a      	str	r2, [r3, #0]
 801464a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801464c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	f383 8810 	msr	PRIMASK, r3
}
 8014654:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8014656:	2300      	movs	r3, #0
}
 8014658:	0018      	movs	r0, r3
 801465a:	46bd      	mov	sp, r7
 801465c:	b018      	add	sp, #96	@ 0x60
 801465e:	bd80      	pop	{r7, pc}
 8014660:	000001ff 	.word	0x000001ff
 8014664:	0801513d 	.word	0x0801513d
 8014668:	08014e59 	.word	0x08014e59
 801466c:	08014ced 	.word	0x08014ced
 8014670:	08014b81 	.word	0x08014b81

08014674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b090      	sub	sp, #64	@ 0x40
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	1dbb      	adds	r3, r7, #6
 8014680:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	68ba      	ldr	r2, [r7, #8]
 8014686:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	1dba      	adds	r2, r7, #6
 801468c:	215c      	movs	r1, #92	@ 0x5c
 801468e:	8812      	ldrh	r2, [r2, #0]
 8014690:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	228c      	movs	r2, #140	@ 0x8c
 8014696:	2100      	movs	r1, #0
 8014698:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2288      	movs	r2, #136	@ 0x88
 801469e:	2122      	movs	r1, #34	@ 0x22
 80146a0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d02c      	beq.n	8014704 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146ae:	4a42      	ldr	r2, [pc, #264]	@ (80147b8 <UART_Start_Receive_DMA+0x144>)
 80146b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146b6:	4a41      	ldr	r2, [pc, #260]	@ (80147bc <UART_Start_Receive_DMA+0x148>)
 80146b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146be:	4a40      	ldr	r2, [pc, #256]	@ (80147c0 <UART_Start_Receive_DMA+0x14c>)
 80146c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146c6:	2200      	movs	r2, #0
 80146c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	3324      	adds	r3, #36	@ 0x24
 80146d4:	0019      	movs	r1, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146da:	001a      	movs	r2, r3
 80146dc:	1dbb      	adds	r3, r7, #6
 80146de:	881b      	ldrh	r3, [r3, #0]
 80146e0:	f7f9 fb3c 	bl	800dd5c <HAL_DMA_Start_IT>
 80146e4:	1e03      	subs	r3, r0, #0
 80146e6:	d00d      	beq.n	8014704 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	228c      	movs	r2, #140	@ 0x8c
 80146ec:	2110      	movs	r1, #16
 80146ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2280      	movs	r2, #128	@ 0x80
 80146f4:	2100      	movs	r1, #0
 80146f6:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2288      	movs	r2, #136	@ 0x88
 80146fc:	2120      	movs	r1, #32
 80146fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8014700:	2301      	movs	r3, #1
 8014702:	e054      	b.n	80147ae <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2280      	movs	r2, #128	@ 0x80
 8014708:	2100      	movs	r1, #0
 801470a:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	691b      	ldr	r3, [r3, #16]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d019      	beq.n	8014748 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014714:	f3ef 8310 	mrs	r3, PRIMASK
 8014718:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801471e:	2301      	movs	r3, #1
 8014720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014724:	f383 8810 	msr	PRIMASK, r3
}
 8014728:	46c0      	nop			@ (mov r8, r8)
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2180      	movs	r1, #128	@ 0x80
 8014736:	0049      	lsls	r1, r1, #1
 8014738:	430a      	orrs	r2, r1
 801473a:	601a      	str	r2, [r3, #0]
 801473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801473e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014742:	f383 8810 	msr	PRIMASK, r3
}
 8014746:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014748:	f3ef 8310 	mrs	r3, PRIMASK
 801474c:	613b      	str	r3, [r7, #16]
  return(result);
 801474e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014750:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014752:	2301      	movs	r3, #1
 8014754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	f383 8810 	msr	PRIMASK, r3
}
 801475c:	46c0      	nop			@ (mov r8, r8)
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	689a      	ldr	r2, [r3, #8]
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2101      	movs	r1, #1
 801476a:	430a      	orrs	r2, r1
 801476c:	609a      	str	r2, [r3, #8]
 801476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	f383 8810 	msr	PRIMASK, r3
}
 8014778:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801477a:	f3ef 8310 	mrs	r3, PRIMASK
 801477e:	61fb      	str	r3, [r7, #28]
  return(result);
 8014780:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014782:	637b      	str	r3, [r7, #52]	@ 0x34
 8014784:	2301      	movs	r3, #1
 8014786:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014788:	6a3b      	ldr	r3, [r7, #32]
 801478a:	f383 8810 	msr	PRIMASK, r3
}
 801478e:	46c0      	nop			@ (mov r8, r8)
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	689a      	ldr	r2, [r3, #8]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2140      	movs	r1, #64	@ 0x40
 801479c:	430a      	orrs	r2, r1
 801479e:	609a      	str	r2, [r3, #8]
 80147a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147a6:	f383 8810 	msr	PRIMASK, r3
}
 80147aa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	0018      	movs	r0, r3
 80147b0:	46bd      	mov	sp, r7
 80147b2:	b010      	add	sp, #64	@ 0x40
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	46c0      	nop			@ (mov r8, r8)
 80147b8:	08014911 	.word	0x08014911
 80147bc:	08014a39 	.word	0x08014a39
 80147c0:	08014a75 	.word	0x08014a75

080147c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b08a      	sub	sp, #40	@ 0x28
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147cc:	f3ef 8310 	mrs	r3, PRIMASK
 80147d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80147d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80147d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80147d6:	2301      	movs	r3, #1
 80147d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	f383 8810 	msr	PRIMASK, r3
}
 80147e0:	46c0      	nop			@ (mov r8, r8)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	21c0      	movs	r1, #192	@ 0xc0
 80147ee:	438a      	bics	r2, r1
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	f383 8810 	msr	PRIMASK, r3
}
 80147fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014802:	617b      	str	r3, [r7, #20]
  return(result);
 8014804:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8014806:	623b      	str	r3, [r7, #32]
 8014808:	2301      	movs	r3, #1
 801480a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	f383 8810 	msr	PRIMASK, r3
}
 8014812:	46c0      	nop			@ (mov r8, r8)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	689a      	ldr	r2, [r3, #8]
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4908      	ldr	r1, [pc, #32]	@ (8014840 <UART_EndTxTransfer+0x7c>)
 8014820:	400a      	ands	r2, r1
 8014822:	609a      	str	r2, [r3, #8]
 8014824:	6a3b      	ldr	r3, [r7, #32]
 8014826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	f383 8810 	msr	PRIMASK, r3
}
 801482e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2284      	movs	r2, #132	@ 0x84
 8014834:	2120      	movs	r1, #32
 8014836:	5099      	str	r1, [r3, r2]
}
 8014838:	46c0      	nop			@ (mov r8, r8)
 801483a:	46bd      	mov	sp, r7
 801483c:	b00a      	add	sp, #40	@ 0x28
 801483e:	bd80      	pop	{r7, pc}
 8014840:	ff7fffff 	.word	0xff7fffff

08014844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b08e      	sub	sp, #56	@ 0x38
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801484c:	f3ef 8310 	mrs	r3, PRIMASK
 8014850:	617b      	str	r3, [r7, #20]
  return(result);
 8014852:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014854:	637b      	str	r3, [r7, #52]	@ 0x34
 8014856:	2301      	movs	r3, #1
 8014858:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	f383 8810 	msr	PRIMASK, r3
}
 8014860:	46c0      	nop			@ (mov r8, r8)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	4926      	ldr	r1, [pc, #152]	@ (8014908 <UART_EndRxTransfer+0xc4>)
 801486e:	400a      	ands	r2, r1
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014876:	69fb      	ldr	r3, [r7, #28]
 8014878:	f383 8810 	msr	PRIMASK, r3
}
 801487c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801487e:	f3ef 8310 	mrs	r3, PRIMASK
 8014882:	623b      	str	r3, [r7, #32]
  return(result);
 8014884:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014886:	633b      	str	r3, [r7, #48]	@ 0x30
 8014888:	2301      	movs	r3, #1
 801488a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801488e:	f383 8810 	msr	PRIMASK, r3
}
 8014892:	46c0      	nop			@ (mov r8, r8)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	689a      	ldr	r2, [r3, #8]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	491b      	ldr	r1, [pc, #108]	@ (801490c <UART_EndRxTransfer+0xc8>)
 80148a0:	400a      	ands	r2, r1
 80148a2:	609a      	str	r2, [r3, #8]
 80148a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148aa:	f383 8810 	msr	PRIMASK, r3
}
 80148ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d118      	bne.n	80148ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148b8:	f3ef 8310 	mrs	r3, PRIMASK
 80148bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80148be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80148c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148c2:	2301      	movs	r3, #1
 80148c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f383 8810 	msr	PRIMASK, r3
}
 80148cc:	46c0      	nop			@ (mov r8, r8)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2110      	movs	r1, #16
 80148da:	438a      	bics	r2, r1
 80148dc:	601a      	str	r2, [r3, #0]
 80148de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	f383 8810 	msr	PRIMASK, r3
}
 80148e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2288      	movs	r2, #136	@ 0x88
 80148ee:	2120      	movs	r1, #32
 80148f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2200      	movs	r2, #0
 80148fc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80148fe:	46c0      	nop			@ (mov r8, r8)
 8014900:	46bd      	mov	sp, r7
 8014902:	b00e      	add	sp, #56	@ 0x38
 8014904:	bd80      	pop	{r7, pc}
 8014906:	46c0      	nop			@ (mov r8, r8)
 8014908:	fffffedf 	.word	0xfffffedf
 801490c:	effffffe 	.word	0xeffffffe

08014910 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b094      	sub	sp, #80	@ 0x50
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801491c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	2220      	movs	r2, #32
 8014926:	4013      	ands	r3, r2
 8014928:	d16f      	bne.n	8014a0a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801492a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801492c:	225e      	movs	r2, #94	@ 0x5e
 801492e:	2100      	movs	r1, #0
 8014930:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014932:	f3ef 8310 	mrs	r3, PRIMASK
 8014936:	61bb      	str	r3, [r7, #24]
  return(result);
 8014938:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801493a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801493c:	2301      	movs	r3, #1
 801493e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	f383 8810 	msr	PRIMASK, r3
}
 8014946:	46c0      	nop			@ (mov r8, r8)
 8014948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	4938      	ldr	r1, [pc, #224]	@ (8014a34 <UART_DMAReceiveCplt+0x124>)
 8014954:	400a      	ands	r2, r1
 8014956:	601a      	str	r2, [r3, #0]
 8014958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801495a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	f383 8810 	msr	PRIMASK, r3
}
 8014962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014964:	f3ef 8310 	mrs	r3, PRIMASK
 8014968:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801496c:	647b      	str	r3, [r7, #68]	@ 0x44
 801496e:	2301      	movs	r3, #1
 8014970:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014974:	f383 8810 	msr	PRIMASK, r3
}
 8014978:	46c0      	nop			@ (mov r8, r8)
 801497a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	689a      	ldr	r2, [r3, #8]
 8014980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2101      	movs	r1, #1
 8014986:	438a      	bics	r2, r1
 8014988:	609a      	str	r2, [r3, #8]
 801498a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801498e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014990:	f383 8810 	msr	PRIMASK, r3
}
 8014994:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014996:	f3ef 8310 	mrs	r3, PRIMASK
 801499a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801499e:	643b      	str	r3, [r7, #64]	@ 0x40
 80149a0:	2301      	movs	r3, #1
 80149a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149a6:	f383 8810 	msr	PRIMASK, r3
}
 80149aa:	46c0      	nop			@ (mov r8, r8)
 80149ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	689a      	ldr	r2, [r3, #8]
 80149b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2140      	movs	r1, #64	@ 0x40
 80149b8:	438a      	bics	r2, r1
 80149ba:	609a      	str	r2, [r3, #8]
 80149bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80149be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c2:	f383 8810 	msr	PRIMASK, r3
}
 80149c6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80149c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149ca:	2288      	movs	r2, #136	@ 0x88
 80149cc:	2120      	movs	r1, #32
 80149ce:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80149d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d118      	bne.n	8014a0a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149d8:	f3ef 8310 	mrs	r3, PRIMASK
 80149dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80149de:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80149e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149e2:	2301      	movs	r3, #1
 80149e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	f383 8810 	msr	PRIMASK, r3
}
 80149ec:	46c0      	nop			@ (mov r8, r8)
 80149ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2110      	movs	r1, #16
 80149fa:	438a      	bics	r2, r1
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	f383 8810 	msr	PRIMASK, r3
}
 8014a08:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d108      	bne.n	8014a24 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a14:	225c      	movs	r2, #92	@ 0x5c
 8014a16:	5a9a      	ldrh	r2, [r3, r2]
 8014a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a1a:	0011      	movs	r1, r2
 8014a1c:	0018      	movs	r0, r3
 8014a1e:	f7ff f86d 	bl	8013afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014a22:	e003      	b.n	8014a2c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8014a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a26:	0018      	movs	r0, r3
 8014a28:	f7ef fb0a 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 8014a2c:	46c0      	nop			@ (mov r8, r8)
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	b014      	add	sp, #80	@ 0x50
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	fffffeff 	.word	0xfffffeff

08014a38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a4a:	2b01      	cmp	r3, #1
 8014a4c:	d10a      	bne.n	8014a64 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	225c      	movs	r2, #92	@ 0x5c
 8014a52:	5a9b      	ldrh	r3, [r3, r2]
 8014a54:	085b      	lsrs	r3, r3, #1
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	0011      	movs	r1, r2
 8014a5c:	0018      	movs	r0, r3
 8014a5e:	f7ff f84d 	bl	8013afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014a62:	e003      	b.n	8014a6c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	0018      	movs	r0, r3
 8014a68:	f7ff f840 	bl	8013aec <HAL_UART_RxHalfCpltCallback>
}
 8014a6c:	46c0      	nop			@ (mov r8, r8)
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	b004      	add	sp, #16
 8014a72:	bd80      	pop	{r7, pc}

08014a74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b086      	sub	sp, #24
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2284      	movs	r2, #132	@ 0x84
 8014a86:	589b      	ldr	r3, [r3, r2]
 8014a88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2288      	movs	r2, #136	@ 0x88
 8014a8e:	589b      	ldr	r3, [r3, r2]
 8014a90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	2280      	movs	r2, #128	@ 0x80
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	2b80      	cmp	r3, #128	@ 0x80
 8014a9e:	d10a      	bne.n	8014ab6 <UART_DMAError+0x42>
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	2b21      	cmp	r3, #33	@ 0x21
 8014aa4:	d107      	bne.n	8014ab6 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	2256      	movs	r2, #86	@ 0x56
 8014aaa:	2100      	movs	r1, #0
 8014aac:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	0018      	movs	r0, r3
 8014ab2:	f7ff fe87 	bl	80147c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	689b      	ldr	r3, [r3, #8]
 8014abc:	2240      	movs	r2, #64	@ 0x40
 8014abe:	4013      	ands	r3, r2
 8014ac0:	2b40      	cmp	r3, #64	@ 0x40
 8014ac2:	d10a      	bne.n	8014ada <UART_DMAError+0x66>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b22      	cmp	r3, #34	@ 0x22
 8014ac8:	d107      	bne.n	8014ada <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	225e      	movs	r2, #94	@ 0x5e
 8014ace:	2100      	movs	r1, #0
 8014ad0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	0018      	movs	r0, r3
 8014ad6:	f7ff feb5 	bl	8014844 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	228c      	movs	r2, #140	@ 0x8c
 8014ade:	589b      	ldr	r3, [r3, r2]
 8014ae0:	2210      	movs	r2, #16
 8014ae2:	431a      	orrs	r2, r3
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	218c      	movs	r1, #140	@ 0x8c
 8014ae8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	0018      	movs	r0, r3
 8014aee:	f7ef fa91 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014af2:	46c0      	nop			@ (mov r8, r8)
 8014af4:	46bd      	mov	sp, r7
 8014af6:	b006      	add	sp, #24
 8014af8:	bd80      	pop	{r7, pc}

08014afa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b084      	sub	sp, #16
 8014afe:	af00      	add	r7, sp, #0
 8014b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	225e      	movs	r2, #94	@ 0x5e
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2256      	movs	r2, #86	@ 0x56
 8014b14:	2100      	movs	r1, #0
 8014b16:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	0018      	movs	r0, r3
 8014b1c:	f7ef fa7a 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014b20:	46c0      	nop			@ (mov r8, r8)
 8014b22:	46bd      	mov	sp, r7
 8014b24:	b004      	add	sp, #16
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b086      	sub	sp, #24
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b30:	f3ef 8310 	mrs	r3, PRIMASK
 8014b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8014b36:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014b38:	617b      	str	r3, [r7, #20]
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	f383 8810 	msr	PRIMASK, r3
}
 8014b44:	46c0      	nop			@ (mov r8, r8)
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2140      	movs	r1, #64	@ 0x40
 8014b52:	438a      	bics	r2, r1
 8014b54:	601a      	str	r2, [r3, #0]
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	f383 8810 	msr	PRIMASK, r3
}
 8014b60:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2284      	movs	r2, #132	@ 0x84
 8014b66:	2120      	movs	r1, #32
 8014b68:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	0018      	movs	r0, r3
 8014b74:	f7fe ffb2 	bl	8013adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014b78:	46c0      	nop			@ (mov r8, r8)
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	b006      	add	sp, #24
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b090      	sub	sp, #64	@ 0x40
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014b88:	203e      	movs	r0, #62	@ 0x3e
 8014b8a:	183b      	adds	r3, r7, r0
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	2160      	movs	r1, #96	@ 0x60
 8014b90:	5a52      	ldrh	r2, [r2, r1]
 8014b92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2288      	movs	r2, #136	@ 0x88
 8014b98:	589b      	ldr	r3, [r3, r2]
 8014b9a:	2b22      	cmp	r3, #34	@ 0x22
 8014b9c:	d000      	beq.n	8014ba0 <UART_RxISR_8BIT+0x20>
 8014b9e:	e097      	b.n	8014cd0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ba6:	213c      	movs	r1, #60	@ 0x3c
 8014ba8:	187b      	adds	r3, r7, r1
 8014baa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014bac:	187b      	adds	r3, r7, r1
 8014bae:	881b      	ldrh	r3, [r3, #0]
 8014bb0:	b2da      	uxtb	r2, r3
 8014bb2:	183b      	adds	r3, r7, r0
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	b2d9      	uxtb	r1, r3
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bbc:	400a      	ands	r2, r1
 8014bbe:	b2d2      	uxtb	r2, r2
 8014bc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bc6:	1c5a      	adds	r2, r3, #1
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	225e      	movs	r2, #94	@ 0x5e
 8014bd0:	5a9b      	ldrh	r3, [r3, r2]
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	3b01      	subs	r3, #1
 8014bd6:	b299      	uxth	r1, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	225e      	movs	r2, #94	@ 0x5e
 8014bdc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	225e      	movs	r2, #94	@ 0x5e
 8014be2:	5a9b      	ldrh	r3, [r3, r2]
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d000      	beq.n	8014bec <UART_RxISR_8BIT+0x6c>
 8014bea:	e079      	b.n	8014ce0 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bec:	f3ef 8310 	mrs	r3, PRIMASK
 8014bf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8014bf2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	f383 8810 	msr	PRIMASK, r3
}
 8014c00:	46c0      	nop			@ (mov r8, r8)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4936      	ldr	r1, [pc, #216]	@ (8014ce8 <UART_RxISR_8BIT+0x168>)
 8014c0e:	400a      	ands	r2, r1
 8014c10:	601a      	str	r2, [r3, #0]
 8014c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c16:	6a3b      	ldr	r3, [r7, #32]
 8014c18:	f383 8810 	msr	PRIMASK, r3
}
 8014c1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8014c22:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c28:	2301      	movs	r3, #1
 8014c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c2e:	f383 8810 	msr	PRIMASK, r3
}
 8014c32:	46c0      	nop			@ (mov r8, r8)
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	689a      	ldr	r2, [r3, #8]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2101      	movs	r1, #1
 8014c40:	438a      	bics	r2, r1
 8014c42:	609a      	str	r2, [r3, #8]
 8014c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4a:	f383 8810 	msr	PRIMASK, r3
}
 8014c4e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2288      	movs	r2, #136	@ 0x88
 8014c54:	2120      	movs	r1, #32
 8014c56:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d12f      	bne.n	8014cc6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8014c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8014c72:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8014c76:	2301      	movs	r3, #1
 8014c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	f383 8810 	msr	PRIMASK, r3
}
 8014c80:	46c0      	nop			@ (mov r8, r8)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2110      	movs	r1, #16
 8014c8e:	438a      	bics	r2, r1
 8014c90:	601a      	str	r2, [r3, #0]
 8014c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	f383 8810 	msr	PRIMASK, r3
}
 8014c9c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	69db      	ldr	r3, [r3, #28]
 8014ca4:	2210      	movs	r2, #16
 8014ca6:	4013      	ands	r3, r2
 8014ca8:	2b10      	cmp	r3, #16
 8014caa:	d103      	bne.n	8014cb4 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2210      	movs	r2, #16
 8014cb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	225c      	movs	r2, #92	@ 0x5c
 8014cb8:	5a9a      	ldrh	r2, [r3, r2]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	0011      	movs	r1, r2
 8014cbe:	0018      	movs	r0, r3
 8014cc0:	f7fe ff1c 	bl	8013afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014cc4:	e00c      	b.n	8014ce0 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	0018      	movs	r0, r3
 8014cca:	f7ef f9b9 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 8014cce:	e007      	b.n	8014ce0 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	699a      	ldr	r2, [r3, #24]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2108      	movs	r1, #8
 8014cdc:	430a      	orrs	r2, r1
 8014cde:	619a      	str	r2, [r3, #24]
}
 8014ce0:	46c0      	nop			@ (mov r8, r8)
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	b010      	add	sp, #64	@ 0x40
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	fffffedf 	.word	0xfffffedf

08014cec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b090      	sub	sp, #64	@ 0x40
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014cf4:	203e      	movs	r0, #62	@ 0x3e
 8014cf6:	183b      	adds	r3, r7, r0
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	2160      	movs	r1, #96	@ 0x60
 8014cfc:	5a52      	ldrh	r2, [r2, r1]
 8014cfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2288      	movs	r2, #136	@ 0x88
 8014d04:	589b      	ldr	r3, [r3, r2]
 8014d06:	2b22      	cmp	r3, #34	@ 0x22
 8014d08:	d000      	beq.n	8014d0c <UART_RxISR_16BIT+0x20>
 8014d0a:	e097      	b.n	8014e3c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d12:	213c      	movs	r1, #60	@ 0x3c
 8014d14:	187b      	adds	r3, r7, r1
 8014d16:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8014d1e:	187b      	adds	r3, r7, r1
 8014d20:	183a      	adds	r2, r7, r0
 8014d22:	881b      	ldrh	r3, [r3, #0]
 8014d24:	8812      	ldrh	r2, [r2, #0]
 8014d26:	4013      	ands	r3, r2
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d32:	1c9a      	adds	r2, r3, #2
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	225e      	movs	r2, #94	@ 0x5e
 8014d3c:	5a9b      	ldrh	r3, [r3, r2]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	3b01      	subs	r3, #1
 8014d42:	b299      	uxth	r1, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	225e      	movs	r2, #94	@ 0x5e
 8014d48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	225e      	movs	r2, #94	@ 0x5e
 8014d4e:	5a9b      	ldrh	r3, [r3, r2]
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d000      	beq.n	8014d58 <UART_RxISR_16BIT+0x6c>
 8014d56:	e079      	b.n	8014e4c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d58:	f3ef 8310 	mrs	r3, PRIMASK
 8014d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8014d5e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d62:	2301      	movs	r3, #1
 8014d64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	f383 8810 	msr	PRIMASK, r3
}
 8014d6c:	46c0      	nop			@ (mov r8, r8)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4936      	ldr	r1, [pc, #216]	@ (8014e54 <UART_RxISR_16BIT+0x168>)
 8014d7a:	400a      	ands	r2, r1
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	f383 8810 	msr	PRIMASK, r3
}
 8014d88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8014d8e:	623b      	str	r3, [r7, #32]
  return(result);
 8014d90:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8014d94:	2301      	movs	r3, #1
 8014d96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d9a:	f383 8810 	msr	PRIMASK, r3
}
 8014d9e:	46c0      	nop			@ (mov r8, r8)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	689a      	ldr	r2, [r3, #8]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2101      	movs	r1, #1
 8014dac:	438a      	bics	r2, r1
 8014dae:	609a      	str	r2, [r3, #8]
 8014db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014db6:	f383 8810 	msr	PRIMASK, r3
}
 8014dba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2288      	movs	r2, #136	@ 0x88
 8014dc0:	2120      	movs	r1, #32
 8014dc2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d12f      	bne.n	8014e32 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8014dde:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014de2:	2301      	movs	r3, #1
 8014de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	f383 8810 	msr	PRIMASK, r3
}
 8014dec:	46c0      	nop			@ (mov r8, r8)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2110      	movs	r1, #16
 8014dfa:	438a      	bics	r2, r1
 8014dfc:	601a      	str	r2, [r3, #0]
 8014dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	f383 8810 	msr	PRIMASK, r3
}
 8014e08:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	69db      	ldr	r3, [r3, #28]
 8014e10:	2210      	movs	r2, #16
 8014e12:	4013      	ands	r3, r2
 8014e14:	2b10      	cmp	r3, #16
 8014e16:	d103      	bne.n	8014e20 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2210      	movs	r2, #16
 8014e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	225c      	movs	r2, #92	@ 0x5c
 8014e24:	5a9a      	ldrh	r2, [r3, r2]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	0011      	movs	r1, r2
 8014e2a:	0018      	movs	r0, r3
 8014e2c:	f7fe fe66 	bl	8013afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014e30:	e00c      	b.n	8014e4c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	0018      	movs	r0, r3
 8014e36:	f7ef f903 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 8014e3a:	e007      	b.n	8014e4c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	699a      	ldr	r2, [r3, #24]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2108      	movs	r1, #8
 8014e48:	430a      	orrs	r2, r1
 8014e4a:	619a      	str	r2, [r3, #24]
}
 8014e4c:	46c0      	nop			@ (mov r8, r8)
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	b010      	add	sp, #64	@ 0x40
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	fffffedf 	.word	0xfffffedf

08014e58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b09c      	sub	sp, #112	@ 0x70
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014e60:	236a      	movs	r3, #106	@ 0x6a
 8014e62:	18fb      	adds	r3, r7, r3
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	2160      	movs	r1, #96	@ 0x60
 8014e68:	5a52      	ldrh	r2, [r2, r1]
 8014e6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	69db      	ldr	r3, [r3, #28]
 8014e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2288      	movs	r2, #136	@ 0x88
 8014e88:	589b      	ldr	r3, [r3, r2]
 8014e8a:	2b22      	cmp	r3, #34	@ 0x22
 8014e8c:	d000      	beq.n	8014e90 <UART_RxISR_8BIT_FIFOEN+0x38>
 8014e8e:	e141      	b.n	8015114 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014e90:	235e      	movs	r3, #94	@ 0x5e
 8014e92:	18fb      	adds	r3, r7, r3
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	2168      	movs	r1, #104	@ 0x68
 8014e98:	5a52      	ldrh	r2, [r2, r1]
 8014e9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014e9c:	e0e8      	b.n	8015070 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ea4:	215c      	movs	r1, #92	@ 0x5c
 8014ea6:	187b      	adds	r3, r7, r1
 8014ea8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014eaa:	187b      	adds	r3, r7, r1
 8014eac:	881b      	ldrh	r3, [r3, #0]
 8014eae:	b2da      	uxtb	r2, r3
 8014eb0:	236a      	movs	r3, #106	@ 0x6a
 8014eb2:	18fb      	adds	r3, r7, r3
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	b2d9      	uxtb	r1, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ebc:	400a      	ands	r2, r1
 8014ebe:	b2d2      	uxtb	r2, r2
 8014ec0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ec6:	1c5a      	adds	r2, r3, #1
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	225e      	movs	r2, #94	@ 0x5e
 8014ed0:	5a9b      	ldrh	r3, [r3, r2]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	b299      	uxth	r1, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	225e      	movs	r2, #94	@ 0x5e
 8014edc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	69db      	ldr	r3, [r3, #28]
 8014ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ee8:	2207      	movs	r2, #7
 8014eea:	4013      	ands	r3, r2
 8014eec:	d049      	beq.n	8014f82 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	d010      	beq.n	8014f18 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8014ef6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014ef8:	2380      	movs	r3, #128	@ 0x80
 8014efa:	005b      	lsls	r3, r3, #1
 8014efc:	4013      	ands	r3, r2
 8014efe:	d00b      	beq.n	8014f18 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2201      	movs	r2, #1
 8014f06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	228c      	movs	r2, #140	@ 0x8c
 8014f0c:	589b      	ldr	r3, [r3, r2]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	431a      	orrs	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	218c      	movs	r1, #140	@ 0x8c
 8014f16:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014f1a:	2202      	movs	r2, #2
 8014f1c:	4013      	ands	r3, r2
 8014f1e:	d00f      	beq.n	8014f40 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8014f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014f22:	2201      	movs	r2, #1
 8014f24:	4013      	ands	r3, r2
 8014f26:	d00b      	beq.n	8014f40 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2202      	movs	r2, #2
 8014f2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	228c      	movs	r2, #140	@ 0x8c
 8014f34:	589b      	ldr	r3, [r3, r2]
 8014f36:	2204      	movs	r2, #4
 8014f38:	431a      	orrs	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	218c      	movs	r1, #140	@ 0x8c
 8014f3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014f42:	2204      	movs	r2, #4
 8014f44:	4013      	ands	r3, r2
 8014f46:	d00f      	beq.n	8014f68 <UART_RxISR_8BIT_FIFOEN+0x110>
 8014f48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	4013      	ands	r3, r2
 8014f4e:	d00b      	beq.n	8014f68 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2204      	movs	r2, #4
 8014f56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	228c      	movs	r2, #140	@ 0x8c
 8014f5c:	589b      	ldr	r3, [r3, r2]
 8014f5e:	2202      	movs	r2, #2
 8014f60:	431a      	orrs	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	218c      	movs	r1, #140	@ 0x8c
 8014f66:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	228c      	movs	r2, #140	@ 0x8c
 8014f6c:	589b      	ldr	r3, [r3, r2]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d007      	beq.n	8014f82 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	0018      	movs	r0, r3
 8014f76:	f7ef f84d 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	228c      	movs	r2, #140	@ 0x8c
 8014f7e:	2100      	movs	r1, #0
 8014f80:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	225e      	movs	r2, #94	@ 0x5e
 8014f86:	5a9b      	ldrh	r3, [r3, r2]
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d170      	bne.n	8015070 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8014f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8014f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014f98:	2301      	movs	r3, #1
 8014f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f9e:	f383 8810 	msr	PRIMASK, r3
}
 8014fa2:	46c0      	nop			@ (mov r8, r8)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	495f      	ldr	r1, [pc, #380]	@ (801512c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8014fb0:	400a      	ands	r2, r1
 8014fb2:	601a      	str	r2, [r3, #0]
 8014fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fba:	f383 8810 	msr	PRIMASK, r3
}
 8014fbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8014fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8014fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8014fca:	2301      	movs	r3, #1
 8014fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fd0:	f383 8810 	msr	PRIMASK, r3
}
 8014fd4:	46c0      	nop			@ (mov r8, r8)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	689a      	ldr	r2, [r3, #8]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4953      	ldr	r1, [pc, #332]	@ (8015130 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8014fe2:	400a      	ands	r2, r1
 8014fe4:	609a      	str	r2, [r3, #8]
 8014fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fec:	f383 8810 	msr	PRIMASK, r3
}
 8014ff0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2288      	movs	r2, #136	@ 0x88
 8014ff6:	2120      	movs	r1, #32
 8014ff8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015004:	2b01      	cmp	r3, #1
 8015006:	d12f      	bne.n	8015068 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2200      	movs	r2, #0
 801500c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801500e:	f3ef 8310 	mrs	r3, PRIMASK
 8015012:	623b      	str	r3, [r7, #32]
  return(result);
 8015014:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015016:	653b      	str	r3, [r7, #80]	@ 0x50
 8015018:	2301      	movs	r3, #1
 801501a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501e:	f383 8810 	msr	PRIMASK, r3
}
 8015022:	46c0      	nop			@ (mov r8, r8)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	681a      	ldr	r2, [r3, #0]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2110      	movs	r1, #16
 8015030:	438a      	bics	r2, r1
 8015032:	601a      	str	r2, [r3, #0]
 8015034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015036:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801503a:	f383 8810 	msr	PRIMASK, r3
}
 801503e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	69db      	ldr	r3, [r3, #28]
 8015046:	2210      	movs	r2, #16
 8015048:	4013      	ands	r3, r2
 801504a:	2b10      	cmp	r3, #16
 801504c:	d103      	bne.n	8015056 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2210      	movs	r2, #16
 8015054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	225c      	movs	r2, #92	@ 0x5c
 801505a:	5a9a      	ldrh	r2, [r3, r2]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	0011      	movs	r1, r2
 8015060:	0018      	movs	r0, r3
 8015062:	f7fe fd4b 	bl	8013afc <HAL_UARTEx_RxEventCallback>
 8015066:	e003      	b.n	8015070 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	0018      	movs	r0, r3
 801506c:	f7ee ffe8 	bl	8004040 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015070:	235e      	movs	r3, #94	@ 0x5e
 8015072:	18fb      	adds	r3, r7, r3
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d004      	beq.n	8015084 <UART_RxISR_8BIT_FIFOEN+0x22c>
 801507a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801507c:	2220      	movs	r2, #32
 801507e:	4013      	ands	r3, r2
 8015080:	d000      	beq.n	8015084 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8015082:	e70c      	b.n	8014e9e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015084:	204e      	movs	r0, #78	@ 0x4e
 8015086:	183b      	adds	r3, r7, r0
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	215e      	movs	r1, #94	@ 0x5e
 801508c:	5a52      	ldrh	r2, [r2, r1]
 801508e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015090:	0001      	movs	r1, r0
 8015092:	187b      	adds	r3, r7, r1
 8015094:	881b      	ldrh	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d044      	beq.n	8015124 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2268      	movs	r2, #104	@ 0x68
 801509e:	5a9b      	ldrh	r3, [r3, r2]
 80150a0:	187a      	adds	r2, r7, r1
 80150a2:	8812      	ldrh	r2, [r2, #0]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d23d      	bcs.n	8015124 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150a8:	f3ef 8310 	mrs	r3, PRIMASK
 80150ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80150ae:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80150b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80150b2:	2301      	movs	r3, #1
 80150b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f383 8810 	msr	PRIMASK, r3
}
 80150bc:	46c0      	nop			@ (mov r8, r8)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	689a      	ldr	r2, [r3, #8]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	491a      	ldr	r1, [pc, #104]	@ (8015134 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80150ca:	400a      	ands	r2, r1
 80150cc:	609a      	str	r2, [r3, #8]
 80150ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80150d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	f383 8810 	msr	PRIMASK, r3
}
 80150d8:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4a16      	ldr	r2, [pc, #88]	@ (8015138 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80150de:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150e0:	f3ef 8310 	mrs	r3, PRIMASK
 80150e4:	617b      	str	r3, [r7, #20]
  return(result);
 80150e6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80150e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80150ea:	2301      	movs	r3, #1
 80150ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	f383 8810 	msr	PRIMASK, r3
}
 80150f4:	46c0      	nop			@ (mov r8, r8)
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2120      	movs	r1, #32
 8015102:	430a      	orrs	r2, r1
 8015104:	601a      	str	r2, [r3, #0]
 8015106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	f383 8810 	msr	PRIMASK, r3
}
 8015110:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015112:	e007      	b.n	8015124 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	699a      	ldr	r2, [r3, #24]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2108      	movs	r1, #8
 8015120:	430a      	orrs	r2, r1
 8015122:	619a      	str	r2, [r3, #24]
}
 8015124:	46c0      	nop			@ (mov r8, r8)
 8015126:	46bd      	mov	sp, r7
 8015128:	b01c      	add	sp, #112	@ 0x70
 801512a:	bd80      	pop	{r7, pc}
 801512c:	fffffeff 	.word	0xfffffeff
 8015130:	effffffe 	.word	0xeffffffe
 8015134:	efffffff 	.word	0xefffffff
 8015138:	08014b81 	.word	0x08014b81

0801513c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b09e      	sub	sp, #120	@ 0x78
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015144:	2372      	movs	r3, #114	@ 0x72
 8015146:	18fb      	adds	r3, r7, r3
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	2160      	movs	r1, #96	@ 0x60
 801514c:	5a52      	ldrh	r2, [r2, r1]
 801514e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	69db      	ldr	r3, [r3, #28]
 8015156:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	689b      	ldr	r3, [r3, #8]
 8015166:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2288      	movs	r2, #136	@ 0x88
 801516c:	589b      	ldr	r3, [r3, r2]
 801516e:	2b22      	cmp	r3, #34	@ 0x22
 8015170:	d000      	beq.n	8015174 <UART_RxISR_16BIT_FIFOEN+0x38>
 8015172:	e141      	b.n	80153f8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015174:	2366      	movs	r3, #102	@ 0x66
 8015176:	18fb      	adds	r3, r7, r3
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	2168      	movs	r1, #104	@ 0x68
 801517c:	5a52      	ldrh	r2, [r2, r1]
 801517e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015180:	e0e8      	b.n	8015354 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015188:	2164      	movs	r1, #100	@ 0x64
 801518a:	187b      	adds	r3, r7, r1
 801518c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015192:	663b      	str	r3, [r7, #96]	@ 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8015194:	187b      	adds	r3, r7, r1
 8015196:	2272      	movs	r2, #114	@ 0x72
 8015198:	18ba      	adds	r2, r7, r2
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	8812      	ldrh	r2, [r2, #0]
 801519e:	4013      	ands	r3, r2
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80151a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151aa:	1c9a      	adds	r2, r3, #2
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	225e      	movs	r2, #94	@ 0x5e
 80151b4:	5a9b      	ldrh	r3, [r3, r2]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	3b01      	subs	r3, #1
 80151ba:	b299      	uxth	r1, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	225e      	movs	r2, #94	@ 0x5e
 80151c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	69db      	ldr	r3, [r3, #28]
 80151c8:	677b      	str	r3, [r7, #116]	@ 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80151ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80151cc:	2207      	movs	r2, #7
 80151ce:	4013      	ands	r3, r2
 80151d0:	d049      	beq.n	8015266 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80151d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80151d4:	2201      	movs	r2, #1
 80151d6:	4013      	ands	r3, r2
 80151d8:	d010      	beq.n	80151fc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80151da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80151dc:	2380      	movs	r3, #128	@ 0x80
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	4013      	ands	r3, r2
 80151e2:	d00b      	beq.n	80151fc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2201      	movs	r2, #1
 80151ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	228c      	movs	r2, #140	@ 0x8c
 80151f0:	589b      	ldr	r3, [r3, r2]
 80151f2:	2201      	movs	r2, #1
 80151f4:	431a      	orrs	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	218c      	movs	r1, #140	@ 0x8c
 80151fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80151fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80151fe:	2202      	movs	r2, #2
 8015200:	4013      	ands	r3, r2
 8015202:	d00f      	beq.n	8015224 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8015204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015206:	2201      	movs	r2, #1
 8015208:	4013      	ands	r3, r2
 801520a:	d00b      	beq.n	8015224 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2202      	movs	r2, #2
 8015212:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	228c      	movs	r2, #140	@ 0x8c
 8015218:	589b      	ldr	r3, [r3, r2]
 801521a:	2204      	movs	r2, #4
 801521c:	431a      	orrs	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	218c      	movs	r1, #140	@ 0x8c
 8015222:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015226:	2204      	movs	r2, #4
 8015228:	4013      	ands	r3, r2
 801522a:	d00f      	beq.n	801524c <UART_RxISR_16BIT_FIFOEN+0x110>
 801522c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801522e:	2201      	movs	r2, #1
 8015230:	4013      	ands	r3, r2
 8015232:	d00b      	beq.n	801524c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2204      	movs	r2, #4
 801523a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	228c      	movs	r2, #140	@ 0x8c
 8015240:	589b      	ldr	r3, [r3, r2]
 8015242:	2202      	movs	r2, #2
 8015244:	431a      	orrs	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	218c      	movs	r1, #140	@ 0x8c
 801524a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	228c      	movs	r2, #140	@ 0x8c
 8015250:	589b      	ldr	r3, [r3, r2]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d007      	beq.n	8015266 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	0018      	movs	r0, r3
 801525a:	f7ee fedb 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	228c      	movs	r2, #140	@ 0x8c
 8015262:	2100      	movs	r1, #0
 8015264:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	225e      	movs	r2, #94	@ 0x5e
 801526a:	5a9b      	ldrh	r3, [r3, r2]
 801526c:	b29b      	uxth	r3, r3
 801526e:	2b00      	cmp	r3, #0
 8015270:	d170      	bne.n	8015354 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015272:	f3ef 8310 	mrs	r3, PRIMASK
 8015276:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801527a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801527c:	2301      	movs	r3, #1
 801527e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015282:	f383 8810 	msr	PRIMASK, r3
}
 8015286:	46c0      	nop			@ (mov r8, r8)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	495f      	ldr	r1, [pc, #380]	@ (8015410 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8015294:	400a      	ands	r2, r1
 8015296:	601a      	str	r2, [r3, #0]
 8015298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801529a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801529e:	f383 8810 	msr	PRIMASK, r3
}
 80152a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152a4:	f3ef 8310 	mrs	r3, PRIMASK
 80152a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80152aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80152ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80152ae:	2301      	movs	r3, #1
 80152b0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80152b4:	f383 8810 	msr	PRIMASK, r3
}
 80152b8:	46c0      	nop			@ (mov r8, r8)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	689a      	ldr	r2, [r3, #8]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4953      	ldr	r1, [pc, #332]	@ (8015414 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80152c6:	400a      	ands	r2, r1
 80152c8:	609a      	str	r2, [r3, #8]
 80152ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152cc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152d0:	f383 8810 	msr	PRIMASK, r3
}
 80152d4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2288      	movs	r2, #136	@ 0x88
 80152da:	2120      	movs	r1, #32
 80152dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2200      	movs	r2, #0
 80152e2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d12f      	bne.n	801534c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152f2:	f3ef 8310 	mrs	r3, PRIMASK
 80152f6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80152f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80152fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80152fc:	2301      	movs	r3, #1
 80152fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015302:	f383 8810 	msr	PRIMASK, r3
}
 8015306:	46c0      	nop			@ (mov r8, r8)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2110      	movs	r1, #16
 8015314:	438a      	bics	r2, r1
 8015316:	601a      	str	r2, [r3, #0]
 8015318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531e:	f383 8810 	msr	PRIMASK, r3
}
 8015322:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	69db      	ldr	r3, [r3, #28]
 801532a:	2210      	movs	r2, #16
 801532c:	4013      	ands	r3, r2
 801532e:	2b10      	cmp	r3, #16
 8015330:	d103      	bne.n	801533a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2210      	movs	r2, #16
 8015338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	225c      	movs	r2, #92	@ 0x5c
 801533e:	5a9a      	ldrh	r2, [r3, r2]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	0011      	movs	r1, r2
 8015344:	0018      	movs	r0, r3
 8015346:	f7fe fbd9 	bl	8013afc <HAL_UARTEx_RxEventCallback>
 801534a:	e003      	b.n	8015354 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	0018      	movs	r0, r3
 8015350:	f7ee fe76 	bl	8004040 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015354:	2366      	movs	r3, #102	@ 0x66
 8015356:	18fb      	adds	r3, r7, r3
 8015358:	881b      	ldrh	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d004      	beq.n	8015368 <UART_RxISR_16BIT_FIFOEN+0x22c>
 801535e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015360:	2220      	movs	r2, #32
 8015362:	4013      	ands	r3, r2
 8015364:	d000      	beq.n	8015368 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8015366:	e70c      	b.n	8015182 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015368:	2052      	movs	r0, #82	@ 0x52
 801536a:	183b      	adds	r3, r7, r0
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	215e      	movs	r1, #94	@ 0x5e
 8015370:	5a52      	ldrh	r2, [r2, r1]
 8015372:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015374:	0001      	movs	r1, r0
 8015376:	187b      	adds	r3, r7, r1
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d044      	beq.n	8015408 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2268      	movs	r2, #104	@ 0x68
 8015382:	5a9b      	ldrh	r3, [r3, r2]
 8015384:	187a      	adds	r2, r7, r1
 8015386:	8812      	ldrh	r2, [r2, #0]
 8015388:	429a      	cmp	r2, r3
 801538a:	d23d      	bcs.n	8015408 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801538c:	f3ef 8310 	mrs	r3, PRIMASK
 8015390:	60fb      	str	r3, [r7, #12]
  return(result);
 8015392:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015396:	2301      	movs	r3, #1
 8015398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	f383 8810 	msr	PRIMASK, r3
}
 80153a0:	46c0      	nop			@ (mov r8, r8)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	689a      	ldr	r2, [r3, #8]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	491a      	ldr	r1, [pc, #104]	@ (8015418 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80153ae:	400a      	ands	r2, r1
 80153b0:	609a      	str	r2, [r3, #8]
 80153b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	f383 8810 	msr	PRIMASK, r3
}
 80153bc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	4a16      	ldr	r2, [pc, #88]	@ (801541c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80153c2:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153c4:	f3ef 8310 	mrs	r3, PRIMASK
 80153c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80153ca:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80153cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153ce:	2301      	movs	r3, #1
 80153d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	f383 8810 	msr	PRIMASK, r3
}
 80153d8:	46c0      	nop			@ (mov r8, r8)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2120      	movs	r1, #32
 80153e6:	430a      	orrs	r2, r1
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80153ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153ee:	6a3b      	ldr	r3, [r7, #32]
 80153f0:	f383 8810 	msr	PRIMASK, r3
}
 80153f4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80153f6:	e007      	b.n	8015408 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	699a      	ldr	r2, [r3, #24]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2108      	movs	r1, #8
 8015404:	430a      	orrs	r2, r1
 8015406:	619a      	str	r2, [r3, #24]
}
 8015408:	46c0      	nop			@ (mov r8, r8)
 801540a:	46bd      	mov	sp, r7
 801540c:	b01e      	add	sp, #120	@ 0x78
 801540e:	bd80      	pop	{r7, pc}
 8015410:	fffffeff 	.word	0xfffffeff
 8015414:	effffffe 	.word	0xeffffffe
 8015418:	efffffff 	.word	0xefffffff
 801541c:	08014ced 	.word	0x08014ced

08015420 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015428:	46c0      	nop			@ (mov r8, r8)
 801542a:	46bd      	mov	sp, r7
 801542c:	b002      	add	sp, #8
 801542e:	bd80      	pop	{r7, pc}

08015430 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015438:	46c0      	nop			@ (mov r8, r8)
 801543a:	46bd      	mov	sp, r7
 801543c:	b002      	add	sp, #8
 801543e:	bd80      	pop	{r7, pc}

08015440 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015448:	46c0      	nop			@ (mov r8, r8)
 801544a:	46bd      	mov	sp, r7
 801544c:	b002      	add	sp, #8
 801544e:	bd80      	pop	{r7, pc}

08015450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2280      	movs	r2, #128	@ 0x80
 801545c:	5c9b      	ldrb	r3, [r3, r2]
 801545e:	2b01      	cmp	r3, #1
 8015460:	d101      	bne.n	8015466 <HAL_UARTEx_DisableFifoMode+0x16>
 8015462:	2302      	movs	r3, #2
 8015464:	e027      	b.n	80154b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2280      	movs	r2, #128	@ 0x80
 801546a:	2101      	movs	r1, #1
 801546c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2284      	movs	r2, #132	@ 0x84
 8015472:	2124      	movs	r1, #36	@ 0x24
 8015474:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2101      	movs	r1, #1
 801548a:	438a      	bics	r2, r1
 801548c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	4a0b      	ldr	r2, [pc, #44]	@ (80154c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8015492:	4013      	ands	r3, r2
 8015494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	68fa      	ldr	r2, [r7, #12]
 80154a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2284      	movs	r2, #132	@ 0x84
 80154a8:	2120      	movs	r1, #32
 80154aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2280      	movs	r2, #128	@ 0x80
 80154b0:	2100      	movs	r1, #0
 80154b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	0018      	movs	r0, r3
 80154b8:	46bd      	mov	sp, r7
 80154ba:	b004      	add	sp, #16
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	46c0      	nop			@ (mov r8, r8)
 80154c0:	dfffffff 	.word	0xdfffffff

080154c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2280      	movs	r2, #128	@ 0x80
 80154d2:	5c9b      	ldrb	r3, [r3, r2]
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d101      	bne.n	80154dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80154d8:	2302      	movs	r3, #2
 80154da:	e02e      	b.n	801553a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2280      	movs	r2, #128	@ 0x80
 80154e0:	2101      	movs	r1, #1
 80154e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2284      	movs	r2, #132	@ 0x84
 80154e8:	2124      	movs	r1, #36	@ 0x24
 80154ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2101      	movs	r1, #1
 8015500:	438a      	bics	r2, r1
 8015502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	689b      	ldr	r3, [r3, #8]
 801550a:	00db      	lsls	r3, r3, #3
 801550c:	08d9      	lsrs	r1, r3, #3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	683a      	ldr	r2, [r7, #0]
 8015514:	430a      	orrs	r2, r1
 8015516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	0018      	movs	r0, r3
 801551c:	f000 f854 	bl	80155c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2284      	movs	r2, #132	@ 0x84
 801552c:	2120      	movs	r1, #32
 801552e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2280      	movs	r2, #128	@ 0x80
 8015534:	2100      	movs	r1, #0
 8015536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015538:	2300      	movs	r3, #0
}
 801553a:	0018      	movs	r0, r3
 801553c:	46bd      	mov	sp, r7
 801553e:	b004      	add	sp, #16
 8015540:	bd80      	pop	{r7, pc}
	...

08015544 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2280      	movs	r2, #128	@ 0x80
 8015552:	5c9b      	ldrb	r3, [r3, r2]
 8015554:	2b01      	cmp	r3, #1
 8015556:	d101      	bne.n	801555c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015558:	2302      	movs	r3, #2
 801555a:	e02f      	b.n	80155bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2280      	movs	r2, #128	@ 0x80
 8015560:	2101      	movs	r1, #1
 8015562:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2284      	movs	r2, #132	@ 0x84
 8015568:	2124      	movs	r1, #36	@ 0x24
 801556a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	681a      	ldr	r2, [r3, #0]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	2101      	movs	r1, #1
 8015580:	438a      	bics	r2, r1
 8015582:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	4a0e      	ldr	r2, [pc, #56]	@ (80155c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801558c:	4013      	ands	r3, r2
 801558e:	0019      	movs	r1, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	430a      	orrs	r2, r1
 8015598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	0018      	movs	r0, r3
 801559e:	f000 f813 	bl	80155c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2284      	movs	r2, #132	@ 0x84
 80155ae:	2120      	movs	r1, #32
 80155b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2280      	movs	r2, #128	@ 0x80
 80155b6:	2100      	movs	r1, #0
 80155b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	0018      	movs	r0, r3
 80155be:	46bd      	mov	sp, r7
 80155c0:	b004      	add	sp, #16
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	f1ffffff 	.word	0xf1ffffff

080155c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80155c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d108      	bne.n	80155ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	226a      	movs	r2, #106	@ 0x6a
 80155dc:	2101      	movs	r1, #1
 80155de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2268      	movs	r2, #104	@ 0x68
 80155e4:	2101      	movs	r1, #1
 80155e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80155e8:	e043      	b.n	8015672 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80155ea:	260f      	movs	r6, #15
 80155ec:	19bb      	adds	r3, r7, r6
 80155ee:	2208      	movs	r2, #8
 80155f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80155f2:	200e      	movs	r0, #14
 80155f4:	183b      	adds	r3, r7, r0
 80155f6:	2208      	movs	r2, #8
 80155f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	689b      	ldr	r3, [r3, #8]
 8015600:	0e5b      	lsrs	r3, r3, #25
 8015602:	b2da      	uxtb	r2, r3
 8015604:	240d      	movs	r4, #13
 8015606:	193b      	adds	r3, r7, r4
 8015608:	2107      	movs	r1, #7
 801560a:	400a      	ands	r2, r1
 801560c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	689b      	ldr	r3, [r3, #8]
 8015614:	0f5b      	lsrs	r3, r3, #29
 8015616:	b2da      	uxtb	r2, r3
 8015618:	250c      	movs	r5, #12
 801561a:	197b      	adds	r3, r7, r5
 801561c:	2107      	movs	r1, #7
 801561e:	400a      	ands	r2, r1
 8015620:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015622:	183b      	adds	r3, r7, r0
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	197a      	adds	r2, r7, r5
 8015628:	7812      	ldrb	r2, [r2, #0]
 801562a:	4914      	ldr	r1, [pc, #80]	@ (801567c <UARTEx_SetNbDataToProcess+0xb4>)
 801562c:	5c8a      	ldrb	r2, [r1, r2]
 801562e:	435a      	muls	r2, r3
 8015630:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8015632:	197b      	adds	r3, r7, r5
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	4a12      	ldr	r2, [pc, #72]	@ (8015680 <UARTEx_SetNbDataToProcess+0xb8>)
 8015638:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801563a:	0019      	movs	r1, r3
 801563c:	f7ea fdfe 	bl	800023c <__divsi3>
 8015640:	0003      	movs	r3, r0
 8015642:	b299      	uxth	r1, r3
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	226a      	movs	r2, #106	@ 0x6a
 8015648:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801564a:	19bb      	adds	r3, r7, r6
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	193a      	adds	r2, r7, r4
 8015650:	7812      	ldrb	r2, [r2, #0]
 8015652:	490a      	ldr	r1, [pc, #40]	@ (801567c <UARTEx_SetNbDataToProcess+0xb4>)
 8015654:	5c8a      	ldrb	r2, [r1, r2]
 8015656:	435a      	muls	r2, r3
 8015658:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801565a:	193b      	adds	r3, r7, r4
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	4a08      	ldr	r2, [pc, #32]	@ (8015680 <UARTEx_SetNbDataToProcess+0xb8>)
 8015660:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015662:	0019      	movs	r1, r3
 8015664:	f7ea fdea 	bl	800023c <__divsi3>
 8015668:	0003      	movs	r3, r0
 801566a:	b299      	uxth	r1, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2268      	movs	r2, #104	@ 0x68
 8015670:	5299      	strh	r1, [r3, r2]
}
 8015672:	46c0      	nop			@ (mov r8, r8)
 8015674:	46bd      	mov	sp, r7
 8015676:	b005      	add	sp, #20
 8015678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801567a:	46c0      	nop			@ (mov r8, r8)
 801567c:	080195f8 	.word	0x080195f8
 8015680:	08019600 	.word	0x08019600

08015684 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8015688:	4a08      	ldr	r2, [pc, #32]	@ (80156ac <MX_FATFS_Init+0x28>)
 801568a:	4b09      	ldr	r3, [pc, #36]	@ (80156b0 <MX_FATFS_Init+0x2c>)
 801568c:	0011      	movs	r1, r2
 801568e:	0018      	movs	r0, r3
 8015690:	f002 ff46 	bl	8018520 <FATFS_LinkDriver>
 8015694:	1e03      	subs	r3, r0, #0
 8015696:	d002      	beq.n	801569e <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8015698:	2301      	movs	r3, #1
 801569a:	425b      	negs	r3, r3
 801569c:	e003      	b.n	80156a6 <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 801569e:	4b05      	ldr	r3, [pc, #20]	@ (80156b4 <MX_FATFS_Init+0x30>)
 80156a0:	2201      	movs	r2, #1
 80156a2:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80156a4:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80156a6:	0018      	movs	r0, r3
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	2000346c 	.word	0x2000346c
 80156b0:	200004a0 	.word	0x200004a0
 80156b4:	20003470 	.word	0x20003470

080156b8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80156bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80156be:	0018      	movs	r0, r3
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	0002      	movs	r2, r0
 80156cc:	1dfb      	adds	r3, r7, #7
 80156ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80156d0:	1dfb      	adds	r3, r7, #7
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	0018      	movs	r0, r3
 80156d6:	f7ee f8b5 	bl	8003844 <SD_disk_initialize>
 80156da:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80156dc:	0018      	movs	r0, r3
 80156de:	46bd      	mov	sp, r7
 80156e0:	b002      	add	sp, #8
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	0002      	movs	r2, r0
 80156ec:	1dfb      	adds	r3, r7, #7
 80156ee:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80156f0:	1dfb      	adds	r3, r7, #7
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	0018      	movs	r0, r3
 80156f6:	f7ee f9b3 	bl	8003a60 <SD_disk_status>
 80156fa:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80156fc:	0018      	movs	r0, r3
 80156fe:	46bd      	mov	sp, r7
 8015700:	b002      	add	sp, #8
 8015702:	bd80      	pop	{r7, pc}

08015704 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8015704:	b5b0      	push	{r4, r5, r7, lr}
 8015706:	b084      	sub	sp, #16
 8015708:	af00      	add	r7, sp, #0
 801570a:	60b9      	str	r1, [r7, #8]
 801570c:	607a      	str	r2, [r7, #4]
 801570e:	603b      	str	r3, [r7, #0]
 8015710:	250f      	movs	r5, #15
 8015712:	197b      	adds	r3, r7, r5
 8015714:	1c02      	adds	r2, r0, #0
 8015716:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8015718:	683c      	ldr	r4, [r7, #0]
 801571a:	687a      	ldr	r2, [r7, #4]
 801571c:	68b9      	ldr	r1, [r7, #8]
 801571e:	197b      	adds	r3, r7, r5
 8015720:	7818      	ldrb	r0, [r3, #0]
 8015722:	0023      	movs	r3, r4
 8015724:	f7ee f9b2 	bl	8003a8c <SD_disk_read>
 8015728:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 801572a:	0018      	movs	r0, r3
 801572c:	46bd      	mov	sp, r7
 801572e:	b004      	add	sp, #16
 8015730:	bdb0      	pop	{r4, r5, r7, pc}

08015732 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8015732:	b5b0      	push	{r4, r5, r7, lr}
 8015734:	b084      	sub	sp, #16
 8015736:	af00      	add	r7, sp, #0
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	607a      	str	r2, [r7, #4]
 801573c:	603b      	str	r3, [r7, #0]
 801573e:	250f      	movs	r5, #15
 8015740:	197b      	adds	r3, r7, r5
 8015742:	1c02      	adds	r2, r0, #0
 8015744:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8015746:	683c      	ldr	r4, [r7, #0]
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	68b9      	ldr	r1, [r7, #8]
 801574c:	197b      	adds	r3, r7, r5
 801574e:	7818      	ldrb	r0, [r3, #0]
 8015750:	0023      	movs	r3, r4
 8015752:	f7ee fa0b 	bl	8003b6c <SD_disk_write>
 8015756:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8015758:	0018      	movs	r0, r3
 801575a:	46bd      	mov	sp, r7
 801575c:	b004      	add	sp, #16
 801575e:	bdb0      	pop	{r4, r5, r7, pc}

08015760 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	603a      	str	r2, [r7, #0]
 8015768:	1dfb      	adds	r3, r7, #7
 801576a:	1c02      	adds	r2, r0, #0
 801576c:	701a      	strb	r2, [r3, #0]
 801576e:	1dbb      	adds	r3, r7, #6
 8015770:	1c0a      	adds	r2, r1, #0
 8015772:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	1dbb      	adds	r3, r7, #6
 8015778:	7819      	ldrb	r1, [r3, #0]
 801577a:	1dfb      	adds	r3, r7, #7
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	0018      	movs	r0, r3
 8015780:	f7ee fa7c 	bl	8003c7c <SD_disk_ioctl>
 8015784:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8015786:	0018      	movs	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	b002      	add	sp, #8
 801578c:	bd80      	pop	{r7, pc}
	...

08015790 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015790:	b5b0      	push	{r4, r5, r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	0002      	movs	r2, r0
 8015798:	1dfb      	adds	r3, r7, #7
 801579a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801579c:	1dfb      	adds	r3, r7, #7
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	4a0b      	ldr	r2, [pc, #44]	@ (80157d0 <disk_status+0x40>)
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	18d3      	adds	r3, r2, r3
 80157a6:	3304      	adds	r3, #4
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	1dfa      	adds	r2, r7, #7
 80157ae:	7812      	ldrb	r2, [r2, #0]
 80157b0:	4907      	ldr	r1, [pc, #28]	@ (80157d0 <disk_status+0x40>)
 80157b2:	188a      	adds	r2, r1, r2
 80157b4:	7a12      	ldrb	r2, [r2, #8]
 80157b6:	250f      	movs	r5, #15
 80157b8:	197c      	adds	r4, r7, r5
 80157ba:	0010      	movs	r0, r2
 80157bc:	4798      	blx	r3
 80157be:	0003      	movs	r3, r0
 80157c0:	7023      	strb	r3, [r4, #0]
  return stat;
 80157c2:	197b      	adds	r3, r7, r5
 80157c4:	781b      	ldrb	r3, [r3, #0]
}
 80157c6:	0018      	movs	r0, r3
 80157c8:	46bd      	mov	sp, r7
 80157ca:	b004      	add	sp, #16
 80157cc:	bdb0      	pop	{r4, r5, r7, pc}
 80157ce:	46c0      	nop			@ (mov r8, r8)
 80157d0:	2000349c 	.word	0x2000349c

080157d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80157d4:	b590      	push	{r4, r7, lr}
 80157d6:	b085      	sub	sp, #20
 80157d8:	af00      	add	r7, sp, #0
 80157da:	0002      	movs	r2, r0
 80157dc:	1dfb      	adds	r3, r7, #7
 80157de:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80157e0:	200f      	movs	r0, #15
 80157e2:	183b      	adds	r3, r7, r0
 80157e4:	2200      	movs	r2, #0
 80157e6:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80157e8:	1dfb      	adds	r3, r7, #7
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	4a10      	ldr	r2, [pc, #64]	@ (8015830 <disk_initialize+0x5c>)
 80157ee:	5cd3      	ldrb	r3, [r2, r3]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d116      	bne.n	8015822 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80157f4:	1dfb      	adds	r3, r7, #7
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	4a0d      	ldr	r2, [pc, #52]	@ (8015830 <disk_initialize+0x5c>)
 80157fa:	2101      	movs	r1, #1
 80157fc:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80157fe:	1dfb      	adds	r3, r7, #7
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	4a0b      	ldr	r2, [pc, #44]	@ (8015830 <disk_initialize+0x5c>)
 8015804:	009b      	lsls	r3, r3, #2
 8015806:	18d3      	adds	r3, r2, r3
 8015808:	3304      	adds	r3, #4
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	1dfa      	adds	r2, r7, #7
 8015810:	7812      	ldrb	r2, [r2, #0]
 8015812:	4907      	ldr	r1, [pc, #28]	@ (8015830 <disk_initialize+0x5c>)
 8015814:	188a      	adds	r2, r1, r2
 8015816:	7a12      	ldrb	r2, [r2, #8]
 8015818:	183c      	adds	r4, r7, r0
 801581a:	0010      	movs	r0, r2
 801581c:	4798      	blx	r3
 801581e:	0003      	movs	r3, r0
 8015820:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8015822:	230f      	movs	r3, #15
 8015824:	18fb      	adds	r3, r7, r3
 8015826:	781b      	ldrb	r3, [r3, #0]
}
 8015828:	0018      	movs	r0, r3
 801582a:	46bd      	mov	sp, r7
 801582c:	b005      	add	sp, #20
 801582e:	bd90      	pop	{r4, r7, pc}
 8015830:	2000349c 	.word	0x2000349c

08015834 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015836:	b087      	sub	sp, #28
 8015838:	af00      	add	r7, sp, #0
 801583a:	60b9      	str	r1, [r7, #8]
 801583c:	607a      	str	r2, [r7, #4]
 801583e:	603b      	str	r3, [r7, #0]
 8015840:	210f      	movs	r1, #15
 8015842:	187b      	adds	r3, r7, r1
 8015844:	1c02      	adds	r2, r0, #0
 8015846:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015848:	187b      	adds	r3, r7, r1
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	4a0c      	ldr	r2, [pc, #48]	@ (8015880 <disk_read+0x4c>)
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	18d3      	adds	r3, r2, r3
 8015852:	3304      	adds	r3, #4
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	689d      	ldr	r5, [r3, #8]
 8015858:	187b      	adds	r3, r7, r1
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	4a08      	ldr	r2, [pc, #32]	@ (8015880 <disk_read+0x4c>)
 801585e:	18d3      	adds	r3, r2, r3
 8015860:	7a18      	ldrb	r0, [r3, #8]
 8015862:	2617      	movs	r6, #23
 8015864:	19bc      	adds	r4, r7, r6
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	68b9      	ldr	r1, [r7, #8]
 801586c:	47a8      	blx	r5
 801586e:	0003      	movs	r3, r0
 8015870:	7023      	strb	r3, [r4, #0]
  return res;
 8015872:	19bb      	adds	r3, r7, r6
 8015874:	781b      	ldrb	r3, [r3, #0]
}
 8015876:	0018      	movs	r0, r3
 8015878:	46bd      	mov	sp, r7
 801587a:	b007      	add	sp, #28
 801587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801587e:	46c0      	nop			@ (mov r8, r8)
 8015880:	2000349c 	.word	0x2000349c

08015884 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015886:	b087      	sub	sp, #28
 8015888:	af00      	add	r7, sp, #0
 801588a:	60b9      	str	r1, [r7, #8]
 801588c:	607a      	str	r2, [r7, #4]
 801588e:	603b      	str	r3, [r7, #0]
 8015890:	210f      	movs	r1, #15
 8015892:	187b      	adds	r3, r7, r1
 8015894:	1c02      	adds	r2, r0, #0
 8015896:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015898:	187b      	adds	r3, r7, r1
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	4a0c      	ldr	r2, [pc, #48]	@ (80158d0 <disk_write+0x4c>)
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	18d3      	adds	r3, r2, r3
 80158a2:	3304      	adds	r3, #4
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68dd      	ldr	r5, [r3, #12]
 80158a8:	187b      	adds	r3, r7, r1
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	4a08      	ldr	r2, [pc, #32]	@ (80158d0 <disk_write+0x4c>)
 80158ae:	18d3      	adds	r3, r2, r3
 80158b0:	7a18      	ldrb	r0, [r3, #8]
 80158b2:	2617      	movs	r6, #23
 80158b4:	19bc      	adds	r4, r7, r6
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	68b9      	ldr	r1, [r7, #8]
 80158bc:	47a8      	blx	r5
 80158be:	0003      	movs	r3, r0
 80158c0:	7023      	strb	r3, [r4, #0]
  return res;
 80158c2:	19bb      	adds	r3, r7, r6
 80158c4:	781b      	ldrb	r3, [r3, #0]
}
 80158c6:	0018      	movs	r0, r3
 80158c8:	46bd      	mov	sp, r7
 80158ca:	b007      	add	sp, #28
 80158cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158ce:	46c0      	nop			@ (mov r8, r8)
 80158d0:	2000349c 	.word	0x2000349c

080158d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80158d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158d6:	b085      	sub	sp, #20
 80158d8:	af00      	add	r7, sp, #0
 80158da:	603a      	str	r2, [r7, #0]
 80158dc:	1dfb      	adds	r3, r7, #7
 80158de:	1c02      	adds	r2, r0, #0
 80158e0:	701a      	strb	r2, [r3, #0]
 80158e2:	1dbb      	adds	r3, r7, #6
 80158e4:	1c0a      	adds	r2, r1, #0
 80158e6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80158e8:	1dfb      	adds	r3, r7, #7
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	4a0c      	ldr	r2, [pc, #48]	@ (8015920 <disk_ioctl+0x4c>)
 80158ee:	009b      	lsls	r3, r3, #2
 80158f0:	18d3      	adds	r3, r2, r3
 80158f2:	3304      	adds	r3, #4
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	1dfa      	adds	r2, r7, #7
 80158fa:	7812      	ldrb	r2, [r2, #0]
 80158fc:	4908      	ldr	r1, [pc, #32]	@ (8015920 <disk_ioctl+0x4c>)
 80158fe:	188a      	adds	r2, r1, r2
 8015900:	7a10      	ldrb	r0, [r2, #8]
 8015902:	260f      	movs	r6, #15
 8015904:	19bc      	adds	r4, r7, r6
 8015906:	683d      	ldr	r5, [r7, #0]
 8015908:	1dba      	adds	r2, r7, #6
 801590a:	7811      	ldrb	r1, [r2, #0]
 801590c:	002a      	movs	r2, r5
 801590e:	4798      	blx	r3
 8015910:	0003      	movs	r3, r0
 8015912:	7023      	strb	r3, [r4, #0]
  return res;
 8015914:	19bb      	adds	r3, r7, r6
 8015916:	781b      	ldrb	r3, [r3, #0]
}
 8015918:	0018      	movs	r0, r3
 801591a:	46bd      	mov	sp, r7
 801591c:	b005      	add	sp, #20
 801591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015920:	2000349c 	.word	0x2000349c

08015924 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b084      	sub	sp, #16
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	3301      	adds	r3, #1
 8015930:	781a      	ldrb	r2, [r3, #0]
 8015932:	210e      	movs	r1, #14
 8015934:	187b      	adds	r3, r7, r1
 8015936:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8015938:	187b      	adds	r3, r7, r1
 801593a:	881b      	ldrh	r3, [r3, #0]
 801593c:	021b      	lsls	r3, r3, #8
 801593e:	b21a      	sxth	r2, r3
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	b21b      	sxth	r3, r3
 8015946:	4313      	orrs	r3, r2
 8015948:	b21a      	sxth	r2, r3
 801594a:	187b      	adds	r3, r7, r1
 801594c:	801a      	strh	r2, [r3, #0]
	return rv;
 801594e:	187b      	adds	r3, r7, r1
 8015950:	881b      	ldrh	r3, [r3, #0]
}
 8015952:	0018      	movs	r0, r3
 8015954:	46bd      	mov	sp, r7
 8015956:	b004      	add	sp, #16
 8015958:	bd80      	pop	{r7, pc}

0801595a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b084      	sub	sp, #16
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	3303      	adds	r3, #3
 8015966:	781b      	ldrb	r3, [r3, #0]
 8015968:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	021b      	lsls	r3, r3, #8
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	3202      	adds	r2, #2
 8015972:	7812      	ldrb	r2, [r2, #0]
 8015974:	4313      	orrs	r3, r2
 8015976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	021b      	lsls	r3, r3, #8
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	3201      	adds	r2, #1
 8015980:	7812      	ldrb	r2, [r2, #0]
 8015982:	4313      	orrs	r3, r2
 8015984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	021b      	lsls	r3, r3, #8
 801598a:	687a      	ldr	r2, [r7, #4]
 801598c:	7812      	ldrb	r2, [r2, #0]
 801598e:	4313      	orrs	r3, r2
 8015990:	60fb      	str	r3, [r7, #12]
	return rv;
 8015992:	68fb      	ldr	r3, [r7, #12]
}
 8015994:	0018      	movs	r0, r3
 8015996:	46bd      	mov	sp, r7
 8015998:	b004      	add	sp, #16
 801599a:	bd80      	pop	{r7, pc}

0801599c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	000a      	movs	r2, r1
 80159a6:	1cbb      	adds	r3, r7, #2
 80159a8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	1c5a      	adds	r2, r3, #1
 80159ae:	607a      	str	r2, [r7, #4]
 80159b0:	1cba      	adds	r2, r7, #2
 80159b2:	8812      	ldrh	r2, [r2, #0]
 80159b4:	b2d2      	uxtb	r2, r2
 80159b6:	701a      	strb	r2, [r3, #0]
 80159b8:	1cbb      	adds	r3, r7, #2
 80159ba:	1cba      	adds	r2, r7, #2
 80159bc:	8812      	ldrh	r2, [r2, #0]
 80159be:	0a12      	lsrs	r2, r2, #8
 80159c0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	1c5a      	adds	r2, r3, #1
 80159c6:	607a      	str	r2, [r7, #4]
 80159c8:	1cba      	adds	r2, r7, #2
 80159ca:	8812      	ldrh	r2, [r2, #0]
 80159cc:	b2d2      	uxtb	r2, r2
 80159ce:	701a      	strb	r2, [r3, #0]
}
 80159d0:	46c0      	nop			@ (mov r8, r8)
 80159d2:	46bd      	mov	sp, r7
 80159d4:	b002      	add	sp, #8
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	1c5a      	adds	r2, r3, #1
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	683a      	ldr	r2, [r7, #0]
 80159ea:	b2d2      	uxtb	r2, r2
 80159ec:	701a      	strb	r2, [r3, #0]
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	0a1b      	lsrs	r3, r3, #8
 80159f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	1c5a      	adds	r2, r3, #1
 80159f8:	607a      	str	r2, [r7, #4]
 80159fa:	683a      	ldr	r2, [r7, #0]
 80159fc:	b2d2      	uxtb	r2, r2
 80159fe:	701a      	strb	r2, [r3, #0]
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	0a1b      	lsrs	r3, r3, #8
 8015a04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	607a      	str	r2, [r7, #4]
 8015a0c:	683a      	ldr	r2, [r7, #0]
 8015a0e:	b2d2      	uxtb	r2, r2
 8015a10:	701a      	strb	r2, [r3, #0]
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	0a1b      	lsrs	r3, r3, #8
 8015a16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	607a      	str	r2, [r7, #4]
 8015a1e:	683a      	ldr	r2, [r7, #0]
 8015a20:	b2d2      	uxtb	r2, r2
 8015a22:	701a      	strb	r2, [r3, #0]
}
 8015a24:	46c0      	nop			@ (mov r8, r8)
 8015a26:	46bd      	mov	sp, r7
 8015a28:	b002      	add	sp, #8
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00d      	beq.n	8015a62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015a46:	693a      	ldr	r2, [r7, #16]
 8015a48:	1c53      	adds	r3, r2, #1
 8015a4a:	613b      	str	r3, [r7, #16]
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	1c59      	adds	r1, r3, #1
 8015a50:	6179      	str	r1, [r7, #20]
 8015a52:	7812      	ldrb	r2, [r2, #0]
 8015a54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	3b01      	subs	r3, #1
 8015a5a:	607b      	str	r3, [r7, #4]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d1f1      	bne.n	8015a46 <mem_cpy+0x1a>
	}
}
 8015a62:	46c0      	nop			@ (mov r8, r8)
 8015a64:	46bd      	mov	sp, r7
 8015a66:	b006      	add	sp, #24
 8015a68:	bd80      	pop	{r7, pc}

08015a6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015a6a:	b580      	push	{r7, lr}
 8015a6c:	b086      	sub	sp, #24
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	60f8      	str	r0, [r7, #12]
 8015a72:	60b9      	str	r1, [r7, #8]
 8015a74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	1c5a      	adds	r2, r3, #1
 8015a7e:	617a      	str	r2, [r7, #20]
 8015a80:	68ba      	ldr	r2, [r7, #8]
 8015a82:	b2d2      	uxtb	r2, r2
 8015a84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	607b      	str	r3, [r7, #4]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d1f3      	bne.n	8015a7a <mem_set+0x10>
}
 8015a92:	46c0      	nop			@ (mov r8, r8)
 8015a94:	46c0      	nop			@ (mov r8, r8)
 8015a96:	46bd      	mov	sp, r7
 8015a98:	b006      	add	sp, #24
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b088      	sub	sp, #32
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	61fb      	str	r3, [r7, #28]
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	1c5a      	adds	r2, r3, #1
 8015ab8:	61fa      	str	r2, [r7, #28]
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	0019      	movs	r1, r3
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	1c5a      	adds	r2, r3, #1
 8015ac2:	61ba      	str	r2, [r7, #24]
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	1acb      	subs	r3, r1, r3
 8015ac8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	3b01      	subs	r3, #1
 8015ace:	607b      	str	r3, [r7, #4]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d002      	beq.n	8015adc <mem_cmp+0x40>
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d0eb      	beq.n	8015ab4 <mem_cmp+0x18>

	return r;
 8015adc:	697b      	ldr	r3, [r7, #20]
}
 8015ade:	0018      	movs	r0, r3
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	b008      	add	sp, #32
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b082      	sub	sp, #8
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015af0:	e002      	b.n	8015af8 <chk_chr+0x12>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	3301      	adds	r3, #1
 8015af6:	607b      	str	r3, [r7, #4]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d005      	beq.n	8015b0c <chk_chr+0x26>
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	001a      	movs	r2, r3
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	d1f2      	bne.n	8015af2 <chk_chr+0xc>
	return *str;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	781b      	ldrb	r3, [r3, #0]
}
 8015b10:	0018      	movs	r0, r3
 8015b12:	46bd      	mov	sp, r7
 8015b14:	b002      	add	sp, #8
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015b22:	2300      	movs	r3, #0
 8015b24:	60bb      	str	r3, [r7, #8]
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	60fb      	str	r3, [r7, #12]
 8015b2a:	e027      	b.n	8015b7c <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8015b2c:	4b25      	ldr	r3, [pc, #148]	@ (8015bc4 <chk_lock+0xac>)
 8015b2e:	68fa      	ldr	r2, [r7, #12]
 8015b30:	0112      	lsls	r2, r2, #4
 8015b32:	58d3      	ldr	r3, [r2, r3]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01c      	beq.n	8015b72 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015b38:	4b22      	ldr	r3, [pc, #136]	@ (8015bc4 <chk_lock+0xac>)
 8015b3a:	68fa      	ldr	r2, [r7, #12]
 8015b3c:	0112      	lsls	r2, r2, #4
 8015b3e:	58d2      	ldr	r2, [r2, r3]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d116      	bne.n	8015b76 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8015b48:	4a1e      	ldr	r2, [pc, #120]	@ (8015bc4 <chk_lock+0xac>)
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	011b      	lsls	r3, r3, #4
 8015b4e:	18d3      	adds	r3, r2, r3
 8015b50:	3304      	adds	r3, #4
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d10c      	bne.n	8015b76 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8015b5c:	4a19      	ldr	r2, [pc, #100]	@ (8015bc4 <chk_lock+0xac>)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	011b      	lsls	r3, r3, #4
 8015b62:	18d3      	adds	r3, r2, r3
 8015b64:	3308      	adds	r3, #8
 8015b66:	681a      	ldr	r2, [r3, #0]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d102      	bne.n	8015b76 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8015b70:	e007      	b.n	8015b82 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8015b72:	2301      	movs	r3, #1
 8015b74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	3301      	adds	r3, #1
 8015b7a:	60fb      	str	r3, [r7, #12]
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d9d4      	bls.n	8015b2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2b02      	cmp	r3, #2
 8015b86:	d109      	bne.n	8015b9c <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d102      	bne.n	8015b94 <chk_lock+0x7c>
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	2b02      	cmp	r3, #2
 8015b92:	d101      	bne.n	8015b98 <chk_lock+0x80>
 8015b94:	2300      	movs	r3, #0
 8015b96:	e011      	b.n	8015bbc <chk_lock+0xa4>
 8015b98:	2312      	movs	r3, #18
 8015b9a:	e00f      	b.n	8015bbc <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d109      	bne.n	8015bb6 <chk_lock+0x9e>
 8015ba2:	4a08      	ldr	r2, [pc, #32]	@ (8015bc4 <chk_lock+0xac>)
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	011b      	lsls	r3, r3, #4
 8015ba8:	18d3      	adds	r3, r2, r3
 8015baa:	330c      	adds	r3, #12
 8015bac:	881a      	ldrh	r2, [r3, #0]
 8015bae:	2380      	movs	r3, #128	@ 0x80
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	d101      	bne.n	8015bba <chk_lock+0xa2>
 8015bb6:	2310      	movs	r3, #16
 8015bb8:	e000      	b.n	8015bbc <chk_lock+0xa4>
 8015bba:	2300      	movs	r3, #0
}
 8015bbc:	0018      	movs	r0, r3
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	b004      	add	sp, #16
 8015bc2:	bd80      	pop	{r7, pc}
 8015bc4:	2000347c 	.word	0x2000347c

08015bc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	607b      	str	r3, [r7, #4]
 8015bd2:	e002      	b.n	8015bda <enq_lock+0x12>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	607b      	str	r3, [r7, #4]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d805      	bhi.n	8015bec <enq_lock+0x24>
 8015be0:	4b07      	ldr	r3, [pc, #28]	@ (8015c00 <enq_lock+0x38>)
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	0112      	lsls	r2, r2, #4
 8015be6:	58d3      	ldr	r3, [r2, r3]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d1f3      	bne.n	8015bd4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	3b02      	subs	r3, #2
 8015bf0:	1e5a      	subs	r2, r3, #1
 8015bf2:	4193      	sbcs	r3, r2
 8015bf4:	b2db      	uxtb	r3, r3
}
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	b002      	add	sp, #8
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	46c0      	nop			@ (mov r8, r8)
 8015c00:	2000347c 	.word	0x2000347c

08015c04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015c0e:	2300      	movs	r3, #0
 8015c10:	60fb      	str	r3, [r7, #12]
 8015c12:	e01e      	b.n	8015c52 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8015c14:	4b3f      	ldr	r3, [pc, #252]	@ (8015d14 <inc_lock+0x110>)
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	0112      	lsls	r2, r2, #4
 8015c1a:	58d2      	ldr	r2, [r2, r3]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d113      	bne.n	8015c4c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8015c24:	4a3b      	ldr	r2, [pc, #236]	@ (8015d14 <inc_lock+0x110>)
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	011b      	lsls	r3, r3, #4
 8015c2a:	18d3      	adds	r3, r2, r3
 8015c2c:	3304      	adds	r3, #4
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d109      	bne.n	8015c4c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8015c38:	4a36      	ldr	r2, [pc, #216]	@ (8015d14 <inc_lock+0x110>)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	011b      	lsls	r3, r3, #4
 8015c3e:	18d3      	adds	r3, r2, r3
 8015c40:	3308      	adds	r3, #8
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d006      	beq.n	8015c5a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	60fb      	str	r3, [r7, #12]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d9dd      	bls.n	8015c14 <inc_lock+0x10>
 8015c58:	e000      	b.n	8015c5c <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8015c5a:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2b02      	cmp	r3, #2
 8015c60:	d130      	bne.n	8015cc4 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015c62:	2300      	movs	r3, #0
 8015c64:	60fb      	str	r3, [r7, #12]
 8015c66:	e002      	b.n	8015c6e <inc_lock+0x6a>
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	60fb      	str	r3, [r7, #12]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d805      	bhi.n	8015c80 <inc_lock+0x7c>
 8015c74:	4b27      	ldr	r3, [pc, #156]	@ (8015d14 <inc_lock+0x110>)
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	0112      	lsls	r2, r2, #4
 8015c7a:	58d3      	ldr	r3, [r2, r3]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1f3      	bne.n	8015c68 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	d101      	bne.n	8015c8a <inc_lock+0x86>
 8015c86:	2300      	movs	r3, #0
 8015c88:	e03f      	b.n	8015d0a <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6819      	ldr	r1, [r3, #0]
 8015c8e:	4b21      	ldr	r3, [pc, #132]	@ (8015d14 <inc_lock+0x110>)
 8015c90:	68fa      	ldr	r2, [r7, #12]
 8015c92:	0112      	lsls	r2, r2, #4
 8015c94:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	689a      	ldr	r2, [r3, #8]
 8015c9a:	491e      	ldr	r1, [pc, #120]	@ (8015d14 <inc_lock+0x110>)
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	011b      	lsls	r3, r3, #4
 8015ca0:	18cb      	adds	r3, r1, r3
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	695a      	ldr	r2, [r3, #20]
 8015caa:	491a      	ldr	r1, [pc, #104]	@ (8015d14 <inc_lock+0x110>)
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	011b      	lsls	r3, r3, #4
 8015cb0:	18cb      	adds	r3, r1, r3
 8015cb2:	3308      	adds	r3, #8
 8015cb4:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015cb6:	4a17      	ldr	r2, [pc, #92]	@ (8015d14 <inc_lock+0x110>)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	011b      	lsls	r3, r3, #4
 8015cbc:	18d3      	adds	r3, r2, r3
 8015cbe:	330c      	adds	r3, #12
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d009      	beq.n	8015cde <inc_lock+0xda>
 8015cca:	4a12      	ldr	r2, [pc, #72]	@ (8015d14 <inc_lock+0x110>)
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	011b      	lsls	r3, r3, #4
 8015cd0:	18d3      	adds	r3, r2, r3
 8015cd2:	330c      	adds	r3, #12
 8015cd4:	881b      	ldrh	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <inc_lock+0xda>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	e015      	b.n	8015d0a <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d108      	bne.n	8015cf6 <inc_lock+0xf2>
 8015ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8015d14 <inc_lock+0x110>)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	011b      	lsls	r3, r3, #4
 8015cea:	18d3      	adds	r3, r2, r3
 8015cec:	330c      	adds	r3, #12
 8015cee:	881b      	ldrh	r3, [r3, #0]
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	e001      	b.n	8015cfa <inc_lock+0xf6>
 8015cf6:	2380      	movs	r3, #128	@ 0x80
 8015cf8:	005b      	lsls	r3, r3, #1
 8015cfa:	4906      	ldr	r1, [pc, #24]	@ (8015d14 <inc_lock+0x110>)
 8015cfc:	68fa      	ldr	r2, [r7, #12]
 8015cfe:	0112      	lsls	r2, r2, #4
 8015d00:	188a      	adds	r2, r1, r2
 8015d02:	320c      	adds	r2, #12
 8015d04:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	3301      	adds	r3, #1
}
 8015d0a:	0018      	movs	r0, r3
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	b004      	add	sp, #16
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	46c0      	nop			@ (mov r8, r8)
 8015d14:	2000347c 	.word	0x2000347c

08015d18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	3b01      	subs	r3, #1
 8015d24:	607b      	str	r3, [r7, #4]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2b01      	cmp	r3, #1
 8015d2a:	d832      	bhi.n	8015d92 <dec_lock+0x7a>
		n = Files[i].ctr;
 8015d2c:	200e      	movs	r0, #14
 8015d2e:	183b      	adds	r3, r7, r0
 8015d30:	491d      	ldr	r1, [pc, #116]	@ (8015da8 <dec_lock+0x90>)
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	0112      	lsls	r2, r2, #4
 8015d36:	188a      	adds	r2, r1, r2
 8015d38:	320c      	adds	r2, #12
 8015d3a:	8812      	ldrh	r2, [r2, #0]
 8015d3c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015d3e:	183b      	adds	r3, r7, r0
 8015d40:	881a      	ldrh	r2, [r3, #0]
 8015d42:	2380      	movs	r3, #128	@ 0x80
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d102      	bne.n	8015d50 <dec_lock+0x38>
 8015d4a:	183b      	adds	r3, r7, r0
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015d50:	210e      	movs	r1, #14
 8015d52:	187b      	adds	r3, r7, r1
 8015d54:	881b      	ldrh	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d004      	beq.n	8015d64 <dec_lock+0x4c>
 8015d5a:	187b      	adds	r3, r7, r1
 8015d5c:	881a      	ldrh	r2, [r3, #0]
 8015d5e:	187b      	adds	r3, r7, r1
 8015d60:	3a01      	subs	r2, #1
 8015d62:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8015d64:	4a10      	ldr	r2, [pc, #64]	@ (8015da8 <dec_lock+0x90>)
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	011b      	lsls	r3, r3, #4
 8015d6a:	18d3      	adds	r3, r2, r3
 8015d6c:	330c      	adds	r3, #12
 8015d6e:	210e      	movs	r1, #14
 8015d70:	187a      	adds	r2, r7, r1
 8015d72:	8812      	ldrh	r2, [r2, #0]
 8015d74:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015d76:	187b      	adds	r3, r7, r1
 8015d78:	881b      	ldrh	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d104      	bne.n	8015d88 <dec_lock+0x70>
 8015d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8015da8 <dec_lock+0x90>)
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	0112      	lsls	r2, r2, #4
 8015d84:	2100      	movs	r1, #0
 8015d86:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8015d88:	230d      	movs	r3, #13
 8015d8a:	18fb      	adds	r3, r7, r3
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	701a      	strb	r2, [r3, #0]
 8015d90:	e003      	b.n	8015d9a <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015d92:	230d      	movs	r3, #13
 8015d94:	18fb      	adds	r3, r7, r3
 8015d96:	2202      	movs	r2, #2
 8015d98:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8015d9a:	230d      	movs	r3, #13
 8015d9c:	18fb      	adds	r3, r7, r3
 8015d9e:	781b      	ldrb	r3, [r3, #0]
}
 8015da0:	0018      	movs	r0, r3
 8015da2:	46bd      	mov	sp, r7
 8015da4:	b004      	add	sp, #16
 8015da6:	bd80      	pop	{r7, pc}
 8015da8:	2000347c 	.word	0x2000347c

08015dac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b084      	sub	sp, #16
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015db4:	2300      	movs	r3, #0
 8015db6:	60fb      	str	r3, [r7, #12]
 8015db8:	e00e      	b.n	8015dd8 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015dba:	4b0b      	ldr	r3, [pc, #44]	@ (8015de8 <clear_lock+0x3c>)
 8015dbc:	68fa      	ldr	r2, [r7, #12]
 8015dbe:	0112      	lsls	r2, r2, #4
 8015dc0:	58d3      	ldr	r3, [r2, r3]
 8015dc2:	687a      	ldr	r2, [r7, #4]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d104      	bne.n	8015dd2 <clear_lock+0x26>
 8015dc8:	4b07      	ldr	r3, [pc, #28]	@ (8015de8 <clear_lock+0x3c>)
 8015dca:	68fa      	ldr	r2, [r7, #12]
 8015dcc:	0112      	lsls	r2, r2, #4
 8015dce:	2100      	movs	r1, #0
 8015dd0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	60fb      	str	r3, [r7, #12]
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2b01      	cmp	r3, #1
 8015ddc:	d9ed      	bls.n	8015dba <clear_lock+0xe>
	}
}
 8015dde:	46c0      	nop			@ (mov r8, r8)
 8015de0:	46c0      	nop			@ (mov r8, r8)
 8015de2:	46bd      	mov	sp, r7
 8015de4:	b004      	add	sp, #16
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	2000347c 	.word	0x2000347c

08015dec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015dec:	b590      	push	{r4, r7, lr}
 8015dee:	b087      	sub	sp, #28
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015df4:	240f      	movs	r4, #15
 8015df6:	193b      	adds	r3, r7, r4
 8015df8:	2200      	movs	r2, #0
 8015dfa:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	78db      	ldrb	r3, [r3, #3]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d034      	beq.n	8015e6e <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	7858      	ldrb	r0, [r3, #1]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	3334      	adds	r3, #52	@ 0x34
 8015e12:	0019      	movs	r1, r3
 8015e14:	697a      	ldr	r2, [r7, #20]
 8015e16:	2301      	movs	r3, #1
 8015e18:	f7ff fd34 	bl	8015884 <disk_write>
 8015e1c:	1e03      	subs	r3, r0, #0
 8015e1e:	d003      	beq.n	8015e28 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8015e20:	193b      	adds	r3, r7, r4
 8015e22:	2201      	movs	r2, #1
 8015e24:	701a      	strb	r2, [r3, #0]
 8015e26:	e022      	b.n	8015e6e <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e32:	697a      	ldr	r2, [r7, #20]
 8015e34:	1ad2      	subs	r2, r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	69db      	ldr	r3, [r3, #28]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d217      	bcs.n	8015e6e <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	789b      	ldrb	r3, [r3, #2]
 8015e42:	613b      	str	r3, [r7, #16]
 8015e44:	e010      	b.n	8015e68 <sync_window+0x7c>
					wsect += fs->fsize;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	69db      	ldr	r3, [r3, #28]
 8015e4a:	697a      	ldr	r2, [r7, #20]
 8015e4c:	18d3      	adds	r3, r2, r3
 8015e4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	7858      	ldrb	r0, [r3, #1]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	3334      	adds	r3, #52	@ 0x34
 8015e58:	0019      	movs	r1, r3
 8015e5a:	697a      	ldr	r2, [r7, #20]
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	f7ff fd11 	bl	8015884 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	3b01      	subs	r3, #1
 8015e66:	613b      	str	r3, [r7, #16]
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	d8eb      	bhi.n	8015e46 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8015e6e:	230f      	movs	r3, #15
 8015e70:	18fb      	adds	r3, r7, r3
 8015e72:	781b      	ldrb	r3, [r3, #0]
}
 8015e74:	0018      	movs	r0, r3
 8015e76:	46bd      	mov	sp, r7
 8015e78:	b007      	add	sp, #28
 8015e7a:	bd90      	pop	{r4, r7, pc}

08015e7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015e7c:	b5b0      	push	{r4, r5, r7, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015e86:	250f      	movs	r5, #15
 8015e88:	197b      	adds	r3, r7, r5
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e92:	683a      	ldr	r2, [r7, #0]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d01f      	beq.n	8015ed8 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015e98:	197c      	adds	r4, r7, r5
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	0018      	movs	r0, r3
 8015e9e:	f7ff ffa5 	bl	8015dec <sync_window>
 8015ea2:	0003      	movs	r3, r0
 8015ea4:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015ea6:	002c      	movs	r4, r5
 8015ea8:	193b      	adds	r3, r7, r4
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d113      	bne.n	8015ed8 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	7858      	ldrb	r0, [r3, #1]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	3334      	adds	r3, #52	@ 0x34
 8015eb8:	0019      	movs	r1, r3
 8015eba:	683a      	ldr	r2, [r7, #0]
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	f7ff fcb9 	bl	8015834 <disk_read>
 8015ec2:	1e03      	subs	r3, r0, #0
 8015ec4:	d005      	beq.n	8015ed2 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	425b      	negs	r3, r3
 8015eca:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015ecc:	193b      	adds	r3, r7, r4
 8015ece:	2201      	movs	r2, #1
 8015ed0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	683a      	ldr	r2, [r7, #0]
 8015ed6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8015ed8:	230f      	movs	r3, #15
 8015eda:	18fb      	adds	r3, r7, r3
 8015edc:	781b      	ldrb	r3, [r3, #0]
}
 8015ede:	0018      	movs	r0, r3
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	b004      	add	sp, #16
 8015ee4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015ee8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015ee8:	b5b0      	push	{r4, r5, r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015ef0:	250f      	movs	r5, #15
 8015ef2:	197c      	adds	r4, r7, r5
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	0018      	movs	r0, r3
 8015ef8:	f7ff ff78 	bl	8015dec <sync_window>
 8015efc:	0003      	movs	r3, r0
 8015efe:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8015f00:	197b      	adds	r3, r7, r5
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d15e      	bne.n	8015fc6 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	2b03      	cmp	r3, #3
 8015f0e:	d14d      	bne.n	8015fac <sync_fs+0xc4>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	791b      	ldrb	r3, [r3, #4]
 8015f14:	2b01      	cmp	r3, #1
 8015f16:	d149      	bne.n	8015fac <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	3334      	adds	r3, #52	@ 0x34
 8015f1c:	0018      	movs	r0, r3
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	899b      	ldrh	r3, [r3, #12]
 8015f22:	001a      	movs	r2, r3
 8015f24:	2100      	movs	r1, #0
 8015f26:	f7ff fda0 	bl	8015a6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	3334      	adds	r3, #52	@ 0x34
 8015f2e:	33ff      	adds	r3, #255	@ 0xff
 8015f30:	33ff      	adds	r3, #255	@ 0xff
 8015f32:	4a28      	ldr	r2, [pc, #160]	@ (8015fd4 <sync_fs+0xec>)
 8015f34:	0011      	movs	r1, r2
 8015f36:	0018      	movs	r0, r3
 8015f38:	f7ff fd30 	bl	801599c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	3334      	adds	r3, #52	@ 0x34
 8015f40:	4a25      	ldr	r2, [pc, #148]	@ (8015fd8 <sync_fs+0xf0>)
 8015f42:	0011      	movs	r1, r2
 8015f44:	0018      	movs	r0, r3
 8015f46:	f7ff fd47 	bl	80159d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	3334      	adds	r3, #52	@ 0x34
 8015f4e:	33e5      	adds	r3, #229	@ 0xe5
 8015f50:	33ff      	adds	r3, #255	@ 0xff
 8015f52:	4a22      	ldr	r2, [pc, #136]	@ (8015fdc <sync_fs+0xf4>)
 8015f54:	0011      	movs	r1, r2
 8015f56:	0018      	movs	r0, r3
 8015f58:	f7ff fd3e 	bl	80159d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	3334      	adds	r3, #52	@ 0x34
 8015f60:	33e9      	adds	r3, #233	@ 0xe9
 8015f62:	33ff      	adds	r3, #255	@ 0xff
 8015f64:	001a      	movs	r2, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	695b      	ldr	r3, [r3, #20]
 8015f6a:	0019      	movs	r1, r3
 8015f6c:	0010      	movs	r0, r2
 8015f6e:	f7ff fd33 	bl	80159d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	3334      	adds	r3, #52	@ 0x34
 8015f76:	33ed      	adds	r3, #237	@ 0xed
 8015f78:	33ff      	adds	r3, #255	@ 0xff
 8015f7a:	001a      	movs	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	691b      	ldr	r3, [r3, #16]
 8015f80:	0019      	movs	r1, r3
 8015f82:	0010      	movs	r0, r2
 8015f84:	f7ff fd28 	bl	80159d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6a1b      	ldr	r3, [r3, #32]
 8015f8c:	1c5a      	adds	r2, r3, #1
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	7858      	ldrb	r0, [r3, #1]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	3334      	adds	r3, #52	@ 0x34
 8015f9a:	0019      	movs	r1, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	f7ff fc6f 	bl	8015884 <disk_write>
			fs->fsi_flag = 0;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	785b      	ldrb	r3, [r3, #1]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	2100      	movs	r1, #0
 8015fb4:	0018      	movs	r0, r3
 8015fb6:	f7ff fc8d 	bl	80158d4 <disk_ioctl>
 8015fba:	1e03      	subs	r3, r0, #0
 8015fbc:	d003      	beq.n	8015fc6 <sync_fs+0xde>
 8015fbe:	230f      	movs	r3, #15
 8015fc0:	18fb      	adds	r3, r7, r3
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8015fc6:	230f      	movs	r3, #15
 8015fc8:	18fb      	adds	r3, r7, r3
 8015fca:	781b      	ldrb	r3, [r3, #0]
}
 8015fcc:	0018      	movs	r0, r3
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	b004      	add	sp, #16
 8015fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8015fd4:	0000aa55 	.word	0x0000aa55
 8015fd8:	41615252 	.word	0x41615252
 8015fdc:	61417272 	.word	0x61417272

08015fe0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	3b02      	subs	r3, #2
 8015fee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	699b      	ldr	r3, [r3, #24]
 8015ff4:	3b02      	subs	r3, #2
 8015ff6:	683a      	ldr	r2, [r7, #0]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d301      	bcc.n	8016000 <clust2sect+0x20>
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	e007      	b.n	8016010 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	895b      	ldrh	r3, [r3, #10]
 8016004:	001a      	movs	r2, r3
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	435a      	muls	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801600e:	18d3      	adds	r3, r2, r3
}
 8016010:	0018      	movs	r0, r3
 8016012:	46bd      	mov	sp, r7
 8016014:	b002      	add	sp, #8
 8016016:	bd80      	pop	{r7, pc}

08016018 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016018:	b590      	push	{r4, r7, lr}
 801601a:	b087      	sub	sp, #28
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	2b01      	cmp	r3, #1
 801602c:	d904      	bls.n	8016038 <get_fat+0x20>
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	699b      	ldr	r3, [r3, #24]
 8016032:	683a      	ldr	r2, [r7, #0]
 8016034:	429a      	cmp	r2, r3
 8016036:	d302      	bcc.n	801603e <get_fat+0x26>
		val = 1;	/* Internal error */
 8016038:	2301      	movs	r3, #1
 801603a:	617b      	str	r3, [r7, #20]
 801603c:	e0c1      	b.n	80161c2 <get_fat+0x1aa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801603e:	2301      	movs	r3, #1
 8016040:	425b      	negs	r3, r3
 8016042:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	2b03      	cmp	r3, #3
 801604a:	d100      	bne.n	801604e <get_fat+0x36>
 801604c:	e087      	b.n	801615e <get_fat+0x146>
 801604e:	dd00      	ble.n	8016052 <get_fat+0x3a>
 8016050:	e0ad      	b.n	80161ae <get_fat+0x196>
 8016052:	2b01      	cmp	r3, #1
 8016054:	d002      	beq.n	801605c <get_fat+0x44>
 8016056:	2b02      	cmp	r3, #2
 8016058:	d05b      	beq.n	8016112 <get_fat+0xfa>
 801605a:	e0a8      	b.n	80161ae <get_fat+0x196>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	60fb      	str	r3, [r7, #12]
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	085b      	lsrs	r3, r3, #1
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	18d3      	adds	r3, r2, r3
 8016068:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	899b      	ldrh	r3, [r3, #12]
 8016072:	0019      	movs	r1, r3
 8016074:	68f8      	ldr	r0, [r7, #12]
 8016076:	f7ea f857 	bl	8000128 <__udivsi3>
 801607a:	0003      	movs	r3, r0
 801607c:	18e2      	adds	r2, r4, r3
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	0011      	movs	r1, r2
 8016082:	0018      	movs	r0, r3
 8016084:	f7ff fefa 	bl	8015e7c <move_window>
 8016088:	1e03      	subs	r3, r0, #0
 801608a:	d000      	beq.n	801608e <get_fat+0x76>
 801608c:	e092      	b.n	80161b4 <get_fat+0x19c>
			wc = fs->win[bc++ % SS(fs)];
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	1c5a      	adds	r2, r3, #1
 8016092:	60fa      	str	r2, [r7, #12]
 8016094:	693a      	ldr	r2, [r7, #16]
 8016096:	8992      	ldrh	r2, [r2, #12]
 8016098:	0011      	movs	r1, r2
 801609a:	0018      	movs	r0, r3
 801609c:	f7ea f8ca 	bl	8000234 <__aeabi_uidivmod>
 80160a0:	000b      	movs	r3, r1
 80160a2:	0019      	movs	r1, r3
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	2234      	movs	r2, #52	@ 0x34
 80160a8:	185b      	adds	r3, r3, r1
 80160aa:	189b      	adds	r3, r3, r2
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	899b      	ldrh	r3, [r3, #12]
 80160b8:	0019      	movs	r1, r3
 80160ba:	68f8      	ldr	r0, [r7, #12]
 80160bc:	f7ea f834 	bl	8000128 <__udivsi3>
 80160c0:	0003      	movs	r3, r0
 80160c2:	18e2      	adds	r2, r4, r3
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	0011      	movs	r1, r2
 80160c8:	0018      	movs	r0, r3
 80160ca:	f7ff fed7 	bl	8015e7c <move_window>
 80160ce:	1e03      	subs	r3, r0, #0
 80160d0:	d000      	beq.n	80160d4 <get_fat+0xbc>
 80160d2:	e071      	b.n	80161b8 <get_fat+0x1a0>
			wc |= fs->win[bc % SS(fs)] << 8;
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	899b      	ldrh	r3, [r3, #12]
 80160d8:	001a      	movs	r2, r3
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	0011      	movs	r1, r2
 80160de:	0018      	movs	r0, r3
 80160e0:	f7ea f8a8 	bl	8000234 <__aeabi_uidivmod>
 80160e4:	000b      	movs	r3, r1
 80160e6:	0019      	movs	r1, r3
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	2234      	movs	r2, #52	@ 0x34
 80160ec:	185b      	adds	r3, r3, r1
 80160ee:	189b      	adds	r3, r3, r2
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	021b      	lsls	r3, r3, #8
 80160f4:	68ba      	ldr	r2, [r7, #8]
 80160f6:	4313      	orrs	r3, r2
 80160f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	2201      	movs	r2, #1
 80160fe:	4013      	ands	r3, r2
 8016100:	d002      	beq.n	8016108 <get_fat+0xf0>
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	091b      	lsrs	r3, r3, #4
 8016106:	e002      	b.n	801610e <get_fat+0xf6>
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	051b      	lsls	r3, r3, #20
 801610c:	0d1b      	lsrs	r3, r3, #20
 801610e:	617b      	str	r3, [r7, #20]
			break;
 8016110:	e057      	b.n	80161c2 <get_fat+0x1aa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016112:	693b      	ldr	r3, [r7, #16]
 8016114:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	899b      	ldrh	r3, [r3, #12]
 801611a:	085b      	lsrs	r3, r3, #1
 801611c:	b29b      	uxth	r3, r3
 801611e:	0019      	movs	r1, r3
 8016120:	6838      	ldr	r0, [r7, #0]
 8016122:	f7ea f801 	bl	8000128 <__udivsi3>
 8016126:	0003      	movs	r3, r0
 8016128:	18e2      	adds	r2, r4, r3
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	0011      	movs	r1, r2
 801612e:	0018      	movs	r0, r3
 8016130:	f7ff fea4 	bl	8015e7c <move_window>
 8016134:	1e03      	subs	r3, r0, #0
 8016136:	d141      	bne.n	80161bc <get_fat+0x1a4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	3334      	adds	r3, #52	@ 0x34
 801613c:	001c      	movs	r4, r3
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	005a      	lsls	r2, r3, #1
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	899b      	ldrh	r3, [r3, #12]
 8016146:	0019      	movs	r1, r3
 8016148:	0010      	movs	r0, r2
 801614a:	f7ea f873 	bl	8000234 <__aeabi_uidivmod>
 801614e:	000b      	movs	r3, r1
 8016150:	18e3      	adds	r3, r4, r3
 8016152:	0018      	movs	r0, r3
 8016154:	f7ff fbe6 	bl	8015924 <ld_word>
 8016158:	0003      	movs	r3, r0
 801615a:	617b      	str	r3, [r7, #20]
			break;
 801615c:	e031      	b.n	80161c2 <get_fat+0x1aa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	899b      	ldrh	r3, [r3, #12]
 8016166:	089b      	lsrs	r3, r3, #2
 8016168:	b29b      	uxth	r3, r3
 801616a:	0019      	movs	r1, r3
 801616c:	6838      	ldr	r0, [r7, #0]
 801616e:	f7e9 ffdb 	bl	8000128 <__udivsi3>
 8016172:	0003      	movs	r3, r0
 8016174:	18e2      	adds	r2, r4, r3
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	0011      	movs	r1, r2
 801617a:	0018      	movs	r0, r3
 801617c:	f7ff fe7e 	bl	8015e7c <move_window>
 8016180:	1e03      	subs	r3, r0, #0
 8016182:	d11d      	bne.n	80161c0 <get_fat+0x1a8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	3334      	adds	r3, #52	@ 0x34
 8016188:	001c      	movs	r4, r3
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	009a      	lsls	r2, r3, #2
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	899b      	ldrh	r3, [r3, #12]
 8016192:	0019      	movs	r1, r3
 8016194:	0010      	movs	r0, r2
 8016196:	f7ea f84d 	bl	8000234 <__aeabi_uidivmod>
 801619a:	000b      	movs	r3, r1
 801619c:	18e3      	adds	r3, r4, r3
 801619e:	0018      	movs	r0, r3
 80161a0:	f7ff fbdb 	bl	801595a <ld_dword>
 80161a4:	0003      	movs	r3, r0
 80161a6:	011b      	lsls	r3, r3, #4
 80161a8:	091b      	lsrs	r3, r3, #4
 80161aa:	617b      	str	r3, [r7, #20]
			break;
 80161ac:	e009      	b.n	80161c2 <get_fat+0x1aa>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80161ae:	2301      	movs	r3, #1
 80161b0:	617b      	str	r3, [r7, #20]
 80161b2:	e006      	b.n	80161c2 <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80161b4:	46c0      	nop			@ (mov r8, r8)
 80161b6:	e004      	b.n	80161c2 <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80161b8:	46c0      	nop			@ (mov r8, r8)
 80161ba:	e002      	b.n	80161c2 <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80161bc:	46c0      	nop			@ (mov r8, r8)
 80161be:	e000      	b.n	80161c2 <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80161c0:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 80161c2:	697b      	ldr	r3, [r7, #20]
}
 80161c4:	0018      	movs	r0, r3
 80161c6:	46bd      	mov	sp, r7
 80161c8:	b007      	add	sp, #28
 80161ca:	bd90      	pop	{r4, r7, pc}

080161cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80161cc:	b5b0      	push	{r4, r5, r7, lr}
 80161ce:	b088      	sub	sp, #32
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80161d8:	231f      	movs	r3, #31
 80161da:	18fb      	adds	r3, r7, r3
 80161dc:	2202      	movs	r2, #2
 80161de:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d800      	bhi.n	80161e8 <put_fat+0x1c>
 80161e6:	e11a      	b.n	801641e <put_fat+0x252>
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	699b      	ldr	r3, [r3, #24]
 80161ec:	68ba      	ldr	r2, [r7, #8]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d300      	bcc.n	80161f4 <put_fat+0x28>
 80161f2:	e114      	b.n	801641e <put_fat+0x252>
		switch (fs->fs_type) {
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b03      	cmp	r3, #3
 80161fa:	d100      	bne.n	80161fe <put_fat+0x32>
 80161fc:	e0c1      	b.n	8016382 <put_fat+0x1b6>
 80161fe:	dd00      	ble.n	8016202 <put_fat+0x36>
 8016200:	e10d      	b.n	801641e <put_fat+0x252>
 8016202:	2b01      	cmp	r3, #1
 8016204:	d003      	beq.n	801620e <put_fat+0x42>
 8016206:	2b02      	cmp	r3, #2
 8016208:	d100      	bne.n	801620c <put_fat+0x40>
 801620a:	e08a      	b.n	8016322 <put_fat+0x156>
 801620c:	e107      	b.n	801641e <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	61bb      	str	r3, [r7, #24]
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	085b      	lsrs	r3, r3, #1
 8016216:	69ba      	ldr	r2, [r7, #24]
 8016218:	18d3      	adds	r3, r2, r3
 801621a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	899b      	ldrh	r3, [r3, #12]
 8016224:	0019      	movs	r1, r3
 8016226:	69b8      	ldr	r0, [r7, #24]
 8016228:	f7e9 ff7e 	bl	8000128 <__udivsi3>
 801622c:	0003      	movs	r3, r0
 801622e:	18e2      	adds	r2, r4, r3
 8016230:	251f      	movs	r5, #31
 8016232:	197c      	adds	r4, r7, r5
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	0011      	movs	r1, r2
 8016238:	0018      	movs	r0, r3
 801623a:	f7ff fe1f 	bl	8015e7c <move_window>
 801623e:	0003      	movs	r3, r0
 8016240:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016242:	197b      	adds	r3, r7, r5
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d000      	beq.n	801624c <put_fat+0x80>
 801624a:	e0e1      	b.n	8016410 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	3334      	adds	r3, #52	@ 0x34
 8016250:	001c      	movs	r4, r3
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	1c5a      	adds	r2, r3, #1
 8016256:	61ba      	str	r2, [r7, #24]
 8016258:	68fa      	ldr	r2, [r7, #12]
 801625a:	8992      	ldrh	r2, [r2, #12]
 801625c:	0011      	movs	r1, r2
 801625e:	0018      	movs	r0, r3
 8016260:	f7e9 ffe8 	bl	8000234 <__aeabi_uidivmod>
 8016264:	000b      	movs	r3, r1
 8016266:	18e3      	adds	r3, r4, r3
 8016268:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2201      	movs	r2, #1
 801626e:	4013      	ands	r3, r2
 8016270:	d00d      	beq.n	801628e <put_fat+0xc2>
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	b25b      	sxtb	r3, r3
 8016278:	220f      	movs	r2, #15
 801627a:	4013      	ands	r3, r2
 801627c:	b25a      	sxtb	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	b2db      	uxtb	r3, r3
 8016282:	011b      	lsls	r3, r3, #4
 8016284:	b25b      	sxtb	r3, r3
 8016286:	4313      	orrs	r3, r2
 8016288:	b25b      	sxtb	r3, r3
 801628a:	b2db      	uxtb	r3, r3
 801628c:	e001      	b.n	8016292 <put_fat+0xc6>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	b2db      	uxtb	r3, r3
 8016292:	697a      	ldr	r2, [r7, #20]
 8016294:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2201      	movs	r2, #1
 801629a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	899b      	ldrh	r3, [r3, #12]
 80162a4:	0019      	movs	r1, r3
 80162a6:	69b8      	ldr	r0, [r7, #24]
 80162a8:	f7e9 ff3e 	bl	8000128 <__udivsi3>
 80162ac:	0003      	movs	r3, r0
 80162ae:	18e2      	adds	r2, r4, r3
 80162b0:	251f      	movs	r5, #31
 80162b2:	197c      	adds	r4, r7, r5
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	0011      	movs	r1, r2
 80162b8:	0018      	movs	r0, r3
 80162ba:	f7ff fddf 	bl	8015e7c <move_window>
 80162be:	0003      	movs	r3, r0
 80162c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80162c2:	197b      	adds	r3, r7, r5
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d000      	beq.n	80162cc <put_fat+0x100>
 80162ca:	e0a3      	b.n	8016414 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	3334      	adds	r3, #52	@ 0x34
 80162d0:	001c      	movs	r4, r3
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	899b      	ldrh	r3, [r3, #12]
 80162d6:	001a      	movs	r2, r3
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	0011      	movs	r1, r2
 80162dc:	0018      	movs	r0, r3
 80162de:	f7e9 ffa9 	bl	8000234 <__aeabi_uidivmod>
 80162e2:	000b      	movs	r3, r1
 80162e4:	18e3      	adds	r3, r4, r3
 80162e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	2201      	movs	r2, #1
 80162ec:	4013      	ands	r3, r2
 80162ee:	d003      	beq.n	80162f8 <put_fat+0x12c>
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	091b      	lsrs	r3, r3, #4
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	e00e      	b.n	8016316 <put_fat+0x14a>
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	b25b      	sxtb	r3, r3
 80162fe:	220f      	movs	r2, #15
 8016300:	4393      	bics	r3, r2
 8016302:	b25a      	sxtb	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	0a1b      	lsrs	r3, r3, #8
 8016308:	b25b      	sxtb	r3, r3
 801630a:	210f      	movs	r1, #15
 801630c:	400b      	ands	r3, r1
 801630e:	b25b      	sxtb	r3, r3
 8016310:	4313      	orrs	r3, r2
 8016312:	b25b      	sxtb	r3, r3
 8016314:	b2db      	uxtb	r3, r3
 8016316:	697a      	ldr	r2, [r7, #20]
 8016318:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	2201      	movs	r2, #1
 801631e:	70da      	strb	r2, [r3, #3]
			break;
 8016320:	e07d      	b.n	801641e <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	899b      	ldrh	r3, [r3, #12]
 801632a:	085b      	lsrs	r3, r3, #1
 801632c:	b29b      	uxth	r3, r3
 801632e:	0019      	movs	r1, r3
 8016330:	68b8      	ldr	r0, [r7, #8]
 8016332:	f7e9 fef9 	bl	8000128 <__udivsi3>
 8016336:	0003      	movs	r3, r0
 8016338:	18e2      	adds	r2, r4, r3
 801633a:	251f      	movs	r5, #31
 801633c:	197c      	adds	r4, r7, r5
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	0011      	movs	r1, r2
 8016342:	0018      	movs	r0, r3
 8016344:	f7ff fd9a 	bl	8015e7c <move_window>
 8016348:	0003      	movs	r3, r0
 801634a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 801634c:	197b      	adds	r3, r7, r5
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d161      	bne.n	8016418 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	3334      	adds	r3, #52	@ 0x34
 8016358:	001c      	movs	r4, r3
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	005a      	lsls	r2, r3, #1
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	899b      	ldrh	r3, [r3, #12]
 8016362:	0019      	movs	r1, r3
 8016364:	0010      	movs	r0, r2
 8016366:	f7e9 ff65 	bl	8000234 <__aeabi_uidivmod>
 801636a:	000b      	movs	r3, r1
 801636c:	18e3      	adds	r3, r4, r3
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	b292      	uxth	r2, r2
 8016372:	0011      	movs	r1, r2
 8016374:	0018      	movs	r0, r3
 8016376:	f7ff fb11 	bl	801599c <st_word>
			fs->wflag = 1;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	2201      	movs	r2, #1
 801637e:	70da      	strb	r2, [r3, #3]
			break;
 8016380:	e04d      	b.n	801641e <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	899b      	ldrh	r3, [r3, #12]
 801638a:	089b      	lsrs	r3, r3, #2
 801638c:	b29b      	uxth	r3, r3
 801638e:	0019      	movs	r1, r3
 8016390:	68b8      	ldr	r0, [r7, #8]
 8016392:	f7e9 fec9 	bl	8000128 <__udivsi3>
 8016396:	0003      	movs	r3, r0
 8016398:	18e2      	adds	r2, r4, r3
 801639a:	251f      	movs	r5, #31
 801639c:	197c      	adds	r4, r7, r5
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	0011      	movs	r1, r2
 80163a2:	0018      	movs	r0, r3
 80163a4:	f7ff fd6a 	bl	8015e7c <move_window>
 80163a8:	0003      	movs	r3, r0
 80163aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80163ac:	197b      	adds	r3, r7, r5
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d133      	bne.n	801641c <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	011b      	lsls	r3, r3, #4
 80163b8:	091c      	lsrs	r4, r3, #4
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	3334      	adds	r3, #52	@ 0x34
 80163be:	001d      	movs	r5, r3
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	009a      	lsls	r2, r3, #2
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	899b      	ldrh	r3, [r3, #12]
 80163c8:	0019      	movs	r1, r3
 80163ca:	0010      	movs	r0, r2
 80163cc:	f7e9 ff32 	bl	8000234 <__aeabi_uidivmod>
 80163d0:	000b      	movs	r3, r1
 80163d2:	18eb      	adds	r3, r5, r3
 80163d4:	0018      	movs	r0, r3
 80163d6:	f7ff fac0 	bl	801595a <ld_dword>
 80163da:	0003      	movs	r3, r0
 80163dc:	0f1b      	lsrs	r3, r3, #28
 80163de:	071b      	lsls	r3, r3, #28
 80163e0:	4323      	orrs	r3, r4
 80163e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	3334      	adds	r3, #52	@ 0x34
 80163e8:	001c      	movs	r4, r3
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	009a      	lsls	r2, r3, #2
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	899b      	ldrh	r3, [r3, #12]
 80163f2:	0019      	movs	r1, r3
 80163f4:	0010      	movs	r0, r2
 80163f6:	f7e9 ff1d 	bl	8000234 <__aeabi_uidivmod>
 80163fa:	000b      	movs	r3, r1
 80163fc:	18e3      	adds	r3, r4, r3
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	0011      	movs	r1, r2
 8016402:	0018      	movs	r0, r3
 8016404:	f7ff fae8 	bl	80159d8 <st_dword>
			fs->wflag = 1;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2201      	movs	r2, #1
 801640c:	70da      	strb	r2, [r3, #3]
			break;
 801640e:	e006      	b.n	801641e <put_fat+0x252>
			if (res != FR_OK) break;
 8016410:	46c0      	nop			@ (mov r8, r8)
 8016412:	e004      	b.n	801641e <put_fat+0x252>
			if (res != FR_OK) break;
 8016414:	46c0      	nop			@ (mov r8, r8)
 8016416:	e002      	b.n	801641e <put_fat+0x252>
			if (res != FR_OK) break;
 8016418:	46c0      	nop			@ (mov r8, r8)
 801641a:	e000      	b.n	801641e <put_fat+0x252>
			if (res != FR_OK) break;
 801641c:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 801641e:	231f      	movs	r3, #31
 8016420:	18fb      	adds	r3, r7, r3
 8016422:	781b      	ldrb	r3, [r3, #0]
}
 8016424:	0018      	movs	r0, r3
 8016426:	46bd      	mov	sp, r7
 8016428:	b008      	add	sp, #32
 801642a:	bdb0      	pop	{r4, r5, r7, pc}

0801642c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801642c:	b5b0      	push	{r4, r5, r7, lr}
 801642e:	b088      	sub	sp, #32
 8016430:	af00      	add	r7, sp, #0
 8016432:	60f8      	str	r0, [r7, #12]
 8016434:	60b9      	str	r1, [r7, #8]
 8016436:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016438:	231f      	movs	r3, #31
 801643a:	18fb      	adds	r3, r7, r3
 801643c:	2200      	movs	r2, #0
 801643e:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	2b01      	cmp	r3, #1
 801644a:	d904      	bls.n	8016456 <remove_chain+0x2a>
 801644c:	69bb      	ldr	r3, [r7, #24]
 801644e:	699b      	ldr	r3, [r3, #24]
 8016450:	68ba      	ldr	r2, [r7, #8]
 8016452:	429a      	cmp	r2, r3
 8016454:	d301      	bcc.n	801645a <remove_chain+0x2e>
 8016456:	2302      	movs	r3, #2
 8016458:	e057      	b.n	801650a <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d011      	beq.n	8016484 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016460:	251f      	movs	r5, #31
 8016462:	197c      	adds	r4, r7, r5
 8016464:	2301      	movs	r3, #1
 8016466:	425a      	negs	r2, r3
 8016468:	6879      	ldr	r1, [r7, #4]
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	0018      	movs	r0, r3
 801646e:	f7ff fead 	bl	80161cc <put_fat>
 8016472:	0003      	movs	r3, r0
 8016474:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8016476:	197b      	adds	r3, r7, r5
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d002      	beq.n	8016484 <remove_chain+0x58>
 801647e:	197b      	adds	r3, r7, r5
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	e042      	b.n	801650a <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016484:	68ba      	ldr	r2, [r7, #8]
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	0011      	movs	r1, r2
 801648a:	0018      	movs	r0, r3
 801648c:	f7ff fdc4 	bl	8016018 <get_fat>
 8016490:	0003      	movs	r3, r0
 8016492:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d035      	beq.n	8016506 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	2b01      	cmp	r3, #1
 801649e:	d101      	bne.n	80164a4 <remove_chain+0x78>
 80164a0:	2302      	movs	r3, #2
 80164a2:	e032      	b.n	801650a <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	3301      	adds	r3, #1
 80164a8:	d101      	bne.n	80164ae <remove_chain+0x82>
 80164aa:	2301      	movs	r3, #1
 80164ac:	e02d      	b.n	801650a <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80164ae:	251f      	movs	r5, #31
 80164b0:	197c      	adds	r4, r7, r5
 80164b2:	68b9      	ldr	r1, [r7, #8]
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	2200      	movs	r2, #0
 80164b8:	0018      	movs	r0, r3
 80164ba:	f7ff fe87 	bl	80161cc <put_fat>
 80164be:	0003      	movs	r3, r0
 80164c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80164c2:	197b      	adds	r3, r7, r5
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d002      	beq.n	80164d0 <remove_chain+0xa4>
 80164ca:	197b      	adds	r3, r7, r5
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	e01c      	b.n	801650a <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80164d0:	69bb      	ldr	r3, [r7, #24]
 80164d2:	695a      	ldr	r2, [r3, #20]
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	699b      	ldr	r3, [r3, #24]
 80164d8:	3b02      	subs	r3, #2
 80164da:	429a      	cmp	r2, r3
 80164dc:	d20b      	bcs.n	80164f6 <remove_chain+0xca>
			fs->free_clst++;
 80164de:	69bb      	ldr	r3, [r7, #24]
 80164e0:	695b      	ldr	r3, [r3, #20]
 80164e2:	1c5a      	adds	r2, r3, #1
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80164e8:	69bb      	ldr	r3, [r7, #24]
 80164ea:	791b      	ldrb	r3, [r3, #4]
 80164ec:	2201      	movs	r2, #1
 80164ee:	4313      	orrs	r3, r2
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	69bb      	ldr	r3, [r7, #24]
 80164f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	699b      	ldr	r3, [r3, #24]
 80164fe:	68ba      	ldr	r2, [r7, #8]
 8016500:	429a      	cmp	r2, r3
 8016502:	d3bf      	bcc.n	8016484 <remove_chain+0x58>
 8016504:	e000      	b.n	8016508 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8016506:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016508:	2300      	movs	r3, #0
}
 801650a:	0018      	movs	r0, r3
 801650c:	46bd      	mov	sp, r7
 801650e:	b008      	add	sp, #32
 8016510:	bdb0      	pop	{r4, r5, r7, pc}

08016512 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016512:	b5b0      	push	{r4, r5, r7, lr}
 8016514:	b088      	sub	sp, #32
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
 801651a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10d      	bne.n	8016544 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	691b      	ldr	r3, [r3, #16]
 801652c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801652e:	69bb      	ldr	r3, [r7, #24]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d004      	beq.n	801653e <create_chain+0x2c>
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	699b      	ldr	r3, [r3, #24]
 8016538:	69ba      	ldr	r2, [r7, #24]
 801653a:	429a      	cmp	r2, r3
 801653c:	d31d      	bcc.n	801657a <create_chain+0x68>
 801653e:	2301      	movs	r3, #1
 8016540:	61bb      	str	r3, [r7, #24]
 8016542:	e01a      	b.n	801657a <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016544:	683a      	ldr	r2, [r7, #0]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	0011      	movs	r1, r2
 801654a:	0018      	movs	r0, r3
 801654c:	f7ff fd64 	bl	8016018 <get_fat>
 8016550:	0003      	movs	r3, r0
 8016552:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b01      	cmp	r3, #1
 8016558:	d801      	bhi.n	801655e <create_chain+0x4c>
 801655a:	2301      	movs	r3, #1
 801655c:	e07b      	b.n	8016656 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	3301      	adds	r3, #1
 8016562:	d101      	bne.n	8016568 <create_chain+0x56>
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	e076      	b.n	8016656 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	699b      	ldr	r3, [r3, #24]
 801656c:	68fa      	ldr	r2, [r7, #12]
 801656e:	429a      	cmp	r2, r3
 8016570:	d201      	bcs.n	8016576 <create_chain+0x64>
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	e06f      	b.n	8016656 <create_chain+0x144>
		scl = clst;
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801657e:	69fb      	ldr	r3, [r7, #28]
 8016580:	3301      	adds	r3, #1
 8016582:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	699b      	ldr	r3, [r3, #24]
 8016588:	69fa      	ldr	r2, [r7, #28]
 801658a:	429a      	cmp	r2, r3
 801658c:	d307      	bcc.n	801659e <create_chain+0x8c>
				ncl = 2;
 801658e:	2302      	movs	r3, #2
 8016590:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016592:	69fa      	ldr	r2, [r7, #28]
 8016594:	69bb      	ldr	r3, [r7, #24]
 8016596:	429a      	cmp	r2, r3
 8016598:	d901      	bls.n	801659e <create_chain+0x8c>
 801659a:	2300      	movs	r3, #0
 801659c:	e05b      	b.n	8016656 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801659e:	69fa      	ldr	r2, [r7, #28]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	0011      	movs	r1, r2
 80165a4:	0018      	movs	r0, r3
 80165a6:	f7ff fd37 	bl	8016018 <get_fat>
 80165aa:	0003      	movs	r3, r0
 80165ac:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d00d      	beq.n	80165d0 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d002      	beq.n	80165c0 <create_chain+0xae>
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	3301      	adds	r3, #1
 80165be:	d101      	bne.n	80165c4 <create_chain+0xb2>
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	e048      	b.n	8016656 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80165c4:	69fa      	ldr	r2, [r7, #28]
 80165c6:	69bb      	ldr	r3, [r7, #24]
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d1d8      	bne.n	801657e <create_chain+0x6c>
 80165cc:	2300      	movs	r3, #0
 80165ce:	e042      	b.n	8016656 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80165d0:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80165d2:	2517      	movs	r5, #23
 80165d4:	197c      	adds	r4, r7, r5
 80165d6:	2301      	movs	r3, #1
 80165d8:	425a      	negs	r2, r3
 80165da:	69f9      	ldr	r1, [r7, #28]
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	0018      	movs	r0, r3
 80165e0:	f7ff fdf4 	bl	80161cc <put_fat>
 80165e4:	0003      	movs	r3, r0
 80165e6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80165e8:	197b      	adds	r3, r7, r5
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d10b      	bne.n	8016608 <create_chain+0xf6>
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d008      	beq.n	8016608 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80165f6:	197c      	adds	r4, r7, r5
 80165f8:	69fa      	ldr	r2, [r7, #28]
 80165fa:	6839      	ldr	r1, [r7, #0]
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	0018      	movs	r0, r3
 8016600:	f7ff fde4 	bl	80161cc <put_fat>
 8016604:	0003      	movs	r3, r0
 8016606:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016608:	2317      	movs	r3, #23
 801660a:	18fb      	adds	r3, r7, r3
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d116      	bne.n	8016640 <create_chain+0x12e>
		fs->last_clst = ncl;
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	69fa      	ldr	r2, [r7, #28]
 8016616:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	695a      	ldr	r2, [r3, #20]
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	699b      	ldr	r3, [r3, #24]
 8016620:	3b02      	subs	r3, #2
 8016622:	429a      	cmp	r2, r3
 8016624:	d804      	bhi.n	8016630 <create_chain+0x11e>
 8016626:	693b      	ldr	r3, [r7, #16]
 8016628:	695b      	ldr	r3, [r3, #20]
 801662a:	1e5a      	subs	r2, r3, #1
 801662c:	693b      	ldr	r3, [r7, #16]
 801662e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	791b      	ldrb	r3, [r3, #4]
 8016634:	2201      	movs	r2, #1
 8016636:	4313      	orrs	r3, r2
 8016638:	b2da      	uxtb	r2, r3
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	711a      	strb	r2, [r3, #4]
 801663e:	e009      	b.n	8016654 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016640:	2317      	movs	r3, #23
 8016642:	18fb      	adds	r3, r7, r3
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	2b01      	cmp	r3, #1
 8016648:	d102      	bne.n	8016650 <create_chain+0x13e>
 801664a:	2301      	movs	r3, #1
 801664c:	425b      	negs	r3, r3
 801664e:	e000      	b.n	8016652 <create_chain+0x140>
 8016650:	2301      	movs	r3, #1
 8016652:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016654:	69fb      	ldr	r3, [r7, #28]
}
 8016656:	0018      	movs	r0, r3
 8016658:	46bd      	mov	sp, r7
 801665a:	b008      	add	sp, #32
 801665c:	bdb0      	pop	{r4, r5, r7, pc}

0801665e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b086      	sub	sp, #24
 8016662:	af00      	add	r7, sp, #0
 8016664:	6078      	str	r0, [r7, #4]
 8016666:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016672:	3304      	adds	r3, #4
 8016674:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	899b      	ldrh	r3, [r3, #12]
 801667a:	0019      	movs	r1, r3
 801667c:	6838      	ldr	r0, [r7, #0]
 801667e:	f7e9 fd53 	bl	8000128 <__udivsi3>
 8016682:	0003      	movs	r3, r0
 8016684:	001a      	movs	r2, r3
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	895b      	ldrh	r3, [r3, #10]
 801668a:	0019      	movs	r1, r3
 801668c:	0010      	movs	r0, r2
 801668e:	f7e9 fd4b 	bl	8000128 <__udivsi3>
 8016692:	0003      	movs	r3, r0
 8016694:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	1d1a      	adds	r2, r3, #4
 801669a:	613a      	str	r2, [r7, #16]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d101      	bne.n	80166aa <clmt_clust+0x4c>
 80166a6:	2300      	movs	r3, #0
 80166a8:	e010      	b.n	80166cc <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d307      	bcc.n	80166c2 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 80166b2:	697a      	ldr	r2, [r7, #20]
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	617b      	str	r3, [r7, #20]
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	3304      	adds	r3, #4
 80166be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80166c0:	e7e9      	b.n	8016696 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 80166c2:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80166c4:	693b      	ldr	r3, [r7, #16]
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	18d3      	adds	r3, r2, r3
}
 80166cc:	0018      	movs	r0, r3
 80166ce:	46bd      	mov	sp, r7
 80166d0:	b006      	add	sp, #24
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80166d4:	b590      	push	{r4, r7, lr}
 80166d6:	b087      	sub	sp, #28
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80166e4:	683a      	ldr	r2, [r7, #0]
 80166e6:	2380      	movs	r3, #128	@ 0x80
 80166e8:	039b      	lsls	r3, r3, #14
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d203      	bcs.n	80166f6 <dir_sdi+0x22>
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	221f      	movs	r2, #31
 80166f2:	4013      	ands	r3, r2
 80166f4:	d001      	beq.n	80166fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80166f6:	2302      	movs	r3, #2
 80166f8:	e074      	b.n	80167e4 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	683a      	ldr	r2, [r7, #0]
 80166fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	689b      	ldr	r3, [r3, #8]
 8016704:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d106      	bne.n	801671a <dir_sdi+0x46>
 801670c:	693b      	ldr	r3, [r7, #16]
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	2b02      	cmp	r3, #2
 8016712:	d902      	bls.n	801671a <dir_sdi+0x46>
		clst = fs->dirbase;
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016718:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d10c      	bne.n	801673a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	095b      	lsrs	r3, r3, #5
 8016724:	693a      	ldr	r2, [r7, #16]
 8016726:	8912      	ldrh	r2, [r2, #8]
 8016728:	4293      	cmp	r3, r2
 801672a:	d301      	bcc.n	8016730 <dir_sdi+0x5c>
 801672c:	2302      	movs	r3, #2
 801672e:	e059      	b.n	80167e4 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	61da      	str	r2, [r3, #28]
 8016738:	e02f      	b.n	801679a <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	895b      	ldrh	r3, [r3, #10]
 801673e:	001a      	movs	r2, r3
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	899b      	ldrh	r3, [r3, #12]
 8016744:	4353      	muls	r3, r2
 8016746:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016748:	e01a      	b.n	8016780 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	697a      	ldr	r2, [r7, #20]
 801674e:	0011      	movs	r1, r2
 8016750:	0018      	movs	r0, r3
 8016752:	f7ff fc61 	bl	8016018 <get_fat>
 8016756:	0003      	movs	r3, r0
 8016758:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801675a:	697b      	ldr	r3, [r7, #20]
 801675c:	3301      	adds	r3, #1
 801675e:	d101      	bne.n	8016764 <dir_sdi+0x90>
 8016760:	2301      	movs	r3, #1
 8016762:	e03f      	b.n	80167e4 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	2b01      	cmp	r3, #1
 8016768:	d904      	bls.n	8016774 <dir_sdi+0xa0>
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	699b      	ldr	r3, [r3, #24]
 801676e:	697a      	ldr	r2, [r7, #20]
 8016770:	429a      	cmp	r2, r3
 8016772:	d301      	bcc.n	8016778 <dir_sdi+0xa4>
 8016774:	2302      	movs	r3, #2
 8016776:	e035      	b.n	80167e4 <dir_sdi+0x110>
			ofs -= csz;
 8016778:	683a      	ldr	r2, [r7, #0]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	1ad3      	subs	r3, r2, r3
 801677e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016780:	683a      	ldr	r2, [r7, #0]
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	429a      	cmp	r2, r3
 8016786:	d2e0      	bcs.n	801674a <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8016788:	697a      	ldr	r2, [r7, #20]
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	0011      	movs	r1, r2
 801678e:	0018      	movs	r0, r3
 8016790:	f7ff fc26 	bl	8015fe0 <clust2sect>
 8016794:	0002      	movs	r2, r0
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	697a      	ldr	r2, [r7, #20]
 801679e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	69db      	ldr	r3, [r3, #28]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d101      	bne.n	80167ac <dir_sdi+0xd8>
 80167a8:	2302      	movs	r3, #2
 80167aa:	e01b      	b.n	80167e4 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	69dc      	ldr	r4, [r3, #28]
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	899b      	ldrh	r3, [r3, #12]
 80167b4:	0019      	movs	r1, r3
 80167b6:	6838      	ldr	r0, [r7, #0]
 80167b8:	f7e9 fcb6 	bl	8000128 <__udivsi3>
 80167bc:	0003      	movs	r3, r0
 80167be:	18e2      	adds	r2, r4, r3
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	3334      	adds	r3, #52	@ 0x34
 80167c8:	001c      	movs	r4, r3
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	899b      	ldrh	r3, [r3, #12]
 80167ce:	001a      	movs	r2, r3
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	0011      	movs	r1, r2
 80167d4:	0018      	movs	r0, r3
 80167d6:	f7e9 fd2d 	bl	8000234 <__aeabi_uidivmod>
 80167da:	000b      	movs	r3, r1
 80167dc:	18e2      	adds	r2, r4, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80167e2:	2300      	movs	r3, #0
}
 80167e4:	0018      	movs	r0, r3
 80167e6:	46bd      	mov	sp, r7
 80167e8:	b007      	add	sp, #28
 80167ea:	bd90      	pop	{r4, r7, pc}

080167ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b087      	sub	sp, #28
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	695b      	ldr	r3, [r3, #20]
 8016800:	3320      	adds	r3, #32
 8016802:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	69db      	ldr	r3, [r3, #28]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d004      	beq.n	8016816 <dir_next+0x2a>
 801680c:	68ba      	ldr	r2, [r7, #8]
 801680e:	2380      	movs	r3, #128	@ 0x80
 8016810:	039b      	lsls	r3, r3, #14
 8016812:	429a      	cmp	r2, r3
 8016814:	d301      	bcc.n	801681a <dir_next+0x2e>
 8016816:	2304      	movs	r3, #4
 8016818:	e0c0      	b.n	801699c <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	899b      	ldrh	r3, [r3, #12]
 801681e:	001a      	movs	r2, r3
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	0011      	movs	r1, r2
 8016824:	0018      	movs	r0, r3
 8016826:	f7e9 fd05 	bl	8000234 <__aeabi_uidivmod>
 801682a:	1e0b      	subs	r3, r1, #0
 801682c:	d000      	beq.n	8016830 <dir_next+0x44>
 801682e:	e0a2      	b.n	8016976 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	69db      	ldr	r3, [r3, #28]
 8016834:	1c5a      	adds	r2, r3, #1
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	699b      	ldr	r3, [r3, #24]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10b      	bne.n	801685a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	095b      	lsrs	r3, r3, #5
 8016846:	68fa      	ldr	r2, [r7, #12]
 8016848:	8912      	ldrh	r2, [r2, #8]
 801684a:	4293      	cmp	r3, r2
 801684c:	d200      	bcs.n	8016850 <dir_next+0x64>
 801684e:	e092      	b.n	8016976 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2200      	movs	r2, #0
 8016854:	61da      	str	r2, [r3, #28]
 8016856:	2304      	movs	r3, #4
 8016858:	e0a0      	b.n	801699c <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	899b      	ldrh	r3, [r3, #12]
 801685e:	0019      	movs	r1, r3
 8016860:	68b8      	ldr	r0, [r7, #8]
 8016862:	f7e9 fc61 	bl	8000128 <__udivsi3>
 8016866:	0003      	movs	r3, r0
 8016868:	001a      	movs	r2, r3
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	895b      	ldrh	r3, [r3, #10]
 801686e:	3b01      	subs	r3, #1
 8016870:	4013      	ands	r3, r2
 8016872:	d000      	beq.n	8016876 <dir_next+0x8a>
 8016874:	e07f      	b.n	8016976 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016876:	687a      	ldr	r2, [r7, #4]
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	699b      	ldr	r3, [r3, #24]
 801687c:	0019      	movs	r1, r3
 801687e:	0010      	movs	r0, r2
 8016880:	f7ff fbca 	bl	8016018 <get_fat>
 8016884:	0003      	movs	r3, r0
 8016886:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d801      	bhi.n	8016892 <dir_next+0xa6>
 801688e:	2302      	movs	r3, #2
 8016890:	e084      	b.n	801699c <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	3301      	adds	r3, #1
 8016896:	d101      	bne.n	801689c <dir_next+0xb0>
 8016898:	2301      	movs	r3, #1
 801689a:	e07f      	b.n	801699c <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	699b      	ldr	r3, [r3, #24]
 80168a0:	697a      	ldr	r2, [r7, #20]
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d35b      	bcc.n	801695e <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d104      	bne.n	80168b6 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	61da      	str	r2, [r3, #28]
 80168b2:	2304      	movs	r3, #4
 80168b4:	e072      	b.n	801699c <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80168b6:	687a      	ldr	r2, [r7, #4]
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	699b      	ldr	r3, [r3, #24]
 80168bc:	0019      	movs	r1, r3
 80168be:	0010      	movs	r0, r2
 80168c0:	f7ff fe27 	bl	8016512 <create_chain>
 80168c4:	0003      	movs	r3, r0
 80168c6:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <dir_next+0xe6>
 80168ce:	2307      	movs	r3, #7
 80168d0:	e064      	b.n	801699c <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d101      	bne.n	80168dc <dir_next+0xf0>
 80168d8:	2302      	movs	r3, #2
 80168da:	e05f      	b.n	801699c <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	3301      	adds	r3, #1
 80168e0:	d101      	bne.n	80168e6 <dir_next+0xfa>
 80168e2:	2301      	movs	r3, #1
 80168e4:	e05a      	b.n	801699c <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	0018      	movs	r0, r3
 80168ea:	f7ff fa7f 	bl	8015dec <sync_window>
 80168ee:	1e03      	subs	r3, r0, #0
 80168f0:	d001      	beq.n	80168f6 <dir_next+0x10a>
 80168f2:	2301      	movs	r3, #1
 80168f4:	e052      	b.n	801699c <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	3334      	adds	r3, #52	@ 0x34
 80168fa:	0018      	movs	r0, r3
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	899b      	ldrh	r3, [r3, #12]
 8016900:	001a      	movs	r2, r3
 8016902:	2100      	movs	r1, #0
 8016904:	f7ff f8b1 	bl	8015a6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016908:	2300      	movs	r3, #0
 801690a:	613b      	str	r3, [r7, #16]
 801690c:	697a      	ldr	r2, [r7, #20]
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	0011      	movs	r1, r2
 8016912:	0018      	movs	r0, r3
 8016914:	f7ff fb64 	bl	8015fe0 <clust2sect>
 8016918:	0002      	movs	r2, r0
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	631a      	str	r2, [r3, #48]	@ 0x30
 801691e:	e012      	b.n	8016946 <dir_next+0x15a>
						fs->wflag = 1;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	2201      	movs	r2, #1
 8016924:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	0018      	movs	r0, r3
 801692a:	f7ff fa5f 	bl	8015dec <sync_window>
 801692e:	1e03      	subs	r3, r0, #0
 8016930:	d001      	beq.n	8016936 <dir_next+0x14a>
 8016932:	2301      	movs	r3, #1
 8016934:	e032      	b.n	801699c <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	3301      	adds	r3, #1
 801693a:	613b      	str	r3, [r7, #16]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016940:	1c5a      	adds	r2, r3, #1
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	631a      	str	r2, [r3, #48]	@ 0x30
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	895b      	ldrh	r3, [r3, #10]
 801694a:	001a      	movs	r2, r3
 801694c:	693b      	ldr	r3, [r7, #16]
 801694e:	4293      	cmp	r3, r2
 8016950:	d3e6      	bcc.n	8016920 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	1ad2      	subs	r2, r2, r3
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	697a      	ldr	r2, [r7, #20]
 8016962:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016964:	697a      	ldr	r2, [r7, #20]
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	0011      	movs	r1, r2
 801696a:	0018      	movs	r0, r3
 801696c:	f7ff fb38 	bl	8015fe0 <clust2sect>
 8016970:	0002      	movs	r2, r0
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	68ba      	ldr	r2, [r7, #8]
 801697a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3334      	adds	r3, #52	@ 0x34
 8016980:	001c      	movs	r4, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	899b      	ldrh	r3, [r3, #12]
 8016986:	001a      	movs	r2, r3
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	0011      	movs	r1, r2
 801698c:	0018      	movs	r0, r3
 801698e:	f7e9 fc51 	bl	8000234 <__aeabi_uidivmod>
 8016992:	000b      	movs	r3, r1
 8016994:	18e2      	adds	r2, r4, r3
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801699a:	2300      	movs	r3, #0
}
 801699c:	0018      	movs	r0, r3
 801699e:	46bd      	mov	sp, r7
 80169a0:	b007      	add	sp, #28
 80169a2:	bd90      	pop	{r4, r7, pc}

080169a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80169a4:	b5b0      	push	{r4, r5, r7, lr}
 80169a6:	b086      	sub	sp, #24
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80169b4:	2517      	movs	r5, #23
 80169b6:	197c      	adds	r4, r7, r5
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2100      	movs	r1, #0
 80169bc:	0018      	movs	r0, r3
 80169be:	f7ff fe89 	bl	80166d4 <dir_sdi>
 80169c2:	0003      	movs	r3, r0
 80169c4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80169c6:	197b      	adds	r3, r7, r5
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d133      	bne.n	8016a36 <dir_alloc+0x92>
		n = 0;
 80169ce:	2300      	movs	r3, #0
 80169d0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	69da      	ldr	r2, [r3, #28]
 80169d6:	2517      	movs	r5, #23
 80169d8:	197c      	adds	r4, r7, r5
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	0011      	movs	r1, r2
 80169de:	0018      	movs	r0, r3
 80169e0:	f7ff fa4c 	bl	8015e7c <move_window>
 80169e4:	0003      	movs	r3, r0
 80169e6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80169e8:	197b      	adds	r3, r7, r5
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d121      	bne.n	8016a34 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6a1b      	ldr	r3, [r3, #32]
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	2be5      	cmp	r3, #229	@ 0xe5
 80169f8:	d004      	beq.n	8016a04 <dir_alloc+0x60>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	6a1b      	ldr	r3, [r3, #32]
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d107      	bne.n	8016a14 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	3301      	adds	r3, #1
 8016a08:	613b      	str	r3, [r7, #16]
 8016a0a:	693a      	ldr	r2, [r7, #16]
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d102      	bne.n	8016a18 <dir_alloc+0x74>
 8016a12:	e010      	b.n	8016a36 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016a14:	2300      	movs	r3, #0
 8016a16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016a18:	2517      	movs	r5, #23
 8016a1a:	197c      	adds	r4, r7, r5
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2101      	movs	r1, #1
 8016a20:	0018      	movs	r0, r3
 8016a22:	f7ff fee3 	bl	80167ec <dir_next>
 8016a26:	0003      	movs	r3, r0
 8016a28:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016a2a:	197b      	adds	r3, r7, r5
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d0cf      	beq.n	80169d2 <dir_alloc+0x2e>
 8016a32:	e000      	b.n	8016a36 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8016a34:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016a36:	2217      	movs	r2, #23
 8016a38:	18bb      	adds	r3, r7, r2
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	2b04      	cmp	r3, #4
 8016a3e:	d102      	bne.n	8016a46 <dir_alloc+0xa2>
 8016a40:	18bb      	adds	r3, r7, r2
 8016a42:	2207      	movs	r2, #7
 8016a44:	701a      	strb	r2, [r3, #0]
	return res;
 8016a46:	2317      	movs	r3, #23
 8016a48:	18fb      	adds	r3, r7, r3
 8016a4a:	781b      	ldrb	r3, [r3, #0]
}
 8016a4c:	0018      	movs	r0, r3
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	b006      	add	sp, #24
 8016a52:	bdb0      	pop	{r4, r5, r7, pc}

08016a54 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b084      	sub	sp, #16
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	331a      	adds	r3, #26
 8016a62:	0018      	movs	r0, r3
 8016a64:	f7fe ff5e 	bl	8015924 <ld_word>
 8016a68:	0003      	movs	r3, r0
 8016a6a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	2b03      	cmp	r3, #3
 8016a72:	d109      	bne.n	8016a88 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	3314      	adds	r3, #20
 8016a78:	0018      	movs	r0, r3
 8016a7a:	f7fe ff53 	bl	8015924 <ld_word>
 8016a7e:	0003      	movs	r3, r0
 8016a80:	041b      	lsls	r3, r3, #16
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	4313      	orrs	r3, r2
 8016a86:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016a88:	68fb      	ldr	r3, [r7, #12]
}
 8016a8a:	0018      	movs	r0, r3
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	b004      	add	sp, #16
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016a92:	b580      	push	{r7, lr}
 8016a94:	b084      	sub	sp, #16
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	60f8      	str	r0, [r7, #12]
 8016a9a:	60b9      	str	r1, [r7, #8]
 8016a9c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	331a      	adds	r3, #26
 8016aa2:	687a      	ldr	r2, [r7, #4]
 8016aa4:	b292      	uxth	r2, r2
 8016aa6:	0011      	movs	r1, r2
 8016aa8:	0018      	movs	r0, r3
 8016aaa:	f7fe ff77 	bl	801599c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	2b03      	cmp	r3, #3
 8016ab4:	d109      	bne.n	8016aca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	3314      	adds	r3, #20
 8016aba:	001a      	movs	r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	0c1b      	lsrs	r3, r3, #16
 8016ac0:	b29b      	uxth	r3, r3
 8016ac2:	0019      	movs	r1, r3
 8016ac4:	0010      	movs	r0, r2
 8016ac6:	f7fe ff69 	bl	801599c <st_word>
	}
}
 8016aca:	46c0      	nop			@ (mov r8, r8)
 8016acc:	46bd      	mov	sp, r7
 8016ace:	b004      	add	sp, #16
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016ad2:	b5b0      	push	{r4, r5, r7, lr}
 8016ad4:	b086      	sub	sp, #24
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016ae0:	2517      	movs	r5, #23
 8016ae2:	197c      	adds	r4, r7, r5
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	0018      	movs	r0, r3
 8016aea:	f7ff fdf3 	bl	80166d4 <dir_sdi>
 8016aee:	0003      	movs	r3, r0
 8016af0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8016af2:	197b      	adds	r3, r7, r5
 8016af4:	781b      	ldrb	r3, [r3, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <dir_find+0x2e>
 8016afa:	197b      	adds	r3, r7, r5
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	e04c      	b.n	8016b9a <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	69da      	ldr	r2, [r3, #28]
 8016b04:	2517      	movs	r5, #23
 8016b06:	197c      	adds	r4, r7, r5
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	0011      	movs	r1, r2
 8016b0c:	0018      	movs	r0, r3
 8016b0e:	f7ff f9b5 	bl	8015e7c <move_window>
 8016b12:	0003      	movs	r3, r0
 8016b14:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8016b16:	0029      	movs	r1, r5
 8016b18:	187b      	adds	r3, r7, r1
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d136      	bne.n	8016b8e <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6a1a      	ldr	r2, [r3, #32]
 8016b24:	200f      	movs	r0, #15
 8016b26:	183b      	adds	r3, r7, r0
 8016b28:	7812      	ldrb	r2, [r2, #0]
 8016b2a:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016b2c:	183b      	adds	r3, r7, r0
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d103      	bne.n	8016b3c <dir_find+0x6a>
 8016b34:	187b      	adds	r3, r7, r1
 8016b36:	2204      	movs	r2, #4
 8016b38:	701a      	strb	r2, [r3, #0]
 8016b3a:	e02b      	b.n	8016b94 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6a1b      	ldr	r3, [r3, #32]
 8016b40:	330b      	adds	r3, #11
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	223f      	movs	r2, #63	@ 0x3f
 8016b46:	4013      	ands	r3, r2
 8016b48:	b2da      	uxtb	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	6a1b      	ldr	r3, [r3, #32]
 8016b52:	330b      	adds	r3, #11
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	001a      	movs	r2, r3
 8016b58:	2308      	movs	r3, #8
 8016b5a:	4013      	ands	r3, r2
 8016b5c:	d109      	bne.n	8016b72 <dir_find+0xa0>
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6a18      	ldr	r0, [r3, #32]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	3324      	adds	r3, #36	@ 0x24
 8016b66:	220b      	movs	r2, #11
 8016b68:	0019      	movs	r1, r3
 8016b6a:	f7fe ff97 	bl	8015a9c <mem_cmp>
 8016b6e:	1e03      	subs	r3, r0, #0
 8016b70:	d00f      	beq.n	8016b92 <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016b72:	2517      	movs	r5, #23
 8016b74:	197c      	adds	r4, r7, r5
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2100      	movs	r1, #0
 8016b7a:	0018      	movs	r0, r3
 8016b7c:	f7ff fe36 	bl	80167ec <dir_next>
 8016b80:	0003      	movs	r3, r0
 8016b82:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8016b84:	197b      	adds	r3, r7, r5
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d0b9      	beq.n	8016b00 <dir_find+0x2e>
 8016b8c:	e002      	b.n	8016b94 <dir_find+0xc2>
		if (res != FR_OK) break;
 8016b8e:	46c0      	nop			@ (mov r8, r8)
 8016b90:	e000      	b.n	8016b94 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016b92:	46c0      	nop			@ (mov r8, r8)

	return res;
 8016b94:	2317      	movs	r3, #23
 8016b96:	18fb      	adds	r3, r7, r3
 8016b98:	781b      	ldrb	r3, [r3, #0]
}
 8016b9a:	0018      	movs	r0, r3
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	b006      	add	sp, #24
 8016ba0:	bdb0      	pop	{r4, r5, r7, pc}

08016ba2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016ba2:	b5b0      	push	{r4, r5, r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016bb0:	250f      	movs	r5, #15
 8016bb2:	197c      	adds	r4, r7, r5
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	0018      	movs	r0, r3
 8016bba:	f7ff fef3 	bl	80169a4 <dir_alloc>
 8016bbe:	0003      	movs	r3, r0
 8016bc0:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016bc2:	197b      	adds	r3, r7, r5
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d11f      	bne.n	8016c0a <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	69da      	ldr	r2, [r3, #28]
 8016bce:	197c      	adds	r4, r7, r5
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	0011      	movs	r1, r2
 8016bd4:	0018      	movs	r0, r3
 8016bd6:	f7ff f951 	bl	8015e7c <move_window>
 8016bda:	0003      	movs	r3, r0
 8016bdc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8016bde:	197b      	adds	r3, r7, r5
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d111      	bne.n	8016c0a <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	6a1b      	ldr	r3, [r3, #32]
 8016bea:	2220      	movs	r2, #32
 8016bec:	2100      	movs	r1, #0
 8016bee:	0018      	movs	r0, r3
 8016bf0:	f7fe ff3b 	bl	8015a6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6a18      	ldr	r0, [r3, #32]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	3324      	adds	r3, #36	@ 0x24
 8016bfc:	220b      	movs	r2, #11
 8016bfe:	0019      	movs	r1, r3
 8016c00:	f7fe ff14 	bl	8015a2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016c04:	68bb      	ldr	r3, [r7, #8]
 8016c06:	2201      	movs	r2, #1
 8016c08:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016c0a:	230f      	movs	r3, #15
 8016c0c:	18fb      	adds	r3, r7, r3
 8016c0e:	781b      	ldrb	r3, [r3, #0]
}
 8016c10:	0018      	movs	r0, r3
 8016c12:	46bd      	mov	sp, r7
 8016c14:	b004      	add	sp, #16
 8016c16:	bdb0      	pop	{r4, r5, r7, pc}

08016c18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b088      	sub	sp, #32
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
 8016c20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	60fb      	str	r3, [r7, #12]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	3324      	adds	r3, #36	@ 0x24
 8016c2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	220b      	movs	r2, #11
 8016c32:	2120      	movs	r1, #32
 8016c34:	0018      	movs	r0, r3
 8016c36:	f7fe ff18 	bl	8015a6a <mem_set>
	si = i = 0; ni = 8;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	613b      	str	r3, [r7, #16]
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	61fb      	str	r3, [r7, #28]
 8016c42:	2308      	movs	r3, #8
 8016c44:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	1c5a      	adds	r2, r3, #1
 8016c4a:	61fa      	str	r2, [r7, #28]
 8016c4c:	68fa      	ldr	r2, [r7, #12]
 8016c4e:	18d2      	adds	r2, r2, r3
 8016c50:	211b      	movs	r1, #27
 8016c52:	187b      	adds	r3, r7, r1
 8016c54:	7812      	ldrb	r2, [r2, #0]
 8016c56:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016c58:	000a      	movs	r2, r1
 8016c5a:	18bb      	adds	r3, r7, r2
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	2b20      	cmp	r3, #32
 8016c60:	d800      	bhi.n	8016c64 <create_name+0x4c>
 8016c62:	e062      	b.n	8016d2a <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016c64:	18bb      	adds	r3, r7, r2
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c6a:	d007      	beq.n	8016c7c <create_name+0x64>
 8016c6c:	18bb      	adds	r3, r7, r2
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b5c      	cmp	r3, #92	@ 0x5c
 8016c72:	d110      	bne.n	8016c96 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016c74:	e002      	b.n	8016c7c <create_name+0x64>
 8016c76:	69fb      	ldr	r3, [r7, #28]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	61fb      	str	r3, [r7, #28]
 8016c7c:	68fa      	ldr	r2, [r7, #12]
 8016c7e:	69fb      	ldr	r3, [r7, #28]
 8016c80:	18d3      	adds	r3, r2, r3
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c86:	d0f6      	beq.n	8016c76 <create_name+0x5e>
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	18d3      	adds	r3, r2, r3
 8016c8e:	781b      	ldrb	r3, [r3, #0]
 8016c90:	2b5c      	cmp	r3, #92	@ 0x5c
 8016c92:	d0f0      	beq.n	8016c76 <create_name+0x5e>
			break;
 8016c94:	e04a      	b.n	8016d2c <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8016c96:	231b      	movs	r3, #27
 8016c98:	18fb      	adds	r3, r7, r3
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c9e:	d003      	beq.n	8016ca8 <create_name+0x90>
 8016ca0:	693a      	ldr	r2, [r7, #16]
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d30e      	bcc.n	8016cc6 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	2b0b      	cmp	r3, #11
 8016cac:	d004      	beq.n	8016cb8 <create_name+0xa0>
 8016cae:	231b      	movs	r3, #27
 8016cb0:	18fb      	adds	r3, r7, r3
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8016cb6:	d001      	beq.n	8016cbc <create_name+0xa4>
 8016cb8:	2306      	movs	r3, #6
 8016cba:	e054      	b.n	8016d66 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8016cbc:	2308      	movs	r3, #8
 8016cbe:	613b      	str	r3, [r7, #16]
 8016cc0:	230b      	movs	r3, #11
 8016cc2:	617b      	str	r3, [r7, #20]
			continue;
 8016cc4:	e030      	b.n	8016d28 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016cc6:	211b      	movs	r1, #27
 8016cc8:	187b      	adds	r3, r7, r1
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	b25b      	sxtb	r3, r3
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	da07      	bge.n	8016ce2 <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8016cd2:	187b      	adds	r3, r7, r1
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	3b80      	subs	r3, #128	@ 0x80
 8016cd8:	001a      	movs	r2, r3
 8016cda:	187b      	adds	r3, r7, r1
 8016cdc:	4924      	ldr	r1, [pc, #144]	@ (8016d70 <create_name+0x158>)
 8016cde:	5c8a      	ldrb	r2, [r1, r2]
 8016ce0:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016ce2:	231b      	movs	r3, #27
 8016ce4:	18fb      	adds	r3, r7, r3
 8016ce6:	781a      	ldrb	r2, [r3, #0]
 8016ce8:	4b22      	ldr	r3, [pc, #136]	@ (8016d74 <create_name+0x15c>)
 8016cea:	0011      	movs	r1, r2
 8016cec:	0018      	movs	r0, r3
 8016cee:	f7fe fefa 	bl	8015ae6 <chk_chr>
 8016cf2:	1e03      	subs	r3, r0, #0
 8016cf4:	d001      	beq.n	8016cfa <create_name+0xe2>
 8016cf6:	2306      	movs	r3, #6
 8016cf8:	e035      	b.n	8016d66 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8016cfa:	221b      	movs	r2, #27
 8016cfc:	18bb      	adds	r3, r7, r2
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b60      	cmp	r3, #96	@ 0x60
 8016d02:	d908      	bls.n	8016d16 <create_name+0xfe>
 8016d04:	18bb      	adds	r3, r7, r2
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b7a      	cmp	r3, #122	@ 0x7a
 8016d0a:	d804      	bhi.n	8016d16 <create_name+0xfe>
 8016d0c:	18bb      	adds	r3, r7, r2
 8016d0e:	18ba      	adds	r2, r7, r2
 8016d10:	7812      	ldrb	r2, [r2, #0]
 8016d12:	3a20      	subs	r2, #32
 8016d14:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	1c5a      	adds	r2, r3, #1
 8016d1a:	613a      	str	r2, [r7, #16]
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	18d3      	adds	r3, r2, r3
 8016d20:	221b      	movs	r2, #27
 8016d22:	18ba      	adds	r2, r7, r2
 8016d24:	7812      	ldrb	r2, [r2, #0]
 8016d26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016d28:	e78d      	b.n	8016c46 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016d2a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	69fb      	ldr	r3, [r7, #28]
 8016d30:	18d2      	adds	r2, r2, r3
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d101      	bne.n	8016d40 <create_name+0x128>
 8016d3c:	2306      	movs	r3, #6
 8016d3e:	e012      	b.n	8016d66 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	2be5      	cmp	r3, #229	@ 0xe5
 8016d46:	d102      	bne.n	8016d4e <create_name+0x136>
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	2205      	movs	r2, #5
 8016d4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016d4e:	231b      	movs	r3, #27
 8016d50:	18fb      	adds	r3, r7, r3
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	2b20      	cmp	r3, #32
 8016d56:	d801      	bhi.n	8016d5c <create_name+0x144>
 8016d58:	2204      	movs	r2, #4
 8016d5a:	e000      	b.n	8016d5e <create_name+0x146>
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	68bb      	ldr	r3, [r7, #8]
 8016d60:	330b      	adds	r3, #11
 8016d62:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016d64:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016d66:	0018      	movs	r0, r3
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	b008      	add	sp, #32
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	46c0      	nop			@ (mov r8, r8)
 8016d70:	08019608 	.word	0x08019608
 8016d74:	080193dc 	.word	0x080193dc

08016d78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016d78:	b5b0      	push	{r4, r5, r7, lr}
 8016d7a:	b086      	sub	sp, #24
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016d86:	693b      	ldr	r3, [r7, #16]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016d8c:	e002      	b.n	8016d94 <follow_path+0x1c>
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	3301      	adds	r3, #1
 8016d92:	603b      	str	r3, [r7, #0]
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d9a:	d0f8      	beq.n	8016d8e <follow_path+0x16>
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	2b5c      	cmp	r3, #92	@ 0x5c
 8016da2:	d0f4      	beq.n	8016d8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	2200      	movs	r2, #0
 8016da8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	2b1f      	cmp	r3, #31
 8016db0:	d80d      	bhi.n	8016dce <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	222f      	movs	r2, #47	@ 0x2f
 8016db6:	2180      	movs	r1, #128	@ 0x80
 8016db8:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8016dba:	2317      	movs	r3, #23
 8016dbc:	18fc      	adds	r4, r7, r3
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2100      	movs	r1, #0
 8016dc2:	0018      	movs	r0, r3
 8016dc4:	f7ff fc86 	bl	80166d4 <dir_sdi>
 8016dc8:	0003      	movs	r3, r0
 8016dca:	7023      	strb	r3, [r4, #0]
 8016dcc:	e057      	b.n	8016e7e <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016dce:	2517      	movs	r5, #23
 8016dd0:	197c      	adds	r4, r7, r5
 8016dd2:	003a      	movs	r2, r7
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	0011      	movs	r1, r2
 8016dd8:	0018      	movs	r0, r3
 8016dda:	f7ff ff1d 	bl	8016c18 <create_name>
 8016dde:	0003      	movs	r3, r0
 8016de0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016de2:	197b      	adds	r3, r7, r5
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d144      	bne.n	8016e74 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016dea:	197c      	adds	r4, r7, r5
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	0018      	movs	r0, r3
 8016df0:	f7ff fe6f 	bl	8016ad2 <dir_find>
 8016df4:	0003      	movs	r3, r0
 8016df6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8016df8:	200b      	movs	r0, #11
 8016dfa:	183b      	adds	r3, r7, r0
 8016dfc:	687a      	ldr	r2, [r7, #4]
 8016dfe:	212f      	movs	r1, #47	@ 0x2f
 8016e00:	5c52      	ldrb	r2, [r2, r1]
 8016e02:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8016e04:	197b      	adds	r3, r7, r5
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d00c      	beq.n	8016e26 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016e0c:	197b      	adds	r3, r7, r5
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	2b04      	cmp	r3, #4
 8016e12:	d131      	bne.n	8016e78 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016e14:	183b      	adds	r3, r7, r0
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	2204      	movs	r2, #4
 8016e1a:	4013      	ands	r3, r2
 8016e1c:	d12c      	bne.n	8016e78 <follow_path+0x100>
 8016e1e:	197b      	adds	r3, r7, r5
 8016e20:	2205      	movs	r2, #5
 8016e22:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8016e24:	e028      	b.n	8016e78 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016e26:	230b      	movs	r3, #11
 8016e28:	18fb      	adds	r3, r7, r3
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	2204      	movs	r2, #4
 8016e2e:	4013      	ands	r3, r2
 8016e30:	d124      	bne.n	8016e7c <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	799b      	ldrb	r3, [r3, #6]
 8016e36:	001a      	movs	r2, r3
 8016e38:	2310      	movs	r3, #16
 8016e3a:	4013      	ands	r3, r2
 8016e3c:	d104      	bne.n	8016e48 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8016e3e:	2317      	movs	r3, #23
 8016e40:	18fb      	adds	r3, r7, r3
 8016e42:	2205      	movs	r2, #5
 8016e44:	701a      	strb	r2, [r3, #0]
 8016e46:	e01a      	b.n	8016e7e <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	3334      	adds	r3, #52	@ 0x34
 8016e4c:	001c      	movs	r4, r3
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	695a      	ldr	r2, [r3, #20]
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	899b      	ldrh	r3, [r3, #12]
 8016e56:	0019      	movs	r1, r3
 8016e58:	0010      	movs	r0, r2
 8016e5a:	f7e9 f9eb 	bl	8000234 <__aeabi_uidivmod>
 8016e5e:	000b      	movs	r3, r1
 8016e60:	18e2      	adds	r2, r4, r3
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	0011      	movs	r1, r2
 8016e66:	0018      	movs	r0, r3
 8016e68:	f7ff fdf4 	bl	8016a54 <ld_clust>
 8016e6c:	0002      	movs	r2, r0
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016e72:	e7ac      	b.n	8016dce <follow_path+0x56>
			if (res != FR_OK) break;
 8016e74:	46c0      	nop			@ (mov r8, r8)
 8016e76:	e002      	b.n	8016e7e <follow_path+0x106>
				break;
 8016e78:	46c0      	nop			@ (mov r8, r8)
 8016e7a:	e000      	b.n	8016e7e <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016e7c:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 8016e7e:	2317      	movs	r3, #23
 8016e80:	18fb      	adds	r3, r7, r3
 8016e82:	781b      	ldrb	r3, [r3, #0]
}
 8016e84:	0018      	movs	r0, r3
 8016e86:	46bd      	mov	sp, r7
 8016e88:	b006      	add	sp, #24
 8016e8a:	bdb0      	pop	{r4, r5, r7, pc}

08016e8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016e94:	2301      	movs	r3, #1
 8016e96:	425b      	negs	r3, r3
 8016e98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d031      	beq.n	8016f06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	617b      	str	r3, [r7, #20]
 8016ea8:	e002      	b.n	8016eb0 <get_ldnumber+0x24>
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	3301      	adds	r3, #1
 8016eae:	617b      	str	r3, [r7, #20]
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	2b20      	cmp	r3, #32
 8016eb6:	d903      	bls.n	8016ec0 <get_ldnumber+0x34>
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b3a      	cmp	r3, #58	@ 0x3a
 8016ebe:	d1f4      	bne.n	8016eaa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b3a      	cmp	r3, #58	@ 0x3a
 8016ec6:	d11c      	bne.n	8016f02 <get_ldnumber+0x76>
			tp = *path;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	1c5a      	adds	r2, r3, #1
 8016ed2:	60fa      	str	r2, [r7, #12]
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	3b30      	subs	r3, #48	@ 0x30
 8016ed8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	2b09      	cmp	r3, #9
 8016ede:	d80e      	bhi.n	8016efe <get_ldnumber+0x72>
 8016ee0:	68fa      	ldr	r2, [r7, #12]
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d10a      	bne.n	8016efe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d107      	bne.n	8016efe <get_ldnumber+0x72>
					vol = (int)i;
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	617b      	str	r3, [r7, #20]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	697a      	ldr	r2, [r7, #20]
 8016efc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	e002      	b.n	8016f08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016f02:	2300      	movs	r3, #0
 8016f04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016f06:	693b      	ldr	r3, [r7, #16]
}
 8016f08:	0018      	movs	r0, r3
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	b006      	add	sp, #24
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	70da      	strb	r2, [r3, #3]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2201      	movs	r2, #1
 8016f24:	4252      	negs	r2, r2
 8016f26:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016f28:	683a      	ldr	r2, [r7, #0]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	0011      	movs	r1, r2
 8016f2e:	0018      	movs	r0, r3
 8016f30:	f7fe ffa4 	bl	8015e7c <move_window>
 8016f34:	1e03      	subs	r3, r0, #0
 8016f36:	d001      	beq.n	8016f3c <check_fs+0x2c>
 8016f38:	2304      	movs	r3, #4
 8016f3a:	e037      	b.n	8016fac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	3334      	adds	r3, #52	@ 0x34
 8016f40:	33ff      	adds	r3, #255	@ 0xff
 8016f42:	33ff      	adds	r3, #255	@ 0xff
 8016f44:	0018      	movs	r0, r3
 8016f46:	f7fe fced 	bl	8015924 <ld_word>
 8016f4a:	0003      	movs	r3, r0
 8016f4c:	001a      	movs	r2, r3
 8016f4e:	4b19      	ldr	r3, [pc, #100]	@ (8016fb4 <check_fs+0xa4>)
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d001      	beq.n	8016f58 <check_fs+0x48>
 8016f54:	2303      	movs	r3, #3
 8016f56:	e029      	b.n	8016fac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2234      	movs	r2, #52	@ 0x34
 8016f5c:	5c9b      	ldrb	r3, [r3, r2]
 8016f5e:	2be9      	cmp	r3, #233	@ 0xe9
 8016f60:	d009      	beq.n	8016f76 <check_fs+0x66>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2234      	movs	r2, #52	@ 0x34
 8016f66:	5c9b      	ldrb	r3, [r3, r2]
 8016f68:	2beb      	cmp	r3, #235	@ 0xeb
 8016f6a:	d11e      	bne.n	8016faa <check_fs+0x9a>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2236      	movs	r2, #54	@ 0x36
 8016f70:	5c9b      	ldrb	r3, [r3, r2]
 8016f72:	2b90      	cmp	r3, #144	@ 0x90
 8016f74:	d119      	bne.n	8016faa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	3334      	adds	r3, #52	@ 0x34
 8016f7a:	3336      	adds	r3, #54	@ 0x36
 8016f7c:	0018      	movs	r0, r3
 8016f7e:	f7fe fcec 	bl	801595a <ld_dword>
 8016f82:	0003      	movs	r3, r0
 8016f84:	021b      	lsls	r3, r3, #8
 8016f86:	0a1b      	lsrs	r3, r3, #8
 8016f88:	4a0b      	ldr	r2, [pc, #44]	@ (8016fb8 <check_fs+0xa8>)
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	d101      	bne.n	8016f92 <check_fs+0x82>
 8016f8e:	2300      	movs	r3, #0
 8016f90:	e00c      	b.n	8016fac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	3334      	adds	r3, #52	@ 0x34
 8016f96:	3352      	adds	r3, #82	@ 0x52
 8016f98:	0018      	movs	r0, r3
 8016f9a:	f7fe fcde 	bl	801595a <ld_dword>
 8016f9e:	0003      	movs	r3, r0
 8016fa0:	4a06      	ldr	r2, [pc, #24]	@ (8016fbc <check_fs+0xac>)
 8016fa2:	4293      	cmp	r3, r2
 8016fa4:	d101      	bne.n	8016faa <check_fs+0x9a>
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	e000      	b.n	8016fac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016faa:	2302      	movs	r3, #2
}
 8016fac:	0018      	movs	r0, r3
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	b002      	add	sp, #8
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	0000aa55 	.word	0x0000aa55
 8016fb8:	00544146 	.word	0x00544146
 8016fbc:	33544146 	.word	0x33544146

08016fc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016fc0:	b5b0      	push	{r4, r5, r7, lr}
 8016fc2:	b096      	sub	sp, #88	@ 0x58
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	60f8      	str	r0, [r7, #12]
 8016fc8:	60b9      	str	r1, [r7, #8]
 8016fca:	1dfb      	adds	r3, r7, #7
 8016fcc:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	0018      	movs	r0, r3
 8016fd8:	f7ff ff58 	bl	8016e8c <get_ldnumber>
 8016fdc:	0003      	movs	r3, r0
 8016fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	da01      	bge.n	8016fea <find_volume+0x2a>
 8016fe6:	230b      	movs	r3, #11
 8016fe8:	e280      	b.n	80174ec <find_volume+0x52c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016fea:	4bc2      	ldr	r3, [pc, #776]	@ (80172f4 <find_volume+0x334>)
 8016fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016fee:	0092      	lsls	r2, r2, #2
 8016ff0:	58d3      	ldr	r3, [r2, r3]
 8016ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d101      	bne.n	8016ffe <find_volume+0x3e>
 8016ffa:	230c      	movs	r3, #12
 8016ffc:	e276      	b.n	80174ec <find_volume+0x52c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017002:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017004:	1dfb      	adds	r3, r7, #7
 8017006:	1dfa      	adds	r2, r7, #7
 8017008:	7812      	ldrb	r2, [r2, #0]
 801700a:	2101      	movs	r1, #1
 801700c:	438a      	bics	r2, r1
 801700e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017012:	781b      	ldrb	r3, [r3, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d01b      	beq.n	8017050 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8017018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801701a:	785b      	ldrb	r3, [r3, #1]
 801701c:	2537      	movs	r5, #55	@ 0x37
 801701e:	197c      	adds	r4, r7, r5
 8017020:	0018      	movs	r0, r3
 8017022:	f7fe fbb5 	bl	8015790 <disk_status>
 8017026:	0003      	movs	r3, r0
 8017028:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801702a:	0029      	movs	r1, r5
 801702c:	187b      	adds	r3, r7, r1
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	2201      	movs	r2, #1
 8017032:	4013      	ands	r3, r2
 8017034:	d10c      	bne.n	8017050 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017036:	1dfb      	adds	r3, r7, #7
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d006      	beq.n	801704c <find_volume+0x8c>
 801703e:	187b      	adds	r3, r7, r1
 8017040:	781b      	ldrb	r3, [r3, #0]
 8017042:	2204      	movs	r2, #4
 8017044:	4013      	ands	r3, r2
 8017046:	d001      	beq.n	801704c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8017048:	230a      	movs	r3, #10
 801704a:	e24f      	b.n	80174ec <find_volume+0x52c>
			}
			return FR_OK;				/* The file system object is valid */
 801704c:	2300      	movs	r3, #0
 801704e:	e24d      	b.n	80174ec <find_volume+0x52c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017052:	2200      	movs	r2, #0
 8017054:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017058:	b2da      	uxtb	r2, r3
 801705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801705c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017060:	785b      	ldrb	r3, [r3, #1]
 8017062:	2537      	movs	r5, #55	@ 0x37
 8017064:	197c      	adds	r4, r7, r5
 8017066:	0018      	movs	r0, r3
 8017068:	f7fe fbb4 	bl	80157d4 <disk_initialize>
 801706c:	0003      	movs	r3, r0
 801706e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017070:	197b      	adds	r3, r7, r5
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	2201      	movs	r2, #1
 8017076:	4013      	ands	r3, r2
 8017078:	d001      	beq.n	801707e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801707a:	2303      	movs	r3, #3
 801707c:	e236      	b.n	80174ec <find_volume+0x52c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801707e:	1dfb      	adds	r3, r7, #7
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d007      	beq.n	8017096 <find_volume+0xd6>
 8017086:	2337      	movs	r3, #55	@ 0x37
 8017088:	18fb      	adds	r3, r7, r3
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	2204      	movs	r2, #4
 801708e:	4013      	ands	r3, r2
 8017090:	d001      	beq.n	8017096 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8017092:	230a      	movs	r3, #10
 8017094:	e22a      	b.n	80174ec <find_volume+0x52c>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017098:	7858      	ldrb	r0, [r3, #1]
 801709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801709c:	330c      	adds	r3, #12
 801709e:	001a      	movs	r2, r3
 80170a0:	2102      	movs	r1, #2
 80170a2:	f7fe fc17 	bl	80158d4 <disk_ioctl>
 80170a6:	1e03      	subs	r3, r0, #0
 80170a8:	d001      	beq.n	80170ae <find_volume+0xee>
 80170aa:	2301      	movs	r3, #1
 80170ac:	e21e      	b.n	80174ec <find_volume+0x52c>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80170ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170b0:	899a      	ldrh	r2, [r3, #12]
 80170b2:	2380      	movs	r3, #128	@ 0x80
 80170b4:	015b      	lsls	r3, r3, #5
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d80d      	bhi.n	80170d6 <find_volume+0x116>
 80170ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170bc:	899a      	ldrh	r2, [r3, #12]
 80170be:	2380      	movs	r3, #128	@ 0x80
 80170c0:	009b      	lsls	r3, r3, #2
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d307      	bcc.n	80170d6 <find_volume+0x116>
 80170c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170c8:	899b      	ldrh	r3, [r3, #12]
 80170ca:	001a      	movs	r2, r3
 80170cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170ce:	899b      	ldrh	r3, [r3, #12]
 80170d0:	3b01      	subs	r3, #1
 80170d2:	4013      	ands	r3, r2
 80170d4:	d001      	beq.n	80170da <find_volume+0x11a>
 80170d6:	2301      	movs	r3, #1
 80170d8:	e208      	b.n	80174ec <find_volume+0x52c>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80170de:	2557      	movs	r5, #87	@ 0x57
 80170e0:	197c      	adds	r4, r7, r5
 80170e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80170e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170e6:	0011      	movs	r1, r2
 80170e8:	0018      	movs	r0, r3
 80170ea:	f7ff ff11 	bl	8016f10 <check_fs>
 80170ee:	0003      	movs	r3, r0
 80170f0:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80170f2:	197b      	adds	r3, r7, r5
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d14b      	bne.n	8017192 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80170fa:	2300      	movs	r3, #0
 80170fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80170fe:	e01d      	b.n	801713c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017102:	3334      	adds	r3, #52	@ 0x34
 8017104:	001a      	movs	r2, r3
 8017106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017108:	011b      	lsls	r3, r3, #4
 801710a:	33bf      	adds	r3, #191	@ 0xbf
 801710c:	33ff      	adds	r3, #255	@ 0xff
 801710e:	18d3      	adds	r3, r2, r3
 8017110:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017114:	3304      	adds	r3, #4
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d006      	beq.n	801712a <find_volume+0x16a>
 801711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801711e:	3308      	adds	r3, #8
 8017120:	0018      	movs	r0, r3
 8017122:	f7fe fc1a 	bl	801595a <ld_dword>
 8017126:	0003      	movs	r3, r0
 8017128:	e000      	b.n	801712c <find_volume+0x16c>
 801712a:	2300      	movs	r3, #0
 801712c:	2214      	movs	r2, #20
 801712e:	18ba      	adds	r2, r7, r2
 8017130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017132:	0089      	lsls	r1, r1, #2
 8017134:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017138:	3301      	adds	r3, #1
 801713a:	643b      	str	r3, [r7, #64]	@ 0x40
 801713c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801713e:	2b03      	cmp	r3, #3
 8017140:	d9de      	bls.n	8017100 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017142:	2300      	movs	r3, #0
 8017144:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8017146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017148:	2b00      	cmp	r3, #0
 801714a:	d002      	beq.n	8017152 <find_volume+0x192>
 801714c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801714e:	3b01      	subs	r3, #1
 8017150:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017152:	2314      	movs	r3, #20
 8017154:	18fb      	adds	r3, r7, r3
 8017156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017158:	0092      	lsls	r2, r2, #2
 801715a:	58d3      	ldr	r3, [r2, r3]
 801715c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801715e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017160:	2b00      	cmp	r3, #0
 8017162:	d008      	beq.n	8017176 <find_volume+0x1b6>
 8017164:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017168:	0011      	movs	r1, r2
 801716a:	0018      	movs	r0, r3
 801716c:	f7ff fed0 	bl	8016f10 <check_fs>
 8017170:	0003      	movs	r3, r0
 8017172:	001a      	movs	r2, r3
 8017174:	e000      	b.n	8017178 <find_volume+0x1b8>
 8017176:	2203      	movs	r2, #3
 8017178:	2157      	movs	r1, #87	@ 0x57
 801717a:	187b      	adds	r3, r7, r1
 801717c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801717e:	187b      	adds	r3, r7, r1
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	2b01      	cmp	r3, #1
 8017184:	d905      	bls.n	8017192 <find_volume+0x1d2>
 8017186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017188:	3301      	adds	r3, #1
 801718a:	643b      	str	r3, [r7, #64]	@ 0x40
 801718c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801718e:	2b03      	cmp	r3, #3
 8017190:	d9df      	bls.n	8017152 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017192:	2357      	movs	r3, #87	@ 0x57
 8017194:	18fb      	adds	r3, r7, r3
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	2b04      	cmp	r3, #4
 801719a:	d101      	bne.n	80171a0 <find_volume+0x1e0>
 801719c:	2301      	movs	r3, #1
 801719e:	e1a5      	b.n	80174ec <find_volume+0x52c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80171a0:	2357      	movs	r3, #87	@ 0x57
 80171a2:	18fb      	adds	r3, r7, r3
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d901      	bls.n	80171ae <find_volume+0x1ee>
 80171aa:	230d      	movs	r3, #13
 80171ac:	e19e      	b.n	80174ec <find_volume+0x52c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80171ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171b0:	3334      	adds	r3, #52	@ 0x34
 80171b2:	330b      	adds	r3, #11
 80171b4:	0018      	movs	r0, r3
 80171b6:	f7fe fbb5 	bl	8015924 <ld_word>
 80171ba:	0003      	movs	r3, r0
 80171bc:	001a      	movs	r2, r3
 80171be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171c0:	899b      	ldrh	r3, [r3, #12]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d001      	beq.n	80171ca <find_volume+0x20a>
 80171c6:	230d      	movs	r3, #13
 80171c8:	e190      	b.n	80174ec <find_volume+0x52c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80171ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171cc:	3334      	adds	r3, #52	@ 0x34
 80171ce:	3316      	adds	r3, #22
 80171d0:	0018      	movs	r0, r3
 80171d2:	f7fe fba7 	bl	8015924 <ld_word>
 80171d6:	0003      	movs	r3, r0
 80171d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80171da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d107      	bne.n	80171f0 <find_volume+0x230>
 80171e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171e2:	3334      	adds	r3, #52	@ 0x34
 80171e4:	3324      	adds	r3, #36	@ 0x24
 80171e6:	0018      	movs	r0, r3
 80171e8:	f7fe fbb7 	bl	801595a <ld_dword>
 80171ec:	0003      	movs	r3, r0
 80171ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80171f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80171f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80171f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f8:	2244      	movs	r2, #68	@ 0x44
 80171fa:	5c9a      	ldrb	r2, [r3, r2]
 80171fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017202:	789b      	ldrb	r3, [r3, #2]
 8017204:	2b01      	cmp	r3, #1
 8017206:	d005      	beq.n	8017214 <find_volume+0x254>
 8017208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801720a:	789b      	ldrb	r3, [r3, #2]
 801720c:	2b02      	cmp	r3, #2
 801720e:	d001      	beq.n	8017214 <find_volume+0x254>
 8017210:	230d      	movs	r3, #13
 8017212:	e16b      	b.n	80174ec <find_volume+0x52c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017216:	789b      	ldrb	r3, [r3, #2]
 8017218:	001a      	movs	r2, r3
 801721a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801721c:	4353      	muls	r3, r2
 801721e:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017222:	2241      	movs	r2, #65	@ 0x41
 8017224:	5c9b      	ldrb	r3, [r3, r2]
 8017226:	001a      	movs	r2, r3
 8017228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801722a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801722e:	895b      	ldrh	r3, [r3, #10]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d007      	beq.n	8017244 <find_volume+0x284>
 8017234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017236:	895b      	ldrh	r3, [r3, #10]
 8017238:	001a      	movs	r2, r3
 801723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801723c:	895b      	ldrh	r3, [r3, #10]
 801723e:	3b01      	subs	r3, #1
 8017240:	4013      	ands	r3, r2
 8017242:	d001      	beq.n	8017248 <find_volume+0x288>
 8017244:	230d      	movs	r3, #13
 8017246:	e151      	b.n	80174ec <find_volume+0x52c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801724a:	3334      	adds	r3, #52	@ 0x34
 801724c:	3311      	adds	r3, #17
 801724e:	0018      	movs	r0, r3
 8017250:	f7fe fb68 	bl	8015924 <ld_word>
 8017254:	0003      	movs	r3, r0
 8017256:	001a      	movs	r2, r3
 8017258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801725a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801725e:	891a      	ldrh	r2, [r3, #8]
 8017260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017262:	899b      	ldrh	r3, [r3, #12]
 8017264:	095b      	lsrs	r3, r3, #5
 8017266:	b29b      	uxth	r3, r3
 8017268:	0019      	movs	r1, r3
 801726a:	0010      	movs	r0, r2
 801726c:	f7e8 ffe2 	bl	8000234 <__aeabi_uidivmod>
 8017270:	000b      	movs	r3, r1
 8017272:	b29b      	uxth	r3, r3
 8017274:	2b00      	cmp	r3, #0
 8017276:	d001      	beq.n	801727c <find_volume+0x2bc>
 8017278:	230d      	movs	r3, #13
 801727a:	e137      	b.n	80174ec <find_volume+0x52c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801727e:	3334      	adds	r3, #52	@ 0x34
 8017280:	3313      	adds	r3, #19
 8017282:	0018      	movs	r0, r3
 8017284:	f7fe fb4e 	bl	8015924 <ld_word>
 8017288:	0003      	movs	r3, r0
 801728a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801728c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801728e:	2b00      	cmp	r3, #0
 8017290:	d107      	bne.n	80172a2 <find_volume+0x2e2>
 8017292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017294:	3334      	adds	r3, #52	@ 0x34
 8017296:	3320      	adds	r3, #32
 8017298:	0018      	movs	r0, r3
 801729a:	f7fe fb5e 	bl	801595a <ld_dword>
 801729e:	0003      	movs	r3, r0
 80172a0:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80172a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172a4:	3334      	adds	r3, #52	@ 0x34
 80172a6:	330e      	adds	r3, #14
 80172a8:	252e      	movs	r5, #46	@ 0x2e
 80172aa:	197c      	adds	r4, r7, r5
 80172ac:	0018      	movs	r0, r3
 80172ae:	f7fe fb39 	bl	8015924 <ld_word>
 80172b2:	0003      	movs	r3, r0
 80172b4:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80172b6:	197b      	adds	r3, r7, r5
 80172b8:	881b      	ldrh	r3, [r3, #0]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d101      	bne.n	80172c2 <find_volume+0x302>
 80172be:	230d      	movs	r3, #13
 80172c0:	e114      	b.n	80174ec <find_volume+0x52c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80172c2:	232e      	movs	r3, #46	@ 0x2e
 80172c4:	18fb      	adds	r3, r7, r3
 80172c6:	881a      	ldrh	r2, [r3, #0]
 80172c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172ca:	18d4      	adds	r4, r2, r3
 80172cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ce:	891a      	ldrh	r2, [r3, #8]
 80172d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d2:	899b      	ldrh	r3, [r3, #12]
 80172d4:	095b      	lsrs	r3, r3, #5
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	0019      	movs	r1, r3
 80172da:	0010      	movs	r0, r2
 80172dc:	f7e8 ff24 	bl	8000128 <__udivsi3>
 80172e0:	0003      	movs	r3, r0
 80172e2:	b29b      	uxth	r3, r3
 80172e4:	18e3      	adds	r3, r4, r3
 80172e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80172e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80172ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d203      	bcs.n	80172f8 <find_volume+0x338>
 80172f0:	230d      	movs	r3, #13
 80172f2:	e0fb      	b.n	80174ec <find_volume+0x52c>
 80172f4:	20003474 	.word	0x20003474
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80172f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80172fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172fc:	1ad2      	subs	r2, r2, r3
 80172fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017300:	895b      	ldrh	r3, [r3, #10]
 8017302:	0019      	movs	r1, r3
 8017304:	0010      	movs	r0, r2
 8017306:	f7e8 ff0f 	bl	8000128 <__udivsi3>
 801730a:	0003      	movs	r3, r0
 801730c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017310:	2b00      	cmp	r3, #0
 8017312:	d101      	bne.n	8017318 <find_volume+0x358>
 8017314:	230d      	movs	r3, #13
 8017316:	e0e9      	b.n	80174ec <find_volume+0x52c>
		fmt = FS_FAT32;
 8017318:	2157      	movs	r1, #87	@ 0x57
 801731a:	187b      	adds	r3, r7, r1
 801731c:	2203      	movs	r2, #3
 801731e:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017322:	4a74      	ldr	r2, [pc, #464]	@ (80174f4 <find_volume+0x534>)
 8017324:	4293      	cmp	r3, r2
 8017326:	d802      	bhi.n	801732e <find_volume+0x36e>
 8017328:	187b      	adds	r3, r7, r1
 801732a:	2202      	movs	r2, #2
 801732c:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017330:	4a71      	ldr	r2, [pc, #452]	@ (80174f8 <find_volume+0x538>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d803      	bhi.n	801733e <find_volume+0x37e>
 8017336:	2357      	movs	r3, #87	@ 0x57
 8017338:	18fb      	adds	r3, r7, r3
 801733a:	2201      	movs	r2, #1
 801733c:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017340:	1c9a      	adds	r2, r3, #2
 8017342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017344:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8017346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801734a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801734c:	232e      	movs	r3, #46	@ 0x2e
 801734e:	18fb      	adds	r3, r7, r3
 8017350:	881a      	ldrh	r2, [r3, #0]
 8017352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017354:	18d2      	adds	r2, r2, r3
 8017356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017358:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801735a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801735e:	18d2      	adds	r2, r2, r3
 8017360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017362:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8017364:	2357      	movs	r3, #87	@ 0x57
 8017366:	18fb      	adds	r3, r7, r3
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	2b03      	cmp	r3, #3
 801736c:	d11d      	bne.n	80173aa <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017370:	3334      	adds	r3, #52	@ 0x34
 8017372:	332a      	adds	r3, #42	@ 0x2a
 8017374:	0018      	movs	r0, r3
 8017376:	f7fe fad5 	bl	8015924 <ld_word>
 801737a:	1e03      	subs	r3, r0, #0
 801737c:	d001      	beq.n	8017382 <find_volume+0x3c2>
 801737e:	230d      	movs	r3, #13
 8017380:	e0b4      	b.n	80174ec <find_volume+0x52c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017384:	891b      	ldrh	r3, [r3, #8]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d001      	beq.n	801738e <find_volume+0x3ce>
 801738a:	230d      	movs	r3, #13
 801738c:	e0ae      	b.n	80174ec <find_volume+0x52c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017390:	3334      	adds	r3, #52	@ 0x34
 8017392:	332c      	adds	r3, #44	@ 0x2c
 8017394:	0018      	movs	r0, r3
 8017396:	f7fe fae0 	bl	801595a <ld_dword>
 801739a:	0002      	movs	r2, r0
 801739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801739e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80173a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173a2:	699b      	ldr	r3, [r3, #24]
 80173a4:	009b      	lsls	r3, r3, #2
 80173a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80173a8:	e020      	b.n	80173ec <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80173aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ac:	891b      	ldrh	r3, [r3, #8]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d101      	bne.n	80173b6 <find_volume+0x3f6>
 80173b2:	230d      	movs	r3, #13
 80173b4:	e09a      	b.n	80174ec <find_volume+0x52c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80173b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80173ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173bc:	18d2      	adds	r2, r2, r3
 80173be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173c0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80173c2:	2357      	movs	r3, #87	@ 0x57
 80173c4:	18fb      	adds	r3, r7, r3
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	2b02      	cmp	r3, #2
 80173ca:	d103      	bne.n	80173d4 <find_volume+0x414>
 80173cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ce:	699b      	ldr	r3, [r3, #24]
 80173d0:	005b      	lsls	r3, r3, #1
 80173d2:	e00a      	b.n	80173ea <find_volume+0x42a>
 80173d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173d6:	699a      	ldr	r2, [r3, #24]
 80173d8:	0013      	movs	r3, r2
 80173da:	005b      	lsls	r3, r3, #1
 80173dc:	189b      	adds	r3, r3, r2
 80173de:	085a      	lsrs	r2, r3, #1
 80173e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173e2:	699b      	ldr	r3, [r3, #24]
 80173e4:	2101      	movs	r1, #1
 80173e6:	400b      	ands	r3, r1
 80173e8:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80173ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80173ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ee:	69dc      	ldr	r4, [r3, #28]
 80173f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173f2:	899b      	ldrh	r3, [r3, #12]
 80173f4:	001a      	movs	r2, r3
 80173f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80173f8:	18d3      	adds	r3, r2, r3
 80173fa:	1e5a      	subs	r2, r3, #1
 80173fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173fe:	899b      	ldrh	r3, [r3, #12]
 8017400:	0019      	movs	r1, r3
 8017402:	0010      	movs	r0, r2
 8017404:	f7e8 fe90 	bl	8000128 <__udivsi3>
 8017408:	0003      	movs	r3, r0
 801740a:	429c      	cmp	r4, r3
 801740c:	d201      	bcs.n	8017412 <find_volume+0x452>
 801740e:	230d      	movs	r3, #13
 8017410:	e06c      	b.n	80174ec <find_volume+0x52c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017414:	2201      	movs	r2, #1
 8017416:	4252      	negs	r2, r2
 8017418:	615a      	str	r2, [r3, #20]
 801741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801741c:	695a      	ldr	r2, [r3, #20]
 801741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017420:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8017422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017424:	2280      	movs	r2, #128	@ 0x80
 8017426:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017428:	2357      	movs	r3, #87	@ 0x57
 801742a:	18fb      	adds	r3, r7, r3
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	2b03      	cmp	r3, #3
 8017430:	d148      	bne.n	80174c4 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017434:	3334      	adds	r3, #52	@ 0x34
 8017436:	3330      	adds	r3, #48	@ 0x30
 8017438:	0018      	movs	r0, r3
 801743a:	f7fe fa73 	bl	8015924 <ld_word>
 801743e:	0003      	movs	r3, r0
 8017440:	2b01      	cmp	r3, #1
 8017442:	d13f      	bne.n	80174c4 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017446:	1c5a      	adds	r2, r3, #1
 8017448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801744a:	0011      	movs	r1, r2
 801744c:	0018      	movs	r0, r3
 801744e:	f7fe fd15 	bl	8015e7c <move_window>
 8017452:	1e03      	subs	r3, r0, #0
 8017454:	d136      	bne.n	80174c4 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 8017456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017458:	2200      	movs	r2, #0
 801745a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801745e:	3334      	adds	r3, #52	@ 0x34
 8017460:	33ff      	adds	r3, #255	@ 0xff
 8017462:	33ff      	adds	r3, #255	@ 0xff
 8017464:	0018      	movs	r0, r3
 8017466:	f7fe fa5d 	bl	8015924 <ld_word>
 801746a:	0003      	movs	r3, r0
 801746c:	001a      	movs	r2, r3
 801746e:	4b23      	ldr	r3, [pc, #140]	@ (80174fc <find_volume+0x53c>)
 8017470:	429a      	cmp	r2, r3
 8017472:	d127      	bne.n	80174c4 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017476:	3334      	adds	r3, #52	@ 0x34
 8017478:	0018      	movs	r0, r3
 801747a:	f7fe fa6e 	bl	801595a <ld_dword>
 801747e:	0003      	movs	r3, r0
 8017480:	4a1f      	ldr	r2, [pc, #124]	@ (8017500 <find_volume+0x540>)
 8017482:	4293      	cmp	r3, r2
 8017484:	d11e      	bne.n	80174c4 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017488:	3334      	adds	r3, #52	@ 0x34
 801748a:	33e5      	adds	r3, #229	@ 0xe5
 801748c:	33ff      	adds	r3, #255	@ 0xff
 801748e:	0018      	movs	r0, r3
 8017490:	f7fe fa63 	bl	801595a <ld_dword>
 8017494:	0003      	movs	r3, r0
 8017496:	4a1b      	ldr	r2, [pc, #108]	@ (8017504 <find_volume+0x544>)
 8017498:	4293      	cmp	r3, r2
 801749a:	d113      	bne.n	80174c4 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801749e:	3334      	adds	r3, #52	@ 0x34
 80174a0:	33e9      	adds	r3, #233	@ 0xe9
 80174a2:	33ff      	adds	r3, #255	@ 0xff
 80174a4:	0018      	movs	r0, r3
 80174a6:	f7fe fa58 	bl	801595a <ld_dword>
 80174aa:	0002      	movs	r2, r0
 80174ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174ae:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80174b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174b2:	3334      	adds	r3, #52	@ 0x34
 80174b4:	33ed      	adds	r3, #237	@ 0xed
 80174b6:	33ff      	adds	r3, #255	@ 0xff
 80174b8:	0018      	movs	r0, r3
 80174ba:	f7fe fa4e 	bl	801595a <ld_dword>
 80174be:	0002      	movs	r2, r0
 80174c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174c2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80174c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174c6:	2257      	movs	r2, #87	@ 0x57
 80174c8:	18ba      	adds	r2, r7, r2
 80174ca:	7812      	ldrb	r2, [r2, #0]
 80174cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80174ce:	4b0e      	ldr	r3, [pc, #56]	@ (8017508 <find_volume+0x548>)
 80174d0:	881b      	ldrh	r3, [r3, #0]
 80174d2:	3301      	adds	r3, #1
 80174d4:	b29a      	uxth	r2, r3
 80174d6:	4b0c      	ldr	r3, [pc, #48]	@ (8017508 <find_volume+0x548>)
 80174d8:	801a      	strh	r2, [r3, #0]
 80174da:	4b0b      	ldr	r3, [pc, #44]	@ (8017508 <find_volume+0x548>)
 80174dc:	881a      	ldrh	r2, [r3, #0]
 80174de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80174e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174e4:	0018      	movs	r0, r3
 80174e6:	f7fe fc61 	bl	8015dac <clear_lock>
#endif
	return FR_OK;
 80174ea:	2300      	movs	r3, #0
}
 80174ec:	0018      	movs	r0, r3
 80174ee:	46bd      	mov	sp, r7
 80174f0:	b016      	add	sp, #88	@ 0x58
 80174f2:	bdb0      	pop	{r4, r5, r7, pc}
 80174f4:	0000fff5 	.word	0x0000fff5
 80174f8:	00000ff5 	.word	0x00000ff5
 80174fc:	0000aa55 	.word	0x0000aa55
 8017500:	41615252 	.word	0x41615252
 8017504:	61417272 	.word	0x61417272
 8017508:	20003478 	.word	0x20003478

0801750c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801750c:	b590      	push	{r4, r7, lr}
 801750e:	b085      	sub	sp, #20
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017516:	240f      	movs	r4, #15
 8017518:	193b      	adds	r3, r7, r4
 801751a:	2209      	movs	r2, #9
 801751c:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d01d      	beq.n	8017560 <validate+0x54>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d019      	beq.n	8017560 <validate+0x54>
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d014      	beq.n	8017560 <validate+0x54>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	889a      	ldrh	r2, [r3, #4]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	88db      	ldrh	r3, [r3, #6]
 8017540:	429a      	cmp	r2, r3
 8017542:	d10d      	bne.n	8017560 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	785b      	ldrb	r3, [r3, #1]
 801754a:	0018      	movs	r0, r3
 801754c:	f7fe f920 	bl	8015790 <disk_status>
 8017550:	0003      	movs	r3, r0
 8017552:	001a      	movs	r2, r3
 8017554:	2301      	movs	r3, #1
 8017556:	4013      	ands	r3, r2
 8017558:	d102      	bne.n	8017560 <validate+0x54>
			res = FR_OK;
 801755a:	193b      	adds	r3, r7, r4
 801755c:	2200      	movs	r2, #0
 801755e:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017560:	230f      	movs	r3, #15
 8017562:	18fb      	adds	r3, r7, r3
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d102      	bne.n	8017570 <validate+0x64>
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	e000      	b.n	8017572 <validate+0x66>
 8017570:	2200      	movs	r2, #0
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	601a      	str	r2, [r3, #0]
	return res;
 8017576:	230f      	movs	r3, #15
 8017578:	18fb      	adds	r3, r7, r3
 801757a:	781b      	ldrb	r3, [r3, #0]
}
 801757c:	0018      	movs	r0, r3
 801757e:	46bd      	mov	sp, r7
 8017580:	b005      	add	sp, #20
 8017582:	bd90      	pop	{r4, r7, pc}

08017584 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017584:	b5b0      	push	{r4, r5, r7, lr}
 8017586:	b088      	sub	sp, #32
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	1dfb      	adds	r3, r7, #7
 8017590:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017596:	2310      	movs	r3, #16
 8017598:	18fb      	adds	r3, r7, r3
 801759a:	0018      	movs	r0, r3
 801759c:	f7ff fc76 	bl	8016e8c <get_ldnumber>
 80175a0:	0003      	movs	r3, r0
 80175a2:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	da01      	bge.n	80175ae <f_mount+0x2a>
 80175aa:	230b      	movs	r3, #11
 80175ac:	e030      	b.n	8017610 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80175ae:	4b1a      	ldr	r3, [pc, #104]	@ (8017618 <f_mount+0x94>)
 80175b0:	69fa      	ldr	r2, [r7, #28]
 80175b2:	0092      	lsls	r2, r2, #2
 80175b4:	58d3      	ldr	r3, [r2, r3]
 80175b6:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d006      	beq.n	80175cc <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	0018      	movs	r0, r3
 80175c2:	f7fe fbf3 	bl	8015dac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80175c6:	69bb      	ldr	r3, [r7, #24]
 80175c8:	2200      	movs	r2, #0
 80175ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d002      	beq.n	80175d8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	2200      	movs	r2, #0
 80175d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80175d8:	68f9      	ldr	r1, [r7, #12]
 80175da:	4b0f      	ldr	r3, [pc, #60]	@ (8017618 <f_mount+0x94>)
 80175dc:	69fa      	ldr	r2, [r7, #28]
 80175de:	0092      	lsls	r2, r2, #2
 80175e0:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d003      	beq.n	80175f0 <f_mount+0x6c>
 80175e8:	1dfb      	adds	r3, r7, #7
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d001      	beq.n	80175f4 <f_mount+0x70>
 80175f0:	2300      	movs	r3, #0
 80175f2:	e00d      	b.n	8017610 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80175f4:	2517      	movs	r5, #23
 80175f6:	197c      	adds	r4, r7, r5
 80175f8:	230c      	movs	r3, #12
 80175fa:	18f9      	adds	r1, r7, r3
 80175fc:	2308      	movs	r3, #8
 80175fe:	18fb      	adds	r3, r7, r3
 8017600:	2200      	movs	r2, #0
 8017602:	0018      	movs	r0, r3
 8017604:	f7ff fcdc 	bl	8016fc0 <find_volume>
 8017608:	0003      	movs	r3, r0
 801760a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 801760c:	197b      	adds	r3, r7, r5
 801760e:	781b      	ldrb	r3, [r3, #0]
}
 8017610:	0018      	movs	r0, r3
 8017612:	46bd      	mov	sp, r7
 8017614:	b008      	add	sp, #32
 8017616:	bdb0      	pop	{r4, r5, r7, pc}
 8017618:	20003474 	.word	0x20003474

0801761c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801761e:	b099      	sub	sp, #100	@ 0x64
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	1dfb      	adds	r3, r7, #7
 8017628:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d101      	bne.n	8017634 <f_open+0x18>
 8017630:	2309      	movs	r3, #9
 8017632:	e1f4      	b.n	8017a1e <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017634:	1dfb      	adds	r3, r7, #7
 8017636:	1dfa      	adds	r2, r7, #7
 8017638:	7812      	ldrb	r2, [r2, #0]
 801763a:	213f      	movs	r1, #63	@ 0x3f
 801763c:	400a      	ands	r2, r1
 801763e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8017640:	255f      	movs	r5, #95	@ 0x5f
 8017642:	197c      	adds	r4, r7, r5
 8017644:	1dfb      	adds	r3, r7, #7
 8017646:	781a      	ldrb	r2, [r3, #0]
 8017648:	2310      	movs	r3, #16
 801764a:	18f9      	adds	r1, r7, r3
 801764c:	2308      	movs	r3, #8
 801764e:	18fb      	adds	r3, r7, r3
 8017650:	0018      	movs	r0, r3
 8017652:	f7ff fcb5 	bl	8016fc0 <find_volume>
 8017656:	0003      	movs	r3, r0
 8017658:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 801765a:	197b      	adds	r3, r7, r5
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d000      	beq.n	8017664 <f_open+0x48>
 8017662:	e1d1      	b.n	8017a08 <f_open+0x3ec>
		dj.obj.fs = fs;
 8017664:	693a      	ldr	r2, [r7, #16]
 8017666:	2614      	movs	r6, #20
 8017668:	19bb      	adds	r3, r7, r6
 801766a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801766c:	68ba      	ldr	r2, [r7, #8]
 801766e:	197c      	adds	r4, r7, r5
 8017670:	19bb      	adds	r3, r7, r6
 8017672:	0011      	movs	r1, r2
 8017674:	0018      	movs	r0, r3
 8017676:	f7ff fb7f 	bl	8016d78 <follow_path>
 801767a:	0003      	movs	r3, r0
 801767c:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801767e:	0029      	movs	r1, r5
 8017680:	197b      	adds	r3, r7, r5
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d11b      	bne.n	80176c0 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017688:	19bb      	adds	r3, r7, r6
 801768a:	222f      	movs	r2, #47	@ 0x2f
 801768c:	5c9b      	ldrb	r3, [r3, r2]
 801768e:	b25b      	sxtb	r3, r3
 8017690:	2b00      	cmp	r3, #0
 8017692:	da03      	bge.n	801769c <f_open+0x80>
				res = FR_INVALID_NAME;
 8017694:	187b      	adds	r3, r7, r1
 8017696:	2206      	movs	r2, #6
 8017698:	701a      	strb	r2, [r3, #0]
 801769a:	e011      	b.n	80176c0 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801769c:	1dfb      	adds	r3, r7, #7
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2201      	movs	r2, #1
 80176a2:	429a      	cmp	r2, r3
 80176a4:	419b      	sbcs	r3, r3
 80176a6:	425b      	negs	r3, r3
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	001a      	movs	r2, r3
 80176ac:	235f      	movs	r3, #95	@ 0x5f
 80176ae:	18fc      	adds	r4, r7, r3
 80176b0:	2314      	movs	r3, #20
 80176b2:	18fb      	adds	r3, r7, r3
 80176b4:	0011      	movs	r1, r2
 80176b6:	0018      	movs	r0, r3
 80176b8:	f7fe fa2e 	bl	8015b18 <chk_lock>
 80176bc:	0003      	movs	r3, r0
 80176be:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80176c0:	1dfb      	adds	r3, r7, #7
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	221c      	movs	r2, #28
 80176c6:	4013      	ands	r3, r2
 80176c8:	d100      	bne.n	80176cc <f_open+0xb0>
 80176ca:	e096      	b.n	80177fa <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80176cc:	225f      	movs	r2, #95	@ 0x5f
 80176ce:	18bb      	adds	r3, r7, r2
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d01a      	beq.n	801770c <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80176d6:	18bb      	adds	r3, r7, r2
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	2b04      	cmp	r3, #4
 80176dc:	d10f      	bne.n	80176fe <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80176de:	f7fe fa73 	bl	8015bc8 <enq_lock>
 80176e2:	1e03      	subs	r3, r0, #0
 80176e4:	d007      	beq.n	80176f6 <f_open+0xda>
 80176e6:	2314      	movs	r3, #20
 80176e8:	18fb      	adds	r3, r7, r3
 80176ea:	0018      	movs	r0, r3
 80176ec:	f7ff fa59 	bl	8016ba2 <dir_register>
 80176f0:	0003      	movs	r3, r0
 80176f2:	001a      	movs	r2, r3
 80176f4:	e000      	b.n	80176f8 <f_open+0xdc>
 80176f6:	2212      	movs	r2, #18
 80176f8:	235f      	movs	r3, #95	@ 0x5f
 80176fa:	18fb      	adds	r3, r7, r3
 80176fc:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80176fe:	1dfb      	adds	r3, r7, #7
 8017700:	1dfa      	adds	r2, r7, #7
 8017702:	7812      	ldrb	r2, [r2, #0]
 8017704:	2108      	movs	r1, #8
 8017706:	430a      	orrs	r2, r1
 8017708:	701a      	strb	r2, [r3, #0]
 801770a:	e014      	b.n	8017736 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801770c:	2314      	movs	r3, #20
 801770e:	18fb      	adds	r3, r7, r3
 8017710:	799b      	ldrb	r3, [r3, #6]
 8017712:	001a      	movs	r2, r3
 8017714:	2311      	movs	r3, #17
 8017716:	4013      	ands	r3, r2
 8017718:	d004      	beq.n	8017724 <f_open+0x108>
					res = FR_DENIED;
 801771a:	235f      	movs	r3, #95	@ 0x5f
 801771c:	18fb      	adds	r3, r7, r3
 801771e:	2207      	movs	r2, #7
 8017720:	701a      	strb	r2, [r3, #0]
 8017722:	e008      	b.n	8017736 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017724:	1dfb      	adds	r3, r7, #7
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	2204      	movs	r2, #4
 801772a:	4013      	ands	r3, r2
 801772c:	d003      	beq.n	8017736 <f_open+0x11a>
 801772e:	235f      	movs	r3, #95	@ 0x5f
 8017730:	18fb      	adds	r3, r7, r3
 8017732:	2208      	movs	r2, #8
 8017734:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017736:	245f      	movs	r4, #95	@ 0x5f
 8017738:	193b      	adds	r3, r7, r4
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d000      	beq.n	8017742 <f_open+0x126>
 8017740:	e07b      	b.n	801783a <f_open+0x21e>
 8017742:	1dfb      	adds	r3, r7, #7
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	2208      	movs	r2, #8
 8017748:	4013      	ands	r3, r2
 801774a:	d100      	bne.n	801774e <f_open+0x132>
 801774c:	e075      	b.n	801783a <f_open+0x21e>
				dw = GET_FATTIME();
 801774e:	f7fd ffb3 	bl	80156b8 <get_fattime>
 8017752:	0003      	movs	r3, r0
 8017754:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017756:	2514      	movs	r5, #20
 8017758:	197b      	adds	r3, r7, r5
 801775a:	6a1b      	ldr	r3, [r3, #32]
 801775c:	330e      	adds	r3, #14
 801775e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017760:	0011      	movs	r1, r2
 8017762:	0018      	movs	r0, r3
 8017764:	f7fe f938 	bl	80159d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017768:	197b      	adds	r3, r7, r5
 801776a:	6a1b      	ldr	r3, [r3, #32]
 801776c:	3316      	adds	r3, #22
 801776e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017770:	0011      	movs	r1, r2
 8017772:	0018      	movs	r0, r3
 8017774:	f7fe f930 	bl	80159d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017778:	197b      	adds	r3, r7, r5
 801777a:	6a1b      	ldr	r3, [r3, #32]
 801777c:	330b      	adds	r3, #11
 801777e:	2220      	movs	r2, #32
 8017780:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017782:	693a      	ldr	r2, [r7, #16]
 8017784:	197b      	adds	r3, r7, r5
 8017786:	6a1b      	ldr	r3, [r3, #32]
 8017788:	0019      	movs	r1, r3
 801778a:	0010      	movs	r0, r2
 801778c:	f7ff f962 	bl	8016a54 <ld_clust>
 8017790:	0003      	movs	r3, r0
 8017792:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017794:	6938      	ldr	r0, [r7, #16]
 8017796:	197b      	adds	r3, r7, r5
 8017798:	6a1b      	ldr	r3, [r3, #32]
 801779a:	2200      	movs	r2, #0
 801779c:	0019      	movs	r1, r3
 801779e:	f7ff f978 	bl	8016a92 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80177a2:	197b      	adds	r3, r7, r5
 80177a4:	6a1b      	ldr	r3, [r3, #32]
 80177a6:	331c      	adds	r3, #28
 80177a8:	2100      	movs	r1, #0
 80177aa:	0018      	movs	r0, r3
 80177ac:	f7fe f914 	bl	80159d8 <st_dword>
					fs->wflag = 1;
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	2201      	movs	r2, #1
 80177b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80177b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d03e      	beq.n	801783a <f_open+0x21e>
						dw = fs->winsect;
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177c0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80177c2:	0026      	movs	r6, r4
 80177c4:	193c      	adds	r4, r7, r4
 80177c6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80177c8:	197b      	adds	r3, r7, r5
 80177ca:	2200      	movs	r2, #0
 80177cc:	0018      	movs	r0, r3
 80177ce:	f7fe fe2d 	bl	801642c <remove_chain>
 80177d2:	0003      	movs	r3, r0
 80177d4:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80177d6:	19bb      	adds	r3, r7, r6
 80177d8:	781b      	ldrb	r3, [r3, #0]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d12d      	bne.n	801783a <f_open+0x21e>
							res = move_window(fs, dw);
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	19bc      	adds	r4, r7, r6
 80177e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80177e4:	0011      	movs	r1, r2
 80177e6:	0018      	movs	r0, r3
 80177e8:	f7fe fb48 	bl	8015e7c <move_window>
 80177ec:	0003      	movs	r3, r0
 80177ee:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80177f0:	693b      	ldr	r3, [r7, #16]
 80177f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80177f4:	3a01      	subs	r2, #1
 80177f6:	611a      	str	r2, [r3, #16]
 80177f8:	e01f      	b.n	801783a <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80177fa:	215f      	movs	r1, #95	@ 0x5f
 80177fc:	187b      	adds	r3, r7, r1
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d11a      	bne.n	801783a <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017804:	2314      	movs	r3, #20
 8017806:	18fb      	adds	r3, r7, r3
 8017808:	799b      	ldrb	r3, [r3, #6]
 801780a:	001a      	movs	r2, r3
 801780c:	2310      	movs	r3, #16
 801780e:	4013      	ands	r3, r2
 8017810:	d003      	beq.n	801781a <f_open+0x1fe>
					res = FR_NO_FILE;
 8017812:	187b      	adds	r3, r7, r1
 8017814:	2204      	movs	r2, #4
 8017816:	701a      	strb	r2, [r3, #0]
 8017818:	e00f      	b.n	801783a <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801781a:	1dfb      	adds	r3, r7, #7
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	2202      	movs	r2, #2
 8017820:	4013      	ands	r3, r2
 8017822:	d00a      	beq.n	801783a <f_open+0x21e>
 8017824:	2314      	movs	r3, #20
 8017826:	18fb      	adds	r3, r7, r3
 8017828:	799b      	ldrb	r3, [r3, #6]
 801782a:	001a      	movs	r2, r3
 801782c:	2301      	movs	r3, #1
 801782e:	4013      	ands	r3, r2
 8017830:	d003      	beq.n	801783a <f_open+0x21e>
						res = FR_DENIED;
 8017832:	235f      	movs	r3, #95	@ 0x5f
 8017834:	18fb      	adds	r3, r7, r3
 8017836:	2207      	movs	r2, #7
 8017838:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 801783a:	235f      	movs	r3, #95	@ 0x5f
 801783c:	18fb      	adds	r3, r7, r3
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d12b      	bne.n	801789c <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017844:	1dfb      	adds	r3, r7, #7
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	2208      	movs	r2, #8
 801784a:	4013      	ands	r3, r2
 801784c:	d005      	beq.n	801785a <f_open+0x23e>
				mode |= FA_MODIFIED;
 801784e:	1dfb      	adds	r3, r7, #7
 8017850:	1dfa      	adds	r2, r7, #7
 8017852:	7812      	ldrb	r2, [r2, #0]
 8017854:	2140      	movs	r1, #64	@ 0x40
 8017856:	430a      	orrs	r2, r1
 8017858:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8017862:	2114      	movs	r1, #20
 8017864:	187b      	adds	r3, r7, r1
 8017866:	6a1a      	ldr	r2, [r3, #32]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801786c:	1dfb      	adds	r3, r7, #7
 801786e:	781b      	ldrb	r3, [r3, #0]
 8017870:	2201      	movs	r2, #1
 8017872:	429a      	cmp	r2, r3
 8017874:	419b      	sbcs	r3, r3
 8017876:	425b      	negs	r3, r3
 8017878:	b2db      	uxtb	r3, r3
 801787a:	001a      	movs	r2, r3
 801787c:	187b      	adds	r3, r7, r1
 801787e:	0011      	movs	r1, r2
 8017880:	0018      	movs	r0, r3
 8017882:	f7fe f9bf 	bl	8015c04 <inc_lock>
 8017886:	0002      	movs	r2, r0
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	691b      	ldr	r3, [r3, #16]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d103      	bne.n	801789c <f_open+0x280>
 8017894:	235f      	movs	r3, #95	@ 0x5f
 8017896:	18fb      	adds	r3, r7, r3
 8017898:	2202      	movs	r2, #2
 801789a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 801789c:	235f      	movs	r3, #95	@ 0x5f
 801789e:	18fb      	adds	r3, r7, r3
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d000      	beq.n	80178a8 <f_open+0x28c>
 80178a6:	e0af      	b.n	8017a08 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80178a8:	693a      	ldr	r2, [r7, #16]
 80178aa:	2414      	movs	r4, #20
 80178ac:	193b      	adds	r3, r7, r4
 80178ae:	6a1b      	ldr	r3, [r3, #32]
 80178b0:	0019      	movs	r1, r3
 80178b2:	0010      	movs	r0, r2
 80178b4:	f7ff f8ce 	bl	8016a54 <ld_clust>
 80178b8:	0002      	movs	r2, r0
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80178be:	193b      	adds	r3, r7, r4
 80178c0:	6a1b      	ldr	r3, [r3, #32]
 80178c2:	331c      	adds	r3, #28
 80178c4:	0018      	movs	r0, r3
 80178c6:	f7fe f848 	bl	801595a <ld_dword>
 80178ca:	0002      	movs	r2, r0
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	2200      	movs	r2, #0
 80178d4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80178d6:	693a      	ldr	r2, [r7, #16]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	88da      	ldrh	r2, [r3, #6]
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	1dfa      	adds	r2, r7, #7
 80178e8:	7812      	ldrb	r2, [r2, #0]
 80178ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2200      	movs	r2, #0
 80178f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2200      	movs	r2, #0
 80178f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	2200      	movs	r2, #0
 80178fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	3330      	adds	r3, #48	@ 0x30
 8017902:	2280      	movs	r2, #128	@ 0x80
 8017904:	0152      	lsls	r2, r2, #5
 8017906:	2100      	movs	r1, #0
 8017908:	0018      	movs	r0, r3
 801790a:	f7fe f8ae 	bl	8015a6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801790e:	1dfb      	adds	r3, r7, #7
 8017910:	781b      	ldrb	r3, [r3, #0]
 8017912:	2220      	movs	r2, #32
 8017914:	4013      	ands	r3, r2
 8017916:	d100      	bne.n	801791a <f_open+0x2fe>
 8017918:	e076      	b.n	8017a08 <f_open+0x3ec>
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d100      	bne.n	8017924 <f_open+0x308>
 8017922:	e071      	b.n	8017a08 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	68da      	ldr	r2, [r3, #12]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	895b      	ldrh	r3, [r3, #10]
 8017930:	001a      	movs	r2, r3
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	899b      	ldrh	r3, [r3, #12]
 8017936:	4353      	muls	r3, r2
 8017938:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	689b      	ldr	r3, [r3, #8]
 801793e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	68db      	ldr	r3, [r3, #12]
 8017944:	657b      	str	r3, [r7, #84]	@ 0x54
 8017946:	e019      	b.n	801797c <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801794c:	0011      	movs	r1, r2
 801794e:	0018      	movs	r0, r3
 8017950:	f7fe fb62 	bl	8016018 <get_fat>
 8017954:	0003      	movs	r3, r0
 8017956:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8017958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801795a:	2b01      	cmp	r3, #1
 801795c:	d803      	bhi.n	8017966 <f_open+0x34a>
 801795e:	235f      	movs	r3, #95	@ 0x5f
 8017960:	18fb      	adds	r3, r7, r3
 8017962:	2202      	movs	r2, #2
 8017964:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017968:	3301      	adds	r3, #1
 801796a:	d103      	bne.n	8017974 <f_open+0x358>
 801796c:	235f      	movs	r3, #95	@ 0x5f
 801796e:	18fb      	adds	r3, r7, r3
 8017970:	2201      	movs	r2, #1
 8017972:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017974:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017978:	1ad3      	subs	r3, r2, r3
 801797a:	657b      	str	r3, [r7, #84]	@ 0x54
 801797c:	235f      	movs	r3, #95	@ 0x5f
 801797e:	18fb      	adds	r3, r7, r3
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d103      	bne.n	801798e <f_open+0x372>
 8017986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801798a:	429a      	cmp	r2, r3
 801798c:	d8dc      	bhi.n	8017948 <f_open+0x32c>
				}
				fp->clust = clst;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017992:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017994:	245f      	movs	r4, #95	@ 0x5f
 8017996:	193b      	adds	r3, r7, r4
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d134      	bne.n	8017a08 <f_open+0x3ec>
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	899b      	ldrh	r3, [r3, #12]
 80179a2:	001a      	movs	r2, r3
 80179a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179a6:	0011      	movs	r1, r2
 80179a8:	0018      	movs	r0, r3
 80179aa:	f7e8 fc43 	bl	8000234 <__aeabi_uidivmod>
 80179ae:	1e0b      	subs	r3, r1, #0
 80179b0:	d02a      	beq.n	8017a08 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80179b6:	0011      	movs	r1, r2
 80179b8:	0018      	movs	r0, r3
 80179ba:	f7fe fb11 	bl	8015fe0 <clust2sect>
 80179be:	0003      	movs	r3, r0
 80179c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80179c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d103      	bne.n	80179d0 <f_open+0x3b4>
						res = FR_INT_ERR;
 80179c8:	193b      	adds	r3, r7, r4
 80179ca:	2202      	movs	r2, #2
 80179cc:	701a      	strb	r2, [r3, #0]
 80179ce:	e01b      	b.n	8017a08 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80179d0:	693b      	ldr	r3, [r7, #16]
 80179d2:	899b      	ldrh	r3, [r3, #12]
 80179d4:	0019      	movs	r1, r3
 80179d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80179d8:	f7e8 fba6 	bl	8000128 <__udivsi3>
 80179dc:	0003      	movs	r3, r0
 80179de:	001a      	movs	r2, r3
 80179e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179e2:	18d2      	adds	r2, r2, r3
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	7858      	ldrb	r0, [r3, #1]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	3330      	adds	r3, #48	@ 0x30
 80179f0:	0019      	movs	r1, r3
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	6a1a      	ldr	r2, [r3, #32]
 80179f6:	2301      	movs	r3, #1
 80179f8:	f7fd ff1c 	bl	8015834 <disk_read>
 80179fc:	1e03      	subs	r3, r0, #0
 80179fe:	d003      	beq.n	8017a08 <f_open+0x3ec>
 8017a00:	235f      	movs	r3, #95	@ 0x5f
 8017a02:	18fb      	adds	r3, r7, r3
 8017a04:	2201      	movs	r2, #1
 8017a06:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017a08:	235f      	movs	r3, #95	@ 0x5f
 8017a0a:	18fb      	adds	r3, r7, r3
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d002      	beq.n	8017a18 <f_open+0x3fc>
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	2200      	movs	r2, #0
 8017a16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017a18:	235f      	movs	r3, #95	@ 0x5f
 8017a1a:	18fb      	adds	r3, r7, r3
 8017a1c:	781b      	ldrb	r3, [r3, #0]
}
 8017a1e:	0018      	movs	r0, r3
 8017a20:	46bd      	mov	sp, r7
 8017a22:	b019      	add	sp, #100	@ 0x64
 8017a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017a26:	b5b0      	push	{r4, r5, r7, lr}
 8017a28:	b08c      	sub	sp, #48	@ 0x30
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	60f8      	str	r0, [r7, #12]
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	607a      	str	r2, [r7, #4]
 8017a32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	252f      	movs	r5, #47	@ 0x2f
 8017a42:	197c      	adds	r4, r7, r5
 8017a44:	2210      	movs	r2, #16
 8017a46:	18ba      	adds	r2, r7, r2
 8017a48:	0011      	movs	r1, r2
 8017a4a:	0018      	movs	r0, r3
 8017a4c:	f7ff fd5e 	bl	801750c <validate>
 8017a50:	0003      	movs	r3, r0
 8017a52:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017a54:	197b      	adds	r3, r7, r5
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d107      	bne.n	8017a6c <f_write+0x46>
 8017a5c:	197b      	adds	r3, r7, r5
 8017a5e:	68fa      	ldr	r2, [r7, #12]
 8017a60:	7d52      	ldrb	r2, [r2, #21]
 8017a62:	701a      	strb	r2, [r3, #0]
 8017a64:	197b      	adds	r3, r7, r5
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d003      	beq.n	8017a74 <f_write+0x4e>
 8017a6c:	232f      	movs	r3, #47	@ 0x2f
 8017a6e:	18fb      	adds	r3, r7, r3
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	e16f      	b.n	8017d54 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	7d1b      	ldrb	r3, [r3, #20]
 8017a78:	001a      	movs	r2, r3
 8017a7a:	2302      	movs	r3, #2
 8017a7c:	4013      	ands	r3, r2
 8017a7e:	d101      	bne.n	8017a84 <f_write+0x5e>
 8017a80:	2307      	movs	r3, #7
 8017a82:	e167      	b.n	8017d54 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	699a      	ldr	r2, [r3, #24]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	18d2      	adds	r2, r2, r3
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	699b      	ldr	r3, [r3, #24]
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d300      	bcc.n	8017a96 <f_write+0x70>
 8017a94:	e150      	b.n	8017d38 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	699b      	ldr	r3, [r3, #24]
 8017a9a:	43db      	mvns	r3, r3
 8017a9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017a9e:	e14b      	b.n	8017d38 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	699a      	ldr	r2, [r3, #24]
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	899b      	ldrh	r3, [r3, #12]
 8017aa8:	0019      	movs	r1, r3
 8017aaa:	0010      	movs	r0, r2
 8017aac:	f7e8 fbc2 	bl	8000234 <__aeabi_uidivmod>
 8017ab0:	1e0b      	subs	r3, r1, #0
 8017ab2:	d000      	beq.n	8017ab6 <f_write+0x90>
 8017ab4:	e0f4      	b.n	8017ca0 <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	699a      	ldr	r2, [r3, #24]
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	899b      	ldrh	r3, [r3, #12]
 8017abe:	0019      	movs	r1, r3
 8017ac0:	0010      	movs	r0, r2
 8017ac2:	f7e8 fb31 	bl	8000128 <__udivsi3>
 8017ac6:	0003      	movs	r3, r0
 8017ac8:	001a      	movs	r2, r3
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	895b      	ldrh	r3, [r3, #10]
 8017ace:	3b01      	subs	r3, #1
 8017ad0:	4013      	ands	r3, r2
 8017ad2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d146      	bne.n	8017b68 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	699b      	ldr	r3, [r3, #24]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d10d      	bne.n	8017afe <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	689b      	ldr	r3, [r3, #8]
 8017ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d11e      	bne.n	8017b2c <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	2100      	movs	r1, #0
 8017af2:	0018      	movs	r0, r3
 8017af4:	f7fe fd0d 	bl	8016512 <create_chain>
 8017af8:	0003      	movs	r3, r0
 8017afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017afc:	e016      	b.n	8017b2c <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d009      	beq.n	8017b1a <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	699a      	ldr	r2, [r3, #24]
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	0011      	movs	r1, r2
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f7fe fda5 	bl	801665e <clmt_clust>
 8017b14:	0003      	movs	r3, r0
 8017b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b18:	e008      	b.n	8017b2c <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017b1a:	68fa      	ldr	r2, [r7, #12]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	69db      	ldr	r3, [r3, #28]
 8017b20:	0019      	movs	r1, r3
 8017b22:	0010      	movs	r0, r2
 8017b24:	f7fe fcf5 	bl	8016512 <create_chain>
 8017b28:	0003      	movs	r3, r0
 8017b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d100      	bne.n	8017b34 <f_write+0x10e>
 8017b32:	e106      	b.n	8017d42 <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d104      	bne.n	8017b44 <f_write+0x11e>
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	2202      	movs	r2, #2
 8017b3e:	755a      	strb	r2, [r3, #21]
 8017b40:	2302      	movs	r3, #2
 8017b42:	e107      	b.n	8017d54 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b46:	3301      	adds	r3, #1
 8017b48:	d104      	bne.n	8017b54 <f_write+0x12e>
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	2201      	movs	r2, #1
 8017b4e:	755a      	strb	r2, [r3, #21]
 8017b50:	2301      	movs	r3, #1
 8017b52:	e0ff      	b.n	8017d54 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	689b      	ldr	r3, [r3, #8]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d102      	bne.n	8017b68 <f_write+0x142>
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	7d1b      	ldrb	r3, [r3, #20]
 8017b6c:	b25b      	sxtb	r3, r3
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	da17      	bge.n	8017ba2 <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017b72:	693b      	ldr	r3, [r7, #16]
 8017b74:	7858      	ldrb	r0, [r3, #1]
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	3330      	adds	r3, #48	@ 0x30
 8017b7a:	0019      	movs	r1, r3
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	6a1a      	ldr	r2, [r3, #32]
 8017b80:	2301      	movs	r3, #1
 8017b82:	f7fd fe7f 	bl	8015884 <disk_write>
 8017b86:	1e03      	subs	r3, r0, #0
 8017b88:	d004      	beq.n	8017b94 <f_write+0x16e>
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	2201      	movs	r2, #1
 8017b8e:	755a      	strb	r2, [r3, #21]
 8017b90:	2301      	movs	r3, #1
 8017b92:	e0df      	b.n	8017d54 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	7d1b      	ldrb	r3, [r3, #20]
 8017b98:	227f      	movs	r2, #127	@ 0x7f
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	b2da      	uxtb	r2, r3
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017ba2:	693a      	ldr	r2, [r7, #16]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	69db      	ldr	r3, [r3, #28]
 8017ba8:	0019      	movs	r1, r3
 8017baa:	0010      	movs	r0, r2
 8017bac:	f7fe fa18 	bl	8015fe0 <clust2sect>
 8017bb0:	0003      	movs	r3, r0
 8017bb2:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d104      	bne.n	8017bc4 <f_write+0x19e>
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2202      	movs	r2, #2
 8017bbe:	755a      	strb	r2, [r3, #21]
 8017bc0:	2302      	movs	r3, #2
 8017bc2:	e0c7      	b.n	8017d54 <f_write+0x32e>
			sect += csect;
 8017bc4:	697a      	ldr	r2, [r7, #20]
 8017bc6:	69bb      	ldr	r3, [r7, #24]
 8017bc8:	18d3      	adds	r3, r2, r3
 8017bca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	899b      	ldrh	r3, [r3, #12]
 8017bd0:	0019      	movs	r1, r3
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f7e8 faa8 	bl	8000128 <__udivsi3>
 8017bd8:	0003      	movs	r3, r0
 8017bda:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017bdc:	6a3b      	ldr	r3, [r7, #32]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d040      	beq.n	8017c64 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017be2:	69ba      	ldr	r2, [r7, #24]
 8017be4:	6a3b      	ldr	r3, [r7, #32]
 8017be6:	18d3      	adds	r3, r2, r3
 8017be8:	693a      	ldr	r2, [r7, #16]
 8017bea:	8952      	ldrh	r2, [r2, #10]
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d905      	bls.n	8017bfc <f_write+0x1d6>
					cc = fs->csize - csect;
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	895b      	ldrh	r3, [r3, #10]
 8017bf4:	001a      	movs	r2, r3
 8017bf6:	69bb      	ldr	r3, [r7, #24]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	7858      	ldrb	r0, [r3, #1]
 8017c00:	6a3b      	ldr	r3, [r7, #32]
 8017c02:	697a      	ldr	r2, [r7, #20]
 8017c04:	69f9      	ldr	r1, [r7, #28]
 8017c06:	f7fd fe3d 	bl	8015884 <disk_write>
 8017c0a:	1e03      	subs	r3, r0, #0
 8017c0c:	d004      	beq.n	8017c18 <f_write+0x1f2>
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	2201      	movs	r2, #1
 8017c12:	755a      	strb	r2, [r3, #21]
 8017c14:	2301      	movs	r3, #1
 8017c16:	e09d      	b.n	8017d54 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	6a1a      	ldr	r2, [r3, #32]
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	1ad3      	subs	r3, r2, r3
 8017c20:	6a3a      	ldr	r2, [r7, #32]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d917      	bls.n	8017c56 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	3330      	adds	r3, #48	@ 0x30
 8017c2a:	0018      	movs	r0, r3
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6a1a      	ldr	r2, [r3, #32]
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	1ad3      	subs	r3, r2, r3
 8017c34:	693a      	ldr	r2, [r7, #16]
 8017c36:	8992      	ldrh	r2, [r2, #12]
 8017c38:	4353      	muls	r3, r2
 8017c3a:	69fa      	ldr	r2, [r7, #28]
 8017c3c:	18d1      	adds	r1, r2, r3
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	899b      	ldrh	r3, [r3, #12]
 8017c42:	001a      	movs	r2, r3
 8017c44:	f7fd fef2 	bl	8015a2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	7d1b      	ldrb	r3, [r3, #20]
 8017c4c:	227f      	movs	r2, #127	@ 0x7f
 8017c4e:	4013      	ands	r3, r2
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	899b      	ldrh	r3, [r3, #12]
 8017c5a:	001a      	movs	r2, r3
 8017c5c:	6a3b      	ldr	r3, [r7, #32]
 8017c5e:	4353      	muls	r3, r2
 8017c60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8017c62:	e04b      	b.n	8017cfc <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	6a1b      	ldr	r3, [r3, #32]
 8017c68:	697a      	ldr	r2, [r7, #20]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d015      	beq.n	8017c9a <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	699a      	ldr	r2, [r3, #24]
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c76:	429a      	cmp	r2, r3
 8017c78:	d20f      	bcs.n	8017c9a <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	7858      	ldrb	r0, [r3, #1]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	3330      	adds	r3, #48	@ 0x30
 8017c82:	0019      	movs	r1, r3
 8017c84:	697a      	ldr	r2, [r7, #20]
 8017c86:	2301      	movs	r3, #1
 8017c88:	f7fd fdd4 	bl	8015834 <disk_read>
 8017c8c:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8017c8e:	d004      	beq.n	8017c9a <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	2201      	movs	r2, #1
 8017c94:	755a      	strb	r2, [r3, #21]
 8017c96:	2301      	movs	r3, #1
 8017c98:	e05c      	b.n	8017d54 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	697a      	ldr	r2, [r7, #20]
 8017c9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	899b      	ldrh	r3, [r3, #12]
 8017ca4:	001c      	movs	r4, r3
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	699a      	ldr	r2, [r3, #24]
 8017caa:	693b      	ldr	r3, [r7, #16]
 8017cac:	899b      	ldrh	r3, [r3, #12]
 8017cae:	0019      	movs	r1, r3
 8017cb0:	0010      	movs	r0, r2
 8017cb2:	f7e8 fabf 	bl	8000234 <__aeabi_uidivmod>
 8017cb6:	000b      	movs	r3, r1
 8017cb8:	1ae3      	subs	r3, r4, r3
 8017cba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d901      	bls.n	8017cc8 <f_write+0x2a2>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	3330      	adds	r3, #48	@ 0x30
 8017ccc:	001c      	movs	r4, r3
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	699a      	ldr	r2, [r3, #24]
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	899b      	ldrh	r3, [r3, #12]
 8017cd6:	0019      	movs	r1, r3
 8017cd8:	0010      	movs	r0, r2
 8017cda:	f7e8 faab 	bl	8000234 <__aeabi_uidivmod>
 8017cde:	000b      	movs	r3, r1
 8017ce0:	18e3      	adds	r3, r4, r3
 8017ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ce4:	69f9      	ldr	r1, [r7, #28]
 8017ce6:	0018      	movs	r0, r3
 8017ce8:	f7fd fea0 	bl	8015a2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	7d1b      	ldrb	r3, [r3, #20]
 8017cf0:	2280      	movs	r2, #128	@ 0x80
 8017cf2:	4252      	negs	r2, r2
 8017cf4:	4313      	orrs	r3, r2
 8017cf6:	b2da      	uxtb	r2, r3
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017cfc:	69fa      	ldr	r2, [r7, #28]
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d00:	18d3      	adds	r3, r2, r3
 8017d02:	61fb      	str	r3, [r7, #28]
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	699a      	ldr	r2, [r3, #24]
 8017d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0a:	18d2      	adds	r2, r2, r3
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	619a      	str	r2, [r3, #24]
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	68d9      	ldr	r1, [r3, #12]
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	699a      	ldr	r2, [r3, #24]
 8017d18:	000b      	movs	r3, r1
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	d200      	bcs.n	8017d20 <f_write+0x2fa>
 8017d1e:	0013      	movs	r3, r2
 8017d20:	68fa      	ldr	r2, [r7, #12]
 8017d22:	60d3      	str	r3, [r2, #12]
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d2a:	18d2      	adds	r2, r2, r3
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	601a      	str	r2, [r3, #0]
 8017d30:	687a      	ldr	r2, [r7, #4]
 8017d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d34:	1ad3      	subs	r3, r2, r3
 8017d36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d000      	beq.n	8017d40 <f_write+0x31a>
 8017d3e:	e6af      	b.n	8017aa0 <f_write+0x7a>
 8017d40:	e000      	b.n	8017d44 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017d42:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	7d1b      	ldrb	r3, [r3, #20]
 8017d48:	2240      	movs	r2, #64	@ 0x40
 8017d4a:	4313      	orrs	r3, r2
 8017d4c:	b2da      	uxtb	r2, r3
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017d52:	2300      	movs	r3, #0
}
 8017d54:	0018      	movs	r0, r3
 8017d56:	46bd      	mov	sp, r7
 8017d58:	b00c      	add	sp, #48	@ 0x30
 8017d5a:	bdb0      	pop	{r4, r5, r7, pc}

08017d5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017d5c:	b5b0      	push	{r4, r5, r7, lr}
 8017d5e:	b086      	sub	sp, #24
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2517      	movs	r5, #23
 8017d68:	197c      	adds	r4, r7, r5
 8017d6a:	2208      	movs	r2, #8
 8017d6c:	18ba      	adds	r2, r7, r2
 8017d6e:	0011      	movs	r1, r2
 8017d70:	0018      	movs	r0, r3
 8017d72:	f7ff fbcb 	bl	801750c <validate>
 8017d76:	0003      	movs	r3, r0
 8017d78:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8017d7a:	197b      	adds	r3, r7, r5
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d16e      	bne.n	8017e60 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	7d1b      	ldrb	r3, [r3, #20]
 8017d86:	001a      	movs	r2, r3
 8017d88:	2340      	movs	r3, #64	@ 0x40
 8017d8a:	4013      	ands	r3, r2
 8017d8c:	d068      	beq.n	8017e60 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	7d1b      	ldrb	r3, [r3, #20]
 8017d92:	b25b      	sxtb	r3, r3
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	da14      	bge.n	8017dc2 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	7858      	ldrb	r0, [r3, #1]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	3330      	adds	r3, #48	@ 0x30
 8017da0:	0019      	movs	r1, r3
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6a1a      	ldr	r2, [r3, #32]
 8017da6:	2301      	movs	r3, #1
 8017da8:	f7fd fd6c 	bl	8015884 <disk_write>
 8017dac:	1e03      	subs	r3, r0, #0
 8017dae:	d001      	beq.n	8017db4 <f_sync+0x58>
 8017db0:	2301      	movs	r3, #1
 8017db2:	e058      	b.n	8017e66 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	7d1b      	ldrb	r3, [r3, #20]
 8017db8:	227f      	movs	r2, #127	@ 0x7f
 8017dba:	4013      	ands	r3, r2
 8017dbc:	b2da      	uxtb	r2, r3
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017dc2:	f7fd fc79 	bl	80156b8 <get_fattime>
 8017dc6:	0003      	movs	r3, r0
 8017dc8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017dca:	68ba      	ldr	r2, [r7, #8]
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dd0:	2517      	movs	r5, #23
 8017dd2:	197c      	adds	r4, r7, r5
 8017dd4:	0019      	movs	r1, r3
 8017dd6:	0010      	movs	r0, r2
 8017dd8:	f7fe f850 	bl	8015e7c <move_window>
 8017ddc:	0003      	movs	r3, r0
 8017dde:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8017de0:	002c      	movs	r4, r5
 8017de2:	193b      	adds	r3, r7, r4
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d13a      	bne.n	8017e60 <f_sync+0x104>
					dir = fp->dir_ptr;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	330b      	adds	r3, #11
 8017df4:	781a      	ldrb	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	330b      	adds	r3, #11
 8017dfa:	2120      	movs	r1, #32
 8017dfc:	430a      	orrs	r2, r1
 8017dfe:	b2d2      	uxtb	r2, r2
 8017e00:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	6818      	ldr	r0, [r3, #0]
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	689a      	ldr	r2, [r3, #8]
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	0019      	movs	r1, r3
 8017e0e:	f7fe fe40 	bl	8016a92 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	331c      	adds	r3, #28
 8017e16:	001a      	movs	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	68db      	ldr	r3, [r3, #12]
 8017e1c:	0019      	movs	r1, r3
 8017e1e:	0010      	movs	r0, r2
 8017e20:	f7fd fdda 	bl	80159d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	3316      	adds	r3, #22
 8017e28:	693a      	ldr	r2, [r7, #16]
 8017e2a:	0011      	movs	r1, r2
 8017e2c:	0018      	movs	r0, r3
 8017e2e:	f7fd fdd3 	bl	80159d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	3312      	adds	r3, #18
 8017e36:	2100      	movs	r1, #0
 8017e38:	0018      	movs	r0, r3
 8017e3a:	f7fd fdaf 	bl	801599c <st_word>
					fs->wflag = 1;
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	2201      	movs	r2, #1
 8017e42:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	193c      	adds	r4, r7, r4
 8017e48:	0018      	movs	r0, r3
 8017e4a:	f7fe f84d 	bl	8015ee8 <sync_fs>
 8017e4e:	0003      	movs	r3, r0
 8017e50:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	7d1b      	ldrb	r3, [r3, #20]
 8017e56:	2240      	movs	r2, #64	@ 0x40
 8017e58:	4393      	bics	r3, r2
 8017e5a:	b2da      	uxtb	r2, r3
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017e60:	2317      	movs	r3, #23
 8017e62:	18fb      	adds	r3, r7, r3
 8017e64:	781b      	ldrb	r3, [r3, #0]
}
 8017e66:	0018      	movs	r0, r3
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	b006      	add	sp, #24
 8017e6c:	bdb0      	pop	{r4, r5, r7, pc}

08017e6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017e6e:	b5b0      	push	{r4, r5, r7, lr}
 8017e70:	b084      	sub	sp, #16
 8017e72:	af00      	add	r7, sp, #0
 8017e74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017e76:	250f      	movs	r5, #15
 8017e78:	197c      	adds	r4, r7, r5
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	0018      	movs	r0, r3
 8017e7e:	f7ff ff6d 	bl	8017d5c <f_sync>
 8017e82:	0003      	movs	r3, r0
 8017e84:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8017e86:	197b      	adds	r3, r7, r5
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d11c      	bne.n	8017ec8 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	197c      	adds	r4, r7, r5
 8017e92:	2208      	movs	r2, #8
 8017e94:	18ba      	adds	r2, r7, r2
 8017e96:	0011      	movs	r1, r2
 8017e98:	0018      	movs	r0, r3
 8017e9a:	f7ff fb37 	bl	801750c <validate>
 8017e9e:	0003      	movs	r3, r0
 8017ea0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8017ea2:	197b      	adds	r3, r7, r5
 8017ea4:	781b      	ldrb	r3, [r3, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d10e      	bne.n	8017ec8 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	691b      	ldr	r3, [r3, #16]
 8017eae:	197c      	adds	r4, r7, r5
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	f7fd ff31 	bl	8015d18 <dec_lock>
 8017eb6:	0003      	movs	r3, r0
 8017eb8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8017eba:	197b      	adds	r3, r7, r5
 8017ebc:	781b      	ldrb	r3, [r3, #0]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d102      	bne.n	8017ec8 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017ec8:	230f      	movs	r3, #15
 8017eca:	18fb      	adds	r3, r7, r3
 8017ecc:	781b      	ldrb	r3, [r3, #0]
}
 8017ece:	0018      	movs	r0, r3
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	b004      	add	sp, #16
 8017ed4:	bdb0      	pop	{r4, r5, r7, pc}

08017ed6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8017ed6:	b5b0      	push	{r4, r5, r7, lr}
 8017ed8:	b090      	sub	sp, #64	@ 0x40
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	253f      	movs	r5, #63	@ 0x3f
 8017ee4:	197c      	adds	r4, r7, r5
 8017ee6:	2208      	movs	r2, #8
 8017ee8:	18ba      	adds	r2, r7, r2
 8017eea:	0011      	movs	r1, r2
 8017eec:	0018      	movs	r0, r3
 8017eee:	f7ff fb0d 	bl	801750c <validate>
 8017ef2:	0003      	movs	r3, r0
 8017ef4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8017ef6:	197b      	adds	r3, r7, r5
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d103      	bne.n	8017f06 <f_lseek+0x30>
 8017efe:	197b      	adds	r3, r7, r5
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	7d52      	ldrb	r2, [r2, #21]
 8017f04:	701a      	strb	r2, [r3, #0]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8017f06:	223f      	movs	r2, #63	@ 0x3f
 8017f08:	18bb      	adds	r3, r7, r2
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d002      	beq.n	8017f16 <f_lseek+0x40>
 8017f10:	18bb      	adds	r3, r7, r2
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	e20e      	b.n	8018334 <f_lseek+0x45e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d100      	bne.n	8017f20 <f_lseek+0x4a>
 8017f1e:	e0dc      	b.n	80180da <f_lseek+0x204>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	3301      	adds	r3, #1
 8017f24:	d15c      	bne.n	8017fe0 <f_lseek+0x10a>
			tbl = fp->cltbl;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f2a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8017f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f2e:	1d1a      	adds	r2, r3, #4
 8017f30:	627a      	str	r2, [r7, #36]	@ 0x24
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	617b      	str	r3, [r7, #20]
 8017f36:	2302      	movs	r3, #2
 8017f38:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	689b      	ldr	r3, [r3, #8]
 8017f3e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8017f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d03b      	beq.n	8017fbe <f_lseek+0xe8>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8017f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f48:	613b      	str	r3, [r7, #16]
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f50:	3302      	adds	r3, #2
 8017f52:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8017f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f56:	60fb      	str	r3, [r7, #12]
 8017f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f62:	0011      	movs	r1, r2
 8017f64:	0018      	movs	r0, r3
 8017f66:	f7fe f857 	bl	8016018 <get_fat>
 8017f6a:	0003      	movs	r3, r0
 8017f6c:	633b      	str	r3, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8017f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	d804      	bhi.n	8017f7e <f_lseek+0xa8>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2202      	movs	r2, #2
 8017f78:	755a      	strb	r2, [r3, #21]
 8017f7a:	2302      	movs	r3, #2
 8017f7c:	e1da      	b.n	8018334 <f_lseek+0x45e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f80:	3301      	adds	r3, #1
 8017f82:	d104      	bne.n	8017f8e <f_lseek+0xb8>
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2201      	movs	r2, #1
 8017f88:	755a      	strb	r2, [r3, #21]
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	e1d2      	b.n	8018334 <f_lseek+0x45e>
					} while (cl == pcl + 1);
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	3301      	adds	r3, #1
 8017f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d0dd      	beq.n	8017f54 <f_lseek+0x7e>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8017f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f9a:	697b      	ldr	r3, [r7, #20]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d809      	bhi.n	8017fb4 <f_lseek+0xde>
						*tbl++ = ncl; *tbl++ = tcl;
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa2:	1d1a      	adds	r2, r3, #4
 8017fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8017fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017fa8:	601a      	str	r2, [r3, #0]
 8017faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fac:	1d1a      	adds	r2, r3, #4
 8017fae:	627a      	str	r2, [r7, #36]	@ 0x24
 8017fb0:	693a      	ldr	r2, [r7, #16]
 8017fb2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	699b      	ldr	r3, [r3, #24]
 8017fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d3c3      	bcc.n	8017f46 <f_lseek+0x70>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017fc4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8017fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d803      	bhi.n	8017fd6 <f_lseek+0x100>
				*tbl = 0;		/* Terminate table */
 8017fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	601a      	str	r2, [r3, #0]
 8017fd4:	e1ab      	b.n	801832e <f_lseek+0x458>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8017fd6:	233f      	movs	r3, #63	@ 0x3f
 8017fd8:	18fb      	adds	r3, r7, r3
 8017fda:	2211      	movs	r2, #17
 8017fdc:	701a      	strb	r2, [r3, #0]
 8017fde:	e1a6      	b.n	801832e <f_lseek+0x458>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	683a      	ldr	r2, [r7, #0]
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	d902      	bls.n	8017ff0 <f_lseek+0x11a>
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	683a      	ldr	r2, [r7, #0]
 8017ff4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d100      	bne.n	8017ffe <f_lseek+0x128>
 8017ffc:	e197      	b.n	801832e <f_lseek+0x458>
				fp->clust = clmt_clust(fp, ofs - 1);
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	1e5a      	subs	r2, r3, #1
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	0011      	movs	r1, r2
 8018006:	0018      	movs	r0, r3
 8018008:	f7fe fb29 	bl	801665e <clmt_clust>
 801800c:	0002      	movs	r2, r0
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8018012:	68ba      	ldr	r2, [r7, #8]
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	69db      	ldr	r3, [r3, #28]
 8018018:	0019      	movs	r1, r3
 801801a:	0010      	movs	r0, r2
 801801c:	f7fd ffe0 	bl	8015fe0 <clust2sect>
 8018020:	0003      	movs	r3, r0
 8018022:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8018024:	69bb      	ldr	r3, [r7, #24]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d104      	bne.n	8018034 <f_lseek+0x15e>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2202      	movs	r2, #2
 801802e:	755a      	strb	r2, [r3, #21]
 8018030:	2302      	movs	r3, #2
 8018032:	e17f      	b.n	8018334 <f_lseek+0x45e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8018034:	683b      	ldr	r3, [r7, #0]
 8018036:	1e5a      	subs	r2, r3, #1
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	899b      	ldrh	r3, [r3, #12]
 801803c:	0019      	movs	r1, r3
 801803e:	0010      	movs	r0, r2
 8018040:	f7e8 f872 	bl	8000128 <__udivsi3>
 8018044:	0003      	movs	r3, r0
 8018046:	001a      	movs	r2, r3
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	895b      	ldrh	r3, [r3, #10]
 801804c:	3b01      	subs	r3, #1
 801804e:	4013      	ands	r3, r2
 8018050:	69ba      	ldr	r2, [r7, #24]
 8018052:	18d3      	adds	r3, r2, r3
 8018054:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	699a      	ldr	r2, [r3, #24]
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	899b      	ldrh	r3, [r3, #12]
 801805e:	0019      	movs	r1, r3
 8018060:	0010      	movs	r0, r2
 8018062:	f7e8 f8e7 	bl	8000234 <__aeabi_uidivmod>
 8018066:	1e0b      	subs	r3, r1, #0
 8018068:	d100      	bne.n	801806c <f_lseek+0x196>
 801806a:	e160      	b.n	801832e <f_lseek+0x458>
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	6a1b      	ldr	r3, [r3, #32]
 8018070:	69ba      	ldr	r2, [r7, #24]
 8018072:	429a      	cmp	r2, r3
 8018074:	d100      	bne.n	8018078 <f_lseek+0x1a2>
 8018076:	e15a      	b.n	801832e <f_lseek+0x458>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	7d1b      	ldrb	r3, [r3, #20]
 801807c:	b25b      	sxtb	r3, r3
 801807e:	2b00      	cmp	r3, #0
 8018080:	da17      	bge.n	80180b2 <f_lseek+0x1dc>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	7858      	ldrb	r0, [r3, #1]
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	3330      	adds	r3, #48	@ 0x30
 801808a:	0019      	movs	r1, r3
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6a1a      	ldr	r2, [r3, #32]
 8018090:	2301      	movs	r3, #1
 8018092:	f7fd fbf7 	bl	8015884 <disk_write>
 8018096:	1e03      	subs	r3, r0, #0
 8018098:	d004      	beq.n	80180a4 <f_lseek+0x1ce>
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2201      	movs	r2, #1
 801809e:	755a      	strb	r2, [r3, #21]
 80180a0:	2301      	movs	r3, #1
 80180a2:	e147      	b.n	8018334 <f_lseek+0x45e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	7d1b      	ldrb	r3, [r3, #20]
 80180a8:	227f      	movs	r2, #127	@ 0x7f
 80180aa:	4013      	ands	r3, r2
 80180ac:	b2da      	uxtb	r2, r3
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	7858      	ldrb	r0, [r3, #1]
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	3330      	adds	r3, #48	@ 0x30
 80180ba:	0019      	movs	r1, r3
 80180bc:	69ba      	ldr	r2, [r7, #24]
 80180be:	2301      	movs	r3, #1
 80180c0:	f7fd fbb8 	bl	8015834 <disk_read>
 80180c4:	1e03      	subs	r3, r0, #0
 80180c6:	d004      	beq.n	80180d2 <f_lseek+0x1fc>
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2201      	movs	r2, #1
 80180cc:	755a      	strb	r2, [r3, #21]
 80180ce:	2301      	movs	r3, #1
 80180d0:	e130      	b.n	8018334 <f_lseek+0x45e>
#endif
					fp->sect = dsc;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	69ba      	ldr	r2, [r7, #24]
 80180d6:	621a      	str	r2, [r3, #32]
 80180d8:	e129      	b.n	801832e <f_lseek+0x458>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	683a      	ldr	r2, [r7, #0]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d908      	bls.n	80180f6 <f_lseek+0x220>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	7d1b      	ldrb	r3, [r3, #20]
 80180e8:	001a      	movs	r2, r3
 80180ea:	2302      	movs	r3, #2
 80180ec:	4013      	ands	r3, r2
 80180ee:	d102      	bne.n	80180f6 <f_lseek+0x220>
			ofs = fp->obj.objsize;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	699b      	ldr	r3, [r3, #24]
 80180fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80180fc:	2300      	movs	r3, #0
 80180fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018104:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d100      	bne.n	801810e <f_lseek+0x238>
 801810c:	e0bf      	b.n	801828e <f_lseek+0x3b8>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	895b      	ldrh	r3, [r3, #10]
 8018112:	001a      	movs	r2, r3
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	899b      	ldrh	r3, [r3, #12]
 8018118:	4353      	muls	r3, r2
 801811a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801811c:	6a3b      	ldr	r3, [r7, #32]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d020      	beq.n	8018164 <f_lseek+0x28e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	3b01      	subs	r3, #1
 8018126:	69f9      	ldr	r1, [r7, #28]
 8018128:	0018      	movs	r0, r3
 801812a:	f7e7 fffd 	bl	8000128 <__udivsi3>
 801812e:	0003      	movs	r3, r0
 8018130:	001c      	movs	r4, r3
 8018132:	6a3b      	ldr	r3, [r7, #32]
 8018134:	3b01      	subs	r3, #1
 8018136:	69f9      	ldr	r1, [r7, #28]
 8018138:	0018      	movs	r0, r3
 801813a:	f7e7 fff5 	bl	8000128 <__udivsi3>
 801813e:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 8018140:	429c      	cmp	r4, r3
 8018142:	d30f      	bcc.n	8018164 <f_lseek+0x28e>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8018144:	6a3b      	ldr	r3, [r7, #32]
 8018146:	3b01      	subs	r3, #1
 8018148:	69fa      	ldr	r2, [r7, #28]
 801814a:	4252      	negs	r2, r2
 801814c:	401a      	ands	r2, r3
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	699b      	ldr	r3, [r3, #24]
 8018156:	683a      	ldr	r2, [r7, #0]
 8018158:	1ad3      	subs	r3, r2, r3
 801815a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	69db      	ldr	r3, [r3, #28]
 8018160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018162:	e022      	b.n	80181aa <f_lseek+0x2d4>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	689b      	ldr	r3, [r3, #8]
 8018168:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801816c:	2b00      	cmp	r3, #0
 801816e:	d119      	bne.n	80181a4 <f_lseek+0x2ce>
					clst = create_chain(&fp->obj, 0);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2100      	movs	r1, #0
 8018174:	0018      	movs	r0, r3
 8018176:	f7fe f9cc 	bl	8016512 <create_chain>
 801817a:	0003      	movs	r3, r0
 801817c:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018180:	2b01      	cmp	r3, #1
 8018182:	d104      	bne.n	801818e <f_lseek+0x2b8>
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2202      	movs	r2, #2
 8018188:	755a      	strb	r2, [r3, #21]
 801818a:	2302      	movs	r3, #2
 801818c:	e0d2      	b.n	8018334 <f_lseek+0x45e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018190:	3301      	adds	r3, #1
 8018192:	d104      	bne.n	801819e <f_lseek+0x2c8>
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2201      	movs	r2, #1
 8018198:	755a      	strb	r2, [r3, #21]
 801819a:	2301      	movs	r3, #1
 801819c:	e0ca      	b.n	8018334 <f_lseek+0x45e>
					fp->obj.sclust = clst;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181a2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181a8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80181aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d100      	bne.n	80181b2 <f_lseek+0x2dc>
 80181b0:	e06d      	b.n	801828e <f_lseek+0x3b8>
				while (ofs > bcs) {						/* Cluster following loop */
 80181b2:	e03d      	b.n	8018230 <f_lseek+0x35a>
					ofs -= bcs; fp->fptr += bcs;
 80181b4:	683a      	ldr	r2, [r7, #0]
 80181b6:	69fb      	ldr	r3, [r7, #28]
 80181b8:	1ad3      	subs	r3, r2, r3
 80181ba:	603b      	str	r3, [r7, #0]
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	699a      	ldr	r2, [r3, #24]
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	18d2      	adds	r2, r2, r3
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	7d1b      	ldrb	r3, [r3, #20]
 80181cc:	001a      	movs	r2, r3
 80181ce:	2302      	movs	r3, #2
 80181d0:	4013      	ands	r3, r2
 80181d2:	d00d      	beq.n	80181f0 <f_lseek+0x31a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181d8:	0011      	movs	r1, r2
 80181da:	0018      	movs	r0, r3
 80181dc:	f7fe f999 	bl	8016512 <create_chain>
 80181e0:	0003      	movs	r3, r0
 80181e2:	63bb      	str	r3, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80181e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d10a      	bne.n	8018200 <f_lseek+0x32a>
							ofs = 0; break;
 80181ea:	2300      	movs	r3, #0
 80181ec:	603b      	str	r3, [r7, #0]
 80181ee:	e023      	b.n	8018238 <f_lseek+0x362>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181f4:	0011      	movs	r1, r2
 80181f6:	0018      	movs	r0, r3
 80181f8:	f7fd ff0e 	bl	8016018 <get_fat>
 80181fc:	0003      	movs	r3, r0
 80181fe:	63bb      	str	r3, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018202:	3301      	adds	r3, #1
 8018204:	d104      	bne.n	8018210 <f_lseek+0x33a>
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	2201      	movs	r2, #1
 801820a:	755a      	strb	r2, [r3, #21]
 801820c:	2301      	movs	r3, #1
 801820e:	e091      	b.n	8018334 <f_lseek+0x45e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8018210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018212:	2b01      	cmp	r3, #1
 8018214:	d904      	bls.n	8018220 <f_lseek+0x34a>
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	699b      	ldr	r3, [r3, #24]
 801821a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801821c:	429a      	cmp	r2, r3
 801821e:	d304      	bcc.n	801822a <f_lseek+0x354>
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2202      	movs	r2, #2
 8018224:	755a      	strb	r2, [r3, #21]
 8018226:	2302      	movs	r3, #2
 8018228:	e084      	b.n	8018334 <f_lseek+0x45e>
					fp->clust = clst;
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801822e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8018230:	683a      	ldr	r2, [r7, #0]
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	429a      	cmp	r2, r3
 8018236:	d8bd      	bhi.n	80181b4 <f_lseek+0x2de>
				}
				fp->fptr += ofs;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	699a      	ldr	r2, [r3, #24]
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	18d2      	adds	r2, r2, r3
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	899b      	ldrh	r3, [r3, #12]
 8018248:	001a      	movs	r2, r3
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	0011      	movs	r1, r2
 801824e:	0018      	movs	r0, r3
 8018250:	f7e7 fff0 	bl	8000234 <__aeabi_uidivmod>
 8018254:	1e0b      	subs	r3, r1, #0
 8018256:	d01a      	beq.n	801828e <f_lseek+0x3b8>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801825c:	0011      	movs	r1, r2
 801825e:	0018      	movs	r0, r3
 8018260:	f7fd febe 	bl	8015fe0 <clust2sect>
 8018264:	0003      	movs	r3, r0
 8018266:	637b      	str	r3, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8018268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801826a:	2b00      	cmp	r3, #0
 801826c:	d104      	bne.n	8018278 <f_lseek+0x3a2>
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	2202      	movs	r2, #2
 8018272:	755a      	strb	r2, [r3, #21]
 8018274:	2302      	movs	r3, #2
 8018276:	e05d      	b.n	8018334 <f_lseek+0x45e>
					nsect += (DWORD)(ofs / SS(fs));
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	899b      	ldrh	r3, [r3, #12]
 801827c:	0019      	movs	r1, r3
 801827e:	6838      	ldr	r0, [r7, #0]
 8018280:	f7e7 ff52 	bl	8000128 <__udivsi3>
 8018284:	0003      	movs	r3, r0
 8018286:	001a      	movs	r2, r3
 8018288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801828a:	189b      	adds	r3, r3, r2
 801828c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	699a      	ldr	r2, [r3, #24]
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	68db      	ldr	r3, [r3, #12]
 8018296:	429a      	cmp	r2, r3
 8018298:	d90a      	bls.n	80182b0 <f_lseek+0x3da>
			fp->obj.objsize = fp->fptr;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	699a      	ldr	r2, [r3, #24]
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	7d1b      	ldrb	r3, [r3, #20]
 80182a6:	2240      	movs	r2, #64	@ 0x40
 80182a8:	4313      	orrs	r3, r2
 80182aa:	b2da      	uxtb	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	699a      	ldr	r2, [r3, #24]
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	899b      	ldrh	r3, [r3, #12]
 80182b8:	0019      	movs	r1, r3
 80182ba:	0010      	movs	r0, r2
 80182bc:	f7e7 ffba 	bl	8000234 <__aeabi_uidivmod>
 80182c0:	1e0b      	subs	r3, r1, #0
 80182c2:	d034      	beq.n	801832e <f_lseek+0x458>
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6a1b      	ldr	r3, [r3, #32]
 80182c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d02f      	beq.n	801832e <f_lseek+0x458>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	7d1b      	ldrb	r3, [r3, #20]
 80182d2:	b25b      	sxtb	r3, r3
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	da17      	bge.n	8018308 <f_lseek+0x432>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	7858      	ldrb	r0, [r3, #1]
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	3330      	adds	r3, #48	@ 0x30
 80182e0:	0019      	movs	r1, r3
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	6a1a      	ldr	r2, [r3, #32]
 80182e6:	2301      	movs	r3, #1
 80182e8:	f7fd facc 	bl	8015884 <disk_write>
 80182ec:	1e03      	subs	r3, r0, #0
 80182ee:	d004      	beq.n	80182fa <f_lseek+0x424>
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2201      	movs	r2, #1
 80182f4:	755a      	strb	r2, [r3, #21]
 80182f6:	2301      	movs	r3, #1
 80182f8:	e01c      	b.n	8018334 <f_lseek+0x45e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	7d1b      	ldrb	r3, [r3, #20]
 80182fe:	227f      	movs	r2, #127	@ 0x7f
 8018300:	4013      	ands	r3, r2
 8018302:	b2da      	uxtb	r2, r3
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	7858      	ldrb	r0, [r3, #1]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	3330      	adds	r3, #48	@ 0x30
 8018310:	0019      	movs	r1, r3
 8018312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018314:	2301      	movs	r3, #1
 8018316:	f7fd fa8d 	bl	8015834 <disk_read>
 801831a:	1e03      	subs	r3, r0, #0
 801831c:	d004      	beq.n	8018328 <f_lseek+0x452>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2201      	movs	r2, #1
 8018322:	755a      	strb	r2, [r3, #21]
 8018324:	2301      	movs	r3, #1
 8018326:	e005      	b.n	8018334 <f_lseek+0x45e>
#endif
			fp->sect = nsect;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801832c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801832e:	233f      	movs	r3, #63	@ 0x3f
 8018330:	18fb      	adds	r3, r7, r3
 8018332:	781b      	ldrb	r3, [r3, #0]
}
 8018334:	0018      	movs	r0, r3
 8018336:	46bd      	mov	sp, r7
 8018338:	b010      	add	sp, #64	@ 0x40
 801833a:	bdb0      	pop	{r4, r5, r7, pc}

0801833c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	000a      	movs	r2, r1
 8018346:	1cfb      	adds	r3, r7, #3
 8018348:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801834a:	1cfb      	adds	r3, r7, #3
 801834c:	781b      	ldrb	r3, [r3, #0]
 801834e:	2b0a      	cmp	r3, #10
 8018350:	d104      	bne.n	801835c <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	210d      	movs	r1, #13
 8018356:	0018      	movs	r0, r3
 8018358:	f7ff fff0 	bl	801833c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	685b      	ldr	r3, [r3, #4]
 8018360:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	2b00      	cmp	r3, #0
 8018366:	db26      	blt.n	80183b6 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	1c5a      	adds	r2, r3, #1
 801836c:	60fa      	str	r2, [r7, #12]
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	18d3      	adds	r3, r2, r3
 8018372:	1cfa      	adds	r2, r7, #3
 8018374:	7812      	ldrb	r2, [r2, #0]
 8018376:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	2b3c      	cmp	r3, #60	@ 0x3c
 801837c:	dd12      	ble.n	80183a4 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6818      	ldr	r0, [r3, #0]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	330c      	adds	r3, #12
 8018386:	0019      	movs	r1, r3
 8018388:	68fa      	ldr	r2, [r7, #12]
 801838a:	2308      	movs	r3, #8
 801838c:	18fb      	adds	r3, r7, r3
 801838e:	f7ff fb4a 	bl	8017a26 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018392:	68ba      	ldr	r2, [r7, #8]
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	429a      	cmp	r2, r3
 8018398:	d101      	bne.n	801839e <putc_bfd+0x62>
 801839a:	2300      	movs	r3, #0
 801839c:	e001      	b.n	80183a2 <putc_bfd+0x66>
 801839e:	2301      	movs	r3, #1
 80183a0:	425b      	negs	r3, r3
 80183a2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	68fa      	ldr	r2, [r7, #12]
 80183a8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	689b      	ldr	r3, [r3, #8]
 80183ae:	1c5a      	adds	r2, r3, #1
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	609a      	str	r2, [r3, #8]
 80183b4:	e000      	b.n	80183b8 <putc_bfd+0x7c>
	if (i < 0) return;
 80183b6:	46c0      	nop			@ (mov r8, r8)
}
 80183b8:	46bd      	mov	sp, r7
 80183ba:	b004      	add	sp, #16
 80183bc:	bd80      	pop	{r7, pc}

080183be <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80183be:	b580      	push	{r7, lr}
 80183c0:	b084      	sub	sp, #16
 80183c2:	af00      	add	r7, sp, #0
 80183c4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	db15      	blt.n	80183fa <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6818      	ldr	r0, [r3, #0]
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	330c      	adds	r3, #12
 80183d6:	0019      	movs	r1, r3
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	685b      	ldr	r3, [r3, #4]
 80183dc:	001a      	movs	r2, r3
 80183de:	230c      	movs	r3, #12
 80183e0:	18fb      	adds	r3, r7, r3
 80183e2:	f7ff fb20 	bl	8017a26 <f_write>
 80183e6:	1e03      	subs	r3, r0, #0
 80183e8:	d107      	bne.n	80183fa <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	685b      	ldr	r3, [r3, #4]
 80183ee:	68fa      	ldr	r2, [r7, #12]
 80183f0:	4293      	cmp	r3, r2
 80183f2:	d102      	bne.n	80183fa <putc_flush+0x3c>
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	689b      	ldr	r3, [r3, #8]
 80183f8:	e001      	b.n	80183fe <putc_flush+0x40>
	return EOF;
 80183fa:	2301      	movs	r3, #1
 80183fc:	425b      	negs	r3, r3
}
 80183fe:	0018      	movs	r0, r3
 8018400:	46bd      	mov	sp, r7
 8018402:	b004      	add	sp, #16
 8018404:	bd80      	pop	{r7, pc}

08018406 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8018406:	b580      	push	{r7, lr}
 8018408:	b082      	sub	sp, #8
 801840a:	af00      	add	r7, sp, #0
 801840c:	6078      	str	r0, [r7, #4]
 801840e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	683a      	ldr	r2, [r7, #0]
 8018414:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2200      	movs	r2, #0
 801841a:	605a      	str	r2, [r3, #4]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	685a      	ldr	r2, [r3, #4]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	609a      	str	r2, [r3, #8]
}
 8018424:	46c0      	nop			@ (mov r8, r8)
 8018426:	46bd      	mov	sp, r7
 8018428:	b002      	add	sp, #8
 801842a:	bd80      	pop	{r7, pc}

0801842c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b096      	sub	sp, #88	@ 0x58
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
 8018434:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8018436:	683a      	ldr	r2, [r7, #0]
 8018438:	230c      	movs	r3, #12
 801843a:	18fb      	adds	r3, r7, r3
 801843c:	0011      	movs	r1, r2
 801843e:	0018      	movs	r0, r3
 8018440:	f7ff ffe1 	bl	8018406 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8018444:	e009      	b.n	801845a <f_puts+0x2e>
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	1c5a      	adds	r2, r3, #1
 801844a:	607a      	str	r2, [r7, #4]
 801844c:	781a      	ldrb	r2, [r3, #0]
 801844e:	230c      	movs	r3, #12
 8018450:	18fb      	adds	r3, r7, r3
 8018452:	0011      	movs	r1, r2
 8018454:	0018      	movs	r0, r3
 8018456:	f7ff ff71 	bl	801833c <putc_bfd>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	781b      	ldrb	r3, [r3, #0]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d1f1      	bne.n	8018446 <f_puts+0x1a>
	return putc_flush(&pb);
 8018462:	230c      	movs	r3, #12
 8018464:	18fb      	adds	r3, r7, r3
 8018466:	0018      	movs	r0, r3
 8018468:	f7ff ffa9 	bl	80183be <putc_flush>
 801846c:	0003      	movs	r3, r0
}
 801846e:	0018      	movs	r0, r3
 8018470:	46bd      	mov	sp, r7
 8018472:	b016      	add	sp, #88	@ 0x58
 8018474:	bd80      	pop	{r7, pc}
	...

08018478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018478:	b590      	push	{r4, r7, lr}
 801847a:	b087      	sub	sp, #28
 801847c:	af00      	add	r7, sp, #0
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	60b9      	str	r1, [r7, #8]
 8018482:	1dfb      	adds	r3, r7, #7
 8018484:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8018486:	2417      	movs	r4, #23
 8018488:	193b      	adds	r3, r7, r4
 801848a:	2201      	movs	r2, #1
 801848c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 801848e:	2016      	movs	r0, #22
 8018490:	183b      	adds	r3, r7, r0
 8018492:	2200      	movs	r2, #0
 8018494:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8018496:	4b21      	ldr	r3, [pc, #132]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 8018498:	7a5b      	ldrb	r3, [r3, #9]
 801849a:	b2db      	uxtb	r3, r3
 801849c:	2b00      	cmp	r3, #0
 801849e:	d136      	bne.n	801850e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80184a0:	4b1e      	ldr	r3, [pc, #120]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184a2:	7a5b      	ldrb	r3, [r3, #9]
 80184a4:	b2db      	uxtb	r3, r3
 80184a6:	001a      	movs	r2, r3
 80184a8:	4b1c      	ldr	r3, [pc, #112]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184aa:	2100      	movs	r1, #0
 80184ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80184ae:	4b1b      	ldr	r3, [pc, #108]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184b0:	7a5b      	ldrb	r3, [r3, #9]
 80184b2:	b2db      	uxtb	r3, r3
 80184b4:	4a19      	ldr	r2, [pc, #100]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184b6:	009b      	lsls	r3, r3, #2
 80184b8:	18d3      	adds	r3, r2, r3
 80184ba:	3304      	adds	r3, #4
 80184bc:	68fa      	ldr	r2, [r7, #12]
 80184be:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80184c0:	4b16      	ldr	r3, [pc, #88]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184c2:	7a5b      	ldrb	r3, [r3, #9]
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	001a      	movs	r2, r3
 80184c8:	4b14      	ldr	r3, [pc, #80]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184ca:	189b      	adds	r3, r3, r2
 80184cc:	1dfa      	adds	r2, r7, #7
 80184ce:	7812      	ldrb	r2, [r2, #0]
 80184d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80184d2:	4b12      	ldr	r3, [pc, #72]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184d4:	7a5b      	ldrb	r3, [r3, #9]
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	1c5a      	adds	r2, r3, #1
 80184da:	b2d1      	uxtb	r1, r2
 80184dc:	4a0f      	ldr	r2, [pc, #60]	@ (801851c <FATFS_LinkDriverEx+0xa4>)
 80184de:	7251      	strb	r1, [r2, #9]
 80184e0:	183a      	adds	r2, r7, r0
 80184e2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80184e4:	183b      	adds	r3, r7, r0
 80184e6:	781b      	ldrb	r3, [r3, #0]
 80184e8:	3330      	adds	r3, #48	@ 0x30
 80184ea:	b2da      	uxtb	r2, r3
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	3301      	adds	r3, #1
 80184f4:	223a      	movs	r2, #58	@ 0x3a
 80184f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	3302      	adds	r3, #2
 80184fc:	222f      	movs	r2, #47	@ 0x2f
 80184fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	3303      	adds	r3, #3
 8018504:	2200      	movs	r2, #0
 8018506:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018508:	193b      	adds	r3, r7, r4
 801850a:	2200      	movs	r2, #0
 801850c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801850e:	2317      	movs	r3, #23
 8018510:	18fb      	adds	r3, r7, r3
 8018512:	781b      	ldrb	r3, [r3, #0]
}
 8018514:	0018      	movs	r0, r3
 8018516:	46bd      	mov	sp, r7
 8018518:	b007      	add	sp, #28
 801851a:	bd90      	pop	{r4, r7, pc}
 801851c:	2000349c 	.word	0x2000349c

08018520 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801852a:	6839      	ldr	r1, [r7, #0]
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2200      	movs	r2, #0
 8018530:	0018      	movs	r0, r3
 8018532:	f7ff ffa1 	bl	8018478 <FATFS_LinkDriverEx>
 8018536:	0003      	movs	r3, r0
}
 8018538:	0018      	movs	r0, r3
 801853a:	46bd      	mov	sp, r7
 801853c:	b002      	add	sp, #8
 801853e:	bd80      	pop	{r7, pc}

08018540 <sniprintf>:
 8018540:	b40c      	push	{r2, r3}
 8018542:	b530      	push	{r4, r5, lr}
 8018544:	4b17      	ldr	r3, [pc, #92]	@ (80185a4 <sniprintf+0x64>)
 8018546:	000c      	movs	r4, r1
 8018548:	681d      	ldr	r5, [r3, #0]
 801854a:	b09d      	sub	sp, #116	@ 0x74
 801854c:	2900      	cmp	r1, #0
 801854e:	da08      	bge.n	8018562 <sniprintf+0x22>
 8018550:	238b      	movs	r3, #139	@ 0x8b
 8018552:	2001      	movs	r0, #1
 8018554:	602b      	str	r3, [r5, #0]
 8018556:	4240      	negs	r0, r0
 8018558:	b01d      	add	sp, #116	@ 0x74
 801855a:	bc30      	pop	{r4, r5}
 801855c:	bc08      	pop	{r3}
 801855e:	b002      	add	sp, #8
 8018560:	4718      	bx	r3
 8018562:	2382      	movs	r3, #130	@ 0x82
 8018564:	466a      	mov	r2, sp
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	8293      	strh	r3, [r2, #20]
 801856a:	2300      	movs	r3, #0
 801856c:	9002      	str	r0, [sp, #8]
 801856e:	9006      	str	r0, [sp, #24]
 8018570:	4299      	cmp	r1, r3
 8018572:	d000      	beq.n	8018576 <sniprintf+0x36>
 8018574:	1e4b      	subs	r3, r1, #1
 8018576:	9304      	str	r3, [sp, #16]
 8018578:	9307      	str	r3, [sp, #28]
 801857a:	2301      	movs	r3, #1
 801857c:	466a      	mov	r2, sp
 801857e:	425b      	negs	r3, r3
 8018580:	82d3      	strh	r3, [r2, #22]
 8018582:	0028      	movs	r0, r5
 8018584:	ab21      	add	r3, sp, #132	@ 0x84
 8018586:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018588:	a902      	add	r1, sp, #8
 801858a:	9301      	str	r3, [sp, #4]
 801858c:	f000 f9b4 	bl	80188f8 <_svfiprintf_r>
 8018590:	1c43      	adds	r3, r0, #1
 8018592:	da01      	bge.n	8018598 <sniprintf+0x58>
 8018594:	238b      	movs	r3, #139	@ 0x8b
 8018596:	602b      	str	r3, [r5, #0]
 8018598:	2c00      	cmp	r4, #0
 801859a:	d0dd      	beq.n	8018558 <sniprintf+0x18>
 801859c:	2200      	movs	r2, #0
 801859e:	9b02      	ldr	r3, [sp, #8]
 80185a0:	701a      	strb	r2, [r3, #0]
 80185a2:	e7d9      	b.n	8018558 <sniprintf+0x18>
 80185a4:	200004b4 	.word	0x200004b4

080185a8 <memcmp>:
 80185a8:	b530      	push	{r4, r5, lr}
 80185aa:	2400      	movs	r4, #0
 80185ac:	3901      	subs	r1, #1
 80185ae:	42a2      	cmp	r2, r4
 80185b0:	d101      	bne.n	80185b6 <memcmp+0xe>
 80185b2:	2000      	movs	r0, #0
 80185b4:	e005      	b.n	80185c2 <memcmp+0x1a>
 80185b6:	5d03      	ldrb	r3, [r0, r4]
 80185b8:	3401      	adds	r4, #1
 80185ba:	5d0d      	ldrb	r5, [r1, r4]
 80185bc:	42ab      	cmp	r3, r5
 80185be:	d0f6      	beq.n	80185ae <memcmp+0x6>
 80185c0:	1b58      	subs	r0, r3, r5
 80185c2:	bd30      	pop	{r4, r5, pc}

080185c4 <memset>:
 80185c4:	0003      	movs	r3, r0
 80185c6:	1882      	adds	r2, r0, r2
 80185c8:	4293      	cmp	r3, r2
 80185ca:	d100      	bne.n	80185ce <memset+0xa>
 80185cc:	4770      	bx	lr
 80185ce:	7019      	strb	r1, [r3, #0]
 80185d0:	3301      	adds	r3, #1
 80185d2:	e7f9      	b.n	80185c8 <memset+0x4>

080185d4 <__errno>:
 80185d4:	4b01      	ldr	r3, [pc, #4]	@ (80185dc <__errno+0x8>)
 80185d6:	6818      	ldr	r0, [r3, #0]
 80185d8:	4770      	bx	lr
 80185da:	46c0      	nop			@ (mov r8, r8)
 80185dc:	200004b4 	.word	0x200004b4

080185e0 <__libc_init_array>:
 80185e0:	b570      	push	{r4, r5, r6, lr}
 80185e2:	2600      	movs	r6, #0
 80185e4:	4c0c      	ldr	r4, [pc, #48]	@ (8018618 <__libc_init_array+0x38>)
 80185e6:	4d0d      	ldr	r5, [pc, #52]	@ (801861c <__libc_init_array+0x3c>)
 80185e8:	1b64      	subs	r4, r4, r5
 80185ea:	10a4      	asrs	r4, r4, #2
 80185ec:	42a6      	cmp	r6, r4
 80185ee:	d109      	bne.n	8018604 <__libc_init_array+0x24>
 80185f0:	2600      	movs	r6, #0
 80185f2:	f000 fc65 	bl	8018ec0 <_init>
 80185f6:	4c0a      	ldr	r4, [pc, #40]	@ (8018620 <__libc_init_array+0x40>)
 80185f8:	4d0a      	ldr	r5, [pc, #40]	@ (8018624 <__libc_init_array+0x44>)
 80185fa:	1b64      	subs	r4, r4, r5
 80185fc:	10a4      	asrs	r4, r4, #2
 80185fe:	42a6      	cmp	r6, r4
 8018600:	d105      	bne.n	801860e <__libc_init_array+0x2e>
 8018602:	bd70      	pop	{r4, r5, r6, pc}
 8018604:	00b3      	lsls	r3, r6, #2
 8018606:	58eb      	ldr	r3, [r5, r3]
 8018608:	4798      	blx	r3
 801860a:	3601      	adds	r6, #1
 801860c:	e7ee      	b.n	80185ec <__libc_init_array+0xc>
 801860e:	00b3      	lsls	r3, r6, #2
 8018610:	58eb      	ldr	r3, [r5, r3]
 8018612:	4798      	blx	r3
 8018614:	3601      	adds	r6, #1
 8018616:	e7f2      	b.n	80185fe <__libc_init_array+0x1e>
 8018618:	080196c4 	.word	0x080196c4
 801861c:	080196c4 	.word	0x080196c4
 8018620:	080196c8 	.word	0x080196c8
 8018624:	080196c4 	.word	0x080196c4

08018628 <__retarget_lock_acquire_recursive>:
 8018628:	4770      	bx	lr

0801862a <__retarget_lock_release_recursive>:
 801862a:	4770      	bx	lr

0801862c <memcpy>:
 801862c:	2300      	movs	r3, #0
 801862e:	b510      	push	{r4, lr}
 8018630:	429a      	cmp	r2, r3
 8018632:	d100      	bne.n	8018636 <memcpy+0xa>
 8018634:	bd10      	pop	{r4, pc}
 8018636:	5ccc      	ldrb	r4, [r1, r3]
 8018638:	54c4      	strb	r4, [r0, r3]
 801863a:	3301      	adds	r3, #1
 801863c:	e7f8      	b.n	8018630 <memcpy+0x4>
	...

08018640 <_free_r>:
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	0005      	movs	r5, r0
 8018644:	1e0c      	subs	r4, r1, #0
 8018646:	d010      	beq.n	801866a <_free_r+0x2a>
 8018648:	3c04      	subs	r4, #4
 801864a:	6823      	ldr	r3, [r4, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	da00      	bge.n	8018652 <_free_r+0x12>
 8018650:	18e4      	adds	r4, r4, r3
 8018652:	0028      	movs	r0, r5
 8018654:	f000 f8e0 	bl	8018818 <__malloc_lock>
 8018658:	4a1d      	ldr	r2, [pc, #116]	@ (80186d0 <_free_r+0x90>)
 801865a:	6813      	ldr	r3, [r2, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d105      	bne.n	801866c <_free_r+0x2c>
 8018660:	6063      	str	r3, [r4, #4]
 8018662:	6014      	str	r4, [r2, #0]
 8018664:	0028      	movs	r0, r5
 8018666:	f000 f8df 	bl	8018828 <__malloc_unlock>
 801866a:	bd70      	pop	{r4, r5, r6, pc}
 801866c:	42a3      	cmp	r3, r4
 801866e:	d908      	bls.n	8018682 <_free_r+0x42>
 8018670:	6820      	ldr	r0, [r4, #0]
 8018672:	1821      	adds	r1, r4, r0
 8018674:	428b      	cmp	r3, r1
 8018676:	d1f3      	bne.n	8018660 <_free_r+0x20>
 8018678:	6819      	ldr	r1, [r3, #0]
 801867a:	685b      	ldr	r3, [r3, #4]
 801867c:	1809      	adds	r1, r1, r0
 801867e:	6021      	str	r1, [r4, #0]
 8018680:	e7ee      	b.n	8018660 <_free_r+0x20>
 8018682:	001a      	movs	r2, r3
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d001      	beq.n	801868e <_free_r+0x4e>
 801868a:	42a3      	cmp	r3, r4
 801868c:	d9f9      	bls.n	8018682 <_free_r+0x42>
 801868e:	6811      	ldr	r1, [r2, #0]
 8018690:	1850      	adds	r0, r2, r1
 8018692:	42a0      	cmp	r0, r4
 8018694:	d10b      	bne.n	80186ae <_free_r+0x6e>
 8018696:	6820      	ldr	r0, [r4, #0]
 8018698:	1809      	adds	r1, r1, r0
 801869a:	1850      	adds	r0, r2, r1
 801869c:	6011      	str	r1, [r2, #0]
 801869e:	4283      	cmp	r3, r0
 80186a0:	d1e0      	bne.n	8018664 <_free_r+0x24>
 80186a2:	6818      	ldr	r0, [r3, #0]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	1841      	adds	r1, r0, r1
 80186a8:	6011      	str	r1, [r2, #0]
 80186aa:	6053      	str	r3, [r2, #4]
 80186ac:	e7da      	b.n	8018664 <_free_r+0x24>
 80186ae:	42a0      	cmp	r0, r4
 80186b0:	d902      	bls.n	80186b8 <_free_r+0x78>
 80186b2:	230c      	movs	r3, #12
 80186b4:	602b      	str	r3, [r5, #0]
 80186b6:	e7d5      	b.n	8018664 <_free_r+0x24>
 80186b8:	6820      	ldr	r0, [r4, #0]
 80186ba:	1821      	adds	r1, r4, r0
 80186bc:	428b      	cmp	r3, r1
 80186be:	d103      	bne.n	80186c8 <_free_r+0x88>
 80186c0:	6819      	ldr	r1, [r3, #0]
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	1809      	adds	r1, r1, r0
 80186c6:	6021      	str	r1, [r4, #0]
 80186c8:	6063      	str	r3, [r4, #4]
 80186ca:	6054      	str	r4, [r2, #4]
 80186cc:	e7ca      	b.n	8018664 <_free_r+0x24>
 80186ce:	46c0      	nop			@ (mov r8, r8)
 80186d0:	200035ec 	.word	0x200035ec

080186d4 <sbrk_aligned>:
 80186d4:	b570      	push	{r4, r5, r6, lr}
 80186d6:	4e0f      	ldr	r6, [pc, #60]	@ (8018714 <sbrk_aligned+0x40>)
 80186d8:	000d      	movs	r5, r1
 80186da:	6831      	ldr	r1, [r6, #0]
 80186dc:	0004      	movs	r4, r0
 80186de:	2900      	cmp	r1, #0
 80186e0:	d102      	bne.n	80186e8 <sbrk_aligned+0x14>
 80186e2:	f000 fb99 	bl	8018e18 <_sbrk_r>
 80186e6:	6030      	str	r0, [r6, #0]
 80186e8:	0029      	movs	r1, r5
 80186ea:	0020      	movs	r0, r4
 80186ec:	f000 fb94 	bl	8018e18 <_sbrk_r>
 80186f0:	1c43      	adds	r3, r0, #1
 80186f2:	d103      	bne.n	80186fc <sbrk_aligned+0x28>
 80186f4:	2501      	movs	r5, #1
 80186f6:	426d      	negs	r5, r5
 80186f8:	0028      	movs	r0, r5
 80186fa:	bd70      	pop	{r4, r5, r6, pc}
 80186fc:	2303      	movs	r3, #3
 80186fe:	1cc5      	adds	r5, r0, #3
 8018700:	439d      	bics	r5, r3
 8018702:	42a8      	cmp	r0, r5
 8018704:	d0f8      	beq.n	80186f8 <sbrk_aligned+0x24>
 8018706:	1a29      	subs	r1, r5, r0
 8018708:	0020      	movs	r0, r4
 801870a:	f000 fb85 	bl	8018e18 <_sbrk_r>
 801870e:	3001      	adds	r0, #1
 8018710:	d1f2      	bne.n	80186f8 <sbrk_aligned+0x24>
 8018712:	e7ef      	b.n	80186f4 <sbrk_aligned+0x20>
 8018714:	200035e8 	.word	0x200035e8

08018718 <_malloc_r>:
 8018718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801871a:	2203      	movs	r2, #3
 801871c:	1ccb      	adds	r3, r1, #3
 801871e:	4393      	bics	r3, r2
 8018720:	3308      	adds	r3, #8
 8018722:	0005      	movs	r5, r0
 8018724:	001f      	movs	r7, r3
 8018726:	2b0c      	cmp	r3, #12
 8018728:	d234      	bcs.n	8018794 <_malloc_r+0x7c>
 801872a:	270c      	movs	r7, #12
 801872c:	42b9      	cmp	r1, r7
 801872e:	d833      	bhi.n	8018798 <_malloc_r+0x80>
 8018730:	0028      	movs	r0, r5
 8018732:	f000 f871 	bl	8018818 <__malloc_lock>
 8018736:	4e37      	ldr	r6, [pc, #220]	@ (8018814 <_malloc_r+0xfc>)
 8018738:	6833      	ldr	r3, [r6, #0]
 801873a:	001c      	movs	r4, r3
 801873c:	2c00      	cmp	r4, #0
 801873e:	d12f      	bne.n	80187a0 <_malloc_r+0x88>
 8018740:	0039      	movs	r1, r7
 8018742:	0028      	movs	r0, r5
 8018744:	f7ff ffc6 	bl	80186d4 <sbrk_aligned>
 8018748:	0004      	movs	r4, r0
 801874a:	1c43      	adds	r3, r0, #1
 801874c:	d15f      	bne.n	801880e <_malloc_r+0xf6>
 801874e:	6834      	ldr	r4, [r6, #0]
 8018750:	9400      	str	r4, [sp, #0]
 8018752:	9b00      	ldr	r3, [sp, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d14a      	bne.n	80187ee <_malloc_r+0xd6>
 8018758:	2c00      	cmp	r4, #0
 801875a:	d052      	beq.n	8018802 <_malloc_r+0xea>
 801875c:	6823      	ldr	r3, [r4, #0]
 801875e:	0028      	movs	r0, r5
 8018760:	18e3      	adds	r3, r4, r3
 8018762:	9900      	ldr	r1, [sp, #0]
 8018764:	9301      	str	r3, [sp, #4]
 8018766:	f000 fb57 	bl	8018e18 <_sbrk_r>
 801876a:	9b01      	ldr	r3, [sp, #4]
 801876c:	4283      	cmp	r3, r0
 801876e:	d148      	bne.n	8018802 <_malloc_r+0xea>
 8018770:	6823      	ldr	r3, [r4, #0]
 8018772:	0028      	movs	r0, r5
 8018774:	1aff      	subs	r7, r7, r3
 8018776:	0039      	movs	r1, r7
 8018778:	f7ff ffac 	bl	80186d4 <sbrk_aligned>
 801877c:	3001      	adds	r0, #1
 801877e:	d040      	beq.n	8018802 <_malloc_r+0xea>
 8018780:	6823      	ldr	r3, [r4, #0]
 8018782:	19db      	adds	r3, r3, r7
 8018784:	6023      	str	r3, [r4, #0]
 8018786:	6833      	ldr	r3, [r6, #0]
 8018788:	685a      	ldr	r2, [r3, #4]
 801878a:	2a00      	cmp	r2, #0
 801878c:	d133      	bne.n	80187f6 <_malloc_r+0xde>
 801878e:	9b00      	ldr	r3, [sp, #0]
 8018790:	6033      	str	r3, [r6, #0]
 8018792:	e019      	b.n	80187c8 <_malloc_r+0xb0>
 8018794:	2b00      	cmp	r3, #0
 8018796:	dac9      	bge.n	801872c <_malloc_r+0x14>
 8018798:	230c      	movs	r3, #12
 801879a:	602b      	str	r3, [r5, #0]
 801879c:	2000      	movs	r0, #0
 801879e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80187a0:	6821      	ldr	r1, [r4, #0]
 80187a2:	1bc9      	subs	r1, r1, r7
 80187a4:	d420      	bmi.n	80187e8 <_malloc_r+0xd0>
 80187a6:	290b      	cmp	r1, #11
 80187a8:	d90a      	bls.n	80187c0 <_malloc_r+0xa8>
 80187aa:	19e2      	adds	r2, r4, r7
 80187ac:	6027      	str	r7, [r4, #0]
 80187ae:	42a3      	cmp	r3, r4
 80187b0:	d104      	bne.n	80187bc <_malloc_r+0xa4>
 80187b2:	6032      	str	r2, [r6, #0]
 80187b4:	6863      	ldr	r3, [r4, #4]
 80187b6:	6011      	str	r1, [r2, #0]
 80187b8:	6053      	str	r3, [r2, #4]
 80187ba:	e005      	b.n	80187c8 <_malloc_r+0xb0>
 80187bc:	605a      	str	r2, [r3, #4]
 80187be:	e7f9      	b.n	80187b4 <_malloc_r+0x9c>
 80187c0:	6862      	ldr	r2, [r4, #4]
 80187c2:	42a3      	cmp	r3, r4
 80187c4:	d10e      	bne.n	80187e4 <_malloc_r+0xcc>
 80187c6:	6032      	str	r2, [r6, #0]
 80187c8:	0028      	movs	r0, r5
 80187ca:	f000 f82d 	bl	8018828 <__malloc_unlock>
 80187ce:	0020      	movs	r0, r4
 80187d0:	2207      	movs	r2, #7
 80187d2:	300b      	adds	r0, #11
 80187d4:	1d23      	adds	r3, r4, #4
 80187d6:	4390      	bics	r0, r2
 80187d8:	1ac2      	subs	r2, r0, r3
 80187da:	4298      	cmp	r0, r3
 80187dc:	d0df      	beq.n	801879e <_malloc_r+0x86>
 80187de:	1a1b      	subs	r3, r3, r0
 80187e0:	50a3      	str	r3, [r4, r2]
 80187e2:	e7dc      	b.n	801879e <_malloc_r+0x86>
 80187e4:	605a      	str	r2, [r3, #4]
 80187e6:	e7ef      	b.n	80187c8 <_malloc_r+0xb0>
 80187e8:	0023      	movs	r3, r4
 80187ea:	6864      	ldr	r4, [r4, #4]
 80187ec:	e7a6      	b.n	801873c <_malloc_r+0x24>
 80187ee:	9c00      	ldr	r4, [sp, #0]
 80187f0:	6863      	ldr	r3, [r4, #4]
 80187f2:	9300      	str	r3, [sp, #0]
 80187f4:	e7ad      	b.n	8018752 <_malloc_r+0x3a>
 80187f6:	001a      	movs	r2, r3
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	42a3      	cmp	r3, r4
 80187fc:	d1fb      	bne.n	80187f6 <_malloc_r+0xde>
 80187fe:	2300      	movs	r3, #0
 8018800:	e7da      	b.n	80187b8 <_malloc_r+0xa0>
 8018802:	230c      	movs	r3, #12
 8018804:	0028      	movs	r0, r5
 8018806:	602b      	str	r3, [r5, #0]
 8018808:	f000 f80e 	bl	8018828 <__malloc_unlock>
 801880c:	e7c6      	b.n	801879c <_malloc_r+0x84>
 801880e:	6007      	str	r7, [r0, #0]
 8018810:	e7da      	b.n	80187c8 <_malloc_r+0xb0>
 8018812:	46c0      	nop			@ (mov r8, r8)
 8018814:	200035ec 	.word	0x200035ec

08018818 <__malloc_lock>:
 8018818:	b510      	push	{r4, lr}
 801881a:	4802      	ldr	r0, [pc, #8]	@ (8018824 <__malloc_lock+0xc>)
 801881c:	f7ff ff04 	bl	8018628 <__retarget_lock_acquire_recursive>
 8018820:	bd10      	pop	{r4, pc}
 8018822:	46c0      	nop			@ (mov r8, r8)
 8018824:	200035e4 	.word	0x200035e4

08018828 <__malloc_unlock>:
 8018828:	b510      	push	{r4, lr}
 801882a:	4802      	ldr	r0, [pc, #8]	@ (8018834 <__malloc_unlock+0xc>)
 801882c:	f7ff fefd 	bl	801862a <__retarget_lock_release_recursive>
 8018830:	bd10      	pop	{r4, pc}
 8018832:	46c0      	nop			@ (mov r8, r8)
 8018834:	200035e4 	.word	0x200035e4

08018838 <__ssputs_r>:
 8018838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801883a:	688e      	ldr	r6, [r1, #8]
 801883c:	b085      	sub	sp, #20
 801883e:	001f      	movs	r7, r3
 8018840:	000c      	movs	r4, r1
 8018842:	680b      	ldr	r3, [r1, #0]
 8018844:	9002      	str	r0, [sp, #8]
 8018846:	9203      	str	r2, [sp, #12]
 8018848:	42be      	cmp	r6, r7
 801884a:	d830      	bhi.n	80188ae <__ssputs_r+0x76>
 801884c:	210c      	movs	r1, #12
 801884e:	5e62      	ldrsh	r2, [r4, r1]
 8018850:	2190      	movs	r1, #144	@ 0x90
 8018852:	00c9      	lsls	r1, r1, #3
 8018854:	420a      	tst	r2, r1
 8018856:	d028      	beq.n	80188aa <__ssputs_r+0x72>
 8018858:	2003      	movs	r0, #3
 801885a:	6921      	ldr	r1, [r4, #16]
 801885c:	1a5b      	subs	r3, r3, r1
 801885e:	9301      	str	r3, [sp, #4]
 8018860:	6963      	ldr	r3, [r4, #20]
 8018862:	4343      	muls	r3, r0
 8018864:	9801      	ldr	r0, [sp, #4]
 8018866:	0fdd      	lsrs	r5, r3, #31
 8018868:	18ed      	adds	r5, r5, r3
 801886a:	1c7b      	adds	r3, r7, #1
 801886c:	181b      	adds	r3, r3, r0
 801886e:	106d      	asrs	r5, r5, #1
 8018870:	42ab      	cmp	r3, r5
 8018872:	d900      	bls.n	8018876 <__ssputs_r+0x3e>
 8018874:	001d      	movs	r5, r3
 8018876:	0552      	lsls	r2, r2, #21
 8018878:	d528      	bpl.n	80188cc <__ssputs_r+0x94>
 801887a:	0029      	movs	r1, r5
 801887c:	9802      	ldr	r0, [sp, #8]
 801887e:	f7ff ff4b 	bl	8018718 <_malloc_r>
 8018882:	1e06      	subs	r6, r0, #0
 8018884:	d02c      	beq.n	80188e0 <__ssputs_r+0xa8>
 8018886:	9a01      	ldr	r2, [sp, #4]
 8018888:	6921      	ldr	r1, [r4, #16]
 801888a:	f7ff fecf 	bl	801862c <memcpy>
 801888e:	89a2      	ldrh	r2, [r4, #12]
 8018890:	4b18      	ldr	r3, [pc, #96]	@ (80188f4 <__ssputs_r+0xbc>)
 8018892:	401a      	ands	r2, r3
 8018894:	2380      	movs	r3, #128	@ 0x80
 8018896:	4313      	orrs	r3, r2
 8018898:	81a3      	strh	r3, [r4, #12]
 801889a:	9b01      	ldr	r3, [sp, #4]
 801889c:	6126      	str	r6, [r4, #16]
 801889e:	18f6      	adds	r6, r6, r3
 80188a0:	6026      	str	r6, [r4, #0]
 80188a2:	003e      	movs	r6, r7
 80188a4:	6165      	str	r5, [r4, #20]
 80188a6:	1aed      	subs	r5, r5, r3
 80188a8:	60a5      	str	r5, [r4, #8]
 80188aa:	42be      	cmp	r6, r7
 80188ac:	d900      	bls.n	80188b0 <__ssputs_r+0x78>
 80188ae:	003e      	movs	r6, r7
 80188b0:	0032      	movs	r2, r6
 80188b2:	9903      	ldr	r1, [sp, #12]
 80188b4:	6820      	ldr	r0, [r4, #0]
 80188b6:	f000 fa9b 	bl	8018df0 <memmove>
 80188ba:	2000      	movs	r0, #0
 80188bc:	68a3      	ldr	r3, [r4, #8]
 80188be:	1b9b      	subs	r3, r3, r6
 80188c0:	60a3      	str	r3, [r4, #8]
 80188c2:	6823      	ldr	r3, [r4, #0]
 80188c4:	199b      	adds	r3, r3, r6
 80188c6:	6023      	str	r3, [r4, #0]
 80188c8:	b005      	add	sp, #20
 80188ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188cc:	002a      	movs	r2, r5
 80188ce:	9802      	ldr	r0, [sp, #8]
 80188d0:	f000 fabf 	bl	8018e52 <_realloc_r>
 80188d4:	1e06      	subs	r6, r0, #0
 80188d6:	d1e0      	bne.n	801889a <__ssputs_r+0x62>
 80188d8:	6921      	ldr	r1, [r4, #16]
 80188da:	9802      	ldr	r0, [sp, #8]
 80188dc:	f7ff feb0 	bl	8018640 <_free_r>
 80188e0:	230c      	movs	r3, #12
 80188e2:	2001      	movs	r0, #1
 80188e4:	9a02      	ldr	r2, [sp, #8]
 80188e6:	4240      	negs	r0, r0
 80188e8:	6013      	str	r3, [r2, #0]
 80188ea:	89a2      	ldrh	r2, [r4, #12]
 80188ec:	3334      	adds	r3, #52	@ 0x34
 80188ee:	4313      	orrs	r3, r2
 80188f0:	81a3      	strh	r3, [r4, #12]
 80188f2:	e7e9      	b.n	80188c8 <__ssputs_r+0x90>
 80188f4:	fffffb7f 	.word	0xfffffb7f

080188f8 <_svfiprintf_r>:
 80188f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188fa:	b0a1      	sub	sp, #132	@ 0x84
 80188fc:	9003      	str	r0, [sp, #12]
 80188fe:	001d      	movs	r5, r3
 8018900:	898b      	ldrh	r3, [r1, #12]
 8018902:	000f      	movs	r7, r1
 8018904:	0016      	movs	r6, r2
 8018906:	061b      	lsls	r3, r3, #24
 8018908:	d511      	bpl.n	801892e <_svfiprintf_r+0x36>
 801890a:	690b      	ldr	r3, [r1, #16]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d10e      	bne.n	801892e <_svfiprintf_r+0x36>
 8018910:	2140      	movs	r1, #64	@ 0x40
 8018912:	f7ff ff01 	bl	8018718 <_malloc_r>
 8018916:	6038      	str	r0, [r7, #0]
 8018918:	6138      	str	r0, [r7, #16]
 801891a:	2800      	cmp	r0, #0
 801891c:	d105      	bne.n	801892a <_svfiprintf_r+0x32>
 801891e:	230c      	movs	r3, #12
 8018920:	9a03      	ldr	r2, [sp, #12]
 8018922:	6013      	str	r3, [r2, #0]
 8018924:	2001      	movs	r0, #1
 8018926:	4240      	negs	r0, r0
 8018928:	e0cf      	b.n	8018aca <_svfiprintf_r+0x1d2>
 801892a:	2340      	movs	r3, #64	@ 0x40
 801892c:	617b      	str	r3, [r7, #20]
 801892e:	2300      	movs	r3, #0
 8018930:	ac08      	add	r4, sp, #32
 8018932:	6163      	str	r3, [r4, #20]
 8018934:	3320      	adds	r3, #32
 8018936:	7663      	strb	r3, [r4, #25]
 8018938:	3310      	adds	r3, #16
 801893a:	76a3      	strb	r3, [r4, #26]
 801893c:	9507      	str	r5, [sp, #28]
 801893e:	0035      	movs	r5, r6
 8018940:	782b      	ldrb	r3, [r5, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <_svfiprintf_r+0x52>
 8018946:	2b25      	cmp	r3, #37	@ 0x25
 8018948:	d148      	bne.n	80189dc <_svfiprintf_r+0xe4>
 801894a:	1bab      	subs	r3, r5, r6
 801894c:	9305      	str	r3, [sp, #20]
 801894e:	42b5      	cmp	r5, r6
 8018950:	d00b      	beq.n	801896a <_svfiprintf_r+0x72>
 8018952:	0032      	movs	r2, r6
 8018954:	0039      	movs	r1, r7
 8018956:	9803      	ldr	r0, [sp, #12]
 8018958:	f7ff ff6e 	bl	8018838 <__ssputs_r>
 801895c:	3001      	adds	r0, #1
 801895e:	d100      	bne.n	8018962 <_svfiprintf_r+0x6a>
 8018960:	e0ae      	b.n	8018ac0 <_svfiprintf_r+0x1c8>
 8018962:	6963      	ldr	r3, [r4, #20]
 8018964:	9a05      	ldr	r2, [sp, #20]
 8018966:	189b      	adds	r3, r3, r2
 8018968:	6163      	str	r3, [r4, #20]
 801896a:	782b      	ldrb	r3, [r5, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d100      	bne.n	8018972 <_svfiprintf_r+0x7a>
 8018970:	e0a6      	b.n	8018ac0 <_svfiprintf_r+0x1c8>
 8018972:	2201      	movs	r2, #1
 8018974:	2300      	movs	r3, #0
 8018976:	4252      	negs	r2, r2
 8018978:	6062      	str	r2, [r4, #4]
 801897a:	a904      	add	r1, sp, #16
 801897c:	3254      	adds	r2, #84	@ 0x54
 801897e:	1852      	adds	r2, r2, r1
 8018980:	1c6e      	adds	r6, r5, #1
 8018982:	6023      	str	r3, [r4, #0]
 8018984:	60e3      	str	r3, [r4, #12]
 8018986:	60a3      	str	r3, [r4, #8]
 8018988:	7013      	strb	r3, [r2, #0]
 801898a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801898c:	4b54      	ldr	r3, [pc, #336]	@ (8018ae0 <_svfiprintf_r+0x1e8>)
 801898e:	2205      	movs	r2, #5
 8018990:	0018      	movs	r0, r3
 8018992:	7831      	ldrb	r1, [r6, #0]
 8018994:	9305      	str	r3, [sp, #20]
 8018996:	f000 fa51 	bl	8018e3c <memchr>
 801899a:	1c75      	adds	r5, r6, #1
 801899c:	2800      	cmp	r0, #0
 801899e:	d11f      	bne.n	80189e0 <_svfiprintf_r+0xe8>
 80189a0:	6822      	ldr	r2, [r4, #0]
 80189a2:	06d3      	lsls	r3, r2, #27
 80189a4:	d504      	bpl.n	80189b0 <_svfiprintf_r+0xb8>
 80189a6:	2353      	movs	r3, #83	@ 0x53
 80189a8:	a904      	add	r1, sp, #16
 80189aa:	185b      	adds	r3, r3, r1
 80189ac:	2120      	movs	r1, #32
 80189ae:	7019      	strb	r1, [r3, #0]
 80189b0:	0713      	lsls	r3, r2, #28
 80189b2:	d504      	bpl.n	80189be <_svfiprintf_r+0xc6>
 80189b4:	2353      	movs	r3, #83	@ 0x53
 80189b6:	a904      	add	r1, sp, #16
 80189b8:	185b      	adds	r3, r3, r1
 80189ba:	212b      	movs	r1, #43	@ 0x2b
 80189bc:	7019      	strb	r1, [r3, #0]
 80189be:	7833      	ldrb	r3, [r6, #0]
 80189c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80189c2:	d016      	beq.n	80189f2 <_svfiprintf_r+0xfa>
 80189c4:	0035      	movs	r5, r6
 80189c6:	2100      	movs	r1, #0
 80189c8:	200a      	movs	r0, #10
 80189ca:	68e3      	ldr	r3, [r4, #12]
 80189cc:	782a      	ldrb	r2, [r5, #0]
 80189ce:	1c6e      	adds	r6, r5, #1
 80189d0:	3a30      	subs	r2, #48	@ 0x30
 80189d2:	2a09      	cmp	r2, #9
 80189d4:	d950      	bls.n	8018a78 <_svfiprintf_r+0x180>
 80189d6:	2900      	cmp	r1, #0
 80189d8:	d111      	bne.n	80189fe <_svfiprintf_r+0x106>
 80189da:	e017      	b.n	8018a0c <_svfiprintf_r+0x114>
 80189dc:	3501      	adds	r5, #1
 80189de:	e7af      	b.n	8018940 <_svfiprintf_r+0x48>
 80189e0:	9b05      	ldr	r3, [sp, #20]
 80189e2:	6822      	ldr	r2, [r4, #0]
 80189e4:	1ac0      	subs	r0, r0, r3
 80189e6:	2301      	movs	r3, #1
 80189e8:	4083      	lsls	r3, r0
 80189ea:	4313      	orrs	r3, r2
 80189ec:	002e      	movs	r6, r5
 80189ee:	6023      	str	r3, [r4, #0]
 80189f0:	e7cc      	b.n	801898c <_svfiprintf_r+0x94>
 80189f2:	9b07      	ldr	r3, [sp, #28]
 80189f4:	1d19      	adds	r1, r3, #4
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	9107      	str	r1, [sp, #28]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	db01      	blt.n	8018a02 <_svfiprintf_r+0x10a>
 80189fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018a00:	e004      	b.n	8018a0c <_svfiprintf_r+0x114>
 8018a02:	425b      	negs	r3, r3
 8018a04:	60e3      	str	r3, [r4, #12]
 8018a06:	2302      	movs	r3, #2
 8018a08:	4313      	orrs	r3, r2
 8018a0a:	6023      	str	r3, [r4, #0]
 8018a0c:	782b      	ldrb	r3, [r5, #0]
 8018a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a10:	d10c      	bne.n	8018a2c <_svfiprintf_r+0x134>
 8018a12:	786b      	ldrb	r3, [r5, #1]
 8018a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a16:	d134      	bne.n	8018a82 <_svfiprintf_r+0x18a>
 8018a18:	9b07      	ldr	r3, [sp, #28]
 8018a1a:	3502      	adds	r5, #2
 8018a1c:	1d1a      	adds	r2, r3, #4
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	9207      	str	r2, [sp, #28]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	da01      	bge.n	8018a2a <_svfiprintf_r+0x132>
 8018a26:	2301      	movs	r3, #1
 8018a28:	425b      	negs	r3, r3
 8018a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a2c:	4e2d      	ldr	r6, [pc, #180]	@ (8018ae4 <_svfiprintf_r+0x1ec>)
 8018a2e:	2203      	movs	r2, #3
 8018a30:	0030      	movs	r0, r6
 8018a32:	7829      	ldrb	r1, [r5, #0]
 8018a34:	f000 fa02 	bl	8018e3c <memchr>
 8018a38:	2800      	cmp	r0, #0
 8018a3a:	d006      	beq.n	8018a4a <_svfiprintf_r+0x152>
 8018a3c:	2340      	movs	r3, #64	@ 0x40
 8018a3e:	1b80      	subs	r0, r0, r6
 8018a40:	4083      	lsls	r3, r0
 8018a42:	6822      	ldr	r2, [r4, #0]
 8018a44:	3501      	adds	r5, #1
 8018a46:	4313      	orrs	r3, r2
 8018a48:	6023      	str	r3, [r4, #0]
 8018a4a:	7829      	ldrb	r1, [r5, #0]
 8018a4c:	2206      	movs	r2, #6
 8018a4e:	4826      	ldr	r0, [pc, #152]	@ (8018ae8 <_svfiprintf_r+0x1f0>)
 8018a50:	1c6e      	adds	r6, r5, #1
 8018a52:	7621      	strb	r1, [r4, #24]
 8018a54:	f000 f9f2 	bl	8018e3c <memchr>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	d038      	beq.n	8018ace <_svfiprintf_r+0x1d6>
 8018a5c:	4b23      	ldr	r3, [pc, #140]	@ (8018aec <_svfiprintf_r+0x1f4>)
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d122      	bne.n	8018aa8 <_svfiprintf_r+0x1b0>
 8018a62:	2207      	movs	r2, #7
 8018a64:	9b07      	ldr	r3, [sp, #28]
 8018a66:	3307      	adds	r3, #7
 8018a68:	4393      	bics	r3, r2
 8018a6a:	3308      	adds	r3, #8
 8018a6c:	9307      	str	r3, [sp, #28]
 8018a6e:	6963      	ldr	r3, [r4, #20]
 8018a70:	9a04      	ldr	r2, [sp, #16]
 8018a72:	189b      	adds	r3, r3, r2
 8018a74:	6163      	str	r3, [r4, #20]
 8018a76:	e762      	b.n	801893e <_svfiprintf_r+0x46>
 8018a78:	4343      	muls	r3, r0
 8018a7a:	0035      	movs	r5, r6
 8018a7c:	2101      	movs	r1, #1
 8018a7e:	189b      	adds	r3, r3, r2
 8018a80:	e7a4      	b.n	80189cc <_svfiprintf_r+0xd4>
 8018a82:	2300      	movs	r3, #0
 8018a84:	200a      	movs	r0, #10
 8018a86:	0019      	movs	r1, r3
 8018a88:	3501      	adds	r5, #1
 8018a8a:	6063      	str	r3, [r4, #4]
 8018a8c:	782a      	ldrb	r2, [r5, #0]
 8018a8e:	1c6e      	adds	r6, r5, #1
 8018a90:	3a30      	subs	r2, #48	@ 0x30
 8018a92:	2a09      	cmp	r2, #9
 8018a94:	d903      	bls.n	8018a9e <_svfiprintf_r+0x1a6>
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d0c8      	beq.n	8018a2c <_svfiprintf_r+0x134>
 8018a9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8018a9c:	e7c6      	b.n	8018a2c <_svfiprintf_r+0x134>
 8018a9e:	4341      	muls	r1, r0
 8018aa0:	0035      	movs	r5, r6
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	1889      	adds	r1, r1, r2
 8018aa6:	e7f1      	b.n	8018a8c <_svfiprintf_r+0x194>
 8018aa8:	aa07      	add	r2, sp, #28
 8018aaa:	9200      	str	r2, [sp, #0]
 8018aac:	0021      	movs	r1, r4
 8018aae:	003a      	movs	r2, r7
 8018ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8018af0 <_svfiprintf_r+0x1f8>)
 8018ab2:	9803      	ldr	r0, [sp, #12]
 8018ab4:	e000      	b.n	8018ab8 <_svfiprintf_r+0x1c0>
 8018ab6:	bf00      	nop
 8018ab8:	9004      	str	r0, [sp, #16]
 8018aba:	9b04      	ldr	r3, [sp, #16]
 8018abc:	3301      	adds	r3, #1
 8018abe:	d1d6      	bne.n	8018a6e <_svfiprintf_r+0x176>
 8018ac0:	89bb      	ldrh	r3, [r7, #12]
 8018ac2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8018ac4:	065b      	lsls	r3, r3, #25
 8018ac6:	d500      	bpl.n	8018aca <_svfiprintf_r+0x1d2>
 8018ac8:	e72c      	b.n	8018924 <_svfiprintf_r+0x2c>
 8018aca:	b021      	add	sp, #132	@ 0x84
 8018acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ace:	aa07      	add	r2, sp, #28
 8018ad0:	9200      	str	r2, [sp, #0]
 8018ad2:	0021      	movs	r1, r4
 8018ad4:	003a      	movs	r2, r7
 8018ad6:	4b06      	ldr	r3, [pc, #24]	@ (8018af0 <_svfiprintf_r+0x1f8>)
 8018ad8:	9803      	ldr	r0, [sp, #12]
 8018ada:	f000 f87b 	bl	8018bd4 <_printf_i>
 8018ade:	e7eb      	b.n	8018ab8 <_svfiprintf_r+0x1c0>
 8018ae0:	08019688 	.word	0x08019688
 8018ae4:	0801968e 	.word	0x0801968e
 8018ae8:	08019692 	.word	0x08019692
 8018aec:	00000000 	.word	0x00000000
 8018af0:	08018839 	.word	0x08018839

08018af4 <_printf_common>:
 8018af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018af6:	0016      	movs	r6, r2
 8018af8:	9301      	str	r3, [sp, #4]
 8018afa:	688a      	ldr	r2, [r1, #8]
 8018afc:	690b      	ldr	r3, [r1, #16]
 8018afe:	000c      	movs	r4, r1
 8018b00:	9000      	str	r0, [sp, #0]
 8018b02:	4293      	cmp	r3, r2
 8018b04:	da00      	bge.n	8018b08 <_printf_common+0x14>
 8018b06:	0013      	movs	r3, r2
 8018b08:	0022      	movs	r2, r4
 8018b0a:	6033      	str	r3, [r6, #0]
 8018b0c:	3243      	adds	r2, #67	@ 0x43
 8018b0e:	7812      	ldrb	r2, [r2, #0]
 8018b10:	2a00      	cmp	r2, #0
 8018b12:	d001      	beq.n	8018b18 <_printf_common+0x24>
 8018b14:	3301      	adds	r3, #1
 8018b16:	6033      	str	r3, [r6, #0]
 8018b18:	6823      	ldr	r3, [r4, #0]
 8018b1a:	069b      	lsls	r3, r3, #26
 8018b1c:	d502      	bpl.n	8018b24 <_printf_common+0x30>
 8018b1e:	6833      	ldr	r3, [r6, #0]
 8018b20:	3302      	adds	r3, #2
 8018b22:	6033      	str	r3, [r6, #0]
 8018b24:	6822      	ldr	r2, [r4, #0]
 8018b26:	2306      	movs	r3, #6
 8018b28:	0015      	movs	r5, r2
 8018b2a:	401d      	ands	r5, r3
 8018b2c:	421a      	tst	r2, r3
 8018b2e:	d027      	beq.n	8018b80 <_printf_common+0x8c>
 8018b30:	0023      	movs	r3, r4
 8018b32:	3343      	adds	r3, #67	@ 0x43
 8018b34:	781b      	ldrb	r3, [r3, #0]
 8018b36:	1e5a      	subs	r2, r3, #1
 8018b38:	4193      	sbcs	r3, r2
 8018b3a:	6822      	ldr	r2, [r4, #0]
 8018b3c:	0692      	lsls	r2, r2, #26
 8018b3e:	d430      	bmi.n	8018ba2 <_printf_common+0xae>
 8018b40:	0022      	movs	r2, r4
 8018b42:	9901      	ldr	r1, [sp, #4]
 8018b44:	9800      	ldr	r0, [sp, #0]
 8018b46:	9d08      	ldr	r5, [sp, #32]
 8018b48:	3243      	adds	r2, #67	@ 0x43
 8018b4a:	47a8      	blx	r5
 8018b4c:	3001      	adds	r0, #1
 8018b4e:	d025      	beq.n	8018b9c <_printf_common+0xa8>
 8018b50:	2206      	movs	r2, #6
 8018b52:	6823      	ldr	r3, [r4, #0]
 8018b54:	2500      	movs	r5, #0
 8018b56:	4013      	ands	r3, r2
 8018b58:	2b04      	cmp	r3, #4
 8018b5a:	d105      	bne.n	8018b68 <_printf_common+0x74>
 8018b5c:	6833      	ldr	r3, [r6, #0]
 8018b5e:	68e5      	ldr	r5, [r4, #12]
 8018b60:	1aed      	subs	r5, r5, r3
 8018b62:	43eb      	mvns	r3, r5
 8018b64:	17db      	asrs	r3, r3, #31
 8018b66:	401d      	ands	r5, r3
 8018b68:	68a3      	ldr	r3, [r4, #8]
 8018b6a:	6922      	ldr	r2, [r4, #16]
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	dd01      	ble.n	8018b74 <_printf_common+0x80>
 8018b70:	1a9b      	subs	r3, r3, r2
 8018b72:	18ed      	adds	r5, r5, r3
 8018b74:	2600      	movs	r6, #0
 8018b76:	42b5      	cmp	r5, r6
 8018b78:	d120      	bne.n	8018bbc <_printf_common+0xc8>
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	e010      	b.n	8018ba0 <_printf_common+0xac>
 8018b7e:	3501      	adds	r5, #1
 8018b80:	68e3      	ldr	r3, [r4, #12]
 8018b82:	6832      	ldr	r2, [r6, #0]
 8018b84:	1a9b      	subs	r3, r3, r2
 8018b86:	42ab      	cmp	r3, r5
 8018b88:	ddd2      	ble.n	8018b30 <_printf_common+0x3c>
 8018b8a:	0022      	movs	r2, r4
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	9901      	ldr	r1, [sp, #4]
 8018b90:	9800      	ldr	r0, [sp, #0]
 8018b92:	9f08      	ldr	r7, [sp, #32]
 8018b94:	3219      	adds	r2, #25
 8018b96:	47b8      	blx	r7
 8018b98:	3001      	adds	r0, #1
 8018b9a:	d1f0      	bne.n	8018b7e <_printf_common+0x8a>
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	4240      	negs	r0, r0
 8018ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018ba2:	2030      	movs	r0, #48	@ 0x30
 8018ba4:	18e1      	adds	r1, r4, r3
 8018ba6:	3143      	adds	r1, #67	@ 0x43
 8018ba8:	7008      	strb	r0, [r1, #0]
 8018baa:	0021      	movs	r1, r4
 8018bac:	1c5a      	adds	r2, r3, #1
 8018bae:	3145      	adds	r1, #69	@ 0x45
 8018bb0:	7809      	ldrb	r1, [r1, #0]
 8018bb2:	18a2      	adds	r2, r4, r2
 8018bb4:	3243      	adds	r2, #67	@ 0x43
 8018bb6:	3302      	adds	r3, #2
 8018bb8:	7011      	strb	r1, [r2, #0]
 8018bba:	e7c1      	b.n	8018b40 <_printf_common+0x4c>
 8018bbc:	0022      	movs	r2, r4
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	9901      	ldr	r1, [sp, #4]
 8018bc2:	9800      	ldr	r0, [sp, #0]
 8018bc4:	9f08      	ldr	r7, [sp, #32]
 8018bc6:	321a      	adds	r2, #26
 8018bc8:	47b8      	blx	r7
 8018bca:	3001      	adds	r0, #1
 8018bcc:	d0e6      	beq.n	8018b9c <_printf_common+0xa8>
 8018bce:	3601      	adds	r6, #1
 8018bd0:	e7d1      	b.n	8018b76 <_printf_common+0x82>
	...

08018bd4 <_printf_i>:
 8018bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bd6:	b08b      	sub	sp, #44	@ 0x2c
 8018bd8:	9206      	str	r2, [sp, #24]
 8018bda:	000a      	movs	r2, r1
 8018bdc:	3243      	adds	r2, #67	@ 0x43
 8018bde:	9307      	str	r3, [sp, #28]
 8018be0:	9005      	str	r0, [sp, #20]
 8018be2:	9203      	str	r2, [sp, #12]
 8018be4:	7e0a      	ldrb	r2, [r1, #24]
 8018be6:	000c      	movs	r4, r1
 8018be8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018bea:	2a78      	cmp	r2, #120	@ 0x78
 8018bec:	d809      	bhi.n	8018c02 <_printf_i+0x2e>
 8018bee:	2a62      	cmp	r2, #98	@ 0x62
 8018bf0:	d80b      	bhi.n	8018c0a <_printf_i+0x36>
 8018bf2:	2a00      	cmp	r2, #0
 8018bf4:	d100      	bne.n	8018bf8 <_printf_i+0x24>
 8018bf6:	e0bc      	b.n	8018d72 <_printf_i+0x19e>
 8018bf8:	497b      	ldr	r1, [pc, #492]	@ (8018de8 <_printf_i+0x214>)
 8018bfa:	9104      	str	r1, [sp, #16]
 8018bfc:	2a58      	cmp	r2, #88	@ 0x58
 8018bfe:	d100      	bne.n	8018c02 <_printf_i+0x2e>
 8018c00:	e090      	b.n	8018d24 <_printf_i+0x150>
 8018c02:	0025      	movs	r5, r4
 8018c04:	3542      	adds	r5, #66	@ 0x42
 8018c06:	702a      	strb	r2, [r5, #0]
 8018c08:	e022      	b.n	8018c50 <_printf_i+0x7c>
 8018c0a:	0010      	movs	r0, r2
 8018c0c:	3863      	subs	r0, #99	@ 0x63
 8018c0e:	2815      	cmp	r0, #21
 8018c10:	d8f7      	bhi.n	8018c02 <_printf_i+0x2e>
 8018c12:	f7e7 fa7f 	bl	8000114 <__gnu_thumb1_case_shi>
 8018c16:	0016      	.short	0x0016
 8018c18:	fff6001f 	.word	0xfff6001f
 8018c1c:	fff6fff6 	.word	0xfff6fff6
 8018c20:	001ffff6 	.word	0x001ffff6
 8018c24:	fff6fff6 	.word	0xfff6fff6
 8018c28:	fff6fff6 	.word	0xfff6fff6
 8018c2c:	003600a1 	.word	0x003600a1
 8018c30:	fff60080 	.word	0xfff60080
 8018c34:	00b2fff6 	.word	0x00b2fff6
 8018c38:	0036fff6 	.word	0x0036fff6
 8018c3c:	fff6fff6 	.word	0xfff6fff6
 8018c40:	0084      	.short	0x0084
 8018c42:	0025      	movs	r5, r4
 8018c44:	681a      	ldr	r2, [r3, #0]
 8018c46:	3542      	adds	r5, #66	@ 0x42
 8018c48:	1d11      	adds	r1, r2, #4
 8018c4a:	6019      	str	r1, [r3, #0]
 8018c4c:	6813      	ldr	r3, [r2, #0]
 8018c4e:	702b      	strb	r3, [r5, #0]
 8018c50:	2301      	movs	r3, #1
 8018c52:	e0a0      	b.n	8018d96 <_printf_i+0x1c2>
 8018c54:	6818      	ldr	r0, [r3, #0]
 8018c56:	6809      	ldr	r1, [r1, #0]
 8018c58:	1d02      	adds	r2, r0, #4
 8018c5a:	060d      	lsls	r5, r1, #24
 8018c5c:	d50b      	bpl.n	8018c76 <_printf_i+0xa2>
 8018c5e:	6806      	ldr	r6, [r0, #0]
 8018c60:	601a      	str	r2, [r3, #0]
 8018c62:	2e00      	cmp	r6, #0
 8018c64:	da03      	bge.n	8018c6e <_printf_i+0x9a>
 8018c66:	232d      	movs	r3, #45	@ 0x2d
 8018c68:	9a03      	ldr	r2, [sp, #12]
 8018c6a:	4276      	negs	r6, r6
 8018c6c:	7013      	strb	r3, [r2, #0]
 8018c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8018de8 <_printf_i+0x214>)
 8018c70:	270a      	movs	r7, #10
 8018c72:	9304      	str	r3, [sp, #16]
 8018c74:	e018      	b.n	8018ca8 <_printf_i+0xd4>
 8018c76:	6806      	ldr	r6, [r0, #0]
 8018c78:	601a      	str	r2, [r3, #0]
 8018c7a:	0649      	lsls	r1, r1, #25
 8018c7c:	d5f1      	bpl.n	8018c62 <_printf_i+0x8e>
 8018c7e:	b236      	sxth	r6, r6
 8018c80:	e7ef      	b.n	8018c62 <_printf_i+0x8e>
 8018c82:	6808      	ldr	r0, [r1, #0]
 8018c84:	6819      	ldr	r1, [r3, #0]
 8018c86:	c940      	ldmia	r1!, {r6}
 8018c88:	0605      	lsls	r5, r0, #24
 8018c8a:	d402      	bmi.n	8018c92 <_printf_i+0xbe>
 8018c8c:	0640      	lsls	r0, r0, #25
 8018c8e:	d500      	bpl.n	8018c92 <_printf_i+0xbe>
 8018c90:	b2b6      	uxth	r6, r6
 8018c92:	6019      	str	r1, [r3, #0]
 8018c94:	4b54      	ldr	r3, [pc, #336]	@ (8018de8 <_printf_i+0x214>)
 8018c96:	270a      	movs	r7, #10
 8018c98:	9304      	str	r3, [sp, #16]
 8018c9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8018c9c:	d100      	bne.n	8018ca0 <_printf_i+0xcc>
 8018c9e:	3f02      	subs	r7, #2
 8018ca0:	0023      	movs	r3, r4
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	3343      	adds	r3, #67	@ 0x43
 8018ca6:	701a      	strb	r2, [r3, #0]
 8018ca8:	6863      	ldr	r3, [r4, #4]
 8018caa:	60a3      	str	r3, [r4, #8]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	db03      	blt.n	8018cb8 <_printf_i+0xe4>
 8018cb0:	2104      	movs	r1, #4
 8018cb2:	6822      	ldr	r2, [r4, #0]
 8018cb4:	438a      	bics	r2, r1
 8018cb6:	6022      	str	r2, [r4, #0]
 8018cb8:	2e00      	cmp	r6, #0
 8018cba:	d102      	bne.n	8018cc2 <_printf_i+0xee>
 8018cbc:	9d03      	ldr	r5, [sp, #12]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d00c      	beq.n	8018cdc <_printf_i+0x108>
 8018cc2:	9d03      	ldr	r5, [sp, #12]
 8018cc4:	0030      	movs	r0, r6
 8018cc6:	0039      	movs	r1, r7
 8018cc8:	f7e7 fab4 	bl	8000234 <__aeabi_uidivmod>
 8018ccc:	9b04      	ldr	r3, [sp, #16]
 8018cce:	3d01      	subs	r5, #1
 8018cd0:	5c5b      	ldrb	r3, [r3, r1]
 8018cd2:	702b      	strb	r3, [r5, #0]
 8018cd4:	0033      	movs	r3, r6
 8018cd6:	0006      	movs	r6, r0
 8018cd8:	429f      	cmp	r7, r3
 8018cda:	d9f3      	bls.n	8018cc4 <_printf_i+0xf0>
 8018cdc:	2f08      	cmp	r7, #8
 8018cde:	d109      	bne.n	8018cf4 <_printf_i+0x120>
 8018ce0:	6823      	ldr	r3, [r4, #0]
 8018ce2:	07db      	lsls	r3, r3, #31
 8018ce4:	d506      	bpl.n	8018cf4 <_printf_i+0x120>
 8018ce6:	6862      	ldr	r2, [r4, #4]
 8018ce8:	6923      	ldr	r3, [r4, #16]
 8018cea:	429a      	cmp	r2, r3
 8018cec:	dc02      	bgt.n	8018cf4 <_printf_i+0x120>
 8018cee:	2330      	movs	r3, #48	@ 0x30
 8018cf0:	3d01      	subs	r5, #1
 8018cf2:	702b      	strb	r3, [r5, #0]
 8018cf4:	9b03      	ldr	r3, [sp, #12]
 8018cf6:	1b5b      	subs	r3, r3, r5
 8018cf8:	6123      	str	r3, [r4, #16]
 8018cfa:	9b07      	ldr	r3, [sp, #28]
 8018cfc:	0021      	movs	r1, r4
 8018cfe:	9300      	str	r3, [sp, #0]
 8018d00:	9805      	ldr	r0, [sp, #20]
 8018d02:	9b06      	ldr	r3, [sp, #24]
 8018d04:	aa09      	add	r2, sp, #36	@ 0x24
 8018d06:	f7ff fef5 	bl	8018af4 <_printf_common>
 8018d0a:	3001      	adds	r0, #1
 8018d0c:	d148      	bne.n	8018da0 <_printf_i+0x1cc>
 8018d0e:	2001      	movs	r0, #1
 8018d10:	4240      	negs	r0, r0
 8018d12:	b00b      	add	sp, #44	@ 0x2c
 8018d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d16:	2220      	movs	r2, #32
 8018d18:	6809      	ldr	r1, [r1, #0]
 8018d1a:	430a      	orrs	r2, r1
 8018d1c:	6022      	str	r2, [r4, #0]
 8018d1e:	2278      	movs	r2, #120	@ 0x78
 8018d20:	4932      	ldr	r1, [pc, #200]	@ (8018dec <_printf_i+0x218>)
 8018d22:	9104      	str	r1, [sp, #16]
 8018d24:	0021      	movs	r1, r4
 8018d26:	3145      	adds	r1, #69	@ 0x45
 8018d28:	700a      	strb	r2, [r1, #0]
 8018d2a:	6819      	ldr	r1, [r3, #0]
 8018d2c:	6822      	ldr	r2, [r4, #0]
 8018d2e:	c940      	ldmia	r1!, {r6}
 8018d30:	0610      	lsls	r0, r2, #24
 8018d32:	d402      	bmi.n	8018d3a <_printf_i+0x166>
 8018d34:	0650      	lsls	r0, r2, #25
 8018d36:	d500      	bpl.n	8018d3a <_printf_i+0x166>
 8018d38:	b2b6      	uxth	r6, r6
 8018d3a:	6019      	str	r1, [r3, #0]
 8018d3c:	07d3      	lsls	r3, r2, #31
 8018d3e:	d502      	bpl.n	8018d46 <_printf_i+0x172>
 8018d40:	2320      	movs	r3, #32
 8018d42:	4313      	orrs	r3, r2
 8018d44:	6023      	str	r3, [r4, #0]
 8018d46:	2e00      	cmp	r6, #0
 8018d48:	d001      	beq.n	8018d4e <_printf_i+0x17a>
 8018d4a:	2710      	movs	r7, #16
 8018d4c:	e7a8      	b.n	8018ca0 <_printf_i+0xcc>
 8018d4e:	2220      	movs	r2, #32
 8018d50:	6823      	ldr	r3, [r4, #0]
 8018d52:	4393      	bics	r3, r2
 8018d54:	6023      	str	r3, [r4, #0]
 8018d56:	e7f8      	b.n	8018d4a <_printf_i+0x176>
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	680d      	ldr	r5, [r1, #0]
 8018d5c:	1d10      	adds	r0, r2, #4
 8018d5e:	6949      	ldr	r1, [r1, #20]
 8018d60:	6018      	str	r0, [r3, #0]
 8018d62:	6813      	ldr	r3, [r2, #0]
 8018d64:	062e      	lsls	r6, r5, #24
 8018d66:	d501      	bpl.n	8018d6c <_printf_i+0x198>
 8018d68:	6019      	str	r1, [r3, #0]
 8018d6a:	e002      	b.n	8018d72 <_printf_i+0x19e>
 8018d6c:	066d      	lsls	r5, r5, #25
 8018d6e:	d5fb      	bpl.n	8018d68 <_printf_i+0x194>
 8018d70:	8019      	strh	r1, [r3, #0]
 8018d72:	2300      	movs	r3, #0
 8018d74:	9d03      	ldr	r5, [sp, #12]
 8018d76:	6123      	str	r3, [r4, #16]
 8018d78:	e7bf      	b.n	8018cfa <_printf_i+0x126>
 8018d7a:	681a      	ldr	r2, [r3, #0]
 8018d7c:	1d11      	adds	r1, r2, #4
 8018d7e:	6019      	str	r1, [r3, #0]
 8018d80:	6815      	ldr	r5, [r2, #0]
 8018d82:	2100      	movs	r1, #0
 8018d84:	0028      	movs	r0, r5
 8018d86:	6862      	ldr	r2, [r4, #4]
 8018d88:	f000 f858 	bl	8018e3c <memchr>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	d001      	beq.n	8018d94 <_printf_i+0x1c0>
 8018d90:	1b40      	subs	r0, r0, r5
 8018d92:	6060      	str	r0, [r4, #4]
 8018d94:	6863      	ldr	r3, [r4, #4]
 8018d96:	6123      	str	r3, [r4, #16]
 8018d98:	2300      	movs	r3, #0
 8018d9a:	9a03      	ldr	r2, [sp, #12]
 8018d9c:	7013      	strb	r3, [r2, #0]
 8018d9e:	e7ac      	b.n	8018cfa <_printf_i+0x126>
 8018da0:	002a      	movs	r2, r5
 8018da2:	6923      	ldr	r3, [r4, #16]
 8018da4:	9906      	ldr	r1, [sp, #24]
 8018da6:	9805      	ldr	r0, [sp, #20]
 8018da8:	9d07      	ldr	r5, [sp, #28]
 8018daa:	47a8      	blx	r5
 8018dac:	3001      	adds	r0, #1
 8018dae:	d0ae      	beq.n	8018d0e <_printf_i+0x13a>
 8018db0:	6823      	ldr	r3, [r4, #0]
 8018db2:	079b      	lsls	r3, r3, #30
 8018db4:	d415      	bmi.n	8018de2 <_printf_i+0x20e>
 8018db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018db8:	68e0      	ldr	r0, [r4, #12]
 8018dba:	4298      	cmp	r0, r3
 8018dbc:	daa9      	bge.n	8018d12 <_printf_i+0x13e>
 8018dbe:	0018      	movs	r0, r3
 8018dc0:	e7a7      	b.n	8018d12 <_printf_i+0x13e>
 8018dc2:	0022      	movs	r2, r4
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	9906      	ldr	r1, [sp, #24]
 8018dc8:	9805      	ldr	r0, [sp, #20]
 8018dca:	9e07      	ldr	r6, [sp, #28]
 8018dcc:	3219      	adds	r2, #25
 8018dce:	47b0      	blx	r6
 8018dd0:	3001      	adds	r0, #1
 8018dd2:	d09c      	beq.n	8018d0e <_printf_i+0x13a>
 8018dd4:	3501      	adds	r5, #1
 8018dd6:	68e3      	ldr	r3, [r4, #12]
 8018dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018dda:	1a9b      	subs	r3, r3, r2
 8018ddc:	42ab      	cmp	r3, r5
 8018dde:	dcf0      	bgt.n	8018dc2 <_printf_i+0x1ee>
 8018de0:	e7e9      	b.n	8018db6 <_printf_i+0x1e2>
 8018de2:	2500      	movs	r5, #0
 8018de4:	e7f7      	b.n	8018dd6 <_printf_i+0x202>
 8018de6:	46c0      	nop			@ (mov r8, r8)
 8018de8:	08019699 	.word	0x08019699
 8018dec:	080196aa 	.word	0x080196aa

08018df0 <memmove>:
 8018df0:	b510      	push	{r4, lr}
 8018df2:	4288      	cmp	r0, r1
 8018df4:	d806      	bhi.n	8018e04 <memmove+0x14>
 8018df6:	2300      	movs	r3, #0
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d008      	beq.n	8018e0e <memmove+0x1e>
 8018dfc:	5ccc      	ldrb	r4, [r1, r3]
 8018dfe:	54c4      	strb	r4, [r0, r3]
 8018e00:	3301      	adds	r3, #1
 8018e02:	e7f9      	b.n	8018df8 <memmove+0x8>
 8018e04:	188b      	adds	r3, r1, r2
 8018e06:	4298      	cmp	r0, r3
 8018e08:	d2f5      	bcs.n	8018df6 <memmove+0x6>
 8018e0a:	3a01      	subs	r2, #1
 8018e0c:	d200      	bcs.n	8018e10 <memmove+0x20>
 8018e0e:	bd10      	pop	{r4, pc}
 8018e10:	5c8b      	ldrb	r3, [r1, r2]
 8018e12:	5483      	strb	r3, [r0, r2]
 8018e14:	e7f9      	b.n	8018e0a <memmove+0x1a>
	...

08018e18 <_sbrk_r>:
 8018e18:	2300      	movs	r3, #0
 8018e1a:	b570      	push	{r4, r5, r6, lr}
 8018e1c:	4d06      	ldr	r5, [pc, #24]	@ (8018e38 <_sbrk_r+0x20>)
 8018e1e:	0004      	movs	r4, r0
 8018e20:	0008      	movs	r0, r1
 8018e22:	602b      	str	r3, [r5, #0]
 8018e24:	f7f4 fd0c 	bl	800d840 <_sbrk>
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	d103      	bne.n	8018e34 <_sbrk_r+0x1c>
 8018e2c:	682b      	ldr	r3, [r5, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d000      	beq.n	8018e34 <_sbrk_r+0x1c>
 8018e32:	6023      	str	r3, [r4, #0]
 8018e34:	bd70      	pop	{r4, r5, r6, pc}
 8018e36:	46c0      	nop			@ (mov r8, r8)
 8018e38:	200035e0 	.word	0x200035e0

08018e3c <memchr>:
 8018e3c:	b2c9      	uxtb	r1, r1
 8018e3e:	1882      	adds	r2, r0, r2
 8018e40:	4290      	cmp	r0, r2
 8018e42:	d101      	bne.n	8018e48 <memchr+0xc>
 8018e44:	2000      	movs	r0, #0
 8018e46:	4770      	bx	lr
 8018e48:	7803      	ldrb	r3, [r0, #0]
 8018e4a:	428b      	cmp	r3, r1
 8018e4c:	d0fb      	beq.n	8018e46 <memchr+0xa>
 8018e4e:	3001      	adds	r0, #1
 8018e50:	e7f6      	b.n	8018e40 <memchr+0x4>

08018e52 <_realloc_r>:
 8018e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e54:	0006      	movs	r6, r0
 8018e56:	000c      	movs	r4, r1
 8018e58:	0015      	movs	r5, r2
 8018e5a:	2900      	cmp	r1, #0
 8018e5c:	d105      	bne.n	8018e6a <_realloc_r+0x18>
 8018e5e:	0011      	movs	r1, r2
 8018e60:	f7ff fc5a 	bl	8018718 <_malloc_r>
 8018e64:	0004      	movs	r4, r0
 8018e66:	0020      	movs	r0, r4
 8018e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e6a:	2a00      	cmp	r2, #0
 8018e6c:	d103      	bne.n	8018e76 <_realloc_r+0x24>
 8018e6e:	f7ff fbe7 	bl	8018640 <_free_r>
 8018e72:	2400      	movs	r4, #0
 8018e74:	e7f7      	b.n	8018e66 <_realloc_r+0x14>
 8018e76:	f000 f81b 	bl	8018eb0 <_malloc_usable_size_r>
 8018e7a:	0007      	movs	r7, r0
 8018e7c:	4285      	cmp	r5, r0
 8018e7e:	d802      	bhi.n	8018e86 <_realloc_r+0x34>
 8018e80:	0843      	lsrs	r3, r0, #1
 8018e82:	42ab      	cmp	r3, r5
 8018e84:	d3ef      	bcc.n	8018e66 <_realloc_r+0x14>
 8018e86:	0029      	movs	r1, r5
 8018e88:	0030      	movs	r0, r6
 8018e8a:	f7ff fc45 	bl	8018718 <_malloc_r>
 8018e8e:	9001      	str	r0, [sp, #4]
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d0ee      	beq.n	8018e72 <_realloc_r+0x20>
 8018e94:	002a      	movs	r2, r5
 8018e96:	42bd      	cmp	r5, r7
 8018e98:	d900      	bls.n	8018e9c <_realloc_r+0x4a>
 8018e9a:	003a      	movs	r2, r7
 8018e9c:	0021      	movs	r1, r4
 8018e9e:	9801      	ldr	r0, [sp, #4]
 8018ea0:	f7ff fbc4 	bl	801862c <memcpy>
 8018ea4:	0021      	movs	r1, r4
 8018ea6:	0030      	movs	r0, r6
 8018ea8:	f7ff fbca 	bl	8018640 <_free_r>
 8018eac:	9c01      	ldr	r4, [sp, #4]
 8018eae:	e7da      	b.n	8018e66 <_realloc_r+0x14>

08018eb0 <_malloc_usable_size_r>:
 8018eb0:	1f0b      	subs	r3, r1, #4
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	1f18      	subs	r0, r3, #4
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	da01      	bge.n	8018ebe <_malloc_usable_size_r+0xe>
 8018eba:	580b      	ldr	r3, [r1, r0]
 8018ebc:	18c0      	adds	r0, r0, r3
 8018ebe:	4770      	bx	lr

08018ec0 <_init>:
 8018ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ec2:	46c0      	nop			@ (mov r8, r8)
 8018ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ec6:	bc08      	pop	{r3}
 8018ec8:	469e      	mov	lr, r3
 8018eca:	4770      	bx	lr

08018ecc <_fini>:
 8018ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ece:	46c0      	nop			@ (mov r8, r8)
 8018ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ed2:	bc08      	pop	{r3}
 8018ed4:	469e      	mov	lr, r3
 8018ed6:	4770      	bx	lr
