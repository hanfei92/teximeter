
SmartTaxi_firmware_ver4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019928  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  080199e4  080199e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a25c  0801a25c  0001c5b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a25c  0801a25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a264  0801a264  0001c5b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a264  0801a264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a268  0801a268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  0801a26c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031d4  200005b8  0801a824  0001c5b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000378c  0801a824  0001c78c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c5b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e84c  00000000  00000000  0001c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4c  00000000  00000000  0003ae2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001490  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005004  00000000  00000000  00041810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024613  00000000  00000000  00046814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9cec  00000000  00000000  0006ae27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114b13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069dc  00000000  00000000  00114b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011b534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200005b8 	.word	0x200005b8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080199cc 	.word	0x080199cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200005bc 	.word	0x200005bc
 8000100:	080199cc 	.word	0x080199cc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 ffc5 	bl	80023b4 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 ff05 	bl	8002244 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 ffb7 	bl	80023b4 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 ffad 	bl	80023b4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff2f 	bl	80022cc <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff25 	bl	80022cc <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cfrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0008      	movs	r0, r1
 8000494:	4661      	mov	r1, ip
 8000496:	e7ff      	b.n	8000498 <__aeabi_cfcmpeq>

08000498 <__aeabi_cfcmpeq>:
 8000498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049a:	f000 fc77 	bl	8000d8c <__lesf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d401      	bmi.n	80004a6 <__aeabi_cfcmpeq+0xe>
 80004a2:	2100      	movs	r1, #0
 80004a4:	42c8      	cmn	r0, r1
 80004a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004a8 <__aeabi_fcmpeq>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fbf7 	bl	8000c9c <__eqsf2>
 80004ae:	4240      	negs	r0, r0
 80004b0:	3001      	adds	r0, #1
 80004b2:	bd10      	pop	{r4, pc}

080004b4 <__aeabi_fcmplt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fc69 	bl	8000d8c <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	db01      	blt.n	80004c2 <__aeabi_fcmplt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)

080004c8 <__aeabi_fcmple>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fc5f 	bl	8000d8c <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dd01      	ble.n	80004d6 <__aeabi_fcmple+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmpgt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc05 	bl	8000cec <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dc01      	bgt.n	80004ea <__aeabi_fcmpgt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpge>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fbfb 	bl	8000cec <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	da01      	bge.n	80004fe <__aeabi_fcmpge+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_uldivmod>:
 8000504:	2b00      	cmp	r3, #0
 8000506:	d111      	bne.n	800052c <__aeabi_uldivmod+0x28>
 8000508:	2a00      	cmp	r2, #0
 800050a:	d10f      	bne.n	800052c <__aeabi_uldivmod+0x28>
 800050c:	2900      	cmp	r1, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_uldivmod+0xe>
 8000510:	2800      	cmp	r0, #0
 8000512:	d002      	beq.n	800051a <__aeabi_uldivmod+0x16>
 8000514:	2100      	movs	r1, #0
 8000516:	43c9      	mvns	r1, r1
 8000518:	0008      	movs	r0, r1
 800051a:	b407      	push	{r0, r1, r2}
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <__aeabi_uldivmod+0x24>)
 800051e:	a102      	add	r1, pc, #8	@ (adr r1, 8000528 <__aeabi_uldivmod+0x24>)
 8000520:	1840      	adds	r0, r0, r1
 8000522:	9002      	str	r0, [sp, #8]
 8000524:	bd03      	pop	{r0, r1, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	fffffee9 	.word	0xfffffee9
 800052c:	b403      	push	{r0, r1}
 800052e:	4668      	mov	r0, sp
 8000530:	b501      	push	{r0, lr}
 8000532:	9802      	ldr	r0, [sp, #8]
 8000534:	f000 f83c 	bl	80005b0 <__udivmoddi4>
 8000538:	9b01      	ldr	r3, [sp, #4]
 800053a:	469e      	mov	lr, r3
 800053c:	b002      	add	sp, #8
 800053e:	bc0c      	pop	{r2, r3}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_f2uiz>:
 8000544:	219e      	movs	r1, #158	@ 0x9e
 8000546:	b510      	push	{r4, lr}
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	1c04      	adds	r4, r0, #0
 800054c:	f7ff ffd0 	bl	80004f0 <__aeabi_fcmpge>
 8000550:	2800      	cmp	r0, #0
 8000552:	d103      	bne.n	800055c <__aeabi_f2uiz+0x18>
 8000554:	1c20      	adds	r0, r4, #0
 8000556:	f000 ff49 	bl	80013ec <__aeabi_f2iz>
 800055a:	bd10      	pop	{r4, pc}
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	1c20      	adds	r0, r4, #0
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	f000 fd9f 	bl	80010a4 <__aeabi_fsub>
 8000566:	f000 ff41 	bl	80013ec <__aeabi_f2iz>
 800056a:	2380      	movs	r3, #128	@ 0x80
 800056c:	061b      	lsls	r3, r3, #24
 800056e:	469c      	mov	ip, r3
 8000570:	4460      	add	r0, ip
 8000572:	e7f2      	b.n	800055a <__aeabi_f2uiz+0x16>

08000574 <__aeabi_d2uiz>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	2200      	movs	r2, #0
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <__aeabi_d2uiz+0x38>)
 800057a:	0004      	movs	r4, r0
 800057c:	000d      	movs	r5, r1
 800057e:	f7ff ff7d 	bl	800047c <__aeabi_dcmpge>
 8000582:	2800      	cmp	r0, #0
 8000584:	d104      	bne.n	8000590 <__aeabi_d2uiz+0x1c>
 8000586:	0020      	movs	r0, r4
 8000588:	0029      	movs	r1, r5
 800058a:	f002 fde9 	bl	8003160 <__aeabi_d2iz>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <__aeabi_d2uiz+0x38>)
 8000592:	2200      	movs	r2, #0
 8000594:	0020      	movs	r0, r4
 8000596:	0029      	movs	r1, r5
 8000598:	f002 fa46 	bl	8002a28 <__aeabi_dsub>
 800059c:	f002 fde0 	bl	8003160 <__aeabi_d2iz>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	469c      	mov	ip, r3
 80005a6:	4460      	add	r0, ip
 80005a8:	e7f1      	b.n	800058e <__aeabi_d2uiz+0x1a>
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	41e00000 	.word	0x41e00000

080005b0 <__udivmoddi4>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	4657      	mov	r7, sl
 80005b4:	464e      	mov	r6, r9
 80005b6:	4645      	mov	r5, r8
 80005b8:	46de      	mov	lr, fp
 80005ba:	b5e0      	push	{r5, r6, r7, lr}
 80005bc:	0004      	movs	r4, r0
 80005be:	000d      	movs	r5, r1
 80005c0:	4692      	mov	sl, r2
 80005c2:	4699      	mov	r9, r3
 80005c4:	b083      	sub	sp, #12
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d830      	bhi.n	800062c <__udivmoddi4+0x7c>
 80005ca:	d02d      	beq.n	8000628 <__udivmoddi4+0x78>
 80005cc:	4649      	mov	r1, r9
 80005ce:	4650      	mov	r0, sl
 80005d0:	f002 ff3e 	bl	8003450 <__clzdi2>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0006      	movs	r6, r0
 80005d8:	0020      	movs	r0, r4
 80005da:	f002 ff39 	bl	8003450 <__clzdi2>
 80005de:	1a33      	subs	r3, r6, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	3b20      	subs	r3, #32
 80005e4:	d434      	bmi.n	8000650 <__udivmoddi4+0xa0>
 80005e6:	469b      	mov	fp, r3
 80005e8:	4653      	mov	r3, sl
 80005ea:	465a      	mov	r2, fp
 80005ec:	4093      	lsls	r3, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	001f      	movs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d83b      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d100      	bne.n	8000602 <__udivmoddi4+0x52>
 8000600:	e079      	b.n	80006f6 <__udivmoddi4+0x146>
 8000602:	465b      	mov	r3, fp
 8000604:	1ba4      	subs	r4, r4, r6
 8000606:	41bd      	sbcs	r5, r7
 8000608:	2b00      	cmp	r3, #0
 800060a:	da00      	bge.n	800060e <__udivmoddi4+0x5e>
 800060c:	e076      	b.n	80006fc <__udivmoddi4+0x14c>
 800060e:	2200      	movs	r2, #0
 8000610:	2300      	movs	r3, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	465a      	mov	r2, fp
 800061a:	4093      	lsls	r3, r2
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	4642      	mov	r2, r8
 8000622:	4093      	lsls	r3, r2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	e029      	b.n	800067c <__udivmoddi4+0xcc>
 8000628:	4282      	cmp	r2, r0
 800062a:	d9cf      	bls.n	80005cc <__udivmoddi4+0x1c>
 800062c:	2200      	movs	r2, #0
 800062e:	2300      	movs	r3, #0
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <__udivmoddi4+0x8e>
 800063a:	601c      	str	r4, [r3, #0]
 800063c:	605d      	str	r5, [r3, #4]
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	b003      	add	sp, #12
 8000644:	bcf0      	pop	{r4, r5, r6, r7}
 8000646:	46bb      	mov	fp, r7
 8000648:	46b2      	mov	sl, r6
 800064a:	46a9      	mov	r9, r5
 800064c:	46a0      	mov	r8, r4
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	4642      	mov	r2, r8
 8000652:	469b      	mov	fp, r3
 8000654:	2320      	movs	r3, #32
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	4652      	mov	r2, sl
 800065a:	40da      	lsrs	r2, r3
 800065c:	4641      	mov	r1, r8
 800065e:	0013      	movs	r3, r2
 8000660:	464a      	mov	r2, r9
 8000662:	408a      	lsls	r2, r1
 8000664:	0017      	movs	r7, r2
 8000666:	4642      	mov	r2, r8
 8000668:	431f      	orrs	r7, r3
 800066a:	4653      	mov	r3, sl
 800066c:	4093      	lsls	r3, r2
 800066e:	001e      	movs	r6, r3
 8000670:	42af      	cmp	r7, r5
 8000672:	d9c3      	bls.n	80005fc <__udivmoddi4+0x4c>
 8000674:	2200      	movs	r2, #0
 8000676:	2300      	movs	r3, #0
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	4643      	mov	r3, r8
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0d8      	beq.n	8000634 <__udivmoddi4+0x84>
 8000682:	07fb      	lsls	r3, r7, #31
 8000684:	0872      	lsrs	r2, r6, #1
 8000686:	431a      	orrs	r2, r3
 8000688:	4646      	mov	r6, r8
 800068a:	087b      	lsrs	r3, r7, #1
 800068c:	e00e      	b.n	80006ac <__udivmoddi4+0xfc>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d101      	bne.n	8000696 <__udivmoddi4+0xe6>
 8000692:	42a2      	cmp	r2, r4
 8000694:	d80c      	bhi.n	80006b0 <__udivmoddi4+0x100>
 8000696:	1aa4      	subs	r4, r4, r2
 8000698:	419d      	sbcs	r5, r3
 800069a:	2001      	movs	r0, #1
 800069c:	1924      	adds	r4, r4, r4
 800069e:	416d      	adcs	r5, r5
 80006a0:	2100      	movs	r1, #0
 80006a2:	3e01      	subs	r6, #1
 80006a4:	1824      	adds	r4, r4, r0
 80006a6:	414d      	adcs	r5, r1
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d006      	beq.n	80006ba <__udivmoddi4+0x10a>
 80006ac:	42ab      	cmp	r3, r5
 80006ae:	d9ee      	bls.n	800068e <__udivmoddi4+0xde>
 80006b0:	3e01      	subs	r6, #1
 80006b2:	1924      	adds	r4, r4, r4
 80006b4:	416d      	adcs	r5, r5
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d1f8      	bne.n	80006ac <__udivmoddi4+0xfc>
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	465b      	mov	r3, fp
 80006c0:	1900      	adds	r0, r0, r4
 80006c2:	4169      	adcs	r1, r5
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db24      	blt.n	8000712 <__udivmoddi4+0x162>
 80006c8:	002b      	movs	r3, r5
 80006ca:	465a      	mov	r2, fp
 80006cc:	4644      	mov	r4, r8
 80006ce:	40d3      	lsrs	r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	40e2      	lsrs	r2, r4
 80006d4:	001c      	movs	r4, r3
 80006d6:	465b      	mov	r3, fp
 80006d8:	0015      	movs	r5, r2
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db2a      	blt.n	8000734 <__udivmoddi4+0x184>
 80006de:	0026      	movs	r6, r4
 80006e0:	409e      	lsls	r6, r3
 80006e2:	0033      	movs	r3, r6
 80006e4:	0026      	movs	r6, r4
 80006e6:	4647      	mov	r7, r8
 80006e8:	40be      	lsls	r6, r7
 80006ea:	0032      	movs	r2, r6
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4199      	sbcs	r1, r3
 80006f0:	9000      	str	r0, [sp, #0]
 80006f2:	9101      	str	r1, [sp, #4]
 80006f4:	e79e      	b.n	8000634 <__udivmoddi4+0x84>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d8bc      	bhi.n	8000674 <__udivmoddi4+0xc4>
 80006fa:	e782      	b.n	8000602 <__udivmoddi4+0x52>
 80006fc:	4642      	mov	r2, r8
 80006fe:	2320      	movs	r3, #32
 8000700:	2100      	movs	r1, #0
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	2200      	movs	r2, #0
 8000706:	9100      	str	r1, [sp, #0]
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	40da      	lsrs	r2, r3
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	e785      	b.n	800061e <__udivmoddi4+0x6e>
 8000712:	4642      	mov	r2, r8
 8000714:	2320      	movs	r3, #32
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	002a      	movs	r2, r5
 800071a:	4646      	mov	r6, r8
 800071c:	409a      	lsls	r2, r3
 800071e:	0023      	movs	r3, r4
 8000720:	40f3      	lsrs	r3, r6
 8000722:	4644      	mov	r4, r8
 8000724:	4313      	orrs	r3, r2
 8000726:	002a      	movs	r2, r5
 8000728:	40e2      	lsrs	r2, r4
 800072a:	001c      	movs	r4, r3
 800072c:	465b      	mov	r3, fp
 800072e:	0015      	movs	r5, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	dad4      	bge.n	80006de <__udivmoddi4+0x12e>
 8000734:	4642      	mov	r2, r8
 8000736:	002f      	movs	r7, r5
 8000738:	2320      	movs	r3, #32
 800073a:	0026      	movs	r6, r4
 800073c:	4097      	lsls	r7, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	40de      	lsrs	r6, r3
 8000742:	003b      	movs	r3, r7
 8000744:	4333      	orrs	r3, r6
 8000746:	e7cd      	b.n	80006e4 <__udivmoddi4+0x134>

08000748 <__aeabi_fadd>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	46ce      	mov	lr, r9
 800074c:	4647      	mov	r7, r8
 800074e:	0243      	lsls	r3, r0, #9
 8000750:	0a5a      	lsrs	r2, r3, #9
 8000752:	024e      	lsls	r6, r1, #9
 8000754:	0045      	lsls	r5, r0, #1
 8000756:	0fc4      	lsrs	r4, r0, #31
 8000758:	0048      	lsls	r0, r1, #1
 800075a:	4691      	mov	r9, r2
 800075c:	0e2d      	lsrs	r5, r5, #24
 800075e:	0a72      	lsrs	r2, r6, #9
 8000760:	0e00      	lsrs	r0, r0, #24
 8000762:	4694      	mov	ip, r2
 8000764:	b580      	push	{r7, lr}
 8000766:	099b      	lsrs	r3, r3, #6
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	09b6      	lsrs	r6, r6, #6
 800076c:	1a2a      	subs	r2, r5, r0
 800076e:	428c      	cmp	r4, r1
 8000770:	d021      	beq.n	80007b6 <__aeabi_fadd+0x6e>
 8000772:	2a00      	cmp	r2, #0
 8000774:	dd0d      	ble.n	8000792 <__aeabi_fadd+0x4a>
 8000776:	2800      	cmp	r0, #0
 8000778:	d12d      	bne.n	80007d6 <__aeabi_fadd+0x8e>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x38>
 800077e:	e08d      	b.n	800089c <__aeabi_fadd+0x154>
 8000780:	1e51      	subs	r1, r2, #1
 8000782:	2a01      	cmp	r2, #1
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x40>
 8000786:	e11d      	b.n	80009c4 <__aeabi_fadd+0x27c>
 8000788:	2aff      	cmp	r2, #255	@ 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x46>
 800078c:	e0ab      	b.n	80008e6 <__aeabi_fadd+0x19e>
 800078e:	000a      	movs	r2, r1
 8000790:	e027      	b.n	80007e2 <__aeabi_fadd+0x9a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d04d      	beq.n	8000832 <__aeabi_fadd+0xea>
 8000796:	1b42      	subs	r2, r0, r5
 8000798:	2d00      	cmp	r5, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x56>
 800079c:	e0cc      	b.n	8000938 <__aeabi_fadd+0x1f0>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x5c>
 80007a2:	e079      	b.n	8000898 <__aeabi_fadd+0x150>
 80007a4:	1e54      	subs	r4, r2, #1
 80007a6:	2a01      	cmp	r2, #1
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x64>
 80007aa:	e128      	b.n	80009fe <__aeabi_fadd+0x2b6>
 80007ac:	2aff      	cmp	r2, #255	@ 0xff
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fadd+0x6a>
 80007b0:	e097      	b.n	80008e2 <__aeabi_fadd+0x19a>
 80007b2:	0022      	movs	r2, r4
 80007b4:	e0c5      	b.n	8000942 <__aeabi_fadd+0x1fa>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0x74>
 80007ba:	e096      	b.n	80008ea <__aeabi_fadd+0x1a2>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d04f      	beq.n	8000860 <__aeabi_fadd+0x118>
 80007c0:	2dff      	cmp	r5, #255	@ 0xff
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x7e>
 80007c4:	e08f      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	04c9      	lsls	r1, r1, #19
 80007ca:	430e      	orrs	r6, r1
 80007cc:	2a1b      	cmp	r2, #27
 80007ce:	dd51      	ble.n	8000874 <__aeabi_fadd+0x12c>
 80007d0:	002a      	movs	r2, r5
 80007d2:	3301      	adds	r3, #1
 80007d4:	e018      	b.n	8000808 <__aeabi_fadd+0xc0>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x94>
 80007da:	e084      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	04c9      	lsls	r1, r1, #19
 80007e0:	430e      	orrs	r6, r1
 80007e2:	2101      	movs	r1, #1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc08      	bgt.n	80007fa <__aeabi_fadd+0xb2>
 80007e8:	0031      	movs	r1, r6
 80007ea:	2020      	movs	r0, #32
 80007ec:	40d1      	lsrs	r1, r2
 80007ee:	1a82      	subs	r2, r0, r2
 80007f0:	4096      	lsls	r6, r2
 80007f2:	0032      	movs	r2, r6
 80007f4:	1e50      	subs	r0, r2, #1
 80007f6:	4182      	sbcs	r2, r0
 80007f8:	4311      	orrs	r1, r2
 80007fa:	1a5b      	subs	r3, r3, r1
 80007fc:	015a      	lsls	r2, r3, #5
 80007fe:	d459      	bmi.n	80008b4 <__aeabi_fadd+0x16c>
 8000800:	2107      	movs	r1, #7
 8000802:	002a      	movs	r2, r5
 8000804:	4019      	ands	r1, r3
 8000806:	d049      	beq.n	800089c <__aeabi_fadd+0x154>
 8000808:	210f      	movs	r1, #15
 800080a:	4019      	ands	r1, r3
 800080c:	2904      	cmp	r1, #4
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0xca>
 8000810:	3304      	adds	r3, #4
 8000812:	0159      	lsls	r1, r3, #5
 8000814:	d542      	bpl.n	800089c <__aeabi_fadd+0x154>
 8000816:	1c50      	adds	r0, r2, #1
 8000818:	2afe      	cmp	r2, #254	@ 0xfe
 800081a:	d03a      	beq.n	8000892 <__aeabi_fadd+0x14a>
 800081c:	019b      	lsls	r3, r3, #6
 800081e:	b2c0      	uxtb	r0, r0
 8000820:	0a5b      	lsrs	r3, r3, #9
 8000822:	05c0      	lsls	r0, r0, #23
 8000824:	4318      	orrs	r0, r3
 8000826:	07e4      	lsls	r4, r4, #31
 8000828:	4320      	orrs	r0, r4
 800082a:	bcc0      	pop	{r6, r7}
 800082c:	46b9      	mov	r9, r7
 800082e:	46b0      	mov	r8, r6
 8000830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000832:	20fe      	movs	r0, #254	@ 0xfe
 8000834:	4680      	mov	r8, r0
 8000836:	1c6f      	adds	r7, r5, #1
 8000838:	0038      	movs	r0, r7
 800083a:	4647      	mov	r7, r8
 800083c:	4207      	tst	r7, r0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0xfa>
 8000840:	e08e      	b.n	8000960 <__aeabi_fadd+0x218>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x100>
 8000846:	e0b4      	b.n	80009b2 <__aeabi_fadd+0x26a>
 8000848:	2b00      	cmp	r3, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x106>
 800084c:	e0db      	b.n	8000a06 <__aeabi_fadd+0x2be>
 800084e:	2e00      	cmp	r6, #0
 8000850:	d06c      	beq.n	800092c <__aeabi_fadd+0x1e4>
 8000852:	1b98      	subs	r0, r3, r6
 8000854:	0145      	lsls	r5, r0, #5
 8000856:	d400      	bmi.n	800085a <__aeabi_fadd+0x112>
 8000858:	e0f7      	b.n	8000a4a <__aeabi_fadd+0x302>
 800085a:	000c      	movs	r4, r1
 800085c:	1af3      	subs	r3, r6, r3
 800085e:	e03d      	b.n	80008dc <__aeabi_fadd+0x194>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d01b      	beq.n	800089c <__aeabi_fadd+0x154>
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	2a01      	cmp	r2, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x124>
 800086a:	e082      	b.n	8000972 <__aeabi_fadd+0x22a>
 800086c:	2aff      	cmp	r2, #255	@ 0xff
 800086e:	d03a      	beq.n	80008e6 <__aeabi_fadd+0x19e>
 8000870:	000a      	movs	r2, r1
 8000872:	e7ab      	b.n	80007cc <__aeabi_fadd+0x84>
 8000874:	0031      	movs	r1, r6
 8000876:	2020      	movs	r0, #32
 8000878:	40d1      	lsrs	r1, r2
 800087a:	1a82      	subs	r2, r0, r2
 800087c:	4096      	lsls	r6, r2
 800087e:	0032      	movs	r2, r6
 8000880:	1e50      	subs	r0, r2, #1
 8000882:	4182      	sbcs	r2, r0
 8000884:	430a      	orrs	r2, r1
 8000886:	189b      	adds	r3, r3, r2
 8000888:	015a      	lsls	r2, r3, #5
 800088a:	d5b9      	bpl.n	8000800 <__aeabi_fadd+0xb8>
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000890:	d175      	bne.n	800097e <__aeabi_fadd+0x236>
 8000892:	20ff      	movs	r0, #255	@ 0xff
 8000894:	2300      	movs	r3, #0
 8000896:	e7c4      	b.n	8000822 <__aeabi_fadd+0xda>
 8000898:	000c      	movs	r4, r1
 800089a:	0033      	movs	r3, r6
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	2aff      	cmp	r2, #255	@ 0xff
 80008a0:	d146      	bne.n	8000930 <__aeabi_fadd+0x1e8>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0f5      	beq.n	8000892 <__aeabi_fadd+0x14a>
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	4313      	orrs	r3, r2
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	20ff      	movs	r0, #255	@ 0xff
 80008b0:	0a5b      	lsrs	r3, r3, #9
 80008b2:	e7b6      	b.n	8000822 <__aeabi_fadd+0xda>
 80008b4:	019f      	lsls	r7, r3, #6
 80008b6:	09bf      	lsrs	r7, r7, #6
 80008b8:	0038      	movs	r0, r7
 80008ba:	f002 fdab 	bl	8003414 <__clzsi2>
 80008be:	3805      	subs	r0, #5
 80008c0:	4087      	lsls	r7, r0
 80008c2:	4285      	cmp	r5, r0
 80008c4:	dc24      	bgt.n	8000910 <__aeabi_fadd+0x1c8>
 80008c6:	003b      	movs	r3, r7
 80008c8:	2120      	movs	r1, #32
 80008ca:	1b42      	subs	r2, r0, r5
 80008cc:	3201      	adds	r2, #1
 80008ce:	40d3      	lsrs	r3, r2
 80008d0:	1a8a      	subs	r2, r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	1e7a      	subs	r2, r7, #1
 80008d6:	4197      	sbcs	r7, r2
 80008d8:	2200      	movs	r2, #0
 80008da:	433b      	orrs	r3, r7
 80008dc:	0759      	lsls	r1, r3, #29
 80008de:	d193      	bne.n	8000808 <__aeabi_fadd+0xc0>
 80008e0:	e797      	b.n	8000812 <__aeabi_fadd+0xca>
 80008e2:	000c      	movs	r4, r1
 80008e4:	0033      	movs	r3, r6
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	e7db      	b.n	80008a2 <__aeabi_fadd+0x15a>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	d014      	beq.n	8000918 <__aeabi_fadd+0x1d0>
 80008ee:	1b42      	subs	r2, r0, r5
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d14b      	bne.n	800098c <__aeabi_fadd+0x244>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0d0      	beq.n	800089a <__aeabi_fadd+0x152>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1b8>
 80008fe:	e09e      	b.n	8000a3e <__aeabi_fadd+0x2f6>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d0ef      	beq.n	80008e4 <__aeabi_fadd+0x19c>
 8000904:	000a      	movs	r2, r1
 8000906:	2a1b      	cmp	r2, #27
 8000908:	dd5f      	ble.n	80009ca <__aeabi_fadd+0x282>
 800090a:	0002      	movs	r2, r0
 800090c:	1c73      	adds	r3, r6, #1
 800090e:	e77b      	b.n	8000808 <__aeabi_fadd+0xc0>
 8000910:	4b50      	ldr	r3, [pc, #320]	@ (8000a54 <__aeabi_fadd+0x30c>)
 8000912:	1a2a      	subs	r2, r5, r0
 8000914:	403b      	ands	r3, r7
 8000916:	e7e1      	b.n	80008dc <__aeabi_fadd+0x194>
 8000918:	21fe      	movs	r1, #254	@ 0xfe
 800091a:	1c6a      	adds	r2, r5, #1
 800091c:	4211      	tst	r1, r2
 800091e:	d13b      	bne.n	8000998 <__aeabi_fadd+0x250>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d15d      	bne.n	80009e0 <__aeabi_fadd+0x298>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d07f      	beq.n	8000a28 <__aeabi_fadd+0x2e0>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d17f      	bne.n	8000a2c <__aeabi_fadd+0x2e4>
 800092c:	2200      	movs	r2, #0
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	b2d0      	uxtb	r0, r2
 8000936:	e774      	b.n	8000822 <__aeabi_fadd+0xda>
 8000938:	28ff      	cmp	r0, #255	@ 0xff
 800093a:	d0d2      	beq.n	80008e2 <__aeabi_fadd+0x19a>
 800093c:	2480      	movs	r4, #128	@ 0x80
 800093e:	04e4      	lsls	r4, r4, #19
 8000940:	4323      	orrs	r3, r4
 8000942:	2401      	movs	r4, #1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dc07      	bgt.n	8000958 <__aeabi_fadd+0x210>
 8000948:	001c      	movs	r4, r3
 800094a:	2520      	movs	r5, #32
 800094c:	40d4      	lsrs	r4, r2
 800094e:	1aaa      	subs	r2, r5, r2
 8000950:	4093      	lsls	r3, r2
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	4193      	sbcs	r3, r2
 8000956:	431c      	orrs	r4, r3
 8000958:	1b33      	subs	r3, r6, r4
 800095a:	0005      	movs	r5, r0
 800095c:	000c      	movs	r4, r1
 800095e:	e74d      	b.n	80007fc <__aeabi_fadd+0xb4>
 8000960:	1b9f      	subs	r7, r3, r6
 8000962:	017a      	lsls	r2, r7, #5
 8000964:	d422      	bmi.n	80009ac <__aeabi_fadd+0x264>
 8000966:	2f00      	cmp	r7, #0
 8000968:	d1a6      	bne.n	80008b8 <__aeabi_fadd+0x170>
 800096a:	2400      	movs	r4, #0
 800096c:	2000      	movs	r0, #0
 800096e:	2300      	movs	r3, #0
 8000970:	e757      	b.n	8000822 <__aeabi_fadd+0xda>
 8000972:	199b      	adds	r3, r3, r6
 8000974:	2501      	movs	r5, #1
 8000976:	3201      	adds	r2, #1
 8000978:	0159      	lsls	r1, r3, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fadd+0x236>
 800097c:	e740      	b.n	8000800 <__aeabi_fadd+0xb8>
 800097e:	2101      	movs	r1, #1
 8000980:	4835      	ldr	r0, [pc, #212]	@ (8000a58 <__aeabi_fadd+0x310>)
 8000982:	4019      	ands	r1, r3
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	4003      	ands	r3, r0
 8000988:	430b      	orrs	r3, r1
 800098a:	e7a7      	b.n	80008dc <__aeabi_fadd+0x194>
 800098c:	28ff      	cmp	r0, #255	@ 0xff
 800098e:	d0a9      	beq.n	80008e4 <__aeabi_fadd+0x19c>
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	04c9      	lsls	r1, r1, #19
 8000994:	430b      	orrs	r3, r1
 8000996:	e7b6      	b.n	8000906 <__aeabi_fadd+0x1be>
 8000998:	2aff      	cmp	r2, #255	@ 0xff
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0x256>
 800099c:	e779      	b.n	8000892 <__aeabi_fadd+0x14a>
 800099e:	199b      	adds	r3, r3, r6
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	0759      	lsls	r1, r3, #29
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fadd+0x260>
 80009a6:	e72f      	b.n	8000808 <__aeabi_fadd+0xc0>
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	e7c1      	b.n	8000930 <__aeabi_fadd+0x1e8>
 80009ac:	000c      	movs	r4, r1
 80009ae:	1af7      	subs	r7, r6, r3
 80009b0:	e782      	b.n	80008b8 <__aeabi_fadd+0x170>
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12c      	bne.n	8000a10 <__aeabi_fadd+0x2c8>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d193      	bne.n	80008e2 <__aeabi_fadd+0x19a>
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	2400      	movs	r4, #0
 80009be:	20ff      	movs	r0, #255	@ 0xff
 80009c0:	03db      	lsls	r3, r3, #15
 80009c2:	e72e      	b.n	8000822 <__aeabi_fadd+0xda>
 80009c4:	2501      	movs	r5, #1
 80009c6:	1b9b      	subs	r3, r3, r6
 80009c8:	e718      	b.n	80007fc <__aeabi_fadd+0xb4>
 80009ca:	0019      	movs	r1, r3
 80009cc:	2520      	movs	r5, #32
 80009ce:	40d1      	lsrs	r1, r2
 80009d0:	1aaa      	subs	r2, r5, r2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	4193      	sbcs	r3, r2
 80009d8:	430b      	orrs	r3, r1
 80009da:	0005      	movs	r5, r0
 80009dc:	199b      	adds	r3, r3, r6
 80009de:	e753      	b.n	8000888 <__aeabi_fadd+0x140>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fadd+0x29e>
 80009e4:	e77e      	b.n	80008e4 <__aeabi_fadd+0x19c>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fadd+0x2a4>
 80009ea:	e77c      	b.n	80008e6 <__aeabi_fadd+0x19e>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	03d2      	lsls	r2, r2, #15
 80009f0:	4591      	cmp	r9, r2
 80009f2:	d302      	bcc.n	80009fa <__aeabi_fadd+0x2b2>
 80009f4:	4594      	cmp	ip, r2
 80009f6:	d200      	bcs.n	80009fa <__aeabi_fadd+0x2b2>
 80009f8:	0033      	movs	r3, r6
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e753      	b.n	80008a6 <__aeabi_fadd+0x15e>
 80009fe:	000c      	movs	r4, r1
 8000a00:	1af3      	subs	r3, r6, r3
 8000a02:	3501      	adds	r5, #1
 8000a04:	e6fa      	b.n	80007fc <__aeabi_fadd+0xb4>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d0af      	beq.n	800096a <__aeabi_fadd+0x222>
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	0033      	movs	r3, r6
 8000a0e:	e78d      	b.n	800092c <__aeabi_fadd+0x1e4>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x2ce>
 8000a14:	e767      	b.n	80008e6 <__aeabi_fadd+0x19e>
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	03d2      	lsls	r2, r2, #15
 8000a1a:	4591      	cmp	r9, r2
 8000a1c:	d3ed      	bcc.n	80009fa <__aeabi_fadd+0x2b2>
 8000a1e:	4594      	cmp	ip, r2
 8000a20:	d2eb      	bcs.n	80009fa <__aeabi_fadd+0x2b2>
 8000a22:	000c      	movs	r4, r1
 8000a24:	0033      	movs	r3, r6
 8000a26:	e7e8      	b.n	80009fa <__aeabi_fadd+0x2b2>
 8000a28:	0033      	movs	r3, r6
 8000a2a:	e77f      	b.n	800092c <__aeabi_fadd+0x1e4>
 8000a2c:	199b      	adds	r3, r3, r6
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d5b9      	bpl.n	80009a8 <__aeabi_fadd+0x260>
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <__aeabi_fadd+0x30c>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	e778      	b.n	8000930 <__aeabi_fadd+0x1e8>
 8000a3e:	199b      	adds	r3, r3, r6
 8000a40:	3201      	adds	r2, #1
 8000a42:	3501      	adds	r5, #1
 8000a44:	0159      	lsls	r1, r3, #5
 8000a46:	d49a      	bmi.n	800097e <__aeabi_fadd+0x236>
 8000a48:	e6da      	b.n	8000800 <__aeabi_fadd+0xb8>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d08d      	beq.n	800096a <__aeabi_fadd+0x222>
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e76e      	b.n	8000930 <__aeabi_fadd+0x1e8>
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	fbffffff 	.word	0xfbffffff
 8000a58:	7dffffff 	.word	0x7dffffff

08000a5c <__aeabi_fdiv>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	464f      	mov	r7, r9
 8000a60:	4646      	mov	r6, r8
 8000a62:	46d6      	mov	lr, sl
 8000a64:	0244      	lsls	r4, r0, #9
 8000a66:	b5c0      	push	{r6, r7, lr}
 8000a68:	0047      	lsls	r7, r0, #1
 8000a6a:	1c0e      	adds	r6, r1, #0
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	0e3f      	lsrs	r7, r7, #24
 8000a70:	0fc5      	lsrs	r5, r0, #31
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d03c      	beq.n	8000af0 <__aeabi_fdiv+0x94>
 8000a76:	2fff      	cmp	r7, #255	@ 0xff
 8000a78:	d042      	beq.n	8000b00 <__aeabi_fdiv+0xa4>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	4699      	mov	r9, r3
 8000a80:	469a      	mov	sl, r3
 8000a82:	00e4      	lsls	r4, r4, #3
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	4314      	orrs	r4, r2
 8000a88:	3f7f      	subs	r7, #127	@ 0x7f
 8000a8a:	0273      	lsls	r3, r6, #9
 8000a8c:	0a5b      	lsrs	r3, r3, #9
 8000a8e:	4698      	mov	r8, r3
 8000a90:	0073      	lsls	r3, r6, #1
 8000a92:	0e1b      	lsrs	r3, r3, #24
 8000a94:	0ff6      	lsrs	r6, r6, #31
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01b      	beq.n	8000ad2 <__aeabi_fdiv+0x76>
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d013      	beq.n	8000ac6 <__aeabi_fdiv+0x6a>
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	04c9      	lsls	r1, r1, #19
 8000aa6:	4311      	orrs	r1, r2
 8000aa8:	4688      	mov	r8, r1
 8000aaa:	2000      	movs	r0, #0
 8000aac:	3b7f      	subs	r3, #127	@ 0x7f
 8000aae:	0029      	movs	r1, r5
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	464b      	mov	r3, r9
 8000ab4:	4071      	eors	r1, r6
 8000ab6:	b2c9      	uxtb	r1, r1
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d900      	bls.n	8000abe <__aeabi_fdiv+0x62>
 8000abc:	e0b5      	b.n	8000c2a <__aeabi_fdiv+0x1ce>
 8000abe:	4a74      	ldr	r2, [pc, #464]	@ (8000c90 <__aeabi_fdiv+0x234>)
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	58d3      	ldr	r3, [r2, r3]
 8000ac4:	469f      	mov	pc, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d13f      	bne.n	8000b4c <__aeabi_fdiv+0xf0>
 8000acc:	3fff      	subs	r7, #255	@ 0xff
 8000ace:	3302      	adds	r3, #2
 8000ad0:	e003      	b.n	8000ada <__aeabi_fdiv+0x7e>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d12d      	bne.n	8000b34 <__aeabi_fdiv+0xd8>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	0029      	movs	r1, r5
 8000adc:	464a      	mov	r2, r9
 8000ade:	4071      	eors	r1, r6
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	2a0e      	cmp	r2, #14
 8000ae6:	d838      	bhi.n	8000b5a <__aeabi_fdiv+0xfe>
 8000ae8:	486a      	ldr	r0, [pc, #424]	@ (8000c94 <__aeabi_fdiv+0x238>)
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	5882      	ldr	r2, [r0, r2]
 8000aee:	4697      	mov	pc, r2
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d113      	bne.n	8000b1c <__aeabi_fdiv+0xc0>
 8000af4:	2304      	movs	r3, #4
 8000af6:	4699      	mov	r9, r3
 8000af8:	3b03      	subs	r3, #3
 8000afa:	2700      	movs	r7, #0
 8000afc:	469a      	mov	sl, r3
 8000afe:	e7c4      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d105      	bne.n	8000b10 <__aeabi_fdiv+0xb4>
 8000b04:	2308      	movs	r3, #8
 8000b06:	4699      	mov	r9, r3
 8000b08:	3b06      	subs	r3, #6
 8000b0a:	27ff      	movs	r7, #255	@ 0xff
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	e7bc      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	27ff      	movs	r7, #255	@ 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e7b6      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f002 fc79 	bl	8003414 <__clzsi2>
 8000b22:	2776      	movs	r7, #118	@ 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409c      	lsls	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a3f      	subs	r7, r7, r0
 8000b32:	e7aa      	b.n	8000a8a <__aeabi_fdiv+0x2e>
 8000b34:	4640      	mov	r0, r8
 8000b36:	f002 fc6d 	bl	8003414 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	2376      	movs	r3, #118	@ 0x76
 8000b42:	425b      	negs	r3, r3
 8000b44:	1a1b      	subs	r3, r3, r0
 8000b46:	4690      	mov	r8, r2
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7b0      	b.n	8000aae <__aeabi_fdiv+0x52>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	464a      	mov	r2, r9
 8000b50:	431a      	orrs	r2, r3
 8000b52:	4691      	mov	r9, r2
 8000b54:	2003      	movs	r0, #3
 8000b56:	33fc      	adds	r3, #252	@ 0xfc
 8000b58:	e7a9      	b.n	8000aae <__aeabi_fdiv+0x52>
 8000b5a:	000d      	movs	r5, r1
 8000b5c:	20ff      	movs	r0, #255	@ 0xff
 8000b5e:	2200      	movs	r2, #0
 8000b60:	05c0      	lsls	r0, r0, #23
 8000b62:	07ed      	lsls	r5, r5, #31
 8000b64:	4310      	orrs	r0, r2
 8000b66:	4328      	orrs	r0, r5
 8000b68:	bce0      	pop	{r5, r6, r7}
 8000b6a:	46ba      	mov	sl, r7
 8000b6c:	46b1      	mov	r9, r6
 8000b6e:	46a8      	mov	r8, r5
 8000b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b72:	000d      	movs	r5, r1
 8000b74:	2000      	movs	r0, #0
 8000b76:	2200      	movs	r2, #0
 8000b78:	e7f2      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d0ed      	beq.n	8000b5c <__aeabi_fdiv+0x100>
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d033      	beq.n	8000bec <__aeabi_fdiv+0x190>
 8000b84:	46a0      	mov	r8, r4
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d105      	bne.n	8000b96 <__aeabi_fdiv+0x13a>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e7e7      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000b90:	0035      	movs	r5, r6
 8000b92:	2803      	cmp	r0, #3
 8000b94:	d07a      	beq.n	8000c8c <__aeabi_fdiv+0x230>
 8000b96:	003b      	movs	r3, r7
 8000b98:	337f      	adds	r3, #127	@ 0x7f
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dd2d      	ble.n	8000bfa <__aeabi_fdiv+0x19e>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	0752      	lsls	r2, r2, #29
 8000ba2:	d007      	beq.n	8000bb4 <__aeabi_fdiv+0x158>
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	4641      	mov	r1, r8
 8000ba8:	400a      	ands	r2, r1
 8000baa:	2a04      	cmp	r2, #4
 8000bac:	d002      	beq.n	8000bb4 <__aeabi_fdiv+0x158>
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	44e0      	add	r8, ip
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	d505      	bpl.n	8000bc6 <__aeabi_fdiv+0x16a>
 8000bba:	4642      	mov	r2, r8
 8000bbc:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <__aeabi_fdiv+0x23c>)
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	4690      	mov	r8, r2
 8000bc4:	3380      	adds	r3, #128	@ 0x80
 8000bc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bc8:	dcc8      	bgt.n	8000b5c <__aeabi_fdiv+0x100>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	0192      	lsls	r2, r2, #6
 8000bce:	0a52      	lsrs	r2, r2, #9
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	e7c5      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	03d2      	lsls	r2, r2, #15
 8000bdc:	e7c0      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	03d2      	lsls	r2, r2, #15
 8000be2:	4214      	tst	r4, r2
 8000be4:	d002      	beq.n	8000bec <__aeabi_fdiv+0x190>
 8000be6:	4643      	mov	r3, r8
 8000be8:	4213      	tst	r3, r2
 8000bea:	d049      	beq.n	8000c80 <__aeabi_fdiv+0x224>
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	03d2      	lsls	r2, r2, #15
 8000bf0:	4322      	orrs	r2, r4
 8000bf2:	0252      	lsls	r2, r2, #9
 8000bf4:	20ff      	movs	r0, #255	@ 0xff
 8000bf6:	0a52      	lsrs	r2, r2, #9
 8000bf8:	e7b2      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b1b      	cmp	r3, #27
 8000c00:	dcc3      	bgt.n	8000b8a <__aeabi_fdiv+0x12e>
 8000c02:	4642      	mov	r2, r8
 8000c04:	40da      	lsrs	r2, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	379e      	adds	r7, #158	@ 0x9e
 8000c0a:	40bb      	lsls	r3, r7
 8000c0c:	1e59      	subs	r1, r3, #1
 8000c0e:	418b      	sbcs	r3, r1
 8000c10:	431a      	orrs	r2, r3
 8000c12:	0753      	lsls	r3, r2, #29
 8000c14:	d004      	beq.n	8000c20 <__aeabi_fdiv+0x1c4>
 8000c16:	230f      	movs	r3, #15
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fdiv+0x1c4>
 8000c1e:	3204      	adds	r2, #4
 8000c20:	0153      	lsls	r3, r2, #5
 8000c22:	d529      	bpl.n	8000c78 <__aeabi_fdiv+0x21c>
 8000c24:	2001      	movs	r0, #1
 8000c26:	2200      	movs	r2, #0
 8000c28:	e79a      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	0163      	lsls	r3, r4, #5
 8000c2e:	0155      	lsls	r5, r2, #5
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d215      	bcs.n	8000c60 <__aeabi_fdiv+0x204>
 8000c34:	201b      	movs	r0, #27
 8000c36:	2200      	movs	r2, #0
 8000c38:	3f01      	subs	r7, #1
 8000c3a:	2601      	movs	r6, #1
 8000c3c:	001c      	movs	r4, r3
 8000c3e:	0052      	lsls	r2, r2, #1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	db01      	blt.n	8000c4a <__aeabi_fdiv+0x1ee>
 8000c46:	429d      	cmp	r5, r3
 8000c48:	d801      	bhi.n	8000c4e <__aeabi_fdiv+0x1f2>
 8000c4a:	1b5b      	subs	r3, r3, r5
 8000c4c:	4332      	orrs	r2, r6
 8000c4e:	3801      	subs	r0, #1
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d1f3      	bne.n	8000c3c <__aeabi_fdiv+0x1e0>
 8000c54:	1e58      	subs	r0, r3, #1
 8000c56:	4183      	sbcs	r3, r0
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	000d      	movs	r5, r1
 8000c5e:	e79a      	b.n	8000b96 <__aeabi_fdiv+0x13a>
 8000c60:	201a      	movs	r0, #26
 8000c62:	2201      	movs	r2, #1
 8000c64:	1b5b      	subs	r3, r3, r5
 8000c66:	e7e8      	b.n	8000c3a <__aeabi_fdiv+0x1de>
 8000c68:	3b02      	subs	r3, #2
 8000c6a:	425a      	negs	r2, r3
 8000c6c:	4153      	adcs	r3, r2
 8000c6e:	425b      	negs	r3, r3
 8000c70:	0035      	movs	r5, r6
 8000c72:	2200      	movs	r2, #0
 8000c74:	b2d8      	uxtb	r0, r3
 8000c76:	e773      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c78:	0192      	lsls	r2, r2, #6
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	0a52      	lsrs	r2, r2, #9
 8000c7e:	e76f      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c80:	431a      	orrs	r2, r3
 8000c82:	0252      	lsls	r2, r2, #9
 8000c84:	0035      	movs	r5, r6
 8000c86:	20ff      	movs	r0, #255	@ 0xff
 8000c88:	0a52      	lsrs	r2, r2, #9
 8000c8a:	e769      	b.n	8000b60 <__aeabi_fdiv+0x104>
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	e7ad      	b.n	8000bec <__aeabi_fdiv+0x190>
 8000c90:	08019f2c 	.word	0x08019f2c
 8000c94:	08019f6c 	.word	0x08019f6c
 8000c98:	f7ffffff 	.word	0xf7ffffff

08000c9c <__eqsf2>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	0042      	lsls	r2, r0, #1
 8000ca0:	024e      	lsls	r6, r1, #9
 8000ca2:	004c      	lsls	r4, r1, #1
 8000ca4:	0245      	lsls	r5, r0, #9
 8000ca6:	0a6d      	lsrs	r5, r5, #9
 8000ca8:	0e12      	lsrs	r2, r2, #24
 8000caa:	0fc3      	lsrs	r3, r0, #31
 8000cac:	0a76      	lsrs	r6, r6, #9
 8000cae:	0e24      	lsrs	r4, r4, #24
 8000cb0:	0fc9      	lsrs	r1, r1, #31
 8000cb2:	2aff      	cmp	r2, #255	@ 0xff
 8000cb4:	d010      	beq.n	8000cd8 <__eqsf2+0x3c>
 8000cb6:	2cff      	cmp	r4, #255	@ 0xff
 8000cb8:	d00c      	beq.n	8000cd4 <__eqsf2+0x38>
 8000cba:	2001      	movs	r0, #1
 8000cbc:	42a2      	cmp	r2, r4
 8000cbe:	d10a      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cc0:	42b5      	cmp	r5, r6
 8000cc2:	d108      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d00f      	beq.n	8000ce8 <__eqsf2+0x4c>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d104      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000ccc:	0028      	movs	r0, r5
 8000cce:	1e43      	subs	r3, r0, #1
 8000cd0:	4198      	sbcs	r0, r3
 8000cd2:	e000      	b.n	8000cd6 <__eqsf2+0x3a>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	2001      	movs	r0, #1
 8000cda:	2cff      	cmp	r4, #255	@ 0xff
 8000cdc:	d1fb      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000cde:	4335      	orrs	r5, r6
 8000ce0:	d1f9      	bne.n	8000cd6 <__eqsf2+0x3a>
 8000ce2:	404b      	eors	r3, r1
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	e7f6      	b.n	8000cd6 <__eqsf2+0x3a>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7f4      	b.n	8000cd6 <__eqsf2+0x3a>

08000cec <__gesf2>:
 8000cec:	b530      	push	{r4, r5, lr}
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0244      	lsls	r4, r0, #9
 8000cf2:	024d      	lsls	r5, r1, #9
 8000cf4:	0fc3      	lsrs	r3, r0, #31
 8000cf6:	0048      	lsls	r0, r1, #1
 8000cf8:	0a64      	lsrs	r4, r4, #9
 8000cfa:	0e12      	lsrs	r2, r2, #24
 8000cfc:	0a6d      	lsrs	r5, r5, #9
 8000cfe:	0e00      	lsrs	r0, r0, #24
 8000d00:	0fc9      	lsrs	r1, r1, #31
 8000d02:	2aff      	cmp	r2, #255	@ 0xff
 8000d04:	d019      	beq.n	8000d3a <__gesf2+0x4e>
 8000d06:	28ff      	cmp	r0, #255	@ 0xff
 8000d08:	d00b      	beq.n	8000d22 <__gesf2+0x36>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d11e      	bne.n	8000d4c <__gesf2+0x60>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	d10b      	bne.n	8000d2a <__gesf2+0x3e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d027      	beq.n	8000d66 <__gesf2+0x7a>
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d134      	bne.n	8000d84 <__gesf2+0x98>
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	d02f      	beq.n	8000d7e <__gesf2+0x92>
 8000d1e:	0008      	movs	r0, r1
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d128      	bne.n	8000d78 <__gesf2+0x8c>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d101      	bne.n	8000d2e <__gesf2+0x42>
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d0f5      	beq.n	8000d1a <__gesf2+0x2e>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d107      	bne.n	8000d42 <__gesf2+0x56>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d023      	beq.n	8000d7e <__gesf2+0x92>
 8000d36:	0018      	movs	r0, r3
 8000d38:	e7f2      	b.n	8000d20 <__gesf2+0x34>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d11c      	bne.n	8000d78 <__gesf2+0x8c>
 8000d3e:	28ff      	cmp	r0, #255	@ 0xff
 8000d40:	d014      	beq.n	8000d6c <__gesf2+0x80>
 8000d42:	1e58      	subs	r0, r3, #1
 8000d44:	2302      	movs	r3, #2
 8000d46:	4018      	ands	r0, r3
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7e9      	b.n	8000d20 <__gesf2+0x34>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d0f8      	beq.n	8000d42 <__gesf2+0x56>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d1f6      	bne.n	8000d42 <__gesf2+0x56>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	dcf4      	bgt.n	8000d42 <__gesf2+0x56>
 8000d58:	dbeb      	blt.n	8000d32 <__gesf2+0x46>
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	d8f1      	bhi.n	8000d42 <__gesf2+0x56>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	42ac      	cmp	r4, r5
 8000d62:	d2dd      	bcs.n	8000d20 <__gesf2+0x34>
 8000d64:	e7e5      	b.n	8000d32 <__gesf2+0x46>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d0da      	beq.n	8000d20 <__gesf2+0x34>
 8000d6a:	e7ea      	b.n	8000d42 <__gesf2+0x56>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d103      	bne.n	8000d78 <__gesf2+0x8c>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d1e6      	bne.n	8000d42 <__gesf2+0x56>
 8000d74:	2000      	movs	r0, #0
 8000d76:	e7d3      	b.n	8000d20 <__gesf2+0x34>
 8000d78:	2002      	movs	r0, #2
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	e7d0      	b.n	8000d20 <__gesf2+0x34>
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4240      	negs	r0, r0
 8000d82:	e7cd      	b.n	8000d20 <__gesf2+0x34>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d0e8      	beq.n	8000d5a <__gesf2+0x6e>
 8000d88:	e7db      	b.n	8000d42 <__gesf2+0x56>
 8000d8a:	46c0      	nop			@ (mov r8, r8)

08000d8c <__lesf2>:
 8000d8c:	b530      	push	{r4, r5, lr}
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0244      	lsls	r4, r0, #9
 8000d92:	024d      	lsls	r5, r1, #9
 8000d94:	0fc3      	lsrs	r3, r0, #31
 8000d96:	0048      	lsls	r0, r1, #1
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0e12      	lsrs	r2, r2, #24
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	0e00      	lsrs	r0, r0, #24
 8000da0:	0fc9      	lsrs	r1, r1, #31
 8000da2:	2aff      	cmp	r2, #255	@ 0xff
 8000da4:	d01a      	beq.n	8000ddc <__lesf2+0x50>
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d00e      	beq.n	8000dc8 <__lesf2+0x3c>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d11e      	bne.n	8000dec <__lesf2+0x60>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d10e      	bne.n	8000dd0 <__lesf2+0x44>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d02a      	beq.n	8000e0c <__lesf2+0x80>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d00c      	beq.n	8000dd4 <__lesf2+0x48>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d01d      	beq.n	8000dfa <__lesf2+0x6e>
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	4018      	ands	r0, r3
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	e010      	b.n	8000dea <__lesf2+0x5e>
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d10d      	bne.n	8000de8 <__lesf2+0x5c>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d120      	bne.n	8000e12 <__lesf2+0x86>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d11e      	bne.n	8000e12 <__lesf2+0x86>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d023      	beq.n	8000e20 <__lesf2+0x94>
 8000dd8:	0008      	movs	r0, r1
 8000dda:	e006      	b.n	8000dea <__lesf2+0x5e>
 8000ddc:	2c00      	cmp	r4, #0
 8000dde:	d103      	bne.n	8000de8 <__lesf2+0x5c>
 8000de0:	28ff      	cmp	r0, #255	@ 0xff
 8000de2:	d1ec      	bne.n	8000dbe <__lesf2+0x32>
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	d017      	beq.n	8000e18 <__lesf2+0x8c>
 8000de8:	2002      	movs	r0, #2
 8000dea:	bd30      	pop	{r4, r5, pc}
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d0e6      	beq.n	8000dbe <__lesf2+0x32>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d1e4      	bne.n	8000dbe <__lesf2+0x32>
 8000df4:	4282      	cmp	r2, r0
 8000df6:	dce2      	bgt.n	8000dbe <__lesf2+0x32>
 8000df8:	db04      	blt.n	8000e04 <__lesf2+0x78>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d8df      	bhi.n	8000dbe <__lesf2+0x32>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	42ac      	cmp	r4, r5
 8000e02:	d2f2      	bcs.n	8000dea <__lesf2+0x5e>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00b      	beq.n	8000e20 <__lesf2+0x94>
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e7ee      	b.n	8000dea <__lesf2+0x5e>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d0ec      	beq.n	8000dea <__lesf2+0x5e>
 8000e10:	e7d5      	b.n	8000dbe <__lesf2+0x32>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d1d3      	bne.n	8000dbe <__lesf2+0x32>
 8000e16:	e7f5      	b.n	8000e04 <__lesf2+0x78>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d0e5      	beq.n	8000dea <__lesf2+0x5e>
 8000e1e:	e7ce      	b.n	8000dbe <__lesf2+0x32>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4240      	negs	r0, r0
 8000e24:	e7e1      	b.n	8000dea <__lesf2+0x5e>
 8000e26:	46c0      	nop			@ (mov r8, r8)

08000e28 <__aeabi_fmul>:
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	464f      	mov	r7, r9
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	0243      	lsls	r3, r0, #9
 8000e32:	0a5b      	lsrs	r3, r3, #9
 8000e34:	0045      	lsls	r5, r0, #1
 8000e36:	b5c0      	push	{r6, r7, lr}
 8000e38:	4699      	mov	r9, r3
 8000e3a:	1c0f      	adds	r7, r1, #0
 8000e3c:	0e2d      	lsrs	r5, r5, #24
 8000e3e:	0fc6      	lsrs	r6, r0, #31
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fmul+0x1e>
 8000e44:	e088      	b.n	8000f58 <__aeabi_fmul+0x130>
 8000e46:	2dff      	cmp	r5, #255	@ 0xff
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fmul+0x24>
 8000e4a:	e08d      	b.n	8000f68 <__aeabi_fmul+0x140>
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	04d2      	lsls	r2, r2, #19
 8000e52:	431a      	orrs	r2, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	4691      	mov	r9, r2
 8000e58:	4698      	mov	r8, r3
 8000e5a:	469a      	mov	sl, r3
 8000e5c:	3d7f      	subs	r5, #127	@ 0x7f
 8000e5e:	027c      	lsls	r4, r7, #9
 8000e60:	007b      	lsls	r3, r7, #1
 8000e62:	0a64      	lsrs	r4, r4, #9
 8000e64:	0e1b      	lsrs	r3, r3, #24
 8000e66:	0fff      	lsrs	r7, r7, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d068      	beq.n	8000f3e <__aeabi_fmul+0x116>
 8000e6c:	2bff      	cmp	r3, #255	@ 0xff
 8000e6e:	d021      	beq.n	8000eb4 <__aeabi_fmul+0x8c>
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	00e4      	lsls	r4, r4, #3
 8000e74:	04d2      	lsls	r2, r2, #19
 8000e76:	4314      	orrs	r4, r2
 8000e78:	4642      	mov	r2, r8
 8000e7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000e7c:	195b      	adds	r3, r3, r5
 8000e7e:	2100      	movs	r1, #0
 8000e80:	1c5d      	adds	r5, r3, #1
 8000e82:	2a0a      	cmp	r2, #10
 8000e84:	dc2e      	bgt.n	8000ee4 <__aeabi_fmul+0xbc>
 8000e86:	407e      	eors	r6, r7
 8000e88:	4642      	mov	r2, r8
 8000e8a:	2a02      	cmp	r2, #2
 8000e8c:	dc23      	bgt.n	8000ed6 <__aeabi_fmul+0xae>
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	2a01      	cmp	r2, #1
 8000e92:	d900      	bls.n	8000e96 <__aeabi_fmul+0x6e>
 8000e94:	e0bd      	b.n	8001012 <__aeabi_fmul+0x1ea>
 8000e96:	2902      	cmp	r1, #2
 8000e98:	d06e      	beq.n	8000f78 <__aeabi_fmul+0x150>
 8000e9a:	2901      	cmp	r1, #1
 8000e9c:	d12c      	bne.n	8000ef8 <__aeabi_fmul+0xd0>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	05c0      	lsls	r0, r0, #23
 8000ea4:	07f6      	lsls	r6, r6, #31
 8000ea6:	4310      	orrs	r0, r2
 8000ea8:	4330      	orrs	r0, r6
 8000eaa:	bce0      	pop	{r5, r6, r7}
 8000eac:	46ba      	mov	sl, r7
 8000eae:	46b1      	mov	r9, r6
 8000eb0:	46a8      	mov	r8, r5
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	002b      	movs	r3, r5
 8000eb6:	33ff      	adds	r3, #255	@ 0xff
 8000eb8:	2c00      	cmp	r4, #0
 8000eba:	d065      	beq.n	8000f88 <__aeabi_fmul+0x160>
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	4311      	orrs	r1, r2
 8000ec2:	0032      	movs	r2, r6
 8000ec4:	3501      	adds	r5, #1
 8000ec6:	4688      	mov	r8, r1
 8000ec8:	407a      	eors	r2, r7
 8000eca:	35ff      	adds	r5, #255	@ 0xff
 8000ecc:	290a      	cmp	r1, #10
 8000ece:	dd00      	ble.n	8000ed2 <__aeabi_fmul+0xaa>
 8000ed0:	e0d8      	b.n	8001084 <__aeabi_fmul+0x25c>
 8000ed2:	0016      	movs	r6, r2
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4082      	lsls	r2, r0
 8000edc:	20a6      	movs	r0, #166	@ 0xa6
 8000ede:	00c0      	lsls	r0, r0, #3
 8000ee0:	4202      	tst	r2, r0
 8000ee2:	d020      	beq.n	8000f26 <__aeabi_fmul+0xfe>
 8000ee4:	4653      	mov	r3, sl
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d046      	beq.n	8000f78 <__aeabi_fmul+0x150>
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fmul+0xc8>
 8000eee:	e0bb      	b.n	8001068 <__aeabi_fmul+0x240>
 8000ef0:	4651      	mov	r1, sl
 8000ef2:	464c      	mov	r4, r9
 8000ef4:	2901      	cmp	r1, #1
 8000ef6:	d0d2      	beq.n	8000e9e <__aeabi_fmul+0x76>
 8000ef8:	002b      	movs	r3, r5
 8000efa:	337f      	adds	r3, #127	@ 0x7f
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd70      	ble.n	8000fe2 <__aeabi_fmul+0x1ba>
 8000f00:	0762      	lsls	r2, r4, #29
 8000f02:	d004      	beq.n	8000f0e <__aeabi_fmul+0xe6>
 8000f04:	220f      	movs	r2, #15
 8000f06:	4022      	ands	r2, r4
 8000f08:	2a04      	cmp	r2, #4
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fmul+0xe6>
 8000f0c:	3404      	adds	r4, #4
 8000f0e:	0122      	lsls	r2, r4, #4
 8000f10:	d503      	bpl.n	8000f1a <__aeabi_fmul+0xf2>
 8000f12:	4b63      	ldr	r3, [pc, #396]	@ (80010a0 <__aeabi_fmul+0x278>)
 8000f14:	401c      	ands	r4, r3
 8000f16:	002b      	movs	r3, r5
 8000f18:	3380      	adds	r3, #128	@ 0x80
 8000f1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f1c:	dc2c      	bgt.n	8000f78 <__aeabi_fmul+0x150>
 8000f1e:	01a2      	lsls	r2, r4, #6
 8000f20:	0a52      	lsrs	r2, r2, #9
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	e7bd      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f26:	2090      	movs	r0, #144	@ 0x90
 8000f28:	0080      	lsls	r0, r0, #2
 8000f2a:	4202      	tst	r2, r0
 8000f2c:	d127      	bne.n	8000f7e <__aeabi_fmul+0x156>
 8000f2e:	38b9      	subs	r0, #185	@ 0xb9
 8000f30:	38ff      	subs	r0, #255	@ 0xff
 8000f32:	4210      	tst	r0, r2
 8000f34:	d06d      	beq.n	8001012 <__aeabi_fmul+0x1ea>
 8000f36:	003e      	movs	r6, r7
 8000f38:	46a1      	mov	r9, r4
 8000f3a:	468a      	mov	sl, r1
 8000f3c:	e7d2      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f3e:	2c00      	cmp	r4, #0
 8000f40:	d141      	bne.n	8000fc6 <__aeabi_fmul+0x19e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	4642      	mov	r2, r8
 8000f46:	431a      	orrs	r2, r3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	002b      	movs	r3, r5
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	2101      	movs	r1, #1
 8000f50:	1c5d      	adds	r5, r3, #1
 8000f52:	2a0a      	cmp	r2, #10
 8000f54:	dd97      	ble.n	8000e86 <__aeabi_fmul+0x5e>
 8000f56:	e7c5      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d126      	bne.n	8000faa <__aeabi_fmul+0x182>
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	4698      	mov	r8, r3
 8000f60:	3b03      	subs	r3, #3
 8000f62:	2500      	movs	r5, #0
 8000f64:	469a      	mov	sl, r3
 8000f66:	e77a      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d118      	bne.n	8000f9e <__aeabi_fmul+0x176>
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	4698      	mov	r8, r3
 8000f70:	3b06      	subs	r3, #6
 8000f72:	25ff      	movs	r5, #255	@ 0xff
 8000f74:	469a      	mov	sl, r3
 8000f76:	e772      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000f78:	20ff      	movs	r0, #255	@ 0xff
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	e791      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	2600      	movs	r6, #0
 8000f82:	20ff      	movs	r0, #255	@ 0xff
 8000f84:	03d2      	lsls	r2, r2, #15
 8000f86:	e78c      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8000f88:	4641      	mov	r1, r8
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	4688      	mov	r8, r1
 8000f92:	35ff      	adds	r5, #255	@ 0xff
 8000f94:	290a      	cmp	r1, #10
 8000f96:	dca5      	bgt.n	8000ee4 <__aeabi_fmul+0xbc>
 8000f98:	2102      	movs	r1, #2
 8000f9a:	407e      	eors	r6, r7
 8000f9c:	e774      	b.n	8000e88 <__aeabi_fmul+0x60>
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	3b09      	subs	r3, #9
 8000fa4:	25ff      	movs	r5, #255	@ 0xff
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	e759      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fa32 	bl	8003414 <__clzsi2>
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	1f43      	subs	r3, r0, #5
 8000fb4:	2576      	movs	r5, #118	@ 0x76
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	426d      	negs	r5, r5
 8000fbc:	4691      	mov	r9, r2
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	1a2d      	subs	r5, r5, r0
 8000fc4:	e74b      	b.n	8000e5e <__aeabi_fmul+0x36>
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f002 fa24 	bl	8003414 <__clzsi2>
 8000fcc:	4642      	mov	r2, r8
 8000fce:	1f43      	subs	r3, r0, #5
 8000fd0:	409c      	lsls	r4, r3
 8000fd2:	1a2b      	subs	r3, r5, r0
 8000fd4:	3b76      	subs	r3, #118	@ 0x76
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	1c5d      	adds	r5, r3, #1
 8000fda:	2a0a      	cmp	r2, #10
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_fmul+0x1b8>
 8000fde:	e752      	b.n	8000e86 <__aeabi_fmul+0x5e>
 8000fe0:	e780      	b.n	8000ee4 <__aeabi_fmul+0xbc>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b1b      	cmp	r3, #27
 8000fe8:	dd00      	ble.n	8000fec <__aeabi_fmul+0x1c4>
 8000fea:	e758      	b.n	8000e9e <__aeabi_fmul+0x76>
 8000fec:	359e      	adds	r5, #158	@ 0x9e
 8000fee:	0022      	movs	r2, r4
 8000ff0:	40ac      	lsls	r4, r5
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	1e63      	subs	r3, r4, #1
 8000ff6:	419c      	sbcs	r4, r3
 8000ff8:	4322      	orrs	r2, r4
 8000ffa:	0753      	lsls	r3, r2, #29
 8000ffc:	d004      	beq.n	8001008 <__aeabi_fmul+0x1e0>
 8000ffe:	230f      	movs	r3, #15
 8001000:	4013      	ands	r3, r2
 8001002:	2b04      	cmp	r3, #4
 8001004:	d000      	beq.n	8001008 <__aeabi_fmul+0x1e0>
 8001006:	3204      	adds	r2, #4
 8001008:	0153      	lsls	r3, r2, #5
 800100a:	d537      	bpl.n	800107c <__aeabi_fmul+0x254>
 800100c:	2001      	movs	r0, #1
 800100e:	2200      	movs	r2, #0
 8001010:	e747      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001012:	0c21      	lsrs	r1, r4, #16
 8001014:	464a      	mov	r2, r9
 8001016:	0424      	lsls	r4, r4, #16
 8001018:	0c24      	lsrs	r4, r4, #16
 800101a:	0027      	movs	r7, r4
 800101c:	0c10      	lsrs	r0, r2, #16
 800101e:	0412      	lsls	r2, r2, #16
 8001020:	0c12      	lsrs	r2, r2, #16
 8001022:	4344      	muls	r4, r0
 8001024:	4357      	muls	r7, r2
 8001026:	4348      	muls	r0, r1
 8001028:	4351      	muls	r1, r2
 800102a:	0c3a      	lsrs	r2, r7, #16
 800102c:	1909      	adds	r1, r1, r4
 800102e:	1852      	adds	r2, r2, r1
 8001030:	4294      	cmp	r4, r2
 8001032:	d903      	bls.n	800103c <__aeabi_fmul+0x214>
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	0249      	lsls	r1, r1, #9
 8001038:	468c      	mov	ip, r1
 800103a:	4460      	add	r0, ip
 800103c:	043f      	lsls	r7, r7, #16
 800103e:	0411      	lsls	r1, r2, #16
 8001040:	0c3f      	lsrs	r7, r7, #16
 8001042:	19c9      	adds	r1, r1, r7
 8001044:	018c      	lsls	r4, r1, #6
 8001046:	1e67      	subs	r7, r4, #1
 8001048:	41bc      	sbcs	r4, r7
 800104a:	0c12      	lsrs	r2, r2, #16
 800104c:	0e89      	lsrs	r1, r1, #26
 800104e:	1812      	adds	r2, r2, r0
 8001050:	430c      	orrs	r4, r1
 8001052:	0192      	lsls	r2, r2, #6
 8001054:	4314      	orrs	r4, r2
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	d50e      	bpl.n	8001078 <__aeabi_fmul+0x250>
 800105a:	2301      	movs	r3, #1
 800105c:	0862      	lsrs	r2, r4, #1
 800105e:	401c      	ands	r4, r3
 8001060:	4314      	orrs	r4, r2
 8001062:	e749      	b.n	8000ef8 <__aeabi_fmul+0xd0>
 8001064:	003e      	movs	r6, r7
 8001066:	46a1      	mov	r9, r4
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	464b      	mov	r3, r9
 800106c:	03d2      	lsls	r2, r2, #15
 800106e:	431a      	orrs	r2, r3
 8001070:	0252      	lsls	r2, r2, #9
 8001072:	20ff      	movs	r0, #255	@ 0xff
 8001074:	0a52      	lsrs	r2, r2, #9
 8001076:	e714      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001078:	001d      	movs	r5, r3
 800107a:	e73d      	b.n	8000ef8 <__aeabi_fmul+0xd0>
 800107c:	0192      	lsls	r2, r2, #6
 800107e:	2000      	movs	r0, #0
 8001080:	0a52      	lsrs	r2, r2, #9
 8001082:	e70e      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 8001084:	290f      	cmp	r1, #15
 8001086:	d1ed      	bne.n	8001064 <__aeabi_fmul+0x23c>
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	464b      	mov	r3, r9
 800108c:	03d2      	lsls	r2, r2, #15
 800108e:	4213      	tst	r3, r2
 8001090:	d0ea      	beq.n	8001068 <__aeabi_fmul+0x240>
 8001092:	4214      	tst	r4, r2
 8001094:	d1e8      	bne.n	8001068 <__aeabi_fmul+0x240>
 8001096:	003e      	movs	r6, r7
 8001098:	20ff      	movs	r0, #255	@ 0xff
 800109a:	4322      	orrs	r2, r4
 800109c:	e701      	b.n	8000ea2 <__aeabi_fmul+0x7a>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	f7ffffff 	.word	0xf7ffffff

080010a4 <__aeabi_fsub>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	4647      	mov	r7, r8
 80010a8:	46ce      	mov	lr, r9
 80010aa:	024e      	lsls	r6, r1, #9
 80010ac:	0243      	lsls	r3, r0, #9
 80010ae:	0045      	lsls	r5, r0, #1
 80010b0:	0a72      	lsrs	r2, r6, #9
 80010b2:	0fc4      	lsrs	r4, r0, #31
 80010b4:	0048      	lsls	r0, r1, #1
 80010b6:	b580      	push	{r7, lr}
 80010b8:	4694      	mov	ip, r2
 80010ba:	0a5f      	lsrs	r7, r3, #9
 80010bc:	0e2d      	lsrs	r5, r5, #24
 80010be:	099b      	lsrs	r3, r3, #6
 80010c0:	0e00      	lsrs	r0, r0, #24
 80010c2:	0fc9      	lsrs	r1, r1, #31
 80010c4:	09b6      	lsrs	r6, r6, #6
 80010c6:	28ff      	cmp	r0, #255	@ 0xff
 80010c8:	d024      	beq.n	8001114 <__aeabi_fsub+0x70>
 80010ca:	2201      	movs	r2, #1
 80010cc:	4051      	eors	r1, r2
 80010ce:	1a2a      	subs	r2, r5, r0
 80010d0:	428c      	cmp	r4, r1
 80010d2:	d00f      	beq.n	80010f4 <__aeabi_fsub+0x50>
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_fsub+0x36>
 80010d8:	e16a      	b.n	80013b0 <__aeabi_fsub+0x30c>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d135      	bne.n	800114a <__aeabi_fsub+0xa6>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x40>
 80010e2:	e0a2      	b.n	800122a <__aeabi_fsub+0x186>
 80010e4:	1e51      	subs	r1, r2, #1
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x48>
 80010ea:	e124      	b.n	8001336 <__aeabi_fsub+0x292>
 80010ec:	2aff      	cmp	r2, #255	@ 0xff
 80010ee:	d021      	beq.n	8001134 <__aeabi_fsub+0x90>
 80010f0:	000a      	movs	r2, r1
 80010f2:	e02f      	b.n	8001154 <__aeabi_fsub+0xb0>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_fsub+0x56>
 80010f8:	e167      	b.n	80013ca <__aeabi_fsub+0x326>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d05e      	beq.n	80011bc <__aeabi_fsub+0x118>
 80010fe:	2dff      	cmp	r5, #255	@ 0xff
 8001100:	d018      	beq.n	8001134 <__aeabi_fsub+0x90>
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	04c9      	lsls	r1, r1, #19
 8001106:	430e      	orrs	r6, r1
 8001108:	2a1b      	cmp	r2, #27
 800110a:	dc00      	bgt.n	800110e <__aeabi_fsub+0x6a>
 800110c:	e076      	b.n	80011fc <__aeabi_fsub+0x158>
 800110e:	002a      	movs	r2, r5
 8001110:	3301      	adds	r3, #1
 8001112:	e032      	b.n	800117a <__aeabi_fsub+0xd6>
 8001114:	002a      	movs	r2, r5
 8001116:	3aff      	subs	r2, #255	@ 0xff
 8001118:	4691      	mov	r9, r2
 800111a:	2e00      	cmp	r6, #0
 800111c:	d042      	beq.n	80011a4 <__aeabi_fsub+0x100>
 800111e:	428c      	cmp	r4, r1
 8001120:	d055      	beq.n	80011ce <__aeabi_fsub+0x12a>
 8001122:	464a      	mov	r2, r9
 8001124:	2a00      	cmp	r2, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x86>
 8001128:	e09c      	b.n	8001264 <__aeabi_fsub+0x1c0>
 800112a:	2d00      	cmp	r5, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x8c>
 800112e:	e077      	b.n	8001220 <__aeabi_fsub+0x17c>
 8001130:	000c      	movs	r4, r1
 8001132:	0033      	movs	r3, r6
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x98>
 800113a:	e06e      	b.n	800121a <__aeabi_fsub+0x176>
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	03d2      	lsls	r2, r2, #15
 8001140:	4313      	orrs	r3, r2
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	20ff      	movs	r0, #255	@ 0xff
 8001146:	0a5b      	lsrs	r3, r3, #9
 8001148:	e024      	b.n	8001194 <__aeabi_fsub+0xf0>
 800114a:	2dff      	cmp	r5, #255	@ 0xff
 800114c:	d0f2      	beq.n	8001134 <__aeabi_fsub+0x90>
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	04c9      	lsls	r1, r1, #19
 8001152:	430e      	orrs	r6, r1
 8001154:	2101      	movs	r1, #1
 8001156:	2a1b      	cmp	r2, #27
 8001158:	dc08      	bgt.n	800116c <__aeabi_fsub+0xc8>
 800115a:	0031      	movs	r1, r6
 800115c:	2020      	movs	r0, #32
 800115e:	40d1      	lsrs	r1, r2
 8001160:	1a82      	subs	r2, r0, r2
 8001162:	4096      	lsls	r6, r2
 8001164:	0032      	movs	r2, r6
 8001166:	1e50      	subs	r0, r2, #1
 8001168:	4182      	sbcs	r2, r0
 800116a:	4311      	orrs	r1, r2
 800116c:	1a5b      	subs	r3, r3, r1
 800116e:	015a      	lsls	r2, r3, #5
 8001170:	d460      	bmi.n	8001234 <__aeabi_fsub+0x190>
 8001172:	2107      	movs	r1, #7
 8001174:	002a      	movs	r2, r5
 8001176:	4019      	ands	r1, r3
 8001178:	d057      	beq.n	800122a <__aeabi_fsub+0x186>
 800117a:	210f      	movs	r1, #15
 800117c:	4019      	ands	r1, r3
 800117e:	2904      	cmp	r1, #4
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0xe0>
 8001182:	3304      	adds	r3, #4
 8001184:	0159      	lsls	r1, r3, #5
 8001186:	d550      	bpl.n	800122a <__aeabi_fsub+0x186>
 8001188:	1c50      	adds	r0, r2, #1
 800118a:	2afe      	cmp	r2, #254	@ 0xfe
 800118c:	d045      	beq.n	800121a <__aeabi_fsub+0x176>
 800118e:	019b      	lsls	r3, r3, #6
 8001190:	b2c0      	uxtb	r0, r0
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	05c0      	lsls	r0, r0, #23
 8001196:	4318      	orrs	r0, r3
 8001198:	07e4      	lsls	r4, r4, #31
 800119a:	4320      	orrs	r0, r4
 800119c:	bcc0      	pop	{r6, r7}
 800119e:	46b9      	mov	r9, r7
 80011a0:	46b0      	mov	r8, r6
 80011a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a4:	2201      	movs	r2, #1
 80011a6:	4051      	eors	r1, r2
 80011a8:	428c      	cmp	r4, r1
 80011aa:	d1ba      	bne.n	8001122 <__aeabi_fsub+0x7e>
 80011ac:	464a      	mov	r2, r9
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d010      	beq.n	80011d4 <__aeabi_fsub+0x130>
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x114>
 80011b6:	e098      	b.n	80012ea <__aeabi_fsub+0x246>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e7bb      	b.n	8001134 <__aeabi_fsub+0x90>
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d034      	beq.n	800122a <__aeabi_fsub+0x186>
 80011c0:	1e51      	subs	r1, r2, #1
 80011c2:	2a01      	cmp	r2, #1
 80011c4:	d06e      	beq.n	80012a4 <__aeabi_fsub+0x200>
 80011c6:	2aff      	cmp	r2, #255	@ 0xff
 80011c8:	d0b4      	beq.n	8001134 <__aeabi_fsub+0x90>
 80011ca:	000a      	movs	r2, r1
 80011cc:	e79c      	b.n	8001108 <__aeabi_fsub+0x64>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d000      	beq.n	80011d4 <__aeabi_fsub+0x130>
 80011d2:	e088      	b.n	80012e6 <__aeabi_fsub+0x242>
 80011d4:	20fe      	movs	r0, #254	@ 0xfe
 80011d6:	1c6a      	adds	r2, r5, #1
 80011d8:	4210      	tst	r0, r2
 80011da:	d000      	beq.n	80011de <__aeabi_fsub+0x13a>
 80011dc:	e092      	b.n	8001304 <__aeabi_fsub+0x260>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x140>
 80011e2:	e0a4      	b.n	800132e <__aeabi_fsub+0x28a>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_fsub+0x146>
 80011e8:	e0cb      	b.n	8001382 <__aeabi_fsub+0x2de>
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d000      	beq.n	80011f0 <__aeabi_fsub+0x14c>
 80011ee:	e0ca      	b.n	8001386 <__aeabi_fsub+0x2e2>
 80011f0:	2200      	movs	r2, #0
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	0a5b      	lsrs	r3, r3, #9
 80011f8:	b2d0      	uxtb	r0, r2
 80011fa:	e7cb      	b.n	8001194 <__aeabi_fsub+0xf0>
 80011fc:	0031      	movs	r1, r6
 80011fe:	2020      	movs	r0, #32
 8001200:	40d1      	lsrs	r1, r2
 8001202:	1a82      	subs	r2, r0, r2
 8001204:	4096      	lsls	r6, r2
 8001206:	0032      	movs	r2, r6
 8001208:	1e50      	subs	r0, r2, #1
 800120a:	4182      	sbcs	r2, r0
 800120c:	430a      	orrs	r2, r1
 800120e:	189b      	adds	r3, r3, r2
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	d5ae      	bpl.n	8001172 <__aeabi_fsub+0xce>
 8001214:	1c6a      	adds	r2, r5, #1
 8001216:	2dfe      	cmp	r5, #254	@ 0xfe
 8001218:	d14a      	bne.n	80012b0 <__aeabi_fsub+0x20c>
 800121a:	20ff      	movs	r0, #255	@ 0xff
 800121c:	2300      	movs	r3, #0
 800121e:	e7b9      	b.n	8001194 <__aeabi_fsub+0xf0>
 8001220:	22ff      	movs	r2, #255	@ 0xff
 8001222:	2b00      	cmp	r3, #0
 8001224:	d14b      	bne.n	80012be <__aeabi_fsub+0x21a>
 8001226:	000c      	movs	r4, r1
 8001228:	0033      	movs	r3, r6
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	2aff      	cmp	r2, #255	@ 0xff
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x18e>
 8001230:	e781      	b.n	8001136 <__aeabi_fsub+0x92>
 8001232:	e7df      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001234:	019f      	lsls	r7, r3, #6
 8001236:	09bf      	lsrs	r7, r7, #6
 8001238:	0038      	movs	r0, r7
 800123a:	f002 f8eb 	bl	8003414 <__clzsi2>
 800123e:	3805      	subs	r0, #5
 8001240:	4087      	lsls	r7, r0
 8001242:	4285      	cmp	r5, r0
 8001244:	dc21      	bgt.n	800128a <__aeabi_fsub+0x1e6>
 8001246:	003b      	movs	r3, r7
 8001248:	2120      	movs	r1, #32
 800124a:	1b42      	subs	r2, r0, r5
 800124c:	3201      	adds	r2, #1
 800124e:	40d3      	lsrs	r3, r2
 8001250:	1a8a      	subs	r2, r1, r2
 8001252:	4097      	lsls	r7, r2
 8001254:	1e7a      	subs	r2, r7, #1
 8001256:	4197      	sbcs	r7, r2
 8001258:	2200      	movs	r2, #0
 800125a:	433b      	orrs	r3, r7
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	d000      	beq.n	8001262 <__aeabi_fsub+0x1be>
 8001260:	e78b      	b.n	800117a <__aeabi_fsub+0xd6>
 8001262:	e78f      	b.n	8001184 <__aeabi_fsub+0xe0>
 8001264:	20fe      	movs	r0, #254	@ 0xfe
 8001266:	1c6a      	adds	r2, r5, #1
 8001268:	4210      	tst	r0, r2
 800126a:	d112      	bne.n	8001292 <__aeabi_fsub+0x1ee>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d152      	bne.n	8001316 <__aeabi_fsub+0x272>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d07c      	beq.n	800136e <__aeabi_fsub+0x2ca>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d0bb      	beq.n	80011f0 <__aeabi_fsub+0x14c>
 8001278:	1b9a      	subs	r2, r3, r6
 800127a:	0150      	lsls	r0, r2, #5
 800127c:	d400      	bmi.n	8001280 <__aeabi_fsub+0x1dc>
 800127e:	e08b      	b.n	8001398 <__aeabi_fsub+0x2f4>
 8001280:	2401      	movs	r4, #1
 8001282:	2200      	movs	r2, #0
 8001284:	1af3      	subs	r3, r6, r3
 8001286:	400c      	ands	r4, r1
 8001288:	e7e8      	b.n	800125c <__aeabi_fsub+0x1b8>
 800128a:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <__aeabi_fsub+0x340>)
 800128c:	1a2a      	subs	r2, r5, r0
 800128e:	403b      	ands	r3, r7
 8001290:	e7e4      	b.n	800125c <__aeabi_fsub+0x1b8>
 8001292:	1b9f      	subs	r7, r3, r6
 8001294:	017a      	lsls	r2, r7, #5
 8001296:	d446      	bmi.n	8001326 <__aeabi_fsub+0x282>
 8001298:	2f00      	cmp	r7, #0
 800129a:	d1cd      	bne.n	8001238 <__aeabi_fsub+0x194>
 800129c:	2400      	movs	r4, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	2300      	movs	r3, #0
 80012a2:	e777      	b.n	8001194 <__aeabi_fsub+0xf0>
 80012a4:	199b      	adds	r3, r3, r6
 80012a6:	2501      	movs	r5, #1
 80012a8:	3201      	adds	r2, #1
 80012aa:	0159      	lsls	r1, r3, #5
 80012ac:	d400      	bmi.n	80012b0 <__aeabi_fsub+0x20c>
 80012ae:	e760      	b.n	8001172 <__aeabi_fsub+0xce>
 80012b0:	2101      	movs	r1, #1
 80012b2:	484d      	ldr	r0, [pc, #308]	@ (80013e8 <__aeabi_fsub+0x344>)
 80012b4:	4019      	ands	r1, r3
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	4003      	ands	r3, r0
 80012ba:	430b      	orrs	r3, r1
 80012bc:	e7ce      	b.n	800125c <__aeabi_fsub+0x1b8>
 80012be:	1e57      	subs	r7, r2, #1
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d05a      	beq.n	800137a <__aeabi_fsub+0x2d6>
 80012c4:	000c      	movs	r4, r1
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d033      	beq.n	8001332 <__aeabi_fsub+0x28e>
 80012ca:	2201      	movs	r2, #1
 80012cc:	2f1b      	cmp	r7, #27
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_fsub+0x23c>
 80012d0:	2120      	movs	r1, #32
 80012d2:	1bc9      	subs	r1, r1, r7
 80012d4:	001a      	movs	r2, r3
 80012d6:	408b      	lsls	r3, r1
 80012d8:	40fa      	lsrs	r2, r7
 80012da:	1e59      	subs	r1, r3, #1
 80012dc:	418b      	sbcs	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	0005      	movs	r5, r0
 80012e2:	1ab3      	subs	r3, r6, r2
 80012e4:	e743      	b.n	800116e <__aeabi_fsub+0xca>
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d123      	bne.n	8001332 <__aeabi_fsub+0x28e>
 80012ea:	22ff      	movs	r2, #255	@ 0xff
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d09b      	beq.n	8001228 <__aeabi_fsub+0x184>
 80012f0:	1e51      	subs	r1, r2, #1
 80012f2:	2a01      	cmp	r2, #1
 80012f4:	d0d6      	beq.n	80012a4 <__aeabi_fsub+0x200>
 80012f6:	2aff      	cmp	r2, #255	@ 0xff
 80012f8:	d01b      	beq.n	8001332 <__aeabi_fsub+0x28e>
 80012fa:	291b      	cmp	r1, #27
 80012fc:	dd2c      	ble.n	8001358 <__aeabi_fsub+0x2b4>
 80012fe:	0002      	movs	r2, r0
 8001300:	1c73      	adds	r3, r6, #1
 8001302:	e73a      	b.n	800117a <__aeabi_fsub+0xd6>
 8001304:	2aff      	cmp	r2, #255	@ 0xff
 8001306:	d088      	beq.n	800121a <__aeabi_fsub+0x176>
 8001308:	199b      	adds	r3, r3, r6
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	0759      	lsls	r1, r3, #29
 800130e:	d000      	beq.n	8001312 <__aeabi_fsub+0x26e>
 8001310:	e733      	b.n	800117a <__aeabi_fsub+0xd6>
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	e76e      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d110      	bne.n	800133c <__aeabi_fsub+0x298>
 800131a:	2e00      	cmp	r6, #0
 800131c:	d043      	beq.n	80013a6 <__aeabi_fsub+0x302>
 800131e:	2401      	movs	r4, #1
 8001320:	0033      	movs	r3, r6
 8001322:	400c      	ands	r4, r1
 8001324:	e706      	b.n	8001134 <__aeabi_fsub+0x90>
 8001326:	2401      	movs	r4, #1
 8001328:	1af7      	subs	r7, r6, r3
 800132a:	400c      	ands	r4, r1
 800132c:	e784      	b.n	8001238 <__aeabi_fsub+0x194>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <__aeabi_fsub+0x298>
 8001332:	0033      	movs	r3, r6
 8001334:	e6fe      	b.n	8001134 <__aeabi_fsub+0x90>
 8001336:	2501      	movs	r5, #1
 8001338:	1b9b      	subs	r3, r3, r6
 800133a:	e718      	b.n	800116e <__aeabi_fsub+0xca>
 800133c:	2e00      	cmp	r6, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_fsub+0x29e>
 8001340:	e6f8      	b.n	8001134 <__aeabi_fsub+0x90>
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	03d2      	lsls	r2, r2, #15
 8001346:	4297      	cmp	r7, r2
 8001348:	d304      	bcc.n	8001354 <__aeabi_fsub+0x2b0>
 800134a:	4594      	cmp	ip, r2
 800134c:	d202      	bcs.n	8001354 <__aeabi_fsub+0x2b0>
 800134e:	2401      	movs	r4, #1
 8001350:	0033      	movs	r3, r6
 8001352:	400c      	ands	r4, r1
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	e6f1      	b.n	800113c <__aeabi_fsub+0x98>
 8001358:	001a      	movs	r2, r3
 800135a:	2520      	movs	r5, #32
 800135c:	40ca      	lsrs	r2, r1
 800135e:	1a69      	subs	r1, r5, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	418b      	sbcs	r3, r1
 8001366:	4313      	orrs	r3, r2
 8001368:	0005      	movs	r5, r0
 800136a:	199b      	adds	r3, r3, r6
 800136c:	e750      	b.n	8001210 <__aeabi_fsub+0x16c>
 800136e:	2e00      	cmp	r6, #0
 8001370:	d094      	beq.n	800129c <__aeabi_fsub+0x1f8>
 8001372:	2401      	movs	r4, #1
 8001374:	0033      	movs	r3, r6
 8001376:	400c      	ands	r4, r1
 8001378:	e73a      	b.n	80011f0 <__aeabi_fsub+0x14c>
 800137a:	000c      	movs	r4, r1
 800137c:	2501      	movs	r5, #1
 800137e:	1af3      	subs	r3, r6, r3
 8001380:	e6f5      	b.n	800116e <__aeabi_fsub+0xca>
 8001382:	0033      	movs	r3, r6
 8001384:	e734      	b.n	80011f0 <__aeabi_fsub+0x14c>
 8001386:	199b      	adds	r3, r3, r6
 8001388:	2200      	movs	r2, #0
 800138a:	0159      	lsls	r1, r3, #5
 800138c:	d5c1      	bpl.n	8001312 <__aeabi_fsub+0x26e>
 800138e:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <__aeabi_fsub+0x340>)
 8001390:	4013      	ands	r3, r2
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	2201      	movs	r2, #1
 8001396:	e72d      	b.n	80011f4 <__aeabi_fsub+0x150>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x2fa>
 800139c:	e77e      	b.n	800129c <__aeabi_fsub+0x1f8>
 800139e:	0013      	movs	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	e726      	b.n	80011f4 <__aeabi_fsub+0x150>
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	2400      	movs	r4, #0
 80013aa:	20ff      	movs	r0, #255	@ 0xff
 80013ac:	03db      	lsls	r3, r3, #15
 80013ae:	e6f1      	b.n	8001194 <__aeabi_fsub+0xf0>
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x312>
 80013b4:	e756      	b.n	8001264 <__aeabi_fsub+0x1c0>
 80013b6:	1b47      	subs	r7, r0, r5
 80013b8:	003a      	movs	r2, r7
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_fsub+0x31c>
 80013be:	e730      	b.n	8001222 <__aeabi_fsub+0x17e>
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	04d2      	lsls	r2, r2, #19
 80013c4:	000c      	movs	r4, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	e77f      	b.n	80012ca <__aeabi_fsub+0x226>
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x32c>
 80013ce:	e701      	b.n	80011d4 <__aeabi_fsub+0x130>
 80013d0:	1b41      	subs	r1, r0, r5
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d101      	bne.n	80013da <__aeabi_fsub+0x336>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e788      	b.n	80012ec <__aeabi_fsub+0x248>
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	04d2      	lsls	r2, r2, #19
 80013de:	4313      	orrs	r3, r2
 80013e0:	e78b      	b.n	80012fa <__aeabi_fsub+0x256>
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	fbffffff 	.word	0xfbffffff
 80013e8:	7dffffff 	.word	0x7dffffff

080013ec <__aeabi_f2iz>:
 80013ec:	0241      	lsls	r1, r0, #9
 80013ee:	0042      	lsls	r2, r0, #1
 80013f0:	0fc3      	lsrs	r3, r0, #31
 80013f2:	0a49      	lsrs	r1, r1, #9
 80013f4:	2000      	movs	r0, #0
 80013f6:	0e12      	lsrs	r2, r2, #24
 80013f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80013fa:	dd03      	ble.n	8001404 <__aeabi_f2iz+0x18>
 80013fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80013fe:	dd02      	ble.n	8001406 <__aeabi_f2iz+0x1a>
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <__aeabi_f2iz+0x3c>)
 8001402:	1898      	adds	r0, r3, r2
 8001404:	4770      	bx	lr
 8001406:	2080      	movs	r0, #128	@ 0x80
 8001408:	0400      	lsls	r0, r0, #16
 800140a:	4301      	orrs	r1, r0
 800140c:	2a95      	cmp	r2, #149	@ 0x95
 800140e:	dc07      	bgt.n	8001420 <__aeabi_f2iz+0x34>
 8001410:	2096      	movs	r0, #150	@ 0x96
 8001412:	1a82      	subs	r2, r0, r2
 8001414:	40d1      	lsrs	r1, r2
 8001416:	4248      	negs	r0, r1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f3      	bne.n	8001404 <__aeabi_f2iz+0x18>
 800141c:	0008      	movs	r0, r1
 800141e:	e7f1      	b.n	8001404 <__aeabi_f2iz+0x18>
 8001420:	3a96      	subs	r2, #150	@ 0x96
 8001422:	4091      	lsls	r1, r2
 8001424:	e7f7      	b.n	8001416 <__aeabi_f2iz+0x2a>
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	7fffffff 	.word	0x7fffffff

0800142c <__aeabi_i2f>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	2800      	cmp	r0, #0
 8001430:	d013      	beq.n	800145a <__aeabi_i2f+0x2e>
 8001432:	17c3      	asrs	r3, r0, #31
 8001434:	18c5      	adds	r5, r0, r3
 8001436:	405d      	eors	r5, r3
 8001438:	0fc4      	lsrs	r4, r0, #31
 800143a:	0028      	movs	r0, r5
 800143c:	f001 ffea 	bl	8003414 <__clzsi2>
 8001440:	239e      	movs	r3, #158	@ 0x9e
 8001442:	0001      	movs	r1, r0
 8001444:	1a1b      	subs	r3, r3, r0
 8001446:	2b96      	cmp	r3, #150	@ 0x96
 8001448:	dc0f      	bgt.n	800146a <__aeabi_i2f+0x3e>
 800144a:	2808      	cmp	r0, #8
 800144c:	d034      	beq.n	80014b8 <__aeabi_i2f+0x8c>
 800144e:	3908      	subs	r1, #8
 8001450:	408d      	lsls	r5, r1
 8001452:	026d      	lsls	r5, r5, #9
 8001454:	0a6d      	lsrs	r5, r5, #9
 8001456:	b2d8      	uxtb	r0, r3
 8001458:	e002      	b.n	8001460 <__aeabi_i2f+0x34>
 800145a:	2400      	movs	r4, #0
 800145c:	2000      	movs	r0, #0
 800145e:	2500      	movs	r5, #0
 8001460:	05c0      	lsls	r0, r0, #23
 8001462:	4328      	orrs	r0, r5
 8001464:	07e4      	lsls	r4, r4, #31
 8001466:	4320      	orrs	r0, r4
 8001468:	bd70      	pop	{r4, r5, r6, pc}
 800146a:	2b99      	cmp	r3, #153	@ 0x99
 800146c:	dc16      	bgt.n	800149c <__aeabi_i2f+0x70>
 800146e:	1f42      	subs	r2, r0, #5
 8001470:	2805      	cmp	r0, #5
 8001472:	d000      	beq.n	8001476 <__aeabi_i2f+0x4a>
 8001474:	4095      	lsls	r5, r2
 8001476:	002a      	movs	r2, r5
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <__aeabi_i2f+0x94>)
 800147a:	4002      	ands	r2, r0
 800147c:	076e      	lsls	r6, r5, #29
 800147e:	d009      	beq.n	8001494 <__aeabi_i2f+0x68>
 8001480:	260f      	movs	r6, #15
 8001482:	4035      	ands	r5, r6
 8001484:	2d04      	cmp	r5, #4
 8001486:	d005      	beq.n	8001494 <__aeabi_i2f+0x68>
 8001488:	3204      	adds	r2, #4
 800148a:	0155      	lsls	r5, r2, #5
 800148c:	d502      	bpl.n	8001494 <__aeabi_i2f+0x68>
 800148e:	239f      	movs	r3, #159	@ 0x9f
 8001490:	4002      	ands	r2, r0
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	0192      	lsls	r2, r2, #6
 8001496:	0a55      	lsrs	r5, r2, #9
 8001498:	b2d8      	uxtb	r0, r3
 800149a:	e7e1      	b.n	8001460 <__aeabi_i2f+0x34>
 800149c:	2205      	movs	r2, #5
 800149e:	1a12      	subs	r2, r2, r0
 80014a0:	0028      	movs	r0, r5
 80014a2:	40d0      	lsrs	r0, r2
 80014a4:	0002      	movs	r2, r0
 80014a6:	0008      	movs	r0, r1
 80014a8:	301b      	adds	r0, #27
 80014aa:	4085      	lsls	r5, r0
 80014ac:	0028      	movs	r0, r5
 80014ae:	1e45      	subs	r5, r0, #1
 80014b0:	41a8      	sbcs	r0, r5
 80014b2:	4302      	orrs	r2, r0
 80014b4:	0015      	movs	r5, r2
 80014b6:	e7de      	b.n	8001476 <__aeabi_i2f+0x4a>
 80014b8:	026d      	lsls	r5, r5, #9
 80014ba:	2096      	movs	r0, #150	@ 0x96
 80014bc:	0a6d      	lsrs	r5, r5, #9
 80014be:	e7cf      	b.n	8001460 <__aeabi_i2f+0x34>
 80014c0:	fbffffff 	.word	0xfbffffff

080014c4 <__aeabi_ui2f>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	1e04      	subs	r4, r0, #0
 80014c8:	d00e      	beq.n	80014e8 <__aeabi_ui2f+0x24>
 80014ca:	f001 ffa3 	bl	8003414 <__clzsi2>
 80014ce:	239e      	movs	r3, #158	@ 0x9e
 80014d0:	0001      	movs	r1, r0
 80014d2:	1a1b      	subs	r3, r3, r0
 80014d4:	2b96      	cmp	r3, #150	@ 0x96
 80014d6:	dc0c      	bgt.n	80014f2 <__aeabi_ui2f+0x2e>
 80014d8:	2808      	cmp	r0, #8
 80014da:	d02f      	beq.n	800153c <__aeabi_ui2f+0x78>
 80014dc:	3908      	subs	r1, #8
 80014de:	408c      	lsls	r4, r1
 80014e0:	0264      	lsls	r4, r4, #9
 80014e2:	0a64      	lsrs	r4, r4, #9
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	e001      	b.n	80014ec <__aeabi_ui2f+0x28>
 80014e8:	2000      	movs	r0, #0
 80014ea:	2400      	movs	r4, #0
 80014ec:	05c0      	lsls	r0, r0, #23
 80014ee:	4320      	orrs	r0, r4
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
 80014f2:	2b99      	cmp	r3, #153	@ 0x99
 80014f4:	dc16      	bgt.n	8001524 <__aeabi_ui2f+0x60>
 80014f6:	1f42      	subs	r2, r0, #5
 80014f8:	2805      	cmp	r0, #5
 80014fa:	d000      	beq.n	80014fe <__aeabi_ui2f+0x3a>
 80014fc:	4094      	lsls	r4, r2
 80014fe:	0022      	movs	r2, r4
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <__aeabi_ui2f+0x80>)
 8001502:	4002      	ands	r2, r0
 8001504:	0765      	lsls	r5, r4, #29
 8001506:	d009      	beq.n	800151c <__aeabi_ui2f+0x58>
 8001508:	250f      	movs	r5, #15
 800150a:	402c      	ands	r4, r5
 800150c:	2c04      	cmp	r4, #4
 800150e:	d005      	beq.n	800151c <__aeabi_ui2f+0x58>
 8001510:	3204      	adds	r2, #4
 8001512:	0154      	lsls	r4, r2, #5
 8001514:	d502      	bpl.n	800151c <__aeabi_ui2f+0x58>
 8001516:	239f      	movs	r3, #159	@ 0x9f
 8001518:	4002      	ands	r2, r0
 800151a:	1a5b      	subs	r3, r3, r1
 800151c:	0192      	lsls	r2, r2, #6
 800151e:	0a54      	lsrs	r4, r2, #9
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	e7e3      	b.n	80014ec <__aeabi_ui2f+0x28>
 8001524:	0002      	movs	r2, r0
 8001526:	0020      	movs	r0, r4
 8001528:	321b      	adds	r2, #27
 800152a:	4090      	lsls	r0, r2
 800152c:	0002      	movs	r2, r0
 800152e:	1e50      	subs	r0, r2, #1
 8001530:	4182      	sbcs	r2, r0
 8001532:	2005      	movs	r0, #5
 8001534:	1a40      	subs	r0, r0, r1
 8001536:	40c4      	lsrs	r4, r0
 8001538:	4314      	orrs	r4, r2
 800153a:	e7e0      	b.n	80014fe <__aeabi_ui2f+0x3a>
 800153c:	0264      	lsls	r4, r4, #9
 800153e:	2096      	movs	r0, #150	@ 0x96
 8001540:	0a64      	lsrs	r4, r4, #9
 8001542:	e7d3      	b.n	80014ec <__aeabi_ui2f+0x28>
 8001544:	fbffffff 	.word	0xfbffffff

08001548 <__aeabi_dadd>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4657      	mov	r7, sl
 800154c:	464e      	mov	r6, r9
 800154e:	4645      	mov	r5, r8
 8001550:	46de      	mov	lr, fp
 8001552:	b5e0      	push	{r5, r6, r7, lr}
 8001554:	b083      	sub	sp, #12
 8001556:	9000      	str	r0, [sp, #0]
 8001558:	9101      	str	r1, [sp, #4]
 800155a:	030c      	lsls	r4, r1, #12
 800155c:	004f      	lsls	r7, r1, #1
 800155e:	0fce      	lsrs	r6, r1, #31
 8001560:	0a61      	lsrs	r1, r4, #9
 8001562:	9c00      	ldr	r4, [sp, #0]
 8001564:	031d      	lsls	r5, r3, #12
 8001566:	0f64      	lsrs	r4, r4, #29
 8001568:	430c      	orrs	r4, r1
 800156a:	9900      	ldr	r1, [sp, #0]
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	00c8      	lsls	r0, r1, #3
 8001572:	0059      	lsls	r1, r3, #1
 8001574:	0d4b      	lsrs	r3, r1, #21
 8001576:	4699      	mov	r9, r3
 8001578:	9a00      	ldr	r2, [sp, #0]
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	0a6d      	lsrs	r5, r5, #9
 800157e:	0fd9      	lsrs	r1, r3, #31
 8001580:	0f53      	lsrs	r3, r2, #29
 8001582:	432b      	orrs	r3, r5
 8001584:	469a      	mov	sl, r3
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	0d7f      	lsrs	r7, r7, #21
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	4694      	mov	ip, r2
 800158e:	464a      	mov	r2, r9
 8001590:	46b0      	mov	r8, r6
 8001592:	1aba      	subs	r2, r7, r2
 8001594:	428e      	cmp	r6, r1
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x52>
 8001598:	e0b0      	b.n	80016fc <__aeabi_dadd+0x1b4>
 800159a:	2a00      	cmp	r2, #0
 800159c:	dc00      	bgt.n	80015a0 <__aeabi_dadd+0x58>
 800159e:	e078      	b.n	8001692 <__aeabi_dadd+0x14a>
 80015a0:	4649      	mov	r1, r9
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x60>
 80015a6:	e0e9      	b.n	800177c <__aeabi_dadd+0x234>
 80015a8:	49c9      	ldr	r1, [pc, #804]	@ (80018d0 <__aeabi_dadd+0x388>)
 80015aa:	428f      	cmp	r7, r1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x68>
 80015ae:	e195      	b.n	80018dc <__aeabi_dadd+0x394>
 80015b0:	2501      	movs	r5, #1
 80015b2:	2a38      	cmp	r2, #56	@ 0x38
 80015b4:	dc16      	bgt.n	80015e4 <__aeabi_dadd+0x9c>
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	4653      	mov	r3, sl
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	430b      	orrs	r3, r1
 80015be:	469a      	mov	sl, r3
 80015c0:	2a1f      	cmp	r2, #31
 80015c2:	dd00      	ble.n	80015c6 <__aeabi_dadd+0x7e>
 80015c4:	e1e7      	b.n	8001996 <__aeabi_dadd+0x44e>
 80015c6:	2120      	movs	r1, #32
 80015c8:	4655      	mov	r5, sl
 80015ca:	1a8b      	subs	r3, r1, r2
 80015cc:	4661      	mov	r1, ip
 80015ce:	409d      	lsls	r5, r3
 80015d0:	40d1      	lsrs	r1, r2
 80015d2:	430d      	orrs	r5, r1
 80015d4:	4661      	mov	r1, ip
 80015d6:	4099      	lsls	r1, r3
 80015d8:	1e4b      	subs	r3, r1, #1
 80015da:	4199      	sbcs	r1, r3
 80015dc:	4653      	mov	r3, sl
 80015de:	40d3      	lsrs	r3, r2
 80015e0:	430d      	orrs	r5, r1
 80015e2:	1ae4      	subs	r4, r4, r3
 80015e4:	1b45      	subs	r5, r0, r5
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	4180      	sbcs	r0, r0
 80015ea:	4240      	negs	r0, r0
 80015ec:	1a24      	subs	r4, r4, r0
 80015ee:	0223      	lsls	r3, r4, #8
 80015f0:	d400      	bmi.n	80015f4 <__aeabi_dadd+0xac>
 80015f2:	e10f      	b.n	8001814 <__aeabi_dadd+0x2cc>
 80015f4:	0264      	lsls	r4, r4, #9
 80015f6:	0a64      	lsrs	r4, r4, #9
 80015f8:	2c00      	cmp	r4, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0xb6>
 80015fc:	e139      	b.n	8001872 <__aeabi_dadd+0x32a>
 80015fe:	0020      	movs	r0, r4
 8001600:	f001 ff08 	bl	8003414 <__clzsi2>
 8001604:	0003      	movs	r3, r0
 8001606:	3b08      	subs	r3, #8
 8001608:	2120      	movs	r1, #32
 800160a:	0028      	movs	r0, r5
 800160c:	1aca      	subs	r2, r1, r3
 800160e:	40d0      	lsrs	r0, r2
 8001610:	409c      	lsls	r4, r3
 8001612:	0002      	movs	r2, r0
 8001614:	409d      	lsls	r5, r3
 8001616:	4322      	orrs	r2, r4
 8001618:	429f      	cmp	r7, r3
 800161a:	dd00      	ble.n	800161e <__aeabi_dadd+0xd6>
 800161c:	e173      	b.n	8001906 <__aeabi_dadd+0x3be>
 800161e:	1bd8      	subs	r0, r3, r7
 8001620:	3001      	adds	r0, #1
 8001622:	1a09      	subs	r1, r1, r0
 8001624:	002c      	movs	r4, r5
 8001626:	408d      	lsls	r5, r1
 8001628:	40c4      	lsrs	r4, r0
 800162a:	1e6b      	subs	r3, r5, #1
 800162c:	419d      	sbcs	r5, r3
 800162e:	0013      	movs	r3, r2
 8001630:	40c2      	lsrs	r2, r0
 8001632:	408b      	lsls	r3, r1
 8001634:	4325      	orrs	r5, r4
 8001636:	2700      	movs	r7, #0
 8001638:	0014      	movs	r4, r2
 800163a:	431d      	orrs	r5, r3
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d009      	beq.n	8001654 <__aeabi_dadd+0x10c>
 8001640:	230f      	movs	r3, #15
 8001642:	402b      	ands	r3, r5
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <__aeabi_dadd+0x10c>
 8001648:	1d2b      	adds	r3, r5, #4
 800164a:	42ab      	cmp	r3, r5
 800164c:	41ad      	sbcs	r5, r5
 800164e:	426d      	negs	r5, r5
 8001650:	1964      	adds	r4, r4, r5
 8001652:	001d      	movs	r5, r3
 8001654:	0223      	lsls	r3, r4, #8
 8001656:	d400      	bmi.n	800165a <__aeabi_dadd+0x112>
 8001658:	e12d      	b.n	80018b6 <__aeabi_dadd+0x36e>
 800165a:	4a9d      	ldr	r2, [pc, #628]	@ (80018d0 <__aeabi_dadd+0x388>)
 800165c:	3701      	adds	r7, #1
 800165e:	4297      	cmp	r7, r2
 8001660:	d100      	bne.n	8001664 <__aeabi_dadd+0x11c>
 8001662:	e0d3      	b.n	800180c <__aeabi_dadd+0x2c4>
 8001664:	4646      	mov	r6, r8
 8001666:	499b      	ldr	r1, [pc, #620]	@ (80018d4 <__aeabi_dadd+0x38c>)
 8001668:	08ed      	lsrs	r5, r5, #3
 800166a:	4021      	ands	r1, r4
 800166c:	074a      	lsls	r2, r1, #29
 800166e:	432a      	orrs	r2, r5
 8001670:	057c      	lsls	r4, r7, #21
 8001672:	024d      	lsls	r5, r1, #9
 8001674:	0b2d      	lsrs	r5, r5, #12
 8001676:	0d64      	lsrs	r4, r4, #21
 8001678:	0524      	lsls	r4, r4, #20
 800167a:	432c      	orrs	r4, r5
 800167c:	07f6      	lsls	r6, r6, #31
 800167e:	4334      	orrs	r4, r6
 8001680:	0010      	movs	r0, r2
 8001682:	0021      	movs	r1, r4
 8001684:	b003      	add	sp, #12
 8001686:	bcf0      	pop	{r4, r5, r6, r7}
 8001688:	46bb      	mov	fp, r7
 800168a:	46b2      	mov	sl, r6
 800168c:	46a9      	mov	r9, r5
 800168e:	46a0      	mov	r8, r4
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	2a00      	cmp	r2, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x150>
 8001696:	e084      	b.n	80017a2 <__aeabi_dadd+0x25a>
 8001698:	464a      	mov	r2, r9
 800169a:	1bd2      	subs	r2, r2, r7
 800169c:	2f00      	cmp	r7, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x15a>
 80016a0:	e16d      	b.n	800197e <__aeabi_dadd+0x436>
 80016a2:	0025      	movs	r5, r4
 80016a4:	4305      	orrs	r5, r0
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x162>
 80016a8:	e127      	b.n	80018fa <__aeabi_dadd+0x3b2>
 80016aa:	1e56      	subs	r6, r2, #1
 80016ac:	2a01      	cmp	r2, #1
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x16a>
 80016b0:	e23b      	b.n	8001b2a <__aeabi_dadd+0x5e2>
 80016b2:	4d87      	ldr	r5, [pc, #540]	@ (80018d0 <__aeabi_dadd+0x388>)
 80016b4:	42aa      	cmp	r2, r5
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x172>
 80016b8:	e26a      	b.n	8001b90 <__aeabi_dadd+0x648>
 80016ba:	2501      	movs	r5, #1
 80016bc:	2e38      	cmp	r6, #56	@ 0x38
 80016be:	dc12      	bgt.n	80016e6 <__aeabi_dadd+0x19e>
 80016c0:	0032      	movs	r2, r6
 80016c2:	2a1f      	cmp	r2, #31
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dadd+0x180>
 80016c6:	e1f8      	b.n	8001aba <__aeabi_dadd+0x572>
 80016c8:	2620      	movs	r6, #32
 80016ca:	0025      	movs	r5, r4
 80016cc:	1ab6      	subs	r6, r6, r2
 80016ce:	0007      	movs	r7, r0
 80016d0:	4653      	mov	r3, sl
 80016d2:	40b0      	lsls	r0, r6
 80016d4:	40d4      	lsrs	r4, r2
 80016d6:	40b5      	lsls	r5, r6
 80016d8:	40d7      	lsrs	r7, r2
 80016da:	1e46      	subs	r6, r0, #1
 80016dc:	41b0      	sbcs	r0, r6
 80016de:	1b1b      	subs	r3, r3, r4
 80016e0:	469a      	mov	sl, r3
 80016e2:	433d      	orrs	r5, r7
 80016e4:	4305      	orrs	r5, r0
 80016e6:	4662      	mov	r2, ip
 80016e8:	1b55      	subs	r5, r2, r5
 80016ea:	45ac      	cmp	ip, r5
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	4653      	mov	r3, sl
 80016f0:	4252      	negs	r2, r2
 80016f2:	000e      	movs	r6, r1
 80016f4:	464f      	mov	r7, r9
 80016f6:	4688      	mov	r8, r1
 80016f8:	1a9c      	subs	r4, r3, r2
 80016fa:	e778      	b.n	80015ee <__aeabi_dadd+0xa6>
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dadd+0x1ba>
 8001700:	e08e      	b.n	8001820 <__aeabi_dadd+0x2d8>
 8001702:	4649      	mov	r1, r9
 8001704:	2900      	cmp	r1, #0
 8001706:	d175      	bne.n	80017f4 <__aeabi_dadd+0x2ac>
 8001708:	4661      	mov	r1, ip
 800170a:	4653      	mov	r3, sl
 800170c:	4319      	orrs	r1, r3
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x1ca>
 8001710:	e0f6      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001712:	1e51      	subs	r1, r2, #1
 8001714:	2a01      	cmp	r2, #1
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x1d2>
 8001718:	e191      	b.n	8001a3e <__aeabi_dadd+0x4f6>
 800171a:	4d6d      	ldr	r5, [pc, #436]	@ (80018d0 <__aeabi_dadd+0x388>)
 800171c:	42aa      	cmp	r2, r5
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x1da>
 8001720:	e0dc      	b.n	80018dc <__aeabi_dadd+0x394>
 8001722:	2501      	movs	r5, #1
 8001724:	2938      	cmp	r1, #56	@ 0x38
 8001726:	dc14      	bgt.n	8001752 <__aeabi_dadd+0x20a>
 8001728:	000a      	movs	r2, r1
 800172a:	2a1f      	cmp	r2, #31
 800172c:	dd00      	ble.n	8001730 <__aeabi_dadd+0x1e8>
 800172e:	e1a2      	b.n	8001a76 <__aeabi_dadd+0x52e>
 8001730:	2120      	movs	r1, #32
 8001732:	4653      	mov	r3, sl
 8001734:	1a89      	subs	r1, r1, r2
 8001736:	408b      	lsls	r3, r1
 8001738:	001d      	movs	r5, r3
 800173a:	4663      	mov	r3, ip
 800173c:	40d3      	lsrs	r3, r2
 800173e:	431d      	orrs	r5, r3
 8001740:	4663      	mov	r3, ip
 8001742:	408b      	lsls	r3, r1
 8001744:	0019      	movs	r1, r3
 8001746:	1e4b      	subs	r3, r1, #1
 8001748:	4199      	sbcs	r1, r3
 800174a:	4653      	mov	r3, sl
 800174c:	40d3      	lsrs	r3, r2
 800174e:	430d      	orrs	r5, r1
 8001750:	18e4      	adds	r4, r4, r3
 8001752:	182d      	adds	r5, r5, r0
 8001754:	4285      	cmp	r5, r0
 8001756:	4180      	sbcs	r0, r0
 8001758:	4240      	negs	r0, r0
 800175a:	1824      	adds	r4, r4, r0
 800175c:	0223      	lsls	r3, r4, #8
 800175e:	d559      	bpl.n	8001814 <__aeabi_dadd+0x2cc>
 8001760:	4b5b      	ldr	r3, [pc, #364]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001762:	3701      	adds	r7, #1
 8001764:	429f      	cmp	r7, r3
 8001766:	d051      	beq.n	800180c <__aeabi_dadd+0x2c4>
 8001768:	2101      	movs	r1, #1
 800176a:	4b5a      	ldr	r3, [pc, #360]	@ (80018d4 <__aeabi_dadd+0x38c>)
 800176c:	086a      	lsrs	r2, r5, #1
 800176e:	401c      	ands	r4, r3
 8001770:	4029      	ands	r1, r5
 8001772:	430a      	orrs	r2, r1
 8001774:	07e5      	lsls	r5, r4, #31
 8001776:	4315      	orrs	r5, r2
 8001778:	0864      	lsrs	r4, r4, #1
 800177a:	e75f      	b.n	800163c <__aeabi_dadd+0xf4>
 800177c:	4661      	mov	r1, ip
 800177e:	4653      	mov	r3, sl
 8001780:	4319      	orrs	r1, r3
 8001782:	d100      	bne.n	8001786 <__aeabi_dadd+0x23e>
 8001784:	e0bc      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001786:	1e51      	subs	r1, r2, #1
 8001788:	2a01      	cmp	r2, #1
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x246>
 800178c:	e164      	b.n	8001a58 <__aeabi_dadd+0x510>
 800178e:	4d50      	ldr	r5, [pc, #320]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001790:	42aa      	cmp	r2, r5
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x24e>
 8001794:	e16a      	b.n	8001a6c <__aeabi_dadd+0x524>
 8001796:	2501      	movs	r5, #1
 8001798:	2938      	cmp	r1, #56	@ 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dadd+0x256>
 800179c:	e722      	b.n	80015e4 <__aeabi_dadd+0x9c>
 800179e:	000a      	movs	r2, r1
 80017a0:	e70e      	b.n	80015c0 <__aeabi_dadd+0x78>
 80017a2:	4a4d      	ldr	r2, [pc, #308]	@ (80018d8 <__aeabi_dadd+0x390>)
 80017a4:	1c7d      	adds	r5, r7, #1
 80017a6:	4215      	tst	r5, r2
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x264>
 80017aa:	e0d0      	b.n	800194e <__aeabi_dadd+0x406>
 80017ac:	0025      	movs	r5, r4
 80017ae:	4662      	mov	r2, ip
 80017b0:	4653      	mov	r3, sl
 80017b2:	4305      	orrs	r5, r0
 80017b4:	431a      	orrs	r2, r3
 80017b6:	2f00      	cmp	r7, #0
 80017b8:	d000      	beq.n	80017bc <__aeabi_dadd+0x274>
 80017ba:	e137      	b.n	8001a2c <__aeabi_dadd+0x4e4>
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x27a>
 80017c0:	e1a8      	b.n	8001b14 <__aeabi_dadd+0x5cc>
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dadd+0x280>
 80017c6:	e16a      	b.n	8001a9e <__aeabi_dadd+0x556>
 80017c8:	4663      	mov	r3, ip
 80017ca:	1ac5      	subs	r5, r0, r3
 80017cc:	4653      	mov	r3, sl
 80017ce:	1ae2      	subs	r2, r4, r3
 80017d0:	42a8      	cmp	r0, r5
 80017d2:	419b      	sbcs	r3, r3
 80017d4:	425b      	negs	r3, r3
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	d400      	bmi.n	80017de <__aeabi_dadd+0x296>
 80017dc:	e203      	b.n	8001be6 <__aeabi_dadd+0x69e>
 80017de:	4663      	mov	r3, ip
 80017e0:	1a1d      	subs	r5, r3, r0
 80017e2:	45ac      	cmp	ip, r5
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4653      	mov	r3, sl
 80017e8:	4252      	negs	r2, r2
 80017ea:	1b1c      	subs	r4, r3, r4
 80017ec:	000e      	movs	r6, r1
 80017ee:	4688      	mov	r8, r1
 80017f0:	1aa4      	subs	r4, r4, r2
 80017f2:	e723      	b.n	800163c <__aeabi_dadd+0xf4>
 80017f4:	4936      	ldr	r1, [pc, #216]	@ (80018d0 <__aeabi_dadd+0x388>)
 80017f6:	428f      	cmp	r7, r1
 80017f8:	d070      	beq.n	80018dc <__aeabi_dadd+0x394>
 80017fa:	2501      	movs	r5, #1
 80017fc:	2a38      	cmp	r2, #56	@ 0x38
 80017fe:	dca8      	bgt.n	8001752 <__aeabi_dadd+0x20a>
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	4653      	mov	r3, sl
 8001804:	0409      	lsls	r1, r1, #16
 8001806:	430b      	orrs	r3, r1
 8001808:	469a      	mov	sl, r3
 800180a:	e78e      	b.n	800172a <__aeabi_dadd+0x1e2>
 800180c:	003c      	movs	r4, r7
 800180e:	2500      	movs	r5, #0
 8001810:	2200      	movs	r2, #0
 8001812:	e731      	b.n	8001678 <__aeabi_dadd+0x130>
 8001814:	2307      	movs	r3, #7
 8001816:	402b      	ands	r3, r5
 8001818:	2b00      	cmp	r3, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dadd+0x2d6>
 800181c:	e710      	b.n	8001640 <__aeabi_dadd+0xf8>
 800181e:	e093      	b.n	8001948 <__aeabi_dadd+0x400>
 8001820:	2a00      	cmp	r2, #0
 8001822:	d074      	beq.n	800190e <__aeabi_dadd+0x3c6>
 8001824:	464a      	mov	r2, r9
 8001826:	1bd2      	subs	r2, r2, r7
 8001828:	2f00      	cmp	r7, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x2e6>
 800182c:	e0c7      	b.n	80019be <__aeabi_dadd+0x476>
 800182e:	4928      	ldr	r1, [pc, #160]	@ (80018d0 <__aeabi_dadd+0x388>)
 8001830:	4589      	cmp	r9, r1
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x2ee>
 8001834:	e185      	b.n	8001b42 <__aeabi_dadd+0x5fa>
 8001836:	2501      	movs	r5, #1
 8001838:	2a38      	cmp	r2, #56	@ 0x38
 800183a:	dc12      	bgt.n	8001862 <__aeabi_dadd+0x31a>
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0409      	lsls	r1, r1, #16
 8001840:	430c      	orrs	r4, r1
 8001842:	2a1f      	cmp	r2, #31
 8001844:	dd00      	ble.n	8001848 <__aeabi_dadd+0x300>
 8001846:	e1ab      	b.n	8001ba0 <__aeabi_dadd+0x658>
 8001848:	2120      	movs	r1, #32
 800184a:	0025      	movs	r5, r4
 800184c:	1a89      	subs	r1, r1, r2
 800184e:	0007      	movs	r7, r0
 8001850:	4088      	lsls	r0, r1
 8001852:	408d      	lsls	r5, r1
 8001854:	40d7      	lsrs	r7, r2
 8001856:	1e41      	subs	r1, r0, #1
 8001858:	4188      	sbcs	r0, r1
 800185a:	40d4      	lsrs	r4, r2
 800185c:	433d      	orrs	r5, r7
 800185e:	4305      	orrs	r5, r0
 8001860:	44a2      	add	sl, r4
 8001862:	4465      	add	r5, ip
 8001864:	4565      	cmp	r5, ip
 8001866:	4192      	sbcs	r2, r2
 8001868:	4252      	negs	r2, r2
 800186a:	4452      	add	r2, sl
 800186c:	0014      	movs	r4, r2
 800186e:	464f      	mov	r7, r9
 8001870:	e774      	b.n	800175c <__aeabi_dadd+0x214>
 8001872:	0028      	movs	r0, r5
 8001874:	f001 fdce 	bl	8003414 <__clzsi2>
 8001878:	0003      	movs	r3, r0
 800187a:	3318      	adds	r3, #24
 800187c:	2b1f      	cmp	r3, #31
 800187e:	dc00      	bgt.n	8001882 <__aeabi_dadd+0x33a>
 8001880:	e6c2      	b.n	8001608 <__aeabi_dadd+0xc0>
 8001882:	002a      	movs	r2, r5
 8001884:	3808      	subs	r0, #8
 8001886:	4082      	lsls	r2, r0
 8001888:	429f      	cmp	r7, r3
 800188a:	dd00      	ble.n	800188e <__aeabi_dadd+0x346>
 800188c:	e0a9      	b.n	80019e2 <__aeabi_dadd+0x49a>
 800188e:	1bdb      	subs	r3, r3, r7
 8001890:	1c58      	adds	r0, r3, #1
 8001892:	281f      	cmp	r0, #31
 8001894:	dc00      	bgt.n	8001898 <__aeabi_dadd+0x350>
 8001896:	e1ac      	b.n	8001bf2 <__aeabi_dadd+0x6aa>
 8001898:	0015      	movs	r5, r2
 800189a:	3b1f      	subs	r3, #31
 800189c:	40dd      	lsrs	r5, r3
 800189e:	2820      	cmp	r0, #32
 80018a0:	d005      	beq.n	80018ae <__aeabi_dadd+0x366>
 80018a2:	2340      	movs	r3, #64	@ 0x40
 80018a4:	1a1b      	subs	r3, r3, r0
 80018a6:	409a      	lsls	r2, r3
 80018a8:	1e53      	subs	r3, r2, #1
 80018aa:	419a      	sbcs	r2, r3
 80018ac:	4315      	orrs	r5, r2
 80018ae:	2307      	movs	r3, #7
 80018b0:	2700      	movs	r7, #0
 80018b2:	402b      	ands	r3, r5
 80018b4:	e7b0      	b.n	8001818 <__aeabi_dadd+0x2d0>
 80018b6:	08ed      	lsrs	r5, r5, #3
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <__aeabi_dadd+0x388>)
 80018ba:	0762      	lsls	r2, r4, #29
 80018bc:	432a      	orrs	r2, r5
 80018be:	08e4      	lsrs	r4, r4, #3
 80018c0:	429f      	cmp	r7, r3
 80018c2:	d00f      	beq.n	80018e4 <__aeabi_dadd+0x39c>
 80018c4:	0324      	lsls	r4, r4, #12
 80018c6:	0b25      	lsrs	r5, r4, #12
 80018c8:	057c      	lsls	r4, r7, #21
 80018ca:	0d64      	lsrs	r4, r4, #21
 80018cc:	e6d4      	b.n	8001678 <__aeabi_dadd+0x130>
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	ff7fffff 	.word	0xff7fffff
 80018d8:	000007fe 	.word	0x000007fe
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	0762      	lsls	r2, r4, #29
 80018e0:	4302      	orrs	r2, r0
 80018e2:	08e4      	lsrs	r4, r4, #3
 80018e4:	0013      	movs	r3, r2
 80018e6:	4323      	orrs	r3, r4
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x3a4>
 80018ea:	e186      	b.n	8001bfa <__aeabi_dadd+0x6b2>
 80018ec:	2580      	movs	r5, #128	@ 0x80
 80018ee:	032d      	lsls	r5, r5, #12
 80018f0:	4325      	orrs	r5, r4
 80018f2:	032d      	lsls	r5, r5, #12
 80018f4:	4cc3      	ldr	r4, [pc, #780]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80018f6:	0b2d      	lsrs	r5, r5, #12
 80018f8:	e6be      	b.n	8001678 <__aeabi_dadd+0x130>
 80018fa:	4660      	mov	r0, ip
 80018fc:	4654      	mov	r4, sl
 80018fe:	000e      	movs	r6, r1
 8001900:	0017      	movs	r7, r2
 8001902:	08c5      	lsrs	r5, r0, #3
 8001904:	e7d8      	b.n	80018b8 <__aeabi_dadd+0x370>
 8001906:	4cc0      	ldr	r4, [pc, #768]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 8001908:	1aff      	subs	r7, r7, r3
 800190a:	4014      	ands	r4, r2
 800190c:	e696      	b.n	800163c <__aeabi_dadd+0xf4>
 800190e:	4abf      	ldr	r2, [pc, #764]	@ (8001c0c <__aeabi_dadd+0x6c4>)
 8001910:	1c79      	adds	r1, r7, #1
 8001912:	4211      	tst	r1, r2
 8001914:	d16b      	bne.n	80019ee <__aeabi_dadd+0x4a6>
 8001916:	0022      	movs	r2, r4
 8001918:	4302      	orrs	r2, r0
 800191a:	2f00      	cmp	r7, #0
 800191c:	d000      	beq.n	8001920 <__aeabi_dadd+0x3d8>
 800191e:	e0db      	b.n	8001ad8 <__aeabi_dadd+0x590>
 8001920:	2a00      	cmp	r2, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x3de>
 8001924:	e12d      	b.n	8001b82 <__aeabi_dadd+0x63a>
 8001926:	4662      	mov	r2, ip
 8001928:	4653      	mov	r3, sl
 800192a:	431a      	orrs	r2, r3
 800192c:	d100      	bne.n	8001930 <__aeabi_dadd+0x3e8>
 800192e:	e0b6      	b.n	8001a9e <__aeabi_dadd+0x556>
 8001930:	4663      	mov	r3, ip
 8001932:	18c5      	adds	r5, r0, r3
 8001934:	4285      	cmp	r5, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	4454      	add	r4, sl
 800193a:	4240      	negs	r0, r0
 800193c:	1824      	adds	r4, r4, r0
 800193e:	0223      	lsls	r3, r4, #8
 8001940:	d502      	bpl.n	8001948 <__aeabi_dadd+0x400>
 8001942:	000f      	movs	r7, r1
 8001944:	4bb0      	ldr	r3, [pc, #704]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 8001946:	401c      	ands	r4, r3
 8001948:	003a      	movs	r2, r7
 800194a:	0028      	movs	r0, r5
 800194c:	e7d8      	b.n	8001900 <__aeabi_dadd+0x3b8>
 800194e:	4662      	mov	r2, ip
 8001950:	1a85      	subs	r5, r0, r2
 8001952:	42a8      	cmp	r0, r5
 8001954:	4192      	sbcs	r2, r2
 8001956:	4653      	mov	r3, sl
 8001958:	4252      	negs	r2, r2
 800195a:	4691      	mov	r9, r2
 800195c:	1ae3      	subs	r3, r4, r3
 800195e:	001a      	movs	r2, r3
 8001960:	464b      	mov	r3, r9
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	4691      	mov	r9, r2
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	d454      	bmi.n	8001a16 <__aeabi_dadd+0x4ce>
 800196c:	464a      	mov	r2, r9
 800196e:	464c      	mov	r4, r9
 8001970:	432a      	orrs	r2, r5
 8001972:	d000      	beq.n	8001976 <__aeabi_dadd+0x42e>
 8001974:	e640      	b.n	80015f8 <__aeabi_dadd+0xb0>
 8001976:	2600      	movs	r6, #0
 8001978:	2400      	movs	r4, #0
 800197a:	2500      	movs	r5, #0
 800197c:	e67c      	b.n	8001678 <__aeabi_dadd+0x130>
 800197e:	4da1      	ldr	r5, [pc, #644]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 8001980:	45a9      	cmp	r9, r5
 8001982:	d100      	bne.n	8001986 <__aeabi_dadd+0x43e>
 8001984:	e090      	b.n	8001aa8 <__aeabi_dadd+0x560>
 8001986:	2501      	movs	r5, #1
 8001988:	2a38      	cmp	r2, #56	@ 0x38
 800198a:	dd00      	ble.n	800198e <__aeabi_dadd+0x446>
 800198c:	e6ab      	b.n	80016e6 <__aeabi_dadd+0x19e>
 800198e:	2580      	movs	r5, #128	@ 0x80
 8001990:	042d      	lsls	r5, r5, #16
 8001992:	432c      	orrs	r4, r5
 8001994:	e695      	b.n	80016c2 <__aeabi_dadd+0x17a>
 8001996:	0011      	movs	r1, r2
 8001998:	4655      	mov	r5, sl
 800199a:	3920      	subs	r1, #32
 800199c:	40cd      	lsrs	r5, r1
 800199e:	46a9      	mov	r9, r5
 80019a0:	2a20      	cmp	r2, #32
 80019a2:	d006      	beq.n	80019b2 <__aeabi_dadd+0x46a>
 80019a4:	2140      	movs	r1, #64	@ 0x40
 80019a6:	4653      	mov	r3, sl
 80019a8:	1a8a      	subs	r2, r1, r2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	4662      	mov	r2, ip
 80019ae:	431a      	orrs	r2, r3
 80019b0:	4694      	mov	ip, r2
 80019b2:	4665      	mov	r5, ip
 80019b4:	1e6b      	subs	r3, r5, #1
 80019b6:	419d      	sbcs	r5, r3
 80019b8:	464b      	mov	r3, r9
 80019ba:	431d      	orrs	r5, r3
 80019bc:	e612      	b.n	80015e4 <__aeabi_dadd+0x9c>
 80019be:	0021      	movs	r1, r4
 80019c0:	4301      	orrs	r1, r0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x47e>
 80019c4:	e0c4      	b.n	8001b50 <__aeabi_dadd+0x608>
 80019c6:	1e51      	subs	r1, r2, #1
 80019c8:	2a01      	cmp	r2, #1
 80019ca:	d100      	bne.n	80019ce <__aeabi_dadd+0x486>
 80019cc:	e0fb      	b.n	8001bc6 <__aeabi_dadd+0x67e>
 80019ce:	4d8d      	ldr	r5, [pc, #564]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80019d0:	42aa      	cmp	r2, r5
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dadd+0x48e>
 80019d4:	e0b5      	b.n	8001b42 <__aeabi_dadd+0x5fa>
 80019d6:	2501      	movs	r5, #1
 80019d8:	2938      	cmp	r1, #56	@ 0x38
 80019da:	dd00      	ble.n	80019de <__aeabi_dadd+0x496>
 80019dc:	e741      	b.n	8001862 <__aeabi_dadd+0x31a>
 80019de:	000a      	movs	r2, r1
 80019e0:	e72f      	b.n	8001842 <__aeabi_dadd+0x2fa>
 80019e2:	4c89      	ldr	r4, [pc, #548]	@ (8001c08 <__aeabi_dadd+0x6c0>)
 80019e4:	1aff      	subs	r7, r7, r3
 80019e6:	4014      	ands	r4, r2
 80019e8:	0762      	lsls	r2, r4, #29
 80019ea:	08e4      	lsrs	r4, r4, #3
 80019ec:	e76a      	b.n	80018c4 <__aeabi_dadd+0x37c>
 80019ee:	4a85      	ldr	r2, [pc, #532]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 80019f0:	4291      	cmp	r1, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dadd+0x4ae>
 80019f4:	e0e3      	b.n	8001bbe <__aeabi_dadd+0x676>
 80019f6:	4663      	mov	r3, ip
 80019f8:	18c2      	adds	r2, r0, r3
 80019fa:	4282      	cmp	r2, r0
 80019fc:	4180      	sbcs	r0, r0
 80019fe:	0023      	movs	r3, r4
 8001a00:	4240      	negs	r0, r0
 8001a02:	4453      	add	r3, sl
 8001a04:	181b      	adds	r3, r3, r0
 8001a06:	07dd      	lsls	r5, r3, #31
 8001a08:	085c      	lsrs	r4, r3, #1
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	0852      	lsrs	r2, r2, #1
 8001a0e:	4315      	orrs	r5, r2
 8001a10:	000f      	movs	r7, r1
 8001a12:	402b      	ands	r3, r5
 8001a14:	e700      	b.n	8001818 <__aeabi_dadd+0x2d0>
 8001a16:	4663      	mov	r3, ip
 8001a18:	1a1d      	subs	r5, r3, r0
 8001a1a:	45ac      	cmp	ip, r5
 8001a1c:	4192      	sbcs	r2, r2
 8001a1e:	4653      	mov	r3, sl
 8001a20:	4252      	negs	r2, r2
 8001a22:	1b1c      	subs	r4, r3, r4
 8001a24:	000e      	movs	r6, r1
 8001a26:	4688      	mov	r8, r1
 8001a28:	1aa4      	subs	r4, r4, r2
 8001a2a:	e5e5      	b.n	80015f8 <__aeabi_dadd+0xb0>
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dadd+0x4ea>
 8001a30:	e091      	b.n	8001b56 <__aeabi_dadd+0x60e>
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d138      	bne.n	8001aa8 <__aeabi_dadd+0x560>
 8001a36:	2480      	movs	r4, #128	@ 0x80
 8001a38:	2600      	movs	r6, #0
 8001a3a:	0324      	lsls	r4, r4, #12
 8001a3c:	e756      	b.n	80018ec <__aeabi_dadd+0x3a4>
 8001a3e:	4663      	mov	r3, ip
 8001a40:	18c5      	adds	r5, r0, r3
 8001a42:	4285      	cmp	r5, r0
 8001a44:	4180      	sbcs	r0, r0
 8001a46:	4454      	add	r4, sl
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1824      	adds	r4, r4, r0
 8001a4c:	2701      	movs	r7, #1
 8001a4e:	0223      	lsls	r3, r4, #8
 8001a50:	d400      	bmi.n	8001a54 <__aeabi_dadd+0x50c>
 8001a52:	e6df      	b.n	8001814 <__aeabi_dadd+0x2cc>
 8001a54:	2702      	movs	r7, #2
 8001a56:	e687      	b.n	8001768 <__aeabi_dadd+0x220>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	1ac5      	subs	r5, r0, r3
 8001a5c:	42a8      	cmp	r0, r5
 8001a5e:	4180      	sbcs	r0, r0
 8001a60:	4653      	mov	r3, sl
 8001a62:	4240      	negs	r0, r0
 8001a64:	1ae4      	subs	r4, r4, r3
 8001a66:	2701      	movs	r7, #1
 8001a68:	1a24      	subs	r4, r4, r0
 8001a6a:	e5c0      	b.n	80015ee <__aeabi_dadd+0xa6>
 8001a6c:	0762      	lsls	r2, r4, #29
 8001a6e:	08c0      	lsrs	r0, r0, #3
 8001a70:	4302      	orrs	r2, r0
 8001a72:	08e4      	lsrs	r4, r4, #3
 8001a74:	e736      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001a76:	0011      	movs	r1, r2
 8001a78:	4653      	mov	r3, sl
 8001a7a:	3920      	subs	r1, #32
 8001a7c:	40cb      	lsrs	r3, r1
 8001a7e:	4699      	mov	r9, r3
 8001a80:	2a20      	cmp	r2, #32
 8001a82:	d006      	beq.n	8001a92 <__aeabi_dadd+0x54a>
 8001a84:	2140      	movs	r1, #64	@ 0x40
 8001a86:	4653      	mov	r3, sl
 8001a88:	1a8a      	subs	r2, r1, r2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	4662      	mov	r2, ip
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	4694      	mov	ip, r2
 8001a92:	4665      	mov	r5, ip
 8001a94:	1e6b      	subs	r3, r5, #1
 8001a96:	419d      	sbcs	r5, r3
 8001a98:	464b      	mov	r3, r9
 8001a9a:	431d      	orrs	r5, r3
 8001a9c:	e659      	b.n	8001752 <__aeabi_dadd+0x20a>
 8001a9e:	0762      	lsls	r2, r4, #29
 8001aa0:	08c0      	lsrs	r0, r0, #3
 8001aa2:	4302      	orrs	r2, r0
 8001aa4:	08e4      	lsrs	r4, r4, #3
 8001aa6:	e70d      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001aa8:	4653      	mov	r3, sl
 8001aaa:	075a      	lsls	r2, r3, #29
 8001aac:	4663      	mov	r3, ip
 8001aae:	08d8      	lsrs	r0, r3, #3
 8001ab0:	4653      	mov	r3, sl
 8001ab2:	000e      	movs	r6, r1
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	08dc      	lsrs	r4, r3, #3
 8001ab8:	e714      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001aba:	0015      	movs	r5, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	3d20      	subs	r5, #32
 8001ac0:	40ee      	lsrs	r6, r5
 8001ac2:	2a20      	cmp	r2, #32
 8001ac4:	d003      	beq.n	8001ace <__aeabi_dadd+0x586>
 8001ac6:	2540      	movs	r5, #64	@ 0x40
 8001ac8:	1aaa      	subs	r2, r5, r2
 8001aca:	4094      	lsls	r4, r2
 8001acc:	4320      	orrs	r0, r4
 8001ace:	1e42      	subs	r2, r0, #1
 8001ad0:	4190      	sbcs	r0, r2
 8001ad2:	0005      	movs	r5, r0
 8001ad4:	4335      	orrs	r5, r6
 8001ad6:	e606      	b.n	80016e6 <__aeabi_dadd+0x19e>
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d07c      	beq.n	8001bd6 <__aeabi_dadd+0x68e>
 8001adc:	4662      	mov	r2, ip
 8001ade:	4653      	mov	r3, sl
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dadd+0x5a0>
 8001ae6:	e6fa      	b.n	80018de <__aeabi_dadd+0x396>
 8001ae8:	0762      	lsls	r2, r4, #29
 8001aea:	4310      	orrs	r0, r2
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	08e4      	lsrs	r4, r4, #3
 8001af0:	0312      	lsls	r2, r2, #12
 8001af2:	4214      	tst	r4, r2
 8001af4:	d008      	beq.n	8001b08 <__aeabi_dadd+0x5c0>
 8001af6:	08d9      	lsrs	r1, r3, #3
 8001af8:	4211      	tst	r1, r2
 8001afa:	d105      	bne.n	8001b08 <__aeabi_dadd+0x5c0>
 8001afc:	4663      	mov	r3, ip
 8001afe:	08d8      	lsrs	r0, r3, #3
 8001b00:	4653      	mov	r3, sl
 8001b02:	000c      	movs	r4, r1
 8001b04:	075b      	lsls	r3, r3, #29
 8001b06:	4318      	orrs	r0, r3
 8001b08:	0f42      	lsrs	r2, r0, #29
 8001b0a:	00c0      	lsls	r0, r0, #3
 8001b0c:	08c0      	lsrs	r0, r0, #3
 8001b0e:	0752      	lsls	r2, r2, #29
 8001b10:	4302      	orrs	r2, r0
 8001b12:	e6e7      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x5d2>
 8001b18:	e72d      	b.n	8001976 <__aeabi_dadd+0x42e>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	08d8      	lsrs	r0, r3, #3
 8001b1e:	4653      	mov	r3, sl
 8001b20:	075a      	lsls	r2, r3, #29
 8001b22:	000e      	movs	r6, r1
 8001b24:	4302      	orrs	r2, r0
 8001b26:	08dc      	lsrs	r4, r3, #3
 8001b28:	e6cc      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	1a1d      	subs	r5, r3, r0
 8001b2e:	45ac      	cmp	ip, r5
 8001b30:	4192      	sbcs	r2, r2
 8001b32:	4653      	mov	r3, sl
 8001b34:	4252      	negs	r2, r2
 8001b36:	1b1c      	subs	r4, r3, r4
 8001b38:	000e      	movs	r6, r1
 8001b3a:	4688      	mov	r8, r1
 8001b3c:	1aa4      	subs	r4, r4, r2
 8001b3e:	3701      	adds	r7, #1
 8001b40:	e555      	b.n	80015ee <__aeabi_dadd+0xa6>
 8001b42:	4663      	mov	r3, ip
 8001b44:	08d9      	lsrs	r1, r3, #3
 8001b46:	4653      	mov	r3, sl
 8001b48:	075a      	lsls	r2, r3, #29
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	08dc      	lsrs	r4, r3, #3
 8001b4e:	e6c9      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001b50:	4660      	mov	r0, ip
 8001b52:	4654      	mov	r4, sl
 8001b54:	e6d4      	b.n	8001900 <__aeabi_dadd+0x3b8>
 8001b56:	08c0      	lsrs	r0, r0, #3
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x616>
 8001b5c:	e6bf      	b.n	80018de <__aeabi_dadd+0x396>
 8001b5e:	0762      	lsls	r2, r4, #29
 8001b60:	4310      	orrs	r0, r2
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	08e4      	lsrs	r4, r4, #3
 8001b66:	0312      	lsls	r2, r2, #12
 8001b68:	4214      	tst	r4, r2
 8001b6a:	d0cd      	beq.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b6c:	08dd      	lsrs	r5, r3, #3
 8001b6e:	4215      	tst	r5, r2
 8001b70:	d1ca      	bne.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b72:	4663      	mov	r3, ip
 8001b74:	08d8      	lsrs	r0, r3, #3
 8001b76:	4653      	mov	r3, sl
 8001b78:	075b      	lsls	r3, r3, #29
 8001b7a:	000e      	movs	r6, r1
 8001b7c:	002c      	movs	r4, r5
 8001b7e:	4318      	orrs	r0, r3
 8001b80:	e7c2      	b.n	8001b08 <__aeabi_dadd+0x5c0>
 8001b82:	4663      	mov	r3, ip
 8001b84:	08d9      	lsrs	r1, r3, #3
 8001b86:	4653      	mov	r3, sl
 8001b88:	075a      	lsls	r2, r3, #29
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	08dc      	lsrs	r4, r3, #3
 8001b8e:	e699      	b.n	80018c4 <__aeabi_dadd+0x37c>
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	075a      	lsls	r2, r3, #29
 8001b98:	000e      	movs	r6, r1
 8001b9a:	4302      	orrs	r2, r0
 8001b9c:	08dc      	lsrs	r4, r3, #3
 8001b9e:	e6a1      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0027      	movs	r7, r4
 8001ba4:	3920      	subs	r1, #32
 8001ba6:	40cf      	lsrs	r7, r1
 8001ba8:	2a20      	cmp	r2, #32
 8001baa:	d003      	beq.n	8001bb4 <__aeabi_dadd+0x66c>
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	1a8a      	subs	r2, r1, r2
 8001bb0:	4094      	lsls	r4, r2
 8001bb2:	4320      	orrs	r0, r4
 8001bb4:	1e42      	subs	r2, r0, #1
 8001bb6:	4190      	sbcs	r0, r2
 8001bb8:	0005      	movs	r5, r0
 8001bba:	433d      	orrs	r5, r7
 8001bbc:	e651      	b.n	8001862 <__aeabi_dadd+0x31a>
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	e558      	b.n	8001678 <__aeabi_dadd+0x130>
 8001bc6:	4460      	add	r0, ip
 8001bc8:	4560      	cmp	r0, ip
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	4454      	add	r4, sl
 8001bce:	4252      	negs	r2, r2
 8001bd0:	0005      	movs	r5, r0
 8001bd2:	18a4      	adds	r4, r4, r2
 8001bd4:	e73a      	b.n	8001a4c <__aeabi_dadd+0x504>
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	075a      	lsls	r2, r3, #29
 8001bda:	4663      	mov	r3, ip
 8001bdc:	08d9      	lsrs	r1, r3, #3
 8001bde:	4653      	mov	r3, sl
 8001be0:	430a      	orrs	r2, r1
 8001be2:	08dc      	lsrs	r4, r3, #3
 8001be4:	e67e      	b.n	80018e4 <__aeabi_dadd+0x39c>
 8001be6:	001a      	movs	r2, r3
 8001be8:	001c      	movs	r4, r3
 8001bea:	432a      	orrs	r2, r5
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_dadd+0x6a8>
 8001bee:	e6ab      	b.n	8001948 <__aeabi_dadd+0x400>
 8001bf0:	e6c1      	b.n	8001976 <__aeabi_dadd+0x42e>
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	1a09      	subs	r1, r1, r0
 8001bf8:	e519      	b.n	800162e <__aeabi_dadd+0xe6>
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	4c01      	ldr	r4, [pc, #4]	@ (8001c04 <__aeabi_dadd+0x6bc>)
 8001c00:	e53a      	b.n	8001678 <__aeabi_dadd+0x130>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	000007ff 	.word	0x000007ff
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	000007fe 	.word	0x000007fe

08001c10 <__aeabi_ddiv>:
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	46de      	mov	lr, fp
 8001c14:	4645      	mov	r5, r8
 8001c16:	4657      	mov	r7, sl
 8001c18:	464e      	mov	r6, r9
 8001c1a:	b5e0      	push	{r5, r6, r7, lr}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	030b      	lsls	r3, r1, #12
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	469b      	mov	fp, r3
 8001c28:	0fca      	lsrs	r2, r1, #31
 8001c2a:	004b      	lsls	r3, r1, #1
 8001c2c:	0004      	movs	r4, r0
 8001c2e:	4680      	mov	r8, r0
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x28>
 8001c36:	e16a      	b.n	8001f0e <__aeabi_ddiv+0x2fe>
 8001c38:	4ad4      	ldr	r2, [pc, #848]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_ddiv+0x30>
 8001c3e:	e18c      	b.n	8001f5a <__aeabi_ddiv+0x34a>
 8001c40:	4659      	mov	r1, fp
 8001c42:	0f42      	lsrs	r2, r0, #29
 8001c44:	00c9      	lsls	r1, r1, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0409      	lsls	r1, r1, #16
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	00c2      	lsls	r2, r0, #3
 8001c50:	4690      	mov	r8, r2
 8001c52:	4acf      	ldr	r2, [pc, #828]	@ (8001f90 <__aeabi_ddiv+0x380>)
 8001c54:	4689      	mov	r9, r1
 8001c56:	4692      	mov	sl, r2
 8001c58:	449a      	add	sl, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	9e00      	ldr	r6, [sp, #0]
 8001c62:	9f01      	ldr	r7, [sp, #4]
 8001c64:	033b      	lsls	r3, r7, #12
 8001c66:	0b1b      	lsrs	r3, r3, #12
 8001c68:	469b      	mov	fp, r3
 8001c6a:	007b      	lsls	r3, r7, #1
 8001c6c:	0030      	movs	r0, r6
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	0ffd      	lsrs	r5, r7, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x68>
 8001c76:	e128      	b.n	8001eca <__aeabi_ddiv+0x2ba>
 8001c78:	4ac4      	ldr	r2, [pc, #784]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x70>
 8001c7e:	e177      	b.n	8001f70 <__aeabi_ddiv+0x360>
 8001c80:	4659      	mov	r1, fp
 8001c82:	0f72      	lsrs	r2, r6, #29
 8001c84:	00c9      	lsls	r1, r1, #3
 8001c86:	430a      	orrs	r2, r1
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	468b      	mov	fp, r1
 8001c90:	49bf      	ldr	r1, [pc, #764]	@ (8001f90 <__aeabi_ddiv+0x380>)
 8001c92:	00f2      	lsls	r2, r6, #3
 8001c94:	468c      	mov	ip, r1
 8001c96:	4651      	mov	r1, sl
 8001c98:	4463      	add	r3, ip
 8001c9a:	1acb      	subs	r3, r1, r3
 8001c9c:	469a      	mov	sl, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9e02      	ldr	r6, [sp, #8]
 8001ca2:	406e      	eors	r6, r5
 8001ca4:	2c0f      	cmp	r4, #15
 8001ca6:	d827      	bhi.n	8001cf8 <__aeabi_ddiv+0xe8>
 8001ca8:	49ba      	ldr	r1, [pc, #744]	@ (8001f94 <__aeabi_ddiv+0x384>)
 8001caa:	00a4      	lsls	r4, r4, #2
 8001cac:	5909      	ldr	r1, [r1, r4]
 8001cae:	468f      	mov	pc, r1
 8001cb0:	46cb      	mov	fp, r9
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	9e02      	ldr	r6, [sp, #8]
 8001cb6:	9b03      	ldr	r3, [sp, #12]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d016      	beq.n	8001cea <__aeabi_ddiv+0xda>
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0xb2>
 8001cc0:	e2a6      	b.n	8002210 <__aeabi_ddiv+0x600>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_ddiv+0xb8>
 8001cc6:	e0df      	b.n	8001e88 <__aeabi_ddiv+0x278>
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2400      	movs	r4, #0
 8001cce:	4690      	mov	r8, r2
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	07f6      	lsls	r6, r6, #31
 8001cd6:	4333      	orrs	r3, r6
 8001cd8:	4640      	mov	r0, r8
 8001cda:	0019      	movs	r1, r3
 8001cdc:	b007      	add	sp, #28
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	46bb      	mov	fp, r7
 8001ce2:	46b2      	mov	sl, r6
 8001ce4:	46a9      	mov	r9, r5
 8001ce6:	46a0      	mov	r8, r4
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cea:	2200      	movs	r2, #0
 8001cec:	2400      	movs	r4, #0
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f8c <__aeabi_ddiv+0x37c>)
 8001cf2:	e7ed      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001cf4:	002e      	movs	r6, r5
 8001cf6:	e7df      	b.n	8001cb8 <__aeabi_ddiv+0xa8>
 8001cf8:	45cb      	cmp	fp, r9
 8001cfa:	d200      	bcs.n	8001cfe <__aeabi_ddiv+0xee>
 8001cfc:	e1d4      	b.n	80020a8 <__aeabi_ddiv+0x498>
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0xf2>
 8001d00:	e1cf      	b.n	80020a2 <__aeabi_ddiv+0x492>
 8001d02:	2301      	movs	r3, #1
 8001d04:	425b      	negs	r3, r3
 8001d06:	469c      	mov	ip, r3
 8001d08:	4644      	mov	r4, r8
 8001d0a:	4648      	mov	r0, r9
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	44e2      	add	sl, ip
 8001d10:	465b      	mov	r3, fp
 8001d12:	0e15      	lsrs	r5, r2, #24
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	431d      	orrs	r5, r3
 8001d18:	0c19      	lsrs	r1, r3, #16
 8001d1a:	042b      	lsls	r3, r5, #16
 8001d1c:	0212      	lsls	r2, r2, #8
 8001d1e:	9500      	str	r5, [sp, #0]
 8001d20:	0c1d      	lsrs	r5, r3, #16
 8001d22:	4691      	mov	r9, r2
 8001d24:	9102      	str	r1, [sp, #8]
 8001d26:	9503      	str	r5, [sp, #12]
 8001d28:	f7fe fa84 	bl	8000234 <__aeabi_uidivmod>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	436a      	muls	r2, r5
 8001d30:	040b      	lsls	r3, r1, #16
 8001d32:	0c21      	lsrs	r1, r4, #16
 8001d34:	4680      	mov	r8, r0
 8001d36:	4319      	orrs	r1, r3
 8001d38:	428a      	cmp	r2, r1
 8001d3a:	d909      	bls.n	8001d50 <__aeabi_ddiv+0x140>
 8001d3c:	9d00      	ldr	r5, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	46ac      	mov	ip, r5
 8001d42:	425b      	negs	r3, r3
 8001d44:	4461      	add	r1, ip
 8001d46:	469c      	mov	ip, r3
 8001d48:	44e0      	add	r8, ip
 8001d4a:	428d      	cmp	r5, r1
 8001d4c:	d800      	bhi.n	8001d50 <__aeabi_ddiv+0x140>
 8001d4e:	e1fb      	b.n	8002148 <__aeabi_ddiv+0x538>
 8001d50:	1a88      	subs	r0, r1, r2
 8001d52:	9902      	ldr	r1, [sp, #8]
 8001d54:	f7fe fa6e 	bl	8000234 <__aeabi_uidivmod>
 8001d58:	9a03      	ldr	r2, [sp, #12]
 8001d5a:	0424      	lsls	r4, r4, #16
 8001d5c:	4342      	muls	r2, r0
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	0c24      	lsrs	r4, r4, #16
 8001d62:	0003      	movs	r3, r0
 8001d64:	430c      	orrs	r4, r1
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d906      	bls.n	8001d78 <__aeabi_ddiv+0x168>
 8001d6a:	9900      	ldr	r1, [sp, #0]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	468c      	mov	ip, r1
 8001d70:	4464      	add	r4, ip
 8001d72:	42a1      	cmp	r1, r4
 8001d74:	d800      	bhi.n	8001d78 <__aeabi_ddiv+0x168>
 8001d76:	e1e1      	b.n	800213c <__aeabi_ddiv+0x52c>
 8001d78:	1aa0      	subs	r0, r4, r2
 8001d7a:	4642      	mov	r2, r8
 8001d7c:	0412      	lsls	r2, r2, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	4693      	mov	fp, r2
 8001d82:	464b      	mov	r3, r9
 8001d84:	4659      	mov	r1, fp
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	001d      	movs	r5, r3
 8001d8a:	9304      	str	r3, [sp, #16]
 8001d8c:	040b      	lsls	r3, r1, #16
 8001d8e:	4649      	mov	r1, r9
 8001d90:	0409      	lsls	r1, r1, #16
 8001d92:	0c09      	lsrs	r1, r1, #16
 8001d94:	000c      	movs	r4, r1
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	435c      	muls	r4, r3
 8001d9a:	0c12      	lsrs	r2, r2, #16
 8001d9c:	436b      	muls	r3, r5
 8001d9e:	4688      	mov	r8, r1
 8001da0:	4351      	muls	r1, r2
 8001da2:	436a      	muls	r2, r5
 8001da4:	0c25      	lsrs	r5, r4, #16
 8001da6:	46ac      	mov	ip, r5
 8001da8:	185b      	adds	r3, r3, r1
 8001daa:	4463      	add	r3, ip
 8001dac:	4299      	cmp	r1, r3
 8001dae:	d903      	bls.n	8001db8 <__aeabi_ddiv+0x1a8>
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	0249      	lsls	r1, r1, #9
 8001db4:	468c      	mov	ip, r1
 8001db6:	4462      	add	r2, ip
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	0424      	lsls	r4, r4, #16
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	0c24      	lsrs	r4, r4, #16
 8001dc0:	188a      	adds	r2, r1, r2
 8001dc2:	191c      	adds	r4, r3, r4
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d302      	bcc.n	8001dce <__aeabi_ddiv+0x1be>
 8001dc8:	d116      	bne.n	8001df8 <__aeabi_ddiv+0x1e8>
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	d214      	bcs.n	8001df8 <__aeabi_ddiv+0x1e8>
 8001dce:	465b      	mov	r3, fp
 8001dd0:	9d00      	ldr	r5, [sp, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	444f      	add	r7, r9
 8001dd6:	9305      	str	r3, [sp, #20]
 8001dd8:	454f      	cmp	r7, r9
 8001dda:	419b      	sbcs	r3, r3
 8001ddc:	46ac      	mov	ip, r5
 8001dde:	425b      	negs	r3, r3
 8001de0:	4463      	add	r3, ip
 8001de2:	18c0      	adds	r0, r0, r3
 8001de4:	4285      	cmp	r5, r0
 8001de6:	d300      	bcc.n	8001dea <__aeabi_ddiv+0x1da>
 8001de8:	e1a1      	b.n	800212e <__aeabi_ddiv+0x51e>
 8001dea:	4282      	cmp	r2, r0
 8001dec:	d900      	bls.n	8001df0 <__aeabi_ddiv+0x1e0>
 8001dee:	e1f6      	b.n	80021de <__aeabi_ddiv+0x5ce>
 8001df0:	d100      	bne.n	8001df4 <__aeabi_ddiv+0x1e4>
 8001df2:	e1f1      	b.n	80021d8 <__aeabi_ddiv+0x5c8>
 8001df4:	9b05      	ldr	r3, [sp, #20]
 8001df6:	469b      	mov	fp, r3
 8001df8:	1b3c      	subs	r4, r7, r4
 8001dfa:	42a7      	cmp	r7, r4
 8001dfc:	41bf      	sbcs	r7, r7
 8001dfe:	9d00      	ldr	r5, [sp, #0]
 8001e00:	1a80      	subs	r0, r0, r2
 8001e02:	427f      	negs	r7, r7
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	4285      	cmp	r5, r0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_ddiv+0x1fc>
 8001e0a:	e1d0      	b.n	80021ae <__aeabi_ddiv+0x59e>
 8001e0c:	9902      	ldr	r1, [sp, #8]
 8001e0e:	f7fe fa11 	bl	8000234 <__aeabi_uidivmod>
 8001e12:	9a03      	ldr	r2, [sp, #12]
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	4342      	muls	r2, r0
 8001e18:	0c21      	lsrs	r1, r4, #16
 8001e1a:	0007      	movs	r7, r0
 8001e1c:	4319      	orrs	r1, r3
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x214>
 8001e22:	e178      	b.n	8002116 <__aeabi_ddiv+0x506>
 8001e24:	1a88      	subs	r0, r1, r2
 8001e26:	9902      	ldr	r1, [sp, #8]
 8001e28:	f7fe fa04 	bl	8000234 <__aeabi_uidivmod>
 8001e2c:	9a03      	ldr	r2, [sp, #12]
 8001e2e:	0424      	lsls	r4, r4, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0409      	lsls	r1, r1, #16
 8001e34:	0c24      	lsrs	r4, r4, #16
 8001e36:	0003      	movs	r3, r0
 8001e38:	430c      	orrs	r4, r1
 8001e3a:	42a2      	cmp	r2, r4
 8001e3c:	d900      	bls.n	8001e40 <__aeabi_ddiv+0x230>
 8001e3e:	e15d      	b.n	80020fc <__aeabi_ddiv+0x4ec>
 8001e40:	4641      	mov	r1, r8
 8001e42:	1aa4      	subs	r4, r4, r2
 8001e44:	043a      	lsls	r2, r7, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	9d04      	ldr	r5, [sp, #16]
 8001e4a:	0413      	lsls	r3, r2, #16
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	4359      	muls	r1, r3
 8001e50:	4647      	mov	r7, r8
 8001e52:	436b      	muls	r3, r5
 8001e54:	469c      	mov	ip, r3
 8001e56:	0c10      	lsrs	r0, r2, #16
 8001e58:	4347      	muls	r7, r0
 8001e5a:	0c0b      	lsrs	r3, r1, #16
 8001e5c:	44bc      	add	ip, r7
 8001e5e:	4463      	add	r3, ip
 8001e60:	4368      	muls	r0, r5
 8001e62:	429f      	cmp	r7, r3
 8001e64:	d903      	bls.n	8001e6e <__aeabi_ddiv+0x25e>
 8001e66:	2580      	movs	r5, #128	@ 0x80
 8001e68:	026d      	lsls	r5, r5, #9
 8001e6a:	46ac      	mov	ip, r5
 8001e6c:	4460      	add	r0, ip
 8001e6e:	0c1f      	lsrs	r7, r3, #16
 8001e70:	0409      	lsls	r1, r1, #16
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	0c09      	lsrs	r1, r1, #16
 8001e76:	183f      	adds	r7, r7, r0
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	42bc      	cmp	r4, r7
 8001e7c:	d200      	bcs.n	8001e80 <__aeabi_ddiv+0x270>
 8001e7e:	e102      	b.n	8002086 <__aeabi_ddiv+0x476>
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x274>
 8001e82:	e0fd      	b.n	8002080 <__aeabi_ddiv+0x470>
 8001e84:	2301      	movs	r3, #1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <__aeabi_ddiv+0x388>)
 8001e8a:	4453      	add	r3, sl
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_ddiv+0x282>
 8001e90:	e0ae      	b.n	8001ff0 <__aeabi_ddiv+0x3e0>
 8001e92:	0751      	lsls	r1, r2, #29
 8001e94:	d000      	beq.n	8001e98 <__aeabi_ddiv+0x288>
 8001e96:	e198      	b.n	80021ca <__aeabi_ddiv+0x5ba>
 8001e98:	4659      	mov	r1, fp
 8001e9a:	01c9      	lsls	r1, r1, #7
 8001e9c:	d506      	bpl.n	8001eac <__aeabi_ddiv+0x29c>
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <__aeabi_ddiv+0x38c>)
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	468b      	mov	fp, r1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4453      	add	r3, sl
 8001eac:	493c      	ldr	r1, [pc, #240]	@ (8001fa0 <__aeabi_ddiv+0x390>)
 8001eae:	428b      	cmp	r3, r1
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_ddiv+0x2a4>
 8001eb2:	e71a      	b.n	8001cea <__aeabi_ddiv+0xda>
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	08d2      	lsrs	r2, r2, #3
 8001eb8:	0749      	lsls	r1, r1, #29
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	465a      	mov	r2, fp
 8001ebe:	055b      	lsls	r3, r3, #21
 8001ec0:	0254      	lsls	r4, r2, #9
 8001ec2:	4688      	mov	r8, r1
 8001ec4:	0b24      	lsrs	r4, r4, #12
 8001ec6:	0d5b      	lsrs	r3, r3, #21
 8001ec8:	e702      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001eca:	465a      	mov	r2, fp
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x2c4>
 8001ed2:	e07e      	b.n	8001fd2 <__aeabi_ddiv+0x3c2>
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_ddiv+0x2cc>
 8001eda:	e100      	b.n	80020de <__aeabi_ddiv+0x4ce>
 8001edc:	4658      	mov	r0, fp
 8001ede:	f001 fa99 	bl	8003414 <__clzsi2>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	3a0b      	subs	r2, #11
 8001ee8:	271d      	movs	r7, #29
 8001eea:	9e00      	ldr	r6, [sp, #0]
 8001eec:	1aba      	subs	r2, r7, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	4658      	mov	r0, fp
 8001ef2:	40d6      	lsrs	r6, r2
 8001ef4:	3908      	subs	r1, #8
 8001ef6:	4088      	lsls	r0, r1
 8001ef8:	0032      	movs	r2, r6
 8001efa:	4302      	orrs	r2, r0
 8001efc:	4693      	mov	fp, r2
 8001efe:	9a00      	ldr	r2, [sp, #0]
 8001f00:	408a      	lsls	r2, r1
 8001f02:	4928      	ldr	r1, [pc, #160]	@ (8001fa4 <__aeabi_ddiv+0x394>)
 8001f04:	4453      	add	r3, sl
 8001f06:	468a      	mov	sl, r1
 8001f08:	449a      	add	sl, r3
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e6c8      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001f0e:	465b      	mov	r3, fp
 8001f10:	4303      	orrs	r3, r0
 8001f12:	4699      	mov	r9, r3
 8001f14:	d056      	beq.n	8001fc4 <__aeabi_ddiv+0x3b4>
 8001f16:	465b      	mov	r3, fp
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x30e>
 8001f1c:	e0cd      	b.n	80020ba <__aeabi_ddiv+0x4aa>
 8001f1e:	4658      	mov	r0, fp
 8001f20:	f001 fa78 	bl	8003414 <__clzsi2>
 8001f24:	230b      	movs	r3, #11
 8001f26:	425b      	negs	r3, r3
 8001f28:	469c      	mov	ip, r3
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	4484      	add	ip, r0
 8001f2e:	4666      	mov	r6, ip
 8001f30:	231d      	movs	r3, #29
 8001f32:	1b9b      	subs	r3, r3, r6
 8001f34:	0026      	movs	r6, r4
 8001f36:	0011      	movs	r1, r2
 8001f38:	4658      	mov	r0, fp
 8001f3a:	40de      	lsrs	r6, r3
 8001f3c:	3908      	subs	r1, #8
 8001f3e:	4088      	lsls	r0, r1
 8001f40:	0033      	movs	r3, r6
 8001f42:	4303      	orrs	r3, r0
 8001f44:	4699      	mov	r9, r3
 8001f46:	0023      	movs	r3, r4
 8001f48:	408b      	lsls	r3, r1
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <__aeabi_ddiv+0x398>)
 8001f4e:	2400      	movs	r4, #0
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	469a      	mov	sl, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	e682      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001f5a:	465a      	mov	r2, fp
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	4691      	mov	r9, r2
 8001f60:	d12a      	bne.n	8001fb8 <__aeabi_ddiv+0x3a8>
 8001f62:	2200      	movs	r2, #0
 8001f64:	469a      	mov	sl, r3
 8001f66:	2302      	movs	r3, #2
 8001f68:	4690      	mov	r8, r2
 8001f6a:	2408      	movs	r4, #8
 8001f6c:	9303      	str	r3, [sp, #12]
 8001f6e:	e677      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001f70:	465a      	mov	r2, fp
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <__aeabi_ddiv+0x39c>)
 8001f78:	469c      	mov	ip, r3
 8001f7a:	44e2      	add	sl, ip
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d117      	bne.n	8001fb0 <__aeabi_ddiv+0x3a0>
 8001f80:	2302      	movs	r3, #2
 8001f82:	431c      	orrs	r4, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	469b      	mov	fp, r3
 8001f88:	3302      	adds	r3, #2
 8001f8a:	e689      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001f8c:	000007ff 	.word	0x000007ff
 8001f90:	fffffc01 	.word	0xfffffc01
 8001f94:	08019fa8 	.word	0x08019fa8
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	feffffff 	.word	0xfeffffff
 8001fa0:	000007fe 	.word	0x000007fe
 8001fa4:	000003f3 	.word	0x000003f3
 8001fa8:	fffffc0d 	.word	0xfffffc0d
 8001fac:	fffff801 	.word	0xfffff801
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	0032      	movs	r2, r6
 8001fb4:	431c      	orrs	r4, r3
 8001fb6:	e673      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001fb8:	469a      	mov	sl, r3
 8001fba:	2303      	movs	r3, #3
 8001fbc:	46d9      	mov	r9, fp
 8001fbe:	240c      	movs	r4, #12
 8001fc0:	9303      	str	r3, [sp, #12]
 8001fc2:	e64d      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	469a      	mov	sl, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	2404      	movs	r4, #4
 8001fce:	9303      	str	r3, [sp, #12]
 8001fd0:	e646      	b.n	8001c60 <__aeabi_ddiv+0x50>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	431c      	orrs	r4, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	469b      	mov	fp, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	e660      	b.n	8001ca0 <__aeabi_ddiv+0x90>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2480      	movs	r4, #128	@ 0x80
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	4b92      	ldr	r3, [pc, #584]	@ (8002230 <__aeabi_ddiv+0x620>)
 8001fe8:	0324      	lsls	r4, r4, #12
 8001fea:	e671      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8001fec:	2201      	movs	r2, #1
 8001fee:	4252      	negs	r2, r2
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	1ac9      	subs	r1, r1, r3
 8001ff4:	2938      	cmp	r1, #56	@ 0x38
 8001ff6:	dd00      	ble.n	8001ffa <__aeabi_ddiv+0x3ea>
 8001ff8:	e666      	b.n	8001cc8 <__aeabi_ddiv+0xb8>
 8001ffa:	291f      	cmp	r1, #31
 8001ffc:	dc00      	bgt.n	8002000 <__aeabi_ddiv+0x3f0>
 8001ffe:	e0ab      	b.n	8002158 <__aeabi_ddiv+0x548>
 8002000:	201f      	movs	r0, #31
 8002002:	4240      	negs	r0, r0
 8002004:	1ac3      	subs	r3, r0, r3
 8002006:	4658      	mov	r0, fp
 8002008:	40d8      	lsrs	r0, r3
 800200a:	0003      	movs	r3, r0
 800200c:	2920      	cmp	r1, #32
 800200e:	d004      	beq.n	800201a <__aeabi_ddiv+0x40a>
 8002010:	4658      	mov	r0, fp
 8002012:	4988      	ldr	r1, [pc, #544]	@ (8002234 <__aeabi_ddiv+0x624>)
 8002014:	4451      	add	r1, sl
 8002016:	4088      	lsls	r0, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	1e51      	subs	r1, r2, #1
 800201c:	418a      	sbcs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	2307      	movs	r3, #7
 8002022:	0019      	movs	r1, r3
 8002024:	2400      	movs	r4, #0
 8002026:	4011      	ands	r1, r2
 8002028:	4213      	tst	r3, r2
 800202a:	d00c      	beq.n	8002046 <__aeabi_ddiv+0x436>
 800202c:	230f      	movs	r3, #15
 800202e:	4013      	ands	r3, r2
 8002030:	2b04      	cmp	r3, #4
 8002032:	d100      	bne.n	8002036 <__aeabi_ddiv+0x426>
 8002034:	e0f9      	b.n	800222a <__aeabi_ddiv+0x61a>
 8002036:	1d11      	adds	r1, r2, #4
 8002038:	4291      	cmp	r1, r2
 800203a:	419b      	sbcs	r3, r3
 800203c:	000a      	movs	r2, r1
 800203e:	425b      	negs	r3, r3
 8002040:	0759      	lsls	r1, r3, #29
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	0b1c      	lsrs	r4, r3, #12
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	430a      	orrs	r2, r1
 800204a:	4690      	mov	r8, r2
 800204c:	2300      	movs	r3, #0
 800204e:	e63f      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002050:	2480      	movs	r4, #128	@ 0x80
 8002052:	464b      	mov	r3, r9
 8002054:	0324      	lsls	r4, r4, #12
 8002056:	4223      	tst	r3, r4
 8002058:	d009      	beq.n	800206e <__aeabi_ddiv+0x45e>
 800205a:	465b      	mov	r3, fp
 800205c:	4223      	tst	r3, r4
 800205e:	d106      	bne.n	800206e <__aeabi_ddiv+0x45e>
 8002060:	431c      	orrs	r4, r3
 8002062:	0324      	lsls	r4, r4, #12
 8002064:	002e      	movs	r6, r5
 8002066:	4690      	mov	r8, r2
 8002068:	4b71      	ldr	r3, [pc, #452]	@ (8002230 <__aeabi_ddiv+0x620>)
 800206a:	0b24      	lsrs	r4, r4, #12
 800206c:	e630      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 800206e:	2480      	movs	r4, #128	@ 0x80
 8002070:	464b      	mov	r3, r9
 8002072:	0324      	lsls	r4, r4, #12
 8002074:	431c      	orrs	r4, r3
 8002076:	0324      	lsls	r4, r4, #12
 8002078:	9e02      	ldr	r6, [sp, #8]
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <__aeabi_ddiv+0x620>)
 800207c:	0b24      	lsrs	r4, r4, #12
 800207e:	e627      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d100      	bne.n	8002086 <__aeabi_ddiv+0x476>
 8002084:	e700      	b.n	8001e88 <__aeabi_ddiv+0x278>
 8002086:	9800      	ldr	r0, [sp, #0]
 8002088:	1e51      	subs	r1, r2, #1
 800208a:	4684      	mov	ip, r0
 800208c:	4464      	add	r4, ip
 800208e:	4284      	cmp	r4, r0
 8002090:	d200      	bcs.n	8002094 <__aeabi_ddiv+0x484>
 8002092:	e084      	b.n	800219e <__aeabi_ddiv+0x58e>
 8002094:	42bc      	cmp	r4, r7
 8002096:	d200      	bcs.n	800209a <__aeabi_ddiv+0x48a>
 8002098:	e0ae      	b.n	80021f8 <__aeabi_ddiv+0x5e8>
 800209a:	d100      	bne.n	800209e <__aeabi_ddiv+0x48e>
 800209c:	e0c1      	b.n	8002222 <__aeabi_ddiv+0x612>
 800209e:	000a      	movs	r2, r1
 80020a0:	e6f0      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80020a2:	4542      	cmp	r2, r8
 80020a4:	d900      	bls.n	80020a8 <__aeabi_ddiv+0x498>
 80020a6:	e62c      	b.n	8001d02 <__aeabi_ddiv+0xf2>
 80020a8:	464b      	mov	r3, r9
 80020aa:	07dc      	lsls	r4, r3, #31
 80020ac:	0858      	lsrs	r0, r3, #1
 80020ae:	4643      	mov	r3, r8
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	431c      	orrs	r4, r3
 80020b4:	4643      	mov	r3, r8
 80020b6:	07df      	lsls	r7, r3, #31
 80020b8:	e62a      	b.n	8001d10 <__aeabi_ddiv+0x100>
 80020ba:	f001 f9ab 	bl	8003414 <__clzsi2>
 80020be:	2315      	movs	r3, #21
 80020c0:	469c      	mov	ip, r3
 80020c2:	4484      	add	ip, r0
 80020c4:	0002      	movs	r2, r0
 80020c6:	4663      	mov	r3, ip
 80020c8:	3220      	adds	r2, #32
 80020ca:	2b1c      	cmp	r3, #28
 80020cc:	dc00      	bgt.n	80020d0 <__aeabi_ddiv+0x4c0>
 80020ce:	e72e      	b.n	8001f2e <__aeabi_ddiv+0x31e>
 80020d0:	0023      	movs	r3, r4
 80020d2:	3808      	subs	r0, #8
 80020d4:	4083      	lsls	r3, r0
 80020d6:	4699      	mov	r9, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	4698      	mov	r8, r3
 80020dc:	e736      	b.n	8001f4c <__aeabi_ddiv+0x33c>
 80020de:	f001 f999 	bl	8003414 <__clzsi2>
 80020e2:	0002      	movs	r2, r0
 80020e4:	0003      	movs	r3, r0
 80020e6:	3215      	adds	r2, #21
 80020e8:	3320      	adds	r3, #32
 80020ea:	2a1c      	cmp	r2, #28
 80020ec:	dc00      	bgt.n	80020f0 <__aeabi_ddiv+0x4e0>
 80020ee:	e6fb      	b.n	8001ee8 <__aeabi_ddiv+0x2d8>
 80020f0:	9900      	ldr	r1, [sp, #0]
 80020f2:	3808      	subs	r0, #8
 80020f4:	4081      	lsls	r1, r0
 80020f6:	2200      	movs	r2, #0
 80020f8:	468b      	mov	fp, r1
 80020fa:	e702      	b.n	8001f02 <__aeabi_ddiv+0x2f2>
 80020fc:	9900      	ldr	r1, [sp, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	468c      	mov	ip, r1
 8002102:	4464      	add	r4, ip
 8002104:	42a1      	cmp	r1, r4
 8002106:	d900      	bls.n	800210a <__aeabi_ddiv+0x4fa>
 8002108:	e69a      	b.n	8001e40 <__aeabi_ddiv+0x230>
 800210a:	42a2      	cmp	r2, r4
 800210c:	d800      	bhi.n	8002110 <__aeabi_ddiv+0x500>
 800210e:	e697      	b.n	8001e40 <__aeabi_ddiv+0x230>
 8002110:	1e83      	subs	r3, r0, #2
 8002112:	4464      	add	r4, ip
 8002114:	e694      	b.n	8001e40 <__aeabi_ddiv+0x230>
 8002116:	46ac      	mov	ip, r5
 8002118:	4461      	add	r1, ip
 800211a:	3f01      	subs	r7, #1
 800211c:	428d      	cmp	r5, r1
 800211e:	d900      	bls.n	8002122 <__aeabi_ddiv+0x512>
 8002120:	e680      	b.n	8001e24 <__aeabi_ddiv+0x214>
 8002122:	428a      	cmp	r2, r1
 8002124:	d800      	bhi.n	8002128 <__aeabi_ddiv+0x518>
 8002126:	e67d      	b.n	8001e24 <__aeabi_ddiv+0x214>
 8002128:	1e87      	subs	r7, r0, #2
 800212a:	4461      	add	r1, ip
 800212c:	e67a      	b.n	8001e24 <__aeabi_ddiv+0x214>
 800212e:	4285      	cmp	r5, r0
 8002130:	d000      	beq.n	8002134 <__aeabi_ddiv+0x524>
 8002132:	e65f      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 8002134:	45b9      	cmp	r9, r7
 8002136:	d900      	bls.n	800213a <__aeabi_ddiv+0x52a>
 8002138:	e65c      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 800213a:	e656      	b.n	8001dea <__aeabi_ddiv+0x1da>
 800213c:	42a2      	cmp	r2, r4
 800213e:	d800      	bhi.n	8002142 <__aeabi_ddiv+0x532>
 8002140:	e61a      	b.n	8001d78 <__aeabi_ddiv+0x168>
 8002142:	1e83      	subs	r3, r0, #2
 8002144:	4464      	add	r4, ip
 8002146:	e617      	b.n	8001d78 <__aeabi_ddiv+0x168>
 8002148:	428a      	cmp	r2, r1
 800214a:	d800      	bhi.n	800214e <__aeabi_ddiv+0x53e>
 800214c:	e600      	b.n	8001d50 <__aeabi_ddiv+0x140>
 800214e:	46ac      	mov	ip, r5
 8002150:	1e83      	subs	r3, r0, #2
 8002152:	4698      	mov	r8, r3
 8002154:	4461      	add	r1, ip
 8002156:	e5fb      	b.n	8001d50 <__aeabi_ddiv+0x140>
 8002158:	4837      	ldr	r0, [pc, #220]	@ (8002238 <__aeabi_ddiv+0x628>)
 800215a:	0014      	movs	r4, r2
 800215c:	4450      	add	r0, sl
 800215e:	4082      	lsls	r2, r0
 8002160:	465b      	mov	r3, fp
 8002162:	0017      	movs	r7, r2
 8002164:	4083      	lsls	r3, r0
 8002166:	40cc      	lsrs	r4, r1
 8002168:	1e7a      	subs	r2, r7, #1
 800216a:	4197      	sbcs	r7, r2
 800216c:	4323      	orrs	r3, r4
 800216e:	433b      	orrs	r3, r7
 8002170:	001a      	movs	r2, r3
 8002172:	465b      	mov	r3, fp
 8002174:	40cb      	lsrs	r3, r1
 8002176:	0751      	lsls	r1, r2, #29
 8002178:	d009      	beq.n	800218e <__aeabi_ddiv+0x57e>
 800217a:	210f      	movs	r1, #15
 800217c:	4011      	ands	r1, r2
 800217e:	2904      	cmp	r1, #4
 8002180:	d005      	beq.n	800218e <__aeabi_ddiv+0x57e>
 8002182:	1d11      	adds	r1, r2, #4
 8002184:	4291      	cmp	r1, r2
 8002186:	4192      	sbcs	r2, r2
 8002188:	4252      	negs	r2, r2
 800218a:	189b      	adds	r3, r3, r2
 800218c:	000a      	movs	r2, r1
 800218e:	0219      	lsls	r1, r3, #8
 8002190:	d400      	bmi.n	8002194 <__aeabi_ddiv+0x584>
 8002192:	e755      	b.n	8002040 <__aeabi_ddiv+0x430>
 8002194:	2200      	movs	r2, #0
 8002196:	2301      	movs	r3, #1
 8002198:	2400      	movs	r4, #0
 800219a:	4690      	mov	r8, r2
 800219c:	e598      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 800219e:	000a      	movs	r2, r1
 80021a0:	42bc      	cmp	r4, r7
 80021a2:	d000      	beq.n	80021a6 <__aeabi_ddiv+0x596>
 80021a4:	e66e      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80021a6:	454b      	cmp	r3, r9
 80021a8:	d000      	beq.n	80021ac <__aeabi_ddiv+0x59c>
 80021aa:	e66b      	b.n	8001e84 <__aeabi_ddiv+0x274>
 80021ac:	e66c      	b.n	8001e88 <__aeabi_ddiv+0x278>
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <__aeabi_ddiv+0x62c>)
 80021b0:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <__aeabi_ddiv+0x630>)
 80021b2:	4453      	add	r3, sl
 80021b4:	4592      	cmp	sl, r2
 80021b6:	da00      	bge.n	80021ba <__aeabi_ddiv+0x5aa>
 80021b8:	e718      	b.n	8001fec <__aeabi_ddiv+0x3dc>
 80021ba:	2101      	movs	r1, #1
 80021bc:	4249      	negs	r1, r1
 80021be:	1d0a      	adds	r2, r1, #4
 80021c0:	428a      	cmp	r2, r1
 80021c2:	4189      	sbcs	r1, r1
 80021c4:	4249      	negs	r1, r1
 80021c6:	448b      	add	fp, r1
 80021c8:	e666      	b.n	8001e98 <__aeabi_ddiv+0x288>
 80021ca:	210f      	movs	r1, #15
 80021cc:	4011      	ands	r1, r2
 80021ce:	2904      	cmp	r1, #4
 80021d0:	d100      	bne.n	80021d4 <__aeabi_ddiv+0x5c4>
 80021d2:	e661      	b.n	8001e98 <__aeabi_ddiv+0x288>
 80021d4:	0011      	movs	r1, r2
 80021d6:	e7f2      	b.n	80021be <__aeabi_ddiv+0x5ae>
 80021d8:	42bc      	cmp	r4, r7
 80021da:	d800      	bhi.n	80021de <__aeabi_ddiv+0x5ce>
 80021dc:	e60a      	b.n	8001df4 <__aeabi_ddiv+0x1e4>
 80021de:	2302      	movs	r3, #2
 80021e0:	425b      	negs	r3, r3
 80021e2:	469c      	mov	ip, r3
 80021e4:	9900      	ldr	r1, [sp, #0]
 80021e6:	444f      	add	r7, r9
 80021e8:	454f      	cmp	r7, r9
 80021ea:	419b      	sbcs	r3, r3
 80021ec:	44e3      	add	fp, ip
 80021ee:	468c      	mov	ip, r1
 80021f0:	425b      	negs	r3, r3
 80021f2:	4463      	add	r3, ip
 80021f4:	18c0      	adds	r0, r0, r3
 80021f6:	e5ff      	b.n	8001df8 <__aeabi_ddiv+0x1e8>
 80021f8:	4649      	mov	r1, r9
 80021fa:	9d00      	ldr	r5, [sp, #0]
 80021fc:	0048      	lsls	r0, r1, #1
 80021fe:	4548      	cmp	r0, r9
 8002200:	4189      	sbcs	r1, r1
 8002202:	46ac      	mov	ip, r5
 8002204:	4249      	negs	r1, r1
 8002206:	4461      	add	r1, ip
 8002208:	4681      	mov	r9, r0
 800220a:	3a02      	subs	r2, #2
 800220c:	1864      	adds	r4, r4, r1
 800220e:	e7c7      	b.n	80021a0 <__aeabi_ddiv+0x590>
 8002210:	2480      	movs	r4, #128	@ 0x80
 8002212:	465b      	mov	r3, fp
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	431c      	orrs	r4, r3
 8002218:	0324      	lsls	r4, r4, #12
 800221a:	4690      	mov	r8, r2
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__aeabi_ddiv+0x620>)
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	e556      	b.n	8001cd0 <__aeabi_ddiv+0xc0>
 8002222:	4599      	cmp	r9, r3
 8002224:	d3e8      	bcc.n	80021f8 <__aeabi_ddiv+0x5e8>
 8002226:	000a      	movs	r2, r1
 8002228:	e7bd      	b.n	80021a6 <__aeabi_ddiv+0x596>
 800222a:	2300      	movs	r3, #0
 800222c:	e708      	b.n	8002040 <__aeabi_ddiv+0x430>
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	000007ff 	.word	0x000007ff
 8002234:	0000043e 	.word	0x0000043e
 8002238:	0000041e 	.word	0x0000041e
 800223c:	000003ff 	.word	0x000003ff
 8002240:	fffffc02 	.word	0xfffffc02

08002244 <__eqdf2>:
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	4657      	mov	r7, sl
 8002248:	46de      	mov	lr, fp
 800224a:	464e      	mov	r6, r9
 800224c:	4645      	mov	r5, r8
 800224e:	b5e0      	push	{r5, r6, r7, lr}
 8002250:	000d      	movs	r5, r1
 8002252:	0004      	movs	r4, r0
 8002254:	0fe8      	lsrs	r0, r5, #31
 8002256:	4683      	mov	fp, r0
 8002258:	0309      	lsls	r1, r1, #12
 800225a:	0fd8      	lsrs	r0, r3, #31
 800225c:	0b09      	lsrs	r1, r1, #12
 800225e:	4682      	mov	sl, r0
 8002260:	4819      	ldr	r0, [pc, #100]	@ (80022c8 <__eqdf2+0x84>)
 8002262:	468c      	mov	ip, r1
 8002264:	031f      	lsls	r7, r3, #12
 8002266:	0069      	lsls	r1, r5, #1
 8002268:	005e      	lsls	r6, r3, #1
 800226a:	0d49      	lsrs	r1, r1, #21
 800226c:	0b3f      	lsrs	r7, r7, #12
 800226e:	0d76      	lsrs	r6, r6, #21
 8002270:	4281      	cmp	r1, r0
 8002272:	d018      	beq.n	80022a6 <__eqdf2+0x62>
 8002274:	4286      	cmp	r6, r0
 8002276:	d00f      	beq.n	8002298 <__eqdf2+0x54>
 8002278:	2001      	movs	r0, #1
 800227a:	42b1      	cmp	r1, r6
 800227c:	d10d      	bne.n	800229a <__eqdf2+0x56>
 800227e:	45bc      	cmp	ip, r7
 8002280:	d10b      	bne.n	800229a <__eqdf2+0x56>
 8002282:	4294      	cmp	r4, r2
 8002284:	d109      	bne.n	800229a <__eqdf2+0x56>
 8002286:	45d3      	cmp	fp, sl
 8002288:	d01c      	beq.n	80022c4 <__eqdf2+0x80>
 800228a:	2900      	cmp	r1, #0
 800228c:	d105      	bne.n	800229a <__eqdf2+0x56>
 800228e:	4660      	mov	r0, ip
 8002290:	4320      	orrs	r0, r4
 8002292:	1e43      	subs	r3, r0, #1
 8002294:	4198      	sbcs	r0, r3
 8002296:	e000      	b.n	800229a <__eqdf2+0x56>
 8002298:	2001      	movs	r0, #1
 800229a:	bcf0      	pop	{r4, r5, r6, r7}
 800229c:	46bb      	mov	fp, r7
 800229e:	46b2      	mov	sl, r6
 80022a0:	46a9      	mov	r9, r5
 80022a2:	46a0      	mov	r8, r4
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	2001      	movs	r0, #1
 80022a8:	428e      	cmp	r6, r1
 80022aa:	d1f6      	bne.n	800229a <__eqdf2+0x56>
 80022ac:	4661      	mov	r1, ip
 80022ae:	4339      	orrs	r1, r7
 80022b0:	000f      	movs	r7, r1
 80022b2:	4317      	orrs	r7, r2
 80022b4:	4327      	orrs	r7, r4
 80022b6:	d1f0      	bne.n	800229a <__eqdf2+0x56>
 80022b8:	465b      	mov	r3, fp
 80022ba:	4652      	mov	r2, sl
 80022bc:	1a98      	subs	r0, r3, r2
 80022be:	1e43      	subs	r3, r0, #1
 80022c0:	4198      	sbcs	r0, r3
 80022c2:	e7ea      	b.n	800229a <__eqdf2+0x56>
 80022c4:	2000      	movs	r0, #0
 80022c6:	e7e8      	b.n	800229a <__eqdf2+0x56>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__gedf2>:
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	4657      	mov	r7, sl
 80022d0:	464e      	mov	r6, r9
 80022d2:	4645      	mov	r5, r8
 80022d4:	46de      	mov	lr, fp
 80022d6:	b5e0      	push	{r5, r6, r7, lr}
 80022d8:	000d      	movs	r5, r1
 80022da:	030f      	lsls	r7, r1, #12
 80022dc:	0b39      	lsrs	r1, r7, #12
 80022de:	b083      	sub	sp, #12
 80022e0:	0004      	movs	r4, r0
 80022e2:	4680      	mov	r8, r0
 80022e4:	9101      	str	r1, [sp, #4]
 80022e6:	0058      	lsls	r0, r3, #1
 80022e8:	0fe9      	lsrs	r1, r5, #31
 80022ea:	4f31      	ldr	r7, [pc, #196]	@ (80023b0 <__gedf2+0xe4>)
 80022ec:	0d40      	lsrs	r0, r0, #21
 80022ee:	468c      	mov	ip, r1
 80022f0:	006e      	lsls	r6, r5, #1
 80022f2:	0319      	lsls	r1, r3, #12
 80022f4:	4682      	mov	sl, r0
 80022f6:	4691      	mov	r9, r2
 80022f8:	0d76      	lsrs	r6, r6, #21
 80022fa:	0b09      	lsrs	r1, r1, #12
 80022fc:	0fd8      	lsrs	r0, r3, #31
 80022fe:	42be      	cmp	r6, r7
 8002300:	d01f      	beq.n	8002342 <__gedf2+0x76>
 8002302:	45ba      	cmp	sl, r7
 8002304:	d00f      	beq.n	8002326 <__gedf2+0x5a>
 8002306:	2e00      	cmp	r6, #0
 8002308:	d12f      	bne.n	800236a <__gedf2+0x9e>
 800230a:	4655      	mov	r5, sl
 800230c:	9e01      	ldr	r6, [sp, #4]
 800230e:	4334      	orrs	r4, r6
 8002310:	2d00      	cmp	r5, #0
 8002312:	d127      	bne.n	8002364 <__gedf2+0x98>
 8002314:	430a      	orrs	r2, r1
 8002316:	d03a      	beq.n	800238e <__gedf2+0xc2>
 8002318:	2c00      	cmp	r4, #0
 800231a:	d145      	bne.n	80023a8 <__gedf2+0xdc>
 800231c:	2800      	cmp	r0, #0
 800231e:	d11a      	bne.n	8002356 <__gedf2+0x8a>
 8002320:	2001      	movs	r0, #1
 8002322:	4240      	negs	r0, r0
 8002324:	e017      	b.n	8002356 <__gedf2+0x8a>
 8002326:	4311      	orrs	r1, r2
 8002328:	d13b      	bne.n	80023a2 <__gedf2+0xd6>
 800232a:	2e00      	cmp	r6, #0
 800232c:	d102      	bne.n	8002334 <__gedf2+0x68>
 800232e:	9f01      	ldr	r7, [sp, #4]
 8002330:	4327      	orrs	r7, r4
 8002332:	d0f3      	beq.n	800231c <__gedf2+0x50>
 8002334:	4584      	cmp	ip, r0
 8002336:	d109      	bne.n	800234c <__gedf2+0x80>
 8002338:	4663      	mov	r3, ip
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <__gedf2+0x54>
 800233e:	4660      	mov	r0, ip
 8002340:	e009      	b.n	8002356 <__gedf2+0x8a>
 8002342:	9f01      	ldr	r7, [sp, #4]
 8002344:	4327      	orrs	r7, r4
 8002346:	d12c      	bne.n	80023a2 <__gedf2+0xd6>
 8002348:	45b2      	cmp	sl, r6
 800234a:	d024      	beq.n	8002396 <__gedf2+0xca>
 800234c:	4663      	mov	r3, ip
 800234e:	2002      	movs	r0, #2
 8002350:	3b01      	subs	r3, #1
 8002352:	4018      	ands	r0, r3
 8002354:	3801      	subs	r0, #1
 8002356:	b003      	add	sp, #12
 8002358:	bcf0      	pop	{r4, r5, r6, r7}
 800235a:	46bb      	mov	fp, r7
 800235c:	46b2      	mov	sl, r6
 800235e:	46a9      	mov	r9, r5
 8002360:	46a0      	mov	r8, r4
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	2c00      	cmp	r4, #0
 8002366:	d0d9      	beq.n	800231c <__gedf2+0x50>
 8002368:	e7e4      	b.n	8002334 <__gedf2+0x68>
 800236a:	4654      	mov	r4, sl
 800236c:	2c00      	cmp	r4, #0
 800236e:	d0ed      	beq.n	800234c <__gedf2+0x80>
 8002370:	4584      	cmp	ip, r0
 8002372:	d1eb      	bne.n	800234c <__gedf2+0x80>
 8002374:	4556      	cmp	r6, sl
 8002376:	dce9      	bgt.n	800234c <__gedf2+0x80>
 8002378:	dbde      	blt.n	8002338 <__gedf2+0x6c>
 800237a:	9b01      	ldr	r3, [sp, #4]
 800237c:	428b      	cmp	r3, r1
 800237e:	d8e5      	bhi.n	800234c <__gedf2+0x80>
 8002380:	d1da      	bne.n	8002338 <__gedf2+0x6c>
 8002382:	45c8      	cmp	r8, r9
 8002384:	d8e2      	bhi.n	800234c <__gedf2+0x80>
 8002386:	2000      	movs	r0, #0
 8002388:	45c8      	cmp	r8, r9
 800238a:	d2e4      	bcs.n	8002356 <__gedf2+0x8a>
 800238c:	e7d4      	b.n	8002338 <__gedf2+0x6c>
 800238e:	2000      	movs	r0, #0
 8002390:	2c00      	cmp	r4, #0
 8002392:	d0e0      	beq.n	8002356 <__gedf2+0x8a>
 8002394:	e7da      	b.n	800234c <__gedf2+0x80>
 8002396:	4311      	orrs	r1, r2
 8002398:	d103      	bne.n	80023a2 <__gedf2+0xd6>
 800239a:	4584      	cmp	ip, r0
 800239c:	d1d6      	bne.n	800234c <__gedf2+0x80>
 800239e:	2000      	movs	r0, #0
 80023a0:	e7d9      	b.n	8002356 <__gedf2+0x8a>
 80023a2:	2002      	movs	r0, #2
 80023a4:	4240      	negs	r0, r0
 80023a6:	e7d6      	b.n	8002356 <__gedf2+0x8a>
 80023a8:	4584      	cmp	ip, r0
 80023aa:	d0e6      	beq.n	800237a <__gedf2+0xae>
 80023ac:	e7ce      	b.n	800234c <__gedf2+0x80>
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	000007ff 	.word	0x000007ff

080023b4 <__ledf2>:
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	4657      	mov	r7, sl
 80023b8:	464e      	mov	r6, r9
 80023ba:	4645      	mov	r5, r8
 80023bc:	46de      	mov	lr, fp
 80023be:	b5e0      	push	{r5, r6, r7, lr}
 80023c0:	000d      	movs	r5, r1
 80023c2:	030f      	lsls	r7, r1, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	0fe8      	lsrs	r0, r5, #31
 80023ca:	0b39      	lsrs	r1, r7, #12
 80023cc:	4684      	mov	ip, r0
 80023ce:	b083      	sub	sp, #12
 80023d0:	0058      	lsls	r0, r3, #1
 80023d2:	4f30      	ldr	r7, [pc, #192]	@ (8002494 <__ledf2+0xe0>)
 80023d4:	0d40      	lsrs	r0, r0, #21
 80023d6:	9101      	str	r1, [sp, #4]
 80023d8:	031e      	lsls	r6, r3, #12
 80023da:	0069      	lsls	r1, r5, #1
 80023dc:	4682      	mov	sl, r0
 80023de:	4691      	mov	r9, r2
 80023e0:	0d49      	lsrs	r1, r1, #21
 80023e2:	0b36      	lsrs	r6, r6, #12
 80023e4:	0fd8      	lsrs	r0, r3, #31
 80023e6:	42b9      	cmp	r1, r7
 80023e8:	d020      	beq.n	800242c <__ledf2+0x78>
 80023ea:	45ba      	cmp	sl, r7
 80023ec:	d00f      	beq.n	800240e <__ledf2+0x5a>
 80023ee:	2900      	cmp	r1, #0
 80023f0:	d12b      	bne.n	800244a <__ledf2+0x96>
 80023f2:	9901      	ldr	r1, [sp, #4]
 80023f4:	430c      	orrs	r4, r1
 80023f6:	4651      	mov	r1, sl
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d137      	bne.n	800246c <__ledf2+0xb8>
 80023fc:	4332      	orrs	r2, r6
 80023fe:	d038      	beq.n	8002472 <__ledf2+0xbe>
 8002400:	2c00      	cmp	r4, #0
 8002402:	d144      	bne.n	800248e <__ledf2+0xda>
 8002404:	2800      	cmp	r0, #0
 8002406:	d119      	bne.n	800243c <__ledf2+0x88>
 8002408:	2001      	movs	r0, #1
 800240a:	4240      	negs	r0, r0
 800240c:	e016      	b.n	800243c <__ledf2+0x88>
 800240e:	4316      	orrs	r6, r2
 8002410:	d113      	bne.n	800243a <__ledf2+0x86>
 8002412:	2900      	cmp	r1, #0
 8002414:	d102      	bne.n	800241c <__ledf2+0x68>
 8002416:	9f01      	ldr	r7, [sp, #4]
 8002418:	4327      	orrs	r7, r4
 800241a:	d0f3      	beq.n	8002404 <__ledf2+0x50>
 800241c:	4584      	cmp	ip, r0
 800241e:	d020      	beq.n	8002462 <__ledf2+0xae>
 8002420:	4663      	mov	r3, ip
 8002422:	2002      	movs	r0, #2
 8002424:	3b01      	subs	r3, #1
 8002426:	4018      	ands	r0, r3
 8002428:	3801      	subs	r0, #1
 800242a:	e007      	b.n	800243c <__ledf2+0x88>
 800242c:	9f01      	ldr	r7, [sp, #4]
 800242e:	4327      	orrs	r7, r4
 8002430:	d103      	bne.n	800243a <__ledf2+0x86>
 8002432:	458a      	cmp	sl, r1
 8002434:	d1f4      	bne.n	8002420 <__ledf2+0x6c>
 8002436:	4316      	orrs	r6, r2
 8002438:	d01f      	beq.n	800247a <__ledf2+0xc6>
 800243a:	2002      	movs	r0, #2
 800243c:	b003      	add	sp, #12
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	4654      	mov	r4, sl
 800244c:	2c00      	cmp	r4, #0
 800244e:	d0e7      	beq.n	8002420 <__ledf2+0x6c>
 8002450:	4584      	cmp	ip, r0
 8002452:	d1e5      	bne.n	8002420 <__ledf2+0x6c>
 8002454:	4551      	cmp	r1, sl
 8002456:	dce3      	bgt.n	8002420 <__ledf2+0x6c>
 8002458:	db03      	blt.n	8002462 <__ledf2+0xae>
 800245a:	9b01      	ldr	r3, [sp, #4]
 800245c:	42b3      	cmp	r3, r6
 800245e:	d8df      	bhi.n	8002420 <__ledf2+0x6c>
 8002460:	d00f      	beq.n	8002482 <__ledf2+0xce>
 8002462:	4663      	mov	r3, ip
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0cf      	beq.n	8002408 <__ledf2+0x54>
 8002468:	4660      	mov	r0, ip
 800246a:	e7e7      	b.n	800243c <__ledf2+0x88>
 800246c:	2c00      	cmp	r4, #0
 800246e:	d0c9      	beq.n	8002404 <__ledf2+0x50>
 8002470:	e7d4      	b.n	800241c <__ledf2+0x68>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e1      	beq.n	800243c <__ledf2+0x88>
 8002478:	e7d2      	b.n	8002420 <__ledf2+0x6c>
 800247a:	4584      	cmp	ip, r0
 800247c:	d1d0      	bne.n	8002420 <__ledf2+0x6c>
 800247e:	2000      	movs	r0, #0
 8002480:	e7dc      	b.n	800243c <__ledf2+0x88>
 8002482:	45c8      	cmp	r8, r9
 8002484:	d8cc      	bhi.n	8002420 <__ledf2+0x6c>
 8002486:	2000      	movs	r0, #0
 8002488:	45c8      	cmp	r8, r9
 800248a:	d2d7      	bcs.n	800243c <__ledf2+0x88>
 800248c:	e7e9      	b.n	8002462 <__ledf2+0xae>
 800248e:	4584      	cmp	ip, r0
 8002490:	d0e3      	beq.n	800245a <__ledf2+0xa6>
 8002492:	e7c5      	b.n	8002420 <__ledf2+0x6c>
 8002494:	000007ff 	.word	0x000007ff

08002498 <__aeabi_dmul>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	46de      	mov	lr, fp
 800249e:	464e      	mov	r6, r9
 80024a0:	4645      	mov	r5, r8
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	001f      	movs	r7, r3
 80024a6:	030b      	lsls	r3, r1, #12
 80024a8:	0b1b      	lsrs	r3, r3, #12
 80024aa:	0016      	movs	r6, r2
 80024ac:	469a      	mov	sl, r3
 80024ae:	0fca      	lsrs	r2, r1, #31
 80024b0:	004b      	lsls	r3, r1, #1
 80024b2:	0004      	movs	r4, r0
 80024b4:	4693      	mov	fp, r2
 80024b6:	b087      	sub	sp, #28
 80024b8:	0d5b      	lsrs	r3, r3, #21
 80024ba:	d100      	bne.n	80024be <__aeabi_dmul+0x26>
 80024bc:	e0d5      	b.n	800266a <__aeabi_dmul+0x1d2>
 80024be:	4abb      	ldr	r2, [pc, #748]	@ (80027ac <__aeabi_dmul+0x314>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dmul+0x2e>
 80024c4:	e0f8      	b.n	80026b8 <__aeabi_dmul+0x220>
 80024c6:	4651      	mov	r1, sl
 80024c8:	0f42      	lsrs	r2, r0, #29
 80024ca:	00c9      	lsls	r1, r1, #3
 80024cc:	430a      	orrs	r2, r1
 80024ce:	2180      	movs	r1, #128	@ 0x80
 80024d0:	0409      	lsls	r1, r1, #16
 80024d2:	4311      	orrs	r1, r2
 80024d4:	00c2      	lsls	r2, r0, #3
 80024d6:	4691      	mov	r9, r2
 80024d8:	4ab5      	ldr	r2, [pc, #724]	@ (80027b0 <__aeabi_dmul+0x318>)
 80024da:	468a      	mov	sl, r1
 80024dc:	189d      	adds	r5, r3, r2
 80024de:	2300      	movs	r3, #0
 80024e0:	4698      	mov	r8, r3
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	033c      	lsls	r4, r7, #12
 80024e6:	007b      	lsls	r3, r7, #1
 80024e8:	0ffa      	lsrs	r2, r7, #31
 80024ea:	0030      	movs	r0, r6
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	0d5b      	lsrs	r3, r3, #21
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x5e>
 80024f4:	e096      	b.n	8002624 <__aeabi_dmul+0x18c>
 80024f6:	4aad      	ldr	r2, [pc, #692]	@ (80027ac <__aeabi_dmul+0x314>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <__aeabi_dmul+0xc8>
 80024fc:	0f72      	lsrs	r2, r6, #29
 80024fe:	00e4      	lsls	r4, r4, #3
 8002500:	4322      	orrs	r2, r4
 8002502:	2480      	movs	r4, #128	@ 0x80
 8002504:	0424      	lsls	r4, r4, #16
 8002506:	4314      	orrs	r4, r2
 8002508:	4aa9      	ldr	r2, [pc, #676]	@ (80027b0 <__aeabi_dmul+0x318>)
 800250a:	00f0      	lsls	r0, r6, #3
 800250c:	4694      	mov	ip, r2
 800250e:	4463      	add	r3, ip
 8002510:	195b      	adds	r3, r3, r5
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	4642      	mov	r2, r8
 8002518:	2600      	movs	r6, #0
 800251a:	2a0a      	cmp	r2, #10
 800251c:	dc42      	bgt.n	80025a4 <__aeabi_dmul+0x10c>
 800251e:	465a      	mov	r2, fp
 8002520:	9900      	ldr	r1, [sp, #0]
 8002522:	404a      	eors	r2, r1
 8002524:	4693      	mov	fp, r2
 8002526:	4642      	mov	r2, r8
 8002528:	2a02      	cmp	r2, #2
 800252a:	dc32      	bgt.n	8002592 <__aeabi_dmul+0xfa>
 800252c:	3a01      	subs	r2, #1
 800252e:	2a01      	cmp	r2, #1
 8002530:	d900      	bls.n	8002534 <__aeabi_dmul+0x9c>
 8002532:	e149      	b.n	80027c8 <__aeabi_dmul+0x330>
 8002534:	2e02      	cmp	r6, #2
 8002536:	d100      	bne.n	800253a <__aeabi_dmul+0xa2>
 8002538:	e0ca      	b.n	80026d0 <__aeabi_dmul+0x238>
 800253a:	2e01      	cmp	r6, #1
 800253c:	d13d      	bne.n	80025ba <__aeabi_dmul+0x122>
 800253e:	2300      	movs	r3, #0
 8002540:	2400      	movs	r4, #0
 8002542:	2200      	movs	r2, #0
 8002544:	0010      	movs	r0, r2
 8002546:	465a      	mov	r2, fp
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	4323      	orrs	r3, r4
 800254c:	07d2      	lsls	r2, r2, #31
 800254e:	4313      	orrs	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	b007      	add	sp, #28
 8002554:	bcf0      	pop	{r4, r5, r6, r7}
 8002556:	46bb      	mov	fp, r7
 8002558:	46b2      	mov	sl, r6
 800255a:	46a9      	mov	r9, r5
 800255c:	46a0      	mov	r8, r4
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	4b92      	ldr	r3, [pc, #584]	@ (80027ac <__aeabi_dmul+0x314>)
 8002562:	4326      	orrs	r6, r4
 8002564:	18eb      	adds	r3, r5, r3
 8002566:	2e00      	cmp	r6, #0
 8002568:	d100      	bne.n	800256c <__aeabi_dmul+0xd4>
 800256a:	e0bb      	b.n	80026e4 <__aeabi_dmul+0x24c>
 800256c:	2203      	movs	r2, #3
 800256e:	4641      	mov	r1, r8
 8002570:	4311      	orrs	r1, r2
 8002572:	465a      	mov	r2, fp
 8002574:	4688      	mov	r8, r1
 8002576:	9900      	ldr	r1, [sp, #0]
 8002578:	404a      	eors	r2, r1
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	0109      	lsls	r1, r1, #4
 800257e:	468c      	mov	ip, r1
 8002580:	0029      	movs	r1, r5
 8002582:	4461      	add	r1, ip
 8002584:	9101      	str	r1, [sp, #4]
 8002586:	4641      	mov	r1, r8
 8002588:	290a      	cmp	r1, #10
 800258a:	dd00      	ble.n	800258e <__aeabi_dmul+0xf6>
 800258c:	e233      	b.n	80029f6 <__aeabi_dmul+0x55e>
 800258e:	4693      	mov	fp, r2
 8002590:	2603      	movs	r6, #3
 8002592:	4642      	mov	r2, r8
 8002594:	2701      	movs	r7, #1
 8002596:	4097      	lsls	r7, r2
 8002598:	21a6      	movs	r1, #166	@ 0xa6
 800259a:	003a      	movs	r2, r7
 800259c:	00c9      	lsls	r1, r1, #3
 800259e:	400a      	ands	r2, r1
 80025a0:	420f      	tst	r7, r1
 80025a2:	d031      	beq.n	8002608 <__aeabi_dmul+0x170>
 80025a4:	9e02      	ldr	r6, [sp, #8]
 80025a6:	2e02      	cmp	r6, #2
 80025a8:	d100      	bne.n	80025ac <__aeabi_dmul+0x114>
 80025aa:	e235      	b.n	8002a18 <__aeabi_dmul+0x580>
 80025ac:	2e03      	cmp	r6, #3
 80025ae:	d100      	bne.n	80025b2 <__aeabi_dmul+0x11a>
 80025b0:	e1d2      	b.n	8002958 <__aeabi_dmul+0x4c0>
 80025b2:	4654      	mov	r4, sl
 80025b4:	4648      	mov	r0, r9
 80025b6:	2e01      	cmp	r6, #1
 80025b8:	d0c1      	beq.n	800253e <__aeabi_dmul+0xa6>
 80025ba:	9a01      	ldr	r2, [sp, #4]
 80025bc:	4b7d      	ldr	r3, [pc, #500]	@ (80027b4 <__aeabi_dmul+0x31c>)
 80025be:	4694      	mov	ip, r2
 80025c0:	4463      	add	r3, ip
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dmul+0x130>
 80025c6:	e0c0      	b.n	800274a <__aeabi_dmul+0x2b2>
 80025c8:	0742      	lsls	r2, r0, #29
 80025ca:	d009      	beq.n	80025e0 <__aeabi_dmul+0x148>
 80025cc:	220f      	movs	r2, #15
 80025ce:	4002      	ands	r2, r0
 80025d0:	2a04      	cmp	r2, #4
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dmul+0x148>
 80025d4:	1d02      	adds	r2, r0, #4
 80025d6:	4282      	cmp	r2, r0
 80025d8:	4180      	sbcs	r0, r0
 80025da:	4240      	negs	r0, r0
 80025dc:	1824      	adds	r4, r4, r0
 80025de:	0010      	movs	r0, r2
 80025e0:	01e2      	lsls	r2, r4, #7
 80025e2:	d506      	bpl.n	80025f2 <__aeabi_dmul+0x15a>
 80025e4:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <__aeabi_dmul+0x320>)
 80025e6:	9a01      	ldr	r2, [sp, #4]
 80025e8:	401c      	ands	r4, r3
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	4694      	mov	ip, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4463      	add	r3, ip
 80025f2:	4a72      	ldr	r2, [pc, #456]	@ (80027bc <__aeabi_dmul+0x324>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	dc6b      	bgt.n	80026d0 <__aeabi_dmul+0x238>
 80025f8:	0762      	lsls	r2, r4, #29
 80025fa:	08c0      	lsrs	r0, r0, #3
 80025fc:	0264      	lsls	r4, r4, #9
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	4302      	orrs	r2, r0
 8002602:	0b24      	lsrs	r4, r4, #12
 8002604:	0d5b      	lsrs	r3, r3, #21
 8002606:	e79d      	b.n	8002544 <__aeabi_dmul+0xac>
 8002608:	2190      	movs	r1, #144	@ 0x90
 800260a:	0089      	lsls	r1, r1, #2
 800260c:	420f      	tst	r7, r1
 800260e:	d163      	bne.n	80026d8 <__aeabi_dmul+0x240>
 8002610:	2288      	movs	r2, #136	@ 0x88
 8002612:	423a      	tst	r2, r7
 8002614:	d100      	bne.n	8002618 <__aeabi_dmul+0x180>
 8002616:	e0d7      	b.n	80027c8 <__aeabi_dmul+0x330>
 8002618:	9b00      	ldr	r3, [sp, #0]
 800261a:	46a2      	mov	sl, r4
 800261c:	469b      	mov	fp, r3
 800261e:	4681      	mov	r9, r0
 8002620:	9602      	str	r6, [sp, #8]
 8002622:	e7bf      	b.n	80025a4 <__aeabi_dmul+0x10c>
 8002624:	0023      	movs	r3, r4
 8002626:	4333      	orrs	r3, r6
 8002628:	d100      	bne.n	800262c <__aeabi_dmul+0x194>
 800262a:	e07f      	b.n	800272c <__aeabi_dmul+0x294>
 800262c:	2c00      	cmp	r4, #0
 800262e:	d100      	bne.n	8002632 <__aeabi_dmul+0x19a>
 8002630:	e1ad      	b.n	800298e <__aeabi_dmul+0x4f6>
 8002632:	0020      	movs	r0, r4
 8002634:	f000 feee 	bl	8003414 <__clzsi2>
 8002638:	0002      	movs	r2, r0
 800263a:	0003      	movs	r3, r0
 800263c:	3a0b      	subs	r2, #11
 800263e:	201d      	movs	r0, #29
 8002640:	0019      	movs	r1, r3
 8002642:	1a82      	subs	r2, r0, r2
 8002644:	0030      	movs	r0, r6
 8002646:	3908      	subs	r1, #8
 8002648:	40d0      	lsrs	r0, r2
 800264a:	408c      	lsls	r4, r1
 800264c:	4304      	orrs	r4, r0
 800264e:	0030      	movs	r0, r6
 8002650:	4088      	lsls	r0, r1
 8002652:	4a5b      	ldr	r2, [pc, #364]	@ (80027c0 <__aeabi_dmul+0x328>)
 8002654:	1aeb      	subs	r3, r5, r3
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	9201      	str	r2, [sp, #4]
 800265e:	4642      	mov	r2, r8
 8002660:	2600      	movs	r6, #0
 8002662:	2a0a      	cmp	r2, #10
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x1d0>
 8002666:	e75a      	b.n	800251e <__aeabi_dmul+0x86>
 8002668:	e79c      	b.n	80025a4 <__aeabi_dmul+0x10c>
 800266a:	4653      	mov	r3, sl
 800266c:	4303      	orrs	r3, r0
 800266e:	4699      	mov	r9, r3
 8002670:	d054      	beq.n	800271c <__aeabi_dmul+0x284>
 8002672:	4653      	mov	r3, sl
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dmul+0x1e2>
 8002678:	e177      	b.n	800296a <__aeabi_dmul+0x4d2>
 800267a:	4650      	mov	r0, sl
 800267c:	f000 feca 	bl	8003414 <__clzsi2>
 8002680:	230b      	movs	r3, #11
 8002682:	425b      	negs	r3, r3
 8002684:	469c      	mov	ip, r3
 8002686:	0002      	movs	r2, r0
 8002688:	4484      	add	ip, r0
 800268a:	0011      	movs	r1, r2
 800268c:	4650      	mov	r0, sl
 800268e:	3908      	subs	r1, #8
 8002690:	4088      	lsls	r0, r1
 8002692:	231d      	movs	r3, #29
 8002694:	4680      	mov	r8, r0
 8002696:	4660      	mov	r0, ip
 8002698:	1a1b      	subs	r3, r3, r0
 800269a:	0020      	movs	r0, r4
 800269c:	40d8      	lsrs	r0, r3
 800269e:	0003      	movs	r3, r0
 80026a0:	4640      	mov	r0, r8
 80026a2:	4303      	orrs	r3, r0
 80026a4:	469a      	mov	sl, r3
 80026a6:	0023      	movs	r3, r4
 80026a8:	408b      	lsls	r3, r1
 80026aa:	4699      	mov	r9, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	4d44      	ldr	r5, [pc, #272]	@ (80027c0 <__aeabi_dmul+0x328>)
 80026b0:	4698      	mov	r8, r3
 80026b2:	1aad      	subs	r5, r5, r2
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	e715      	b.n	80024e4 <__aeabi_dmul+0x4c>
 80026b8:	4652      	mov	r2, sl
 80026ba:	4302      	orrs	r2, r0
 80026bc:	4691      	mov	r9, r2
 80026be:	d126      	bne.n	800270e <__aeabi_dmul+0x276>
 80026c0:	2200      	movs	r2, #0
 80026c2:	001d      	movs	r5, r3
 80026c4:	2302      	movs	r3, #2
 80026c6:	4692      	mov	sl, r2
 80026c8:	3208      	adds	r2, #8
 80026ca:	4690      	mov	r8, r2
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	e709      	b.n	80024e4 <__aeabi_dmul+0x4c>
 80026d0:	2400      	movs	r4, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <__aeabi_dmul+0x314>)
 80026d6:	e735      	b.n	8002544 <__aeabi_dmul+0xac>
 80026d8:	2300      	movs	r3, #0
 80026da:	2480      	movs	r4, #128	@ 0x80
 80026dc:	469b      	mov	fp, r3
 80026de:	0324      	lsls	r4, r4, #12
 80026e0:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <__aeabi_dmul+0x314>)
 80026e2:	e72f      	b.n	8002544 <__aeabi_dmul+0xac>
 80026e4:	2202      	movs	r2, #2
 80026e6:	4641      	mov	r1, r8
 80026e8:	4311      	orrs	r1, r2
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	4694      	mov	ip, r2
 80026f0:	002a      	movs	r2, r5
 80026f2:	4462      	add	r2, ip
 80026f4:	4688      	mov	r8, r1
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	290a      	cmp	r1, #10
 80026fa:	dd00      	ble.n	80026fe <__aeabi_dmul+0x266>
 80026fc:	e752      	b.n	80025a4 <__aeabi_dmul+0x10c>
 80026fe:	465a      	mov	r2, fp
 8002700:	2000      	movs	r0, #0
 8002702:	9900      	ldr	r1, [sp, #0]
 8002704:	0004      	movs	r4, r0
 8002706:	404a      	eors	r2, r1
 8002708:	4693      	mov	fp, r2
 800270a:	2602      	movs	r6, #2
 800270c:	e70b      	b.n	8002526 <__aeabi_dmul+0x8e>
 800270e:	220c      	movs	r2, #12
 8002710:	001d      	movs	r5, r3
 8002712:	2303      	movs	r3, #3
 8002714:	4681      	mov	r9, r0
 8002716:	4690      	mov	r8, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	e6e3      	b.n	80024e4 <__aeabi_dmul+0x4c>
 800271c:	2300      	movs	r3, #0
 800271e:	469a      	mov	sl, r3
 8002720:	3304      	adds	r3, #4
 8002722:	4698      	mov	r8, r3
 8002724:	3b03      	subs	r3, #3
 8002726:	2500      	movs	r5, #0
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	e6db      	b.n	80024e4 <__aeabi_dmul+0x4c>
 800272c:	4642      	mov	r2, r8
 800272e:	3301      	adds	r3, #1
 8002730:	431a      	orrs	r2, r3
 8002732:	002b      	movs	r3, r5
 8002734:	4690      	mov	r8, r2
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	4642      	mov	r2, r8
 800273c:	2400      	movs	r4, #0
 800273e:	2000      	movs	r0, #0
 8002740:	2601      	movs	r6, #1
 8002742:	2a0a      	cmp	r2, #10
 8002744:	dc00      	bgt.n	8002748 <__aeabi_dmul+0x2b0>
 8002746:	e6ea      	b.n	800251e <__aeabi_dmul+0x86>
 8002748:	e72c      	b.n	80025a4 <__aeabi_dmul+0x10c>
 800274a:	2201      	movs	r2, #1
 800274c:	1ad2      	subs	r2, r2, r3
 800274e:	2a38      	cmp	r2, #56	@ 0x38
 8002750:	dd00      	ble.n	8002754 <__aeabi_dmul+0x2bc>
 8002752:	e6f4      	b.n	800253e <__aeabi_dmul+0xa6>
 8002754:	2a1f      	cmp	r2, #31
 8002756:	dc00      	bgt.n	800275a <__aeabi_dmul+0x2c2>
 8002758:	e12a      	b.n	80029b0 <__aeabi_dmul+0x518>
 800275a:	211f      	movs	r1, #31
 800275c:	4249      	negs	r1, r1
 800275e:	1acb      	subs	r3, r1, r3
 8002760:	0021      	movs	r1, r4
 8002762:	40d9      	lsrs	r1, r3
 8002764:	000b      	movs	r3, r1
 8002766:	2a20      	cmp	r2, #32
 8002768:	d005      	beq.n	8002776 <__aeabi_dmul+0x2de>
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <__aeabi_dmul+0x32c>)
 800276c:	9d01      	ldr	r5, [sp, #4]
 800276e:	4694      	mov	ip, r2
 8002770:	4465      	add	r5, ip
 8002772:	40ac      	lsls	r4, r5
 8002774:	4320      	orrs	r0, r4
 8002776:	1e42      	subs	r2, r0, #1
 8002778:	4190      	sbcs	r0, r2
 800277a:	4318      	orrs	r0, r3
 800277c:	2307      	movs	r3, #7
 800277e:	0019      	movs	r1, r3
 8002780:	2400      	movs	r4, #0
 8002782:	4001      	ands	r1, r0
 8002784:	4203      	tst	r3, r0
 8002786:	d00c      	beq.n	80027a2 <__aeabi_dmul+0x30a>
 8002788:	230f      	movs	r3, #15
 800278a:	4003      	ands	r3, r0
 800278c:	2b04      	cmp	r3, #4
 800278e:	d100      	bne.n	8002792 <__aeabi_dmul+0x2fa>
 8002790:	e140      	b.n	8002a14 <__aeabi_dmul+0x57c>
 8002792:	1d03      	adds	r3, r0, #4
 8002794:	4283      	cmp	r3, r0
 8002796:	41a4      	sbcs	r4, r4
 8002798:	0018      	movs	r0, r3
 800279a:	4264      	negs	r4, r4
 800279c:	0761      	lsls	r1, r4, #29
 800279e:	0264      	lsls	r4, r4, #9
 80027a0:	0b24      	lsrs	r4, r4, #12
 80027a2:	08c2      	lsrs	r2, r0, #3
 80027a4:	2300      	movs	r3, #0
 80027a6:	430a      	orrs	r2, r1
 80027a8:	e6cc      	b.n	8002544 <__aeabi_dmul+0xac>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	000003ff 	.word	0x000003ff
 80027b8:	feffffff 	.word	0xfeffffff
 80027bc:	000007fe 	.word	0x000007fe
 80027c0:	fffffc0d 	.word	0xfffffc0d
 80027c4:	0000043e 	.word	0x0000043e
 80027c8:	4649      	mov	r1, r9
 80027ca:	464a      	mov	r2, r9
 80027cc:	0409      	lsls	r1, r1, #16
 80027ce:	0c09      	lsrs	r1, r1, #16
 80027d0:	000d      	movs	r5, r1
 80027d2:	0c16      	lsrs	r6, r2, #16
 80027d4:	0c02      	lsrs	r2, r0, #16
 80027d6:	0400      	lsls	r0, r0, #16
 80027d8:	0c00      	lsrs	r0, r0, #16
 80027da:	4345      	muls	r5, r0
 80027dc:	46ac      	mov	ip, r5
 80027de:	0005      	movs	r5, r0
 80027e0:	4375      	muls	r5, r6
 80027e2:	46a8      	mov	r8, r5
 80027e4:	0015      	movs	r5, r2
 80027e6:	000f      	movs	r7, r1
 80027e8:	4375      	muls	r5, r6
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	9502      	str	r5, [sp, #8]
 80027ee:	002a      	movs	r2, r5
 80027f0:	9d00      	ldr	r5, [sp, #0]
 80027f2:	436f      	muls	r7, r5
 80027f4:	4665      	mov	r5, ip
 80027f6:	0c2d      	lsrs	r5, r5, #16
 80027f8:	46a9      	mov	r9, r5
 80027fa:	4447      	add	r7, r8
 80027fc:	444f      	add	r7, r9
 80027fe:	45b8      	cmp	r8, r7
 8002800:	d905      	bls.n	800280e <__aeabi_dmul+0x376>
 8002802:	0015      	movs	r5, r2
 8002804:	2280      	movs	r2, #128	@ 0x80
 8002806:	0252      	lsls	r2, r2, #9
 8002808:	4690      	mov	r8, r2
 800280a:	4445      	add	r5, r8
 800280c:	9502      	str	r5, [sp, #8]
 800280e:	0c3d      	lsrs	r5, r7, #16
 8002810:	9503      	str	r5, [sp, #12]
 8002812:	4665      	mov	r5, ip
 8002814:	042d      	lsls	r5, r5, #16
 8002816:	043f      	lsls	r7, r7, #16
 8002818:	0c2d      	lsrs	r5, r5, #16
 800281a:	46ac      	mov	ip, r5
 800281c:	003d      	movs	r5, r7
 800281e:	4465      	add	r5, ip
 8002820:	9504      	str	r5, [sp, #16]
 8002822:	0c25      	lsrs	r5, r4, #16
 8002824:	0424      	lsls	r4, r4, #16
 8002826:	0c24      	lsrs	r4, r4, #16
 8002828:	46ac      	mov	ip, r5
 800282a:	0025      	movs	r5, r4
 800282c:	4375      	muls	r5, r6
 800282e:	46a8      	mov	r8, r5
 8002830:	4665      	mov	r5, ip
 8002832:	000f      	movs	r7, r1
 8002834:	4369      	muls	r1, r5
 8002836:	4441      	add	r1, r8
 8002838:	4689      	mov	r9, r1
 800283a:	4367      	muls	r7, r4
 800283c:	0c39      	lsrs	r1, r7, #16
 800283e:	4449      	add	r1, r9
 8002840:	436e      	muls	r6, r5
 8002842:	4588      	cmp	r8, r1
 8002844:	d903      	bls.n	800284e <__aeabi_dmul+0x3b6>
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	0252      	lsls	r2, r2, #9
 800284a:	4690      	mov	r8, r2
 800284c:	4446      	add	r6, r8
 800284e:	0c0d      	lsrs	r5, r1, #16
 8002850:	46a8      	mov	r8, r5
 8002852:	0035      	movs	r5, r6
 8002854:	4445      	add	r5, r8
 8002856:	9505      	str	r5, [sp, #20]
 8002858:	9d03      	ldr	r5, [sp, #12]
 800285a:	043f      	lsls	r7, r7, #16
 800285c:	46a8      	mov	r8, r5
 800285e:	0c3f      	lsrs	r7, r7, #16
 8002860:	0409      	lsls	r1, r1, #16
 8002862:	19c9      	adds	r1, r1, r7
 8002864:	4488      	add	r8, r1
 8002866:	4645      	mov	r5, r8
 8002868:	9503      	str	r5, [sp, #12]
 800286a:	4655      	mov	r5, sl
 800286c:	042e      	lsls	r6, r5, #16
 800286e:	0c36      	lsrs	r6, r6, #16
 8002870:	0c2f      	lsrs	r7, r5, #16
 8002872:	0035      	movs	r5, r6
 8002874:	4345      	muls	r5, r0
 8002876:	4378      	muls	r0, r7
 8002878:	4681      	mov	r9, r0
 800287a:	0038      	movs	r0, r7
 800287c:	46a8      	mov	r8, r5
 800287e:	0c2d      	lsrs	r5, r5, #16
 8002880:	46aa      	mov	sl, r5
 8002882:	9a00      	ldr	r2, [sp, #0]
 8002884:	4350      	muls	r0, r2
 8002886:	4372      	muls	r2, r6
 8002888:	444a      	add	r2, r9
 800288a:	4452      	add	r2, sl
 800288c:	4591      	cmp	r9, r2
 800288e:	d903      	bls.n	8002898 <__aeabi_dmul+0x400>
 8002890:	2580      	movs	r5, #128	@ 0x80
 8002892:	026d      	lsls	r5, r5, #9
 8002894:	46a9      	mov	r9, r5
 8002896:	4448      	add	r0, r9
 8002898:	0c15      	lsrs	r5, r2, #16
 800289a:	46a9      	mov	r9, r5
 800289c:	4645      	mov	r5, r8
 800289e:	042d      	lsls	r5, r5, #16
 80028a0:	0c2d      	lsrs	r5, r5, #16
 80028a2:	46a8      	mov	r8, r5
 80028a4:	4665      	mov	r5, ip
 80028a6:	437d      	muls	r5, r7
 80028a8:	0412      	lsls	r2, r2, #16
 80028aa:	4448      	add	r0, r9
 80028ac:	4490      	add	r8, r2
 80028ae:	46a9      	mov	r9, r5
 80028b0:	0032      	movs	r2, r6
 80028b2:	4665      	mov	r5, ip
 80028b4:	4362      	muls	r2, r4
 80028b6:	436e      	muls	r6, r5
 80028b8:	437c      	muls	r4, r7
 80028ba:	0c17      	lsrs	r7, r2, #16
 80028bc:	1936      	adds	r6, r6, r4
 80028be:	19bf      	adds	r7, r7, r6
 80028c0:	42bc      	cmp	r4, r7
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x434>
 80028c4:	2480      	movs	r4, #128	@ 0x80
 80028c6:	0264      	lsls	r4, r4, #9
 80028c8:	46a4      	mov	ip, r4
 80028ca:	44e1      	add	r9, ip
 80028cc:	9c02      	ldr	r4, [sp, #8]
 80028ce:	9e03      	ldr	r6, [sp, #12]
 80028d0:	46a4      	mov	ip, r4
 80028d2:	9d05      	ldr	r5, [sp, #20]
 80028d4:	4466      	add	r6, ip
 80028d6:	428e      	cmp	r6, r1
 80028d8:	4189      	sbcs	r1, r1
 80028da:	46ac      	mov	ip, r5
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	043c      	lsls	r4, r7, #16
 80028e0:	0c12      	lsrs	r2, r2, #16
 80028e2:	18a2      	adds	r2, r4, r2
 80028e4:	4462      	add	r2, ip
 80028e6:	4249      	negs	r1, r1
 80028e8:	1854      	adds	r4, r2, r1
 80028ea:	4446      	add	r6, r8
 80028ec:	46a4      	mov	ip, r4
 80028ee:	4546      	cmp	r6, r8
 80028f0:	41a4      	sbcs	r4, r4
 80028f2:	4682      	mov	sl, r0
 80028f4:	4264      	negs	r4, r4
 80028f6:	46a0      	mov	r8, r4
 80028f8:	42aa      	cmp	r2, r5
 80028fa:	4192      	sbcs	r2, r2
 80028fc:	458c      	cmp	ip, r1
 80028fe:	4189      	sbcs	r1, r1
 8002900:	44e2      	add	sl, ip
 8002902:	44d0      	add	r8, sl
 8002904:	4249      	negs	r1, r1
 8002906:	4252      	negs	r2, r2
 8002908:	430a      	orrs	r2, r1
 800290a:	45a0      	cmp	r8, r4
 800290c:	41a4      	sbcs	r4, r4
 800290e:	4582      	cmp	sl, r0
 8002910:	4189      	sbcs	r1, r1
 8002912:	4264      	negs	r4, r4
 8002914:	4249      	negs	r1, r1
 8002916:	430c      	orrs	r4, r1
 8002918:	4641      	mov	r1, r8
 800291a:	0c3f      	lsrs	r7, r7, #16
 800291c:	19d2      	adds	r2, r2, r7
 800291e:	1912      	adds	r2, r2, r4
 8002920:	0dcc      	lsrs	r4, r1, #23
 8002922:	9904      	ldr	r1, [sp, #16]
 8002924:	0270      	lsls	r0, r6, #9
 8002926:	4308      	orrs	r0, r1
 8002928:	1e41      	subs	r1, r0, #1
 800292a:	4188      	sbcs	r0, r1
 800292c:	4641      	mov	r1, r8
 800292e:	444a      	add	r2, r9
 8002930:	0df6      	lsrs	r6, r6, #23
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	4330      	orrs	r0, r6
 8002936:	0249      	lsls	r1, r1, #9
 8002938:	4314      	orrs	r4, r2
 800293a:	4308      	orrs	r0, r1
 800293c:	01d2      	lsls	r2, r2, #7
 800293e:	d535      	bpl.n	80029ac <__aeabi_dmul+0x514>
 8002940:	2201      	movs	r2, #1
 8002942:	0843      	lsrs	r3, r0, #1
 8002944:	4002      	ands	r2, r0
 8002946:	4313      	orrs	r3, r2
 8002948:	07e0      	lsls	r0, r4, #31
 800294a:	4318      	orrs	r0, r3
 800294c:	0864      	lsrs	r4, r4, #1
 800294e:	e634      	b.n	80025ba <__aeabi_dmul+0x122>
 8002950:	9b00      	ldr	r3, [sp, #0]
 8002952:	46a2      	mov	sl, r4
 8002954:	469b      	mov	fp, r3
 8002956:	4681      	mov	r9, r0
 8002958:	2480      	movs	r4, #128	@ 0x80
 800295a:	4653      	mov	r3, sl
 800295c:	0324      	lsls	r4, r4, #12
 800295e:	431c      	orrs	r4, r3
 8002960:	0324      	lsls	r4, r4, #12
 8002962:	464a      	mov	r2, r9
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002966:	0b24      	lsrs	r4, r4, #12
 8002968:	e5ec      	b.n	8002544 <__aeabi_dmul+0xac>
 800296a:	f000 fd53 	bl	8003414 <__clzsi2>
 800296e:	2315      	movs	r3, #21
 8002970:	469c      	mov	ip, r3
 8002972:	4484      	add	ip, r0
 8002974:	0002      	movs	r2, r0
 8002976:	4663      	mov	r3, ip
 8002978:	3220      	adds	r2, #32
 800297a:	2b1c      	cmp	r3, #28
 800297c:	dc00      	bgt.n	8002980 <__aeabi_dmul+0x4e8>
 800297e:	e684      	b.n	800268a <__aeabi_dmul+0x1f2>
 8002980:	2300      	movs	r3, #0
 8002982:	4699      	mov	r9, r3
 8002984:	0023      	movs	r3, r4
 8002986:	3808      	subs	r0, #8
 8002988:	4083      	lsls	r3, r0
 800298a:	469a      	mov	sl, r3
 800298c:	e68e      	b.n	80026ac <__aeabi_dmul+0x214>
 800298e:	f000 fd41 	bl	8003414 <__clzsi2>
 8002992:	0002      	movs	r2, r0
 8002994:	0003      	movs	r3, r0
 8002996:	3215      	adds	r2, #21
 8002998:	3320      	adds	r3, #32
 800299a:	2a1c      	cmp	r2, #28
 800299c:	dc00      	bgt.n	80029a0 <__aeabi_dmul+0x508>
 800299e:	e64e      	b.n	800263e <__aeabi_dmul+0x1a6>
 80029a0:	0002      	movs	r2, r0
 80029a2:	0034      	movs	r4, r6
 80029a4:	3a08      	subs	r2, #8
 80029a6:	2000      	movs	r0, #0
 80029a8:	4094      	lsls	r4, r2
 80029aa:	e652      	b.n	8002652 <__aeabi_dmul+0x1ba>
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	e604      	b.n	80025ba <__aeabi_dmul+0x122>
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <__aeabi_dmul+0x58c>)
 80029b2:	0021      	movs	r1, r4
 80029b4:	469c      	mov	ip, r3
 80029b6:	0003      	movs	r3, r0
 80029b8:	9d01      	ldr	r5, [sp, #4]
 80029ba:	40d3      	lsrs	r3, r2
 80029bc:	4465      	add	r5, ip
 80029be:	40a9      	lsls	r1, r5
 80029c0:	4319      	orrs	r1, r3
 80029c2:	0003      	movs	r3, r0
 80029c4:	40ab      	lsls	r3, r5
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	4183      	sbcs	r3, r0
 80029ca:	4319      	orrs	r1, r3
 80029cc:	0008      	movs	r0, r1
 80029ce:	40d4      	lsrs	r4, r2
 80029d0:	074b      	lsls	r3, r1, #29
 80029d2:	d009      	beq.n	80029e8 <__aeabi_dmul+0x550>
 80029d4:	230f      	movs	r3, #15
 80029d6:	400b      	ands	r3, r1
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d005      	beq.n	80029e8 <__aeabi_dmul+0x550>
 80029dc:	1d0b      	adds	r3, r1, #4
 80029de:	428b      	cmp	r3, r1
 80029e0:	4180      	sbcs	r0, r0
 80029e2:	4240      	negs	r0, r0
 80029e4:	1824      	adds	r4, r4, r0
 80029e6:	0018      	movs	r0, r3
 80029e8:	0223      	lsls	r3, r4, #8
 80029ea:	d400      	bmi.n	80029ee <__aeabi_dmul+0x556>
 80029ec:	e6d6      	b.n	800279c <__aeabi_dmul+0x304>
 80029ee:	2301      	movs	r3, #1
 80029f0:	2400      	movs	r4, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	e5a6      	b.n	8002544 <__aeabi_dmul+0xac>
 80029f6:	290f      	cmp	r1, #15
 80029f8:	d1aa      	bne.n	8002950 <__aeabi_dmul+0x4b8>
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	4652      	mov	r2, sl
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	421a      	tst	r2, r3
 8002a02:	d0a9      	beq.n	8002958 <__aeabi_dmul+0x4c0>
 8002a04:	421c      	tst	r4, r3
 8002a06:	d1a7      	bne.n	8002958 <__aeabi_dmul+0x4c0>
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	9b00      	ldr	r3, [sp, #0]
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	469b      	mov	fp, r3
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002a12:	e597      	b.n	8002544 <__aeabi_dmul+0xac>
 8002a14:	2400      	movs	r4, #0
 8002a16:	e6c1      	b.n	800279c <__aeabi_dmul+0x304>
 8002a18:	2400      	movs	r4, #0
 8002a1a:	4b01      	ldr	r3, [pc, #4]	@ (8002a20 <__aeabi_dmul+0x588>)
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	e591      	b.n	8002544 <__aeabi_dmul+0xac>
 8002a20:	000007ff 	.word	0x000007ff
 8002a24:	0000041e 	.word	0x0000041e

08002a28 <__aeabi_dsub>:
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	464e      	mov	r6, r9
 8002a2c:	4645      	mov	r5, r8
 8002a2e:	46de      	mov	lr, fp
 8002a30:	4657      	mov	r7, sl
 8002a32:	b5e0      	push	{r5, r6, r7, lr}
 8002a34:	b085      	sub	sp, #20
 8002a36:	9000      	str	r0, [sp, #0]
 8002a38:	9101      	str	r1, [sp, #4]
 8002a3a:	030c      	lsls	r4, r1, #12
 8002a3c:	004f      	lsls	r7, r1, #1
 8002a3e:	0fce      	lsrs	r6, r1, #31
 8002a40:	0a61      	lsrs	r1, r4, #9
 8002a42:	9c00      	ldr	r4, [sp, #0]
 8002a44:	46b0      	mov	r8, r6
 8002a46:	0f64      	lsrs	r4, r4, #29
 8002a48:	430c      	orrs	r4, r1
 8002a4a:	9900      	ldr	r1, [sp, #0]
 8002a4c:	0d7f      	lsrs	r7, r7, #21
 8002a4e:	00c8      	lsls	r0, r1, #3
 8002a50:	0011      	movs	r1, r2
 8002a52:	001a      	movs	r2, r3
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	469c      	mov	ip, r3
 8002a58:	9100      	str	r1, [sp, #0]
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	0051      	lsls	r1, r2, #1
 8002a5e:	0d4b      	lsrs	r3, r1, #21
 8002a60:	4699      	mov	r9, r3
 8002a62:	9b01      	ldr	r3, [sp, #4]
 8002a64:	9d00      	ldr	r5, [sp, #0]
 8002a66:	0fd9      	lsrs	r1, r3, #31
 8002a68:	4663      	mov	r3, ip
 8002a6a:	0f6a      	lsrs	r2, r5, #29
 8002a6c:	0a5b      	lsrs	r3, r3, #9
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	00ea      	lsls	r2, r5, #3
 8002a72:	4694      	mov	ip, r2
 8002a74:	4693      	mov	fp, r2
 8002a76:	4ac1      	ldr	r2, [pc, #772]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002a78:	9003      	str	r0, [sp, #12]
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	4591      	cmp	r9, r2
 8002a7e:	d100      	bne.n	8002a82 <__aeabi_dsub+0x5a>
 8002a80:	e0cd      	b.n	8002c1e <__aeabi_dsub+0x1f6>
 8002a82:	2501      	movs	r5, #1
 8002a84:	4069      	eors	r1, r5
 8002a86:	464d      	mov	r5, r9
 8002a88:	1b7d      	subs	r5, r7, r5
 8002a8a:	46aa      	mov	sl, r5
 8002a8c:	428e      	cmp	r6, r1
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x6a>
 8002a90:	e080      	b.n	8002b94 <__aeabi_dsub+0x16c>
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	dc00      	bgt.n	8002a98 <__aeabi_dsub+0x70>
 8002a96:	e335      	b.n	8003104 <__aeabi_dsub+0x6dc>
 8002a98:	4649      	mov	r1, r9
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x78>
 8002a9e:	e0df      	b.n	8002c60 <__aeabi_dsub+0x238>
 8002aa0:	4297      	cmp	r7, r2
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x7e>
 8002aa4:	e194      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002aa6:	4652      	mov	r2, sl
 8002aa8:	2501      	movs	r5, #1
 8002aaa:	2a38      	cmp	r2, #56	@ 0x38
 8002aac:	dc19      	bgt.n	8002ae2 <__aeabi_dsub+0xba>
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	0412      	lsls	r2, r2, #16
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	4652      	mov	r2, sl
 8002aba:	2a1f      	cmp	r2, #31
 8002abc:	dd00      	ble.n	8002ac0 <__aeabi_dsub+0x98>
 8002abe:	e1e3      	b.n	8002e88 <__aeabi_dsub+0x460>
 8002ac0:	4653      	mov	r3, sl
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4661      	mov	r1, ip
 8002ac6:	9d02      	ldr	r5, [sp, #8]
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	4095      	lsls	r5, r2
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	430d      	orrs	r5, r1
 8002ad0:	4661      	mov	r1, ip
 8002ad2:	4091      	lsls	r1, r2
 8002ad4:	000a      	movs	r2, r1
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	4315      	orrs	r5, r2
 8002adc:	9a02      	ldr	r2, [sp, #8]
 8002ade:	40da      	lsrs	r2, r3
 8002ae0:	1aa4      	subs	r4, r4, r2
 8002ae2:	1b45      	subs	r5, r0, r5
 8002ae4:	42a8      	cmp	r0, r5
 8002ae6:	4180      	sbcs	r0, r0
 8002ae8:	4240      	negs	r0, r0
 8002aea:	1a24      	subs	r4, r4, r0
 8002aec:	0223      	lsls	r3, r4, #8
 8002aee:	d400      	bmi.n	8002af2 <__aeabi_dsub+0xca>
 8002af0:	e13d      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002af2:	0264      	lsls	r4, r4, #9
 8002af4:	0a64      	lsrs	r4, r4, #9
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0xd4>
 8002afa:	e147      	b.n	8002d8c <__aeabi_dsub+0x364>
 8002afc:	0020      	movs	r0, r4
 8002afe:	f000 fc89 	bl	8003414 <__clzsi2>
 8002b02:	0003      	movs	r3, r0
 8002b04:	3b08      	subs	r3, #8
 8002b06:	2120      	movs	r1, #32
 8002b08:	0028      	movs	r0, r5
 8002b0a:	1aca      	subs	r2, r1, r3
 8002b0c:	40d0      	lsrs	r0, r2
 8002b0e:	409c      	lsls	r4, r3
 8002b10:	0002      	movs	r2, r0
 8002b12:	409d      	lsls	r5, r3
 8002b14:	4322      	orrs	r2, r4
 8002b16:	429f      	cmp	r7, r3
 8002b18:	dd00      	ble.n	8002b1c <__aeabi_dsub+0xf4>
 8002b1a:	e177      	b.n	8002e0c <__aeabi_dsub+0x3e4>
 8002b1c:	1bd8      	subs	r0, r3, r7
 8002b1e:	3001      	adds	r0, #1
 8002b20:	1a09      	subs	r1, r1, r0
 8002b22:	002c      	movs	r4, r5
 8002b24:	408d      	lsls	r5, r1
 8002b26:	40c4      	lsrs	r4, r0
 8002b28:	1e6b      	subs	r3, r5, #1
 8002b2a:	419d      	sbcs	r5, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	40c2      	lsrs	r2, r0
 8002b30:	408b      	lsls	r3, r1
 8002b32:	4325      	orrs	r5, r4
 8002b34:	2700      	movs	r7, #0
 8002b36:	0014      	movs	r4, r2
 8002b38:	431d      	orrs	r5, r3
 8002b3a:	076b      	lsls	r3, r5, #29
 8002b3c:	d009      	beq.n	8002b52 <__aeabi_dsub+0x12a>
 8002b3e:	230f      	movs	r3, #15
 8002b40:	402b      	ands	r3, r5
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d005      	beq.n	8002b52 <__aeabi_dsub+0x12a>
 8002b46:	1d2b      	adds	r3, r5, #4
 8002b48:	42ab      	cmp	r3, r5
 8002b4a:	41ad      	sbcs	r5, r5
 8002b4c:	426d      	negs	r5, r5
 8002b4e:	1964      	adds	r4, r4, r5
 8002b50:	001d      	movs	r5, r3
 8002b52:	0223      	lsls	r3, r4, #8
 8002b54:	d400      	bmi.n	8002b58 <__aeabi_dsub+0x130>
 8002b56:	e140      	b.n	8002dda <__aeabi_dsub+0x3b2>
 8002b58:	4a88      	ldr	r2, [pc, #544]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002b5a:	3701      	adds	r7, #1
 8002b5c:	4297      	cmp	r7, r2
 8002b5e:	d100      	bne.n	8002b62 <__aeabi_dsub+0x13a>
 8002b60:	e101      	b.n	8002d66 <__aeabi_dsub+0x33e>
 8002b62:	2601      	movs	r6, #1
 8002b64:	4643      	mov	r3, r8
 8002b66:	4986      	ldr	r1, [pc, #536]	@ (8002d80 <__aeabi_dsub+0x358>)
 8002b68:	08ed      	lsrs	r5, r5, #3
 8002b6a:	4021      	ands	r1, r4
 8002b6c:	074a      	lsls	r2, r1, #29
 8002b6e:	432a      	orrs	r2, r5
 8002b70:	057c      	lsls	r4, r7, #21
 8002b72:	024d      	lsls	r5, r1, #9
 8002b74:	0b2d      	lsrs	r5, r5, #12
 8002b76:	0d64      	lsrs	r4, r4, #21
 8002b78:	401e      	ands	r6, r3
 8002b7a:	0524      	lsls	r4, r4, #20
 8002b7c:	432c      	orrs	r4, r5
 8002b7e:	07f6      	lsls	r6, r6, #31
 8002b80:	4334      	orrs	r4, r6
 8002b82:	0010      	movs	r0, r2
 8002b84:	0021      	movs	r1, r4
 8002b86:	b005      	add	sp, #20
 8002b88:	bcf0      	pop	{r4, r5, r6, r7}
 8002b8a:	46bb      	mov	fp, r7
 8002b8c:	46b2      	mov	sl, r6
 8002b8e:	46a9      	mov	r9, r5
 8002b90:	46a0      	mov	r8, r4
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	dc00      	bgt.n	8002b9a <__aeabi_dsub+0x172>
 8002b98:	e2d0      	b.n	800313c <__aeabi_dsub+0x714>
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	2900      	cmp	r1, #0
 8002b9e:	d000      	beq.n	8002ba2 <__aeabi_dsub+0x17a>
 8002ba0:	e0d4      	b.n	8002d4c <__aeabi_dsub+0x324>
 8002ba2:	4661      	mov	r1, ip
 8002ba4:	9b02      	ldr	r3, [sp, #8]
 8002ba6:	4319      	orrs	r1, r3
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x184>
 8002baa:	e12b      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002bac:	1e69      	subs	r1, r5, #1
 8002bae:	2d01      	cmp	r5, #1
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dsub+0x18c>
 8002bb2:	e1d9      	b.n	8002f68 <__aeabi_dsub+0x540>
 8002bb4:	4295      	cmp	r5, r2
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x192>
 8002bb8:	e10a      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002bba:	2501      	movs	r5, #1
 8002bbc:	2938      	cmp	r1, #56	@ 0x38
 8002bbe:	dc17      	bgt.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002bc0:	468a      	mov	sl, r1
 8002bc2:	4653      	mov	r3, sl
 8002bc4:	2b1f      	cmp	r3, #31
 8002bc6:	dd00      	ble.n	8002bca <__aeabi_dsub+0x1a2>
 8002bc8:	e1e7      	b.n	8002f9a <__aeabi_dsub+0x572>
 8002bca:	2220      	movs	r2, #32
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	9b02      	ldr	r3, [sp, #8]
 8002bd0:	4661      	mov	r1, ip
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	001d      	movs	r5, r3
 8002bd6:	4653      	mov	r3, sl
 8002bd8:	40d9      	lsrs	r1, r3
 8002bda:	4663      	mov	r3, ip
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	430d      	orrs	r5, r1
 8002be2:	1e51      	subs	r1, r2, #1
 8002be4:	418a      	sbcs	r2, r1
 8002be6:	4653      	mov	r3, sl
 8002be8:	4315      	orrs	r5, r2
 8002bea:	9a02      	ldr	r2, [sp, #8]
 8002bec:	40da      	lsrs	r2, r3
 8002bee:	18a4      	adds	r4, r4, r2
 8002bf0:	182d      	adds	r5, r5, r0
 8002bf2:	4285      	cmp	r5, r0
 8002bf4:	4180      	sbcs	r0, r0
 8002bf6:	4240      	negs	r0, r0
 8002bf8:	1824      	adds	r4, r4, r0
 8002bfa:	0223      	lsls	r3, r4, #8
 8002bfc:	d400      	bmi.n	8002c00 <__aeabi_dsub+0x1d8>
 8002bfe:	e0b6      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002c00:	4b5e      	ldr	r3, [pc, #376]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002c02:	3701      	adds	r7, #1
 8002c04:	429f      	cmp	r7, r3
 8002c06:	d100      	bne.n	8002c0a <__aeabi_dsub+0x1e2>
 8002c08:	e0ad      	b.n	8002d66 <__aeabi_dsub+0x33e>
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002d80 <__aeabi_dsub+0x358>)
 8002c0e:	086a      	lsrs	r2, r5, #1
 8002c10:	401c      	ands	r4, r3
 8002c12:	4029      	ands	r1, r5
 8002c14:	430a      	orrs	r2, r1
 8002c16:	07e5      	lsls	r5, r4, #31
 8002c18:	4315      	orrs	r5, r2
 8002c1a:	0864      	lsrs	r4, r4, #1
 8002c1c:	e78d      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002c1e:	4a59      	ldr	r2, [pc, #356]	@ (8002d84 <__aeabi_dsub+0x35c>)
 8002c20:	9b02      	ldr	r3, [sp, #8]
 8002c22:	4692      	mov	sl, r2
 8002c24:	4662      	mov	r2, ip
 8002c26:	44ba      	add	sl, r7
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	d02c      	beq.n	8002c86 <__aeabi_dsub+0x25e>
 8002c2c:	428e      	cmp	r6, r1
 8002c2e:	d02e      	beq.n	8002c8e <__aeabi_dsub+0x266>
 8002c30:	4652      	mov	r2, sl
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d060      	beq.n	8002cf8 <__aeabi_dsub+0x2d0>
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_dsub+0x214>
 8002c3a:	e0db      	b.n	8002df4 <__aeabi_dsub+0x3cc>
 8002c3c:	4663      	mov	r3, ip
 8002c3e:	000e      	movs	r6, r1
 8002c40:	9c02      	ldr	r4, [sp, #8]
 8002c42:	08d8      	lsrs	r0, r3, #3
 8002c44:	0762      	lsls	r2, r4, #29
 8002c46:	4302      	orrs	r2, r0
 8002c48:	08e4      	lsrs	r4, r4, #3
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	4323      	orrs	r3, r4
 8002c4e:	d100      	bne.n	8002c52 <__aeabi_dsub+0x22a>
 8002c50:	e254      	b.n	80030fc <__aeabi_dsub+0x6d4>
 8002c52:	2580      	movs	r5, #128	@ 0x80
 8002c54:	032d      	lsls	r5, r5, #12
 8002c56:	4325      	orrs	r5, r4
 8002c58:	032d      	lsls	r5, r5, #12
 8002c5a:	4c48      	ldr	r4, [pc, #288]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002c5c:	0b2d      	lsrs	r5, r5, #12
 8002c5e:	e78c      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002c60:	4661      	mov	r1, ip
 8002c62:	9b02      	ldr	r3, [sp, #8]
 8002c64:	4319      	orrs	r1, r3
 8002c66:	d100      	bne.n	8002c6a <__aeabi_dsub+0x242>
 8002c68:	e0cc      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002c6a:	0029      	movs	r1, r5
 8002c6c:	3901      	subs	r1, #1
 8002c6e:	2d01      	cmp	r5, #1
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x24c>
 8002c72:	e188      	b.n	8002f86 <__aeabi_dsub+0x55e>
 8002c74:	4295      	cmp	r5, r2
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x252>
 8002c78:	e0aa      	b.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002c7a:	2501      	movs	r5, #1
 8002c7c:	2938      	cmp	r1, #56	@ 0x38
 8002c7e:	dd00      	ble.n	8002c82 <__aeabi_dsub+0x25a>
 8002c80:	e72f      	b.n	8002ae2 <__aeabi_dsub+0xba>
 8002c82:	468a      	mov	sl, r1
 8002c84:	e718      	b.n	8002ab8 <__aeabi_dsub+0x90>
 8002c86:	2201      	movs	r2, #1
 8002c88:	4051      	eors	r1, r2
 8002c8a:	428e      	cmp	r6, r1
 8002c8c:	d1d0      	bne.n	8002c30 <__aeabi_dsub+0x208>
 8002c8e:	4653      	mov	r3, sl
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d100      	bne.n	8002c96 <__aeabi_dsub+0x26e>
 8002c94:	e0be      	b.n	8002e14 <__aeabi_dsub+0x3ec>
 8002c96:	2f00      	cmp	r7, #0
 8002c98:	d000      	beq.n	8002c9c <__aeabi_dsub+0x274>
 8002c9a:	e138      	b.n	8002f0e <__aeabi_dsub+0x4e6>
 8002c9c:	46ca      	mov	sl, r9
 8002c9e:	0022      	movs	r2, r4
 8002ca0:	4302      	orrs	r2, r0
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x27e>
 8002ca4:	e1e2      	b.n	800306c <__aeabi_dsub+0x644>
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	1e59      	subs	r1, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x288>
 8002cae:	e20d      	b.n	80030cc <__aeabi_dsub+0x6a4>
 8002cb0:	4a32      	ldr	r2, [pc, #200]	@ (8002d7c <__aeabi_dsub+0x354>)
 8002cb2:	4592      	cmp	sl, r2
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x290>
 8002cb6:	e1d2      	b.n	800305e <__aeabi_dsub+0x636>
 8002cb8:	2701      	movs	r7, #1
 8002cba:	2938      	cmp	r1, #56	@ 0x38
 8002cbc:	dc13      	bgt.n	8002ce6 <__aeabi_dsub+0x2be>
 8002cbe:	291f      	cmp	r1, #31
 8002cc0:	dd00      	ble.n	8002cc4 <__aeabi_dsub+0x29c>
 8002cc2:	e1ee      	b.n	80030a2 <__aeabi_dsub+0x67a>
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	9b02      	ldr	r3, [sp, #8]
 8002cc8:	1a52      	subs	r2, r2, r1
 8002cca:	0025      	movs	r5, r4
 8002ccc:	0007      	movs	r7, r0
 8002cce:	469a      	mov	sl, r3
 8002cd0:	40cc      	lsrs	r4, r1
 8002cd2:	4090      	lsls	r0, r2
 8002cd4:	4095      	lsls	r5, r2
 8002cd6:	40cf      	lsrs	r7, r1
 8002cd8:	44a2      	add	sl, r4
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	4190      	sbcs	r0, r2
 8002cde:	4653      	mov	r3, sl
 8002ce0:	432f      	orrs	r7, r5
 8002ce2:	4307      	orrs	r7, r0
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	003d      	movs	r5, r7
 8002ce8:	4465      	add	r5, ip
 8002cea:	4565      	cmp	r5, ip
 8002cec:	4192      	sbcs	r2, r2
 8002cee:	9b02      	ldr	r3, [sp, #8]
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	464f      	mov	r7, r9
 8002cf4:	18d4      	adds	r4, r2, r3
 8002cf6:	e780      	b.n	8002bfa <__aeabi_dsub+0x1d2>
 8002cf8:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <__aeabi_dsub+0x360>)
 8002cfa:	1c7d      	adds	r5, r7, #1
 8002cfc:	4215      	tst	r5, r2
 8002cfe:	d000      	beq.n	8002d02 <__aeabi_dsub+0x2da>
 8002d00:	e0aa      	b.n	8002e58 <__aeabi_dsub+0x430>
 8002d02:	4662      	mov	r2, ip
 8002d04:	0025      	movs	r5, r4
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	4305      	orrs	r5, r0
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	d000      	beq.n	8002d12 <__aeabi_dsub+0x2ea>
 8002d10:	e0f5      	b.n	8002efe <__aeabi_dsub+0x4d6>
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	d100      	bne.n	8002d18 <__aeabi_dsub+0x2f0>
 8002d16:	e16b      	b.n	8002ff0 <__aeabi_dsub+0x5c8>
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d100      	bne.n	8002d1e <__aeabi_dsub+0x2f6>
 8002d1c:	e152      	b.n	8002fc4 <__aeabi_dsub+0x59c>
 8002d1e:	4663      	mov	r3, ip
 8002d20:	1ac5      	subs	r5, r0, r3
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	1ae2      	subs	r2, r4, r3
 8002d26:	42a8      	cmp	r0, r5
 8002d28:	419b      	sbcs	r3, r3
 8002d2a:	425b      	negs	r3, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	021a      	lsls	r2, r3, #8
 8002d30:	d400      	bmi.n	8002d34 <__aeabi_dsub+0x30c>
 8002d32:	e1d5      	b.n	80030e0 <__aeabi_dsub+0x6b8>
 8002d34:	4663      	mov	r3, ip
 8002d36:	1a1d      	subs	r5, r3, r0
 8002d38:	45ac      	cmp	ip, r5
 8002d3a:	4192      	sbcs	r2, r2
 8002d3c:	2601      	movs	r6, #1
 8002d3e:	9b02      	ldr	r3, [sp, #8]
 8002d40:	4252      	negs	r2, r2
 8002d42:	1b1c      	subs	r4, r3, r4
 8002d44:	4688      	mov	r8, r1
 8002d46:	1aa4      	subs	r4, r4, r2
 8002d48:	400e      	ands	r6, r1
 8002d4a:	e6f6      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002d4c:	4297      	cmp	r7, r2
 8002d4e:	d03f      	beq.n	8002dd0 <__aeabi_dsub+0x3a8>
 8002d50:	4652      	mov	r2, sl
 8002d52:	2501      	movs	r5, #1
 8002d54:	2a38      	cmp	r2, #56	@ 0x38
 8002d56:	dd00      	ble.n	8002d5a <__aeabi_dsub+0x332>
 8002d58:	e74a      	b.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	9b02      	ldr	r3, [sp, #8]
 8002d5e:	0412      	lsls	r2, r2, #16
 8002d60:	4313      	orrs	r3, r2
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	e72d      	b.n	8002bc2 <__aeabi_dsub+0x19a>
 8002d66:	003c      	movs	r4, r7
 8002d68:	2500      	movs	r5, #0
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	e705      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	402b      	ands	r3, r5
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d000      	beq.n	8002d78 <__aeabi_dsub+0x350>
 8002d76:	e6e2      	b.n	8002b3e <__aeabi_dsub+0x116>
 8002d78:	e06b      	b.n	8002e52 <__aeabi_dsub+0x42a>
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	000007ff 	.word	0x000007ff
 8002d80:	ff7fffff 	.word	0xff7fffff
 8002d84:	fffff801 	.word	0xfffff801
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	f000 fb41 	bl	8003414 <__clzsi2>
 8002d92:	0003      	movs	r3, r0
 8002d94:	3318      	adds	r3, #24
 8002d96:	2b1f      	cmp	r3, #31
 8002d98:	dc00      	bgt.n	8002d9c <__aeabi_dsub+0x374>
 8002d9a:	e6b4      	b.n	8002b06 <__aeabi_dsub+0xde>
 8002d9c:	002a      	movs	r2, r5
 8002d9e:	3808      	subs	r0, #8
 8002da0:	4082      	lsls	r2, r0
 8002da2:	429f      	cmp	r7, r3
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x380>
 8002da6:	e0b9      	b.n	8002f1c <__aeabi_dsub+0x4f4>
 8002da8:	1bdb      	subs	r3, r3, r7
 8002daa:	1c58      	adds	r0, r3, #1
 8002dac:	281f      	cmp	r0, #31
 8002dae:	dc00      	bgt.n	8002db2 <__aeabi_dsub+0x38a>
 8002db0:	e1a0      	b.n	80030f4 <__aeabi_dsub+0x6cc>
 8002db2:	0015      	movs	r5, r2
 8002db4:	3b1f      	subs	r3, #31
 8002db6:	40dd      	lsrs	r5, r3
 8002db8:	2820      	cmp	r0, #32
 8002dba:	d005      	beq.n	8002dc8 <__aeabi_dsub+0x3a0>
 8002dbc:	2340      	movs	r3, #64	@ 0x40
 8002dbe:	1a1b      	subs	r3, r3, r0
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	1e53      	subs	r3, r2, #1
 8002dc4:	419a      	sbcs	r2, r3
 8002dc6:	4315      	orrs	r5, r2
 8002dc8:	2307      	movs	r3, #7
 8002dca:	2700      	movs	r7, #0
 8002dcc:	402b      	ands	r3, r5
 8002dce:	e7d0      	b.n	8002d72 <__aeabi_dsub+0x34a>
 8002dd0:	08c0      	lsrs	r0, r0, #3
 8002dd2:	0762      	lsls	r2, r4, #29
 8002dd4:	4302      	orrs	r2, r0
 8002dd6:	08e4      	lsrs	r4, r4, #3
 8002dd8:	e737      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002dda:	08ea      	lsrs	r2, r5, #3
 8002ddc:	0763      	lsls	r3, r4, #29
 8002dde:	431a      	orrs	r2, r3
 8002de0:	4bd3      	ldr	r3, [pc, #844]	@ (8003130 <__aeabi_dsub+0x708>)
 8002de2:	08e4      	lsrs	r4, r4, #3
 8002de4:	429f      	cmp	r7, r3
 8002de6:	d100      	bne.n	8002dea <__aeabi_dsub+0x3c2>
 8002de8:	e72f      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002dea:	0324      	lsls	r4, r4, #12
 8002dec:	0b25      	lsrs	r5, r4, #12
 8002dee:	057c      	lsls	r4, r7, #21
 8002df0:	0d64      	lsrs	r4, r4, #21
 8002df2:	e6c2      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002df4:	46ca      	mov	sl, r9
 8002df6:	0022      	movs	r2, r4
 8002df8:	4302      	orrs	r2, r0
 8002dfa:	d158      	bne.n	8002eae <__aeabi_dsub+0x486>
 8002dfc:	4663      	mov	r3, ip
 8002dfe:	000e      	movs	r6, r1
 8002e00:	9c02      	ldr	r4, [sp, #8]
 8002e02:	9303      	str	r3, [sp, #12]
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	4657      	mov	r7, sl
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	e7e7      	b.n	8002ddc <__aeabi_dsub+0x3b4>
 8002e0c:	4cc9      	ldr	r4, [pc, #804]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002e0e:	1aff      	subs	r7, r7, r3
 8002e10:	4014      	ands	r4, r2
 8002e12:	e692      	b.n	8002b3a <__aeabi_dsub+0x112>
 8002e14:	4dc8      	ldr	r5, [pc, #800]	@ (8003138 <__aeabi_dsub+0x710>)
 8002e16:	1c7a      	adds	r2, r7, #1
 8002e18:	422a      	tst	r2, r5
 8002e1a:	d000      	beq.n	8002e1e <__aeabi_dsub+0x3f6>
 8002e1c:	e084      	b.n	8002f28 <__aeabi_dsub+0x500>
 8002e1e:	0022      	movs	r2, r4
 8002e20:	4302      	orrs	r2, r0
 8002e22:	2f00      	cmp	r7, #0
 8002e24:	d000      	beq.n	8002e28 <__aeabi_dsub+0x400>
 8002e26:	e0ef      	b.n	8003008 <__aeabi_dsub+0x5e0>
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x406>
 8002e2c:	e0e5      	b.n	8002ffa <__aeabi_dsub+0x5d2>
 8002e2e:	4662      	mov	r2, ip
 8002e30:	9902      	ldr	r1, [sp, #8]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	d100      	bne.n	8002e38 <__aeabi_dsub+0x410>
 8002e36:	e0c5      	b.n	8002fc4 <__aeabi_dsub+0x59c>
 8002e38:	4663      	mov	r3, ip
 8002e3a:	18c5      	adds	r5, r0, r3
 8002e3c:	468c      	mov	ip, r1
 8002e3e:	4285      	cmp	r5, r0
 8002e40:	4180      	sbcs	r0, r0
 8002e42:	4464      	add	r4, ip
 8002e44:	4240      	negs	r0, r0
 8002e46:	1824      	adds	r4, r4, r0
 8002e48:	0223      	lsls	r3, r4, #8
 8002e4a:	d502      	bpl.n	8002e52 <__aeabi_dsub+0x42a>
 8002e4c:	4bb9      	ldr	r3, [pc, #740]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002e4e:	3701      	adds	r7, #1
 8002e50:	401c      	ands	r4, r3
 8002e52:	46ba      	mov	sl, r7
 8002e54:	9503      	str	r5, [sp, #12]
 8002e56:	e7d5      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8002e58:	4662      	mov	r2, ip
 8002e5a:	1a85      	subs	r5, r0, r2
 8002e5c:	42a8      	cmp	r0, r5
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	4252      	negs	r2, r2
 8002e62:	4691      	mov	r9, r2
 8002e64:	9b02      	ldr	r3, [sp, #8]
 8002e66:	1ae3      	subs	r3, r4, r3
 8002e68:	001a      	movs	r2, r3
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1ad2      	subs	r2, r2, r3
 8002e6e:	0013      	movs	r3, r2
 8002e70:	4691      	mov	r9, r2
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	d46c      	bmi.n	8002f50 <__aeabi_dsub+0x528>
 8002e76:	464a      	mov	r2, r9
 8002e78:	464c      	mov	r4, r9
 8002e7a:	432a      	orrs	r2, r5
 8002e7c:	d000      	beq.n	8002e80 <__aeabi_dsub+0x458>
 8002e7e:	e63a      	b.n	8002af6 <__aeabi_dsub+0xce>
 8002e80:	2600      	movs	r6, #0
 8002e82:	2400      	movs	r4, #0
 8002e84:	2500      	movs	r5, #0
 8002e86:	e678      	b.n	8002b7a <__aeabi_dsub+0x152>
 8002e88:	9902      	ldr	r1, [sp, #8]
 8002e8a:	4653      	mov	r3, sl
 8002e8c:	000d      	movs	r5, r1
 8002e8e:	3a20      	subs	r2, #32
 8002e90:	40d5      	lsrs	r5, r2
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d006      	beq.n	8002ea4 <__aeabi_dsub+0x47c>
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	1ad2      	subs	r2, r2, r3
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	4662      	mov	r2, ip
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	4693      	mov	fp, r2
 8002ea4:	465b      	mov	r3, fp
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	4193      	sbcs	r3, r2
 8002eaa:	431d      	orrs	r5, r3
 8002eac:	e619      	b.n	8002ae2 <__aeabi_dsub+0xba>
 8002eae:	4653      	mov	r3, sl
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x490>
 8002eb6:	e0c6      	b.n	8003046 <__aeabi_dsub+0x61e>
 8002eb8:	4e9d      	ldr	r6, [pc, #628]	@ (8003130 <__aeabi_dsub+0x708>)
 8002eba:	45b2      	cmp	sl, r6
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x498>
 8002ebe:	e6bd      	b.n	8002c3c <__aeabi_dsub+0x214>
 8002ec0:	4688      	mov	r8, r1
 8002ec2:	000e      	movs	r6, r1
 8002ec4:	2501      	movs	r5, #1
 8002ec6:	2a38      	cmp	r2, #56	@ 0x38
 8002ec8:	dc10      	bgt.n	8002eec <__aeabi_dsub+0x4c4>
 8002eca:	2a1f      	cmp	r2, #31
 8002ecc:	dc7f      	bgt.n	8002fce <__aeabi_dsub+0x5a6>
 8002ece:	2120      	movs	r1, #32
 8002ed0:	0025      	movs	r5, r4
 8002ed2:	1a89      	subs	r1, r1, r2
 8002ed4:	0007      	movs	r7, r0
 8002ed6:	4088      	lsls	r0, r1
 8002ed8:	408d      	lsls	r5, r1
 8002eda:	40d7      	lsrs	r7, r2
 8002edc:	40d4      	lsrs	r4, r2
 8002ede:	1e41      	subs	r1, r0, #1
 8002ee0:	4188      	sbcs	r0, r1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	433d      	orrs	r5, r7
 8002ee6:	1b1b      	subs	r3, r3, r4
 8002ee8:	4305      	orrs	r5, r0
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	4662      	mov	r2, ip
 8002eee:	1b55      	subs	r5, r2, r5
 8002ef0:	45ac      	cmp	ip, r5
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	9b02      	ldr	r3, [sp, #8]
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	464f      	mov	r7, r9
 8002efa:	1a9c      	subs	r4, r3, r2
 8002efc:	e5f6      	b.n	8002aec <__aeabi_dsub+0xc4>
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	d000      	beq.n	8002f04 <__aeabi_dsub+0x4dc>
 8002f02:	e0b7      	b.n	8003074 <__aeabi_dsub+0x64c>
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	d100      	bne.n	8002f0a <__aeabi_dsub+0x4e2>
 8002f08:	e0f0      	b.n	80030ec <__aeabi_dsub+0x6c4>
 8002f0a:	2601      	movs	r6, #1
 8002f0c:	400e      	ands	r6, r1
 8002f0e:	4663      	mov	r3, ip
 8002f10:	9802      	ldr	r0, [sp, #8]
 8002f12:	08d9      	lsrs	r1, r3, #3
 8002f14:	0742      	lsls	r2, r0, #29
 8002f16:	430a      	orrs	r2, r1
 8002f18:	08c4      	lsrs	r4, r0, #3
 8002f1a:	e696      	b.n	8002c4a <__aeabi_dsub+0x222>
 8002f1c:	4c85      	ldr	r4, [pc, #532]	@ (8003134 <__aeabi_dsub+0x70c>)
 8002f1e:	1aff      	subs	r7, r7, r3
 8002f20:	4014      	ands	r4, r2
 8002f22:	0762      	lsls	r2, r4, #29
 8002f24:	08e4      	lsrs	r4, r4, #3
 8002f26:	e760      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8002f28:	4981      	ldr	r1, [pc, #516]	@ (8003130 <__aeabi_dsub+0x708>)
 8002f2a:	428a      	cmp	r2, r1
 8002f2c:	d100      	bne.n	8002f30 <__aeabi_dsub+0x508>
 8002f2e:	e0c9      	b.n	80030c4 <__aeabi_dsub+0x69c>
 8002f30:	4663      	mov	r3, ip
 8002f32:	18c1      	adds	r1, r0, r3
 8002f34:	4281      	cmp	r1, r0
 8002f36:	4180      	sbcs	r0, r0
 8002f38:	9b02      	ldr	r3, [sp, #8]
 8002f3a:	4240      	negs	r0, r0
 8002f3c:	18e3      	adds	r3, r4, r3
 8002f3e:	181b      	adds	r3, r3, r0
 8002f40:	07dd      	lsls	r5, r3, #31
 8002f42:	085c      	lsrs	r4, r3, #1
 8002f44:	2307      	movs	r3, #7
 8002f46:	0849      	lsrs	r1, r1, #1
 8002f48:	430d      	orrs	r5, r1
 8002f4a:	0017      	movs	r7, r2
 8002f4c:	402b      	ands	r3, r5
 8002f4e:	e710      	b.n	8002d72 <__aeabi_dsub+0x34a>
 8002f50:	4663      	mov	r3, ip
 8002f52:	1a1d      	subs	r5, r3, r0
 8002f54:	45ac      	cmp	ip, r5
 8002f56:	4192      	sbcs	r2, r2
 8002f58:	2601      	movs	r6, #1
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	4252      	negs	r2, r2
 8002f5e:	1b1c      	subs	r4, r3, r4
 8002f60:	4688      	mov	r8, r1
 8002f62:	1aa4      	subs	r4, r4, r2
 8002f64:	400e      	ands	r6, r1
 8002f66:	e5c6      	b.n	8002af6 <__aeabi_dsub+0xce>
 8002f68:	4663      	mov	r3, ip
 8002f6a:	18c5      	adds	r5, r0, r3
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4285      	cmp	r5, r0
 8002f70:	4180      	sbcs	r0, r0
 8002f72:	469c      	mov	ip, r3
 8002f74:	4240      	negs	r0, r0
 8002f76:	4464      	add	r4, ip
 8002f78:	1824      	adds	r4, r4, r0
 8002f7a:	2701      	movs	r7, #1
 8002f7c:	0223      	lsls	r3, r4, #8
 8002f7e:	d400      	bmi.n	8002f82 <__aeabi_dsub+0x55a>
 8002f80:	e6f5      	b.n	8002d6e <__aeabi_dsub+0x346>
 8002f82:	2702      	movs	r7, #2
 8002f84:	e641      	b.n	8002c0a <__aeabi_dsub+0x1e2>
 8002f86:	4663      	mov	r3, ip
 8002f88:	1ac5      	subs	r5, r0, r3
 8002f8a:	42a8      	cmp	r0, r5
 8002f8c:	4180      	sbcs	r0, r0
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4240      	negs	r0, r0
 8002f92:	1ae4      	subs	r4, r4, r3
 8002f94:	2701      	movs	r7, #1
 8002f96:	1a24      	subs	r4, r4, r0
 8002f98:	e5a8      	b.n	8002aec <__aeabi_dsub+0xc4>
 8002f9a:	9d02      	ldr	r5, [sp, #8]
 8002f9c:	4652      	mov	r2, sl
 8002f9e:	002b      	movs	r3, r5
 8002fa0:	3a20      	subs	r2, #32
 8002fa2:	40d3      	lsrs	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	4653      	mov	r3, sl
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d006      	beq.n	8002fba <__aeabi_dsub+0x592>
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	002b      	movs	r3, r5
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	4662      	mov	r2, ip
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	4693      	mov	fp, r2
 8002fba:	465d      	mov	r5, fp
 8002fbc:	1e6b      	subs	r3, r5, #1
 8002fbe:	419d      	sbcs	r5, r3
 8002fc0:	430d      	orrs	r5, r1
 8002fc2:	e615      	b.n	8002bf0 <__aeabi_dsub+0x1c8>
 8002fc4:	0762      	lsls	r2, r4, #29
 8002fc6:	08c0      	lsrs	r0, r0, #3
 8002fc8:	4302      	orrs	r2, r0
 8002fca:	08e4      	lsrs	r4, r4, #3
 8002fcc:	e70d      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0027      	movs	r7, r4
 8002fd2:	3920      	subs	r1, #32
 8002fd4:	40cf      	lsrs	r7, r1
 8002fd6:	2a20      	cmp	r2, #32
 8002fd8:	d005      	beq.n	8002fe6 <__aeabi_dsub+0x5be>
 8002fda:	2140      	movs	r1, #64	@ 0x40
 8002fdc:	1a8a      	subs	r2, r1, r2
 8002fde:	4094      	lsls	r4, r2
 8002fe0:	0025      	movs	r5, r4
 8002fe2:	4305      	orrs	r5, r0
 8002fe4:	9503      	str	r5, [sp, #12]
 8002fe6:	9d03      	ldr	r5, [sp, #12]
 8002fe8:	1e6a      	subs	r2, r5, #1
 8002fea:	4195      	sbcs	r5, r2
 8002fec:	433d      	orrs	r5, r7
 8002fee:	e77d      	b.n	8002eec <__aeabi_dsub+0x4c4>
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d100      	bne.n	8002ff6 <__aeabi_dsub+0x5ce>
 8002ff4:	e744      	b.n	8002e80 <__aeabi_dsub+0x458>
 8002ff6:	2601      	movs	r6, #1
 8002ff8:	400e      	ands	r6, r1
 8002ffa:	4663      	mov	r3, ip
 8002ffc:	08d9      	lsrs	r1, r3, #3
 8002ffe:	9b02      	ldr	r3, [sp, #8]
 8003000:	075a      	lsls	r2, r3, #29
 8003002:	430a      	orrs	r2, r1
 8003004:	08dc      	lsrs	r4, r3, #3
 8003006:	e6f0      	b.n	8002dea <__aeabi_dsub+0x3c2>
 8003008:	2a00      	cmp	r2, #0
 800300a:	d028      	beq.n	800305e <__aeabi_dsub+0x636>
 800300c:	4662      	mov	r2, ip
 800300e:	9f02      	ldr	r7, [sp, #8]
 8003010:	08c0      	lsrs	r0, r0, #3
 8003012:	433a      	orrs	r2, r7
 8003014:	d100      	bne.n	8003018 <__aeabi_dsub+0x5f0>
 8003016:	e6dc      	b.n	8002dd2 <__aeabi_dsub+0x3aa>
 8003018:	0762      	lsls	r2, r4, #29
 800301a:	4310      	orrs	r0, r2
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	08e4      	lsrs	r4, r4, #3
 8003020:	0312      	lsls	r2, r2, #12
 8003022:	4214      	tst	r4, r2
 8003024:	d009      	beq.n	800303a <__aeabi_dsub+0x612>
 8003026:	08fd      	lsrs	r5, r7, #3
 8003028:	4215      	tst	r5, r2
 800302a:	d106      	bne.n	800303a <__aeabi_dsub+0x612>
 800302c:	4663      	mov	r3, ip
 800302e:	2601      	movs	r6, #1
 8003030:	002c      	movs	r4, r5
 8003032:	08d8      	lsrs	r0, r3, #3
 8003034:	077b      	lsls	r3, r7, #29
 8003036:	4318      	orrs	r0, r3
 8003038:	400e      	ands	r6, r1
 800303a:	0f42      	lsrs	r2, r0, #29
 800303c:	00c0      	lsls	r0, r0, #3
 800303e:	08c0      	lsrs	r0, r0, #3
 8003040:	0752      	lsls	r2, r2, #29
 8003042:	4302      	orrs	r2, r0
 8003044:	e601      	b.n	8002c4a <__aeabi_dsub+0x222>
 8003046:	4663      	mov	r3, ip
 8003048:	1a1d      	subs	r5, r3, r0
 800304a:	45ac      	cmp	ip, r5
 800304c:	4192      	sbcs	r2, r2
 800304e:	9b02      	ldr	r3, [sp, #8]
 8003050:	4252      	negs	r2, r2
 8003052:	1b1c      	subs	r4, r3, r4
 8003054:	000e      	movs	r6, r1
 8003056:	4688      	mov	r8, r1
 8003058:	2701      	movs	r7, #1
 800305a:	1aa4      	subs	r4, r4, r2
 800305c:	e546      	b.n	8002aec <__aeabi_dsub+0xc4>
 800305e:	4663      	mov	r3, ip
 8003060:	08d9      	lsrs	r1, r3, #3
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	075a      	lsls	r2, r3, #29
 8003066:	430a      	orrs	r2, r1
 8003068:	08dc      	lsrs	r4, r3, #3
 800306a:	e5ee      	b.n	8002c4a <__aeabi_dsub+0x222>
 800306c:	4663      	mov	r3, ip
 800306e:	9c02      	ldr	r4, [sp, #8]
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	e6c7      	b.n	8002e04 <__aeabi_dsub+0x3dc>
 8003074:	08c0      	lsrs	r0, r0, #3
 8003076:	2a00      	cmp	r2, #0
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x654>
 800307a:	e6aa      	b.n	8002dd2 <__aeabi_dsub+0x3aa>
 800307c:	0762      	lsls	r2, r4, #29
 800307e:	4310      	orrs	r0, r2
 8003080:	2280      	movs	r2, #128	@ 0x80
 8003082:	08e4      	lsrs	r4, r4, #3
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	4214      	tst	r4, r2
 8003088:	d0d7      	beq.n	800303a <__aeabi_dsub+0x612>
 800308a:	9f02      	ldr	r7, [sp, #8]
 800308c:	08fd      	lsrs	r5, r7, #3
 800308e:	4215      	tst	r5, r2
 8003090:	d1d3      	bne.n	800303a <__aeabi_dsub+0x612>
 8003092:	4663      	mov	r3, ip
 8003094:	2601      	movs	r6, #1
 8003096:	08d8      	lsrs	r0, r3, #3
 8003098:	077b      	lsls	r3, r7, #29
 800309a:	002c      	movs	r4, r5
 800309c:	4318      	orrs	r0, r3
 800309e:	400e      	ands	r6, r1
 80030a0:	e7cb      	b.n	800303a <__aeabi_dsub+0x612>
 80030a2:	000a      	movs	r2, r1
 80030a4:	0027      	movs	r7, r4
 80030a6:	3a20      	subs	r2, #32
 80030a8:	40d7      	lsrs	r7, r2
 80030aa:	2920      	cmp	r1, #32
 80030ac:	d005      	beq.n	80030ba <__aeabi_dsub+0x692>
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	1a52      	subs	r2, r2, r1
 80030b2:	4094      	lsls	r4, r2
 80030b4:	0025      	movs	r5, r4
 80030b6:	4305      	orrs	r5, r0
 80030b8:	9503      	str	r5, [sp, #12]
 80030ba:	9d03      	ldr	r5, [sp, #12]
 80030bc:	1e6a      	subs	r2, r5, #1
 80030be:	4195      	sbcs	r5, r2
 80030c0:	432f      	orrs	r7, r5
 80030c2:	e610      	b.n	8002ce6 <__aeabi_dsub+0x2be>
 80030c4:	0014      	movs	r4, r2
 80030c6:	2500      	movs	r5, #0
 80030c8:	2200      	movs	r2, #0
 80030ca:	e556      	b.n	8002b7a <__aeabi_dsub+0x152>
 80030cc:	9b02      	ldr	r3, [sp, #8]
 80030ce:	4460      	add	r0, ip
 80030d0:	4699      	mov	r9, r3
 80030d2:	4560      	cmp	r0, ip
 80030d4:	4192      	sbcs	r2, r2
 80030d6:	444c      	add	r4, r9
 80030d8:	4252      	negs	r2, r2
 80030da:	0005      	movs	r5, r0
 80030dc:	18a4      	adds	r4, r4, r2
 80030de:	e74c      	b.n	8002f7a <__aeabi_dsub+0x552>
 80030e0:	001a      	movs	r2, r3
 80030e2:	001c      	movs	r4, r3
 80030e4:	432a      	orrs	r2, r5
 80030e6:	d000      	beq.n	80030ea <__aeabi_dsub+0x6c2>
 80030e8:	e6b3      	b.n	8002e52 <__aeabi_dsub+0x42a>
 80030ea:	e6c9      	b.n	8002e80 <__aeabi_dsub+0x458>
 80030ec:	2480      	movs	r4, #128	@ 0x80
 80030ee:	2600      	movs	r6, #0
 80030f0:	0324      	lsls	r4, r4, #12
 80030f2:	e5ae      	b.n	8002c52 <__aeabi_dsub+0x22a>
 80030f4:	2120      	movs	r1, #32
 80030f6:	2500      	movs	r5, #0
 80030f8:	1a09      	subs	r1, r1, r0
 80030fa:	e517      	b.n	8002b2c <__aeabi_dsub+0x104>
 80030fc:	2200      	movs	r2, #0
 80030fe:	2500      	movs	r5, #0
 8003100:	4c0b      	ldr	r4, [pc, #44]	@ (8003130 <__aeabi_dsub+0x708>)
 8003102:	e53a      	b.n	8002b7a <__aeabi_dsub+0x152>
 8003104:	2d00      	cmp	r5, #0
 8003106:	d100      	bne.n	800310a <__aeabi_dsub+0x6e2>
 8003108:	e5f6      	b.n	8002cf8 <__aeabi_dsub+0x2d0>
 800310a:	464b      	mov	r3, r9
 800310c:	1bda      	subs	r2, r3, r7
 800310e:	4692      	mov	sl, r2
 8003110:	2f00      	cmp	r7, #0
 8003112:	d100      	bne.n	8003116 <__aeabi_dsub+0x6ee>
 8003114:	e66f      	b.n	8002df6 <__aeabi_dsub+0x3ce>
 8003116:	2a38      	cmp	r2, #56	@ 0x38
 8003118:	dc05      	bgt.n	8003126 <__aeabi_dsub+0x6fe>
 800311a:	2680      	movs	r6, #128	@ 0x80
 800311c:	0436      	lsls	r6, r6, #16
 800311e:	4334      	orrs	r4, r6
 8003120:	4688      	mov	r8, r1
 8003122:	000e      	movs	r6, r1
 8003124:	e6d1      	b.n	8002eca <__aeabi_dsub+0x4a2>
 8003126:	4688      	mov	r8, r1
 8003128:	000e      	movs	r6, r1
 800312a:	2501      	movs	r5, #1
 800312c:	e6de      	b.n	8002eec <__aeabi_dsub+0x4c4>
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	000007ff 	.word	0x000007ff
 8003134:	ff7fffff 	.word	0xff7fffff
 8003138:	000007fe 	.word	0x000007fe
 800313c:	2d00      	cmp	r5, #0
 800313e:	d100      	bne.n	8003142 <__aeabi_dsub+0x71a>
 8003140:	e668      	b.n	8002e14 <__aeabi_dsub+0x3ec>
 8003142:	464b      	mov	r3, r9
 8003144:	1bd9      	subs	r1, r3, r7
 8003146:	2f00      	cmp	r7, #0
 8003148:	d101      	bne.n	800314e <__aeabi_dsub+0x726>
 800314a:	468a      	mov	sl, r1
 800314c:	e5a7      	b.n	8002c9e <__aeabi_dsub+0x276>
 800314e:	2701      	movs	r7, #1
 8003150:	2938      	cmp	r1, #56	@ 0x38
 8003152:	dd00      	ble.n	8003156 <__aeabi_dsub+0x72e>
 8003154:	e5c7      	b.n	8002ce6 <__aeabi_dsub+0x2be>
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	0412      	lsls	r2, r2, #16
 800315a:	4314      	orrs	r4, r2
 800315c:	e5af      	b.n	8002cbe <__aeabi_dsub+0x296>
 800315e:	46c0      	nop			@ (mov r8, r8)

08003160 <__aeabi_d2iz>:
 8003160:	000b      	movs	r3, r1
 8003162:	0002      	movs	r2, r0
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	4d16      	ldr	r5, [pc, #88]	@ (80031c0 <__aeabi_d2iz+0x60>)
 8003168:	030c      	lsls	r4, r1, #12
 800316a:	b082      	sub	sp, #8
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	2000      	movs	r0, #0
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	0b24      	lsrs	r4, r4, #12
 8003176:	0d49      	lsrs	r1, r1, #21
 8003178:	0fde      	lsrs	r6, r3, #31
 800317a:	42a9      	cmp	r1, r5
 800317c:	dd04      	ble.n	8003188 <__aeabi_d2iz+0x28>
 800317e:	4811      	ldr	r0, [pc, #68]	@ (80031c4 <__aeabi_d2iz+0x64>)
 8003180:	4281      	cmp	r1, r0
 8003182:	dd03      	ble.n	800318c <__aeabi_d2iz+0x2c>
 8003184:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <__aeabi_d2iz+0x68>)
 8003186:	18f0      	adds	r0, r6, r3
 8003188:	b002      	add	sp, #8
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	2080      	movs	r0, #128	@ 0x80
 800318e:	0340      	lsls	r0, r0, #13
 8003190:	4320      	orrs	r0, r4
 8003192:	4c0e      	ldr	r4, [pc, #56]	@ (80031cc <__aeabi_d2iz+0x6c>)
 8003194:	1a64      	subs	r4, r4, r1
 8003196:	2c1f      	cmp	r4, #31
 8003198:	dd08      	ble.n	80031ac <__aeabi_d2iz+0x4c>
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <__aeabi_d2iz+0x70>)
 800319c:	1a5b      	subs	r3, r3, r1
 800319e:	40d8      	lsrs	r0, r3
 80031a0:	0003      	movs	r3, r0
 80031a2:	4258      	negs	r0, r3
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	d1ef      	bne.n	8003188 <__aeabi_d2iz+0x28>
 80031a8:	0018      	movs	r0, r3
 80031aa:	e7ed      	b.n	8003188 <__aeabi_d2iz+0x28>
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <__aeabi_d2iz+0x74>)
 80031ae:	9a00      	ldr	r2, [sp, #0]
 80031b0:	469c      	mov	ip, r3
 80031b2:	0003      	movs	r3, r0
 80031b4:	4461      	add	r1, ip
 80031b6:	408b      	lsls	r3, r1
 80031b8:	40e2      	lsrs	r2, r4
 80031ba:	4313      	orrs	r3, r2
 80031bc:	e7f1      	b.n	80031a2 <__aeabi_d2iz+0x42>
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	000003fe 	.word	0x000003fe
 80031c4:	0000041d 	.word	0x0000041d
 80031c8:	7fffffff 	.word	0x7fffffff
 80031cc:	00000433 	.word	0x00000433
 80031d0:	00000413 	.word	0x00000413
 80031d4:	fffffbed 	.word	0xfffffbed

080031d8 <__aeabi_i2d>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	2800      	cmp	r0, #0
 80031dc:	d016      	beq.n	800320c <__aeabi_i2d+0x34>
 80031de:	17c3      	asrs	r3, r0, #31
 80031e0:	18c5      	adds	r5, r0, r3
 80031e2:	405d      	eors	r5, r3
 80031e4:	0fc4      	lsrs	r4, r0, #31
 80031e6:	0028      	movs	r0, r5
 80031e8:	f000 f914 	bl	8003414 <__clzsi2>
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <__aeabi_i2d+0x58>)
 80031ee:	1a1b      	subs	r3, r3, r0
 80031f0:	055b      	lsls	r3, r3, #21
 80031f2:	0d5b      	lsrs	r3, r3, #21
 80031f4:	280a      	cmp	r0, #10
 80031f6:	dc14      	bgt.n	8003222 <__aeabi_i2d+0x4a>
 80031f8:	0002      	movs	r2, r0
 80031fa:	002e      	movs	r6, r5
 80031fc:	3215      	adds	r2, #21
 80031fe:	4096      	lsls	r6, r2
 8003200:	220b      	movs	r2, #11
 8003202:	1a12      	subs	r2, r2, r0
 8003204:	40d5      	lsrs	r5, r2
 8003206:	032d      	lsls	r5, r5, #12
 8003208:	0b2d      	lsrs	r5, r5, #12
 800320a:	e003      	b.n	8003214 <__aeabi_i2d+0x3c>
 800320c:	2400      	movs	r4, #0
 800320e:	2300      	movs	r3, #0
 8003210:	2500      	movs	r5, #0
 8003212:	2600      	movs	r6, #0
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	432b      	orrs	r3, r5
 8003218:	07e4      	lsls	r4, r4, #31
 800321a:	4323      	orrs	r3, r4
 800321c:	0030      	movs	r0, r6
 800321e:	0019      	movs	r1, r3
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	380b      	subs	r0, #11
 8003224:	4085      	lsls	r5, r0
 8003226:	032d      	lsls	r5, r5, #12
 8003228:	2600      	movs	r6, #0
 800322a:	0b2d      	lsrs	r5, r5, #12
 800322c:	e7f2      	b.n	8003214 <__aeabi_i2d+0x3c>
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	0000041e 	.word	0x0000041e

08003234 <__aeabi_ui2d>:
 8003234:	b510      	push	{r4, lr}
 8003236:	1e04      	subs	r4, r0, #0
 8003238:	d010      	beq.n	800325c <__aeabi_ui2d+0x28>
 800323a:	f000 f8eb 	bl	8003414 <__clzsi2>
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <__aeabi_ui2d+0x44>)
 8003240:	1a1b      	subs	r3, r3, r0
 8003242:	055b      	lsls	r3, r3, #21
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	280a      	cmp	r0, #10
 8003248:	dc0f      	bgt.n	800326a <__aeabi_ui2d+0x36>
 800324a:	220b      	movs	r2, #11
 800324c:	0021      	movs	r1, r4
 800324e:	1a12      	subs	r2, r2, r0
 8003250:	40d1      	lsrs	r1, r2
 8003252:	3015      	adds	r0, #21
 8003254:	030a      	lsls	r2, r1, #12
 8003256:	4084      	lsls	r4, r0
 8003258:	0b12      	lsrs	r2, r2, #12
 800325a:	e001      	b.n	8003260 <__aeabi_ui2d+0x2c>
 800325c:	2300      	movs	r3, #0
 800325e:	2200      	movs	r2, #0
 8003260:	051b      	lsls	r3, r3, #20
 8003262:	4313      	orrs	r3, r2
 8003264:	0020      	movs	r0, r4
 8003266:	0019      	movs	r1, r3
 8003268:	bd10      	pop	{r4, pc}
 800326a:	0022      	movs	r2, r4
 800326c:	380b      	subs	r0, #11
 800326e:	4082      	lsls	r2, r0
 8003270:	0312      	lsls	r2, r2, #12
 8003272:	2400      	movs	r4, #0
 8003274:	0b12      	lsrs	r2, r2, #12
 8003276:	e7f3      	b.n	8003260 <__aeabi_ui2d+0x2c>
 8003278:	0000041e 	.word	0x0000041e

0800327c <__aeabi_f2d>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	0242      	lsls	r2, r0, #9
 8003280:	0043      	lsls	r3, r0, #1
 8003282:	0fc4      	lsrs	r4, r0, #31
 8003284:	20fe      	movs	r0, #254	@ 0xfe
 8003286:	0e1b      	lsrs	r3, r3, #24
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	0a55      	lsrs	r5, r2, #9
 800328c:	4208      	tst	r0, r1
 800328e:	d00c      	beq.n	80032aa <__aeabi_f2d+0x2e>
 8003290:	21e0      	movs	r1, #224	@ 0xe0
 8003292:	0089      	lsls	r1, r1, #2
 8003294:	468c      	mov	ip, r1
 8003296:	076d      	lsls	r5, r5, #29
 8003298:	0b12      	lsrs	r2, r2, #12
 800329a:	4463      	add	r3, ip
 800329c:	051b      	lsls	r3, r3, #20
 800329e:	4313      	orrs	r3, r2
 80032a0:	07e4      	lsls	r4, r4, #31
 80032a2:	4323      	orrs	r3, r4
 80032a4:	0028      	movs	r0, r5
 80032a6:	0019      	movs	r1, r3
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d114      	bne.n	80032d8 <__aeabi_f2d+0x5c>
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	d01b      	beq.n	80032ea <__aeabi_f2d+0x6e>
 80032b2:	0028      	movs	r0, r5
 80032b4:	f000 f8ae 	bl	8003414 <__clzsi2>
 80032b8:	280a      	cmp	r0, #10
 80032ba:	dc1c      	bgt.n	80032f6 <__aeabi_f2d+0x7a>
 80032bc:	230b      	movs	r3, #11
 80032be:	002a      	movs	r2, r5
 80032c0:	1a1b      	subs	r3, r3, r0
 80032c2:	40da      	lsrs	r2, r3
 80032c4:	0003      	movs	r3, r0
 80032c6:	3315      	adds	r3, #21
 80032c8:	409d      	lsls	r5, r3
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <__aeabi_f2d+0x88>)
 80032cc:	0312      	lsls	r2, r2, #12
 80032ce:	1a1b      	subs	r3, r3, r0
 80032d0:	055b      	lsls	r3, r3, #21
 80032d2:	0b12      	lsrs	r2, r2, #12
 80032d4:	0d5b      	lsrs	r3, r3, #21
 80032d6:	e7e1      	b.n	800329c <__aeabi_f2d+0x20>
 80032d8:	2d00      	cmp	r5, #0
 80032da:	d009      	beq.n	80032f0 <__aeabi_f2d+0x74>
 80032dc:	0b13      	lsrs	r3, r2, #12
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	0312      	lsls	r2, r2, #12
 80032e2:	431a      	orrs	r2, r3
 80032e4:	076d      	lsls	r5, r5, #29
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <__aeabi_f2d+0x8c>)
 80032e8:	e7d8      	b.n	800329c <__aeabi_f2d+0x20>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2200      	movs	r2, #0
 80032ee:	e7d5      	b.n	800329c <__aeabi_f2d+0x20>
 80032f0:	2200      	movs	r2, #0
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <__aeabi_f2d+0x8c>)
 80032f4:	e7d2      	b.n	800329c <__aeabi_f2d+0x20>
 80032f6:	0003      	movs	r3, r0
 80032f8:	002a      	movs	r2, r5
 80032fa:	3b0b      	subs	r3, #11
 80032fc:	409a      	lsls	r2, r3
 80032fe:	2500      	movs	r5, #0
 8003300:	e7e3      	b.n	80032ca <__aeabi_f2d+0x4e>
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	00000389 	.word	0x00000389
 8003308:	000007ff 	.word	0x000007ff

0800330c <__aeabi_d2f>:
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	004b      	lsls	r3, r1, #1
 8003310:	030f      	lsls	r7, r1, #12
 8003312:	0d5b      	lsrs	r3, r3, #21
 8003314:	4c3b      	ldr	r4, [pc, #236]	@ (8003404 <__aeabi_d2f+0xf8>)
 8003316:	0f45      	lsrs	r5, r0, #29
 8003318:	b083      	sub	sp, #12
 800331a:	0a7f      	lsrs	r7, r7, #9
 800331c:	1c5e      	adds	r6, r3, #1
 800331e:	432f      	orrs	r7, r5
 8003320:	9000      	str	r0, [sp, #0]
 8003322:	9101      	str	r1, [sp, #4]
 8003324:	0fca      	lsrs	r2, r1, #31
 8003326:	00c5      	lsls	r5, r0, #3
 8003328:	4226      	tst	r6, r4
 800332a:	d00b      	beq.n	8003344 <__aeabi_d2f+0x38>
 800332c:	4936      	ldr	r1, [pc, #216]	@ (8003408 <__aeabi_d2f+0xfc>)
 800332e:	185c      	adds	r4, r3, r1
 8003330:	2cfe      	cmp	r4, #254	@ 0xfe
 8003332:	dd13      	ble.n	800335c <__aeabi_d2f+0x50>
 8003334:	20ff      	movs	r0, #255	@ 0xff
 8003336:	2300      	movs	r3, #0
 8003338:	05c0      	lsls	r0, r0, #23
 800333a:	4318      	orrs	r0, r3
 800333c:	07d2      	lsls	r2, r2, #31
 800333e:	4310      	orrs	r0, r2
 8003340:	b003      	add	sp, #12
 8003342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <__aeabi_d2f+0x42>
 8003348:	2000      	movs	r0, #0
 800334a:	2300      	movs	r3, #0
 800334c:	e7f4      	b.n	8003338 <__aeabi_d2f+0x2c>
 800334e:	433d      	orrs	r5, r7
 8003350:	d0f0      	beq.n	8003334 <__aeabi_d2f+0x28>
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	03db      	lsls	r3, r3, #15
 8003356:	20ff      	movs	r0, #255	@ 0xff
 8003358:	433b      	orrs	r3, r7
 800335a:	e7ed      	b.n	8003338 <__aeabi_d2f+0x2c>
 800335c:	2c00      	cmp	r4, #0
 800335e:	dd14      	ble.n	800338a <__aeabi_d2f+0x7e>
 8003360:	9b00      	ldr	r3, [sp, #0]
 8003362:	00ff      	lsls	r7, r7, #3
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	4183      	sbcs	r3, r0
 800336a:	0f69      	lsrs	r1, r5, #29
 800336c:	433b      	orrs	r3, r7
 800336e:	430b      	orrs	r3, r1
 8003370:	0759      	lsls	r1, r3, #29
 8003372:	d041      	beq.n	80033f8 <__aeabi_d2f+0xec>
 8003374:	210f      	movs	r1, #15
 8003376:	4019      	ands	r1, r3
 8003378:	2904      	cmp	r1, #4
 800337a:	d028      	beq.n	80033ce <__aeabi_d2f+0xc2>
 800337c:	3304      	adds	r3, #4
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	d525      	bpl.n	80033ce <__aeabi_d2f+0xc2>
 8003382:	3401      	adds	r4, #1
 8003384:	2300      	movs	r3, #0
 8003386:	b2e0      	uxtb	r0, r4
 8003388:	e7d6      	b.n	8003338 <__aeabi_d2f+0x2c>
 800338a:	0021      	movs	r1, r4
 800338c:	3117      	adds	r1, #23
 800338e:	dbdb      	blt.n	8003348 <__aeabi_d2f+0x3c>
 8003390:	2180      	movs	r1, #128	@ 0x80
 8003392:	201e      	movs	r0, #30
 8003394:	0409      	lsls	r1, r1, #16
 8003396:	4339      	orrs	r1, r7
 8003398:	1b00      	subs	r0, r0, r4
 800339a:	281f      	cmp	r0, #31
 800339c:	dd1b      	ble.n	80033d6 <__aeabi_d2f+0xca>
 800339e:	2602      	movs	r6, #2
 80033a0:	4276      	negs	r6, r6
 80033a2:	1b34      	subs	r4, r6, r4
 80033a4:	000e      	movs	r6, r1
 80033a6:	40e6      	lsrs	r6, r4
 80033a8:	0034      	movs	r4, r6
 80033aa:	2820      	cmp	r0, #32
 80033ac:	d004      	beq.n	80033b8 <__aeabi_d2f+0xac>
 80033ae:	4817      	ldr	r0, [pc, #92]	@ (800340c <__aeabi_d2f+0x100>)
 80033b0:	4684      	mov	ip, r0
 80033b2:	4463      	add	r3, ip
 80033b4:	4099      	lsls	r1, r3
 80033b6:	430d      	orrs	r5, r1
 80033b8:	002b      	movs	r3, r5
 80033ba:	1e59      	subs	r1, r3, #1
 80033bc:	418b      	sbcs	r3, r1
 80033be:	4323      	orrs	r3, r4
 80033c0:	0759      	lsls	r1, r3, #29
 80033c2:	d015      	beq.n	80033f0 <__aeabi_d2f+0xe4>
 80033c4:	210f      	movs	r1, #15
 80033c6:	2400      	movs	r4, #0
 80033c8:	4019      	ands	r1, r3
 80033ca:	2904      	cmp	r1, #4
 80033cc:	d117      	bne.n	80033fe <__aeabi_d2f+0xf2>
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	b2e0      	uxtb	r0, r4
 80033d4:	e7b0      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033d6:	4c0e      	ldr	r4, [pc, #56]	@ (8003410 <__aeabi_d2f+0x104>)
 80033d8:	191c      	adds	r4, r3, r4
 80033da:	002b      	movs	r3, r5
 80033dc:	40a5      	lsls	r5, r4
 80033de:	40c3      	lsrs	r3, r0
 80033e0:	40a1      	lsls	r1, r4
 80033e2:	1e68      	subs	r0, r5, #1
 80033e4:	4185      	sbcs	r5, r0
 80033e6:	4329      	orrs	r1, r5
 80033e8:	430b      	orrs	r3, r1
 80033ea:	2400      	movs	r4, #0
 80033ec:	0759      	lsls	r1, r3, #29
 80033ee:	d1c1      	bne.n	8003374 <__aeabi_d2f+0x68>
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	2000      	movs	r0, #0
 80033f4:	0a5b      	lsrs	r3, r3, #9
 80033f6:	e79f      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	b2e0      	uxtb	r0, r4
 80033fc:	e79c      	b.n	8003338 <__aeabi_d2f+0x2c>
 80033fe:	3304      	adds	r3, #4
 8003400:	e7e5      	b.n	80033ce <__aeabi_d2f+0xc2>
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	000007fe 	.word	0x000007fe
 8003408:	fffffc80 	.word	0xfffffc80
 800340c:	fffffca2 	.word	0xfffffca2
 8003410:	fffffc82 	.word	0xfffffc82

08003414 <__clzsi2>:
 8003414:	211c      	movs	r1, #28
 8003416:	2301      	movs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	4298      	cmp	r0, r3
 800341c:	d301      	bcc.n	8003422 <__clzsi2+0xe>
 800341e:	0c00      	lsrs	r0, r0, #16
 8003420:	3910      	subs	r1, #16
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	4298      	cmp	r0, r3
 8003426:	d301      	bcc.n	800342c <__clzsi2+0x18>
 8003428:	0a00      	lsrs	r0, r0, #8
 800342a:	3908      	subs	r1, #8
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	4298      	cmp	r0, r3
 8003430:	d301      	bcc.n	8003436 <__clzsi2+0x22>
 8003432:	0900      	lsrs	r0, r0, #4
 8003434:	3904      	subs	r1, #4
 8003436:	a202      	add	r2, pc, #8	@ (adr r2, 8003440 <__clzsi2+0x2c>)
 8003438:	5c10      	ldrb	r0, [r2, r0]
 800343a:	1840      	adds	r0, r0, r1
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	02020304 	.word	0x02020304
 8003444:	01010101 	.word	0x01010101
	...

08003450 <__clzdi2>:
 8003450:	b510      	push	{r4, lr}
 8003452:	2900      	cmp	r1, #0
 8003454:	d103      	bne.n	800345e <__clzdi2+0xe>
 8003456:	f7ff ffdd 	bl	8003414 <__clzsi2>
 800345a:	3020      	adds	r0, #32
 800345c:	e002      	b.n	8003464 <__clzdi2+0x14>
 800345e:	0008      	movs	r0, r1
 8003460:	f7ff ffd8 	bl	8003414 <__clzsi2>
 8003464:	bd10      	pop	{r4, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)

08003468 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800346c:	23a0      	movs	r3, #160	@ 0xa0
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	2200      	movs	r2, #0
 8003472:	2110      	movs	r1, #16
 8003474:	0018      	movs	r0, r3
 8003476:	f00b fe22 	bl	800f0be <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800347a:	2001      	movs	r0, #1
 800347c:	f00b f852 	bl	800e524 <HAL_Delay>
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800348a:	23a0      	movs	r3, #160	@ 0xa0
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	2201      	movs	r2, #1
 8003490:	2110      	movs	r1, #16
 8003492:	0018      	movs	r0, r3
 8003494:	f00b fe13 	bl	800f0be <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003498:	2001      	movs	r0, #1
 800349a:	f00b f843 	bl	800e524 <HAL_Delay>
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	0002      	movs	r2, r0
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <SPI_TxByte+0x30>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d1f8      	bne.n	80034b2 <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034c0:	1df9      	adds	r1, r7, #7
 80034c2:	4804      	ldr	r0, [pc, #16]	@ (80034d4 <SPI_TxByte+0x30>)
 80034c4:	2364      	movs	r3, #100	@ 0x64
 80034c6:	2201      	movs	r2, #1
 80034c8:	f00e fc8e 	bl	8011de8 <HAL_SPI_Transmit>
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000099c 	.word	0x2000099c

080034d8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	000a      	movs	r2, r1
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <SPI_TxBuffer+0x34>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2202      	movs	r2, #2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d1f8      	bne.n	80034e8 <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80034f6:	1cbb      	adds	r3, r7, #2
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4803      	ldr	r0, [pc, #12]	@ (800350c <SPI_TxBuffer+0x34>)
 80034fe:	2364      	movs	r3, #100	@ 0x64
 8003500:	f00e fc72 	bl	8011de8 <HAL_SPI_Transmit>
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000099c 	.word	0x2000099c

08003510 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	22ff      	movs	r2, #255	@ 0xff
 800351a:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <SPI_RxByte+0x38>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d1f8      	bne.n	800351e <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800352c:	1dba      	adds	r2, r7, #6
 800352e:	1df9      	adds	r1, r7, #7
 8003530:	4805      	ldr	r0, [pc, #20]	@ (8003548 <SPI_RxByte+0x38>)
 8003532:	2364      	movs	r3, #100	@ 0x64
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	f00e fdae 	bl	8012098 <HAL_SPI_TransmitReceive>

	return data;
 800353c:	1dbb      	adds	r3, r7, #6
 800353e:	781b      	ldrb	r3, [r3, #0]
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000099c 	.word	0x2000099c

0800354c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003554:	f7ff ffdc 	bl	8003510 <SPI_RxByte>
 8003558:	0003      	movs	r3, r0
 800355a:	001a      	movs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	701a      	strb	r2, [r3, #0]
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800356e:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <SD_ReadyWait+0x38>)
 8003570:	22fa      	movs	r2, #250	@ 0xfa
 8003572:	0052      	lsls	r2, r2, #1
 8003574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003576:	1dfc      	adds	r4, r7, #7
 8003578:	f7ff ffca 	bl	8003510 <SPI_RxByte>
 800357c:	0003      	movs	r3, r0
 800357e:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2bff      	cmp	r3, #255	@ 0xff
 8003586:	d004      	beq.n	8003592 <SD_ReadyWait+0x2a>
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <SD_ReadyWait+0x38>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <SD_ReadyWait+0xe>

	return res;
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b003      	add	sp, #12
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	200035fc 	.word	0x200035fc

080035a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <SD_PowerOn+0x88>)
 80035ac:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80035ae:	f7ff ff6a 	bl	8003486 <DESELECT>
	for(int i = 0; i < 10; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	e005      	b.n	80035c4 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 80035b8:	20ff      	movs	r0, #255	@ 0xff
 80035ba:	f7ff ff73 	bl	80034a4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	ddf6      	ble.n	80035b8 <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 80035ca:	f7ff ff4d 	bl	8003468 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80035ce:	003b      	movs	r3, r7
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 80035d4:	003b      	movs	r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 80035da:	003b      	movs	r3, r7
 80035dc:	2200      	movs	r2, #0
 80035de:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 80035e0:	003b      	movs	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 80035e6:	003b      	movs	r3, r7
 80035e8:	2200      	movs	r2, #0
 80035ea:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 80035ec:	003b      	movs	r3, r7
 80035ee:	2295      	movs	r2, #149	@ 0x95
 80035f0:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 80035f2:	003b      	movs	r3, r7
 80035f4:	2106      	movs	r1, #6
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff6e 	bl	80034d8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80035fc:	e002      	b.n	8003604 <SD_PowerOn+0x60>
	{
		cnt--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003604:	f7ff ff84 	bl	8003510 <SPI_RxByte>
 8003608:	0003      	movs	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d002      	beq.n	8003614 <SD_PowerOn+0x70>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f4      	bne.n	80035fe <SD_PowerOn+0x5a>
	}

	DESELECT();
 8003614:	f7ff ff37 	bl	8003486 <DESELECT>
	SPI_TxByte(0XFF);
 8003618:	20ff      	movs	r0, #255	@ 0xff
 800361a:	f7ff ff43 	bl	80034a4 <SPI_TxByte>

	PowerFlag = 1;
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <SD_PowerOn+0x8c>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00001fff 	.word	0x00001fff
 8003630:	200005d5 	.word	0x200005d5

08003634 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003638:	4b02      	ldr	r3, [pc, #8]	@ (8003644 <SD_PowerOff+0x10>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200005d5 	.word	0x200005d5

08003648 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800364c:	4b02      	ldr	r3, [pc, #8]	@ (8003658 <SD_CheckPower+0x10>)
 800364e:	781b      	ldrb	r3, [r3, #0]
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	200005d5 	.word	0x200005d5

0800365c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003666:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <SD_RxDataBlock+0x64>)
 8003668:	22c8      	movs	r2, #200	@ 0xc8
 800366a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800366c:	250f      	movs	r5, #15
 800366e:	197c      	adds	r4, r7, r5
 8003670:	f7ff ff4e 	bl	8003510 <SPI_RxByte>
 8003674:	0003      	movs	r3, r0
 8003676:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 8003678:	197b      	adds	r3, r7, r5
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2bff      	cmp	r3, #255	@ 0xff
 800367e:	d104      	bne.n	800368a <SD_RxDataBlock+0x2e>
 8003680:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <SD_RxDataBlock+0x64>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2bfe      	cmp	r3, #254	@ 0xfe
 8003692:	d001      	beq.n	8003698 <SD_RxDataBlock+0x3c>
 8003694:	2300      	movs	r3, #0
 8003696:	e00f      	b.n	80036b8 <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff ff54 	bl	800354c <SPI_RxBytePtr>
	} while(len--);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	603a      	str	r2, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f4      	bne.n	8003698 <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 80036ae:	f7ff ff2f 	bl	8003510 <SPI_RxByte>
	SPI_RxByte();
 80036b2:	f7ff ff2d 	bl	8003510 <SPI_RxByte>

	return TRUE;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bdb0      	pop	{r4, r5, r7, pc}
 80036c0:	200035fa 	.word	0x200035fa

080036c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	000a      	movs	r2, r1
 80036ce:	1cfb      	adds	r3, r7, #3
 80036d0:	701a      	strb	r2, [r3, #0]
	uint8_t resp;
	uint8_t i = 0;
 80036d2:	230e      	movs	r3, #14
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80036da:	f7ff ff45 	bl	8003568 <SD_ReadyWait>
 80036de:	0003      	movs	r3, r0
 80036e0:	2bff      	cmp	r3, #255	@ 0xff
 80036e2:	d001      	beq.n	80036e8 <SD_TxDataBlock+0x24>
 80036e4:	2300      	movs	r3, #0
 80036e6:	e03c      	b.n	8003762 <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 80036e8:	1cfb      	adds	r3, r7, #3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fed9 	bl	80034a4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80036f2:	1cfb      	adds	r3, r7, #3
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2bfd      	cmp	r3, #253	@ 0xfd
 80036f8:	d029      	beq.n	800374e <SD_TxDataBlock+0x8a>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	009a      	lsls	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fee8 	bl	80034d8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003708:	f7ff ff02 	bl	8003510 <SPI_RxByte>
		SPI_RxByte();
 800370c:	f7ff ff00 	bl	8003510 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003710:	e011      	b.n	8003736 <SD_TxDataBlock+0x72>
		{
			resp = SPI_RxByte();
 8003712:	250f      	movs	r5, #15
 8003714:	197c      	adds	r4, r7, r5
 8003716:	f7ff fefb 	bl	8003510 <SPI_RxByte>
 800371a:	0003      	movs	r3, r0
 800371c:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800371e:	197b      	adds	r3, r7, r5
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	221f      	movs	r2, #31
 8003724:	4013      	ands	r3, r2
 8003726:	2b05      	cmp	r3, #5
 8003728:	d00b      	beq.n	8003742 <SD_TxDataBlock+0x7e>
			i++;
 800372a:	210e      	movs	r1, #14
 800372c:	187b      	adds	r3, r7, r1
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	187b      	adds	r3, r7, r1
 8003732:	3201      	adds	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 8003736:	230e      	movs	r3, #14
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d9e8      	bls.n	8003712 <SD_TxDataBlock+0x4e>
 8003740:	e000      	b.n	8003744 <SD_TxDataBlock+0x80>
			if ((resp & 0x1F) == 0x05) break;
 8003742:	46c0      	nop			@ (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	f7ff fee3 	bl	8003510 <SPI_RxByte>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d0fb      	beq.n	8003746 <SD_TxDataBlock+0x82>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800374e:	230f      	movs	r3, #15
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	221f      	movs	r2, #31
 8003756:	4013      	ands	r3, r2
 8003758:	2b05      	cmp	r3, #5
 800375a:	d101      	bne.n	8003760 <SD_TxDataBlock+0x9c>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <SD_TxDataBlock+0x9e>

	return FALSE;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bdb0      	pop	{r4, r5, r7, pc}

0800376a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800376a:	b5b0      	push	{r4, r5, r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	0002      	movs	r2, r0
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003778:	f7ff fef6 	bl	8003568 <SD_ReadyWait>
 800377c:	0003      	movs	r3, r0
 800377e:	2bff      	cmp	r3, #255	@ 0xff
 8003780:	d001      	beq.n	8003786 <SD_SendCmd+0x1c>
 8003782:	23ff      	movs	r3, #255	@ 0xff
 8003784:	e059      	b.n	800383a <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	0018      	movs	r0, r3
 800378c:	f7ff fe8a 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff fe84 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7ff fe7e 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7ff fe78 	bl	80034a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fe73 	bl	80034a4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d104      	bne.n	80037d0 <SD_SendCmd+0x66>
 80037c6:	230f      	movs	r3, #15
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2295      	movs	r2, #149	@ 0x95
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e00c      	b.n	80037ea <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b48      	cmp	r3, #72	@ 0x48
 80037d6:	d104      	bne.n	80037e2 <SD_SendCmd+0x78>
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2287      	movs	r2, #135	@ 0x87
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e003      	b.n	80037ea <SD_SendCmd+0x80>
	else crc = 1;
 80037e2:	230f      	movs	r3, #15
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 80037ea:	230f      	movs	r3, #15
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff fe57 	bl	80034a4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b4c      	cmp	r3, #76	@ 0x4c
 80037fc:	d101      	bne.n	8003802 <SD_SendCmd+0x98>
 80037fe:	f7ff fe87 	bl	8003510 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003802:	230e      	movs	r3, #14
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	220a      	movs	r2, #10
 8003808:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 800380a:	250d      	movs	r5, #13
 800380c:	197c      	adds	r4, r7, r5
 800380e:	f7ff fe7f 	bl	8003510 <SPI_RxByte>
 8003812:	0003      	movs	r3, r0
 8003814:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003816:	197b      	adds	r3, r7, r5
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b25b      	sxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	da09      	bge.n	8003834 <SD_SendCmd+0xca>
 8003820:	210e      	movs	r1, #14
 8003822:	187b      	adds	r3, r7, r1
 8003824:	187a      	adds	r2, r7, r1
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	3a01      	subs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	187b      	adds	r3, r7, r1
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <SD_SendCmd+0xa0>

	return res;
 8003834:	230d      	movs	r3, #13
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003844 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	0002      	movs	r2, r0
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <SD_disk_initialize+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e0f6      	b.n	8003a4a <SD_disk_initialize+0x206>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800385c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a54 <SD_disk_initialize+0x210>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	001a      	movs	r2, r3
 8003864:	2302      	movs	r3, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d003      	beq.n	8003872 <SD_disk_initialize+0x2e>
 800386a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a54 <SD_disk_initialize+0x210>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e0eb      	b.n	8003a4a <SD_disk_initialize+0x206>

	/* power on */
	SD_PowerOn();
 8003872:	f7ff fe97 	bl	80035a4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003876:	f7ff fdf7 	bl	8003468 <SELECT>

	/* check disk type */
	type = 0;
 800387a:	230e      	movs	r3, #14
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003882:	2100      	movs	r1, #0
 8003884:	2040      	movs	r0, #64	@ 0x40
 8003886:	f7ff ff70 	bl	800376a <SD_SendCmd>
 800388a:	0003      	movs	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d000      	beq.n	8003892 <SD_disk_initialize+0x4e>
 8003890:	e0c0      	b.n	8003a14 <SD_disk_initialize+0x1d0>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003892:	4b71      	ldr	r3, [pc, #452]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003894:	22fa      	movs	r2, #250	@ 0xfa
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800389a:	23d5      	movs	r3, #213	@ 0xd5
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	0019      	movs	r1, r3
 80038a0:	2048      	movs	r0, #72	@ 0x48
 80038a2:	f7ff ff62 	bl	800376a <SD_SendCmd>
 80038a6:	0003      	movs	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d000      	beq.n	80038ae <SD_disk_initialize+0x6a>
 80038ac:	e06d      	b.n	800398a <SD_disk_initialize+0x146>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80038ae:	230f      	movs	r3, #15
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e00e      	b.n	80038d6 <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 80038b8:	250f      	movs	r5, #15
 80038ba:	197b      	adds	r3, r7, r5
 80038bc:	781c      	ldrb	r4, [r3, #0]
 80038be:	f7ff fe27 	bl	8003510 <SPI_RxByte>
 80038c2:	0003      	movs	r3, r0
 80038c4:	001a      	movs	r2, r3
 80038c6:	2308      	movs	r3, #8
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 80038cc:	197b      	adds	r3, r7, r5
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	3201      	adds	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d9eb      	bls.n	80038b8 <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80038e0:	2208      	movs	r2, #8
 80038e2:	18bb      	adds	r3, r7, r2
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d000      	beq.n	80038ec <SD_disk_initialize+0xa8>
 80038ea:	e093      	b.n	8003a14 <SD_disk_initialize+0x1d0>
 80038ec:	18bb      	adds	r3, r7, r2
 80038ee:	78db      	ldrb	r3, [r3, #3]
 80038f0:	2baa      	cmp	r3, #170	@ 0xaa
 80038f2:	d000      	beq.n	80038f6 <SD_disk_initialize+0xb2>
 80038f4:	e08e      	b.n	8003a14 <SD_disk_initialize+0x1d0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038f6:	2100      	movs	r1, #0
 80038f8:	2077      	movs	r0, #119	@ 0x77
 80038fa:	f7ff ff36 	bl	800376a <SD_SendCmd>
 80038fe:	0003      	movs	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d807      	bhi.n	8003914 <SD_disk_initialize+0xd0>
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	05db      	lsls	r3, r3, #23
 8003908:	0019      	movs	r1, r3
 800390a:	2069      	movs	r0, #105	@ 0x69
 800390c:	f7ff ff2d 	bl	800376a <SD_SendCmd>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d005      	beq.n	8003920 <SD_disk_initialize+0xdc>
				} while (Timer1);
 8003914:	4b50      	ldr	r3, [pc, #320]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1eb      	bne.n	80038f6 <SD_disk_initialize+0xb2>
 800391e:	e000      	b.n	8003922 <SD_disk_initialize+0xde>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003920:	46c0      	nop			@ (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003922:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <SD_disk_initialize+0x214>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <SD_disk_initialize+0xea>
 800392c:	e072      	b.n	8003a14 <SD_disk_initialize+0x1d0>
 800392e:	2100      	movs	r1, #0
 8003930:	207a      	movs	r0, #122	@ 0x7a
 8003932:	f7ff ff1a 	bl	800376a <SD_SendCmd>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d000      	beq.n	800393c <SD_disk_initialize+0xf8>
 800393a:	e06b      	b.n	8003a14 <SD_disk_initialize+0x1d0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800393c:	230f      	movs	r3, #15
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e00e      	b.n	8003964 <SD_disk_initialize+0x120>
					{
						ocr[n] = SPI_RxByte();
 8003946:	250f      	movs	r5, #15
 8003948:	197b      	adds	r3, r7, r5
 800394a:	781c      	ldrb	r4, [r3, #0]
 800394c:	f7ff fde0 	bl	8003510 <SPI_RxByte>
 8003950:	0003      	movs	r3, r0
 8003952:	001a      	movs	r2, r3
 8003954:	2308      	movs	r3, #8
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 800395a:	197b      	adds	r3, r7, r5
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	197b      	adds	r3, r7, r5
 8003960:	3201      	adds	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d9eb      	bls.n	8003946 <SD_disk_initialize+0x102>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	001a      	movs	r2, r3
 8003976:	2340      	movs	r3, #64	@ 0x40
 8003978:	4013      	ands	r3, r2
 800397a:	d001      	beq.n	8003980 <SD_disk_initialize+0x13c>
 800397c:	220c      	movs	r2, #12
 800397e:	e000      	b.n	8003982 <SD_disk_initialize+0x13e>
 8003980:	2204      	movs	r2, #4
 8003982:	230e      	movs	r3, #14
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	e044      	b.n	8003a14 <SD_disk_initialize+0x1d0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800398a:	2100      	movs	r1, #0
 800398c:	2077      	movs	r0, #119	@ 0x77
 800398e:	f7ff feec 	bl	800376a <SD_SendCmd>
 8003992:	0003      	movs	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d808      	bhi.n	80039aa <SD_disk_initialize+0x166>
 8003998:	2100      	movs	r1, #0
 800399a:	2069      	movs	r0, #105	@ 0x69
 800399c:	f7ff fee5 	bl	800376a <SD_SendCmd>
 80039a0:	0003      	movs	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d801      	bhi.n	80039aa <SD_disk_initialize+0x166>
 80039a6:	2202      	movs	r2, #2
 80039a8:	e000      	b.n	80039ac <SD_disk_initialize+0x168>
 80039aa:	2201      	movs	r2, #1
 80039ac:	230e      	movs	r3, #14
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 80039b2:	230e      	movs	r3, #14
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d10d      	bne.n	80039d8 <SD_disk_initialize+0x194>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80039bc:	2100      	movs	r1, #0
 80039be:	2077      	movs	r0, #119	@ 0x77
 80039c0:	f7ff fed3 	bl	800376a <SD_SendCmd>
 80039c4:	0003      	movs	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d80c      	bhi.n	80039e4 <SD_disk_initialize+0x1a0>
 80039ca:	2100      	movs	r1, #0
 80039cc:	2069      	movs	r0, #105	@ 0x69
 80039ce:	f7ff fecc 	bl	800376a <SD_SendCmd>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d106      	bne.n	80039e4 <SD_disk_initialize+0x1a0>
 80039d6:	e00c      	b.n	80039f2 <SD_disk_initialize+0x1ae>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80039d8:	2100      	movs	r1, #0
 80039da:	2041      	movs	r0, #65	@ 0x41
 80039dc:	f7ff fec5 	bl	800376a <SD_SendCmd>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d005      	beq.n	80039f0 <SD_disk_initialize+0x1ac>
				}

			} while (Timer1);
 80039e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <SD_disk_initialize+0x214>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e1      	bne.n	80039b2 <SD_disk_initialize+0x16e>
 80039ee:	e000      	b.n	80039f2 <SD_disk_initialize+0x1ae>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80039f0:	46c0      	nop			@ (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80039f2:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <SD_disk_initialize+0x214>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <SD_disk_initialize+0x1c8>
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	0019      	movs	r1, r3
 8003a02:	2050      	movs	r0, #80	@ 0x50
 8003a04:	f7ff feb1 	bl	800376a <SD_SendCmd>
 8003a08:	1e03      	subs	r3, r0, #0
 8003a0a:	d003      	beq.n	8003a14 <SD_disk_initialize+0x1d0>
 8003a0c:	230e      	movs	r3, #14
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 8003a14:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <SD_disk_initialize+0x218>)
 8003a16:	240e      	movs	r4, #14
 8003a18:	193a      	adds	r2, r7, r4
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 8003a1e:	f7ff fd32 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003a22:	f7ff fd75 	bl	8003510 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <SD_disk_initialize+0x1fc>
	{
		Stat &= ~STA_NOINIT;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2201      	movs	r2, #1
 8003a36:	4393      	bics	r3, r2
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e001      	b.n	8003a44 <SD_disk_initialize+0x200>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003a40:	f7ff fdf8 	bl	8003634 <SD_PowerOff>
	}

	return Stat;
 8003a44:	4b03      	ldr	r3, [pc, #12]	@ (8003a54 <SD_disk_initialize+0x210>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	20000000 	.word	0x20000000
 8003a58:	200035fa 	.word	0x200035fa
 8003a5c:	200005d4 	.word	0x200005d4

08003a60 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	0002      	movs	r2, r0
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8003a6c:	1dfb      	adds	r3, r7, #7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SD_disk_status+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e002      	b.n	8003a7e <SD_disk_status+0x1e>
	return Stat;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <SD_disk_status+0x28>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	20000000 	.word	0x20000000

08003a8c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	210f      	movs	r1, #15
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	1c02      	adds	r2, r0, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <SD_disk_read+0x22>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <SD_disk_read+0x26>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e053      	b.n	8003b5a <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8003b64 <SD_disk_read+0xd8>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	d001      	beq.n	8003ac4 <SD_disk_read+0x38>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e04a      	b.n	8003b5a <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <SD_disk_read+0xdc>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	001a      	movs	r2, r3
 8003aca:	2304      	movs	r3, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d102      	bne.n	8003ad6 <SD_disk_read+0x4a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	607b      	str	r3, [r7, #4]

	SELECT();
 8003ad6:	f7ff fcc7 	bl	8003468 <SELECT>

	if (count == 1)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d112      	bne.n	8003b06 <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2051      	movs	r0, #81	@ 0x51
 8003ae6:	f7ff fe40 	bl	800376a <SD_SendCmd>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d12d      	bne.n	8003b4a <SD_disk_read+0xbe>
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff fdb0 	bl	800365c <SD_RxDataBlock>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d024      	beq.n	8003b4a <SD_disk_read+0xbe>
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	e021      	b.n	8003b4a <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0019      	movs	r1, r3
 8003b0a:	2052      	movs	r0, #82	@ 0x52
 8003b0c:	f7ff fe2d 	bl	800376a <SD_SendCmd>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d11a      	bne.n	8003b4a <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff fd9d 	bl	800365c <SD_RxDataBlock>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d00c      	beq.n	8003b40 <SD_disk_read+0xb4>
				buff += 512;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4694      	mov	ip, r2
 8003b2e:	4463      	add	r3, ip
 8003b30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ea      	bne.n	8003b14 <SD_disk_read+0x88>
 8003b3e:	e000      	b.n	8003b42 <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003b40:	46c0      	nop			@ (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003b42:	2100      	movs	r1, #0
 8003b44:	204c      	movs	r0, #76	@ 0x4c
 8003b46:	f7ff fe10 	bl	800376a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003b4a:	f7ff fc9c 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003b4e:	f7ff fcdf 	bl	8003510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	4193      	sbcs	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	20000000 	.word	0x20000000
 8003b68:	200005d4 	.word	0x200005d4

08003b6c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	210f      	movs	r1, #15
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	1c02      	adds	r2, r0, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <SD_disk_write+0x22>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <SD_disk_write+0x26>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	e06b      	b.n	8003c6a <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003b92:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <SD_disk_write+0x108>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d001      	beq.n	8003ba4 <SD_disk_write+0x38>
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e062      	b.n	8003c6a <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003ba4:	4b33      	ldr	r3, [pc, #204]	@ (8003c74 <SD_disk_write+0x108>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	001a      	movs	r2, r3
 8003bac:	2304      	movs	r3, #4
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d001      	beq.n	8003bb6 <SD_disk_write+0x4a>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e059      	b.n	8003c6a <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003bb6:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <SD_disk_write+0x10c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	001a      	movs	r2, r3
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <SD_disk_write+0x5c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	025b      	lsls	r3, r3, #9
 8003bc6:	607b      	str	r3, [r7, #4]

	SELECT();
 8003bc8:	f7ff fc4e 	bl	8003468 <SELECT>

	if (count == 1)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d110      	bne.n	8003bf4 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	2058      	movs	r0, #88	@ 0x58
 8003bd8:	f7ff fdc7 	bl	800376a <SD_SendCmd>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d13c      	bne.n	8003c5a <SD_disk_write+0xee>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	21fe      	movs	r1, #254	@ 0xfe
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff fd6d 	bl	80036c4 <SD_TxDataBlock>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d035      	beq.n	8003c5a <SD_disk_write+0xee>
			count = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	e032      	b.n	8003c5a <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <SD_disk_write+0x10c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d008      	beq.n	8003c12 <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	2077      	movs	r0, #119	@ 0x77
 8003c04:	f7ff fdb1 	bl	800376a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	2057      	movs	r0, #87	@ 0x57
 8003c0e:	f7ff fdac 	bl	800376a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0019      	movs	r1, r3
 8003c16:	2059      	movs	r0, #89	@ 0x59
 8003c18:	f7ff fda7 	bl	800376a <SD_SendCmd>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d11c      	bne.n	8003c5a <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	21fc      	movs	r1, #252	@ 0xfc
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7ff fd4d 	bl	80036c4 <SD_TxDataBlock>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d00c      	beq.n	8003c48 <SD_disk_write+0xdc>
				buff += 512;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	4694      	mov	ip, r2
 8003c36:	4463      	add	r3, ip
 8003c38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ec      	bne.n	8003c20 <SD_disk_write+0xb4>
 8003c46:	e000      	b.n	8003c4a <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003c48:	46c0      	nop			@ (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003c4a:	21fd      	movs	r1, #253	@ 0xfd
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7ff fd39 	bl	80036c4 <SD_TxDataBlock>
 8003c52:	1e03      	subs	r3, r0, #0
 8003c54:	d101      	bne.n	8003c5a <SD_disk_write+0xee>
			{
				count = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003c5a:	f7ff fc14 	bl	8003486 <DESELECT>
	SPI_RxByte();
 8003c5e:	f7ff fc57 	bl	8003510 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	4193      	sbcs	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	20000000 	.word	0x20000000
 8003c78:	200005d4 	.word	0x200005d4

08003c7c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b08b      	sub	sp, #44	@ 0x2c
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	603a      	str	r2, [r7, #0]
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	1c02      	adds	r2, r0, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	1c0a      	adds	r2, r1, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SD_disk_ioctl+0x24>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e119      	b.n	8003ed4 <SD_disk_ioctl+0x258>
	res = RES_ERROR;
 8003ca0:	2327      	movs	r3, #39	@ 0x27
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d127      	bne.n	8003d00 <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d013      	beq.n	8003ce0 <SD_disk_ioctl+0x64>
 8003cb8:	dc1d      	bgt.n	8003cf6 <SD_disk_ioctl+0x7a>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <SD_disk_ioctl+0x48>
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d007      	beq.n	8003cd2 <SD_disk_ioctl+0x56>
 8003cc2:	e018      	b.n	8003cf6 <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003cc4:	f7ff fcb6 	bl	8003634 <SD_PowerOff>
			res = RES_OK;
 8003cc8:	2327      	movs	r3, #39	@ 0x27
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
			break;
 8003cd0:	e0fd      	b.n	8003ece <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn();		/* Power On */
 8003cd2:	f7ff fc67 	bl	80035a4 <SD_PowerOn>
			res = RES_OK;
 8003cd6:	2327      	movs	r3, #39	@ 0x27
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
			break;
 8003cde:	e0f6      	b.n	8003ece <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	1c5c      	adds	r4, r3, #1
 8003ce4:	f7ff fcb0 	bl	8003648 <SD_CheckPower>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003cec:	2327      	movs	r3, #39	@ 0x27
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
			break;
 8003cf4:	e0eb      	b.n	8003ece <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 8003cf6:	2327      	movs	r3, #39	@ 0x27
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e0e6      	b.n	8003ece <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d00:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <SD_disk_ioctl+0x260>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d001      	beq.n	8003d12 <SD_disk_ioctl+0x96>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0e0      	b.n	8003ed4 <SD_disk_ioctl+0x258>

		SELECT();
 8003d12:	f7ff fba9 	bl	8003468 <SELECT>

		switch (ctrl)
 8003d16:	1dbb      	adds	r3, r7, #6
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b0d      	cmp	r3, #13
 8003d1c:	d900      	bls.n	8003d20 <SD_disk_ioctl+0xa4>
 8003d1e:	e0c6      	b.n	8003eae <SD_disk_ioctl+0x232>
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <SD_disk_ioctl+0x264>)
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	2049      	movs	r0, #73	@ 0x49
 8003d2e:	f7ff fd1c 	bl	800376a <SD_SendCmd>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d000      	beq.n	8003d38 <SD_disk_ioctl+0xbc>
 8003d36:	e0bf      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
 8003d38:	240c      	movs	r4, #12
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	2110      	movs	r1, #16
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7ff fc8c 	bl	800365c <SD_RxDataBlock>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d100      	bne.n	8003d4a <SD_disk_ioctl+0xce>
 8003d48:	e0b6      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 8003d4a:	0022      	movs	r2, r4
 8003d4c:	18bb      	adds	r3, r7, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d113      	bne.n	8003d80 <SD_disk_ioctl+0x104>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003d58:	0011      	movs	r1, r2
 8003d5a:	18bb      	adds	r3, r7, r2
 8003d5c:	7a5b      	ldrb	r3, [r3, #9]
 8003d5e:	001a      	movs	r2, r3
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	7a1b      	ldrb	r3, [r3, #8]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	211e      	movs	r1, #30
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	3201      	adds	r2, #1
 8003d72:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	029a      	lsls	r2, r3, #10
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e039      	b.n	8003df4 <SD_disk_ioctl+0x178>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003d80:	200c      	movs	r0, #12
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	795b      	ldrb	r3, [r3, #5]
 8003d86:	220f      	movs	r2, #15
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	7a9b      	ldrb	r3, [r3, #10]
 8003d90:	09db      	lsrs	r3, r3, #7
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	18d3      	adds	r3, r2, r3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	7a5b      	ldrb	r3, [r3, #9]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2106      	movs	r1, #6
 8003da2:	400b      	ands	r3, r1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	18d3      	adds	r3, r2, r3
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	2426      	movs	r4, #38	@ 0x26
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	3202      	adds	r2, #2
 8003db0:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003db2:	183b      	adds	r3, r7, r0
 8003db4:	7a1b      	ldrb	r3, [r3, #8]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	001a      	movs	r2, r3
 8003dbc:	183b      	adds	r3, r7, r0
 8003dbe:	79db      	ldrb	r3, [r3, #7]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	183b      	adds	r3, r7, r0
 8003dca:	799b      	ldrb	r3, [r3, #6]
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	23c0      	movs	r3, #192	@ 0xc0
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	18d3      	adds	r3, r2, r3
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	211e      	movs	r1, #30
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	3201      	adds	r2, #1
 8003de2:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	881a      	ldrh	r2, [r3, #0]
 8003de8:	193b      	adds	r3, r7, r4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3b09      	subs	r3, #9
 8003dee:	409a      	lsls	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003df4:	2327      	movs	r3, #39	@ 0x27
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003dfc:	e05c      	b.n	8003eb8 <SD_disk_ioctl+0x23c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003e06:	2327      	movs	r3, #39	@ 0x27
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
			break;
 8003e0e:	e05a      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003e10:	f7ff fbaa 	bl	8003568 <SD_ReadyWait>
 8003e14:	0003      	movs	r3, r0
 8003e16:	2bff      	cmp	r3, #255	@ 0xff
 8003e18:	d150      	bne.n	8003ebc <SD_disk_ioctl+0x240>
 8003e1a:	2327      	movs	r3, #39	@ 0x27
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
			break;
 8003e22:	e04b      	b.n	8003ebc <SD_disk_ioctl+0x240>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003e24:	2100      	movs	r1, #0
 8003e26:	2049      	movs	r0, #73	@ 0x49
 8003e28:	f7ff fc9f 	bl	800376a <SD_SendCmd>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d147      	bne.n	8003ec0 <SD_disk_ioctl+0x244>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2110      	movs	r1, #16
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff fc11 	bl	800365c <SD_RxDataBlock>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d040      	beq.n	8003ec0 <SD_disk_ioctl+0x244>
 8003e3e:	2327      	movs	r3, #39	@ 0x27
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
			break;
 8003e46:	e03b      	b.n	8003ec0 <SD_disk_ioctl+0x244>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003e48:	2100      	movs	r1, #0
 8003e4a:	204a      	movs	r0, #74	@ 0x4a
 8003e4c:	f7ff fc8d 	bl	800376a <SD_SendCmd>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d137      	bne.n	8003ec4 <SD_disk_ioctl+0x248>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2110      	movs	r1, #16
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fbff 	bl	800365c <SD_RxDataBlock>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d030      	beq.n	8003ec4 <SD_disk_ioctl+0x248>
 8003e62:	2327      	movs	r3, #39	@ 0x27
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
			break;
 8003e6a:	e02b      	b.n	8003ec4 <SD_disk_ioctl+0x248>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	207a      	movs	r0, #122	@ 0x7a
 8003e70:	f7ff fc7b 	bl	800376a <SD_SendCmd>
 8003e74:	1e03      	subs	r3, r0, #0
 8003e76:	d11a      	bne.n	8003eae <SD_disk_ioctl+0x232>
			{
				for (n = 0; n < 4; n++)
 8003e78:	2326      	movs	r3, #38	@ 0x26
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e00c      	b.n	8003e9c <SD_disk_ioctl+0x220>
				{
					*ptr++ = SPI_RxByte();
 8003e82:	6a3c      	ldr	r4, [r7, #32]
 8003e84:	1c63      	adds	r3, r4, #1
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	f7ff fb42 	bl	8003510 <SPI_RxByte>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003e90:	2126      	movs	r1, #38	@ 0x26
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	3201      	adds	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	2326      	movs	r3, #38	@ 0x26
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d9ed      	bls.n	8003e82 <SD_disk_ioctl+0x206>
				}
				res = RES_OK;
 8003ea6:	2327      	movs	r3, #39	@ 0x27
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 8003eae:	2327      	movs	r3, #39	@ 0x27
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e006      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	e004      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ebc:	46c0      	nop			@ (mov r8, r8)
 8003ebe:	e002      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	e000      	b.n	8003ec6 <SD_disk_ioctl+0x24a>
			break;
 8003ec4:	46c0      	nop			@ (mov r8, r8)
		}

		DESELECT();
 8003ec6:	f7ff fade 	bl	8003486 <DESELECT>
		SPI_RxByte();
 8003eca:	f7ff fb21 	bl	8003510 <SPI_RxByte>
	}

	return res;
 8003ece:	2327      	movs	r3, #39	@ 0x27
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b00b      	add	sp, #44	@ 0x2c
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	08019fe8 	.word	0x08019fe8

08003ee4 <bufsize>:
	uint8_t len = strlen (string);
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);// transmit in blocking mode
}

int bufsize (char *buf)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	int i=0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8003ef0:	e002      	b.n	8003ef8 <bufsize+0x14>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f6      	bne.n	8003ef2 <bufsize+0xe>
	return i;
 8003f04:	68fb      	ldr	r3, [r7, #12]
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <clear_buffer>:

void clear_buffer (void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e007      	b.n	8003f2c <clear_buffer+0x1c>
	{
		buffer[i] = '\0';
 8003f1c:	4a08      	ldr	r2, [pc, #32]	@ (8003f40 <clear_buffer+0x30>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	429a      	cmp	r2, r3
 8003f34:	dbf2      	blt.n	8003f1c <clear_buffer+0xc>
	}
}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200030fc 	.word	0x200030fc

08003f44 <USER_UART_IDLECallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    HAL_UART_DMAStop(&huart1);
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc0 <USER_UART_IDLECallback+0x7c>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f00f feee 	bl	8013d30 <HAL_UART_DMAStop>
    uint8_t data_length  = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8003f54:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <USER_UART_IDLECallback+0x80>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	1a8a      	subs	r2, r1, r2
 8003f64:	701a      	strb	r2, [r3, #0]

    memcpy(RxBuff,receive_buff,12);
 8003f66:	4b18      	ldr	r3, [pc, #96]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f68:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f6c:	c313      	stmia	r3!, {r0, r1, r4}
    //test
    if (RxBuff[0] == 0 && RxBuff[1] == 0)
 8003f6e:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <USER_UART_IDLECallback+0x42>
 8003f76:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <USER_UART_IDLECallback+0x42>
    {
    	HAL_UART_ErrorCallback(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 f847 	bl	8004014 <HAL_UART_ErrorCallback>
    }
    if (RxBuff[3] == 0x83)
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <USER_UART_IDLECallback+0x84>)
 8003f88:	78db      	ldrb	r3, [r3, #3]
 8003f8a:	2b83      	cmp	r3, #131	@ 0x83
 8003f8c:	d102      	bne.n	8003f94 <USER_UART_IDLECallback+0x50>
    	RxFlag = TRUE;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <USER_UART_IDLECallback+0x8c>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
    memset(receive_buff,0,data_length);
 8003f94:	240f      	movs	r4, #15
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f015 f896 	bl	80190d0 <memset>
    data_length = 0;
 8003fa4:	193b      	adds	r3, r7, r4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 64);
 8003faa:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <USER_UART_IDLECallback+0x88>)
 8003fac:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <USER_UART_IDLECallback+0x7c>)
 8003fae:	2240      	movs	r2, #64	@ 0x40
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f00f fe53 	bl	8013c5c <HAL_UART_Receive_DMA>
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b005      	add	sp, #20
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	20000700 	.word	0x20000700
 8003fc4:	20000940 	.word	0x20000940
 8003fc8:	20000ae8 	.word	0x20000ae8
 8003fcc:	20000b2c 	.word	0x20000b2c
 8003fd0:	20000ae4 	.word	0x20000ae4

08003fd4 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800400c <USER_UART_IRQHandler+0x38>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10e      	bne.n	8004004 <USER_UART_IRQHandler+0x30>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <USER_UART_IRQHandler+0x3c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2210      	movs	r2, #16
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d107      	bne.n	8004004 <USER_UART_IRQHandler+0x30>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <USER_UART_IRQHandler+0x3c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	621a      	str	r2, [r3, #32]
            USER_UART_IDLECallback(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff ffa0 	bl	8003f44 <USER_UART_IDLECallback>
        }
    }
}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b002      	add	sp, #8
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40013800 	.word	0x40013800
 8004010:	20000700 	.word	0x20000700

08004014 <HAL_UART_ErrorCallback>:

//test
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
//	if(huart->ErrorCode&HAL_UART_ERROR_ORE)
//	{
//		__HAL_UART_CLEAR_OREFLAG(huart);
//	}
	if(huart->Instance == USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <HAL_UART_ErrorCallback+0x24>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d103      	bne.n	800402e <HAL_UART_ErrorCallback+0x1a>
	{
		HAL_UART_AbortReceive(&huart1);
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_UART_ErrorCallback+0x28>)
 8004028:	0018      	movs	r0, r3
 800402a:	f00f ff13 	bl	8013e54 <HAL_UART_AbortReceive>
	}
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	40013800 	.word	0x40013800
 800403c:	20000700 	.word	0x20000700

08004040 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
//	static uint8_t RxBuffer[80];
//	static uint16_t RxCount = 0;

	if(huart->Instance == USART3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <HAL_UART_RxCpltCallback+0xf0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d163      	bne.n	800411a <HAL_UART_RxCpltCallback+0xda>
	{
		if(Flag_Head == TRUE)
 8004052:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_UART_RxCpltCallback+0xf4>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d154      	bne.n	8004104 <HAL_UART_RxCpltCallback+0xc4>
		{
			if(Receiving == TRUE)
 800405a:	4b37      	ldr	r3, [pc, #220]	@ (8004138 <HAL_UART_RxCpltCallback+0xf8>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d136      	bne.n	80040d0 <HAL_UART_RxCpltCallback+0x90>
			{
				if((RxCount >= 46) && (rec_ch == 0xFF))
 8004062:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_UART_RxCpltCallback+0xfc>)
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	2b2d      	cmp	r3, #45	@ 0x2d
 8004068:	d924      	bls.n	80040b4 <HAL_UART_RxCpltCallback+0x74>
 800406a:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2bff      	cmp	r3, #255	@ 0xff
 8004070:	d120      	bne.n	80040b4 <HAL_UART_RxCpltCallback+0x74>
				{
					RxCount = 0;
 8004072:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_UART_RxCpltCallback+0xfc>)
 8004074:	2200      	movs	r2, #0
 8004076:	801a      	strh	r2, [r3, #0]
					memset(WriteBuffer,0,80);
 8004078:	4b32      	ldr	r3, [pc, #200]	@ (8004144 <HAL_UART_RxCpltCallback+0x104>)
 800407a:	2250      	movs	r2, #80	@ 0x50
 800407c:	2100      	movs	r1, #0
 800407e:	0018      	movs	r0, r3
 8004080:	f015 f826 	bl	80190d0 <memset>
					memcpy(WriteBuffer,RxBuffer,80);
 8004084:	4a2f      	ldr	r2, [pc, #188]	@ (8004144 <HAL_UART_RxCpltCallback+0x104>)
 8004086:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <HAL_UART_RxCpltCallback+0x108>)
 8004088:	0010      	movs	r0, r2
 800408a:	0019      	movs	r1, r3
 800408c:	2350      	movs	r3, #80	@ 0x50
 800408e:	001a      	movs	r2, r3
 8004090:	f015 f852 	bl	8019138 <memcpy>
					memset(RxBuffer,0,80);
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <HAL_UART_RxCpltCallback+0x108>)
 8004096:	2250      	movs	r2, #80	@ 0x50
 8004098:	2100      	movs	r1, #0
 800409a:	0018      	movs	r0, r3
 800409c:	f015 f818 	bl	80190d0 <memset>
					Flag_Para_W = TRUE;
 80040a0:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HAL_UART_RxCpltCallback+0x10c>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
					Flag_Head = FALSE;
 80040a6:	4b23      	ldr	r3, [pc, #140]	@ (8004134 <HAL_UART_RxCpltCallback+0xf4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
					Receiving = FALSE;
 80040ac:	4b22      	ldr	r3, [pc, #136]	@ (8004138 <HAL_UART_RxCpltCallback+0xf8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e032      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
				}
				else
				{
					RxBuffer[RxCount] = rec_ch;
 80040b4:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_UART_RxCpltCallback+0xfc>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	001a      	movs	r2, r3
 80040ba:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 80040bc:	7819      	ldrb	r1, [r3, #0]
 80040be:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <HAL_UART_RxCpltCallback+0x108>)
 80040c0:	5499      	strb	r1, [r3, r2]
					RxCount++;
 80040c2:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <HAL_UART_RxCpltCallback+0xfc>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <HAL_UART_RxCpltCallback+0xfc>)
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e024      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
				}
			}
			else
			{
				if(rec_ch == 0xBB)
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2bbb      	cmp	r3, #187	@ 0xbb
 80040d6:	d103      	bne.n	80040e0 <HAL_UART_RxCpltCallback+0xa0>
				{
					//header - 0xAA 0xBB: start receiving parameters
					Receiving = TRUE;
 80040d8:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <HAL_UART_RxCpltCallback+0xf8>)
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e01c      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
				}
				else if(rec_ch == 0xCC)
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2bcc      	cmp	r3, #204	@ 0xcc
 80040e6:	d109      	bne.n	80040fc <HAL_UART_RxCpltCallback+0xbc>
				{
					//header - 0xAA 0xCC: start reply taxi type & plate no.
					Receiving = FALSE;
 80040e8:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <HAL_UART_RxCpltCallback+0xf8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, ReplyBuffer, 54, 0xff);            //ReplyBuffer : Parameter Software byte length
 80040ee:	4918      	ldr	r1, [pc, #96]	@ (8004150 <HAL_UART_RxCpltCallback+0x110>)
 80040f0:	4818      	ldr	r0, [pc, #96]	@ (8004154 <HAL_UART_RxCpltCallback+0x114>)
 80040f2:	23ff      	movs	r3, #255	@ 0xff
 80040f4:	2236      	movs	r2, #54	@ 0x36
 80040f6:	f00f fc9b 	bl	8013a30 <HAL_UART_Transmit>
 80040fa:	e00e      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
//					unsigned char ack[1] = {0x06};
//					HAL_UART_Transmit(&huart3, ack, 1, 0x02);     //send to computer
//				}
				else
				{
					Receiving = FALSE;
 80040fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <HAL_UART_RxCpltCallback+0xf8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e00a      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
				}
			}
		}
		else
		{
			if(rec_ch == 0xAA)
 8004104:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2baa      	cmp	r3, #170	@ 0xaa
 800410a:	d103      	bne.n	8004114 <HAL_UART_RxCpltCallback+0xd4>
				Flag_Head = TRUE;
 800410c:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_UART_RxCpltCallback+0xf4>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e002      	b.n	800411a <HAL_UART_RxCpltCallback+0xda>
			else
				Flag_Head = FALSE;
 8004114:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <HAL_UART_RxCpltCallback+0xf4>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart3, &rec_ch, 1);
 800411a:	4909      	ldr	r1, [pc, #36]	@ (8004140 <HAL_UART_RxCpltCallback+0x100>)
 800411c:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <HAL_UART_RxCpltCallback+0x114>)
 800411e:	2201      	movs	r2, #1
 8004120:	0018      	movs	r0, r3
 8004122:	f00f fd31 	bl	8013b88 <HAL_UART_Receive_IT>
}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	40004800 	.word	0x40004800
 8004134:	20000ce7 	.word	0x20000ce7
 8004138:	20000ce8 	.word	0x20000ce8
 800413c:	20000d3c 	.word	0x20000d3c
 8004140:	20000b24 	.word	0x20000b24
 8004144:	20000c94 	.word	0x20000c94
 8004148:	20000cec 	.word	0x20000cec
 800414c:	20000ce6 	.word	0x20000ce6
 8004150:	20000d40 	.word	0x20000d40
 8004154:	20000820 	.word	0x20000820

08004158 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	05db      	lsls	r3, r3, #23
 8004168:	429a      	cmp	r2, r3
 800416a:	d14d      	bne.n	8004208 <HAL_TIM_IC_CaptureCallback+0xb0>
	{
		if(Is_First_Captured == 0)
 800416c:	4b4e      	ldr	r3, [pc, #312]	@ (80042a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d119      	bne.n	80041a8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2100      	movs	r1, #0
 8004178:	0018      	movs	r0, r3
 800417a:	f00f f8cd 	bl	8013318 <HAL_TIM_ReadCapturedValue>
 800417e:	0002      	movs	r2, r0
 8004180:	4b4a      	ldr	r3, [pc, #296]	@ (80042ac <HAL_TIM_IC_CaptureCallback+0x154>)
 8004182:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 8004184:	4b48      	ldr	r3, [pc, #288]	@ (80042a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	210a      	movs	r1, #10
 8004196:	438a      	bics	r2, r1
 8004198:	621a      	str	r2, [r3, #32]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a12      	ldr	r2, [r2, #32]
 80041a4:	621a      	str	r2, [r3, #32]
 80041a6:	e02f      	b.n	8004208 <HAL_TIM_IC_CaptureCallback+0xb0>
		}
		else if(Is_First_Captured == 1)
 80041a8:	4b3f      	ldr	r3, [pc, #252]	@ (80042a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d12b      	bne.n	8004208 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2100      	movs	r1, #0
 80041b4:	0018      	movs	r0, r3
 80041b6:	f00f f8af 	bl	8013318 <HAL_TIM_ReadCapturedValue>
 80041ba:	0002      	movs	r2, r0
 80041bc:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041be:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24

			if(IC_Val2 > IC_Val1)
 80041c8:	4b39      	ldr	r3, [pc, #228]	@ (80042b0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b37      	ldr	r3, [pc, #220]	@ (80042ac <HAL_TIM_IC_CaptureCallback+0x154>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d906      	bls.n	80041e2 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Width = IC_Val2 - IC_Val1;
 80041d4:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b34      	ldr	r3, [pc, #208]	@ (80042ac <HAL_TIM_IC_CaptureCallback+0x154>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	4b35      	ldr	r3, [pc, #212]	@ (80042b4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80041e0:	601a      	str	r2, [r3, #0]
			}

			Is_First_Captured = 0;
 80041e2:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	210a      	movs	r1, #10
 80041f4:	438a      	bics	r2, r1
 80041f6:	621a      	str	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2102      	movs	r1, #2
 8004204:	430a      	orrs	r2, r1
 8004206:	621a      	str	r2, [r3, #32]
		}
	}

	if(htim->Instance== TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2a      	ldr	r2, [pc, #168]	@ (80042b8 <HAL_TIM_IC_CaptureCallback+0x160>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d146      	bne.n	80042a0 <HAL_TIM_IC_CaptureCallback+0x148>
	{
		if(Is_First_Captured_x == 0)
 8004212:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <HAL_TIM_IC_CaptureCallback+0x164>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d110      	bne.n	800423c <HAL_TIM_IC_CaptureCallback+0xe4>
		{
			IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2100      	movs	r1, #0
 800421e:	0018      	movs	r0, r3
 8004220:	f00f f87a 	bl	8013318 <HAL_TIM_ReadCapturedValue>
 8004224:	0002      	movs	r2, r0
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004228:	601a      	str	r2, [r3, #0]
			Is_First_Captured_x = 1;
 800422a:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <HAL_TIM_IC_CaptureCallback+0x164>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]
			counter++;
 8004230:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004238:	601a      	str	r2, [r3, #0]
				Difference = ((0xFFFF - IC_Val3) + IC_Val4) + 1;
			}
			Is_First_Captured_x = 0;
		}
	}
}
 800423a:	e031      	b.n	80042a0 <HAL_TIM_IC_CaptureCallback+0x148>
		else if(Is_First_Captured_x == 1)
 800423c:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <HAL_TIM_IC_CaptureCallback+0x164>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d12d      	bne.n	80042a0 <HAL_TIM_IC_CaptureCallback+0x148>
			IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2100      	movs	r1, #0
 8004248:	0018      	movs	r0, r3
 800424a:	f00f f865 	bl	8013318 <HAL_TIM_ReadCapturedValue>
 800424e:	0002      	movs	r2, r0
 8004250:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004252:	601a      	str	r2, [r3, #0]
			counter++;
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800425c:	601a      	str	r2, [r3, #0]
			if(IC_Val4 > IC_Val3)
 800425e:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b17      	ldr	r3, [pc, #92]	@ (80042c0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d907      	bls.n	800427a <HAL_TIM_IC_CaptureCallback+0x122>
				Difference = IC_Val4 - IC_Val3;
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <HAL_TIM_IC_CaptureCallback+0x170>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b14      	ldr	r3, [pc, #80]	@ (80042c0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <HAL_TIM_IC_CaptureCallback+0x174>)
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e00f      	b.n	800429a <HAL_TIM_IC_CaptureCallback+0x142>
			else if(IC_Val4 < IC_Val3)
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_TIM_IC_CaptureCallback+0x170>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d209      	bcs.n	800429a <HAL_TIM_IC_CaptureCallback+0x142>
				Difference = ((0xFFFF - IC_Val3) + IC_Val4) + 1;
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2280      	movs	r2, #128	@ 0x80
 8004292:	0252      	lsls	r2, r2, #9
 8004294:	189a      	adds	r2, r3, r2
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <HAL_TIM_IC_CaptureCallback+0x174>)
 8004298:	601a      	str	r2, [r3, #0]
			Is_First_Captured_x = 0;
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_TIM_IC_CaptureCallback+0x164>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000e40 	.word	0x20000e40
 80042ac:	20000e28 	.word	0x20000e28
 80042b0:	20000e2c 	.word	0x20000e2c
 80042b4:	20000e3c 	.word	0x20000e3c
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	20000e44 	.word	0x20000e44
 80042c0:	20000e30 	.word	0x20000e30
 80042c4:	20000e70 	.word	0x20000e70
 80042c8:	20000e34 	.word	0x20000e34
 80042cc:	20000e38 	.word	0x20000e38

080042d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a06      	ldr	r2, [pc, #24]	@ (80042f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d106      	bne.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if (test_f == 0)
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			test_f = 1;
 80042ea:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80042f0:	46c0      	nop			@ (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40000400 	.word	0x40000400
 80042fc:	2000359a 	.word	0x2000359a

08004300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b093      	sub	sp, #76	@ 0x4c
 8004304:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004306:	f00a f887 	bl	800e418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800430a:	f000 fa69 	bl	80047e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800430e:	f000 fe13 	bl	8004f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8004312:	f000 fdf3 	bl	8004efc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004316:	f000 fb8d 	bl	8004a34 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800431a:	f000 fabd 	bl	8004898 <MX_I2C1_Init>
  MX_I2C2_Init();
 800431e:	f000 fafb 	bl	8004918 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8004322:	f000 fb39 	bl	8004998 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8004326:	f000 fbdb 	bl	8004ae0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800432a:	f000 fc27 	bl	8004b7c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800432e:	f000 fc59 	bl	8004be4 <MX_USART4_UART_Init>
  MX_SPI1_Init();
 8004332:	f000 fc8b 	bl	8004c4c <MX_SPI1_Init>
  MX_TIM1_Init();
 8004336:	f000 fcc7 	bl	8004cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800433a:	f000 fd2b 	bl	8004d94 <MX_TIM2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800433e:	f011 ff27 	bl	8016190 <MX_FATFS_Init>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d001      	beq.n	800434a <main+0x4a>
    Error_Handler();
 8004346:	f008 ff0d 	bl	800d164 <Error_Handler>
  }
  MX_TIM3_Init();
 800434a:	f000 fd7f 	bl	8004e4c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800434e:	f000 fa96 	bl	800487e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8004352:	4bf2      	ldr	r3, [pc, #968]	@ (800471c <main+0x41c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4bf0      	ldr	r3, [pc, #960]	@ (800471c <main+0x41c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2110      	movs	r1, #16
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 64);
 8004362:	49ef      	ldr	r1, [pc, #956]	@ (8004720 <main+0x420>)
 8004364:	4bed      	ldr	r3, [pc, #948]	@ (800471c <main+0x41c>)
 8004366:	2240      	movs	r2, #64	@ 0x40
 8004368:	0018      	movs	r0, r3
 800436a:	f00f fc77 	bl	8013c5c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart3, &rec_ch, 1);
 800436e:	49ed      	ldr	r1, [pc, #948]	@ (8004724 <main+0x424>)
 8004370:	4bed      	ldr	r3, [pc, #948]	@ (8004728 <main+0x428>)
 8004372:	2201      	movs	r2, #1
 8004374:	0018      	movs	r0, r3
 8004376:	f00f fc07 	bl	8013b88 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800437a:	4bec      	ldr	r3, [pc, #944]	@ (800472c <main+0x42c>)
 800437c:	0018      	movs	r0, r3
 800437e:	f00e fb33 	bl	80129e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8004382:	4bea      	ldr	r3, [pc, #936]	@ (800472c <main+0x42c>)
 8004384:	2100      	movs	r1, #0
 8004386:	0018      	movs	r0, r3
 8004388:	f00e fbe2 	bl	8012b50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800438c:	4be8      	ldr	r3, [pc, #928]	@ (8004730 <main+0x430>)
 800438e:	0018      	movs	r0, r3
 8004390:	f00e fb2a 	bl	80129e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8004394:	4be6      	ldr	r3, [pc, #920]	@ (8004730 <main+0x430>)
 8004396:	2100      	movs	r1, #0
 8004398:	0018      	movs	r0, r3
 800439a:	f00e fbd9 	bl	8012b50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800439e:	4be5      	ldr	r3, [pc, #916]	@ (8004734 <main+0x434>)
 80043a0:	0018      	movs	r0, r3
 80043a2:	f00e fb21 	bl	80129e8 <HAL_TIM_Base_Start_IT>

  HAL_Delay(200);   //Edwin: try to change it from 200 (2ms) to 10000 (10sec) to delay the software loading
 80043a6:	20c8      	movs	r0, #200	@ 0xc8
 80043a8:	f00a f8bc 	bl	800e524 <HAL_Delay>
                                            //Load all variable when turn on the taximeter
  PCF2129_Init(hi2c1, RTC_WRITE_ADDR);
 80043ac:	4ce2      	ldr	r4, [pc, #904]	@ (8004738 <main+0x438>)
 80043ae:	23a2      	movs	r3, #162	@ 0xa2
 80043b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043b2:	466b      	mov	r3, sp
 80043b4:	0018      	movs	r0, r3
 80043b6:	0023      	movs	r3, r4
 80043b8:	3310      	adds	r3, #16
 80043ba:	223c      	movs	r2, #60	@ 0x3c
 80043bc:	0019      	movs	r1, r3
 80043be:	f014 febb 	bl	8019138 <memcpy>
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	68a2      	ldr	r2, [r4, #8]
 80043c8:	68e3      	ldr	r3, [r4, #12]
 80043ca:	f008 fed1 	bl	800d170 <PCF2129_Init>
//  rtc_set();

//  EEPROM_PageErase(3);
//  eeprom_w();
//  eeprom_check();
  eeprom_r();
 80043ce:	f005 f8ab 	bl	8009528 <eeprom_r>

  //Mounting SD card
  fresult = f_mount(&fs, "/", 1);
 80043d2:	49da      	ldr	r1, [pc, #872]	@ (800473c <main+0x43c>)
 80043d4:	4bda      	ldr	r3, [pc, #872]	@ (8004740 <main+0x440>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	0018      	movs	r0, r3
 80043da:	f013 fe59 	bl	8018090 <f_mount>
 80043de:	0003      	movs	r3, r0
 80043e0:	001a      	movs	r2, r3
 80043e2:	4bd8      	ldr	r3, [pc, #864]	@ (8004744 <main+0x444>)
 80043e4:	701a      	strb	r2, [r3, #0]
  //Create the file with read write access and open it
//  fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
  fresult = f_open(&fil, "tripDATA.txt", FA_CREATE_NEW | FA_WRITE);
 80043e6:	49d8      	ldr	r1, [pc, #864]	@ (8004748 <main+0x448>)
 80043e8:	4bd8      	ldr	r3, [pc, #864]	@ (800474c <main+0x44c>)
 80043ea:	2206      	movs	r2, #6
 80043ec:	0018      	movs	r0, r3
 80043ee:	f013 fe9b 	bl	8018128 <f_open>
 80043f2:	0003      	movs	r3, r0
 80043f4:	001a      	movs	r2, r3
 80043f6:	4bd3      	ldr	r3, [pc, #844]	@ (8004744 <main+0x444>)
 80043f8:	701a      	strb	r2, [r3, #0]
  //Writing text
  strcpy (buffer, "vehicleNo meterNo startDate startTime endDate endTime waitTime journeyTime paidKM totalKM nonBusiness amount surCharge totalCharge\n");
 80043fa:	4ad5      	ldr	r2, [pc, #852]	@ (8004750 <main+0x450>)
 80043fc:	4bd5      	ldr	r3, [pc, #852]	@ (8004754 <main+0x454>)
 80043fe:	0010      	movs	r0, r2
 8004400:	0019      	movs	r1, r3
 8004402:	2384      	movs	r3, #132	@ 0x84
 8004404:	001a      	movs	r2, r3
 8004406:	f014 fe97 	bl	8019138 <memcpy>
  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800440a:	4bd1      	ldr	r3, [pc, #836]	@ (8004750 <main+0x450>)
 800440c:	0018      	movs	r0, r3
 800440e:	f7ff fd69 	bl	8003ee4 <bufsize>
 8004412:	0003      	movs	r3, r0
 8004414:	001a      	movs	r2, r3
 8004416:	4bd0      	ldr	r3, [pc, #832]	@ (8004758 <main+0x458>)
 8004418:	49cd      	ldr	r1, [pc, #820]	@ (8004750 <main+0x450>)
 800441a:	48cc      	ldr	r0, [pc, #816]	@ (800474c <main+0x44c>)
 800441c:	f014 f889 	bl	8018532 <f_write>
 8004420:	0003      	movs	r3, r0
 8004422:	001a      	movs	r2, r3
 8004424:	4bc7      	ldr	r3, [pc, #796]	@ (8004744 <main+0x444>)
 8004426:	701a      	strb	r2, [r3, #0]
  //Close file
  f_close(&fil);
 8004428:	4bc8      	ldr	r3, [pc, #800]	@ (800474c <main+0x44c>)
 800442a:	0018      	movs	r0, r3
 800442c:	f014 faa5 	bl	801897a <f_close>
  // clearing buffer to show that result obtained is from the file
  clear_buffer();
 8004430:	f7ff fd6e 	bl	8003f10 <clear_buffer>


  //{0x5A, 0xA5, 0x24, 0x82, 0x10, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  total_detail[6] = HW[0];
 8004434:	4bc9      	ldr	r3, [pc, #804]	@ (800475c <main+0x45c>)
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	4bc9      	ldr	r3, [pc, #804]	@ (8004760 <main+0x460>)
 800443a:	719a      	strb	r2, [r3, #6]
  total_detail[7] = HW[1];
 800443c:	4bc7      	ldr	r3, [pc, #796]	@ (800475c <main+0x45c>)
 800443e:	785a      	ldrb	r2, [r3, #1]
 8004440:	4bc7      	ldr	r3, [pc, #796]	@ (8004760 <main+0x460>)
 8004442:	71da      	strb	r2, [r3, #7]
  total_detail[8] = HW[2];
 8004444:	4bc5      	ldr	r3, [pc, #788]	@ (800475c <main+0x45c>)
 8004446:	789a      	ldrb	r2, [r3, #2]
 8004448:	4bc5      	ldr	r3, [pc, #788]	@ (8004760 <main+0x460>)
 800444a:	721a      	strb	r2, [r3, #8]
  total_detail[9] = HW[3];
 800444c:	4bc3      	ldr	r3, [pc, #780]	@ (800475c <main+0x45c>)
 800444e:	78da      	ldrb	r2, [r3, #3]
 8004450:	4bc3      	ldr	r3, [pc, #780]	@ (8004760 <main+0x460>)
 8004452:	725a      	strb	r2, [r3, #9]
  total_detail[10] = HW[4];
 8004454:	4bc1      	ldr	r3, [pc, #772]	@ (800475c <main+0x45c>)
 8004456:	791a      	ldrb	r2, [r3, #4]
 8004458:	4bc1      	ldr	r3, [pc, #772]	@ (8004760 <main+0x460>)
 800445a:	729a      	strb	r2, [r3, #10]
  total_detail[11] = HW[5];
 800445c:	4bbf      	ldr	r3, [pc, #764]	@ (800475c <main+0x45c>)
 800445e:	795a      	ldrb	r2, [r3, #5]
 8004460:	4bbf      	ldr	r3, [pc, #764]	@ (8004760 <main+0x460>)
 8004462:	72da      	strb	r2, [r3, #11]
  total_detail[12] = HW[6];
 8004464:	4bbd      	ldr	r3, [pc, #756]	@ (800475c <main+0x45c>)
 8004466:	799a      	ldrb	r2, [r3, #6]
 8004468:	4bbd      	ldr	r3, [pc, #756]	@ (8004760 <main+0x460>)
 800446a:	731a      	strb	r2, [r3, #12]
  total_detail[13] = HW[7];
 800446c:	4bbb      	ldr	r3, [pc, #748]	@ (800475c <main+0x45c>)
 800446e:	79da      	ldrb	r2, [r3, #7]
 8004470:	4bbb      	ldr	r3, [pc, #748]	@ (8004760 <main+0x460>)
 8004472:	735a      	strb	r2, [r3, #13]

  total_detail[14] = FW[0];
 8004474:	4bbb      	ldr	r3, [pc, #748]	@ (8004764 <main+0x464>)
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	4bb9      	ldr	r3, [pc, #740]	@ (8004760 <main+0x460>)
 800447a:	739a      	strb	r2, [r3, #14]
  total_detail[15] = FW[1];
 800447c:	4bb9      	ldr	r3, [pc, #740]	@ (8004764 <main+0x464>)
 800447e:	785a      	ldrb	r2, [r3, #1]
 8004480:	4bb7      	ldr	r3, [pc, #732]	@ (8004760 <main+0x460>)
 8004482:	73da      	strb	r2, [r3, #15]
  total_detail[16] = FW[2];
 8004484:	4bb7      	ldr	r3, [pc, #732]	@ (8004764 <main+0x464>)
 8004486:	789a      	ldrb	r2, [r3, #2]
 8004488:	4bb5      	ldr	r3, [pc, #724]	@ (8004760 <main+0x460>)
 800448a:	741a      	strb	r2, [r3, #16]
  total_detail[17] = FW[3];
 800448c:	4bb5      	ldr	r3, [pc, #724]	@ (8004764 <main+0x464>)
 800448e:	78da      	ldrb	r2, [r3, #3]
 8004490:	4bb3      	ldr	r3, [pc, #716]	@ (8004760 <main+0x460>)
 8004492:	745a      	strb	r2, [r3, #17]
  total_detail[18] = FW[4];
 8004494:	4bb3      	ldr	r3, [pc, #716]	@ (8004764 <main+0x464>)
 8004496:	791a      	ldrb	r2, [r3, #4]
 8004498:	4bb1      	ldr	r3, [pc, #708]	@ (8004760 <main+0x460>)
 800449a:	749a      	strb	r2, [r3, #18]
  total_detail[19] = FW[5];
 800449c:	4bb1      	ldr	r3, [pc, #708]	@ (8004764 <main+0x464>)
 800449e:	795a      	ldrb	r2, [r3, #5]
 80044a0:	4baf      	ldr	r3, [pc, #700]	@ (8004760 <main+0x460>)
 80044a2:	74da      	strb	r2, [r3, #19]
  total_detail[20] = FW[6];
 80044a4:	4baf      	ldr	r3, [pc, #700]	@ (8004764 <main+0x464>)
 80044a6:	799a      	ldrb	r2, [r3, #6]
 80044a8:	4bad      	ldr	r3, [pc, #692]	@ (8004760 <main+0x460>)
 80044aa:	751a      	strb	r2, [r3, #20]
  total_detail[21] = FW[7];
 80044ac:	4bad      	ldr	r3, [pc, #692]	@ (8004764 <main+0x464>)
 80044ae:	79da      	ldrb	r2, [r3, #7]
 80044b0:	4bab      	ldr	r3, [pc, #684]	@ (8004760 <main+0x460>)
 80044b2:	755a      	strb	r2, [r3, #21]

  total_detail[22] = serial_no[0];
 80044b4:	4bac      	ldr	r3, [pc, #688]	@ (8004768 <main+0x468>)
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	4ba9      	ldr	r3, [pc, #676]	@ (8004760 <main+0x460>)
 80044ba:	759a      	strb	r2, [r3, #22]
  total_detail[23] = serial_no[1];
 80044bc:	4baa      	ldr	r3, [pc, #680]	@ (8004768 <main+0x468>)
 80044be:	785a      	ldrb	r2, [r3, #1]
 80044c0:	4ba7      	ldr	r3, [pc, #668]	@ (8004760 <main+0x460>)
 80044c2:	75da      	strb	r2, [r3, #23]
  total_detail[24] = serial_no[2];
 80044c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004768 <main+0x468>)
 80044c6:	789a      	ldrb	r2, [r3, #2]
 80044c8:	4ba5      	ldr	r3, [pc, #660]	@ (8004760 <main+0x460>)
 80044ca:	761a      	strb	r2, [r3, #24]
  total_detail[25] = serial_no[3];
 80044cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004768 <main+0x468>)
 80044ce:	78da      	ldrb	r2, [r3, #3]
 80044d0:	4ba3      	ldr	r3, [pc, #652]	@ (8004760 <main+0x460>)
 80044d2:	765a      	strb	r2, [r3, #25]
  total_detail[26] = serial_no[4];
 80044d4:	4ba4      	ldr	r3, [pc, #656]	@ (8004768 <main+0x468>)
 80044d6:	791a      	ldrb	r2, [r3, #4]
 80044d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004760 <main+0x460>)
 80044da:	769a      	strb	r2, [r3, #26]
  total_detail[27] = serial_no[5];
 80044dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004768 <main+0x468>)
 80044de:	795a      	ldrb	r2, [r3, #5]
 80044e0:	4b9f      	ldr	r3, [pc, #636]	@ (8004760 <main+0x460>)
 80044e2:	76da      	strb	r2, [r3, #27]
  total_detail[28] = serial_no[6];
 80044e4:	4ba0      	ldr	r3, [pc, #640]	@ (8004768 <main+0x468>)
 80044e6:	799a      	ldrb	r2, [r3, #6]
 80044e8:	4b9d      	ldr	r3, [pc, #628]	@ (8004760 <main+0x460>)
 80044ea:	771a      	strb	r2, [r3, #28]
  total_detail[29] = serial_no[7];
 80044ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004768 <main+0x468>)
 80044ee:	79da      	ldrb	r2, [r3, #7]
 80044f0:	4b9b      	ldr	r3, [pc, #620]	@ (8004760 <main+0x460>)
 80044f2:	775a      	strb	r2, [r3, #29]
  total_detail[30] = serial_no[8];
 80044f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004768 <main+0x468>)
 80044f6:	7a1a      	ldrb	r2, [r3, #8]
 80044f8:	4b99      	ldr	r3, [pc, #612]	@ (8004760 <main+0x460>)
 80044fa:	779a      	strb	r2, [r3, #30]
  total_detail[31] = serial_no[9];
 80044fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004768 <main+0x468>)
 80044fe:	7a5a      	ldrb	r2, [r3, #9]
 8004500:	4b97      	ldr	r3, [pc, #604]	@ (8004760 <main+0x460>)
 8004502:	77da      	strb	r2, [r3, #31]
  total_detail[32] = serial_no[10];
 8004504:	4b98      	ldr	r3, [pc, #608]	@ (8004768 <main+0x468>)
 8004506:	7a99      	ldrb	r1, [r3, #10]
 8004508:	4b95      	ldr	r3, [pc, #596]	@ (8004760 <main+0x460>)
 800450a:	2220      	movs	r2, #32
 800450c:	5499      	strb	r1, [r3, r2]
  total_detail[33] = serial_no[11];
 800450e:	4b96      	ldr	r3, [pc, #600]	@ (8004768 <main+0x468>)
 8004510:	7ad9      	ldrb	r1, [r3, #11]
 8004512:	4b93      	ldr	r3, [pc, #588]	@ (8004760 <main+0x460>)
 8004514:	2221      	movs	r2, #33	@ 0x21
 8004516:	5499      	strb	r1, [r3, r2]
//  total_detail[37] = d_buffer[2];
//  total_detail[38] = d_buffer[3];
//  total_detail[40] = d_buffer[4];
//  total_detail[41] = d_buffer[5];

  Voice_init();
 8004518:	f007 fd08 	bl	800bf2c <Voice_init>

//  E_read();

  SD_buffer[0] = plate_qr[6]; //SD card only support 6 char
 800451c:	4b93      	ldr	r3, [pc, #588]	@ (800476c <main+0x46c>)
 800451e:	799a      	ldrb	r2, [r3, #6]
 8004520:	4b93      	ldr	r3, [pc, #588]	@ (8004770 <main+0x470>)
 8004522:	701a      	strb	r2, [r3, #0]
  SD_buffer[1] = plate_qr[7];
 8004524:	4b91      	ldr	r3, [pc, #580]	@ (800476c <main+0x46c>)
 8004526:	79da      	ldrb	r2, [r3, #7]
 8004528:	4b91      	ldr	r3, [pc, #580]	@ (8004770 <main+0x470>)
 800452a:	705a      	strb	r2, [r3, #1]
  SD_buffer[2] = plate_qr[8];
 800452c:	4b8f      	ldr	r3, [pc, #572]	@ (800476c <main+0x46c>)
 800452e:	7a1a      	ldrb	r2, [r3, #8]
 8004530:	4b8f      	ldr	r3, [pc, #572]	@ (8004770 <main+0x470>)
 8004532:	709a      	strb	r2, [r3, #2]
  SD_buffer[3] = plate_qr[9];
 8004534:	4b8d      	ldr	r3, [pc, #564]	@ (800476c <main+0x46c>)
 8004536:	7a5a      	ldrb	r2, [r3, #9]
 8004538:	4b8d      	ldr	r3, [pc, #564]	@ (8004770 <main+0x470>)
 800453a:	70da      	strb	r2, [r3, #3]
  SD_buffer[4] = plate_qr[10];
 800453c:	4b8b      	ldr	r3, [pc, #556]	@ (800476c <main+0x46c>)
 800453e:	7a9a      	ldrb	r2, [r3, #10]
 8004540:	4b8b      	ldr	r3, [pc, #556]	@ (8004770 <main+0x470>)
 8004542:	711a      	strb	r2, [r3, #4]
  SD_buffer[5] = plate_qr[11];
 8004544:	4b89      	ldr	r3, [pc, #548]	@ (800476c <main+0x46c>)
 8004546:	7ada      	ldrb	r2, [r3, #11]
 8004548:	4b89      	ldr	r3, [pc, #548]	@ (8004770 <main+0x470>)
 800454a:	715a      	strb	r2, [r3, #5]
  SD_buffer[6] = 0x20;
 800454c:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <main+0x470>)
 800454e:	2220      	movs	r2, #32
 8004550:	719a      	strb	r2, [r3, #6]

  SD_buffer[7] = 0x41;  //A   //SD card only support A00001
 8004552:	4b87      	ldr	r3, [pc, #540]	@ (8004770 <main+0x470>)
 8004554:	2241      	movs	r2, #65	@ 0x41
 8004556:	71da      	strb	r2, [r3, #7]
  SD_buffer[8] = 0x30;  //0
 8004558:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <main+0x470>)
 800455a:	2230      	movs	r2, #48	@ 0x30
 800455c:	721a      	strb	r2, [r3, #8]
  SD_buffer[9] = 0x30;  //0
 800455e:	4b84      	ldr	r3, [pc, #528]	@ (8004770 <main+0x470>)
 8004560:	2230      	movs	r2, #48	@ 0x30
 8004562:	725a      	strb	r2, [r3, #9]
  SD_buffer[10] = 0x30; //0
 8004564:	4b82      	ldr	r3, [pc, #520]	@ (8004770 <main+0x470>)
 8004566:	2230      	movs	r2, #48	@ 0x30
 8004568:	729a      	strb	r2, [r3, #10]
  SD_buffer[11] = 0x30; //0
 800456a:	4b81      	ldr	r3, [pc, #516]	@ (8004770 <main+0x470>)
 800456c:	2230      	movs	r2, #48	@ 0x30
 800456e:	72da      	strb	r2, [r3, #11]
  SD_buffer[12] = 0x31; //1
 8004570:	4b7f      	ldr	r3, [pc, #508]	@ (8004770 <main+0x470>)
 8004572:	2231      	movs	r2, #49	@ 0x31
 8004574:	731a      	strb	r2, [r3, #12]
  SD_buffer[13] = 0x20;
 8004576:	4b7e      	ldr	r3, [pc, #504]	@ (8004770 <main+0x470>)
 8004578:	2220      	movs	r2, #32
 800457a:	735a      	strb	r2, [r3, #13]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_f)
 800457c:	4b7d      	ldr	r3, [pc, #500]	@ (8004774 <main+0x474>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0fb      	beq.n	800457c <main+0x27c>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)                     //write para
 8004584:	4b7c      	ldr	r3, [pc, #496]	@ (8004778 <main+0x478>)
 8004586:	2102      	movs	r1, #2
 8004588:	0018      	movs	r0, r3
 800458a:	f00a fd7b 	bl	800f084 <HAL_GPIO_ReadPin>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d15b      	bne.n	800464a <main+0x34a>
		  {
			  if(Flag_Para_W) //parameter
 8004592:	4b7a      	ldr	r3, [pc, #488]	@ (800477c <main+0x47c>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <main+0x2d0>
			  {
				  Flag_Para_W = FALSE;
 800459a:	4b78      	ldr	r3, [pc, #480]	@ (800477c <main+0x47c>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
				  eeprom_w();
 80045a0:	f004 ff6e 	bl	8009480 <eeprom_w>
				  eeprom_check();
 80045a4:	f004 ff92 	bl	80094cc <eeprom_check>
				  eeprom_r();
 80045a8:	f004 ffbe 	bl	8009528 <eeprom_r>
				  rtc_set();
 80045ac:	f005 fa28 	bl	8009a00 <rtc_set>
				  memset(ReplyBuffer, 0, 54);
 80045b0:	4b73      	ldr	r3, [pc, #460]	@ (8004780 <main+0x480>)
 80045b2:	2236      	movs	r2, #54	@ 0x36
 80045b4:	2100      	movs	r1, #0
 80045b6:	0018      	movs	r0, r3
 80045b8:	f014 fd8a 	bl	80190d0 <memset>
				  unsigned char ok[1] = {0xDD};
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4a71      	ldr	r2, [pc, #452]	@ (8004784 <main+0x484>)
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, ok, 1, 0x02);
 80045c4:	1d39      	adds	r1, r7, #4
 80045c6:	4858      	ldr	r0, [pc, #352]	@ (8004728 <main+0x428>)
 80045c8:	2302      	movs	r3, #2
 80045ca:	2201      	movs	r2, #1
 80045cc:	f00f fa30 	bl	8013a30 <HAL_UART_Transmit>
			  }
			  memcpy(ReplyBuffer, Type, sizeof(unsigned char)*2);
 80045d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004788 <main+0x488>)
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <main+0x480>)
 80045d6:	801a      	strh	r2, [r3, #0]
			  memcpy(ReplyBuffer+2, plate_no, sizeof(unsigned char)*10);
 80045d8:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <main+0x48c>)
 80045da:	4b6d      	ldr	r3, [pc, #436]	@ (8004790 <main+0x490>)
 80045dc:	0010      	movs	r0, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	230a      	movs	r3, #10
 80045e2:	001a      	movs	r2, r3
 80045e4:	f014 fda8 	bl	8019138 <memcpy>
			  memcpy(ReplyBuffer+12, details, sizeof(unsigned char)*8);
 80045e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004794 <main+0x494>)
 80045ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <main+0x498>)
 80045ec:	0010      	movs	r0, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	2308      	movs	r3, #8
 80045f2:	001a      	movs	r2, r3
 80045f4:	f014 fda0 	bl	8019138 <memcpy>
			  memcpy(ReplyBuffer+20, serial_no, sizeof(unsigned char)*12);
 80045f8:	4a68      	ldr	r2, [pc, #416]	@ (800479c <main+0x49c>)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004768 <main+0x468>)
 80045fc:	0010      	movs	r0, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	230c      	movs	r3, #12
 8004602:	001a      	movs	r2, r3
 8004604:	f014 fd98 	bl	8019138 <memcpy>
			  memcpy(ReplyBuffer+32, HW, sizeof(unsigned char)*8);
 8004608:	4a65      	ldr	r2, [pc, #404]	@ (80047a0 <main+0x4a0>)
 800460a:	4b54      	ldr	r3, [pc, #336]	@ (800475c <main+0x45c>)
 800460c:	0010      	movs	r0, r2
 800460e:	0019      	movs	r1, r3
 8004610:	2308      	movs	r3, #8
 8004612:	001a      	movs	r2, r3
 8004614:	f014 fd90 	bl	8019138 <memcpy>
			  memcpy(ReplyBuffer+40, FW, sizeof(unsigned char)*8);
 8004618:	4a62      	ldr	r2, [pc, #392]	@ (80047a4 <main+0x4a4>)
 800461a:	4b52      	ldr	r3, [pc, #328]	@ (8004764 <main+0x464>)
 800461c:	0010      	movs	r0, r2
 800461e:	0019      	movs	r1, r3
 8004620:	2308      	movs	r3, #8
 8004622:	001a      	movs	r2, r3
 8004624:	f014 fd88 	bl	8019138 <memcpy>
			  memcpy(ReplyBuffer+48, effected, sizeof(unsigned char)*3);
 8004628:	4a5f      	ldr	r2, [pc, #380]	@ (80047a8 <main+0x4a8>)
 800462a:	4b60      	ldr	r3, [pc, #384]	@ (80047ac <main+0x4ac>)
 800462c:	0010      	movs	r0, r2
 800462e:	0019      	movs	r1, r3
 8004630:	2303      	movs	r3, #3
 8004632:	001a      	movs	r2, r3
 8004634:	f014 fd80 	bl	8019138 <memcpy>
			  time_update();
 8004638:	f005 fa1a 	bl	8009a70 <time_update>
			  HAL_UART_Transmit(&huart1, (uint8_t *) plate_qr, 18, 0x1C);
 800463c:	494b      	ldr	r1, [pc, #300]	@ (800476c <main+0x46c>)
 800463e:	4837      	ldr	r0, [pc, #220]	@ (800471c <main+0x41c>)
 8004640:	231c      	movs	r3, #28
 8004642:	2212      	movs	r2, #18
 8004644:	f00f f9f4 	bl	8013a30 <HAL_UART_Transmit>
 8004648:	e0c4      	b.n	80047d4 <main+0x4d4>
		  }
		  else if(Flag_Protect)			 //鎖錶狀態
 800464a:	4b59      	ldr	r3, [pc, #356]	@ (80047b0 <main+0x4b0>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d100      	bne.n	8004654 <main+0x354>
 8004652:	e0bb      	b.n	80047cc <main+0x4cc>
		  {

			  //如果鎖錶超過一小時，判定不正常鎖錶並直接解鎖 Edwin
				stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 8004654:	4b57      	ldr	r3, [pc, #348]	@ (80047b4 <main+0x4b4>)
 8004656:	2251      	movs	r2, #81	@ 0x51
 8004658:	5c9b      	ldrb	r3, [r3, r2]
 800465a:	0018      	movs	r0, r3
 800465c:	f008 ff3d 	bl	800d4da <bcdToDec>
 8004660:	0003      	movs	r3, r0
 8004662:	001a      	movs	r2, r3
 8004664:	4b54      	ldr	r3, [pc, #336]	@ (80047b8 <main+0x4b8>)
 8004666:	711a      	strb	r2, [r3, #4]
				stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 8004668:	4b52      	ldr	r3, [pc, #328]	@ (80047b4 <main+0x4b4>)
 800466a:	2252      	movs	r2, #82	@ 0x52
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	0018      	movs	r0, r3
 8004670:	f008 ff33 	bl	800d4da <bcdToDec>
 8004674:	0003      	movs	r3, r0
 8004676:	001a      	movs	r2, r3
 8004678:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <main+0x4b8>)
 800467a:	715a      	strb	r2, [r3, #5]
				stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <main+0x4b4>)
 800467e:	2253      	movs	r2, #83	@ 0x53
 8004680:	5c9b      	ldrb	r3, [r3, r2]
 8004682:	0018      	movs	r0, r3
 8004684:	f008 ff29 	bl	800d4da <bcdToDec>
 8004688:	0003      	movs	r3, r0
 800468a:	001a      	movs	r2, r3
 800468c:	4b4a      	ldr	r3, [pc, #296]	@ (80047b8 <main+0x4b8>)
 800468e:	719a      	strb	r2, [r3, #6]

				DebugLog(); // Debug record every 3 sec
 8004690:	f005 fdc8 	bl	800a224 <DebugLog>


				u32UnixTimeStamp = utcToUnix(&stCurrentTime);
 8004694:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <main+0x4b8>)
 8004696:	0018      	movs	r0, r3
 8004698:	f009 f8a6 	bl	800d7e8 <utcToUnix>
 800469c:	0002      	movs	r2, r0
 800469e:	4b47      	ldr	r3, [pc, #284]	@ (80047bc <main+0x4bc>)
 80046a0:	601a      	str	r2, [r3, #0]
				unlock_hh=bcdToDec(PCF2129_read(PCF2129_REG_ALARM_HOUR));
 80046a2:	200c      	movs	r0, #12
 80046a4:	f008 feb0 	bl	800d408 <PCF2129_read>
 80046a8:	0003      	movs	r3, r0
 80046aa:	0018      	movs	r0, r3
 80046ac:	f008 ff15 	bl	800d4da <bcdToDec>
 80046b0:	0003      	movs	r3, r0
 80046b2:	001a      	movs	r2, r3
 80046b4:	4b42      	ldr	r3, [pc, #264]	@ (80047c0 <main+0x4c0>)
 80046b6:	701a      	strb	r2, [r3, #0]
				unlock_mm=bcdToDec(PCF2129_read(PCF2129_REG_ALARM_MINUTE));
 80046b8:	200b      	movs	r0, #11
 80046ba:	f008 fea5 	bl	800d408 <PCF2129_read>
 80046be:	0003      	movs	r3, r0
 80046c0:	0018      	movs	r0, r3
 80046c2:	f008 ff0a 	bl	800d4da <bcdToDec>
 80046c6:	0003      	movs	r3, r0
 80046c8:	001a      	movs	r2, r3
 80046ca:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <main+0x4c4>)
 80046cc:	701a      	strb	r2, [r3, #0]
				unlock_ss=bcdToDec(PCF2129_read(PCF2129_REG_ALARM_SECOND));
 80046ce:	200a      	movs	r0, #10
 80046d0:	f008 fe9a 	bl	800d408 <PCF2129_read>
 80046d4:	0003      	movs	r3, r0
 80046d6:	0018      	movs	r0, r3
 80046d8:	f008 feff 	bl	800d4da <bcdToDec>
 80046dc:	0003      	movs	r3, r0
 80046de:	001a      	movs	r2, r3
 80046e0:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <main+0x4c8>)
 80046e2:	701a      	strb	r2, [r3, #0]

				if (unlock_hh==0)  //處理跨日鎖錶
 80046e4:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <main+0x4c0>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <main+0x3f8>
				{ unlock_hh+=24;
 80046ec:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <main+0x4c0>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	3318      	adds	r3, #24
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b32      	ldr	r3, [pc, #200]	@ (80047c0 <main+0x4c0>)
 80046f6:	701a      	strb	r2, [r3, #0]
				}

				if (unlock_hh>24||unlock_mm>59||unlock_ss>59) //阻止不合理時間鎖錶
 80046f8:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <main+0x4c0>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b18      	cmp	r3, #24
 80046fe:	d807      	bhi.n	8004710 <main+0x410>
 8004700:	4b30      	ldr	r3, [pc, #192]	@ (80047c4 <main+0x4c4>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b3b      	cmp	r3, #59	@ 0x3b
 8004706:	d803      	bhi.n	8004710 <main+0x410>
 8004708:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <main+0x4c8>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b3b      	cmp	r3, #59	@ 0x3b
 800470e:	d902      	bls.n	8004716 <main+0x416>
				{
					Unlock_Meter();
 8004710:	f005 fd00 	bl	800a114 <Unlock_Meter>
				{
 8004714:	e05e      	b.n	80047d4 <main+0x4d4>
				}
				else
				{
				  //anti-tamper process
				  Anti_Tamper_Handle();    //鎖錶狀態
 8004716:	f006 fd99 	bl	800b24c <Anti_Tamper_Handle>
 800471a:	e05b      	b.n	80047d4 <main+0x4d4>
 800471c:	20000700 	.word	0x20000700
 8004720:	20000b2c 	.word	0x20000b2c
 8004724:	20000b24 	.word	0x20000b24
 8004728:	20000820 	.word	0x20000820
 800472c:	20000a00 	.word	0x20000a00
 8004730:	20000a4c 	.word	0x20000a4c
 8004734:	20000a98 	.word	0x20000a98
 8004738:	200005d8 	.word	0x200005d8
 800473c:	080199e4 	.word	0x080199e4
 8004740:	20001090 	.word	0x20001090
 8004744:	200030f4 	.word	0x200030f4
 8004748:	080199e8 	.word	0x080199e8
 800474c:	200020c4 	.word	0x200020c4
 8004750:	200030fc 	.word	0x200030fc
 8004754:	080199f8 	.word	0x080199f8
 8004758:	200030f8 	.word	0x200030f8
 800475c:	200002e0 	.word	0x200002e0
 8004760:	20000124 	.word	0x20000124
 8004764:	200002e8 	.word	0x200002e8
 8004768:	20000d90 	.word	0x20000d90
 800476c:	20000090 	.word	0x20000090
 8004770:	200034fc 	.word	0x200034fc
 8004774:	2000359a 	.word	0x2000359a
 8004778:	50000400 	.word	0x50000400
 800477c:	20000ce6 	.word	0x20000ce6
 8004780:	20000d40 	.word	0x20000d40
 8004784:	08019a7c 	.word	0x08019a7c
 8004788:	20000d78 	.word	0x20000d78
 800478c:	20000d42 	.word	0x20000d42
 8004790:	20000d7c 	.word	0x20000d7c
 8004794:	20000d4c 	.word	0x20000d4c
 8004798:	20000d88 	.word	0x20000d88
 800479c:	20000d54 	.word	0x20000d54
 80047a0:	20000d60 	.word	0x20000d60
 80047a4:	20000d68 	.word	0x20000d68
 80047a8:	20000d70 	.word	0x20000d70
 80047ac:	20000d9c 	.word	0x20000d9c
 80047b0:	20000ec5 	.word	0x20000ec5
 80047b4:	20000da4 	.word	0x20000da4
 80047b8:	20000e14 	.word	0x20000e14
 80047bc:	20000e10 	.word	0x20000e10
 80047c0:	200002f0 	.word	0x200002f0
 80047c4:	20000e23 	.word	0x20000e23
 80047c8:	20000e24 	.word	0x20000e24
				//					Unlock_Meter();
				//				}
		  }
		  else
		  {
				DebugLog();			// Debug record every 3 sec
 80047cc:	f005 fd2a 	bl	800a224 <DebugLog>

			  //normal process
			  Status_Check();
 80047d0:	f000 fc90 	bl	80050f4 <Status_Check>
		  }

		  test_f = 0;
 80047d4:	4b01      	ldr	r3, [pc, #4]	@ (80047dc <main+0x4dc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
	  if (test_f)
 80047da:	e6cf      	b.n	800457c <main+0x27c>
 80047dc:	2000359a 	.word	0x2000359a

080047e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b093      	sub	sp, #76	@ 0x4c
 80047e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047e6:	2410      	movs	r4, #16
 80047e8:	193b      	adds	r3, r7, r4
 80047ea:	0018      	movs	r0, r3
 80047ec:	2338      	movs	r3, #56	@ 0x38
 80047ee:	001a      	movs	r2, r3
 80047f0:	2100      	movs	r1, #0
 80047f2:	f014 fc6d 	bl	80190d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f6:	003b      	movs	r3, r7
 80047f8:	0018      	movs	r0, r3
 80047fa:	2310      	movs	r3, #16
 80047fc:	001a      	movs	r2, r3
 80047fe:	2100      	movs	r1, #0
 8004800:	f014 fc66 	bl	80190d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	0018      	movs	r0, r3
 800480a:	f00c fb2d 	bl	8010e68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800480e:	193b      	adds	r3, r7, r4
 8004810:	2202      	movs	r2, #2
 8004812:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004814:	193b      	adds	r3, r7, r4
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	0052      	lsls	r2, r2, #1
 800481a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800481c:	193b      	adds	r3, r7, r4
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004822:	193b      	adds	r3, r7, r4
 8004824:	2240      	movs	r2, #64	@ 0x40
 8004826:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004828:	193b      	adds	r3, r7, r4
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800482e:	193b      	adds	r3, r7, r4
 8004830:	0018      	movs	r0, r3
 8004832:	f00c fb65 	bl	8010f00 <HAL_RCC_OscConfig>
 8004836:	1e03      	subs	r3, r0, #0
 8004838:	d001      	beq.n	800483e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800483a:	f008 fc93 	bl	800d164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800483e:	003b      	movs	r3, r7
 8004840:	2207      	movs	r2, #7
 8004842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004844:	003b      	movs	r3, r7
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800484a:	003b      	movs	r3, r7
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004850:	003b      	movs	r3, r7
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004856:	003b      	movs	r3, r7
 8004858:	2100      	movs	r1, #0
 800485a:	0018      	movs	r0, r3
 800485c:	f00c fe6a 	bl	8011534 <HAL_RCC_ClockConfig>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004864:	f008 fc7e 	bl	800d164 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	045b      	lsls	r3, r3, #17
 800486c:	2200      	movs	r2, #0
 800486e:	0019      	movs	r1, r3
 8004870:	2000      	movs	r0, #0
 8004872:	f00c ff67 	bl	8011744 <HAL_RCC_MCOConfig>
}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b013      	add	sp, #76	@ 0x4c
 800487c:	bd90      	pop	{r4, r7, pc}

0800487e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2102      	movs	r1, #2
 8004886:	201b      	movs	r0, #27
 8004888:	f009 ff32 	bl	800e6f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800488c:	201b      	movs	r0, #27
 800488e:	f009 ff44 	bl	800e71a <HAL_NVIC_EnableIRQ>
}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800489c:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <MX_I2C1_Init+0x74>)
 800489e:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <MX_I2C1_Init+0x78>)
 80048a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	@ (800490c <MX_I2C1_Init+0x74>)
 80048a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <MX_I2C1_Init+0x7c>)
 80048a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048a8:	4b18      	ldr	r3, [pc, #96]	@ (800490c <MX_I2C1_Init+0x74>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048ae:	4b17      	ldr	r3, [pc, #92]	@ (800490c <MX_I2C1_Init+0x74>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048b4:	4b15      	ldr	r3, [pc, #84]	@ (800490c <MX_I2C1_Init+0x74>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80048ba:	4b14      	ldr	r3, [pc, #80]	@ (800490c <MX_I2C1_Init+0x74>)
 80048bc:	2200      	movs	r2, #0
 80048be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048c0:	4b12      	ldr	r3, [pc, #72]	@ (800490c <MX_I2C1_Init+0x74>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048c6:	4b11      	ldr	r3, [pc, #68]	@ (800490c <MX_I2C1_Init+0x74>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <MX_I2C1_Init+0x74>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <MX_I2C1_Init+0x74>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f00a fc0f 	bl	800f0f8 <HAL_I2C_Init>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d001      	beq.n	80048e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80048de:	f008 fc41 	bl	800d164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048e2:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <MX_I2C1_Init+0x74>)
 80048e4:	2100      	movs	r1, #0
 80048e6:	0018      	movs	r0, r3
 80048e8:	f00c fa26 	bl	8010d38 <HAL_I2CEx_ConfigAnalogFilter>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d001      	beq.n	80048f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80048f0:	f008 fc38 	bl	800d164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <MX_I2C1_Init+0x74>)
 80048f6:	2100      	movs	r1, #0
 80048f8:	0018      	movs	r0, r3
 80048fa:	f00c fa69 	bl	8010dd0 <HAL_I2CEx_ConfigDigitalFilter>
 80048fe:	1e03      	subs	r3, r0, #0
 8004900:	d001      	beq.n	8004906 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004902:	f008 fc2f 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200005d8 	.word	0x200005d8
 8004910:	40005400 	.word	0x40005400
 8004914:	00303d5b 	.word	0x00303d5b

08004918 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800491c:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <MX_I2C2_Init+0x74>)
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <MX_I2C2_Init+0x78>)
 8004920:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8004922:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <MX_I2C2_Init+0x74>)
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <MX_I2C2_Init+0x7c>)
 8004926:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004928:	4b18      	ldr	r3, [pc, #96]	@ (800498c <MX_I2C2_Init+0x74>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800492e:	4b17      	ldr	r3, [pc, #92]	@ (800498c <MX_I2C2_Init+0x74>)
 8004930:	2201      	movs	r2, #1
 8004932:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004934:	4b15      	ldr	r3, [pc, #84]	@ (800498c <MX_I2C2_Init+0x74>)
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800493a:	4b14      	ldr	r3, [pc, #80]	@ (800498c <MX_I2C2_Init+0x74>)
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004940:	4b12      	ldr	r3, [pc, #72]	@ (800498c <MX_I2C2_Init+0x74>)
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <MX_I2C2_Init+0x74>)
 8004948:	2200      	movs	r2, #0
 800494a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800494c:	4b0f      	ldr	r3, [pc, #60]	@ (800498c <MX_I2C2_Init+0x74>)
 800494e:	2200      	movs	r2, #0
 8004950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <MX_I2C2_Init+0x74>)
 8004954:	0018      	movs	r0, r3
 8004956:	f00a fbcf 	bl	800f0f8 <HAL_I2C_Init>
 800495a:	1e03      	subs	r3, r0, #0
 800495c:	d001      	beq.n	8004962 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800495e:	f008 fc01 	bl	800d164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004962:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <MX_I2C2_Init+0x74>)
 8004964:	2100      	movs	r1, #0
 8004966:	0018      	movs	r0, r3
 8004968:	f00c f9e6 	bl	8010d38 <HAL_I2CEx_ConfigAnalogFilter>
 800496c:	1e03      	subs	r3, r0, #0
 800496e:	d001      	beq.n	8004974 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004970:	f008 fbf8 	bl	800d164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <MX_I2C2_Init+0x74>)
 8004976:	2100      	movs	r1, #0
 8004978:	0018      	movs	r0, r3
 800497a:	f00c fa29 	bl	8010dd0 <HAL_I2CEx_ConfigDigitalFilter>
 800497e:	1e03      	subs	r3, r0, #0
 8004980:	d001      	beq.n	8004986 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004982:	f008 fbef 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000624 	.word	0x20000624
 8004990:	40005800 	.word	0x40005800
 8004994:	00303d5b 	.word	0x00303d5b

08004998 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800499c:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 800499e:	4a24      	ldr	r2, [pc, #144]	@ (8004a30 <MX_LPUART1_UART_Init+0x98>)
 80049a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80049a2:	4b22      	ldr	r3, [pc, #136]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049a4:	2296      	movs	r2, #150	@ 0x96
 80049a6:	0192      	lsls	r2, r2, #6
 80049a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049aa:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80049b0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80049b6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049be:	220c      	movs	r2, #12
 80049c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049c8:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049ce:	4b17      	ldr	r3, [pc, #92]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d4:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80049da:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049dc:	2200      	movs	r2, #0
 80049de:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80049e0:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f00e ffce 	bl	8013984 <HAL_UART_Init>
 80049e8:	1e03      	subs	r3, r0, #0
 80049ea:	d001      	beq.n	80049f0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80049ec:	f008 fbba 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049f0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 80049f2:	2100      	movs	r1, #0
 80049f4:	0018      	movs	r0, r3
 80049f6:	f011 faeb 	bl	8015fd0 <HAL_UARTEx_SetTxFifoThreshold>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80049fe:	f008 fbb1 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 8004a04:	2100      	movs	r1, #0
 8004a06:	0018      	movs	r0, r3
 8004a08:	f011 fb22 	bl	8016050 <HAL_UARTEx_SetRxFifoThreshold>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a10:	f008 fba8 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004a14:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <MX_LPUART1_UART_Init+0x94>)
 8004a16:	0018      	movs	r0, r3
 8004a18:	f011 faa0 	bl	8015f5c <HAL_UARTEx_DisableFifoMode>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a20:	f008 fba0 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	20000670 	.word	0x20000670
 8004a30:	40008000 	.word	0x40008000

08004a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a3a:	4a28      	ldr	r2, [pc, #160]	@ (8004adc <MX_USART1_UART_Init+0xa8>)
 8004a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a40:	22e1      	movs	r2, #225	@ 0xe1
 8004a42:	0252      	lsls	r2, r2, #9
 8004a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a46:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a52:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a58:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a70:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a78:	2230      	movs	r2, #48	@ 0x30
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004a7c:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a7e:	2280      	movs	r2, #128	@ 0x80
 8004a80:	0152      	lsls	r2, r2, #5
 8004a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004a84:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	0192      	lsls	r2, r2, #6
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f00e ff78 	bl	8013984 <HAL_UART_Init>
 8004a94:	1e03      	subs	r3, r0, #0
 8004a96:	d001      	beq.n	8004a9c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004a98:	f008 fb64 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f011 fa95 	bl	8015fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d001      	beq.n	8004aae <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004aaa:	f008 fb5b 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f011 facc 	bl	8016050 <HAL_UARTEx_SetRxFifoThreshold>
 8004ab8:	1e03      	subs	r3, r0, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004abc:	f008 fb52 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <MX_USART1_UART_Init+0xa4>)
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f011 fa4a 	bl	8015f5c <HAL_UARTEx_DisableFifoMode>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 8004acc:	f008 fb4a 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	20000700 	.word	0x20000700
 8004adc:	40013800 	.word	0x40013800

08004ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ae4:	4b23      	ldr	r3, [pc, #140]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004ae6:	4a24      	ldr	r2, [pc, #144]	@ (8004b78 <MX_USART2_UART_Init+0x98>)
 8004ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004aea:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004aec:	2296      	movs	r2, #150	@ 0x96
 8004aee:	0192      	lsls	r2, r2, #6
 8004af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004af2:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004afe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b06:	220c      	movs	r2, #12
 8004b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b10:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b16:	4b17      	ldr	r3, [pc, #92]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b1c:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b22:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b28:	4b12      	ldr	r3, [pc, #72]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f00e ff2a 	bl	8013984 <HAL_UART_Init>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d001      	beq.n	8004b38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b34:	f008 fb16 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b38:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f011 fa47 	bl	8015fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d001      	beq.n	8004b4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b46:	f008 fb0d 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f011 fa7e 	bl	8016050 <HAL_UARTEx_SetRxFifoThreshold>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d001      	beq.n	8004b5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b58:	f008 fb04 	bl	800d164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <MX_USART2_UART_Init+0x94>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f011 f9fc 	bl	8015f5c <HAL_UARTEx_DisableFifoMode>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d001      	beq.n	8004b6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b68:	f008 fafc 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	20000790 	.word	0x20000790
 8004b78:	40004400 	.word	0x40004400

08004b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b80:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004b82:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b86:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004b88:	22e1      	movs	r2, #225	@ 0xe1
 8004b8a:	0252      	lsls	r2, r2, #9
 8004b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b8e:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <MX_USART3_UART_Init+0x60>)
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f00e fedc 	bl	8013984 <HAL_UART_Init>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004bd0:	f008 fac8 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bd4:	46c0      	nop			@ (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	20000820 	.word	0x20000820
 8004be0:	40004800 	.word	0x40004800

08004be4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004be8:	4b16      	ldr	r3, [pc, #88]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004bea:	4a17      	ldr	r2, [pc, #92]	@ (8004c48 <MX_USART4_UART_Init+0x64>)
 8004bec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004bee:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004bf0:	2296      	movs	r2, #150	@ 0x96
 8004bf2:	0192      	lsls	r2, r2, #6
 8004bf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf6:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004bfc:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004c02:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004c08:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c0a:	220c      	movs	r2, #12
 8004c0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c20:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c26:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <MX_USART4_UART_Init+0x60>)
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f00e fea8 	bl	8013984 <HAL_UART_Init>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d001      	beq.n	8004c3c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004c38:	f008 fa94 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004c3c:	46c0      	nop			@ (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	200008b0 	.word	0x200008b0
 8004c48:	40004c00 	.word	0x40004c00

08004c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c50:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c52:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc4 <MX_SPI1_Init+0x78>)
 8004c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c56:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c58:	2282      	movs	r2, #130	@ 0x82
 8004c5a:	0052      	lsls	r2, r2, #1
 8004c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c5e:	4b18      	ldr	r3, [pc, #96]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c64:	4b16      	ldr	r3, [pc, #88]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c66:	22e0      	movs	r2, #224	@ 0xe0
 8004c68:	00d2      	lsls	r2, r2, #3
 8004c6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c72:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c78:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c80:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c82:	2210      	movs	r2, #16
 8004c84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c86:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c92:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004c9a:	2207      	movs	r2, #7
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <MX_SPI1_Init+0x74>)
 8004cac:	0018      	movs	r0, r3
 8004cae:	f00c ffe3 	bl	8011c78 <HAL_SPI_Init>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d001      	beq.n	8004cba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004cb6:	f008 fa55 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	2000099c 	.word	0x2000099c
 8004cc4:	40013000 	.word	0x40013000

08004cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cce:	2314      	movs	r3, #20
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f014 f9f9 	bl	80190d0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	f014 f9f2 	bl	80190d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004cee:	4a26      	ldr	r2, [pc, #152]	@ (8004d88 <MX_TIM1_Init+0xc0>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004cf4:	4a25      	ldr	r2, [pc, #148]	@ (8004d8c <MX_TIM1_Init+0xc4>)
 8004cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b22      	ldr	r3, [pc, #136]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004cfe:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d00:	4a23      	ldr	r2, [pc, #140]	@ (8004d90 <MX_TIM1_Init+0xc8>)
 8004d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d04:	4b1f      	ldr	r3, [pc, #124]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d10:	4b1c      	ldr	r3, [pc, #112]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004d16:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f00d fec1 	bl	8012aa0 <HAL_TIM_IC_Init>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d001      	beq.n	8004d26 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8004d22:	f008 fa1f 	bl	800d164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d26:	2114      	movs	r1, #20
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d34:	187b      	adds	r3, r7, r1
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d3a:	187a      	adds	r2, r7, r1
 8004d3c:	4b11      	ldr	r3, [pc, #68]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d3e:	0011      	movs	r1, r2
 8004d40:	0018      	movs	r0, r3
 8004d42:	f00e fd99 	bl	8013878 <HAL_TIMEx_MasterConfigSynchronization>
 8004d46:	1e03      	subs	r3, r0, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8004d4a:	f008 fa0b 	bl	800d164 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	2201      	movs	r2, #1
 8004d58:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	2200      	movs	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d66:	1d39      	adds	r1, r7, #4
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <MX_TIM1_Init+0xbc>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f00e f959 	bl	8013024 <HAL_TIM_IC_ConfigChannel>
 8004d72:	1e03      	subs	r3, r0, #0
 8004d74:	d001      	beq.n	8004d7a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8004d76:	f008 f9f5 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b008      	add	sp, #32
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	20000a00 	.word	0x20000a00
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	00003e7f 	.word	0x00003e7f
 8004d90:	0000ffff 	.word	0x0000ffff

08004d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d9a:	2314      	movs	r3, #20
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	0018      	movs	r0, r3
 8004da0:	230c      	movs	r3, #12
 8004da2:	001a      	movs	r2, r3
 8004da4:	2100      	movs	r1, #0
 8004da6:	f014 f993 	bl	80190d0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004daa:	1d3b      	adds	r3, r7, #4
 8004dac:	0018      	movs	r0, r3
 8004dae:	2310      	movs	r3, #16
 8004db0:	001a      	movs	r2, r3
 8004db2:	2100      	movs	r1, #0
 8004db4:	f014 f98c 	bl	80190d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004db8:	4b23      	ldr	r3, [pc, #140]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	05d2      	lsls	r2, r2, #23
 8004dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8004dc0:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc6:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4252      	negs	r2, r2
 8004dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dda:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004de0:	4b19      	ldr	r3, [pc, #100]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004de2:	0018      	movs	r0, r3
 8004de4:	f00d fe5c 	bl	8012aa0 <HAL_TIM_IC_Init>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d001      	beq.n	8004df0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004dec:	f008 f9ba 	bl	800d164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004df0:	2114      	movs	r1, #20
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004dfe:	187a      	adds	r2, r7, r1
 8004e00:	4b11      	ldr	r3, [pc, #68]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004e02:	0011      	movs	r1, r2
 8004e04:	0018      	movs	r0, r3
 8004e06:	f00e fd37 	bl	8013878 <HAL_TIMEx_MasterConfigSynchronization>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d001      	beq.n	8004e12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004e0e:	f008 f9a9 	bl	800d164 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004e2a:	1d39      	adds	r1, r7, #4
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <MX_TIM2_Init+0xb4>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	0018      	movs	r0, r3
 8004e32:	f00e f8f7 	bl	8013024 <HAL_TIM_IC_ConfigChannel>
 8004e36:	1e03      	subs	r3, r0, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8004e3a:	f008 f993 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b008      	add	sp, #32
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	20000a4c 	.word	0x20000a4c

08004e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e52:	2310      	movs	r3, #16
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	0018      	movs	r0, r3
 8004e58:	2310      	movs	r3, #16
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	f014 f937 	bl	80190d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	0018      	movs	r0, r3
 8004e66:	230c      	movs	r3, #12
 8004e68:	001a      	movs	r2, r3
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f014 f930 	bl	80190d0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e70:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <MX_TIM3_Init+0xa4>)
 8004e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e78:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <MX_TIM3_Init+0xa8>)
 8004e7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8004e82:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <MX_TIM3_Init+0xac>)
 8004e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e88:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8e:	4b17      	ldr	r3, [pc, #92]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e94:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004e96:	0018      	movs	r0, r3
 8004e98:	f00d fd4e 	bl	8012938 <HAL_TIM_Base_Init>
 8004e9c:	1e03      	subs	r3, r0, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004ea0:	f008 f960 	bl	800d164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	0152      	lsls	r2, r2, #5
 8004eac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004eae:	187a      	adds	r2, r7, r1
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f00e f959 	bl	801316c <HAL_TIM_ConfigClockSource>
 8004eba:	1e03      	subs	r3, r0, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004ebe:	f008 f951 	bl	800d164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ece:	1d3a      	adds	r2, r7, #4
 8004ed0:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <MX_TIM3_Init+0xa0>)
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f00e fccf 	bl	8013878 <HAL_TIMEx_MasterConfigSynchronization>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004ede:	f008 f941 	bl	800d164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b008      	add	sp, #32
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	20000a98 	.word	0x20000a98
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	00001f3f 	.word	0x00001f3f
 8004ef8:	000007cf 	.word	0x000007cf

08004efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f02:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <MX_DMA_Init+0x38>)
 8004f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <MX_DMA_Init+0x38>)
 8004f08:	2101      	movs	r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <MX_DMA_Init+0x38>)
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	2201      	movs	r2, #1
 8004f14:	4013      	ands	r3, r2
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	2009      	movs	r0, #9
 8004f20:	f009 fbe6 	bl	800e6f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004f24:	2009      	movs	r0, #9
 8004f26:	f009 fbf8 	bl	800e71a <HAL_NVIC_EnableIRQ>

}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	40021000 	.word	0x40021000

08004f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b08b      	sub	sp, #44	@ 0x2c
 8004f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f3e:	2414      	movs	r4, #20
 8004f40:	193b      	adds	r3, r7, r4
 8004f42:	0018      	movs	r0, r3
 8004f44:	2314      	movs	r3, #20
 8004f46:	001a      	movs	r2, r3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f014 f8c1 	bl	80190d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f4e:	4b64      	ldr	r3, [pc, #400]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f52:	4b63      	ldr	r3, [pc, #396]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f5a:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f66:	4b5e      	ldr	r3, [pc, #376]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f6c:	2120      	movs	r1, #32
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f72:	4b5b      	ldr	r3, [pc, #364]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f76:	2220      	movs	r2, #32
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7e:	4b58      	ldr	r3, [pc, #352]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f82:	4b57      	ldr	r3, [pc, #348]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f84:	2101      	movs	r1, #1
 8004f86:	430a      	orrs	r2, r1
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f8a:	4b55      	ldr	r3, [pc, #340]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	4b52      	ldr	r3, [pc, #328]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9a:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <MX_GPIO_Init+0x1a8>)
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004fae:	23a0      	movs	r3, #160	@ 0xa0
 8004fb0:	05db      	lsls	r3, r3, #23
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2110      	movs	r1, #16
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f00a f881 	bl	800f0be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8004fbc:	4949      	ldr	r1, [pc, #292]	@ (80050e4 <MX_GPIO_Init+0x1ac>)
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80050e8 <MX_GPIO_Init+0x1b0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f00a f87b 	bl	800f0be <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4846      	ldr	r0, [pc, #280]	@ (80050e8 <MX_GPIO_Init+0x1b0>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	f00a f874 	bl	800f0be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fd6:	193b      	adds	r3, r7, r4
 8004fd8:	2204      	movs	r2, #4
 8004fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fdc:	193b      	adds	r3, r7, r4
 8004fde:	2202      	movs	r2, #2
 8004fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	193b      	adds	r3, r7, r4
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe8:	193b      	adds	r3, r7, r4
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80050ec <MX_GPIO_Init+0x1b4>)
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	0010      	movs	r0, r2
 8004ffc:	f009 fede 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005000:	193b      	adds	r3, r7, r4
 8005002:	2210      	movs	r2, #16
 8005004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005006:	193b      	adds	r3, r7, r4
 8005008:	2201      	movs	r2, #1
 800500a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	193b      	adds	r3, r7, r4
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005012:	193b      	adds	r3, r7, r4
 8005014:	2200      	movs	r2, #0
 8005016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	193a      	adds	r2, r7, r4
 800501a:	23a0      	movs	r3, #160	@ 0xa0
 800501c:	05db      	lsls	r3, r3, #23
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f009 fecb 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005026:	193b      	adds	r3, r7, r4
 8005028:	2202      	movs	r2, #2
 800502a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502c:	193b      	adds	r3, r7, r4
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	193b      	adds	r3, r7, r4
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005038:	193b      	adds	r3, r7, r4
 800503a:	4a2b      	ldr	r2, [pc, #172]	@ (80050e8 <MX_GPIO_Init+0x1b0>)
 800503c:	0019      	movs	r1, r3
 800503e:	0010      	movs	r0, r2
 8005040:	f009 febc 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8005044:	193b      	adds	r3, r7, r4
 8005046:	4a27      	ldr	r2, [pc, #156]	@ (80050e4 <MX_GPIO_Init+0x1ac>)
 8005048:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504a:	193b      	adds	r3, r7, r4
 800504c:	2201      	movs	r2, #1
 800504e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	193b      	adds	r3, r7, r4
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2200      	movs	r2, #0
 800505a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505c:	193b      	adds	r3, r7, r4
 800505e:	4a22      	ldr	r2, [pc, #136]	@ (80050e8 <MX_GPIO_Init+0x1b0>)
 8005060:	0019      	movs	r1, r3
 8005062:	0010      	movs	r0, r2
 8005064:	f009 feaa 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	0112      	lsls	r2, r2, #4
 800506e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005070:	193b      	adds	r3, r7, r4
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	193b      	adds	r3, r7, r4
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800507c:	193a      	adds	r2, r7, r4
 800507e:	23a0      	movs	r3, #160	@ 0xa0
 8005080:	05db      	lsls	r3, r3, #23
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f009 fe99 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800508a:	0021      	movs	r1, r4
 800508c:	187b      	adds	r3, r7, r1
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005094:	000c      	movs	r4, r1
 8005096:	193b      	adds	r3, r7, r4
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	193b      	adds	r3, r7, r4
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	4a12      	ldr	r2, [pc, #72]	@ (80050f0 <MX_GPIO_Init+0x1b8>)
 80050a6:	0019      	movs	r1, r3
 80050a8:	0010      	movs	r0, r2
 80050aa:	f009 fe87 	bl	800edbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050ae:	0021      	movs	r1, r4
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2280      	movs	r2, #128	@ 0x80
 80050b4:	0052      	lsls	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	2201      	movs	r2, #1
 80050bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	2201      	movs	r2, #1
 80050c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	2200      	movs	r2, #0
 80050c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	4a06      	ldr	r2, [pc, #24]	@ (80050e8 <MX_GPIO_Init+0x1b0>)
 80050ce:	0019      	movs	r1, r3
 80050d0:	0010      	movs	r0, r2
 80050d2:	f009 fe73 	bl	800edbc <HAL_GPIO_Init>

}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b00b      	add	sp, #44	@ 0x2c
 80050dc:	bd90      	pop	{r4, r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000
 80050e4:	0000e098 	.word	0x0000e098
 80050e8:	50000400 	.word	0x50000400
 80050ec:	50001400 	.word	0x50001400
 80050f0:	50000800 	.word	0x50000800

080050f4 <Status_Check>:

/* USER CODE BEGIN 4 */
void Status_Check(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
	time_update();
 80050f8:	f004 fcba 	bl	8009a70 <time_update>

	HAL_UART_Transmit(&huart1, total_hmi, 46, 0x0E);           //huart1 means the HMI LCD screen address
 80050fc:	49e0      	ldr	r1, [pc, #896]	@ (8005480 <Status_Check+0x38c>)
 80050fe:	48e1      	ldr	r0, [pc, #900]	@ (8005484 <Status_Check+0x390>)
 8005100:	230e      	movs	r3, #14
 8005102:	222e      	movs	r2, #46	@ 0x2e
 8005104:	f00e fc94 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005108:	2001      	movs	r0, #1
 800510a:	f009 fa0b 	bl	800e524 <HAL_Delay>

	HAL_UART_Transmit(&huart1, unlock_clear, 12, 0x20);
 800510e:	49de      	ldr	r1, [pc, #888]	@ (8005488 <Status_Check+0x394>)
 8005110:	48dc      	ldr	r0, [pc, #880]	@ (8005484 <Status_Check+0x390>)
 8005112:	2320      	movs	r3, #32
 8005114:	220c      	movs	r2, #12
 8005116:	f00e fc8b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 800511a:	2001      	movs	r0, #1
 800511c:	f009 fa02 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, C_Fare_clear, 7, 0x20);
 8005120:	49da      	ldr	r1, [pc, #872]	@ (800548c <Status_Check+0x398>)
 8005122:	48d8      	ldr	r0, [pc, #864]	@ (8005484 <Status_Check+0x390>)
 8005124:	2320      	movs	r3, #32
 8005126:	2207      	movs	r2, #7
 8005128:	f00e fc82 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 800512c:	2001      	movs	r0, #1
 800512e:	f009 f9f9 	bl	800e524 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Hired, 7, 0x0E);
 8005132:	49d7      	ldr	r1, [pc, #860]	@ (8005490 <Status_Check+0x39c>)
 8005134:	48d3      	ldr	r0, [pc, #844]	@ (8005484 <Status_Check+0x390>)
 8005136:	230e      	movs	r3, #14
 8005138:	2207      	movs	r2, #7
 800513a:	f00e fc79 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 800513e:	2002      	movs	r0, #2
 8005140:	f009 f9f0 	bl	800e524 <HAL_Delay>
	Status_Change();
 8005144:	f000 fab6 	bl	80056b4 <Status_Change>
	if(Drv_state_flag)
 8005148:	4bd2      	ldr	r3, [pc, #840]	@ (8005494 <Status_Check+0x3a0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <Status_Check+0x6a>
	{
		Flag_H = TRUE;
 8005150:	4bd1      	ldr	r3, [pc, #836]	@ (8005498 <Status_Check+0x3a4>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 8005156:	4bcf      	ldr	r3, [pc, #828]	@ (8005494 <Status_Check+0x3a0>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e002      	b.n	8005164 <Status_Check+0x70>
	}
	else
	{
		Flag_H = FALSE;
 800515e:	4bce      	ldr	r3, [pc, #824]	@ (8005498 <Status_Check+0x3a4>)
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 8005164:	4bcd      	ldr	r3, [pc, #820]	@ (800549c <Status_Check+0x3a8>)
 8005166:	220c      	movs	r2, #12
 8005168:	2100      	movs	r1, #0
 800516a:	0018      	movs	r0, r3
 800516c:	f013 ffb0 	bl	80190d0 <memset>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Stop, 7, 0x0E);
 8005170:	49cb      	ldr	r1, [pc, #812]	@ (80054a0 <Status_Check+0x3ac>)
 8005172:	48c4      	ldr	r0, [pc, #784]	@ (8005484 <Status_Check+0x390>)
 8005174:	230e      	movs	r3, #14
 8005176:	2207      	movs	r2, #7
 8005178:	f00e fc5a 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 800517c:	2002      	movs	r0, #2
 800517e:	f009 f9d1 	bl	800e524 <HAL_Delay>
	Status_Change();
 8005182:	f000 fa97 	bl	80056b4 <Status_Change>
	if(Drv_state_flag)
 8005186:	4bc3      	ldr	r3, [pc, #780]	@ (8005494 <Status_Check+0x3a0>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d006      	beq.n	800519c <Status_Check+0xa8>
	{
		Flag_S = TRUE;
 800518e:	4bc5      	ldr	r3, [pc, #788]	@ (80054a4 <Status_Check+0x3b0>)
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 8005194:	4bbf      	ldr	r3, [pc, #764]	@ (8005494 <Status_Check+0x3a0>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e002      	b.n	80051a2 <Status_Check+0xae>
	}
	else
	{
		Flag_S = FALSE;
 800519c:	4bc1      	ldr	r3, [pc, #772]	@ (80054a4 <Status_Check+0x3b0>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 80051a2:	4bbe      	ldr	r3, [pc, #760]	@ (800549c <Status_Check+0x3a8>)
 80051a4:	220c      	movs	r2, #12
 80051a6:	2100      	movs	r1, #0
 80051a8:	0018      	movs	r0, r3
 80051aa:	f013 ff91 	bl	80190d0 <memset>

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Vacant, 7, 0x0E);
 80051ae:	49be      	ldr	r1, [pc, #760]	@ (80054a8 <Status_Check+0x3b4>)
 80051b0:	48b4      	ldr	r0, [pc, #720]	@ (8005484 <Status_Check+0x390>)
 80051b2:	230e      	movs	r3, #14
 80051b4:	2207      	movs	r2, #7
 80051b6:	f00e fc3b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 80051ba:	2002      	movs	r0, #2
 80051bc:	f009 f9b2 	bl	800e524 <HAL_Delay>
	Status_Change();
 80051c0:	f000 fa78 	bl	80056b4 <Status_Change>
	if(Drv_state_flag)
 80051c4:	4bb3      	ldr	r3, [pc, #716]	@ (8005494 <Status_Check+0x3a0>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <Status_Check+0xe6>
	{
		Flag_V = TRUE;
 80051cc:	4bb7      	ldr	r3, [pc, #732]	@ (80054ac <Status_Check+0x3b8>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
		Drv_state_flag = FALSE;
 80051d2:	4bb0      	ldr	r3, [pc, #704]	@ (8005494 <Status_Check+0x3a0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e002      	b.n	80051e0 <Status_Check+0xec>
	}
	else
	{
		Flag_V = FALSE;
 80051da:	4bb4      	ldr	r3, [pc, #720]	@ (80054ac <Status_Check+0x3b8>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
	}
	memset(RxBuff,0,12);
 80051e0:	4bae      	ldr	r3, [pc, #696]	@ (800549c <Status_Check+0x3a8>)
 80051e2:	220c      	movs	r2, #12
 80051e4:	2100      	movs	r1, #0
 80051e6:	0018      	movs	r0, r3
 80051e8:	f013 ff72 	bl	80190d0 <memset>

	last_btn_value = btn_value;
 80051ec:	4bb0      	ldr	r3, [pc, #704]	@ (80054b0 <Status_Check+0x3bc>)
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	4bb0      	ldr	r3, [pc, #704]	@ (80054b4 <Status_Check+0x3c0>)
 80051f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Audio, 7, 0x0E);
 80051f4:	49b0      	ldr	r1, [pc, #704]	@ (80054b8 <Status_Check+0x3c4>)
 80051f6:	48a3      	ldr	r0, [pc, #652]	@ (8005484 <Status_Check+0x390>)
 80051f8:	230e      	movs	r3, #14
 80051fa:	2207      	movs	r2, #7
 80051fc:	f00e fc18 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8005200:	2002      	movs	r0, #2
 8005202:	f009 f98f 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 8005206:	4bad      	ldr	r3, [pc, #692]	@ (80054bc <Status_Check+0x3c8>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d015      	beq.n	800523a <Status_Check+0x146>
	{
		RxFlag = FALSE;
 800520e:	4bab      	ldr	r3, [pc, #684]	@ (80054bc <Status_Check+0x3c8>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
		btn_value = RxBuff[8];
 8005214:	4ba1      	ldr	r3, [pc, #644]	@ (800549c <Status_Check+0x3a8>)
 8005216:	7a1a      	ldrb	r2, [r3, #8]
 8005218:	4ba5      	ldr	r3, [pc, #660]	@ (80054b0 <Status_Check+0x3bc>)
 800521a:	701a      	strb	r2, [r3, #0]
		if (btn_value != last_btn_value)
 800521c:	4ba4      	ldr	r3, [pc, #656]	@ (80054b0 <Status_Check+0x3bc>)
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	4ba4      	ldr	r3, [pc, #656]	@ (80054b4 <Status_Check+0x3c0>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d002      	beq.n	800522e <Status_Check+0x13a>
			Flag_btn_changed = true; //TRUE;
 8005228:	4ba5      	ldr	r3, [pc, #660]	@ (80054c0 <Status_Check+0x3cc>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]

		memset(RxBuff,0,12);
 800522e:	4b9b      	ldr	r3, [pc, #620]	@ (800549c <Status_Check+0x3a8>)
 8005230:	220c      	movs	r2, #12
 8005232:	2100      	movs	r1, #0
 8005234:	0018      	movs	r0, r3
 8005236:	f013 ff4b 	bl	80190d0 <memset>
//			HAL_UART_Transmit(&huart1, (uint8_t *) page_clear, 8, 0x0E);
//		}
//		memset(RxBuff,0,12);
//	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_print_data, 7, 0x0E);
 800523a:	49a2      	ldr	r1, [pc, #648]	@ (80054c4 <Status_Check+0x3d0>)
 800523c:	4891      	ldr	r0, [pc, #580]	@ (8005484 <Status_Check+0x390>)
 800523e:	230e      	movs	r3, #14
 8005240:	2207      	movs	r2, #7
 8005242:	f00e fbf5 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8005246:	2002      	movs	r0, #2
 8005248:	f009 f96c 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 800524c:	4b9b      	ldr	r3, [pc, #620]	@ (80054bc <Status_Check+0x3c8>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d014      	beq.n	800527e <Status_Check+0x18a>
	{
		RxFlag = FALSE;
 8005254:	4b99      	ldr	r3, [pc, #612]	@ (80054bc <Status_Check+0x3c8>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 800525a:	4b90      	ldr	r3, [pc, #576]	@ (800549c <Status_Check+0x3a8>)
 800525c:	7a1b      	ldrb	r3, [r3, #8]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <Status_Check+0x17e>
		{

			//print operational data
			HAL_UART_Transmit(&huart1, (uint8_t *) print_data_clr, 8, 0x0E);
 8005262:	4999      	ldr	r1, [pc, #612]	@ (80054c8 <Status_Check+0x3d4>)
 8005264:	4887      	ldr	r0, [pc, #540]	@ (8005484 <Status_Check+0x390>)
 8005266:	230e      	movs	r3, #14
 8005268:	2208      	movs	r2, #8
 800526a:	f00e fbe1 	bl	8013a30 <HAL_UART_Transmit>
			printer_e();
 800526e:	f003 fcbb 	bl	8008be8 <printer_e>
		}
		memset(RxBuff,0,12);
 8005272:	4b8a      	ldr	r3, [pc, #552]	@ (800549c <Status_Check+0x3a8>)
 8005274:	220c      	movs	r2, #12
 8005276:	2100      	movs	r1, #0
 8005278:	0018      	movs	r0, r3
 800527a:	f013 ff29 	bl	80190d0 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_cleardata, 7, 0x0E);
 800527e:	4993      	ldr	r1, [pc, #588]	@ (80054cc <Status_Check+0x3d8>)
 8005280:	4880      	ldr	r0, [pc, #512]	@ (8005484 <Status_Check+0x390>)
 8005282:	230e      	movs	r3, #14
 8005284:	2207      	movs	r2, #7
 8005286:	f00e fbd3 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 800528a:	2002      	movs	r0, #2
 800528c:	f009 f94a 	bl	800e524 <HAL_Delay>
	if(RxFlag)                                    // everyday operating data clear
 8005290:	4b8a      	ldr	r3, [pc, #552]	@ (80054bc <Status_Check+0x3c8>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d100      	bne.n	800529a <Status_Check+0x1a6>
 8005298:	e0a2      	b.n	80053e0 <Status_Check+0x2ec>
	{
		RxFlag = FALSE;
 800529a:	4b88      	ldr	r3, [pc, #544]	@ (80054bc <Status_Check+0x3c8>)
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 80052a0:	4b7e      	ldr	r3, [pc, #504]	@ (800549c <Status_Check+0x3a8>)
 80052a2:	7a1b      	ldrb	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d000      	beq.n	80052aa <Status_Check+0x1b6>
 80052a8:	e094      	b.n	80053d4 <Status_Check+0x2e0>
		{
			cflag_d = 0;
 80052aa:	4b89      	ldr	r3, [pc, #548]	@ (80054d0 <Status_Check+0x3dc>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
			cfare_d = 0;
 80052b0:	4b88      	ldr	r3, [pc, #544]	@ (80054d4 <Status_Check+0x3e0>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
			csub_d = 0;
 80052b6:	4b88      	ldr	r3, [pc, #544]	@ (80054d8 <Status_Check+0x3e4>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

			cflag[0] = 0x30;
 80052bc:	4b87      	ldr	r3, [pc, #540]	@ (80054dc <Status_Check+0x3e8>)
 80052be:	2230      	movs	r2, #48	@ 0x30
 80052c0:	701a      	strb	r2, [r3, #0]
			cflag[1] = 0x30;
 80052c2:	4b86      	ldr	r3, [pc, #536]	@ (80054dc <Status_Check+0x3e8>)
 80052c4:	2230      	movs	r2, #48	@ 0x30
 80052c6:	705a      	strb	r2, [r3, #1]
			cflag[2] = 0x30;
 80052c8:	4b84      	ldr	r3, [pc, #528]	@ (80054dc <Status_Check+0x3e8>)
 80052ca:	2230      	movs	r2, #48	@ 0x30
 80052cc:	709a      	strb	r2, [r3, #2]
			cflag[3] = 0x30;
 80052ce:	4b83      	ldr	r3, [pc, #524]	@ (80054dc <Status_Check+0x3e8>)
 80052d0:	2230      	movs	r2, #48	@ 0x30
 80052d2:	70da      	strb	r2, [r3, #3]
			cflag[4] = 0x30;
 80052d4:	4b81      	ldr	r3, [pc, #516]	@ (80054dc <Status_Check+0x3e8>)
 80052d6:	2230      	movs	r2, #48	@ 0x30
 80052d8:	711a      	strb	r2, [r3, #4]
			cflag[5] = 0x30;
 80052da:	4b80      	ldr	r3, [pc, #512]	@ (80054dc <Status_Check+0x3e8>)
 80052dc:	2230      	movs	r2, #48	@ 0x30
 80052de:	715a      	strb	r2, [r3, #5]
			cflag[6] = 0x30;
 80052e0:	4b7e      	ldr	r3, [pc, #504]	@ (80054dc <Status_Check+0x3e8>)
 80052e2:	2230      	movs	r2, #48	@ 0x30
 80052e4:	719a      	strb	r2, [r3, #6]
			cflag[7] = 0x30;
 80052e6:	4b7d      	ldr	r3, [pc, #500]	@ (80054dc <Status_Check+0x3e8>)
 80052e8:	2230      	movs	r2, #48	@ 0x30
 80052ea:	71da      	strb	r2, [r3, #7]

			cfare[0] = 0x30;
 80052ec:	4b7c      	ldr	r3, [pc, #496]	@ (80054e0 <Status_Check+0x3ec>)
 80052ee:	2230      	movs	r2, #48	@ 0x30
 80052f0:	701a      	strb	r2, [r3, #0]
			cfare[1] = 0x30;
 80052f2:	4b7b      	ldr	r3, [pc, #492]	@ (80054e0 <Status_Check+0x3ec>)
 80052f4:	2230      	movs	r2, #48	@ 0x30
 80052f6:	705a      	strb	r2, [r3, #1]
			cfare[2] = 0x30;
 80052f8:	4b79      	ldr	r3, [pc, #484]	@ (80054e0 <Status_Check+0x3ec>)
 80052fa:	2230      	movs	r2, #48	@ 0x30
 80052fc:	709a      	strb	r2, [r3, #2]
			cfare[3] = 0x30;
 80052fe:	4b78      	ldr	r3, [pc, #480]	@ (80054e0 <Status_Check+0x3ec>)
 8005300:	2230      	movs	r2, #48	@ 0x30
 8005302:	70da      	strb	r2, [r3, #3]
			cfare[4] = 0x30;
 8005304:	4b76      	ldr	r3, [pc, #472]	@ (80054e0 <Status_Check+0x3ec>)
 8005306:	2230      	movs	r2, #48	@ 0x30
 8005308:	711a      	strb	r2, [r3, #4]
			cfare[5] = 0x30;
 800530a:	4b75      	ldr	r3, [pc, #468]	@ (80054e0 <Status_Check+0x3ec>)
 800530c:	2230      	movs	r2, #48	@ 0x30
 800530e:	715a      	strb	r2, [r3, #5]
			cfare[6] = 0x30;
 8005310:	4b73      	ldr	r3, [pc, #460]	@ (80054e0 <Status_Check+0x3ec>)
 8005312:	2230      	movs	r2, #48	@ 0x30
 8005314:	719a      	strb	r2, [r3, #6]
			cfare[7] = 0x30;
 8005316:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <Status_Check+0x3ec>)
 8005318:	2230      	movs	r2, #48	@ 0x30
 800531a:	71da      	strb	r2, [r3, #7]

			csub[0] = 0x30;
 800531c:	4b71      	ldr	r3, [pc, #452]	@ (80054e4 <Status_Check+0x3f0>)
 800531e:	2230      	movs	r2, #48	@ 0x30
 8005320:	701a      	strb	r2, [r3, #0]
			csub[1] = 0x30;
 8005322:	4b70      	ldr	r3, [pc, #448]	@ (80054e4 <Status_Check+0x3f0>)
 8005324:	2230      	movs	r2, #48	@ 0x30
 8005326:	705a      	strb	r2, [r3, #1]
			csub[2] = 0x30;
 8005328:	4b6e      	ldr	r3, [pc, #440]	@ (80054e4 <Status_Check+0x3f0>)
 800532a:	2230      	movs	r2, #48	@ 0x30
 800532c:	709a      	strb	r2, [r3, #2]
			csub[3] = 0x30;
 800532e:	4b6d      	ldr	r3, [pc, #436]	@ (80054e4 <Status_Check+0x3f0>)
 8005330:	2230      	movs	r2, #48	@ 0x30
 8005332:	70da      	strb	r2, [r3, #3]
			csub[4] = 0x30;
 8005334:	4b6b      	ldr	r3, [pc, #428]	@ (80054e4 <Status_Check+0x3f0>)
 8005336:	2230      	movs	r2, #48	@ 0x30
 8005338:	711a      	strb	r2, [r3, #4]
			csub[5] = 0x30;
 800533a:	4b6a      	ldr	r3, [pc, #424]	@ (80054e4 <Status_Check+0x3f0>)
 800533c:	2230      	movs	r2, #48	@ 0x30
 800533e:	715a      	strb	r2, [r3, #5]
			csub[6] = 0x30;
 8005340:	4b68      	ldr	r3, [pc, #416]	@ (80054e4 <Status_Check+0x3f0>)
 8005342:	2230      	movs	r2, #48	@ 0x30
 8005344:	719a      	strb	r2, [r3, #6]
			csub[7] = 0x30;
 8005346:	4b67      	ldr	r3, [pc, #412]	@ (80054e4 <Status_Check+0x3f0>)
 8005348:	2230      	movs	r2, #48	@ 0x30
 800534a:	71da      	strb	r2, [r3, #7]

			E_write();
 800534c:	f006 fbe4 	bl	800bb18 <E_write>

			total_hmi[34] = 0x00;
 8005350:	4b4b      	ldr	r3, [pc, #300]	@ (8005480 <Status_Check+0x38c>)
 8005352:	2222      	movs	r2, #34	@ 0x22
 8005354:	2100      	movs	r1, #0
 8005356:	5499      	strb	r1, [r3, r2]
			total_hmi[35] = 0x00;
 8005358:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <Status_Check+0x38c>)
 800535a:	2223      	movs	r2, #35	@ 0x23
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]
			total_hmi[36] = 0x00;
 8005360:	4b47      	ldr	r3, [pc, #284]	@ (8005480 <Status_Check+0x38c>)
 8005362:	2224      	movs	r2, #36	@ 0x24
 8005364:	2100      	movs	r1, #0
 8005366:	5499      	strb	r1, [r3, r2]
			total_hmi[37] = 0x00;
 8005368:	4b45      	ldr	r3, [pc, #276]	@ (8005480 <Status_Check+0x38c>)
 800536a:	2225      	movs	r2, #37	@ 0x25
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]
			total_hmi[38] = 0x00;
 8005370:	4b43      	ldr	r3, [pc, #268]	@ (8005480 <Status_Check+0x38c>)
 8005372:	2226      	movs	r2, #38	@ 0x26
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]
			total_hmi[39] = 0x00;
 8005378:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <Status_Check+0x38c>)
 800537a:	2227      	movs	r2, #39	@ 0x27
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]
			total_hmi[40] = 0x00;
 8005380:	4b3f      	ldr	r3, [pc, #252]	@ (8005480 <Status_Check+0x38c>)
 8005382:	2228      	movs	r2, #40	@ 0x28
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]
			total_hmi[41] = 0x00;
 8005388:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <Status_Check+0x38c>)
 800538a:	2229      	movs	r2, #41	@ 0x29
 800538c:	2100      	movs	r1, #0
 800538e:	5499      	strb	r1, [r3, r2]
			total_hmi[42] = 0x00;
 8005390:	4b3b      	ldr	r3, [pc, #236]	@ (8005480 <Status_Check+0x38c>)
 8005392:	222a      	movs	r2, #42	@ 0x2a
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]
			total_hmi[43] = 0x00;
 8005398:	4b39      	ldr	r3, [pc, #228]	@ (8005480 <Status_Check+0x38c>)
 800539a:	222b      	movs	r2, #43	@ 0x2b
 800539c:	2100      	movs	r1, #0
 800539e:	5499      	strb	r1, [r3, r2]
			total_hmi[44] = 0x00;
 80053a0:	4b37      	ldr	r3, [pc, #220]	@ (8005480 <Status_Check+0x38c>)
 80053a2:	222c      	movs	r2, #44	@ 0x2c
 80053a4:	2100      	movs	r1, #0
 80053a6:	5499      	strb	r1, [r3, r2]
			total_hmi[45] = 0x00;
 80053a8:	4b35      	ldr	r3, [pc, #212]	@ (8005480 <Status_Check+0x38c>)
 80053aa:	222d      	movs	r2, #45	@ 0x2d
 80053ac:	2100      	movs	r1, #0
 80053ae:	5499      	strb	r1, [r3, r2]

			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_clear, 18, 0x0E);
 80053b0:	494d      	ldr	r1, [pc, #308]	@ (80054e8 <Status_Check+0x3f4>)
 80053b2:	4834      	ldr	r0, [pc, #208]	@ (8005484 <Status_Check+0x390>)
 80053b4:	230e      	movs	r3, #14
 80053b6:	2212      	movs	r2, #18
 80053b8:	f00e fb3a 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_close, 10, 0x0E);
 80053bc:	494b      	ldr	r1, [pc, #300]	@ (80054ec <Status_Check+0x3f8>)
 80053be:	4831      	ldr	r0, [pc, #196]	@ (8005484 <Status_Check+0x390>)
 80053c0:	230e      	movs	r3, #14
 80053c2:	220a      	movs	r2, #10
 80053c4:	f00e fb34 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cdata_clear, 8, 0x0E);
 80053c8:	4949      	ldr	r1, [pc, #292]	@ (80054f0 <Status_Check+0x3fc>)
 80053ca:	482e      	ldr	r0, [pc, #184]	@ (8005484 <Status_Check+0x390>)
 80053cc:	230e      	movs	r3, #14
 80053ce:	2208      	movs	r2, #8
 80053d0:	f00e fb2e 	bl	8013a30 <HAL_UART_Transmit>
		}
		memset(RxBuff,0,12);
 80053d4:	4b31      	ldr	r3, [pc, #196]	@ (800549c <Status_Check+0x3a8>)
 80053d6:	220c      	movs	r2, #12
 80053d8:	2100      	movs	r1, #0
 80053da:	0018      	movs	r0, r3
 80053dc:	f013 fe78 	bl	80190d0 <memset>
	}

	if (Flag_V && Flag_H)
 80053e0:	4b32      	ldr	r3, [pc, #200]	@ (80054ac <Status_Check+0x3b8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <Status_Check+0x310>
 80053e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005498 <Status_Check+0x3a4>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <Status_Check+0x310>
	{
		Flag_V2H = TRUE;
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <Status_Check+0x400>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 80053f6:	4b40      	ldr	r3, [pc, #256]	@ (80054f8 <Status_Check+0x404>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 80053fc:	4b3f      	ldr	r3, [pc, #252]	@ (80054fc <Status_Check+0x408>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	e022      	b.n	800544a <Status_Check+0x356>
	}
	else if (Flag_H && Flag_S)
 8005404:	4b24      	ldr	r3, [pc, #144]	@ (8005498 <Status_Check+0x3a4>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <Status_Check+0x334>
 800540c:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <Status_Check+0x3b0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <Status_Check+0x334>
	{
		Flag_V2H = FALSE;
 8005414:	4b37      	ldr	r3, [pc, #220]	@ (80054f4 <Status_Check+0x400>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
		Flag_H2S = TRUE;
 800541a:	4b37      	ldr	r3, [pc, #220]	@ (80054f8 <Status_Check+0x404>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <Status_Check+0x408>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e010      	b.n	800544a <Status_Check+0x356>
	}
	else if (Flag_S && Flag_V)
 8005428:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <Status_Check+0x3b0>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <Status_Check+0x356>
 8005430:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <Status_Check+0x3b8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <Status_Check+0x356>
	{
		Flag_V2H = FALSE;
 8005438:	4b2e      	ldr	r3, [pc, #184]	@ (80054f4 <Status_Check+0x400>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 800543e:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <Status_Check+0x404>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
		Flag_S2V = TRUE;
 8005444:	4b2d      	ldr	r3, [pc, #180]	@ (80054fc <Status_Check+0x408>)
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
	}

	ex_counter = counter;
 800544a:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <Status_Check+0x40c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b2d      	ldr	r3, [pc, #180]	@ (8005504 <Status_Check+0x410>)
 8005450:	601a      	str	r2, [r3, #0]

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1)
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4a2c      	ldr	r2, [pc, #176]	@ (8005508 <Status_Check+0x414>)
 8005458:	0019      	movs	r1, r3
 800545a:	0010      	movs	r0, r2
 800545c:	f009 fe12 	bl	800f084 <HAL_GPIO_ReadPin>
 8005460:	0003      	movs	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d158      	bne.n	8005518 <Status_Check+0x424>
	{
		//pc9 = 0, encoder
		//pc9 = 1, tester/not connect
		flag_tester = 1;//tester
 8005466:	4b29      	ldr	r3, [pc, #164]	@ (800550c <Status_Check+0x418>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
		flag_encoder = 0;//car
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <Status_Check+0x41c>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
		cnt += 1;
 8005472:	4b28      	ldr	r3, [pc, #160]	@ (8005514 <Status_Check+0x420>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b26      	ldr	r3, [pc, #152]	@ (8005514 <Status_Check+0x420>)
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e054      	b.n	800552a <Status_Check+0x436>
 8005480:	200000f4 	.word	0x200000f4
 8005484:	20000700 	.word	0x20000700
 8005488:	200002fc 	.word	0x200002fc
 800548c:	20000308 	.word	0x20000308
 8005490:	0801a038 	.word	0x0801a038
 8005494:	20000b25 	.word	0x20000b25
 8005498:	20000b27 	.word	0x20000b27
 800549c:	20000ae8 	.word	0x20000ae8
 80054a0:	0801a040 	.word	0x0801a040
 80054a4:	20000b28 	.word	0x20000b28
 80054a8:	0801a048 	.word	0x0801a048
 80054ac:	20000b26 	.word	0x20000b26
 80054b0:	20003598 	.word	0x20003598
 80054b4:	20003599 	.word	0x20003599
 80054b8:	0801a070 	.word	0x0801a070
 80054bc:	20000ae4 	.word	0x20000ae4
 80054c0:	20003597 	.word	0x20003597
 80054c4:	0801a110 	.word	0x0801a110
 80054c8:	0801a118 	.word	0x0801a118
 80054cc:	0801a0c4 	.word	0x0801a0c4
 80054d0:	20000fdc 	.word	0x20000fdc
 80054d4:	20000fec 	.word	0x20000fec
 80054d8:	20000ff0 	.word	0x20000ff0
 80054dc:	20001034 	.word	0x20001034
 80054e0:	20001054 	.word	0x20001054
 80054e4:	2000105c 	.word	0x2000105c
 80054e8:	0801a0e0 	.word	0x0801a0e0
 80054ec:	0801a0d4 	.word	0x0801a0d4
 80054f0:	0801a0cc 	.word	0x0801a0cc
 80054f4:	20000b29 	.word	0x20000b29
 80054f8:	20000b2a 	.word	0x20000b2a
 80054fc:	20000b2b 	.word	0x20000b2b
 8005500:	20000e70 	.word	0x20000e70
 8005504:	20000e74 	.word	0x20000e74
 8005508:	50000800 	.word	0x50000800
 800550c:	2000359b 	.word	0x2000359b
 8005510:	2000359c 	.word	0x2000359c
 8005514:	20000e7c 	.word	0x20000e7c
	}
	else
	{
		flag_tester = 0;
 8005518:	4b5a      	ldr	r3, [pc, #360]	@ (8005684 <Status_Check+0x590>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
		flag_encoder = 1;
 800551e:	4b5a      	ldr	r3, [pc, #360]	@ (8005688 <Status_Check+0x594>)
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 8005524:	4b59      	ldr	r3, [pc, #356]	@ (800568c <Status_Check+0x598>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
	}

	if(ex_counter >= 10 && flag_tester && flag_sp)
 800552a:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <Status_Check+0x59c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d910      	bls.n	8005554 <Status_Check+0x460>
 8005532:	4b54      	ldr	r3, [pc, #336]	@ (8005684 <Status_Check+0x590>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <Status_Check+0x460>
 800553a:	4b56      	ldr	r3, [pc, #344]	@ (8005694 <Status_Check+0x5a0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <Status_Check+0x460>
	{
//		flag_tester = 1;
		Flag_V2H = FALSE;
 8005542:	4b55      	ldr	r3, [pc, #340]	@ (8005698 <Status_Check+0x5a4>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005548:	4b54      	ldr	r3, [pc, #336]	@ (800569c <Status_Check+0x5a8>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
		Flag_S2V = TRUE;
 800554e:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <Status_Check+0x5ac>)
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
	}

	if (Flag_V2H && (Drv_state == S_VACANT))
 8005554:	4b50      	ldr	r3, [pc, #320]	@ (8005698 <Status_Check+0x5a4>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <Status_Check+0x47e>
 800555c:	4b51      	ldr	r3, [pc, #324]	@ (80056a4 <Status_Check+0x5b0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <Status_Check+0x47e>
	{
		Drv_state = S_HIRED;
 8005564:	4b4f      	ldr	r3, [pc, #316]	@ (80056a4 <Status_Check+0x5b0>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
		Flag_V2H = FALSE;
 800556a:	4b4b      	ldr	r3, [pc, #300]	@ (8005698 <Status_Check+0x5a4>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e040      	b.n	80055f4 <Status_Check+0x500>
	}
	else if (Flag_H2S && (Drv_state == S_HIRED))
 8005572:	4b4a      	ldr	r3, [pc, #296]	@ (800569c <Status_Check+0x5a8>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <Status_Check+0x49c>
 800557a:	4b4a      	ldr	r3, [pc, #296]	@ (80056a4 <Status_Check+0x5b0>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d106      	bne.n	8005590 <Status_Check+0x49c>
	{
		Drv_state = S_STOP;
 8005582:	4b48      	ldr	r3, [pc, #288]	@ (80056a4 <Status_Check+0x5b0>)
 8005584:	2202      	movs	r2, #2
 8005586:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 8005588:	4b44      	ldr	r3, [pc, #272]	@ (800569c <Status_Check+0x5a8>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e031      	b.n	80055f4 <Status_Check+0x500>
	}
	else if (Flag_H2S && (Drv_state == S_STOP))
 8005590:	4b42      	ldr	r3, [pc, #264]	@ (800569c <Status_Check+0x5a8>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <Status_Check+0x4ba>
 8005598:	4b42      	ldr	r3, [pc, #264]	@ (80056a4 <Status_Check+0x5b0>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d106      	bne.n	80055ae <Status_Check+0x4ba>
	{
		Drv_state = S_HIRED;
 80055a0:	4b40      	ldr	r3, [pc, #256]	@ (80056a4 <Status_Check+0x5b0>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
		Flag_H2S = FALSE;
 80055a6:	4b3d      	ldr	r3, [pc, #244]	@ (800569c <Status_Check+0x5a8>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e022      	b.n	80055f4 <Status_Check+0x500>
	}
	else if (Flag_S2V && (Drv_state == S_STOP))
 80055ae:	4b3c      	ldr	r3, [pc, #240]	@ (80056a0 <Status_Check+0x5ac>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <Status_Check+0x4e4>
 80055b6:	4b3b      	ldr	r3, [pc, #236]	@ (80056a4 <Status_Check+0x5b0>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d10c      	bne.n	80055d8 <Status_Check+0x4e4>
	{
		Drv_state = S_VACANT;
 80055be:	4b39      	ldr	r3, [pc, #228]	@ (80056a4 <Status_Check+0x5b0>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 80055c4:	4b36      	ldr	r3, [pc, #216]	@ (80056a0 <Status_Check+0x5ac>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80055ca:	4b37      	ldr	r3, [pc, #220]	@ (80056a8 <Status_Check+0x5b4>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
		ex_counter = 0;
 80055d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005690 <Status_Check+0x59c>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e00d      	b.n	80055f4 <Status_Check+0x500>
	}
	else if (Flag_S2V && (Drv_state == S_VACANT))
 80055d8:	4b31      	ldr	r3, [pc, #196]	@ (80056a0 <Status_Check+0x5ac>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <Status_Check+0x500>
 80055e0:	4b30      	ldr	r3, [pc, #192]	@ (80056a4 <Status_Check+0x5b0>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <Status_Check+0x500>
	{
		Drv_state = S_STOP;
 80055e8:	4b2e      	ldr	r3, [pc, #184]	@ (80056a4 <Status_Check+0x5b0>)
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
		Flag_S2V = FALSE;
 80055ee:	4b2c      	ldr	r3, [pc, #176]	@ (80056a0 <Status_Check+0x5ac>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
//		}
//		memset(RxBuff,0,12);
//	}

	//States Process
	if (Drv_state == S_HIRED)
 80055f4:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <Status_Check+0x5b0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d108      	bne.n	800560e <Status_Check+0x51a>
	{
		HMI_Hired_W();
 80055fc:	f000 f874 	bl	80056e8 <HMI_Hired_W>
		ttime_counter++;
 8005600:	4b2a      	ldr	r3, [pc, #168]	@ (80056ac <Status_Check+0x5b8>)
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	4b28      	ldr	r3, [pc, #160]	@ (80056ac <Status_Check+0x5b8>)
 800560a:	801a      	strh	r2, [r3, #0]
			counter = 0;
		}
		HMI_Vacant_W();
		nbtime_counter++;
	}
}
 800560c:	e036      	b.n	800567c <Status_Check+0x588>
	else if (Drv_state == S_STOP)
 800560e:	4b25      	ldr	r3, [pc, #148]	@ (80056a4 <Status_Check+0x5b0>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d108      	bne.n	8005628 <Status_Check+0x534>
		HMI_Stop_W();
 8005616:	f000 fb17 	bl	8005c48 <HMI_Stop_W>
		ttime_counter++;
 800561a:	4b24      	ldr	r3, [pc, #144]	@ (80056ac <Status_Check+0x5b8>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	4b22      	ldr	r3, [pc, #136]	@ (80056ac <Status_Check+0x5b8>)
 8005624:	801a      	strh	r2, [r3, #0]
}
 8005626:	e029      	b.n	800567c <Status_Check+0x588>
	else if (Drv_state == S_VACANT)
 8005628:	4b1e      	ldr	r3, [pc, #120]	@ (80056a4 <Status_Check+0x5b0>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d125      	bne.n	800567c <Status_Check+0x588>
		if (cnt != 0)
 8005630:	4b16      	ldr	r3, [pc, #88]	@ (800568c <Status_Check+0x598>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d017      	beq.n	8005668 <Status_Check+0x574>
			if (cnt > 3 && counter == ex_counter && ex_counter < 10)
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <Status_Check+0x598>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d916      	bls.n	800566e <Status_Check+0x57a>
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <Status_Check+0x5b4>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <Status_Check+0x59c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d110      	bne.n	800566e <Status_Check+0x57a>
 800564c:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <Status_Check+0x59c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b09      	cmp	r3, #9
 8005652:	d80c      	bhi.n	800566e <Status_Check+0x57a>
				cnt = 0;
 8005654:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <Status_Check+0x598>)
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
				ex_counter = 0;
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <Status_Check+0x59c>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
				counter = 0;
 8005660:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <Status_Check+0x5b4>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e002      	b.n	800566e <Status_Check+0x57a>
			counter = 0;
 8005668:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <Status_Check+0x5b4>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
		HMI_Vacant_W();
 800566e:	f001 fde7 	bl	8007240 <HMI_Vacant_W>
		nbtime_counter++;
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <Status_Check+0x5bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <Status_Check+0x5bc>)
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	2000359b 	.word	0x2000359b
 8005688:	2000359c 	.word	0x2000359c
 800568c:	20000e7c 	.word	0x20000e7c
 8005690:	20000e74 	.word	0x20000e74
 8005694:	20000539 	.word	0x20000539
 8005698:	20000b29 	.word	0x20000b29
 800569c:	20000b2a 	.word	0x20000b2a
 80056a0:	20000b2b 	.word	0x20000b2b
 80056a4:	20000b1e 	.word	0x20000b1e
 80056a8:	20000e70 	.word	0x20000e70
 80056ac:	20001016 	.word	0x20001016
 80056b0:	20001018 	.word	0x20001018

080056b4 <Status_Change>:

void Status_Change(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	if (RxFlag)
 80056b8:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <Status_Change+0x28>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <Status_Change+0x20>
	{
		if(RxBuff[8] == 0x01)
 80056c0:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <Status_Change+0x2c>)
 80056c2:	7a1b      	ldrb	r3, [r3, #8]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d102      	bne.n	80056ce <Status_Change+0x1a>
		{
			Drv_state_flag = TRUE;
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <Status_Change+0x30>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
		}
		RxFlag = FALSE;
 80056ce:	4b03      	ldr	r3, [pc, #12]	@ (80056dc <Status_Change+0x28>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
	}
}
 80056d4:	46c0      	nop			@ (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	20000ae4 	.word	0x20000ae4
 80056e0:	20000ae8 	.word	0x20000ae8
 80056e4:	20000b25 	.word	0x20000b25

080056e8 <HMI_Hired_W>:

void HMI_Hired_W(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_On, 8, 0x10);
 80056ee:	49de      	ldr	r1, [pc, #888]	@ (8005a68 <HMI_Hired_W+0x380>)
 80056f0:	48de      	ldr	r0, [pc, #888]	@ (8005a6c <HMI_Hired_W+0x384>)
 80056f2:	2310      	movs	r3, #16
 80056f4:	2208      	movs	r2, #8
 80056f6:	f00e f99b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 80056fa:	2001      	movs	r0, #1
 80056fc:	f008 ff12 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_Off, 8, 0x10);
 8005700:	49db      	ldr	r1, [pc, #876]	@ (8005a70 <HMI_Hired_W+0x388>)
 8005702:	48da      	ldr	r0, [pc, #872]	@ (8005a6c <HMI_Hired_W+0x384>)
 8005704:	2310      	movs	r3, #16
 8005706:	2208      	movs	r2, #8
 8005708:	f00e f992 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 800570c:	2001      	movs	r0, #1
 800570e:	f008 ff09 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 8005712:	49d8      	ldr	r1, [pc, #864]	@ (8005a74 <HMI_Hired_W+0x38c>)
 8005714:	48d5      	ldr	r0, [pc, #852]	@ (8005a6c <HMI_Hired_W+0x384>)
 8005716:	2310      	movs	r3, #16
 8005718:	2208      	movs	r2, #8
 800571a:	f00e f989 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 800571e:	2001      	movs	r0, #1
 8005720:	f008 ff00 	bl	800e524 <HAL_Delay>

	Last_Final_price = 0;
 8005724:	4bd4      	ldr	r3, [pc, #848]	@ (8005a78 <HMI_Hired_W+0x390>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
	Last_Final_price_x10 = 0;
 800572a:	4bd4      	ldr	r3, [pc, #848]	@ (8005a7c <HMI_Hired_W+0x394>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
	ex_Addition = 0;
 8005730:	4bd3      	ldr	r3, [pc, #844]	@ (8005a80 <HMI_Hired_W+0x398>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	Last_Dis = 0;
 8005736:	4bd3      	ldr	r3, [pc, #844]	@ (8005a84 <HMI_Hired_W+0x39c>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
	Last_fare_d_x100 = 0;
 800573c:	4bd2      	ldr	r3, [pc, #840]	@ (8005a88 <HMI_Hired_W+0x3a0>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);// not allow user to print during hired
 8005742:	49d2      	ldr	r1, [pc, #840]	@ (8005a8c <HMI_Hired_W+0x3a4>)
 8005744:	48c9      	ldr	r0, [pc, #804]	@ (8005a6c <HMI_Hired_W+0x384>)
 8005746:	2310      	movs	r3, #16
 8005748:	2208      	movs	r2, #8
 800574a:	f00e f971 	bl	8013a30 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, CLR_RD_qr, 8, 0x1C);     // not allow user to change QR code
 800574e:	49d0      	ldr	r1, [pc, #832]	@ (8005a90 <HMI_Hired_W+0x3a8>)
 8005750:	48c6      	ldr	r0, [pc, #792]	@ (8005a6c <HMI_Hired_W+0x384>)
 8005752:	231c      	movs	r3, #28
 8005754:	2208      	movs	r2, #8
 8005756:	f00e f96b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, plate_qr, 18, 0x1C);     //Plate QR code,  need to show it during driving?
 800575a:	49ce      	ldr	r1, [pc, #824]	@ (8005a94 <HMI_Hired_W+0x3ac>)
 800575c:	48c3      	ldr	r0, [pc, #780]	@ (8005a6c <HMI_Hired_W+0x384>)
 800575e:	231c      	movs	r3, #28
 8005760:	2212      	movs	r2, #18
 8005762:	f00e f965 	bl	8013a30 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, clr_plate_qr, 8, 0x1C);  // clear QR code
	HAL_UART_Transmit(&huart1, (uint8_t *) cmd_off, 8, 0x0E);
 8005766:	49cc      	ldr	r1, [pc, #816]	@ (8005a98 <HMI_Hired_W+0x3b0>)
 8005768:	48c0      	ldr	r0, [pc, #768]	@ (8005a6c <HMI_Hired_W+0x384>)
 800576a:	230e      	movs	r3, #14
 800576c:	2208      	movs	r2, #8
 800576e:	f00e f95f 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,page_clear,8,0x0E);
 8005772:	49ca      	ldr	r1, [pc, #808]	@ (8005a9c <HMI_Hired_W+0x3b4>)
 8005774:	48bd      	ldr	r0, [pc, #756]	@ (8005a6c <HMI_Hired_W+0x384>)
 8005776:	230e      	movs	r3, #14
 8005778:	2208      	movs	r2, #8
 800577a:	f00e f959 	bl	8013a30 <HAL_UART_Transmit>

	Fare_Calculation();                                 //calculated all the things in taxi
 800577e:	f005 f9cb 	bl	800ab18 <Fare_Calculation>

	fare_d_x10 = (int)(fare_d * 10 + 0.5);               //show to HMI only (fare)
 8005782:	4bc7      	ldr	r3, [pc, #796]	@ (8005aa0 <HMI_Hired_W+0x3b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	49c7      	ldr	r1, [pc, #796]	@ (8005aa4 <HMI_Hired_W+0x3bc>)
 8005788:	1c18      	adds	r0, r3, #0
 800578a:	f7fb fb4d 	bl	8000e28 <__aeabi_fmul>
 800578e:	1c03      	adds	r3, r0, #0
 8005790:	1c18      	adds	r0, r3, #0
 8005792:	f7fd fd73 	bl	800327c <__aeabi_f2d>
 8005796:	2200      	movs	r2, #0
 8005798:	4bc3      	ldr	r3, [pc, #780]	@ (8005aa8 <HMI_Hired_W+0x3c0>)
 800579a:	f7fb fed5 	bl	8001548 <__aeabi_dadd>
 800579e:	0002      	movs	r2, r0
 80057a0:	000b      	movs	r3, r1
 80057a2:	0010      	movs	r0, r2
 80057a4:	0019      	movs	r1, r3
 80057a6:	f7fd fcdb 	bl	8003160 <__aeabi_d2iz>
 80057aa:	0003      	movs	r3, r0
 80057ac:	001a      	movs	r2, r3
 80057ae:	4bbf      	ldr	r3, [pc, #764]	@ (8005aac <HMI_Hired_W+0x3c4>)
 80057b0:	601a      	str	r2, [r3, #0]
	//display limit - total fare 9999.9, sub 999.0, distance 999.9, duration 99:59:59
	if(fare_d_x10 >= 99999)
 80057b2:	4bbe      	ldr	r3, [pc, #760]	@ (8005aac <HMI_Hired_W+0x3c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4abe      	ldr	r2, [pc, #760]	@ (8005ab0 <HMI_Hired_W+0x3c8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d902      	bls.n	80057c2 <HMI_Hired_W+0xda>
	{
		fare_d_x10 = 99999;
 80057bc:	4bbb      	ldr	r3, [pc, #748]	@ (8005aac <HMI_Hired_W+0x3c4>)
 80057be:	4abd      	ldr	r2, [pc, #756]	@ (8005ab4 <HMI_Hired_W+0x3cc>)
 80057c0:	601a      	str	r2, [r3, #0]
	}
	fare_d_x100 = fare_d_x10 * 10;
 80057c2:	4bba      	ldr	r3, [pc, #744]	@ (8005aac <HMI_Hired_W+0x3c4>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	0013      	movs	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	001a      	movs	r2, r3
 80057d0:	4bb9      	ldr	r3, [pc, #740]	@ (8005ab8 <HMI_Hired_W+0x3d0>)
 80057d2:	601a      	str	r2, [r3, #0]
	Long_to_byte(fare_d_x100, temp_array);
 80057d4:	4bb8      	ldr	r3, [pc, #736]	@ (8005ab8 <HMI_Hired_W+0x3d0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	1d3a      	adds	r2, r7, #4
 80057da:	0011      	movs	r1, r2
 80057dc:	0018      	movs	r0, r3
 80057de:	f002 fd89 	bl	80082f4 <Long_to_byte>
	HMI_Command(Fee,temp_array,10);
 80057e2:	1d39      	adds	r1, r7, #4
 80057e4:	4bb5      	ldr	r3, [pc, #724]	@ (8005abc <HMI_Hired_W+0x3d4>)
 80057e6:	220a      	movs	r2, #10
 80057e8:	0018      	movs	r0, r3
 80057ea:	f002 fda2 	bl	8008332 <HMI_Command>

	extras_rd();
 80057ee:	f002 fab9 	bl	8007d64 <extras_rd>

	//distance display                                    //show to HMI only (distance)
	Dis = (int)(Distance*100); // + 0.5);
 80057f2:	4bb3      	ldr	r3, [pc, #716]	@ (8005ac0 <HMI_Hired_W+0x3d8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	49b3      	ldr	r1, [pc, #716]	@ (8005ac4 <HMI_Hired_W+0x3dc>)
 80057f8:	1c18      	adds	r0, r3, #0
 80057fa:	f7fb fb15 	bl	8000e28 <__aeabi_fmul>
 80057fe:	1c03      	adds	r3, r0, #0
 8005800:	1c18      	adds	r0, r3, #0
 8005802:	f7fb fdf3 	bl	80013ec <__aeabi_f2iz>
 8005806:	0003      	movs	r3, r0
 8005808:	001a      	movs	r2, r3
 800580a:	4baf      	ldr	r3, [pc, #700]	@ (8005ac8 <HMI_Hired_W+0x3e0>)
 800580c:	601a      	str	r2, [r3, #0]
	if(Dis >= 99999)
 800580e:	4bae      	ldr	r3, [pc, #696]	@ (8005ac8 <HMI_Hired_W+0x3e0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4aa7      	ldr	r2, [pc, #668]	@ (8005ab0 <HMI_Hired_W+0x3c8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d902      	bls.n	800581e <HMI_Hired_W+0x136>
	{
		Dis = 99999;
 8005818:	4bab      	ldr	r3, [pc, #684]	@ (8005ac8 <HMI_Hired_W+0x3e0>)
 800581a:	4aa6      	ldr	r2, [pc, #664]	@ (8005ab4 <HMI_Hired_W+0x3cc>)
 800581c:	601a      	str	r2, [r3, #0]
	}
	Long_to_byte(Dis, temp_array);
 800581e:	4baa      	ldr	r3, [pc, #680]	@ (8005ac8 <HMI_Hired_W+0x3e0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1d3a      	adds	r2, r7, #4
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f002 fd64 	bl	80082f4 <Long_to_byte>
	HMI_Command(Dis_A,temp_array,10);
 800582c:	1d39      	adds	r1, r7, #4
 800582e:	4ba7      	ldr	r3, [pc, #668]	@ (8005acc <HMI_Hired_W+0x3e4>)
 8005830:	220a      	movs	r2, #10
 8005832:	0018      	movs	r0, r3
 8005834:	f002 fd7d 	bl	8008332 <HMI_Command>

	//duration display
//	Dur_hms_cal();                                            // Time need to change

	//audio start
	if ((Flag_Audio_start==1) || (Flag_btn_changed==1))
 8005838:	4ba5      	ldr	r3, [pc, #660]	@ (8005ad0 <HMI_Hired_W+0x3e8>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d003      	beq.n	8005848 <HMI_Hired_W+0x160>
 8005840:	4ba4      	ldr	r3, [pc, #656]	@ (8005ad4 <HMI_Hired_W+0x3ec>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d122      	bne.n	800588e <HMI_Hired_W+0x1a6>
	{
		Flag_Audio_start = 0;
 8005848:	4ba1      	ldr	r3, [pc, #644]	@ (8005ad0 <HMI_Hired_W+0x3e8>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
		Flag_Audio_end = 1;
 800584e:	4ba2      	ldr	r3, [pc, #648]	@ (8005ad8 <HMI_Hired_W+0x3f0>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
		Flag_btn_changed = 0;
 8005854:	4b9f      	ldr	r3, [pc, #636]	@ (8005ad4 <HMI_Hired_W+0x3ec>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]

		switch (btn_value)
 800585a:	4ba0      	ldr	r3, [pc, #640]	@ (8005adc <HMI_Hired_W+0x3f4>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d00f      	beq.n	8005882 <HMI_Hired_W+0x19a>
 8005862:	dc13      	bgt.n	800588c <HMI_Hired_W+0x1a4>
 8005864:	2b01      	cmp	r3, #1
 8005866:	d002      	beq.n	800586e <HMI_Hired_W+0x186>
 8005868:	2b02      	cmp	r3, #2
 800586a:	d005      	beq.n	8005878 <HMI_Hired_W+0x190>
			case 3:
				Voice_start(v_en_start);
				break;

			default:
				break;
 800586c:	e00e      	b.n	800588c <HMI_Hired_W+0x1a4>
				Voice_start(v_can_start);
 800586e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae0 <HMI_Hired_W+0x3f8>)
 8005870:	0018      	movs	r0, r3
 8005872:	f006 fbe9 	bl	800c048 <Voice_start>
				break;
 8005876:	e00a      	b.n	800588e <HMI_Hired_W+0x1a6>
				Voice_start(v_cn_start);
 8005878:	4b9a      	ldr	r3, [pc, #616]	@ (8005ae4 <HMI_Hired_W+0x3fc>)
 800587a:	0018      	movs	r0, r3
 800587c:	f006 fbe4 	bl	800c048 <Voice_start>
				break;
 8005880:	e005      	b.n	800588e <HMI_Hired_W+0x1a6>
				Voice_start(v_en_start);
 8005882:	4b99      	ldr	r3, [pc, #612]	@ (8005ae8 <HMI_Hired_W+0x400>)
 8005884:	0018      	movs	r0, r3
 8005886:	f006 fbdf 	bl	800c048 <Voice_start>
				break;
 800588a:	e000      	b.n	800588e <HMI_Hired_W+0x1a6>
				break;
 800588c:	46c0      	nop			@ (mov r8, r8)
		}
	}

	//record start time for printer to print
	if(Flag_Printer_Start)
 800588e:	4b97      	ldr	r3, [pc, #604]	@ (8005aec <HMI_Hired_W+0x404>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d02d      	beq.n	80058f2 <HMI_Hired_W+0x20a>
	{
		Flag_Printer_Start = FALSE;
 8005896:	4b95      	ldr	r3, [pc, #596]	@ (8005aec <HMI_Hired_W+0x404>)
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = TRUE;
 800589c:	4b94      	ldr	r3, [pc, #592]	@ (8005af0 <HMI_Hired_W+0x408>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]

		start[0] = hmi_rtc[14];
 80058a2:	4b94      	ldr	r3, [pc, #592]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058a4:	7b9a      	ldrb	r2, [r3, #14]
 80058a6:	4b94      	ldr	r3, [pc, #592]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058a8:	701a      	strb	r2, [r3, #0]
		start[1] = hmi_rtc[15];
 80058aa:	4b92      	ldr	r3, [pc, #584]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058ac:	7bda      	ldrb	r2, [r3, #15]
 80058ae:	4b92      	ldr	r3, [pc, #584]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058b0:	705a      	strb	r2, [r3, #1]
		start[3] = hmi_rtc[11];
 80058b2:	4b90      	ldr	r3, [pc, #576]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058b4:	7ada      	ldrb	r2, [r3, #11]
 80058b6:	4b90      	ldr	r3, [pc, #576]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058b8:	70da      	strb	r2, [r3, #3]
		start[4] = hmi_rtc[12];
 80058ba:	4b8e      	ldr	r3, [pc, #568]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058bc:	7b1a      	ldrb	r2, [r3, #12]
 80058be:	4b8e      	ldr	r3, [pc, #568]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058c0:	711a      	strb	r2, [r3, #4]
		start[6] = hmi_rtc[8];
 80058c2:	4b8c      	ldr	r3, [pc, #560]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058c4:	7a1a      	ldrb	r2, [r3, #8]
 80058c6:	4b8c      	ldr	r3, [pc, #560]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058c8:	719a      	strb	r2, [r3, #6]
		start[7] = hmi_rtc[9];
 80058ca:	4b8a      	ldr	r3, [pc, #552]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058cc:	7a5a      	ldrb	r2, [r3, #9]
 80058ce:	4b8a      	ldr	r3, [pc, #552]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058d0:	71da      	strb	r2, [r3, #7]
		start[9] = hmi_rtc[17];
 80058d2:	4b88      	ldr	r3, [pc, #544]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058d4:	7c5a      	ldrb	r2, [r3, #17]
 80058d6:	4b88      	ldr	r3, [pc, #544]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058d8:	725a      	strb	r2, [r3, #9]
		start[10] = hmi_rtc[18];
 80058da:	4b86      	ldr	r3, [pc, #536]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058dc:	7c9a      	ldrb	r2, [r3, #18]
 80058de:	4b86      	ldr	r3, [pc, #536]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058e0:	729a      	strb	r2, [r3, #10]
		start[12] = hmi_rtc[20];
 80058e2:	4b84      	ldr	r3, [pc, #528]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058e4:	7d1a      	ldrb	r2, [r3, #20]
 80058e6:	4b84      	ldr	r3, [pc, #528]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058e8:	731a      	strb	r2, [r3, #12]
		start[13] = hmi_rtc[21];
 80058ea:	4b82      	ldr	r3, [pc, #520]	@ (8005af4 <HMI_Hired_W+0x40c>)
 80058ec:	7d5a      	ldrb	r2, [r3, #21]
 80058ee:	4b82      	ldr	r3, [pc, #520]	@ (8005af8 <HMI_Hired_W+0x410>)
 80058f0:	735a      	strb	r2, [r3, #13]
	}

	//T-box transfer pick-up time (transfer only one time, Flag_Tbox_Start changed in S_to_V status)
	if(Flag_Tbox_Start)
 80058f2:	4b82      	ldr	r3, [pc, #520]	@ (8005afc <HMI_Hired_W+0x414>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d100      	bne.n	80058fc <HMI_Hired_W+0x214>
 80058fa:	e17e      	b.n	8005bfa <HMI_Hired_W+0x512>
	{
		Flag_Tbox_Start = FALSE;
 80058fc:	4b7f      	ldr	r3, [pc, #508]	@ (8005afc <HMI_Hired_W+0x414>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = TRUE;
 8005902:	4b7f      	ldr	r3, [pc, #508]	@ (8005b00 <HMI_Hired_W+0x418>)
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
		tbox_start();
 8005908:	f002 fe14 	bl	8008534 <tbox_start>
		flag_count = 1;
 800590c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b04 <HMI_Hired_W+0x41c>)
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
		E_read();
 8005912:	f005 fddf 	bl	800b4d4 <E_read>
		//non business time
		nbtime_d = ((nbtime_counter / 60.0)* 1000) / 10; //changed
 8005916:	4b7c      	ldr	r3, [pc, #496]	@ (8005b08 <HMI_Hired_W+0x420>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0018      	movs	r0, r3
 800591c:	f7fd fc8a 	bl	8003234 <__aeabi_ui2d>
 8005920:	2200      	movs	r2, #0
 8005922:	4b7a      	ldr	r3, [pc, #488]	@ (8005b0c <HMI_Hired_W+0x424>)
 8005924:	f7fc f974 	bl	8001c10 <__aeabi_ddiv>
 8005928:	0002      	movs	r2, r0
 800592a:	000b      	movs	r3, r1
 800592c:	0010      	movs	r0, r2
 800592e:	0019      	movs	r1, r3
 8005930:	2200      	movs	r2, #0
 8005932:	4b77      	ldr	r3, [pc, #476]	@ (8005b10 <HMI_Hired_W+0x428>)
 8005934:	f7fc fdb0 	bl	8002498 <__aeabi_dmul>
 8005938:	0002      	movs	r2, r0
 800593a:	000b      	movs	r3, r1
 800593c:	0010      	movs	r0, r2
 800593e:	0019      	movs	r1, r3
 8005940:	2200      	movs	r2, #0
 8005942:	4b74      	ldr	r3, [pc, #464]	@ (8005b14 <HMI_Hired_W+0x42c>)
 8005944:	f7fc f964 	bl	8001c10 <__aeabi_ddiv>
 8005948:	0002      	movs	r2, r0
 800594a:	000b      	movs	r3, r1
 800594c:	0010      	movs	r0, r2
 800594e:	0019      	movs	r1, r3
 8005950:	f7fa fe10 	bl	8000574 <__aeabi_d2uiz>
 8005954:	0002      	movs	r2, r0
 8005956:	4b70      	ldr	r3, [pc, #448]	@ (8005b18 <HMI_Hired_W+0x430>)
 8005958:	601a      	str	r2, [r3, #0]
		nbtime[7] = (nbtime_d /1 % 10) + 0x30;
 800595a:	4b6f      	ldr	r3, [pc, #444]	@ (8005b18 <HMI_Hired_W+0x430>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	210a      	movs	r1, #10
 8005960:	0018      	movs	r0, r3
 8005962:	f7fa fc67 	bl	8000234 <__aeabi_uidivmod>
 8005966:	000b      	movs	r3, r1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	3330      	adds	r3, #48	@ 0x30
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b6b      	ldr	r3, [pc, #428]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005970:	71da      	strb	r2, [r3, #7]
		nbtime[6] = (nbtime_d /10 % 10) + 0x30;
 8005972:	4b69      	ldr	r3, [pc, #420]	@ (8005b18 <HMI_Hired_W+0x430>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	210a      	movs	r1, #10
 8005978:	0018      	movs	r0, r3
 800597a:	f7fa fbd5 	bl	8000128 <__udivsi3>
 800597e:	0003      	movs	r3, r0
 8005980:	210a      	movs	r1, #10
 8005982:	0018      	movs	r0, r3
 8005984:	f7fa fc56 	bl	8000234 <__aeabi_uidivmod>
 8005988:	000b      	movs	r3, r1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	3330      	adds	r3, #48	@ 0x30
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b62      	ldr	r3, [pc, #392]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005992:	719a      	strb	r2, [r3, #6]
		nbtime[5] = (nbtime_d /100 % 10) + 0x30;
 8005994:	4b60      	ldr	r3, [pc, #384]	@ (8005b18 <HMI_Hired_W+0x430>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2164      	movs	r1, #100	@ 0x64
 800599a:	0018      	movs	r0, r3
 800599c:	f7fa fbc4 	bl	8000128 <__udivsi3>
 80059a0:	0003      	movs	r3, r0
 80059a2:	210a      	movs	r1, #10
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7fa fc45 	bl	8000234 <__aeabi_uidivmod>
 80059aa:	000b      	movs	r3, r1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	3330      	adds	r3, #48	@ 0x30
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	4b5a      	ldr	r3, [pc, #360]	@ (8005b1c <HMI_Hired_W+0x434>)
 80059b4:	715a      	strb	r2, [r3, #5]
		nbtime[4] = (nbtime_d /1000 % 10) + 0x30;
 80059b6:	4b58      	ldr	r3, [pc, #352]	@ (8005b18 <HMI_Hired_W+0x430>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	22fa      	movs	r2, #250	@ 0xfa
 80059bc:	0091      	lsls	r1, r2, #2
 80059be:	0018      	movs	r0, r3
 80059c0:	f7fa fbb2 	bl	8000128 <__udivsi3>
 80059c4:	0003      	movs	r3, r0
 80059c6:	210a      	movs	r1, #10
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fa fc33 	bl	8000234 <__aeabi_uidivmod>
 80059ce:	000b      	movs	r3, r1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	3330      	adds	r3, #48	@ 0x30
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4b51      	ldr	r3, [pc, #324]	@ (8005b1c <HMI_Hired_W+0x434>)
 80059d8:	711a      	strb	r2, [r3, #4]
		nbtime[3] = (nbtime_d /10000 % 10) + 0x30;
 80059da:	4b4f      	ldr	r3, [pc, #316]	@ (8005b18 <HMI_Hired_W+0x430>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4950      	ldr	r1, [pc, #320]	@ (8005b20 <HMI_Hired_W+0x438>)
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7fa fba1 	bl	8000128 <__udivsi3>
 80059e6:	0003      	movs	r3, r0
 80059e8:	210a      	movs	r1, #10
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fa fc22 	bl	8000234 <__aeabi_uidivmod>
 80059f0:	000b      	movs	r3, r1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	3330      	adds	r3, #48	@ 0x30
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	4b48      	ldr	r3, [pc, #288]	@ (8005b1c <HMI_Hired_W+0x434>)
 80059fa:	70da      	strb	r2, [r3, #3]
		nbtime[2] = (nbtime_d /10000 % 10) + 0x30;
 80059fc:	4b46      	ldr	r3, [pc, #280]	@ (8005b18 <HMI_Hired_W+0x430>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4947      	ldr	r1, [pc, #284]	@ (8005b20 <HMI_Hired_W+0x438>)
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7fa fb90 	bl	8000128 <__udivsi3>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	210a      	movs	r1, #10
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7fa fc11 	bl	8000234 <__aeabi_uidivmod>
 8005a12:	000b      	movs	r3, r1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	3330      	adds	r3, #48	@ 0x30
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4b40      	ldr	r3, [pc, #256]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a1c:	709a      	strb	r2, [r3, #2]

		if (nbtime[2] == 0x30)
 8005a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	2b30      	cmp	r3, #48	@ 0x30
 8005a24:	d104      	bne.n	8005a30 <HMI_Hired_W+0x348>
			SD_buffer[82] = 0x20;                         //SD Card inside Tbox function , record only
 8005a26:	4b3f      	ldr	r3, [pc, #252]	@ (8005b24 <HMI_Hired_W+0x43c>)
 8005a28:	2252      	movs	r2, #82	@ 0x52
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	5499      	strb	r1, [r3, r2]
 8005a2e:	e004      	b.n	8005a3a <HMI_Hired_W+0x352>
		else
			SD_buffer[82] = nbtime[2];    //nb time = non business time
 8005a30:	4b3a      	ldr	r3, [pc, #232]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a32:	7899      	ldrb	r1, [r3, #2]
 8005a34:	4b3b      	ldr	r3, [pc, #236]	@ (8005b24 <HMI_Hired_W+0x43c>)
 8005a36:	2252      	movs	r2, #82	@ 0x52
 8005a38:	5499      	strb	r1, [r3, r2]
		if (nbtime[3] == 0x30)				//if 0, write space.
 8005a3a:	4b38      	ldr	r3, [pc, #224]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	2b30      	cmp	r3, #48	@ 0x30
 8005a40:	d104      	bne.n	8005a4c <HMI_Hired_W+0x364>
			SD_buffer[83] = 0x20;
 8005a42:	4b38      	ldr	r3, [pc, #224]	@ (8005b24 <HMI_Hired_W+0x43c>)
 8005a44:	2253      	movs	r2, #83	@ 0x53
 8005a46:	2120      	movs	r1, #32
 8005a48:	5499      	strb	r1, [r3, r2]
 8005a4a:	e004      	b.n	8005a56 <HMI_Hired_W+0x36e>
		else
			SD_buffer[83] = nbtime[3];
 8005a4c:	4b33      	ldr	r3, [pc, #204]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a4e:	78d9      	ldrb	r1, [r3, #3]
 8005a50:	4b34      	ldr	r3, [pc, #208]	@ (8005b24 <HMI_Hired_W+0x43c>)
 8005a52:	2253      	movs	r2, #83	@ 0x53
 8005a54:	5499      	strb	r1, [r3, r2]
		if (nbtime[4] == 0x30)
 8005a56:	4b31      	ldr	r3, [pc, #196]	@ (8005b1c <HMI_Hired_W+0x434>)
 8005a58:	791b      	ldrb	r3, [r3, #4]
 8005a5a:	2b30      	cmp	r3, #48	@ 0x30
 8005a5c:	d164      	bne.n	8005b28 <HMI_Hired_W+0x440>
			SD_buffer[84] = 0x20;
 8005a5e:	4b31      	ldr	r3, [pc, #196]	@ (8005b24 <HMI_Hired_W+0x43c>)
 8005a60:	2254      	movs	r2, #84	@ 0x54
 8005a62:	2120      	movs	r1, #32
 8005a64:	5499      	strb	r1, [r3, r2]
 8005a66:	e064      	b.n	8005b32 <HMI_Hired_W+0x44a>
 8005a68:	20000004 	.word	0x20000004
 8005a6c:	20000700 	.word	0x20000700
 8005a70:	2000002c 	.word	0x2000002c
 8005a74:	2000001c 	.word	0x2000001c
 8005a78:	20000af8 	.word	0x20000af8
 8005a7c:	20000afc 	.word	0x20000afc
 8005a80:	20000b00 	.word	0x20000b00
 8005a84:	20000b10 	.word	0x20000b10
 8005a88:	20000eb0 	.word	0x20000eb0
 8005a8c:	20000044 	.word	0x20000044
 8005a90:	0801a0bc 	.word	0x0801a0bc
 8005a94:	20000090 	.word	0x20000090
 8005a98:	0801a08c 	.word	0x0801a08c
 8005a9c:	0801a108 	.word	0x0801a108
 8005aa0:	20000ea0 	.word	0x20000ea0
 8005aa4:	41200000 	.word	0x41200000
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	20000ea8 	.word	0x20000ea8
 8005ab0:	0001869e 	.word	0x0001869e
 8005ab4:	0001869f 	.word	0x0001869f
 8005ab8:	20000eac 	.word	0x20000eac
 8005abc:	0801a020 	.word	0x0801a020
 8005ac0:	20000e68 	.word	0x20000e68
 8005ac4:	42c80000 	.word	0x42c80000
 8005ac8:	20000b0c 	.word	0x20000b0c
 8005acc:	0801a078 	.word	0x0801a078
 8005ad0:	20000538 	.word	0x20000538
 8005ad4:	20003597 	.word	0x20003597
 8005ad8:	20003596 	.word	0x20003596
 8005adc:	20003598 	.word	0x20003598
 8005ae0:	2000049c 	.word	0x2000049c
 8005ae4:	200004b0 	.word	0x200004b0
 8005ae8:	200004c4 	.word	0x200004c4
 8005aec:	200002c9 	.word	0x200002c9
 8005af0:	20000bcc 	.word	0x20000bcc
 8005af4:	20000074 	.word	0x20000074
 8005af8:	2000024c 	.word	0x2000024c
 8005afc:	200002cb 	.word	0x200002cb
 8005b00:	20000be8 	.word	0x20000be8
 8005b04:	20001014 	.word	0x20001014
 8005b08:	20001018 	.word	0x20001018
 8005b0c:	404e0000 	.word	0x404e0000
 8005b10:	408f4000 	.word	0x408f4000
 8005b14:	40240000 	.word	0x40240000
 8005b18:	2000100c 	.word	0x2000100c
 8005b1c:	2000106c 	.word	0x2000106c
 8005b20:	00002710 	.word	0x00002710
 8005b24:	200034fc 	.word	0x200034fc
		else
			SD_buffer[84] = nbtime[4];
 8005b28:	4b3e      	ldr	r3, [pc, #248]	@ (8005c24 <HMI_Hired_W+0x53c>)
 8005b2a:	7919      	ldrb	r1, [r3, #4]
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b2e:	2254      	movs	r2, #84	@ 0x54
 8005b30:	5499      	strb	r1, [r3, r2]

		SD_buffer[85] = nbtime[5];
 8005b32:	4b3c      	ldr	r3, [pc, #240]	@ (8005c24 <HMI_Hired_W+0x53c>)
 8005b34:	7959      	ldrb	r1, [r3, #5]
 8005b36:	4b3c      	ldr	r3, [pc, #240]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b38:	2255      	movs	r2, #85	@ 0x55
 8005b3a:	5499      	strb	r1, [r3, r2]
		SD_buffer[86] = 0x2E;				//.
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b3e:	2256      	movs	r2, #86	@ 0x56
 8005b40:	212e      	movs	r1, #46	@ 0x2e
 8005b42:	5499      	strb	r1, [r3, r2]
		SD_buffer[87] = nbtime[6];
 8005b44:	4b37      	ldr	r3, [pc, #220]	@ (8005c24 <HMI_Hired_W+0x53c>)
 8005b46:	7999      	ldrb	r1, [r3, #6]
 8005b48:	4b37      	ldr	r3, [pc, #220]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b4a:	2257      	movs	r2, #87	@ 0x57
 8005b4c:	5499      	strb	r1, [r3, r2]
		SD_buffer[88] = nbtime[7];
 8005b4e:	4b35      	ldr	r3, [pc, #212]	@ (8005c24 <HMI_Hired_W+0x53c>)
 8005b50:	79d9      	ldrb	r1, [r3, #7]
 8005b52:	4b35      	ldr	r3, [pc, #212]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b54:	2258      	movs	r2, #88	@ 0x58
 8005b56:	5499      	strb	r1, [r3, r2]
		SD_buffer[89] = 0x20;
 8005b58:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b5a:	2259      	movs	r2, #89	@ 0x59
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	5499      	strb	r1, [r3, r2]
		nbtime_counter = 0;
 8005b60:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <HMI_Hired_W+0x544>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
		//start date time
		SD_buffer[14] = 0x32;
 8005b66:	4b30      	ldr	r3, [pc, #192]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b68:	2232      	movs	r2, #50	@ 0x32
 8005b6a:	739a      	strb	r2, [r3, #14]
		SD_buffer[15] = 0x30;
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b6e:	2230      	movs	r2, #48	@ 0x30
 8005b70:	73da      	strb	r2, [r3, #15]
		SD_buffer[16] = hmi_rtc[8];
 8005b72:	4b2f      	ldr	r3, [pc, #188]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005b74:	7a1a      	ldrb	r2, [r3, #8]
 8005b76:	4b2c      	ldr	r3, [pc, #176]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b78:	741a      	strb	r2, [r3, #16]
		SD_buffer[17] = hmi_rtc[9];
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005b7c:	7a5a      	ldrb	r2, [r3, #9]
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b80:	745a      	strb	r2, [r3, #17]
		SD_buffer[18] = 0x2D;
 8005b82:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b84:	222d      	movs	r2, #45	@ 0x2d
 8005b86:	749a      	strb	r2, [r3, #18]
		SD_buffer[19] = hmi_rtc[11];
 8005b88:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005b8a:	7ada      	ldrb	r2, [r3, #11]
 8005b8c:	4b26      	ldr	r3, [pc, #152]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b8e:	74da      	strb	r2, [r3, #19]
		SD_buffer[20] = hmi_rtc[12];
 8005b90:	4b27      	ldr	r3, [pc, #156]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005b92:	7b1a      	ldrb	r2, [r3, #12]
 8005b94:	4b24      	ldr	r3, [pc, #144]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b96:	751a      	strb	r2, [r3, #20]
		SD_buffer[21] = 0x2D;
 8005b98:	4b23      	ldr	r3, [pc, #140]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005b9a:	222d      	movs	r2, #45	@ 0x2d
 8005b9c:	755a      	strb	r2, [r3, #21]
		SD_buffer[22] = hmi_rtc[14];
 8005b9e:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005ba0:	7b9a      	ldrb	r2, [r3, #14]
 8005ba2:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005ba4:	759a      	strb	r2, [r3, #22]
		SD_buffer[23] = hmi_rtc[15];
 8005ba6:	4b22      	ldr	r3, [pc, #136]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005ba8:	7bda      	ldrb	r2, [r3, #15]
 8005baa:	4b1f      	ldr	r3, [pc, #124]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bac:	75da      	strb	r2, [r3, #23]
		SD_buffer[24] = 0x20;
 8005bae:	4b1e      	ldr	r3, [pc, #120]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	761a      	strb	r2, [r3, #24]

		SD_buffer[25] = hmi_rtc[17];
 8005bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005bb6:	7c5a      	ldrb	r2, [r3, #17]
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bba:	765a      	strb	r2, [r3, #25]
		SD_buffer[26] = hmi_rtc[18];
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005bbe:	7c9a      	ldrb	r2, [r3, #18]
 8005bc0:	4b19      	ldr	r3, [pc, #100]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bc2:	769a      	strb	r2, [r3, #26]
		SD_buffer[27] = 0x3A;
 8005bc4:	4b18      	ldr	r3, [pc, #96]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bc6:	223a      	movs	r2, #58	@ 0x3a
 8005bc8:	76da      	strb	r2, [r3, #27]
		SD_buffer[28] = hmi_rtc[20];
 8005bca:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005bcc:	7d1a      	ldrb	r2, [r3, #20]
 8005bce:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bd0:	771a      	strb	r2, [r3, #28]
		SD_buffer[29] = hmi_rtc[21];
 8005bd2:	4b17      	ldr	r3, [pc, #92]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005bd4:	7d5a      	ldrb	r2, [r3, #21]
 8005bd6:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bd8:	775a      	strb	r2, [r3, #29]
		SD_buffer[30] = 0x3A;
 8005bda:	4b13      	ldr	r3, [pc, #76]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bdc:	223a      	movs	r2, #58	@ 0x3a
 8005bde:	779a      	strb	r2, [r3, #30]
		SD_buffer[31] = hmi_rtc[23];
 8005be0:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005be2:	7dda      	ldrb	r2, [r3, #23]
 8005be4:	4b10      	ldr	r3, [pc, #64]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005be6:	77da      	strb	r2, [r3, #31]
		SD_buffer[32] = hmi_rtc[24];
 8005be8:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <HMI_Hired_W+0x548>)
 8005bea:	7e19      	ldrb	r1, [r3, #24]
 8005bec:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bee:	2220      	movs	r2, #32
 8005bf0:	5499      	strb	r1, [r3, r2]
		SD_buffer[33] = 0x20;
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <HMI_Hired_W+0x540>)
 8005bf4:	2221      	movs	r2, #33	@ 0x21
 8005bf6:	2120      	movs	r1, #32
 8005bf8:	5499      	strb	r1, [r3, r2]
	}
	Flag_Control_Down();                                          //fall flag
 8005bfa:	f005 fb0b 	bl	800b214 <Flag_Control_Down>
	flag_sp = 0;
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HMI_Hired_W+0x54c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
	flag_vs = 1;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <HMI_Hired_W+0x550>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
	Flag_End_Record = TRUE;
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <HMI_Hired_W+0x554>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
	flag_vs_first = 0;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <HMI_Hired_W+0x558>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
	cnt = 0;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HMI_Hired_W+0x55c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000106c 	.word	0x2000106c
 8005c28:	200034fc 	.word	0x200034fc
 8005c2c:	20001018 	.word	0x20001018
 8005c30:	20000074 	.word	0x20000074
 8005c34:	20000539 	.word	0x20000539
 8005c38:	20000bce 	.word	0x20000bce
 8005c3c:	200002ca 	.word	0x200002ca
 8005c40:	20000bcf 	.word	0x20000bcf
 8005c44:	20000e7c 	.word	0x20000e7c

08005c48 <HMI_Stop_W>:

void HMI_Stop_W(void)
{
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b0a1      	sub	sp, #132	@ 0x84
 8005c4c:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 8005c4e:	49e8      	ldr	r1, [pc, #928]	@ (8005ff0 <HMI_Stop_W+0x3a8>)
 8005c50:	48e8      	ldr	r0, [pc, #928]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005c52:	2310      	movs	r3, #16
 8005c54:	2208      	movs	r2, #8
 8005c56:	f00d feeb 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	f008 fc62 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_On, 8, 0x10);
 8005c60:	49e5      	ldr	r1, [pc, #916]	@ (8005ff8 <HMI_Stop_W+0x3b0>)
 8005c62:	48e4      	ldr	r0, [pc, #912]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005c64:	2310      	movs	r3, #16
 8005c66:	2208      	movs	r2, #8
 8005c68:	f00d fee2 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f008 fc59 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_Off, 8, 0x10);
 8005c72:	49e2      	ldr	r1, [pc, #904]	@ (8005ffc <HMI_Stop_W+0x3b4>)
 8005c74:	48df      	ldr	r0, [pc, #892]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005c76:	2310      	movs	r3, #16
 8005c78:	2208      	movs	r2, #8
 8005c7a:	f00d fed9 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f008 fc50 	bl	800e524 <HAL_Delay>

//	HAL_UART_Transmit(&huart1, CLR_RD_qr, 8, 0x1C);
//	HAL_UART_Transmit(&huart1, plate_qr, 18, 0x1C);
//	HAL_UART_Transmit(&huart1, (uint8_t *) cmd_off, 8, 0x0E);

	Fare_Calculation();
 8005c84:	f004 ff48 	bl	800ab18 <Fare_Calculation>

	fare_d_x10 = (int)(fare_d * 10 + 0.5);
 8005c88:	4bdd      	ldr	r3, [pc, #884]	@ (8006000 <HMI_Stop_W+0x3b8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	49dd      	ldr	r1, [pc, #884]	@ (8006004 <HMI_Stop_W+0x3bc>)
 8005c8e:	1c18      	adds	r0, r3, #0
 8005c90:	f7fb f8ca 	bl	8000e28 <__aeabi_fmul>
 8005c94:	1c03      	adds	r3, r0, #0
 8005c96:	1c18      	adds	r0, r3, #0
 8005c98:	f7fd faf0 	bl	800327c <__aeabi_f2d>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4bda      	ldr	r3, [pc, #872]	@ (8006008 <HMI_Stop_W+0x3c0>)
 8005ca0:	f7fb fc52 	bl	8001548 <__aeabi_dadd>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	000b      	movs	r3, r1
 8005ca8:	0010      	movs	r0, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	f7fd fa58 	bl	8003160 <__aeabi_d2iz>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	4bd5      	ldr	r3, [pc, #852]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005cb6:	601a      	str	r2, [r3, #0]
	//display limit - total fare 9999.9, sub 999.0, distance 999.9, duration 99:59:59
	if(fare_d_x10 >= 99999)
 8005cb8:	4bd4      	ldr	r3, [pc, #848]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4ad4      	ldr	r2, [pc, #848]	@ (8006010 <HMI_Stop_W+0x3c8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d902      	bls.n	8005cc8 <HMI_Stop_W+0x80>
	{
		fare_d_x10 = 99999;
 8005cc2:	4bd2      	ldr	r3, [pc, #840]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005cc4:	4ad3      	ldr	r2, [pc, #844]	@ (8006014 <HMI_Stop_W+0x3cc>)
 8005cc6:	601a      	str	r2, [r3, #0]
	}
	fare_d_x100 = fare_d_x10 * 10;
 8005cc8:	4bd0      	ldr	r3, [pc, #832]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	0013      	movs	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	001a      	movs	r2, r3
 8005cd6:	4bd0      	ldr	r3, [pc, #832]	@ (8006018 <HMI_Stop_W+0x3d0>)
 8005cd8:	601a      	str	r2, [r3, #0]
	Long_to_byte(fare_d_x100, temp_array);
 8005cda:	4bcf      	ldr	r3, [pc, #828]	@ (8006018 <HMI_Stop_W+0x3d0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2278      	movs	r2, #120	@ 0x78
 8005ce0:	18ba      	adds	r2, r7, r2
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f002 fb05 	bl	80082f4 <Long_to_byte>

	Dis = (int)(Distance*100); // + 0.5);
 8005cea:	4bcc      	ldr	r3, [pc, #816]	@ (800601c <HMI_Stop_W+0x3d4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	49cc      	ldr	r1, [pc, #816]	@ (8006020 <HMI_Stop_W+0x3d8>)
 8005cf0:	1c18      	adds	r0, r3, #0
 8005cf2:	f7fb f899 	bl	8000e28 <__aeabi_fmul>
 8005cf6:	1c03      	adds	r3, r0, #0
 8005cf8:	1c18      	adds	r0, r3, #0
 8005cfa:	f7fb fb77 	bl	80013ec <__aeabi_f2iz>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	001a      	movs	r2, r3
 8005d02:	4bc8      	ldr	r3, [pc, #800]	@ (8006024 <HMI_Stop_W+0x3dc>)
 8005d04:	601a      	str	r2, [r3, #0]
	if(Dis >= 99999)
 8005d06:	4bc7      	ldr	r3, [pc, #796]	@ (8006024 <HMI_Stop_W+0x3dc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4ac1      	ldr	r2, [pc, #772]	@ (8006010 <HMI_Stop_W+0x3c8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d902      	bls.n	8005d16 <HMI_Stop_W+0xce>
	{
		Dis = 99999;
 8005d10:	4bc4      	ldr	r3, [pc, #784]	@ (8006024 <HMI_Stop_W+0x3dc>)
 8005d12:	4ac0      	ldr	r2, [pc, #768]	@ (8006014 <HMI_Stop_W+0x3cc>)
 8005d14:	601a      	str	r2, [r3, #0]
	}
	Long_to_byte(Dis, temp_array);
 8005d16:	4bc3      	ldr	r3, [pc, #780]	@ (8006024 <HMI_Stop_W+0x3dc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2478      	movs	r4, #120	@ 0x78
 8005d1c:	193a      	adds	r2, r7, r4
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f002 fae7 	bl	80082f4 <Long_to_byte>
	HMI_Command(Dis_A,temp_array,10);
 8005d26:	1939      	adds	r1, r7, r4
 8005d28:	4bbf      	ldr	r3, [pc, #764]	@ (8006028 <HMI_Stop_W+0x3e0>)
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f002 fb00 	bl	8008332 <HMI_Command>

//	Dur_hms_cal();                                                     //Accumulative Time

	//record printer start time
	if(Flag_Printer_Start)
 8005d32:	4bbe      	ldr	r3, [pc, #760]	@ (800602c <HMI_Stop_W+0x3e4>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02d      	beq.n	8005d96 <HMI_Stop_W+0x14e>
	{
		Flag_Printer_Start = FALSE;
 8005d3a:	4bbc      	ldr	r3, [pc, #752]	@ (800602c <HMI_Stop_W+0x3e4>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = TRUE;
 8005d40:	4bbb      	ldr	r3, [pc, #748]	@ (8006030 <HMI_Stop_W+0x3e8>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]

		start[0] = hmi_rtc[14];
 8005d46:	4bbb      	ldr	r3, [pc, #748]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d48:	7b9a      	ldrb	r2, [r3, #14]
 8005d4a:	4bbb      	ldr	r3, [pc, #748]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d4c:	701a      	strb	r2, [r3, #0]
		start[1] = hmi_rtc[15];
 8005d4e:	4bb9      	ldr	r3, [pc, #740]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d50:	7bda      	ldrb	r2, [r3, #15]
 8005d52:	4bb9      	ldr	r3, [pc, #740]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d54:	705a      	strb	r2, [r3, #1]
		start[3] = hmi_rtc[11];
 8005d56:	4bb7      	ldr	r3, [pc, #732]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d58:	7ada      	ldrb	r2, [r3, #11]
 8005d5a:	4bb7      	ldr	r3, [pc, #732]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d5c:	70da      	strb	r2, [r3, #3]
		start[4] = hmi_rtc[12];
 8005d5e:	4bb5      	ldr	r3, [pc, #724]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d60:	7b1a      	ldrb	r2, [r3, #12]
 8005d62:	4bb5      	ldr	r3, [pc, #724]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d64:	711a      	strb	r2, [r3, #4]
		start[6] = hmi_rtc[8];
 8005d66:	4bb3      	ldr	r3, [pc, #716]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d68:	7a1a      	ldrb	r2, [r3, #8]
 8005d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d6c:	719a      	strb	r2, [r3, #6]
		start[7] = hmi_rtc[9];
 8005d6e:	4bb1      	ldr	r3, [pc, #708]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d70:	7a5a      	ldrb	r2, [r3, #9]
 8005d72:	4bb1      	ldr	r3, [pc, #708]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d74:	71da      	strb	r2, [r3, #7]
		start[9] = hmi_rtc[17];
 8005d76:	4baf      	ldr	r3, [pc, #700]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d78:	7c5a      	ldrb	r2, [r3, #17]
 8005d7a:	4baf      	ldr	r3, [pc, #700]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d7c:	725a      	strb	r2, [r3, #9]
		start[10] = hmi_rtc[18];
 8005d7e:	4bad      	ldr	r3, [pc, #692]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d80:	7c9a      	ldrb	r2, [r3, #18]
 8005d82:	4bad      	ldr	r3, [pc, #692]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d84:	729a      	strb	r2, [r3, #10]
		start[12] = hmi_rtc[20];
 8005d86:	4bab      	ldr	r3, [pc, #684]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d88:	7d1a      	ldrb	r2, [r3, #20]
 8005d8a:	4bab      	ldr	r3, [pc, #684]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d8c:	731a      	strb	r2, [r3, #12]
		start[13] = hmi_rtc[21];
 8005d8e:	4ba9      	ldr	r3, [pc, #676]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005d90:	7d5a      	ldrb	r2, [r3, #21]
 8005d92:	4ba9      	ldr	r3, [pc, #676]	@ (8006038 <HMI_Stop_W+0x3f0>)
 8005d94:	735a      	strb	r2, [r3, #13]
	}

	if(flag_vs)
 8005d96:	4ba9      	ldr	r3, [pc, #676]	@ (800603c <HMI_Stop_W+0x3f4>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02a      	beq.n	8005df4 <HMI_Stop_W+0x1ac>
	{
		flag_vs = 0;
 8005d9e:	4ba7      	ldr	r3, [pc, #668]	@ (800603c <HMI_Stop_W+0x3f4>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
		re_stop[0] = hmi_rtc[14];
 8005da4:	4ba3      	ldr	r3, [pc, #652]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005da6:	7b9a      	ldrb	r2, [r3, #14]
 8005da8:	4ba5      	ldr	r3, [pc, #660]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005daa:	701a      	strb	r2, [r3, #0]
		re_stop[1] = hmi_rtc[15];
 8005dac:	4ba1      	ldr	r3, [pc, #644]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dae:	7bda      	ldrb	r2, [r3, #15]
 8005db0:	4ba3      	ldr	r3, [pc, #652]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005db2:	705a      	strb	r2, [r3, #1]
		re_stop[3] = hmi_rtc[11];
 8005db4:	4b9f      	ldr	r3, [pc, #636]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005db6:	7ada      	ldrb	r2, [r3, #11]
 8005db8:	4ba1      	ldr	r3, [pc, #644]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dba:	70da      	strb	r2, [r3, #3]
		re_stop[4] = hmi_rtc[12];
 8005dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dbe:	7b1a      	ldrb	r2, [r3, #12]
 8005dc0:	4b9f      	ldr	r3, [pc, #636]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dc2:	711a      	strb	r2, [r3, #4]
		re_stop[6] = hmi_rtc[8];
 8005dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dc6:	7a1a      	ldrb	r2, [r3, #8]
 8005dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dca:	719a      	strb	r2, [r3, #6]
		re_stop[7] = hmi_rtc[9];
 8005dcc:	4b99      	ldr	r3, [pc, #612]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dce:	7a5a      	ldrb	r2, [r3, #9]
 8005dd0:	4b9b      	ldr	r3, [pc, #620]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dd2:	71da      	strb	r2, [r3, #7]
		re_stop[9] = hmi_rtc[17];
 8005dd4:	4b97      	ldr	r3, [pc, #604]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dd6:	7c5a      	ldrb	r2, [r3, #17]
 8005dd8:	4b99      	ldr	r3, [pc, #612]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dda:	725a      	strb	r2, [r3, #9]
		re_stop[10] = hmi_rtc[18];
 8005ddc:	4b95      	ldr	r3, [pc, #596]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dde:	7c9a      	ldrb	r2, [r3, #18]
 8005de0:	4b97      	ldr	r3, [pc, #604]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005de2:	729a      	strb	r2, [r3, #10]
		re_stop[12] = hmi_rtc[20];
 8005de4:	4b93      	ldr	r3, [pc, #588]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005de6:	7d1a      	ldrb	r2, [r3, #20]
 8005de8:	4b95      	ldr	r3, [pc, #596]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005dea:	731a      	strb	r2, [r3, #12]
		re_stop[13] = hmi_rtc[21];
 8005dec:	4b91      	ldr	r3, [pc, #580]	@ (8006034 <HMI_Stop_W+0x3ec>)
 8005dee:	7d5a      	ldrb	r2, [r3, #21]
 8005df0:	4b93      	ldr	r3, [pc, #588]	@ (8006040 <HMI_Stop_W+0x3f8>)
 8005df2:	735a      	strb	r2, [r3, #13]
	}

	//sub read and add on, prepare receipt message
	if (!Flag_added)
 8005df4:	4b93      	ldr	r3, [pc, #588]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HMI_Stop_W+0x1b8>
	{
		extras_rd();
 8005dfc:	f001 ffb2 	bl	8007d64 <extras_rd>
	}

	if(Flag_Addition_Add)
 8005e00:	4b91      	ldr	r3, [pc, #580]	@ (8006048 <HMI_Stop_W+0x400>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01a      	beq.n	8005e3e <HMI_Stop_W+0x1f6>
	{
		Final_price = fare_d_x10 + Addition;
 8005e08:	4b80      	ldr	r3, [pc, #512]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800604c <HMI_Stop_W+0x404>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	18d2      	adds	r2, r2, r3
 8005e12:	4b8f      	ldr	r3, [pc, #572]	@ (8006050 <HMI_Stop_W+0x408>)
 8005e14:	601a      	str	r2, [r3, #0]
		uint8_t temp_array[4];
		Final_price_x10 = Final_price * 10; //for display (4 decimal+2 digits)
 8005e16:	4b8e      	ldr	r3, [pc, #568]	@ (8006050 <HMI_Stop_W+0x408>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	0013      	movs	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	001a      	movs	r2, r3
 8005e24:	4b8b      	ldr	r3, [pc, #556]	@ (8006054 <HMI_Stop_W+0x40c>)
 8005e26:	601a      	str	r2, [r3, #0]
		Long_to_byte(Final_price_x10,temp_array);
 8005e28:	4b8a      	ldr	r3, [pc, #552]	@ (8006054 <HMI_Stop_W+0x40c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2260      	movs	r2, #96	@ 0x60
 8005e2e:	18ba      	adds	r2, r7, r2
 8005e30:	0011      	movs	r1, r2
 8005e32:	0018      	movs	r0, r3
 8005e34:	f002 fa5e 	bl	80082f4 <Long_to_byte>
//		HMI_Command(Fee,temp_array,10);
		Flag_Addition_Add = FALSE;
 8005e38:	4b83      	ldr	r3, [pc, #524]	@ (8006048 <HMI_Stop_W+0x400>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_Addition_F)
 8005e3e:	4b86      	ldr	r3, [pc, #536]	@ (8006058 <HMI_Stop_W+0x410>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01a      	beq.n	8005e7c <HMI_Stop_W+0x234>
	{
		Final_price = fare_d_x10 + Addition;
 8005e46:	4b71      	ldr	r3, [pc, #452]	@ (800600c <HMI_Stop_W+0x3c4>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b80      	ldr	r3, [pc, #512]	@ (800604c <HMI_Stop_W+0x404>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	18d2      	adds	r2, r2, r3
 8005e50:	4b7f      	ldr	r3, [pc, #508]	@ (8006050 <HMI_Stop_W+0x408>)
 8005e52:	601a      	str	r2, [r3, #0]
		uint8_t temp_array[4];
		Final_price_x10 = Final_price * 10; //for display (4 decimal+2 digits)
 8005e54:	4b7e      	ldr	r3, [pc, #504]	@ (8006050 <HMI_Stop_W+0x408>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	0013      	movs	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	001a      	movs	r2, r3
 8005e62:	4b7c      	ldr	r3, [pc, #496]	@ (8006054 <HMI_Stop_W+0x40c>)
 8005e64:	601a      	str	r2, [r3, #0]
		Long_to_byte(Final_price_x10,temp_array);
 8005e66:	4b7b      	ldr	r3, [pc, #492]	@ (8006054 <HMI_Stop_W+0x40c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	225c      	movs	r2, #92	@ 0x5c
 8005e6c:	18ba      	adds	r2, r7, r2
 8005e6e:	0011      	movs	r1, r2
 8005e70:	0018      	movs	r0, r3
 8005e72:	f002 fa3f 	bl	80082f4 <Long_to_byte>
//		HMI_Command(Fee,temp_array,10);
		Flag_Addition_F = FALSE;
 8005e76:	4b78      	ldr	r3, [pc, #480]	@ (8006058 <HMI_Stop_W+0x410>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
	}

	//add on (EXTRAS btn) check:
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_page, 7, 0x0E);       // read the value of '0' button
 8005e7c:	4977      	ldr	r1, [pc, #476]	@ (800605c <HMI_Stop_W+0x414>)
 8005e7e:	485d      	ldr	r0, [pc, #372]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005e80:	230e      	movs	r3, #14
 8005e82:	2207      	movs	r2, #7
 8005e84:	f00d fdd4 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8005e88:	2002      	movs	r0, #2
 8005e8a:	f008 fb4b 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 8005e8e:	4b74      	ldr	r3, [pc, #464]	@ (8006060 <HMI_Stop_W+0x418>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02b      	beq.n	8005eee <HMI_Stop_W+0x2a6>
	{
		RxFlag = FALSE;
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <HMI_Stop_W+0x418>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
		if (RxBuff[8] == 0x01 && Flag_added == TRUE)                 //button value is 1
 8005e9c:	4b71      	ldr	r3, [pc, #452]	@ (8006064 <HMI_Stop_W+0x41c>)
 8005e9e:	7a1b      	ldrb	r3, [r3, #8]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d110      	bne.n	8005ec6 <HMI_Stop_W+0x27e>
 8005ea4:	4b67      	ldr	r3, [pc, #412]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <HMI_Stop_W+0x27e>
		{
			added_wait = 0;                                   //fare added wait 5 sec
 8005eac:	4b6e      	ldr	r3, [pc, #440]	@ (8006068 <HMI_Stop_W+0x420>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
			Flag_added = FALSE;
 8005eb2:	4b64      	ldr	r3, [pc, #400]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,page_clear,8,0x0E);              //set value of '0' to 0.
 8005eb8:	496c      	ldr	r1, [pc, #432]	@ (800606c <HMI_Stop_W+0x424>)
 8005eba:	484e      	ldr	r0, [pc, #312]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005ebc:	230e      	movs	r3, #14
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	f00d fdb6 	bl	8013a30 <HAL_UART_Transmit>
 8005ec4:	e016      	b.n	8005ef4 <HMI_Stop_W+0x2ac>
		}
		else if(RxBuff[8] == 0x01)
 8005ec6:	4b67      	ldr	r3, [pc, #412]	@ (8006064 <HMI_Stop_W+0x41c>)
 8005ec8:	7a1b      	ldrb	r3, [r3, #8]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d112      	bne.n	8005ef4 <HMI_Stop_W+0x2ac>
		{
			added_wait++;
 8005ece:	4b66      	ldr	r3, [pc, #408]	@ (8006068 <HMI_Stop_W+0x420>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	4b64      	ldr	r3, [pc, #400]	@ (8006068 <HMI_Stop_W+0x420>)
 8005ed8:	701a      	strb	r2, [r3, #0]
			Flag_added = TRUE;
 8005eda:	4b5a      	ldr	r3, [pc, #360]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,page_clear,8,0x0E);
 8005ee0:	4962      	ldr	r1, [pc, #392]	@ (800606c <HMI_Stop_W+0x424>)
 8005ee2:	4844      	ldr	r0, [pc, #272]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005ee4:	230e      	movs	r3, #14
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	f00d fda2 	bl	8013a30 <HAL_UART_Transmit>
 8005eec:	e002      	b.n	8005ef4 <HMI_Stop_W+0x2ac>
		}
	}
	else
	{
		Flag_added = FALSE;
 8005eee:	4b55      	ldr	r3, [pc, #340]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_added)
 8005ef4:	4b53      	ldr	r3, [pc, #332]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d032      	beq.n	8005f62 <HMI_Stop_W+0x31a>
	{
		uint32_t add_clr = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	67fb      	str	r3, [r7, #124]	@ 0x7c

		Long_to_byte(Final_price_x10, temp_array);
 8005f00:	4b54      	ldr	r3, [pc, #336]	@ (8006054 <HMI_Stop_W+0x40c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2478      	movs	r4, #120	@ 0x78
 8005f06:	193a      	adds	r2, r7, r4
 8005f08:	0011      	movs	r1, r2
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f002 f9f2 	bl	80082f4 <Long_to_byte>
		HMI_Command(Fee, temp_array, 10);
 8005f10:	1939      	adds	r1, r7, r4
 8005f12:	4b57      	ldr	r3, [pc, #348]	@ (8006070 <HMI_Stop_W+0x428>)
 8005f14:	220a      	movs	r2, #10
 8005f16:	0018      	movs	r0, r3
 8005f18:	f002 fa0b 	bl	8008332 <HMI_Command>

		Long_to_byte(add_clr, temp_array);
 8005f1c:	193a      	adds	r2, r7, r4
 8005f1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f20:	0011      	movs	r1, r2
 8005f22:	0018      	movs	r0, r3
 8005f24:	f002 f9e6 	bl	80082f4 <Long_to_byte>
		HMI_Command(Add_Charge, temp_array, 10);
 8005f28:	1939      	adds	r1, r7, r4
 8005f2a:	4b52      	ldr	r3, [pc, #328]	@ (8006074 <HMI_Stop_W+0x42c>)
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f002 f9ff 	bl	8008332 <HMI_Command>
//		HAL_UART_Transmit(&huart1, (uint8_t *) cmd_on, 8, 0x0E);
//		HAL_UART_Transmit(&huart1, (uint8_t *) cmd_bg_white, 8, 0x0E);
//		HAL_UART_Transmit(&huart1, (uint8_t *) cmd_content_red, 8, 0x0E);


		if(added_wait != 0)
 8005f34:	4b4c      	ldr	r3, [pc, #304]	@ (8006068 <HMI_Stop_W+0x420>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d100      	bne.n	8005f3e <HMI_Stop_W+0x2f6>
 8005f3c:	e0b8      	b.n	80060b0 <HMI_Stop_W+0x468>

		{
			added_wait++;
 8005f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006068 <HMI_Stop_W+0x420>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	4b48      	ldr	r3, [pc, #288]	@ (8006068 <HMI_Stop_W+0x420>)
 8005f48:	701a      	strb	r2, [r3, #0]
			//added 5s
			if(added_wait >= 5)
 8005f4a:	4b47      	ldr	r3, [pc, #284]	@ (8006068 <HMI_Stop_W+0x420>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d800      	bhi.n	8005f54 <HMI_Stop_W+0x30c>
 8005f52:	e0ad      	b.n	80060b0 <HMI_Stop_W+0x468>
			{
				Flag_added = FALSE;
 8005f54:	4b3b      	ldr	r3, [pc, #236]	@ (8006044 <HMI_Stop_W+0x3fc>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
				added_wait = 0;
 8005f5a:	4b43      	ldr	r3, [pc, #268]	@ (8006068 <HMI_Stop_W+0x420>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e0a6      	b.n	80060b0 <HMI_Stop_W+0x468>
		}
	}
	else
	{

		Long_to_byte(fare_d_x100, temp_array);
 8005f62:	4b2d      	ldr	r3, [pc, #180]	@ (8006018 <HMI_Stop_W+0x3d0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2478      	movs	r4, #120	@ 0x78
 8005f68:	193a      	adds	r2, r7, r4
 8005f6a:	0011      	movs	r1, r2
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f002 f9c1 	bl	80082f4 <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8005f72:	1939      	adds	r1, r7, r4
 8005f74:	4b3e      	ldr	r3, [pc, #248]	@ (8006070 <HMI_Stop_W+0x428>)
 8005f76:	220a      	movs	r2, #10
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f002 f9da 	bl	8008332 <HMI_Command>

		Long_to_byte(Addition,temp_array);
 8005f7e:	4b33      	ldr	r3, [pc, #204]	@ (800604c <HMI_Stop_W+0x404>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	193a      	adds	r2, r7, r4
 8005f84:	0011      	movs	r1, r2
 8005f86:	0018      	movs	r0, r3
 8005f88:	f002 f9b4 	bl	80082f4 <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 8005f8c:	1939      	adds	r1, r7, r4
 8005f8e:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <HMI_Stop_W+0x42c>)
 8005f90:	220a      	movs	r2, #10
 8005f92:	0018      	movs	r0, r3
 8005f94:	f002 f9cd 	bl	8008332 <HMI_Command>


		if(Flag_payment) //Added by Edwin
 8005f98:	4b37      	ldr	r3, [pc, #220]	@ (8006078 <HMI_Stop_W+0x430>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d075      	beq.n	800608c <HMI_Stop_W+0x444>
		{
			if (payment_wait!=0)
 8005fa0:	4b36      	ldr	r3, [pc, #216]	@ (800607c <HMI_Stop_W+0x434>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d100      	bne.n	8005faa <HMI_Stop_W+0x362>
 8005fa8:	e082      	b.n	80060b0 <HMI_Stop_W+0x468>
			{
				payment_wait++;
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <HMI_Stop_W+0x434>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b32      	ldr	r3, [pc, #200]	@ (800607c <HMI_Stop_W+0x434>)
 8005fb4:	701a      	strb	r2, [r3, #0]
				if(payment_wait>=30){  //show the red payment QR code for 30 seconds
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <HMI_Stop_W+0x434>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b1d      	cmp	r3, #29
 8005fbc:	d978      	bls.n	80060b0 <HMI_Stop_W+0x468>
					Flag_payment=FALSE;
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <HMI_Stop_W+0x430>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
					payment_wait=0;
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800607c <HMI_Stop_W+0x434>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
					//close e-payment qr code
					HAL_UART_Transmit(&huart1, CLR_RD_qr, 8, 0x1C);       //Show car plate QR code
 8005fca:	492d      	ldr	r1, [pc, #180]	@ (8006080 <HMI_Stop_W+0x438>)
 8005fcc:	4809      	ldr	r0, [pc, #36]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005fce:	231c      	movs	r3, #28
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	f00d fd2d 	bl	8013a30 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, plate_qr, 18, 0x1C);       //Show plate_QR when stopped
 8005fd6:	492b      	ldr	r1, [pc, #172]	@ (8006084 <HMI_Stop_W+0x43c>)
 8005fd8:	4806      	ldr	r0, [pc, #24]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005fda:	231c      	movs	r3, #28
 8005fdc:	2212      	movs	r2, #18
 8005fde:	f00d fd27 	bl	8013a30 <HAL_UART_Transmit>
//					HAL_UART_Transmit(&huart1, clr_plate_qr, 8, 0x1C);  // clear QR code text
					HAL_UART_Transmit(&huart1, (uint8_t *) cmd_off, 8, 0x0E); //off QR code
 8005fe2:	4929      	ldr	r1, [pc, #164]	@ (8006088 <HMI_Stop_W+0x440>)
 8005fe4:	4803      	ldr	r0, [pc, #12]	@ (8005ff4 <HMI_Stop_W+0x3ac>)
 8005fe6:	230e      	movs	r3, #14
 8005fe8:	2208      	movs	r2, #8
 8005fea:	f00d fd21 	bl	8013a30 <HAL_UART_Transmit>
 8005fee:	e05f      	b.n	80060b0 <HMI_Stop_W+0x468>
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	20000700 	.word	0x20000700
 8005ff8:	20000014 	.word	0x20000014
 8005ffc:	2000002c 	.word	0x2000002c
 8006000:	20000ea0 	.word	0x20000ea0
 8006004:	41200000 	.word	0x41200000
 8006008:	3fe00000 	.word	0x3fe00000
 800600c:	20000ea8 	.word	0x20000ea8
 8006010:	0001869e 	.word	0x0001869e
 8006014:	0001869f 	.word	0x0001869f
 8006018:	20000eac 	.word	0x20000eac
 800601c:	20000e68 	.word	0x20000e68
 8006020:	42c80000 	.word	0x42c80000
 8006024:	20000b0c 	.word	0x20000b0c
 8006028:	0801a078 	.word	0x0801a078
 800602c:	200002c9 	.word	0x200002c9
 8006030:	20000bcc 	.word	0x20000bcc
 8006034:	20000074 	.word	0x20000074
 8006038:	2000024c 	.word	0x2000024c
 800603c:	20000bce 	.word	0x20000bce
 8006040:	2000026c 	.word	0x2000026c
 8006044:	20000b07 	.word	0x20000b07
 8006048:	20000b1c 	.word	0x20000b1c
 800604c:	20000b18 	.word	0x20000b18
 8006050:	20000af4 	.word	0x20000af4
 8006054:	20000bd8 	.word	0x20000bd8
 8006058:	20000b1d 	.word	0x20000b1d
 800605c:	0801a0f4 	.word	0x0801a0f4
 8006060:	20000ae4 	.word	0x20000ae4
 8006064:	20000ae8 	.word	0x20000ae8
 8006068:	20000b08 	.word	0x20000b08
 800606c:	0801a108 	.word	0x0801a108
 8006070:	0801a020 	.word	0x0801a020
 8006074:	0801a02c 	.word	0x0801a02c
 8006078:	20000b09 	.word	0x20000b09
 800607c:	20000b0a 	.word	0x20000b0a
 8006080:	0801a0bc 	.word	0x0801a0bc
 8006084:	20000090 	.word	0x20000090
 8006088:	0801a08c 	.word	0x0801a08c
									}
			}
		}//Added by Edwin
		else{
			//close e-payment qr code
			HAL_UART_Transmit(&huart1, CLR_RD_qr, 8, 0x1C);       //Show car plate QR code
 800608c:	49e8      	ldr	r1, [pc, #928]	@ (8006430 <HMI_Stop_W+0x7e8>)
 800608e:	48e9      	ldr	r0, [pc, #932]	@ (8006434 <HMI_Stop_W+0x7ec>)
 8006090:	231c      	movs	r3, #28
 8006092:	2208      	movs	r2, #8
 8006094:	f00d fccc 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, plate_qr, 18, 0x1C);       //Show plate_QR when stopped
 8006098:	49e7      	ldr	r1, [pc, #924]	@ (8006438 <HMI_Stop_W+0x7f0>)
 800609a:	48e6      	ldr	r0, [pc, #920]	@ (8006434 <HMI_Stop_W+0x7ec>)
 800609c:	231c      	movs	r3, #28
 800609e:	2212      	movs	r2, #18
 80060a0:	f00d fcc6 	bl	8013a30 <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart1, clr_plate_qr, 8, 0x1C);  // clear QR code text
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_off, 8, 0x0E); //off QR code
 80060a4:	49e5      	ldr	r1, [pc, #916]	@ (800643c <HMI_Stop_W+0x7f4>)
 80060a6:	48e3      	ldr	r0, [pc, #908]	@ (8006434 <HMI_Stop_W+0x7ec>)
 80060a8:	230e      	movs	r3, #14
 80060aa:	2208      	movs	r2, #8
 80060ac:	f00d fcc0 	bl	8013a30 <HAL_UART_Transmit>
		}
	}

	//cpy total_km
	//123.45 - default 0.00
	total_km[13] = (Dis / 1 % 10) + 0x30;
 80060b0:	4be3      	ldr	r3, [pc, #908]	@ (8006440 <HMI_Stop_W+0x7f8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	210a      	movs	r1, #10
 80060b6:	0018      	movs	r0, r3
 80060b8:	f7fa f8bc 	bl	8000234 <__aeabi_uidivmod>
 80060bc:	000b      	movs	r3, r1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3330      	adds	r3, #48	@ 0x30
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	4bdf      	ldr	r3, [pc, #892]	@ (8006444 <HMI_Stop_W+0x7fc>)
 80060c6:	735a      	strb	r2, [r3, #13]
	total_km[12] = (Dis / 10 % 10) + 0x30;
 80060c8:	4bdd      	ldr	r3, [pc, #884]	@ (8006440 <HMI_Stop_W+0x7f8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	210a      	movs	r1, #10
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fa f82a 	bl	8000128 <__udivsi3>
 80060d4:	0003      	movs	r3, r0
 80060d6:	210a      	movs	r1, #10
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fa f8ab 	bl	8000234 <__aeabi_uidivmod>
 80060de:	000b      	movs	r3, r1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	3330      	adds	r3, #48	@ 0x30
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	4bd7      	ldr	r3, [pc, #860]	@ (8006444 <HMI_Stop_W+0x7fc>)
 80060e8:	731a      	strb	r2, [r3, #12]
	total_km[10] = (Dis / 100 % 10) + 0x30;
 80060ea:	4bd5      	ldr	r3, [pc, #852]	@ (8006440 <HMI_Stop_W+0x7f8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2164      	movs	r1, #100	@ 0x64
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fa f819 	bl	8000128 <__udivsi3>
 80060f6:	0003      	movs	r3, r0
 80060f8:	210a      	movs	r1, #10
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7fa f89a 	bl	8000234 <__aeabi_uidivmod>
 8006100:	000b      	movs	r3, r1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	3330      	adds	r3, #48	@ 0x30
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4bce      	ldr	r3, [pc, #824]	@ (8006444 <HMI_Stop_W+0x7fc>)
 800610a:	729a      	strb	r2, [r3, #10]

	if ((Dis / 10000 % 10) == 0 && (Dis / 1000 % 10) == 0)
 800610c:	4bcc      	ldr	r3, [pc, #816]	@ (8006440 <HMI_Stop_W+0x7f8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	49cd      	ldr	r1, [pc, #820]	@ (8006448 <HMI_Stop_W+0x800>)
 8006112:	0018      	movs	r0, r3
 8006114:	f7fa f808 	bl	8000128 <__udivsi3>
 8006118:	0003      	movs	r3, r0
 800611a:	210a      	movs	r1, #10
 800611c:	0018      	movs	r0, r3
 800611e:	f7fa f889 	bl	8000234 <__aeabi_uidivmod>
 8006122:	1e0b      	subs	r3, r1, #0
 8006124:	d114      	bne.n	8006150 <HMI_Stop_W+0x508>
 8006126:	4bc6      	ldr	r3, [pc, #792]	@ (8006440 <HMI_Stop_W+0x7f8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	22fa      	movs	r2, #250	@ 0xfa
 800612c:	0091      	lsls	r1, r2, #2
 800612e:	0018      	movs	r0, r3
 8006130:	f7f9 fffa 	bl	8000128 <__udivsi3>
 8006134:	0003      	movs	r3, r0
 8006136:	210a      	movs	r1, #10
 8006138:	0018      	movs	r0, r3
 800613a:	f7fa f87b 	bl	8000234 <__aeabi_uidivmod>
 800613e:	1e0b      	subs	r3, r1, #0
 8006140:	d106      	bne.n	8006150 <HMI_Stop_W+0x508>
	{
		total_km[9] = 0x20;
 8006142:	4bc0      	ldr	r3, [pc, #768]	@ (8006444 <HMI_Stop_W+0x7fc>)
 8006144:	2220      	movs	r2, #32
 8006146:	725a      	strb	r2, [r3, #9]
		total_km[8] = 0x20;
 8006148:	4bbe      	ldr	r3, [pc, #760]	@ (8006444 <HMI_Stop_W+0x7fc>)
 800614a:	2220      	movs	r2, #32
 800614c:	721a      	strb	r2, [r3, #8]
 800614e:	e045      	b.n	80061dc <HMI_Stop_W+0x594>
	}
	else if ((Dis / 10000 % 10) == 0)
 8006150:	4bbb      	ldr	r3, [pc, #748]	@ (8006440 <HMI_Stop_W+0x7f8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	49bc      	ldr	r1, [pc, #752]	@ (8006448 <HMI_Stop_W+0x800>)
 8006156:	0018      	movs	r0, r3
 8006158:	f7f9 ffe6 	bl	8000128 <__udivsi3>
 800615c:	0003      	movs	r3, r0
 800615e:	210a      	movs	r1, #10
 8006160:	0018      	movs	r0, r3
 8006162:	f7fa f867 	bl	8000234 <__aeabi_uidivmod>
 8006166:	1e0b      	subs	r3, r1, #0
 8006168:	d115      	bne.n	8006196 <HMI_Stop_W+0x54e>
	{
		total_km[9] = (Dis / 1000 % 10) + 0x30;
 800616a:	4bb5      	ldr	r3, [pc, #724]	@ (8006440 <HMI_Stop_W+0x7f8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	22fa      	movs	r2, #250	@ 0xfa
 8006170:	0091      	lsls	r1, r2, #2
 8006172:	0018      	movs	r0, r3
 8006174:	f7f9 ffd8 	bl	8000128 <__udivsi3>
 8006178:	0003      	movs	r3, r0
 800617a:	210a      	movs	r1, #10
 800617c:	0018      	movs	r0, r3
 800617e:	f7fa f859 	bl	8000234 <__aeabi_uidivmod>
 8006182:	000b      	movs	r3, r1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	3330      	adds	r3, #48	@ 0x30
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4bae      	ldr	r3, [pc, #696]	@ (8006444 <HMI_Stop_W+0x7fc>)
 800618c:	725a      	strb	r2, [r3, #9]
		total_km[8] = 0x20;
 800618e:	4bad      	ldr	r3, [pc, #692]	@ (8006444 <HMI_Stop_W+0x7fc>)
 8006190:	2220      	movs	r2, #32
 8006192:	721a      	strb	r2, [r3, #8]
 8006194:	e022      	b.n	80061dc <HMI_Stop_W+0x594>
	}
	else
	{
		total_km[9] =  (Dis / 1000 % 10) + 0x30;
 8006196:	4baa      	ldr	r3, [pc, #680]	@ (8006440 <HMI_Stop_W+0x7f8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	22fa      	movs	r2, #250	@ 0xfa
 800619c:	0091      	lsls	r1, r2, #2
 800619e:	0018      	movs	r0, r3
 80061a0:	f7f9 ffc2 	bl	8000128 <__udivsi3>
 80061a4:	0003      	movs	r3, r0
 80061a6:	210a      	movs	r1, #10
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7fa f843 	bl	8000234 <__aeabi_uidivmod>
 80061ae:	000b      	movs	r3, r1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	3330      	adds	r3, #48	@ 0x30
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4ba3      	ldr	r3, [pc, #652]	@ (8006444 <HMI_Stop_W+0x7fc>)
 80061b8:	725a      	strb	r2, [r3, #9]
		total_km[8] =  (Dis / 10000 % 10) + 0x30;
 80061ba:	4ba1      	ldr	r3, [pc, #644]	@ (8006440 <HMI_Stop_W+0x7f8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	49a2      	ldr	r1, [pc, #648]	@ (8006448 <HMI_Stop_W+0x800>)
 80061c0:	0018      	movs	r0, r3
 80061c2:	f7f9 ffb1 	bl	8000128 <__udivsi3>
 80061c6:	0003      	movs	r3, r0
 80061c8:	210a      	movs	r1, #10
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fa f832 	bl	8000234 <__aeabi_uidivmod>
 80061d0:	000b      	movs	r3, r1
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	3330      	adds	r3, #48	@ 0x30
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	4b9a      	ldr	r3, [pc, #616]	@ (8006444 <HMI_Stop_W+0x7fc>)
 80061da:	721a      	strb	r2, [r3, #8]
	}

	//cpy paid_km 9, 10, 11, 13
	//default: paid_km 123.45 (8,9,10,12,13)
	fare_km_x = (int)(fare_km*100);
 80061dc:	4b9b      	ldr	r3, [pc, #620]	@ (800644c <HMI_Stop_W+0x804>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	499b      	ldr	r1, [pc, #620]	@ (8006450 <HMI_Stop_W+0x808>)
 80061e2:	1c18      	adds	r0, r3, #0
 80061e4:	f7fa fe20 	bl	8000e28 <__aeabi_fmul>
 80061e8:	1c03      	adds	r3, r0, #0
 80061ea:	1c18      	adds	r0, r3, #0
 80061ec:	f7fb f8fe 	bl	80013ec <__aeabi_f2iz>
 80061f0:	0003      	movs	r3, r0
 80061f2:	001a      	movs	r2, r3
 80061f4:	4b97      	ldr	r3, [pc, #604]	@ (8006454 <HMI_Stop_W+0x80c>)
 80061f6:	601a      	str	r2, [r3, #0]
	paid_km[13] = (fare_km_x /1 % 10) + 0x30;
 80061f8:	4b96      	ldr	r3, [pc, #600]	@ (8006454 <HMI_Stop_W+0x80c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	210a      	movs	r1, #10
 80061fe:	0018      	movs	r0, r3
 8006200:	f7fa f818 	bl	8000234 <__aeabi_uidivmod>
 8006204:	000b      	movs	r3, r1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	3330      	adds	r3, #48	@ 0x30
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b92      	ldr	r3, [pc, #584]	@ (8006458 <HMI_Stop_W+0x810>)
 800620e:	735a      	strb	r2, [r3, #13]
	paid_km[12] = (fare_km_x /10 % 10) + 0x30;
 8006210:	4b90      	ldr	r3, [pc, #576]	@ (8006454 <HMI_Stop_W+0x80c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	210a      	movs	r1, #10
 8006216:	0018      	movs	r0, r3
 8006218:	f7f9 ff86 	bl	8000128 <__udivsi3>
 800621c:	0003      	movs	r3, r0
 800621e:	210a      	movs	r1, #10
 8006220:	0018      	movs	r0, r3
 8006222:	f7fa f807 	bl	8000234 <__aeabi_uidivmod>
 8006226:	000b      	movs	r3, r1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	3330      	adds	r3, #48	@ 0x30
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b8a      	ldr	r3, [pc, #552]	@ (8006458 <HMI_Stop_W+0x810>)
 8006230:	731a      	strb	r2, [r3, #12]
	paid_km[10] = (fare_km_x /100 % 10) + 0x30;
 8006232:	4b88      	ldr	r3, [pc, #544]	@ (8006454 <HMI_Stop_W+0x80c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2164      	movs	r1, #100	@ 0x64
 8006238:	0018      	movs	r0, r3
 800623a:	f7f9 ff75 	bl	8000128 <__udivsi3>
 800623e:	0003      	movs	r3, r0
 8006240:	210a      	movs	r1, #10
 8006242:	0018      	movs	r0, r3
 8006244:	f7f9 fff6 	bl	8000234 <__aeabi_uidivmod>
 8006248:	000b      	movs	r3, r1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	3330      	adds	r3, #48	@ 0x30
 800624e:	b2da      	uxtb	r2, r3
 8006250:	4b81      	ldr	r3, [pc, #516]	@ (8006458 <HMI_Stop_W+0x810>)
 8006252:	729a      	strb	r2, [r3, #10]

	if((fare_km_x / 10000 % 10) == 0 && (fare_km_x / 1000 % 10) == 0)
 8006254:	4b7f      	ldr	r3, [pc, #508]	@ (8006454 <HMI_Stop_W+0x80c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	497b      	ldr	r1, [pc, #492]	@ (8006448 <HMI_Stop_W+0x800>)
 800625a:	0018      	movs	r0, r3
 800625c:	f7f9 ff64 	bl	8000128 <__udivsi3>
 8006260:	0003      	movs	r3, r0
 8006262:	210a      	movs	r1, #10
 8006264:	0018      	movs	r0, r3
 8006266:	f7f9 ffe5 	bl	8000234 <__aeabi_uidivmod>
 800626a:	1e0b      	subs	r3, r1, #0
 800626c:	d114      	bne.n	8006298 <HMI_Stop_W+0x650>
 800626e:	4b79      	ldr	r3, [pc, #484]	@ (8006454 <HMI_Stop_W+0x80c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	22fa      	movs	r2, #250	@ 0xfa
 8006274:	0091      	lsls	r1, r2, #2
 8006276:	0018      	movs	r0, r3
 8006278:	f7f9 ff56 	bl	8000128 <__udivsi3>
 800627c:	0003      	movs	r3, r0
 800627e:	210a      	movs	r1, #10
 8006280:	0018      	movs	r0, r3
 8006282:	f7f9 ffd7 	bl	8000234 <__aeabi_uidivmod>
 8006286:	1e0b      	subs	r3, r1, #0
 8006288:	d106      	bne.n	8006298 <HMI_Stop_W+0x650>
	{
		paid_km[9] = 0x20;
 800628a:	4b73      	ldr	r3, [pc, #460]	@ (8006458 <HMI_Stop_W+0x810>)
 800628c:	2220      	movs	r2, #32
 800628e:	725a      	strb	r2, [r3, #9]
		paid_km[8] = 0x20;
 8006290:	4b71      	ldr	r3, [pc, #452]	@ (8006458 <HMI_Stop_W+0x810>)
 8006292:	2220      	movs	r2, #32
 8006294:	721a      	strb	r2, [r3, #8]
 8006296:	e045      	b.n	8006324 <HMI_Stop_W+0x6dc>
	}
	else if((fare_km_x / 10000 % 10) == 0)
 8006298:	4b6e      	ldr	r3, [pc, #440]	@ (8006454 <HMI_Stop_W+0x80c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	496a      	ldr	r1, [pc, #424]	@ (8006448 <HMI_Stop_W+0x800>)
 800629e:	0018      	movs	r0, r3
 80062a0:	f7f9 ff42 	bl	8000128 <__udivsi3>
 80062a4:	0003      	movs	r3, r0
 80062a6:	210a      	movs	r1, #10
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7f9 ffc3 	bl	8000234 <__aeabi_uidivmod>
 80062ae:	1e0b      	subs	r3, r1, #0
 80062b0:	d115      	bne.n	80062de <HMI_Stop_W+0x696>
	{
		paid_km[9] =  (fare_km_x / 1000 % 10) + 0x30;
 80062b2:	4b68      	ldr	r3, [pc, #416]	@ (8006454 <HMI_Stop_W+0x80c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	22fa      	movs	r2, #250	@ 0xfa
 80062b8:	0091      	lsls	r1, r2, #2
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7f9 ff34 	bl	8000128 <__udivsi3>
 80062c0:	0003      	movs	r3, r0
 80062c2:	210a      	movs	r1, #10
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7f9 ffb5 	bl	8000234 <__aeabi_uidivmod>
 80062ca:	000b      	movs	r3, r1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	3330      	adds	r3, #48	@ 0x30
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	4b61      	ldr	r3, [pc, #388]	@ (8006458 <HMI_Stop_W+0x810>)
 80062d4:	725a      	strb	r2, [r3, #9]
		paid_km[8] = 0x20;
 80062d6:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <HMI_Stop_W+0x810>)
 80062d8:	2220      	movs	r2, #32
 80062da:	721a      	strb	r2, [r3, #8]
 80062dc:	e022      	b.n	8006324 <HMI_Stop_W+0x6dc>
	}
	else
	{
		paid_km[9] =  (fare_km_x / 1000 % 10) + 0x30;
 80062de:	4b5d      	ldr	r3, [pc, #372]	@ (8006454 <HMI_Stop_W+0x80c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	22fa      	movs	r2, #250	@ 0xfa
 80062e4:	0091      	lsls	r1, r2, #2
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7f9 ff1e 	bl	8000128 <__udivsi3>
 80062ec:	0003      	movs	r3, r0
 80062ee:	210a      	movs	r1, #10
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7f9 ff9f 	bl	8000234 <__aeabi_uidivmod>
 80062f6:	000b      	movs	r3, r1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	3330      	adds	r3, #48	@ 0x30
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b56      	ldr	r3, [pc, #344]	@ (8006458 <HMI_Stop_W+0x810>)
 8006300:	725a      	strb	r2, [r3, #9]
		paid_km[8] =  (fare_km_x / 10000 % 10) + 0x30;
 8006302:	4b54      	ldr	r3, [pc, #336]	@ (8006454 <HMI_Stop_W+0x80c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4950      	ldr	r1, [pc, #320]	@ (8006448 <HMI_Stop_W+0x800>)
 8006308:	0018      	movs	r0, r3
 800630a:	f7f9 ff0d 	bl	8000128 <__udivsi3>
 800630e:	0003      	movs	r3, r0
 8006310:	210a      	movs	r1, #10
 8006312:	0018      	movs	r0, r3
 8006314:	f7f9 ff8e 	bl	8000234 <__aeabi_uidivmod>
 8006318:	000b      	movs	r3, r1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	3330      	adds	r3, #48	@ 0x30
 800631e:	b2da      	uxtb	r2, r3
 8006320:	4b4d      	ldr	r3, [pc, #308]	@ (8006458 <HMI_Stop_W+0x810>)
 8006322:	721a      	strb	r2, [r3, #8]
	}

	//cpy paid_min 9, 10, 11, 13
	//default: paid_min 123.45 (8,9,10,12,13)
	fare_min_x = (fare_min * 1000) / 10;
 8006324:	4b4d      	ldr	r3, [pc, #308]	@ (800645c <HMI_Stop_W+0x814>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	494d      	ldr	r1, [pc, #308]	@ (8006460 <HMI_Stop_W+0x818>)
 800632a:	1c18      	adds	r0, r3, #0
 800632c:	f7fa fd7c 	bl	8000e28 <__aeabi_fmul>
 8006330:	1c03      	adds	r3, r0, #0
 8006332:	494c      	ldr	r1, [pc, #304]	@ (8006464 <HMI_Stop_W+0x81c>)
 8006334:	1c18      	adds	r0, r3, #0
 8006336:	f7fa fb91 	bl	8000a5c <__aeabi_fdiv>
 800633a:	1c03      	adds	r3, r0, #0
 800633c:	1c18      	adds	r0, r3, #0
 800633e:	f7fa f901 	bl	8000544 <__aeabi_f2uiz>
 8006342:	0002      	movs	r2, r0
 8006344:	4b48      	ldr	r3, [pc, #288]	@ (8006468 <HMI_Stop_W+0x820>)
 8006346:	601a      	str	r2, [r3, #0]
	paid_min[13] = (fare_min_x /1 % 10) + 0x30;
 8006348:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HMI_Stop_W+0x820>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	210a      	movs	r1, #10
 800634e:	0018      	movs	r0, r3
 8006350:	f7f9 ff70 	bl	8000234 <__aeabi_uidivmod>
 8006354:	000b      	movs	r3, r1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	3330      	adds	r3, #48	@ 0x30
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b43      	ldr	r3, [pc, #268]	@ (800646c <HMI_Stop_W+0x824>)
 800635e:	735a      	strb	r2, [r3, #13]
	paid_min[12] = (fare_min_x /10 % 10) + 0x30;
 8006360:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <HMI_Stop_W+0x820>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	210a      	movs	r1, #10
 8006366:	0018      	movs	r0, r3
 8006368:	f7f9 fede 	bl	8000128 <__udivsi3>
 800636c:	0003      	movs	r3, r0
 800636e:	210a      	movs	r1, #10
 8006370:	0018      	movs	r0, r3
 8006372:	f7f9 ff5f 	bl	8000234 <__aeabi_uidivmod>
 8006376:	000b      	movs	r3, r1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	3330      	adds	r3, #48	@ 0x30
 800637c:	b2da      	uxtb	r2, r3
 800637e:	4b3b      	ldr	r3, [pc, #236]	@ (800646c <HMI_Stop_W+0x824>)
 8006380:	731a      	strb	r2, [r3, #12]
	paid_min[10] = (fare_min_x /100 % 10) + 0x30;
 8006382:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <HMI_Stop_W+0x820>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2164      	movs	r1, #100	@ 0x64
 8006388:	0018      	movs	r0, r3
 800638a:	f7f9 fecd 	bl	8000128 <__udivsi3>
 800638e:	0003      	movs	r3, r0
 8006390:	210a      	movs	r1, #10
 8006392:	0018      	movs	r0, r3
 8006394:	f7f9 ff4e 	bl	8000234 <__aeabi_uidivmod>
 8006398:	000b      	movs	r3, r1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	3330      	adds	r3, #48	@ 0x30
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	4b32      	ldr	r3, [pc, #200]	@ (800646c <HMI_Stop_W+0x824>)
 80063a2:	729a      	strb	r2, [r3, #10]

	if((fare_min_x / 10000 % 10) == 0 && (fare_min_x / 1000 % 10) == 0)
 80063a4:	4b30      	ldr	r3, [pc, #192]	@ (8006468 <HMI_Stop_W+0x820>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4927      	ldr	r1, [pc, #156]	@ (8006448 <HMI_Stop_W+0x800>)
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7f9 febc 	bl	8000128 <__udivsi3>
 80063b0:	0003      	movs	r3, r0
 80063b2:	210a      	movs	r1, #10
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7f9 ff3d 	bl	8000234 <__aeabi_uidivmod>
 80063ba:	1e0b      	subs	r3, r1, #0
 80063bc:	d114      	bne.n	80063e8 <HMI_Stop_W+0x7a0>
 80063be:	4b2a      	ldr	r3, [pc, #168]	@ (8006468 <HMI_Stop_W+0x820>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	22fa      	movs	r2, #250	@ 0xfa
 80063c4:	0091      	lsls	r1, r2, #2
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7f9 feae 	bl	8000128 <__udivsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	210a      	movs	r1, #10
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7f9 ff2f 	bl	8000234 <__aeabi_uidivmod>
 80063d6:	1e0b      	subs	r3, r1, #0
 80063d8:	d106      	bne.n	80063e8 <HMI_Stop_W+0x7a0>
	{
		paid_min[9] = 0x20;
 80063da:	4b24      	ldr	r3, [pc, #144]	@ (800646c <HMI_Stop_W+0x824>)
 80063dc:	2220      	movs	r2, #32
 80063de:	725a      	strb	r2, [r3, #9]
		paid_min[8] = 0x20;
 80063e0:	4b22      	ldr	r3, [pc, #136]	@ (800646c <HMI_Stop_W+0x824>)
 80063e2:	2220      	movs	r2, #32
 80063e4:	721a      	strb	r2, [r3, #8]
 80063e6:	e066      	b.n	80064b6 <HMI_Stop_W+0x86e>
	}
	else if((fare_min_x / 10000 % 10) == 0)
 80063e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006468 <HMI_Stop_W+0x820>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4916      	ldr	r1, [pc, #88]	@ (8006448 <HMI_Stop_W+0x800>)
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7f9 fe9a 	bl	8000128 <__udivsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	210a      	movs	r1, #10
 80063f8:	0018      	movs	r0, r3
 80063fa:	f7f9 ff1b 	bl	8000234 <__aeabi_uidivmod>
 80063fe:	1e0b      	subs	r3, r1, #0
 8006400:	d136      	bne.n	8006470 <HMI_Stop_W+0x828>
	{
		paid_min[9] =  (fare_min_x / 1000 % 10) + 0x30;
 8006402:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <HMI_Stop_W+0x820>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	22fa      	movs	r2, #250	@ 0xfa
 8006408:	0091      	lsls	r1, r2, #2
 800640a:	0018      	movs	r0, r3
 800640c:	f7f9 fe8c 	bl	8000128 <__udivsi3>
 8006410:	0003      	movs	r3, r0
 8006412:	210a      	movs	r1, #10
 8006414:	0018      	movs	r0, r3
 8006416:	f7f9 ff0d 	bl	8000234 <__aeabi_uidivmod>
 800641a:	000b      	movs	r3, r1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	3330      	adds	r3, #48	@ 0x30
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4b12      	ldr	r3, [pc, #72]	@ (800646c <HMI_Stop_W+0x824>)
 8006424:	725a      	strb	r2, [r3, #9]
		paid_min[8] = 0x20;
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <HMI_Stop_W+0x824>)
 8006428:	2220      	movs	r2, #32
 800642a:	721a      	strb	r2, [r3, #8]
 800642c:	e043      	b.n	80064b6 <HMI_Stop_W+0x86e>
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	0801a0bc 	.word	0x0801a0bc
 8006434:	20000700 	.word	0x20000700
 8006438:	20000090 	.word	0x20000090
 800643c:	0801a08c 	.word	0x0801a08c
 8006440:	20000b0c 	.word	0x20000b0c
 8006444:	2000027c 	.word	0x2000027c
 8006448:	00002710 	.word	0x00002710
 800644c:	20000eb4 	.word	0x20000eb4
 8006450:	42c80000 	.word	0x42c80000
 8006454:	20000ebc 	.word	0x20000ebc
 8006458:	2000028c 	.word	0x2000028c
 800645c:	20000eb8 	.word	0x20000eb8
 8006460:	447a0000 	.word	0x447a0000
 8006464:	41200000 	.word	0x41200000
 8006468:	20000ec0 	.word	0x20000ec0
 800646c:	2000029c 	.word	0x2000029c
	}
	else
	{
		paid_min[9] =  (fare_min_x / 1000 % 10) + 0x30;
 8006470:	4bc3      	ldr	r3, [pc, #780]	@ (8006780 <HMI_Stop_W+0xb38>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	22fa      	movs	r2, #250	@ 0xfa
 8006476:	0091      	lsls	r1, r2, #2
 8006478:	0018      	movs	r0, r3
 800647a:	f7f9 fe55 	bl	8000128 <__udivsi3>
 800647e:	0003      	movs	r3, r0
 8006480:	210a      	movs	r1, #10
 8006482:	0018      	movs	r0, r3
 8006484:	f7f9 fed6 	bl	8000234 <__aeabi_uidivmod>
 8006488:	000b      	movs	r3, r1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	3330      	adds	r3, #48	@ 0x30
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4bbc      	ldr	r3, [pc, #752]	@ (8006784 <HMI_Stop_W+0xb3c>)
 8006492:	725a      	strb	r2, [r3, #9]
		paid_min[8] =  (fare_min_x / 10000 % 10) + 0x30;
 8006494:	4bba      	ldr	r3, [pc, #744]	@ (8006780 <HMI_Stop_W+0xb38>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	49bb      	ldr	r1, [pc, #748]	@ (8006788 <HMI_Stop_W+0xb40>)
 800649a:	0018      	movs	r0, r3
 800649c:	f7f9 fe44 	bl	8000128 <__udivsi3>
 80064a0:	0003      	movs	r3, r0
 80064a2:	210a      	movs	r1, #10
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7f9 fec5 	bl	8000234 <__aeabi_uidivmod>
 80064aa:	000b      	movs	r3, r1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	3330      	adds	r3, #48	@ 0x30
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	4bb4      	ldr	r3, [pc, #720]	@ (8006784 <HMI_Stop_W+0xb3c>)
 80064b4:	721a      	strb	r2, [r3, #8]
	}

	if (Addition == 0)
 80064b6:	4bb5      	ldr	r3, [pc, #724]	@ (800678c <HMI_Stop_W+0xb44>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d127      	bne.n	800650e <HMI_Stop_W+0x8c6>
	{
		//8,9,10-HK$0.0; 11,12,13 default 0.0
		//7,8,9-HK$, 10,11,12,13-0.00, default HK$0.00
		SD_buffer[98] = 0x20;
 80064be:	4bb4      	ldr	r3, [pc, #720]	@ (8006790 <HMI_Stop_W+0xb48>)
 80064c0:	2262      	movs	r2, #98	@ 0x62
 80064c2:	2120      	movs	r1, #32
 80064c4:	5499      	strb	r1, [r3, r2]
		SD_buffer[99] = 0x20;
 80064c6:	4bb2      	ldr	r3, [pc, #712]	@ (8006790 <HMI_Stop_W+0xb48>)
 80064c8:	2263      	movs	r2, #99	@ 0x63
 80064ca:	2120      	movs	r1, #32
 80064cc:	5499      	strb	r1, [r3, r2]
		SD_buffer[100] = 0x30;
 80064ce:	4bb0      	ldr	r3, [pc, #704]	@ (8006790 <HMI_Stop_W+0xb48>)
 80064d0:	2264      	movs	r2, #100	@ 0x64
 80064d2:	2130      	movs	r1, #48	@ 0x30
 80064d4:	5499      	strb	r1, [r3, r2]
		sub[13] = 0x30;
 80064d6:	4baf      	ldr	r3, [pc, #700]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064d8:	2230      	movs	r2, #48	@ 0x30
 80064da:	735a      	strb	r2, [r3, #13]
		sub[12] = 0x30;
 80064dc:	4bad      	ldr	r3, [pc, #692]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064de:	2230      	movs	r2, #48	@ 0x30
 80064e0:	731a      	strb	r2, [r3, #12]
		sub[11] = 0x2e;
 80064e2:	4bac      	ldr	r3, [pc, #688]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064e4:	222e      	movs	r2, #46	@ 0x2e
 80064e6:	72da      	strb	r2, [r3, #11]
		sub[10] = 0x30;
 80064e8:	4baa      	ldr	r3, [pc, #680]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064ea:	2230      	movs	r2, #48	@ 0x30
 80064ec:	729a      	strb	r2, [r3, #10]
		sub[9] = 0x24;
 80064ee:	4ba9      	ldr	r3, [pc, #676]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064f0:	2224      	movs	r2, #36	@ 0x24
 80064f2:	725a      	strb	r2, [r3, #9]
		sub[8] = 0x4b;
 80064f4:	4ba7      	ldr	r3, [pc, #668]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064f6:	224b      	movs	r2, #75	@ 0x4b
 80064f8:	721a      	strb	r2, [r3, #8]
		sub[7] = 0x48;
 80064fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80064fc:	2248      	movs	r2, #72	@ 0x48
 80064fe:	71da      	strb	r2, [r3, #7]
		sub[6] = 0x20;
 8006500:	4ba4      	ldr	r3, [pc, #656]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006502:	2220      	movs	r2, #32
 8006504:	719a      	strb	r2, [r3, #6]
		sub[5] = 0x20;
 8006506:	4ba3      	ldr	r3, [pc, #652]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006508:	2220      	movs	r2, #32
 800650a:	715a      	strb	r2, [r3, #5]
 800650c:	e0df      	b.n	80066ce <HMI_Stop_W+0xa86>
	}
	else
	{
		if(((Addition/10) / 100 % 10) == 0 && ((Addition/10) / 10 % 10) == 0)
 800650e:	4b9f      	ldr	r3, [pc, #636]	@ (800678c <HMI_Stop_W+0xb44>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	22fa      	movs	r2, #250	@ 0xfa
 8006514:	0091      	lsls	r1, r2, #2
 8006516:	0018      	movs	r0, r3
 8006518:	f7f9 fe06 	bl	8000128 <__udivsi3>
 800651c:	0003      	movs	r3, r0
 800651e:	210a      	movs	r1, #10
 8006520:	0018      	movs	r0, r3
 8006522:	f7f9 fe87 	bl	8000234 <__aeabi_uidivmod>
 8006526:	1e0b      	subs	r3, r1, #0
 8006528:	d13a      	bne.n	80065a0 <HMI_Stop_W+0x958>
 800652a:	4b98      	ldr	r3, [pc, #608]	@ (800678c <HMI_Stop_W+0xb44>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2164      	movs	r1, #100	@ 0x64
 8006530:	0018      	movs	r0, r3
 8006532:	f7f9 fdf9 	bl	8000128 <__udivsi3>
 8006536:	0003      	movs	r3, r0
 8006538:	210a      	movs	r1, #10
 800653a:	0018      	movs	r0, r3
 800653c:	f7f9 fe7a 	bl	8000234 <__aeabi_uidivmod>
 8006540:	1e0b      	subs	r3, r1, #0
 8006542:	d12d      	bne.n	80065a0 <HMI_Stop_W+0x958>
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 8006544:	4b91      	ldr	r3, [pc, #580]	@ (800678c <HMI_Stop_W+0xb44>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	210a      	movs	r1, #10
 800654a:	0018      	movs	r0, r3
 800654c:	f7f9 fdec 	bl	8000128 <__udivsi3>
 8006550:	0003      	movs	r3, r0
 8006552:	210a      	movs	r1, #10
 8006554:	0018      	movs	r0, r3
 8006556:	f7f9 fe6d 	bl	8000234 <__aeabi_uidivmod>
 800655a:	000b      	movs	r3, r1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	3330      	adds	r3, #48	@ 0x30
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006564:	729a      	strb	r2, [r3, #10]
			sub[9] = 0x24;
 8006566:	4b8b      	ldr	r3, [pc, #556]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006568:	2224      	movs	r2, #36	@ 0x24
 800656a:	725a      	strb	r2, [r3, #9]
			sub[8] = 0x4b;
 800656c:	4b89      	ldr	r3, [pc, #548]	@ (8006794 <HMI_Stop_W+0xb4c>)
 800656e:	224b      	movs	r2, #75	@ 0x4b
 8006570:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x48;
 8006572:	4b88      	ldr	r3, [pc, #544]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006574:	2248      	movs	r2, #72	@ 0x48
 8006576:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x20;
 8006578:	4b86      	ldr	r3, [pc, #536]	@ (8006794 <HMI_Stop_W+0xb4c>)
 800657a:	2220      	movs	r2, #32
 800657c:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x20;
 800657e:	4b85      	ldr	r3, [pc, #532]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006580:	2220      	movs	r2, #32
 8006582:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = 0x20;
 8006584:	4b82      	ldr	r3, [pc, #520]	@ (8006790 <HMI_Stop_W+0xb48>)
 8006586:	2262      	movs	r2, #98	@ 0x62
 8006588:	2120      	movs	r1, #32
 800658a:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = 0x20;
 800658c:	4b80      	ldr	r3, [pc, #512]	@ (8006790 <HMI_Stop_W+0xb48>)
 800658e:	2263      	movs	r2, #99	@ 0x63
 8006590:	2120      	movs	r1, #32
 8006592:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 8006594:	4b7f      	ldr	r3, [pc, #508]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006596:	7a99      	ldrb	r1, [r3, #10]
 8006598:	4b7d      	ldr	r3, [pc, #500]	@ (8006790 <HMI_Stop_W+0xb48>)
 800659a:	2264      	movs	r2, #100	@ 0x64
 800659c:	5499      	strb	r1, [r3, r2]
 800659e:	e096      	b.n	80066ce <HMI_Stop_W+0xa86>
		}
		else if(((Addition/10) / 100 % 10) == 0)
 80065a0:	4b7a      	ldr	r3, [pc, #488]	@ (800678c <HMI_Stop_W+0xb44>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	22fa      	movs	r2, #250	@ 0xfa
 80065a6:	0091      	lsls	r1, r2, #2
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7f9 fdbd 	bl	8000128 <__udivsi3>
 80065ae:	0003      	movs	r3, r0
 80065b0:	210a      	movs	r1, #10
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fe3e 	bl	8000234 <__aeabi_uidivmod>
 80065b8:	1e0b      	subs	r3, r1, #0
 80065ba:	d13c      	bne.n	8006636 <HMI_Stop_W+0x9ee>
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 80065bc:	4b73      	ldr	r3, [pc, #460]	@ (800678c <HMI_Stop_W+0xb44>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	210a      	movs	r1, #10
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7f9 fdb0 	bl	8000128 <__udivsi3>
 80065c8:	0003      	movs	r3, r0
 80065ca:	210a      	movs	r1, #10
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7f9 fe31 	bl	8000234 <__aeabi_uidivmod>
 80065d2:	000b      	movs	r3, r1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	3330      	adds	r3, #48	@ 0x30
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4b6e      	ldr	r3, [pc, #440]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80065dc:	729a      	strb	r2, [r3, #10]
			sub[9]= ((Addition/10) / 10 % 10) + 0x30;
 80065de:	4b6b      	ldr	r3, [pc, #428]	@ (800678c <HMI_Stop_W+0xb44>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2164      	movs	r1, #100	@ 0x64
 80065e4:	0018      	movs	r0, r3
 80065e6:	f7f9 fd9f 	bl	8000128 <__udivsi3>
 80065ea:	0003      	movs	r3, r0
 80065ec:	210a      	movs	r1, #10
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7f9 fe20 	bl	8000234 <__aeabi_uidivmod>
 80065f4:	000b      	movs	r3, r1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	3330      	adds	r3, #48	@ 0x30
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b65      	ldr	r3, [pc, #404]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80065fe:	725a      	strb	r2, [r3, #9]
			sub[8] = 0x24;
 8006600:	4b64      	ldr	r3, [pc, #400]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006602:	2224      	movs	r2, #36	@ 0x24
 8006604:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x4b;
 8006606:	4b63      	ldr	r3, [pc, #396]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006608:	224b      	movs	r2, #75	@ 0x4b
 800660a:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x48;
 800660c:	4b61      	ldr	r3, [pc, #388]	@ (8006794 <HMI_Stop_W+0xb4c>)
 800660e:	2248      	movs	r2, #72	@ 0x48
 8006610:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x20;
 8006612:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006614:	2220      	movs	r2, #32
 8006616:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = 0x20;
 8006618:	4b5d      	ldr	r3, [pc, #372]	@ (8006790 <HMI_Stop_W+0xb48>)
 800661a:	2262      	movs	r2, #98	@ 0x62
 800661c:	2120      	movs	r1, #32
 800661e:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = sub[9]; //sub[10];
 8006620:	4b5c      	ldr	r3, [pc, #368]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006622:	7a59      	ldrb	r1, [r3, #9]
 8006624:	4b5a      	ldr	r3, [pc, #360]	@ (8006790 <HMI_Stop_W+0xb48>)
 8006626:	2263      	movs	r2, #99	@ 0x63
 8006628:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 800662a:	4b5a      	ldr	r3, [pc, #360]	@ (8006794 <HMI_Stop_W+0xb4c>)
 800662c:	7a99      	ldrb	r1, [r3, #10]
 800662e:	4b58      	ldr	r3, [pc, #352]	@ (8006790 <HMI_Stop_W+0xb48>)
 8006630:	2264      	movs	r2, #100	@ 0x64
 8006632:	5499      	strb	r1, [r3, r2]
 8006634:	e04b      	b.n	80066ce <HMI_Stop_W+0xa86>
		}
		else
		{
			sub[10] = ((Addition/10) / 1 % 10) + 0x30;
 8006636:	4b55      	ldr	r3, [pc, #340]	@ (800678c <HMI_Stop_W+0xb44>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	210a      	movs	r1, #10
 800663c:	0018      	movs	r0, r3
 800663e:	f7f9 fd73 	bl	8000128 <__udivsi3>
 8006642:	0003      	movs	r3, r0
 8006644:	210a      	movs	r1, #10
 8006646:	0018      	movs	r0, r3
 8006648:	f7f9 fdf4 	bl	8000234 <__aeabi_uidivmod>
 800664c:	000b      	movs	r3, r1
 800664e:	b2db      	uxtb	r3, r3
 8006650:	3330      	adds	r3, #48	@ 0x30
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b4f      	ldr	r3, [pc, #316]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006656:	729a      	strb	r2, [r3, #10]
			sub[9] = ((Addition/10) / 10 % 10) + 0x30;
 8006658:	4b4c      	ldr	r3, [pc, #304]	@ (800678c <HMI_Stop_W+0xb44>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2164      	movs	r1, #100	@ 0x64
 800665e:	0018      	movs	r0, r3
 8006660:	f7f9 fd62 	bl	8000128 <__udivsi3>
 8006664:	0003      	movs	r3, r0
 8006666:	210a      	movs	r1, #10
 8006668:	0018      	movs	r0, r3
 800666a:	f7f9 fde3 	bl	8000234 <__aeabi_uidivmod>
 800666e:	000b      	movs	r3, r1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	3330      	adds	r3, #48	@ 0x30
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b47      	ldr	r3, [pc, #284]	@ (8006794 <HMI_Stop_W+0xb4c>)
 8006678:	725a      	strb	r2, [r3, #9]
			sub[8] = ((Addition/10) / 100 % 10) + 0x30;
 800667a:	4b44      	ldr	r3, [pc, #272]	@ (800678c <HMI_Stop_W+0xb44>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	22fa      	movs	r2, #250	@ 0xfa
 8006680:	0091      	lsls	r1, r2, #2
 8006682:	0018      	movs	r0, r3
 8006684:	f7f9 fd50 	bl	8000128 <__udivsi3>
 8006688:	0003      	movs	r3, r0
 800668a:	210a      	movs	r1, #10
 800668c:	0018      	movs	r0, r3
 800668e:	f7f9 fdd1 	bl	8000234 <__aeabi_uidivmod>
 8006692:	000b      	movs	r3, r1
 8006694:	b2db      	uxtb	r3, r3
 8006696:	3330      	adds	r3, #48	@ 0x30
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4b3e      	ldr	r3, [pc, #248]	@ (8006794 <HMI_Stop_W+0xb4c>)
 800669c:	721a      	strb	r2, [r3, #8]
			sub[7] = 0x24;
 800669e:	4b3d      	ldr	r3, [pc, #244]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066a0:	2224      	movs	r2, #36	@ 0x24
 80066a2:	71da      	strb	r2, [r3, #7]
			sub[6] = 0x4b;
 80066a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066a6:	224b      	movs	r2, #75	@ 0x4b
 80066a8:	719a      	strb	r2, [r3, #6]
			sub[5] = 0x48;
 80066aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066ac:	2248      	movs	r2, #72	@ 0x48
 80066ae:	715a      	strb	r2, [r3, #5]
			SD_buffer[98] = sub[8]; //sub[9];
 80066b0:	4b38      	ldr	r3, [pc, #224]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066b2:	7a19      	ldrb	r1, [r3, #8]
 80066b4:	4b36      	ldr	r3, [pc, #216]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066b6:	2262      	movs	r2, #98	@ 0x62
 80066b8:	5499      	strb	r1, [r3, r2]
			SD_buffer[99] = sub[9]; //sub[10];
 80066ba:	4b36      	ldr	r3, [pc, #216]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066bc:	7a59      	ldrb	r1, [r3, #9]
 80066be:	4b34      	ldr	r3, [pc, #208]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066c0:	2263      	movs	r2, #99	@ 0x63
 80066c2:	5499      	strb	r1, [r3, r2]
			SD_buffer[100] = sub[10]; //sub[11];
 80066c4:	4b33      	ldr	r3, [pc, #204]	@ (8006794 <HMI_Stop_W+0xb4c>)
 80066c6:	7a99      	ldrb	r1, [r3, #10]
 80066c8:	4b31      	ldr	r3, [pc, #196]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066ca:	2264      	movs	r2, #100	@ 0x64
 80066cc:	5499      	strb	r1, [r3, r2]
		}
	}
	SD_buffer[101] = 0x2E;
 80066ce:	4b30      	ldr	r3, [pc, #192]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066d0:	2265      	movs	r2, #101	@ 0x65
 80066d2:	212e      	movs	r1, #46	@ 0x2e
 80066d4:	5499      	strb	r1, [r3, r2]
	SD_buffer[102] = 0x30;
 80066d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066d8:	2266      	movs	r2, #102	@ 0x66
 80066da:	2130      	movs	r1, #48	@ 0x30
 80066dc:	5499      	strb	r1, [r3, r2]
	SD_buffer[103] = 0x30;
 80066de:	4b2c      	ldr	r3, [pc, #176]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066e0:	2267      	movs	r2, #103	@ 0x67
 80066e2:	2130      	movs	r1, #48	@ 0x30
 80066e4:	5499      	strb	r1, [r3, r2]
	SD_buffer[104] = 0x20;
 80066e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006790 <HMI_Stop_W+0xb48>)
 80066e8:	2268      	movs	r2, #104	@ 0x68
 80066ea:	2120      	movs	r1, #32
 80066ec:	5499      	strb	r1, [r3, r2]

	//cpy fare(without sub) //new add for sd_card
	if ((fare_d_x10 /10000 % 10) == 0 && (fare_d_x10 /1000 % 10) == 0)
 80066ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006798 <HMI_Stop_W+0xb50>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4925      	ldr	r1, [pc, #148]	@ (8006788 <HMI_Stop_W+0xb40>)
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7f9 fd17 	bl	8000128 <__udivsi3>
 80066fa:	0003      	movs	r3, r0
 80066fc:	210a      	movs	r1, #10
 80066fe:	0018      	movs	r0, r3
 8006700:	f7f9 fd98 	bl	8000234 <__aeabi_uidivmod>
 8006704:	1e0b      	subs	r3, r1, #0
 8006706:	d116      	bne.n	8006736 <HMI_Stop_W+0xaee>
 8006708:	4b23      	ldr	r3, [pc, #140]	@ (8006798 <HMI_Stop_W+0xb50>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	22fa      	movs	r2, #250	@ 0xfa
 800670e:	0091      	lsls	r1, r2, #2
 8006710:	0018      	movs	r0, r3
 8006712:	f7f9 fd09 	bl	8000128 <__udivsi3>
 8006716:	0003      	movs	r3, r0
 8006718:	210a      	movs	r1, #10
 800671a:	0018      	movs	r0, r3
 800671c:	f7f9 fd8a 	bl	8000234 <__aeabi_uidivmod>
 8006720:	1e0b      	subs	r3, r1, #0
 8006722:	d108      	bne.n	8006736 <HMI_Stop_W+0xaee>
	{
		SD_buffer[90] = 0x20;
 8006724:	4b1a      	ldr	r3, [pc, #104]	@ (8006790 <HMI_Stop_W+0xb48>)
 8006726:	225a      	movs	r2, #90	@ 0x5a
 8006728:	2120      	movs	r1, #32
 800672a:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = 0x20;
 800672c:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <HMI_Stop_W+0xb48>)
 800672e:	225b      	movs	r2, #91	@ 0x5b
 8006730:	2120      	movs	r1, #32
 8006732:	5499      	strb	r1, [r3, r2]
 8006734:	e057      	b.n	80067e6 <HMI_Stop_W+0xb9e>
	}
	else if((fare_d_x10 /10000 % 10) == 0)
 8006736:	4b18      	ldr	r3, [pc, #96]	@ (8006798 <HMI_Stop_W+0xb50>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4913      	ldr	r1, [pc, #76]	@ (8006788 <HMI_Stop_W+0xb40>)
 800673c:	0018      	movs	r0, r3
 800673e:	f7f9 fcf3 	bl	8000128 <__udivsi3>
 8006742:	0003      	movs	r3, r0
 8006744:	210a      	movs	r1, #10
 8006746:	0018      	movs	r0, r3
 8006748:	f7f9 fd74 	bl	8000234 <__aeabi_uidivmod>
 800674c:	1e0b      	subs	r3, r1, #0
 800674e:	d125      	bne.n	800679c <HMI_Stop_W+0xb54>
	{
		SD_buffer[90] = 0x20;
 8006750:	4b0f      	ldr	r3, [pc, #60]	@ (8006790 <HMI_Stop_W+0xb48>)
 8006752:	225a      	movs	r2, #90	@ 0x5a
 8006754:	2120      	movs	r1, #32
 8006756:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = (fare_d_x10 /1000 % 10) + 0x30;
 8006758:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <HMI_Stop_W+0xb50>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	22fa      	movs	r2, #250	@ 0xfa
 800675e:	0091      	lsls	r1, r2, #2
 8006760:	0018      	movs	r0, r3
 8006762:	f7f9 fce1 	bl	8000128 <__udivsi3>
 8006766:	0003      	movs	r3, r0
 8006768:	210a      	movs	r1, #10
 800676a:	0018      	movs	r0, r3
 800676c:	f7f9 fd62 	bl	8000234 <__aeabi_uidivmod>
 8006770:	000b      	movs	r3, r1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	3330      	adds	r3, #48	@ 0x30
 8006776:	b2d9      	uxtb	r1, r3
 8006778:	4b05      	ldr	r3, [pc, #20]	@ (8006790 <HMI_Stop_W+0xb48>)
 800677a:	225b      	movs	r2, #91	@ 0x5b
 800677c:	5499      	strb	r1, [r3, r2]
 800677e:	e032      	b.n	80067e6 <HMI_Stop_W+0xb9e>
 8006780:	20000ec0 	.word	0x20000ec0
 8006784:	2000029c 	.word	0x2000029c
 8006788:	00002710 	.word	0x00002710
 800678c:	20000b18 	.word	0x20000b18
 8006790:	200034fc 	.word	0x200034fc
 8006794:	200002ac 	.word	0x200002ac
 8006798:	20000ea8 	.word	0x20000ea8
	}
	else
	{
		SD_buffer[90] = (fare_d_x10 /10000 % 10) + 0x30;
 800679c:	4bda      	ldr	r3, [pc, #872]	@ (8006b08 <HMI_Stop_W+0xec0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	49da      	ldr	r1, [pc, #872]	@ (8006b0c <HMI_Stop_W+0xec4>)
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7f9 fcc0 	bl	8000128 <__udivsi3>
 80067a8:	0003      	movs	r3, r0
 80067aa:	210a      	movs	r1, #10
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7f9 fd41 	bl	8000234 <__aeabi_uidivmod>
 80067b2:	000b      	movs	r3, r1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	3330      	adds	r3, #48	@ 0x30
 80067b8:	b2d9      	uxtb	r1, r3
 80067ba:	4bd5      	ldr	r3, [pc, #852]	@ (8006b10 <HMI_Stop_W+0xec8>)
 80067bc:	225a      	movs	r2, #90	@ 0x5a
 80067be:	5499      	strb	r1, [r3, r2]
		SD_buffer[91] = (fare_d_x10 /1000 % 10) + 0x30;
 80067c0:	4bd1      	ldr	r3, [pc, #836]	@ (8006b08 <HMI_Stop_W+0xec0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	22fa      	movs	r2, #250	@ 0xfa
 80067c6:	0091      	lsls	r1, r2, #2
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7f9 fcad 	bl	8000128 <__udivsi3>
 80067ce:	0003      	movs	r3, r0
 80067d0:	210a      	movs	r1, #10
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7f9 fd2e 	bl	8000234 <__aeabi_uidivmod>
 80067d8:	000b      	movs	r3, r1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	3330      	adds	r3, #48	@ 0x30
 80067de:	b2d9      	uxtb	r1, r3
 80067e0:	4bcb      	ldr	r3, [pc, #812]	@ (8006b10 <HMI_Stop_W+0xec8>)
 80067e2:	225b      	movs	r2, #91	@ 0x5b
 80067e4:	5499      	strb	r1, [r3, r2]
	}
	SD_buffer[92] = (fare_d_x10 /100 % 10) + 0x30;
 80067e6:	4bc8      	ldr	r3, [pc, #800]	@ (8006b08 <HMI_Stop_W+0xec0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2164      	movs	r1, #100	@ 0x64
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7f9 fc9b 	bl	8000128 <__udivsi3>
 80067f2:	0003      	movs	r3, r0
 80067f4:	210a      	movs	r1, #10
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7f9 fd1c 	bl	8000234 <__aeabi_uidivmod>
 80067fc:	000b      	movs	r3, r1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	3330      	adds	r3, #48	@ 0x30
 8006802:	b2d9      	uxtb	r1, r3
 8006804:	4bc2      	ldr	r3, [pc, #776]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006806:	225c      	movs	r2, #92	@ 0x5c
 8006808:	5499      	strb	r1, [r3, r2]
	SD_buffer[93] = (fare_d_x10 /10 % 10) + 0x30;
 800680a:	4bbf      	ldr	r3, [pc, #764]	@ (8006b08 <HMI_Stop_W+0xec0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	210a      	movs	r1, #10
 8006810:	0018      	movs	r0, r3
 8006812:	f7f9 fc89 	bl	8000128 <__udivsi3>
 8006816:	0003      	movs	r3, r0
 8006818:	210a      	movs	r1, #10
 800681a:	0018      	movs	r0, r3
 800681c:	f7f9 fd0a 	bl	8000234 <__aeabi_uidivmod>
 8006820:	000b      	movs	r3, r1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	3330      	adds	r3, #48	@ 0x30
 8006826:	b2d9      	uxtb	r1, r3
 8006828:	4bb9      	ldr	r3, [pc, #740]	@ (8006b10 <HMI_Stop_W+0xec8>)
 800682a:	225d      	movs	r2, #93	@ 0x5d
 800682c:	5499      	strb	r1, [r3, r2]
	SD_buffer[94] = 0x2E;
 800682e:	4bb8      	ldr	r3, [pc, #736]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006830:	225e      	movs	r2, #94	@ 0x5e
 8006832:	212e      	movs	r1, #46	@ 0x2e
 8006834:	5499      	strb	r1, [r3, r2]
	SD_buffer[95] = (fare_d_x10 /1 % 10) + 0x30;
 8006836:	4bb4      	ldr	r3, [pc, #720]	@ (8006b08 <HMI_Stop_W+0xec0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	210a      	movs	r1, #10
 800683c:	0018      	movs	r0, r3
 800683e:	f7f9 fcf9 	bl	8000234 <__aeabi_uidivmod>
 8006842:	000b      	movs	r3, r1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	3330      	adds	r3, #48	@ 0x30
 8006848:	b2d9      	uxtb	r1, r3
 800684a:	4bb1      	ldr	r3, [pc, #708]	@ (8006b10 <HMI_Stop_W+0xec8>)
 800684c:	225f      	movs	r2, #95	@ 0x5f
 800684e:	5499      	strb	r1, [r3, r2]
	SD_buffer[96] = 0x30;
 8006850:	4baf      	ldr	r3, [pc, #700]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006852:	2260      	movs	r2, #96	@ 0x60
 8006854:	2130      	movs	r1, #48	@ 0x30
 8006856:	5499      	strb	r1, [r3, r2]
	SD_buffer[97] = 0x20;
 8006858:	4bad      	ldr	r3, [pc, #692]	@ (8006b10 <HMI_Stop_W+0xec8>)
 800685a:	2261      	movs	r2, #97	@ 0x61
 800685c:	2120      	movs	r1, #32
 800685e:	5499      	strb	r1, [r3, r2]

	//cpy total_fare
	//default 00.0 - [9][10][11][12] - 0x30 0x30 0x2e 0x30
	//default 00.00 - [8][9][10][11][12]
	if(Addition == 0)
 8006860:	4bac      	ldr	r3, [pc, #688]	@ (8006b14 <HMI_Stop_W+0xecc>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <HMI_Stop_W+0xc28>
	{
		Final_price = fare_d_x10;
 8006868:	4ba7      	ldr	r3, [pc, #668]	@ (8006b08 <HMI_Stop_W+0xec0>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4baa      	ldr	r3, [pc, #680]	@ (8006b18 <HMI_Stop_W+0xed0>)
 800686e:	601a      	str	r2, [r3, #0]
	}

	t_fare[12] = 0x30;
 8006870:	4baa      	ldr	r3, [pc, #680]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006872:	2230      	movs	r2, #48	@ 0x30
 8006874:	731a      	strb	r2, [r3, #12]
	t_fare[11] = (Final_price /1 % 10) + 0x30;
 8006876:	4ba8      	ldr	r3, [pc, #672]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	210a      	movs	r1, #10
 800687c:	0018      	movs	r0, r3
 800687e:	f7f9 fcd9 	bl	8000234 <__aeabi_uidivmod>
 8006882:	000b      	movs	r3, r1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	3330      	adds	r3, #48	@ 0x30
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4ba4      	ldr	r3, [pc, #656]	@ (8006b1c <HMI_Stop_W+0xed4>)
 800688c:	72da      	strb	r2, [r3, #11]
	t_fare[9] = (Final_price /10 % 10) + 0x30;
 800688e:	4ba2      	ldr	r3, [pc, #648]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	210a      	movs	r1, #10
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fc47 	bl	8000128 <__udivsi3>
 800689a:	0003      	movs	r3, r0
 800689c:	210a      	movs	r1, #10
 800689e:	0018      	movs	r0, r3
 80068a0:	f7f9 fcc8 	bl	8000234 <__aeabi_uidivmod>
 80068a4:	000b      	movs	r3, r1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	3330      	adds	r3, #48	@ 0x30
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	4b9b      	ldr	r3, [pc, #620]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80068ae:	725a      	strb	r2, [r3, #9]
	t_fare[8] = (Final_price /100 % 10) + 0x30;
 80068b0:	4b99      	ldr	r3, [pc, #612]	@ (8006b18 <HMI_Stop_W+0xed0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2164      	movs	r1, #100	@ 0x64
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7f9 fc36 	bl	8000128 <__udivsi3>
 80068bc:	0003      	movs	r3, r0
 80068be:	210a      	movs	r1, #10
 80068c0:	0018      	movs	r0, r3
 80068c2:	f7f9 fcb7 	bl	8000234 <__aeabi_uidivmod>
 80068c6:	000b      	movs	r3, r1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	3330      	adds	r3, #48	@ 0x30
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	4b93      	ldr	r3, [pc, #588]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80068d0:	721a      	strb	r2, [r3, #8]

	if ((Final_price /10000 % 10) == 0 && (Final_price /1000 % 10) == 0)
 80068d2:	4b91      	ldr	r3, [pc, #580]	@ (8006b18 <HMI_Stop_W+0xed0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	498d      	ldr	r1, [pc, #564]	@ (8006b0c <HMI_Stop_W+0xec4>)
 80068d8:	0018      	movs	r0, r3
 80068da:	f7f9 fc25 	bl	8000128 <__udivsi3>
 80068de:	0003      	movs	r3, r0
 80068e0:	210a      	movs	r1, #10
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7f9 fca6 	bl	8000234 <__aeabi_uidivmod>
 80068e8:	1e0b      	subs	r3, r1, #0
 80068ea:	d125      	bne.n	8006938 <HMI_Stop_W+0xcf0>
 80068ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006b18 <HMI_Stop_W+0xed0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	22fa      	movs	r2, #250	@ 0xfa
 80068f2:	0091      	lsls	r1, r2, #2
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7f9 fc17 	bl	8000128 <__udivsi3>
 80068fa:	0003      	movs	r3, r0
 80068fc:	210a      	movs	r1, #10
 80068fe:	0018      	movs	r0, r3
 8006900:	f7f9 fc98 	bl	8000234 <__aeabi_uidivmod>
 8006904:	1e0b      	subs	r3, r1, #0
 8006906:	d117      	bne.n	8006938 <HMI_Stop_W+0xcf0>
	{
//		t_fare[8] = 0x24;
//		t_fare[7] = 0x4b;
//		t_fare[6] = 0x48;
		t_fare[7] = 0x24;
 8006908:	4b84      	ldr	r3, [pc, #528]	@ (8006b1c <HMI_Stop_W+0xed4>)
 800690a:	2224      	movs	r2, #36	@ 0x24
 800690c:	71da      	strb	r2, [r3, #7]
		t_fare[6] = 0x4b;
 800690e:	4b83      	ldr	r3, [pc, #524]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006910:	224b      	movs	r2, #75	@ 0x4b
 8006912:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x48;
 8006914:	4b81      	ldr	r3, [pc, #516]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006916:	2248      	movs	r2, #72	@ 0x48
 8006918:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x20;
 800691a:	4b80      	ldr	r3, [pc, #512]	@ (8006b1c <HMI_Stop_W+0xed4>)
 800691c:	2220      	movs	r2, #32
 800691e:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x20;
 8006920:	4b7e      	ldr	r3, [pc, #504]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006922:	2220      	movs	r2, #32
 8006924:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = 0x20;
 8006926:	4b7a      	ldr	r3, [pc, #488]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006928:	2269      	movs	r2, #105	@ 0x69
 800692a:	2120      	movs	r1, #32
 800692c:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = 0x20;
 800692e:	4b78      	ldr	r3, [pc, #480]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006930:	226a      	movs	r2, #106	@ 0x6a
 8006932:	2120      	movs	r1, #32
 8006934:	5499      	strb	r1, [r3, r2]
 8006936:	e06a      	b.n	8006a0e <HMI_Stop_W+0xdc6>
	}
	else if((Final_price /10000 % 10) == 0)
 8006938:	4b77      	ldr	r3, [pc, #476]	@ (8006b18 <HMI_Stop_W+0xed0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4973      	ldr	r1, [pc, #460]	@ (8006b0c <HMI_Stop_W+0xec4>)
 800693e:	0018      	movs	r0, r3
 8006940:	f7f9 fbf2 	bl	8000128 <__udivsi3>
 8006944:	0003      	movs	r3, r0
 8006946:	210a      	movs	r1, #10
 8006948:	0018      	movs	r0, r3
 800694a:	f7f9 fc73 	bl	8000234 <__aeabi_uidivmod>
 800694e:	1e0b      	subs	r3, r1, #0
 8006950:	d127      	bne.n	80069a2 <HMI_Stop_W+0xd5a>
	{
//		t_fare[8] = (Final_price /1000 % 10) + 0x30;
//		t_fare[7] = 0x24;
//		t_fare[6] = 0x4b;
//		t_fare[5] = 0x48;
		t_fare[7] = (Final_price /1000 % 10) + 0x30;
 8006952:	4b71      	ldr	r3, [pc, #452]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	22fa      	movs	r2, #250	@ 0xfa
 8006958:	0091      	lsls	r1, r2, #2
 800695a:	0018      	movs	r0, r3
 800695c:	f7f9 fbe4 	bl	8000128 <__udivsi3>
 8006960:	0003      	movs	r3, r0
 8006962:	210a      	movs	r1, #10
 8006964:	0018      	movs	r0, r3
 8006966:	f7f9 fc65 	bl	8000234 <__aeabi_uidivmod>
 800696a:	000b      	movs	r3, r1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	3330      	adds	r3, #48	@ 0x30
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b6a      	ldr	r3, [pc, #424]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006974:	71da      	strb	r2, [r3, #7]
		t_fare[6] = 0x24;
 8006976:	4b69      	ldr	r3, [pc, #420]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006978:	2224      	movs	r2, #36	@ 0x24
 800697a:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x4b;
 800697c:	4b67      	ldr	r3, [pc, #412]	@ (8006b1c <HMI_Stop_W+0xed4>)
 800697e:	224b      	movs	r2, #75	@ 0x4b
 8006980:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x48;
 8006982:	4b66      	ldr	r3, [pc, #408]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006984:	2248      	movs	r2, #72	@ 0x48
 8006986:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x20;
 8006988:	4b64      	ldr	r3, [pc, #400]	@ (8006b1c <HMI_Stop_W+0xed4>)
 800698a:	2220      	movs	r2, #32
 800698c:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = 0x20;
 800698e:	4b60      	ldr	r3, [pc, #384]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006990:	2269      	movs	r2, #105	@ 0x69
 8006992:	2120      	movs	r1, #32
 8006994:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = t_fare[7]; //t_fare[8];
 8006996:	4b61      	ldr	r3, [pc, #388]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006998:	79d9      	ldrb	r1, [r3, #7]
 800699a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b10 <HMI_Stop_W+0xec8>)
 800699c:	226a      	movs	r2, #106	@ 0x6a
 800699e:	5499      	strb	r1, [r3, r2]
 80069a0:	e035      	b.n	8006a0e <HMI_Stop_W+0xdc6>
//		t_fare[8] = (Final_price /1000 % 10) + 0x30;
//		t_fare[7] = (Final_price /10000 % 10) + 0x30;
//		t_fare[6] = 0x24;
//		t_fare[5] = 0x4b;
//		t_fare[4] = 0x48;
		t_fare[7] = (Final_price /1000 % 10) + 0x30;
 80069a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006b18 <HMI_Stop_W+0xed0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	22fa      	movs	r2, #250	@ 0xfa
 80069a8:	0091      	lsls	r1, r2, #2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f7f9 fbbc 	bl	8000128 <__udivsi3>
 80069b0:	0003      	movs	r3, r0
 80069b2:	210a      	movs	r1, #10
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7f9 fc3d 	bl	8000234 <__aeabi_uidivmod>
 80069ba:	000b      	movs	r3, r1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	3330      	adds	r3, #48	@ 0x30
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b56      	ldr	r3, [pc, #344]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069c4:	71da      	strb	r2, [r3, #7]
		t_fare[6] = (Final_price /10000 % 10) + 0x30;
 80069c6:	4b54      	ldr	r3, [pc, #336]	@ (8006b18 <HMI_Stop_W+0xed0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4950      	ldr	r1, [pc, #320]	@ (8006b0c <HMI_Stop_W+0xec4>)
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7f9 fbab 	bl	8000128 <__udivsi3>
 80069d2:	0003      	movs	r3, r0
 80069d4:	210a      	movs	r1, #10
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7f9 fc2c 	bl	8000234 <__aeabi_uidivmod>
 80069dc:	000b      	movs	r3, r1
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	3330      	adds	r3, #48	@ 0x30
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	4b4d      	ldr	r3, [pc, #308]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069e6:	719a      	strb	r2, [r3, #6]
		t_fare[5] = 0x24;
 80069e8:	4b4c      	ldr	r3, [pc, #304]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069ea:	2224      	movs	r2, #36	@ 0x24
 80069ec:	715a      	strb	r2, [r3, #5]
		t_fare[4] = 0x4b;
 80069ee:	4b4b      	ldr	r3, [pc, #300]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069f0:	224b      	movs	r2, #75	@ 0x4b
 80069f2:	711a      	strb	r2, [r3, #4]
		t_fare[3] = 0x48;
 80069f4:	4b49      	ldr	r3, [pc, #292]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069f6:	2248      	movs	r2, #72	@ 0x48
 80069f8:	70da      	strb	r2, [r3, #3]
		SD_buffer[105] = t_fare[6]; //t_fare[7];
 80069fa:	4b48      	ldr	r3, [pc, #288]	@ (8006b1c <HMI_Stop_W+0xed4>)
 80069fc:	7999      	ldrb	r1, [r3, #6]
 80069fe:	4b44      	ldr	r3, [pc, #272]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a00:	2269      	movs	r2, #105	@ 0x69
 8006a02:	5499      	strb	r1, [r3, r2]
		SD_buffer[106] = t_fare[7]; //t_fare[8];
 8006a04:	4b45      	ldr	r3, [pc, #276]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006a06:	79d9      	ldrb	r1, [r3, #7]
 8006a08:	4b41      	ldr	r3, [pc, #260]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a0a:	226a      	movs	r2, #106	@ 0x6a
 8006a0c:	5499      	strb	r1, [r3, r2]
	}
	SD_buffer[107] = t_fare[8]; //t_fare[9];
 8006a0e:	4b43      	ldr	r3, [pc, #268]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006a10:	7a19      	ldrb	r1, [r3, #8]
 8006a12:	4b3f      	ldr	r3, [pc, #252]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a14:	226b      	movs	r2, #107	@ 0x6b
 8006a16:	5499      	strb	r1, [r3, r2]
	SD_buffer[108] = t_fare[9]; //t_fare[10];
 8006a18:	4b40      	ldr	r3, [pc, #256]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006a1a:	7a59      	ldrb	r1, [r3, #9]
 8006a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a1e:	226c      	movs	r2, #108	@ 0x6c
 8006a20:	5499      	strb	r1, [r3, r2]
	SD_buffer[109] = 0x2E;
 8006a22:	4b3b      	ldr	r3, [pc, #236]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a24:	226d      	movs	r2, #109	@ 0x6d
 8006a26:	212e      	movs	r1, #46	@ 0x2e
 8006a28:	5499      	strb	r1, [r3, r2]
	SD_buffer[110] = t_fare[11];
 8006a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8006b1c <HMI_Stop_W+0xed4>)
 8006a2c:	7ad9      	ldrb	r1, [r3, #11]
 8006a2e:	4b38      	ldr	r3, [pc, #224]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a30:	226e      	movs	r2, #110	@ 0x6e
 8006a32:	5499      	strb	r1, [r3, r2]
	SD_buffer[111] = 0x30;
 8006a34:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a36:	226f      	movs	r2, #111	@ 0x6f
 8006a38:	2130      	movs	r1, #48	@ 0x30
 8006a3a:	5499      	strb	r1, [r3, r2]
	SD_buffer[112] = 0x20;
 8006a3c:	4b34      	ldr	r3, [pc, #208]	@ (8006b10 <HMI_Stop_W+0xec8>)
 8006a3e:	2270      	movs	r2, #112	@ 0x70
 8006a40:	2120      	movs	r1, #32
 8006a42:	5499      	strb	r1, [r3, r2]

	//v_can_end
	v_value[1] = (Final_price /10000 % 10) + 0x30;
 8006a44:	4b34      	ldr	r3, [pc, #208]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4930      	ldr	r1, [pc, #192]	@ (8006b0c <HMI_Stop_W+0xec4>)
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7f9 fb6c 	bl	8000128 <__udivsi3>
 8006a50:	0003      	movs	r3, r0
 8006a52:	210a      	movs	r1, #10
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7f9 fbed 	bl	8000234 <__aeabi_uidivmod>
 8006a5a:	000b      	movs	r3, r1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	3330      	adds	r3, #48	@ 0x30
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	4b2f      	ldr	r3, [pc, #188]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006a64:	705a      	strb	r2, [r3, #1]
	v_value[2] = (Final_price /1000 % 10) + 0x30;
 8006a66:	4b2c      	ldr	r3, [pc, #176]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	22fa      	movs	r2, #250	@ 0xfa
 8006a6c:	0091      	lsls	r1, r2, #2
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7f9 fb5a 	bl	8000128 <__udivsi3>
 8006a74:	0003      	movs	r3, r0
 8006a76:	210a      	movs	r1, #10
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7f9 fbdb 	bl	8000234 <__aeabi_uidivmod>
 8006a7e:	000b      	movs	r3, r1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	3330      	adds	r3, #48	@ 0x30
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	4b26      	ldr	r3, [pc, #152]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006a88:	709a      	strb	r2, [r3, #2]
	v_value[3] = (Final_price /100 % 10) + 0x30;
 8006a8a:	4b23      	ldr	r3, [pc, #140]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2164      	movs	r1, #100	@ 0x64
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7f9 fb49 	bl	8000128 <__udivsi3>
 8006a96:	0003      	movs	r3, r0
 8006a98:	210a      	movs	r1, #10
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7f9 fbca 	bl	8000234 <__aeabi_uidivmod>
 8006aa0:	000b      	movs	r3, r1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	3330      	adds	r3, #48	@ 0x30
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006aaa:	70da      	strb	r2, [r3, #3]
	v_value[4] = (Final_price /10 % 10) + 0x30;
 8006aac:	4b1a      	ldr	r3, [pc, #104]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	210a      	movs	r1, #10
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7f9 fb38 	bl	8000128 <__udivsi3>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	210a      	movs	r1, #10
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7f9 fbb9 	bl	8000234 <__aeabi_uidivmod>
 8006ac2:	000b      	movs	r3, r1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3330      	adds	r3, #48	@ 0x30
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006acc:	711a      	strb	r2, [r3, #4]
	v_value[5] = (Final_price /1 % 10) + 0x30;
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <HMI_Stop_W+0xed0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	210a      	movs	r1, #10
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f7f9 fbad 	bl	8000234 <__aeabi_uidivmod>
 8006ada:	000b      	movs	r3, r1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	3330      	adds	r3, #48	@ 0x30
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006ae4:	715a      	strb	r2, [r3, #5]
	if(Addition == 0)
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b14 <HMI_Stop_W+0xecc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11a      	bne.n	8006b24 <HMI_Stop_W+0xedc>
	{
		v_value[0] = 0;
 8006aee:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
		v_value[6] = 0;
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	719a      	strb	r2, [r3, #6]
		v_value[7] = 0;
 8006afa:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	71da      	strb	r2, [r3, #7]
		v_value[8] = 0;
 8006b00:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <HMI_Stop_W+0xed8>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	721a      	strb	r2, [r3, #8]
 8006b06:	e044      	b.n	8006b92 <HMI_Stop_W+0xf4a>
 8006b08:	20000ea8 	.word	0x20000ea8
 8006b0c:	00002710 	.word	0x00002710
 8006b10:	200034fc 	.word	0x200034fc
 8006b14:	20000b18 	.word	0x20000b18
 8006b18:	20000af4 	.word	0x20000af4
 8006b1c:	200002bc 	.word	0x200002bc
 8006b20:	20003570 	.word	0x20003570
	}
	else
	{
		v_value[0] = 1;
 8006b24:	4bcf      	ldr	r3, [pc, #828]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
		v_value[6] = (Addition /1000 % 10) + 0x30;
 8006b2a:	4bcf      	ldr	r3, [pc, #828]	@ (8006e68 <HMI_Stop_W+0x1220>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	22fa      	movs	r2, #250	@ 0xfa
 8006b30:	0091      	lsls	r1, r2, #2
 8006b32:	0018      	movs	r0, r3
 8006b34:	f7f9 faf8 	bl	8000128 <__udivsi3>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	210a      	movs	r1, #10
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7f9 fb79 	bl	8000234 <__aeabi_uidivmod>
 8006b42:	000b      	movs	r3, r1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3330      	adds	r3, #48	@ 0x30
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4bc6      	ldr	r3, [pc, #792]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006b4c:	719a      	strb	r2, [r3, #6]
		v_value[7] = (Addition /100 % 10) + 0x30;
 8006b4e:	4bc6      	ldr	r3, [pc, #792]	@ (8006e68 <HMI_Stop_W+0x1220>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2164      	movs	r1, #100	@ 0x64
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7f9 fae7 	bl	8000128 <__udivsi3>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	210a      	movs	r1, #10
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7f9 fb68 	bl	8000234 <__aeabi_uidivmod>
 8006b64:	000b      	movs	r3, r1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	3330      	adds	r3, #48	@ 0x30
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	4bbd      	ldr	r3, [pc, #756]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006b6e:	71da      	strb	r2, [r3, #7]
		v_value[8] = (Addition /10 % 10) + 0x30;
 8006b70:	4bbd      	ldr	r3, [pc, #756]	@ (8006e68 <HMI_Stop_W+0x1220>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	210a      	movs	r1, #10
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7f9 fad6 	bl	8000128 <__udivsi3>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	210a      	movs	r1, #10
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7f9 fb57 	bl	8000234 <__aeabi_uidivmod>
 8006b86:	000b      	movs	r3, r1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3330      	adds	r3, #48	@ 0x30
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	4bb5      	ldr	r3, [pc, #724]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006b90:	721a      	strb	r2, [r3, #8]
	}
	//audio end
	if (((Flag_Audio_end==1) || (Flag_btn_changed==1)) && (Flag_Audio_end!=48))
 8006b92:	4bb6      	ldr	r3, [pc, #728]	@ (8006e6c <HMI_Stop_W+0x1224>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d004      	beq.n	8006ba4 <HMI_Stop_W+0xf5c>
 8006b9a:	4bb5      	ldr	r3, [pc, #724]	@ (8006e70 <HMI_Stop_W+0x1228>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d000      	beq.n	8006ba4 <HMI_Stop_W+0xf5c>
 8006ba2:	e0ea      	b.n	8006d7a <HMI_Stop_W+0x1132>
 8006ba4:	4bb1      	ldr	r3, [pc, #708]	@ (8006e6c <HMI_Stop_W+0x1224>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b30      	cmp	r3, #48	@ 0x30
 8006baa:	d100      	bne.n	8006bae <HMI_Stop_W+0xf66>
 8006bac:	e0e5      	b.n	8006d7a <HMI_Stop_W+0x1132>
	{
		Flag_Audio_end = 0; 
 8006bae:	4baf      	ldr	r3, [pc, #700]	@ (8006e6c <HMI_Stop_W+0x1224>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
		Flag_Audio_start = 1; 
 8006bb4:	4baf      	ldr	r3, [pc, #700]	@ (8006e74 <HMI_Stop_W+0x122c>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
		Flag_btn_changed = 0; 
 8006bba:	4bad      	ldr	r3, [pc, #692]	@ (8006e70 <HMI_Stop_W+0x1228>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]

		if (btn_value == 1)
 8006bc0:	4bad      	ldr	r3, [pc, #692]	@ (8006e78 <HMI_Stop_W+0x1230>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d140      	bne.n	8006c4a <HMI_Stop_W+0x1002>
		{
			cal_vcan(v_value, result);
 8006bc8:	4aac      	ldr	r2, [pc, #688]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006bca:	4ba6      	ldr	r3, [pc, #664]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f005 fa5e 	bl	800c090 <cal_vcan>
			v_can_end[2] = result[0] + 2;
 8006bd4:	4ba9      	ldr	r3, [pc, #676]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	4ba8      	ldr	r3, [pc, #672]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006bde:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 8006be0:	4ba8      	ldr	r3, [pc, #672]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	e00f      	b.n	8006c08 <HMI_Stop_W+0xfc0>
			{
				v_can_end[i+5] = result[i+1];
 8006be8:	4ba6      	ldr	r3, [pc, #664]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	4ba5      	ldr	r3, [pc, #660]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	3305      	adds	r3, #5
 8006bf4:	49a1      	ldr	r1, [pc, #644]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006bf6:	5c89      	ldrb	r1, [r1, r2]
 8006bf8:	4aa1      	ldr	r2, [pc, #644]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006bfa:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 8006bfc:	4ba1      	ldr	r3, [pc, #644]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	4b9f      	ldr	r3, [pc, #636]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	4b9c      	ldr	r3, [pc, #624]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	4b9d      	ldr	r3, [pc, #628]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8e8      	bhi.n	8006be8 <HMI_Stop_W+0xfa0>
			}
			v_can_end[v_can_end[2] + 3] = checksum_8bit(v_can_end, (v_can_end[2] + 3));
 8006c16:	4b9a      	ldr	r3, [pc, #616]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006c18:	789b      	ldrb	r3, [r3, #2]
 8006c1a:	1cda      	adds	r2, r3, #3
 8006c1c:	4b98      	ldr	r3, [pc, #608]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006c1e:	789b      	ldrb	r3, [r3, #2]
 8006c20:	1cdc      	adds	r4, r3, #3
 8006c22:	4b97      	ldr	r3, [pc, #604]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f001 fc18 	bl	800845c <checksum_8bit>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	001a      	movs	r2, r3
 8006c30:	4b93      	ldr	r3, [pc, #588]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006c32:	551a      	strb	r2, [r3, r4]
			Voice_end(v_can_end);
 8006c34:	4b92      	ldr	r3, [pc, #584]	@ (8006e80 <HMI_Stop_W+0x1238>)
 8006c36:	0018      	movs	r0, r3
 8006c38:	f005 fa18 	bl	800c06c <Voice_end>
			memset(v_can_end+5,0,sizeof(unsigned char)*27);
 8006c3c:	4b92      	ldr	r3, [pc, #584]	@ (8006e88 <HMI_Stop_W+0x1240>)
 8006c3e:	221b      	movs	r2, #27
 8006c40:	2100      	movs	r1, #0
 8006c42:	0018      	movs	r0, r3
 8006c44:	f012 fa44 	bl	80190d0 <memset>
 8006c48:	e088      	b.n	8006d5c <HMI_Stop_W+0x1114>
		}
		else if (btn_value == 2)
 8006c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8006e78 <HMI_Stop_W+0x1230>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d140      	bne.n	8006cd4 <HMI_Stop_W+0x108c>
		{
			cal_vcn(v_value, result);
 8006c52:	4a8a      	ldr	r2, [pc, #552]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006c54:	4b83      	ldr	r3, [pc, #524]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006c56:	0011      	movs	r1, r2
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f005 fcd5 	bl	800c608 <cal_vcn>
			v_cn_end[2] = result[0] + 2;
 8006c5e:	4b87      	ldr	r3, [pc, #540]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	3302      	adds	r3, #2
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	4b89      	ldr	r3, [pc, #548]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006c68:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 8006c6a:	4b86      	ldr	r3, [pc, #536]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e00f      	b.n	8006c92 <HMI_Stop_W+0x104a>
			{
				v_cn_end[i+5] = result[i+1];
 8006c72:	4b84      	ldr	r3, [pc, #528]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	4b82      	ldr	r3, [pc, #520]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	3305      	adds	r3, #5
 8006c7e:	497f      	ldr	r1, [pc, #508]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006c80:	5c89      	ldrb	r1, [r1, r2]
 8006c82:	4a82      	ldr	r2, [pc, #520]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006c84:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 8006c86:	4b7f      	ldr	r3, [pc, #508]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	4b7a      	ldr	r3, [pc, #488]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	001a      	movs	r2, r3
 8006c98:	4b7a      	ldr	r3, [pc, #488]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d8e8      	bhi.n	8006c72 <HMI_Stop_W+0x102a>
			}
			v_cn_end[v_cn_end[2] + 3] = checksum_8bit(v_cn_end, (v_cn_end[2] + 3));
 8006ca0:	4b7a      	ldr	r3, [pc, #488]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006ca2:	789b      	ldrb	r3, [r3, #2]
 8006ca4:	1cda      	adds	r2, r3, #3
 8006ca6:	4b79      	ldr	r3, [pc, #484]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006ca8:	789b      	ldrb	r3, [r3, #2]
 8006caa:	1cdc      	adds	r4, r3, #3
 8006cac:	4b77      	ldr	r3, [pc, #476]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f001 fbd3 	bl	800845c <checksum_8bit>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	001a      	movs	r2, r3
 8006cba:	4b74      	ldr	r3, [pc, #464]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006cbc:	551a      	strb	r2, [r3, r4]
			Voice_end(v_cn_end);
 8006cbe:	4b73      	ldr	r3, [pc, #460]	@ (8006e8c <HMI_Stop_W+0x1244>)
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f005 f9d3 	bl	800c06c <Voice_end>
			memset(v_cn_end+5,0,sizeof(unsigned char)*27);
 8006cc6:	4b72      	ldr	r3, [pc, #456]	@ (8006e90 <HMI_Stop_W+0x1248>)
 8006cc8:	221b      	movs	r2, #27
 8006cca:	2100      	movs	r1, #0
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f012 f9ff 	bl	80190d0 <memset>
 8006cd2:	e043      	b.n	8006d5c <HMI_Stop_W+0x1114>
		}
		else if (btn_value == 3)
 8006cd4:	4b68      	ldr	r3, [pc, #416]	@ (8006e78 <HMI_Stop_W+0x1230>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d13f      	bne.n	8006d5c <HMI_Stop_W+0x1114>
		{
			cal_ven(v_value, result);
 8006cdc:	4a67      	ldr	r2, [pc, #412]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006cde:	4b61      	ldr	r3, [pc, #388]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006ce0:	0011      	movs	r1, r2
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f005 ff4c 	bl	800cb80 <cal_ven>
			v_en_end[2] = result[0] + 2;
 8006ce8:	4b64      	ldr	r3, [pc, #400]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	3302      	adds	r3, #2
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	4b68      	ldr	r3, [pc, #416]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006cf2:	709a      	strb	r2, [r3, #2]
			for (i=0; i<result[0]; i++)
 8006cf4:	4b63      	ldr	r3, [pc, #396]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e00f      	b.n	8006d1c <HMI_Stop_W+0x10d4>
			{
				v_en_end[i+5] = result[i+1];
 8006cfc:	4b61      	ldr	r3, [pc, #388]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	4b60      	ldr	r3, [pc, #384]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	3305      	adds	r3, #5
 8006d08:	495c      	ldr	r1, [pc, #368]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006d0a:	5c89      	ldrb	r1, [r1, r2]
 8006d0c:	4a61      	ldr	r2, [pc, #388]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d0e:	54d1      	strb	r1, [r2, r3]
			for (i=0; i<result[0]; i++)
 8006d10:	4b5c      	ldr	r3, [pc, #368]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	4b5a      	ldr	r3, [pc, #360]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	4b57      	ldr	r3, [pc, #348]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	001a      	movs	r2, r3
 8006d22:	4b58      	ldr	r3, [pc, #352]	@ (8006e84 <HMI_Stop_W+0x123c>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d8e8      	bhi.n	8006cfc <HMI_Stop_W+0x10b4>
			}
			v_en_end[v_en_end[2] + 3] = checksum_8bit(v_en_end, (v_en_end[2] + 3));
 8006d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d2c:	789b      	ldrb	r3, [r3, #2]
 8006d2e:	1cda      	adds	r2, r3, #3
 8006d30:	4b58      	ldr	r3, [pc, #352]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d32:	789b      	ldrb	r3, [r3, #2]
 8006d34:	1cdc      	adds	r4, r3, #3
 8006d36:	4b57      	ldr	r3, [pc, #348]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d38:	0011      	movs	r1, r2
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f001 fb8e 	bl	800845c <checksum_8bit>
 8006d40:	0003      	movs	r3, r0
 8006d42:	001a      	movs	r2, r3
 8006d44:	4b53      	ldr	r3, [pc, #332]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d46:	551a      	strb	r2, [r3, r4]
			Voice_end(v_en_end);
 8006d48:	4b52      	ldr	r3, [pc, #328]	@ (8006e94 <HMI_Stop_W+0x124c>)
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f005 f98e 	bl	800c06c <Voice_end>
			memset(v_en_end+5,0,sizeof(unsigned char)*27);
 8006d50:	4b51      	ldr	r3, [pc, #324]	@ (8006e98 <HMI_Stop_W+0x1250>)
 8006d52:	221b      	movs	r2, #27
 8006d54:	2100      	movs	r1, #0
 8006d56:	0018      	movs	r0, r3
 8006d58:	f012 f9ba 	bl	80190d0 <memset>
		}
		memset(v_value, 0, sizeof(unsigned char)*9);
 8006d5c:	4b41      	ldr	r3, [pc, #260]	@ (8006e64 <HMI_Stop_W+0x121c>)
 8006d5e:	2209      	movs	r2, #9
 8006d60:	2100      	movs	r1, #0
 8006d62:	0018      	movs	r0, r3
 8006d64:	f012 f9b4 	bl	80190d0 <memset>
		memset(result, 0, sizeof(unsigned char)*26);
 8006d68:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <HMI_Stop_W+0x1234>)
 8006d6a:	221a      	movs	r2, #26
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f012 f9ae 	bl	80190d0 <memset>
		Flag_Audio_end = 0;
 8006d74:	4b3d      	ldr	r3, [pc, #244]	@ (8006e6c <HMI_Stop_W+0x1224>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
	}

	//record last final price
	Last_Final_price = Final_price;
 8006d7a:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <HMI_Stop_W+0x1254>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b48      	ldr	r3, [pc, #288]	@ (8006ea0 <HMI_Stop_W+0x1258>)
 8006d80:	601a      	str	r2, [r3, #0]
	Last_Final_price_x10 = Final_price_x10;
 8006d82:	4b48      	ldr	r3, [pc, #288]	@ (8006ea4 <HMI_Stop_W+0x125c>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b48      	ldr	r3, [pc, #288]	@ (8006ea8 <HMI_Stop_W+0x1260>)
 8006d88:	601a      	str	r2, [r3, #0]
	//change
	Last_fare_d_x100 = fare_d_x100;
 8006d8a:	4b48      	ldr	r3, [pc, #288]	@ (8006eac <HMI_Stop_W+0x1264>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b48      	ldr	r3, [pc, #288]	@ (8006eb0 <HMI_Stop_W+0x1268>)
 8006d90:	601a      	str	r2, [r3, #0]
	ex_Addition = Addition;
 8006d92:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <HMI_Stop_W+0x1220>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HMI_Stop_W+0x126c>)
 8006d98:	601a      	str	r2, [r3, #0]
	Last_Dis = Dis;
 8006d9a:	4b47      	ldr	r3, [pc, #284]	@ (8006eb8 <HMI_Stop_W+0x1270>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b47      	ldr	r3, [pc, #284]	@ (8006ebc <HMI_Stop_W+0x1274>)
 8006da0:	601a      	str	r2, [r3, #0]

	//transfer pick-up time (transfer only one time, Flag_Tbox_Start changed in S_to_V status)
	if(Flag_Tbox_Start)
 8006da2:	4b47      	ldr	r3, [pc, #284]	@ (8006ec0 <HMI_Stop_W+0x1278>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d100      	bne.n	8006dac <HMI_Stop_W+0x1164>
 8006daa:	e106      	b.n	8006fba <HMI_Stop_W+0x1372>
	{
		Flag_Tbox_Start = FALSE;
 8006dac:	4b44      	ldr	r3, [pc, #272]	@ (8006ec0 <HMI_Stop_W+0x1278>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = TRUE;
 8006db2:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <HMI_Stop_W+0x127c>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
		tbox_start();
 8006db8:	f001 fbbc 	bl	8008534 <tbox_start>
		flag_count = 1;
 8006dbc:	4b42      	ldr	r3, [pc, #264]	@ (8006ec8 <HMI_Stop_W+0x1280>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
		E_read();
 8006dc2:	f004 fb87 	bl	800b4d4 <E_read>
		//non business time
		nbtime_d = ((nbtime_counter / 60.0)* 1000) / 10; //changed
 8006dc6:	4b41      	ldr	r3, [pc, #260]	@ (8006ecc <HMI_Stop_W+0x1284>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7fc fa32 	bl	8003234 <__aeabi_ui2d>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed0 <HMI_Stop_W+0x1288>)
 8006dd4:	f7fa ff1c 	bl	8001c10 <__aeabi_ddiv>
 8006dd8:	0002      	movs	r2, r0
 8006dda:	000b      	movs	r3, r1
 8006ddc:	0010      	movs	r0, r2
 8006dde:	0019      	movs	r1, r3
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed4 <HMI_Stop_W+0x128c>)
 8006de4:	f7fb fb58 	bl	8002498 <__aeabi_dmul>
 8006de8:	0002      	movs	r2, r0
 8006dea:	000b      	movs	r3, r1
 8006dec:	0010      	movs	r0, r2
 8006dee:	0019      	movs	r1, r3
 8006df0:	2200      	movs	r2, #0
 8006df2:	4b39      	ldr	r3, [pc, #228]	@ (8006ed8 <HMI_Stop_W+0x1290>)
 8006df4:	f7fa ff0c 	bl	8001c10 <__aeabi_ddiv>
 8006df8:	0002      	movs	r2, r0
 8006dfa:	000b      	movs	r3, r1
 8006dfc:	0010      	movs	r0, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	f7f9 fbb8 	bl	8000574 <__aeabi_d2uiz>
 8006e04:	0002      	movs	r2, r0
 8006e06:	4b35      	ldr	r3, [pc, #212]	@ (8006edc <HMI_Stop_W+0x1294>)
 8006e08:	601a      	str	r2, [r3, #0]
		Dec2ASC(nbtime_d, nbtime);
 8006e0a:	4b34      	ldr	r3, [pc, #208]	@ (8006edc <HMI_Stop_W+0x1294>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a34      	ldr	r2, [pc, #208]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e10:	0011      	movs	r1, r2
 8006e12:	0018      	movs	r0, r3
 8006e14:	f004 faee 	bl	800b3f4 <Dec2ASC>
		if (nbtime[2] == 0x30)
 8006e18:	4b31      	ldr	r3, [pc, #196]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	2b30      	cmp	r3, #48	@ 0x30
 8006e1e:	d104      	bne.n	8006e2a <HMI_Stop_W+0x11e2>
			SD_buffer[82] = 0x20;
 8006e20:	4b30      	ldr	r3, [pc, #192]	@ (8006ee4 <HMI_Stop_W+0x129c>)
 8006e22:	2252      	movs	r2, #82	@ 0x52
 8006e24:	2120      	movs	r1, #32
 8006e26:	5499      	strb	r1, [r3, r2]
 8006e28:	e004      	b.n	8006e34 <HMI_Stop_W+0x11ec>
		else
			SD_buffer[82] = nbtime[2];
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e2c:	7899      	ldrb	r1, [r3, #2]
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee4 <HMI_Stop_W+0x129c>)
 8006e30:	2252      	movs	r2, #82	@ 0x52
 8006e32:	5499      	strb	r1, [r3, r2]
		if (nbtime[3] == 0x30)
 8006e34:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	2b30      	cmp	r3, #48	@ 0x30
 8006e3a:	d104      	bne.n	8006e46 <HMI_Stop_W+0x11fe>
			SD_buffer[83] = 0x20;
 8006e3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ee4 <HMI_Stop_W+0x129c>)
 8006e3e:	2253      	movs	r2, #83	@ 0x53
 8006e40:	2120      	movs	r1, #32
 8006e42:	5499      	strb	r1, [r3, r2]
 8006e44:	e004      	b.n	8006e50 <HMI_Stop_W+0x1208>
		else
			SD_buffer[83] = nbtime[3];
 8006e46:	4b26      	ldr	r3, [pc, #152]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e48:	78d9      	ldrb	r1, [r3, #3]
 8006e4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ee4 <HMI_Stop_W+0x129c>)
 8006e4c:	2253      	movs	r2, #83	@ 0x53
 8006e4e:	5499      	strb	r1, [r3, r2]
		if (nbtime[4] == 0x30)
 8006e50:	4b23      	ldr	r3, [pc, #140]	@ (8006ee0 <HMI_Stop_W+0x1298>)
 8006e52:	791b      	ldrb	r3, [r3, #4]
 8006e54:	2b30      	cmp	r3, #48	@ 0x30
 8006e56:	d147      	bne.n	8006ee8 <HMI_Stop_W+0x12a0>
			SD_buffer[84] = 0x20;
 8006e58:	4b22      	ldr	r3, [pc, #136]	@ (8006ee4 <HMI_Stop_W+0x129c>)
 8006e5a:	2254      	movs	r2, #84	@ 0x54
 8006e5c:	2120      	movs	r1, #32
 8006e5e:	5499      	strb	r1, [r3, r2]
 8006e60:	e047      	b.n	8006ef2 <HMI_Stop_W+0x12aa>
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	20003570 	.word	0x20003570
 8006e68:	20000b18 	.word	0x20000b18
 8006e6c:	20003596 	.word	0x20003596
 8006e70:	20003597 	.word	0x20003597
 8006e74:	20000538 	.word	0x20000538
 8006e78:	20003598 	.word	0x20003598
 8006e7c:	2000357c 	.word	0x2000357c
 8006e80:	200004d8 	.word	0x200004d8
 8006e84:	20000ce4 	.word	0x20000ce4
 8006e88:	200004dd 	.word	0x200004dd
 8006e8c:	200004f8 	.word	0x200004f8
 8006e90:	200004fd 	.word	0x200004fd
 8006e94:	20000518 	.word	0x20000518
 8006e98:	2000051d 	.word	0x2000051d
 8006e9c:	20000af4 	.word	0x20000af4
 8006ea0:	20000af8 	.word	0x20000af8
 8006ea4:	20000bd8 	.word	0x20000bd8
 8006ea8:	20000afc 	.word	0x20000afc
 8006eac:	20000eac 	.word	0x20000eac
 8006eb0:	20000eb0 	.word	0x20000eb0
 8006eb4:	20000b00 	.word	0x20000b00
 8006eb8:	20000b0c 	.word	0x20000b0c
 8006ebc:	20000b10 	.word	0x20000b10
 8006ec0:	200002cb 	.word	0x200002cb
 8006ec4:	20000be8 	.word	0x20000be8
 8006ec8:	20001014 	.word	0x20001014
 8006ecc:	20001018 	.word	0x20001018
 8006ed0:	404e0000 	.word	0x404e0000
 8006ed4:	408f4000 	.word	0x408f4000
 8006ed8:	40240000 	.word	0x40240000
 8006edc:	2000100c 	.word	0x2000100c
 8006ee0:	2000106c 	.word	0x2000106c
 8006ee4:	200034fc 	.word	0x200034fc
		else
			SD_buffer[84] = nbtime[4];
 8006ee8:	4bbc      	ldr	r3, [pc, #752]	@ (80071dc <HMI_Stop_W+0x1594>)
 8006eea:	7919      	ldrb	r1, [r3, #4]
 8006eec:	4bbc      	ldr	r3, [pc, #752]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006eee:	2254      	movs	r2, #84	@ 0x54
 8006ef0:	5499      	strb	r1, [r3, r2]

		SD_buffer[85] = nbtime[5];
 8006ef2:	4bba      	ldr	r3, [pc, #744]	@ (80071dc <HMI_Stop_W+0x1594>)
 8006ef4:	7959      	ldrb	r1, [r3, #5]
 8006ef6:	4bba      	ldr	r3, [pc, #744]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006ef8:	2255      	movs	r2, #85	@ 0x55
 8006efa:	5499      	strb	r1, [r3, r2]
		SD_buffer[86] = 0x2E;
 8006efc:	4bb8      	ldr	r3, [pc, #736]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006efe:	2256      	movs	r2, #86	@ 0x56
 8006f00:	212e      	movs	r1, #46	@ 0x2e
 8006f02:	5499      	strb	r1, [r3, r2]
		SD_buffer[87] = nbtime[6];
 8006f04:	4bb5      	ldr	r3, [pc, #724]	@ (80071dc <HMI_Stop_W+0x1594>)
 8006f06:	7999      	ldrb	r1, [r3, #6]
 8006f08:	4bb5      	ldr	r3, [pc, #724]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f0a:	2257      	movs	r2, #87	@ 0x57
 8006f0c:	5499      	strb	r1, [r3, r2]
		SD_buffer[88] = nbtime[7];
 8006f0e:	4bb3      	ldr	r3, [pc, #716]	@ (80071dc <HMI_Stop_W+0x1594>)
 8006f10:	79d9      	ldrb	r1, [r3, #7]
 8006f12:	4bb3      	ldr	r3, [pc, #716]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f14:	2258      	movs	r2, #88	@ 0x58
 8006f16:	5499      	strb	r1, [r3, r2]
		SD_buffer[89] = 0x20;
 8006f18:	4bb1      	ldr	r3, [pc, #708]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f1a:	2259      	movs	r2, #89	@ 0x59
 8006f1c:	2120      	movs	r1, #32
 8006f1e:	5499      	strb	r1, [r3, r2]
		nbtime_counter = 0;
 8006f20:	4bb0      	ldr	r3, [pc, #704]	@ (80071e4 <HMI_Stop_W+0x159c>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
		//start date time
		SD_buffer[14] = 0x32;
 8006f26:	4bae      	ldr	r3, [pc, #696]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f28:	2232      	movs	r2, #50	@ 0x32
 8006f2a:	739a      	strb	r2, [r3, #14]
		SD_buffer[15] = 0x30;
 8006f2c:	4bac      	ldr	r3, [pc, #688]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f2e:	2230      	movs	r2, #48	@ 0x30
 8006f30:	73da      	strb	r2, [r3, #15]
		SD_buffer[16] = hmi_rtc[8];
 8006f32:	4bad      	ldr	r3, [pc, #692]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f34:	7a1a      	ldrb	r2, [r3, #8]
 8006f36:	4baa      	ldr	r3, [pc, #680]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f38:	741a      	strb	r2, [r3, #16]
		SD_buffer[17] = hmi_rtc[9];
 8006f3a:	4bab      	ldr	r3, [pc, #684]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f3c:	7a5a      	ldrb	r2, [r3, #9]
 8006f3e:	4ba8      	ldr	r3, [pc, #672]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f40:	745a      	strb	r2, [r3, #17]
		SD_buffer[18] = 0x2D;
 8006f42:	4ba7      	ldr	r3, [pc, #668]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f44:	222d      	movs	r2, #45	@ 0x2d
 8006f46:	749a      	strb	r2, [r3, #18]
		SD_buffer[19] = hmi_rtc[11];
 8006f48:	4ba7      	ldr	r3, [pc, #668]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f4a:	7ada      	ldrb	r2, [r3, #11]
 8006f4c:	4ba4      	ldr	r3, [pc, #656]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f4e:	74da      	strb	r2, [r3, #19]
		SD_buffer[20] = hmi_rtc[12];
 8006f50:	4ba5      	ldr	r3, [pc, #660]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f52:	7b1a      	ldrb	r2, [r3, #12]
 8006f54:	4ba2      	ldr	r3, [pc, #648]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f56:	751a      	strb	r2, [r3, #20]
		SD_buffer[21] = 0x2D;
 8006f58:	4ba1      	ldr	r3, [pc, #644]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f5a:	222d      	movs	r2, #45	@ 0x2d
 8006f5c:	755a      	strb	r2, [r3, #21]
		SD_buffer[22] = hmi_rtc[14];
 8006f5e:	4ba2      	ldr	r3, [pc, #648]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f60:	7b9a      	ldrb	r2, [r3, #14]
 8006f62:	4b9f      	ldr	r3, [pc, #636]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f64:	759a      	strb	r2, [r3, #22]
		SD_buffer[23] = hmi_rtc[15];
 8006f66:	4ba0      	ldr	r3, [pc, #640]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f68:	7bda      	ldrb	r2, [r3, #15]
 8006f6a:	4b9d      	ldr	r3, [pc, #628]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f6c:	75da      	strb	r2, [r3, #23]
		SD_buffer[24] = 0x20;
 8006f6e:	4b9c      	ldr	r3, [pc, #624]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f70:	2220      	movs	r2, #32
 8006f72:	761a      	strb	r2, [r3, #24]
		SD_buffer[25] = hmi_rtc[17];
 8006f74:	4b9c      	ldr	r3, [pc, #624]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f76:	7c5a      	ldrb	r2, [r3, #17]
 8006f78:	4b99      	ldr	r3, [pc, #612]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f7a:	765a      	strb	r2, [r3, #25]
		SD_buffer[26] = hmi_rtc[18];
 8006f7c:	4b9a      	ldr	r3, [pc, #616]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f7e:	7c9a      	ldrb	r2, [r3, #18]
 8006f80:	4b97      	ldr	r3, [pc, #604]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f82:	769a      	strb	r2, [r3, #26]
		SD_buffer[27] = 0x3A;
 8006f84:	4b96      	ldr	r3, [pc, #600]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f86:	223a      	movs	r2, #58	@ 0x3a
 8006f88:	76da      	strb	r2, [r3, #27]
		SD_buffer[28] = hmi_rtc[20];
 8006f8a:	4b97      	ldr	r3, [pc, #604]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f8c:	7d1a      	ldrb	r2, [r3, #20]
 8006f8e:	4b94      	ldr	r3, [pc, #592]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f90:	771a      	strb	r2, [r3, #28]
		SD_buffer[29] = hmi_rtc[21];
 8006f92:	4b95      	ldr	r3, [pc, #596]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006f94:	7d5a      	ldrb	r2, [r3, #21]
 8006f96:	4b92      	ldr	r3, [pc, #584]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f98:	775a      	strb	r2, [r3, #29]
		SD_buffer[30] = 0x3A;
 8006f9a:	4b91      	ldr	r3, [pc, #580]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006f9c:	223a      	movs	r2, #58	@ 0x3a
 8006f9e:	779a      	strb	r2, [r3, #30]
		SD_buffer[31] = hmi_rtc[23];
 8006fa0:	4b91      	ldr	r3, [pc, #580]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006fa2:	7dda      	ldrb	r2, [r3, #23]
 8006fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006fa6:	77da      	strb	r2, [r3, #31]
		SD_buffer[32] = hmi_rtc[24];
 8006fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80071e8 <HMI_Stop_W+0x15a0>)
 8006faa:	7e19      	ldrb	r1, [r3, #24]
 8006fac:	4b8c      	ldr	r3, [pc, #560]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006fae:	2220      	movs	r2, #32
 8006fb0:	5499      	strb	r1, [r3, r2]
		SD_buffer[33] = 0x20;
 8006fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80071e0 <HMI_Stop_W+0x1598>)
 8006fb4:	2221      	movs	r2, #33	@ 0x21
 8006fb6:	2120      	movs	r1, #32
 8006fb8:	5499      	strb	r1, [r3, r2]
	}

	printer_rd();
 8006fba:	f000 ffed 	bl	8007f98 <printer_rd>

	unsigned char Dis_x10_A[4];
	Dis_x10 = Dis * 10;                   //distance
 8006fbe:	4b8b      	ldr	r3, [pc, #556]	@ (80071ec <HMI_Stop_W+0x15a4>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	0013      	movs	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	001a      	movs	r2, r3
 8006fcc:	4b88      	ldr	r3, [pc, #544]	@ (80071f0 <HMI_Stop_W+0x15a8>)
 8006fce:	601a      	str	r2, [r3, #0]
	Long_to_byte(Dis_x10, Dis_x10_A);
 8006fd0:	4b87      	ldr	r3, [pc, #540]	@ (80071f0 <HMI_Stop_W+0x15a8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2474      	movs	r4, #116	@ 0x74
 8006fd6:	193a      	adds	r2, r7, r4
 8006fd8:	0011      	movs	r1, r2
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f001 f98a 	bl	80082f4 <Long_to_byte>
	data2[0] = Dis_x10_A[0];
 8006fe0:	0021      	movs	r1, r4
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	4b83      	ldr	r3, [pc, #524]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8006fe8:	701a      	strb	r2, [r3, #0]
	data2[1] = Dis_x10_A[1];
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	785a      	ldrb	r2, [r3, #1]
 8006fee:	4b81      	ldr	r3, [pc, #516]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8006ff0:	705a      	strb	r2, [r3, #1]
	data2[2] = Dis_x10_A[2];
 8006ff2:	187b      	adds	r3, r7, r1
 8006ff4:	789a      	ldrb	r2, [r3, #2]
 8006ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8006ff8:	709a      	strb	r2, [r3, #2]
	data2[3] = Dis_x10_A[3];
 8006ffa:	187b      	adds	r3, r7, r1
 8006ffc:	78da      	ldrb	r2, [r3, #3]
 8006ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007000:	70da      	strb	r2, [r3, #3]
	//total_fare - 4 bytes
	unsigned char Final_price_x10_A[4];
	Final_price_x10 = Final_price * 10;
 8007002:	4b7d      	ldr	r3, [pc, #500]	@ (80071f8 <HMI_Stop_W+0x15b0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	0013      	movs	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	189b      	adds	r3, r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	001a      	movs	r2, r3
 8007010:	4b7a      	ldr	r3, [pc, #488]	@ (80071fc <HMI_Stop_W+0x15b4>)
 8007012:	601a      	str	r2, [r3, #0]
	Long_to_byte(Final_price_x10, Final_price_x10_A);
 8007014:	4b79      	ldr	r3, [pc, #484]	@ (80071fc <HMI_Stop_W+0x15b4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2470      	movs	r4, #112	@ 0x70
 800701a:	193a      	adds	r2, r7, r4
 800701c:	0011      	movs	r1, r2
 800701e:	0018      	movs	r0, r3
 8007020:	f001 f968 	bl	80082f4 <Long_to_byte>
	data2[4] = Final_price_x10_A[0];
 8007024:	0021      	movs	r1, r4
 8007026:	187b      	adds	r3, r7, r1
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	4b72      	ldr	r3, [pc, #456]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800702c:	711a      	strb	r2, [r3, #4]
	data2[5] = Final_price_x10_A[1];
 800702e:	187b      	adds	r3, r7, r1
 8007030:	785a      	ldrb	r2, [r3, #1]
 8007032:	4b70      	ldr	r3, [pc, #448]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007034:	715a      	strb	r2, [r3, #5]
	data2[6] = Final_price_x10_A[2];
 8007036:	187b      	adds	r3, r7, r1
 8007038:	789a      	ldrb	r2, [r3, #2]
 800703a:	4b6e      	ldr	r3, [pc, #440]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800703c:	719a      	strb	r2, [r3, #6]
	data2[7] = Final_price_x10_A[3];
 800703e:	187b      	adds	r3, r7, r1
 8007040:	78da      	ldrb	r2, [r3, #3]
 8007042:	4b6c      	ldr	r3, [pc, #432]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007044:	71da      	strb	r2, [r3, #7]
	//end - 6 bytes
	RTC_date = PCF2129_getDate();
 8007046:	4c6e      	ldr	r4, [pc, #440]	@ (8007200 <HMI_Stop_W+0x15b8>)
 8007048:	003b      	movs	r3, r7
 800704a:	0018      	movs	r0, r3
 800704c:	f006 f8ba 	bl	800d1c4 <PCF2129_getDate>
 8007050:	003b      	movs	r3, r7
 8007052:	0020      	movs	r0, r4
 8007054:	0019      	movs	r1, r3
 8007056:	2358      	movs	r3, #88	@ 0x58
 8007058:	001a      	movs	r2, r3
 800705a:	f012 f86d 	bl	8019138 <memcpy>
	year = RTC_date.date.y;
 800705e:	4b68      	ldr	r3, [pc, #416]	@ (8007200 <HMI_Stop_W+0x15b8>)
 8007060:	224d      	movs	r2, #77	@ 0x4d
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	001a      	movs	r2, r3
 8007066:	4b67      	ldr	r3, [pc, #412]	@ (8007204 <HMI_Stop_W+0x15bc>)
 8007068:	801a      	strh	r2, [r3, #0]
	data2[8] = (uint8_t)(year & 0xFF);
 800706a:	4b66      	ldr	r3, [pc, #408]	@ (8007204 <HMI_Stop_W+0x15bc>)
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	4b60      	ldr	r3, [pc, #384]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007072:	721a      	strb	r2, [r3, #8]
	month = RTC_date.date.m;
 8007074:	4b62      	ldr	r3, [pc, #392]	@ (8007200 <HMI_Stop_W+0x15b8>)
 8007076:	224e      	movs	r2, #78	@ 0x4e
 8007078:	5c9b      	ldrb	r3, [r3, r2]
 800707a:	001a      	movs	r2, r3
 800707c:	4b62      	ldr	r3, [pc, #392]	@ (8007208 <HMI_Stop_W+0x15c0>)
 800707e:	801a      	strh	r2, [r3, #0]
	data2[9] = (uint8_t)(month & 0xFF);
 8007080:	4b61      	ldr	r3, [pc, #388]	@ (8007208 <HMI_Stop_W+0x15c0>)
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4b5b      	ldr	r3, [pc, #364]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007088:	725a      	strb	r2, [r3, #9]
	day = RTC_date.date.d;
 800708a:	4b5d      	ldr	r3, [pc, #372]	@ (8007200 <HMI_Stop_W+0x15b8>)
 800708c:	224f      	movs	r2, #79	@ 0x4f
 800708e:	5c9b      	ldrb	r3, [r3, r2]
 8007090:	001a      	movs	r2, r3
 8007092:	4b5e      	ldr	r3, [pc, #376]	@ (800720c <HMI_Stop_W+0x15c4>)
 8007094:	801a      	strh	r2, [r3, #0]
	data2[10] = (uint8_t)(day & 0xFF);
 8007096:	4b5d      	ldr	r3, [pc, #372]	@ (800720c <HMI_Stop_W+0x15c4>)
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b2da      	uxtb	r2, r3
 800709c:	4b55      	ldr	r3, [pc, #340]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800709e:	729a      	strb	r2, [r3, #10]
	hour = RTC_date.date.hh;
 80070a0:	4b57      	ldr	r3, [pc, #348]	@ (8007200 <HMI_Stop_W+0x15b8>)
 80070a2:	2251      	movs	r2, #81	@ 0x51
 80070a4:	5c9b      	ldrb	r3, [r3, r2]
 80070a6:	001a      	movs	r2, r3
 80070a8:	4b59      	ldr	r3, [pc, #356]	@ (8007210 <HMI_Stop_W+0x15c8>)
 80070aa:	801a      	strh	r2, [r3, #0]
	data2[11] = (uint8_t)(hour & 0xFF);
 80070ac:	4b58      	ldr	r3, [pc, #352]	@ (8007210 <HMI_Stop_W+0x15c8>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80070b4:	72da      	strb	r2, [r3, #11]
	minute = RTC_date.date.mm;
 80070b6:	4b52      	ldr	r3, [pc, #328]	@ (8007200 <HMI_Stop_W+0x15b8>)
 80070b8:	2252      	movs	r2, #82	@ 0x52
 80070ba:	5c9b      	ldrb	r3, [r3, r2]
 80070bc:	001a      	movs	r2, r3
 80070be:	4b55      	ldr	r3, [pc, #340]	@ (8007214 <HMI_Stop_W+0x15cc>)
 80070c0:	801a      	strh	r2, [r3, #0]
	data2[12] = (uint8_t)(minute & 0xFF);
 80070c2:	4b54      	ldr	r3, [pc, #336]	@ (8007214 <HMI_Stop_W+0x15cc>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	4b4a      	ldr	r3, [pc, #296]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80070ca:	731a      	strb	r2, [r3, #12]
	second = RTC_date.date.ss;
 80070cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007200 <HMI_Stop_W+0x15b8>)
 80070ce:	2253      	movs	r2, #83	@ 0x53
 80070d0:	5c9b      	ldrb	r3, [r3, r2]
 80070d2:	001a      	movs	r2, r3
 80070d4:	4b50      	ldr	r3, [pc, #320]	@ (8007218 <HMI_Stop_W+0x15d0>)
 80070d6:	801a      	strh	r2, [r3, #0]
	data2[13] = (uint8_t)(second & 0xFF);
 80070d8:	4b4f      	ldr	r3, [pc, #316]	@ (8007218 <HMI_Stop_W+0x15d0>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	4b45      	ldr	r3, [pc, #276]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80070e0:	735a      	strb	r2, [r3, #13]

	//paid_km - 4 bytes
	fare_km_x100 = (int)(fare_km * 100);
 80070e2:	4b4e      	ldr	r3, [pc, #312]	@ (800721c <HMI_Stop_W+0x15d4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	494e      	ldr	r1, [pc, #312]	@ (8007220 <HMI_Stop_W+0x15d8>)
 80070e8:	1c18      	adds	r0, r3, #0
 80070ea:	f7f9 fe9d 	bl	8000e28 <__aeabi_fmul>
 80070ee:	1c03      	adds	r3, r0, #0
 80070f0:	1c18      	adds	r0, r3, #0
 80070f2:	f7fa f97b 	bl	80013ec <__aeabi_f2iz>
 80070f6:	0003      	movs	r3, r0
 80070f8:	001a      	movs	r2, r3
 80070fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007224 <HMI_Stop_W+0x15dc>)
 80070fc:	601a      	str	r2, [r3, #0]
	unsigned char temp[4];
	Long_to_byte(fare_km_x100, temp);
 80070fe:	4b49      	ldr	r3, [pc, #292]	@ (8007224 <HMI_Stop_W+0x15dc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	246c      	movs	r4, #108	@ 0x6c
 8007104:	193a      	adds	r2, r7, r4
 8007106:	0011      	movs	r1, r2
 8007108:	0018      	movs	r0, r3
 800710a:	f001 f8f3 	bl	80082f4 <Long_to_byte>
	data2[14] = temp[0];
 800710e:	0021      	movs	r1, r4
 8007110:	187b      	adds	r3, r7, r1
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007116:	739a      	strb	r2, [r3, #14]
	data2[15] = temp[1];
 8007118:	187b      	adds	r3, r7, r1
 800711a:	785a      	ldrb	r2, [r3, #1]
 800711c:	4b35      	ldr	r3, [pc, #212]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800711e:	73da      	strb	r2, [r3, #15]
	data2[16] = temp[2];
 8007120:	187b      	adds	r3, r7, r1
 8007122:	789a      	ldrb	r2, [r3, #2]
 8007124:	4b33      	ldr	r3, [pc, #204]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007126:	741a      	strb	r2, [r3, #16]
	data2[17] = temp[3];
 8007128:	187b      	adds	r3, r7, r1
 800712a:	78da      	ldrb	r2, [r3, #3]
 800712c:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800712e:	745a      	strb	r2, [r3, #17]
	//wait_time - 4 bytes
	fare_min_x100 = (int)(fare_min * 100);
 8007130:	4b3d      	ldr	r3, [pc, #244]	@ (8007228 <HMI_Stop_W+0x15e0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	493a      	ldr	r1, [pc, #232]	@ (8007220 <HMI_Stop_W+0x15d8>)
 8007136:	1c18      	adds	r0, r3, #0
 8007138:	f7f9 fe76 	bl	8000e28 <__aeabi_fmul>
 800713c:	1c03      	adds	r3, r0, #0
 800713e:	1c18      	adds	r0, r3, #0
 8007140:	f7fa f954 	bl	80013ec <__aeabi_f2iz>
 8007144:	0003      	movs	r3, r0
 8007146:	001a      	movs	r2, r3
 8007148:	4b38      	ldr	r3, [pc, #224]	@ (800722c <HMI_Stop_W+0x15e4>)
 800714a:	601a      	str	r2, [r3, #0]
	unsigned char temp2[4];
	Long_to_byte(fare_min_x100, temp2);
 800714c:	4b37      	ldr	r3, [pc, #220]	@ (800722c <HMI_Stop_W+0x15e4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2468      	movs	r4, #104	@ 0x68
 8007152:	193a      	adds	r2, r7, r4
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f001 f8cc 	bl	80082f4 <Long_to_byte>
	data2[18] = temp2[0];
 800715c:	0021      	movs	r1, r4
 800715e:	187b      	adds	r3, r7, r1
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007164:	749a      	strb	r2, [r3, #18]
	data2[19] = temp2[1];
 8007166:	187b      	adds	r3, r7, r1
 8007168:	785a      	ldrb	r2, [r3, #1]
 800716a:	4b22      	ldr	r3, [pc, #136]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800716c:	74da      	strb	r2, [r3, #19]
	data2[20] = temp2[2];
 800716e:	187b      	adds	r3, r7, r1
 8007170:	789a      	ldrb	r2, [r3, #2]
 8007172:	4b20      	ldr	r3, [pc, #128]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 8007174:	751a      	strb	r2, [r3, #20]
	data2[21] = temp2[3];
 8007176:	187b      	adds	r3, r7, r1
 8007178:	78da      	ldrb	r2, [r3, #3]
 800717a:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 800717c:	755a      	strb	r2, [r3, #21]
	//extra - 4 bytes
	Addition_x10 = Addition * 10;
 800717e:	4b2c      	ldr	r3, [pc, #176]	@ (8007230 <HMI_Stop_W+0x15e8>)
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	0013      	movs	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	189b      	adds	r3, r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	001a      	movs	r2, r3
 800718c:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <HMI_Stop_W+0x15ec>)
 800718e:	601a      	str	r2, [r3, #0]
	unsigned char temp3[4];
	Long_to_byte(Addition_x10, temp3);
 8007190:	4b28      	ldr	r3, [pc, #160]	@ (8007234 <HMI_Stop_W+0x15ec>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2464      	movs	r4, #100	@ 0x64
 8007196:	193a      	adds	r2, r7, r4
 8007198:	0011      	movs	r1, r2
 800719a:	0018      	movs	r0, r3
 800719c:	f001 f8aa 	bl	80082f4 <Long_to_byte>
	data2[22] = temp3[0];
 80071a0:	0021      	movs	r1, r4
 80071a2:	187b      	adds	r3, r7, r1
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80071a8:	759a      	strb	r2, [r3, #22]
	data2[23] = temp3[1];
 80071aa:	187b      	adds	r3, r7, r1
 80071ac:	785a      	ldrb	r2, [r3, #1]
 80071ae:	4b11      	ldr	r3, [pc, #68]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80071b0:	75da      	strb	r2, [r3, #23]
	data2[24] = temp3[2];
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	789a      	ldrb	r2, [r3, #2]
 80071b6:	4b0f      	ldr	r3, [pc, #60]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80071b8:	761a      	strb	r2, [r3, #24]
	data2[25] = temp3[3];
 80071ba:	187b      	adds	r3, r7, r1
 80071bc:	78da      	ldrb	r2, [r3, #3]
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <HMI_Stop_W+0x15ac>)
 80071c0:	765a      	strb	r2, [r3, #25]
	//reserved - 4 bytes
	Flag_Control_Down();
 80071c2:	f004 f827 	bl	800b214 <Flag_Control_Down>
	flag_sp = 0;
 80071c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007238 <HMI_Stop_W+0x15f0>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
	cnt = 0;
 80071cc:	4b1b      	ldr	r3, [pc, #108]	@ (800723c <HMI_Stop_W+0x15f4>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
}
 80071d2:	46c0      	nop			@ (mov r8, r8)
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b021      	add	sp, #132	@ 0x84
 80071d8:	bd90      	pop	{r4, r7, pc}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	2000106c 	.word	0x2000106c
 80071e0:	200034fc 	.word	0x200034fc
 80071e4:	20001018 	.word	0x20001018
 80071e8:	20000074 	.word	0x20000074
 80071ec:	20000b0c 	.word	0x20000b0c
 80071f0:	20000bd4 	.word	0x20000bd4
 80071f4:	20000bf4 	.word	0x20000bf4
 80071f8:	20000af4 	.word	0x20000af4
 80071fc:	20000bd8 	.word	0x20000bd8
 8007200:	20000da4 	.word	0x20000da4
 8007204:	20000dfc 	.word	0x20000dfc
 8007208:	20000dfe 	.word	0x20000dfe
 800720c:	20000e00 	.word	0x20000e00
 8007210:	20000e02 	.word	0x20000e02
 8007214:	20000e04 	.word	0x20000e04
 8007218:	20000e06 	.word	0x20000e06
 800721c:	20000eb4 	.word	0x20000eb4
 8007220:	42c80000 	.word	0x42c80000
 8007224:	20000bdc 	.word	0x20000bdc
 8007228:	20000eb8 	.word	0x20000eb8
 800722c:	20000be0 	.word	0x20000be0
 8007230:	20000b18 	.word	0x20000b18
 8007234:	20000be4 	.word	0x20000be4
 8007238:	20000539 	.word	0x20000539
 800723c:	20000e7c 	.word	0x20000e7c

08007240 <HMI_Vacant_W>:

void HMI_Vacant_W(void)
{
 8007240:	b5b0      	push	{r4, r5, r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
	uint8_t temp_array[4];

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 8007246:	49ec      	ldr	r1, [pc, #944]	@ (80075f8 <HMI_Vacant_W+0x3b8>)
 8007248:	48ec      	ldr	r0, [pc, #944]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800724a:	2310      	movs	r3, #16
 800724c:	2208      	movs	r2, #8
 800724e:	f00c fbef 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8007252:	2001      	movs	r0, #1
 8007254:	f007 f966 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 8007258:	49e9      	ldr	r1, [pc, #932]	@ (8007600 <HMI_Vacant_W+0x3c0>)
 800725a:	48e8      	ldr	r0, [pc, #928]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800725c:	2310      	movs	r3, #16
 800725e:	2208      	movs	r2, #8
 8007260:	f00c fbe6 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8007264:	2001      	movs	r0, #1
 8007266:	f007 f95d 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_On, 8, 0x10);
 800726a:	49e6      	ldr	r1, [pc, #920]	@ (8007604 <HMI_Vacant_W+0x3c4>)
 800726c:	48e3      	ldr	r0, [pc, #908]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800726e:	2310      	movs	r3, #16
 8007270:	2208      	movs	r2, #8
 8007272:	f00c fbdd 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8007276:	2001      	movs	r0, #1
 8007278:	f007 f954 	bl	800e524 <HAL_Delay>



	//record eeprom total
	tkm_d += Dis;
 800727c:	4be2      	ldr	r3, [pc, #904]	@ (8007608 <HMI_Vacant_W+0x3c8>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4be2      	ldr	r3, [pc, #904]	@ (800760c <HMI_Vacant_W+0x3cc>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	18d2      	adds	r2, r2, r3
 8007286:	4be0      	ldr	r3, [pc, #896]	@ (8007608 <HMI_Vacant_W+0x3c8>)
 8007288:	601a      	str	r2, [r3, #0]
	pkm_d += fare_km_x;
 800728a:	4be1      	ldr	r3, [pc, #900]	@ (8007610 <HMI_Vacant_W+0x3d0>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4be1      	ldr	r3, [pc, #900]	@ (8007614 <HMI_Vacant_W+0x3d4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	18d2      	adds	r2, r2, r3
 8007294:	4bde      	ldr	r3, [pc, #888]	@ (8007610 <HMI_Vacant_W+0x3d0>)
 8007296:	601a      	str	r2, [r3, #0]
	tfare_d += Final_price;
 8007298:	4bdf      	ldr	r3, [pc, #892]	@ (8007618 <HMI_Vacant_W+0x3d8>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4bdf      	ldr	r3, [pc, #892]	@ (800761c <HMI_Vacant_W+0x3dc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	18d2      	adds	r2, r2, r3
 80072a2:	4bdd      	ldr	r3, [pc, #884]	@ (8007618 <HMI_Vacant_W+0x3d8>)
 80072a4:	601a      	str	r2, [r3, #0]
	tsub_d += Addition;
 80072a6:	4bde      	ldr	r3, [pc, #888]	@ (8007620 <HMI_Vacant_W+0x3e0>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4bde      	ldr	r3, [pc, #888]	@ (8007624 <HMI_Vacant_W+0x3e4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	18d2      	adds	r2, r2, r3
 80072b0:	4bdb      	ldr	r3, [pc, #876]	@ (8007620 <HMI_Vacant_W+0x3e0>)
 80072b2:	601a      	str	r2, [r3, #0]
	cfare_d += Final_price;
 80072b4:	4bdc      	ldr	r3, [pc, #880]	@ (8007628 <HMI_Vacant_W+0x3e8>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	4bd8      	ldr	r3, [pc, #864]	@ (800761c <HMI_Vacant_W+0x3dc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	18d2      	adds	r2, r2, r3
 80072be:	4bda      	ldr	r3, [pc, #872]	@ (8007628 <HMI_Vacant_W+0x3e8>)
 80072c0:	601a      	str	r2, [r3, #0]
	csub_d += Addition;
 80072c2:	4bda      	ldr	r3, [pc, #872]	@ (800762c <HMI_Vacant_W+0x3ec>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4bd7      	ldr	r3, [pc, #860]	@ (8007624 <HMI_Vacant_W+0x3e4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	18d2      	adds	r2, r2, r3
 80072cc:	4bd7      	ldr	r3, [pc, #860]	@ (800762c <HMI_Vacant_W+0x3ec>)
 80072ce:	601a      	str	r2, [r3, #0]
	tflag_d += flag_count;
 80072d0:	4bd7      	ldr	r3, [pc, #860]	@ (8007630 <HMI_Vacant_W+0x3f0>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	001a      	movs	r2, r3
 80072d6:	4bd7      	ldr	r3, [pc, #860]	@ (8007634 <HMI_Vacant_W+0x3f4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	18d2      	adds	r2, r2, r3
 80072dc:	4bd5      	ldr	r3, [pc, #852]	@ (8007634 <HMI_Vacant_W+0x3f4>)
 80072de:	601a      	str	r2, [r3, #0]
	cflag_d += flag_count;
 80072e0:	4bd3      	ldr	r3, [pc, #844]	@ (8007630 <HMI_Vacant_W+0x3f0>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	001a      	movs	r2, r3
 80072e6:	4bd4      	ldr	r3, [pc, #848]	@ (8007638 <HMI_Vacant_W+0x3f8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	18d2      	adds	r2, r2, r3
 80072ec:	4bd2      	ldr	r3, [pc, #840]	@ (8007638 <HMI_Vacant_W+0x3f8>)
 80072ee:	601a      	str	r2, [r3, #0]
	tpulse_d += change_count;
 80072f0:	4bd2      	ldr	r3, [pc, #840]	@ (800763c <HMI_Vacant_W+0x3fc>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	001a      	movs	r2, r3
 80072f6:	4bd2      	ldr	r3, [pc, #840]	@ (8007640 <HMI_Vacant_W+0x400>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	18d2      	adds	r2, r2, r3
 80072fc:	4bd0      	ldr	r3, [pc, #832]	@ (8007640 <HMI_Vacant_W+0x400>)
 80072fe:	601a      	str	r2, [r3, #0]
	ttime_d += ((ttime_counter / 60.0)* 1000) / 10; //changed
 8007300:	4bd0      	ldr	r3, [pc, #832]	@ (8007644 <HMI_Vacant_W+0x404>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	0018      	movs	r0, r3
 8007306:	f7fb ff95 	bl	8003234 <__aeabi_ui2d>
 800730a:	0004      	movs	r4, r0
 800730c:	000d      	movs	r5, r1
 800730e:	4bce      	ldr	r3, [pc, #824]	@ (8007648 <HMI_Vacant_W+0x408>)
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	0018      	movs	r0, r3
 8007314:	f7fb ff60 	bl	80031d8 <__aeabi_i2d>
 8007318:	2200      	movs	r2, #0
 800731a:	4bcc      	ldr	r3, [pc, #816]	@ (800764c <HMI_Vacant_W+0x40c>)
 800731c:	f7fa fc78 	bl	8001c10 <__aeabi_ddiv>
 8007320:	0002      	movs	r2, r0
 8007322:	000b      	movs	r3, r1
 8007324:	0010      	movs	r0, r2
 8007326:	0019      	movs	r1, r3
 8007328:	2200      	movs	r2, #0
 800732a:	4bc9      	ldr	r3, [pc, #804]	@ (8007650 <HMI_Vacant_W+0x410>)
 800732c:	f7fb f8b4 	bl	8002498 <__aeabi_dmul>
 8007330:	0002      	movs	r2, r0
 8007332:	000b      	movs	r3, r1
 8007334:	0010      	movs	r0, r2
 8007336:	0019      	movs	r1, r3
 8007338:	2200      	movs	r2, #0
 800733a:	4bc6      	ldr	r3, [pc, #792]	@ (8007654 <HMI_Vacant_W+0x414>)
 800733c:	f7fa fc68 	bl	8001c10 <__aeabi_ddiv>
 8007340:	0002      	movs	r2, r0
 8007342:	000b      	movs	r3, r1
 8007344:	0020      	movs	r0, r4
 8007346:	0029      	movs	r1, r5
 8007348:	f7fa f8fe 	bl	8001548 <__aeabi_dadd>
 800734c:	0002      	movs	r2, r0
 800734e:	000b      	movs	r3, r1
 8007350:	0010      	movs	r0, r2
 8007352:	0019      	movs	r1, r3
 8007354:	f7f9 f90e 	bl	8000574 <__aeabi_d2uiz>
 8007358:	0002      	movs	r2, r0
 800735a:	4bba      	ldr	r3, [pc, #744]	@ (8007644 <HMI_Vacant_W+0x404>)
 800735c:	601a      	str	r2, [r3, #0]

	Dec2ASC(tkm_d, tkm);
 800735e:	4baa      	ldr	r3, [pc, #680]	@ (8007608 <HMI_Vacant_W+0x3c8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4abd      	ldr	r2, [pc, #756]	@ (8007658 <HMI_Vacant_W+0x418>)
 8007364:	0011      	movs	r1, r2
 8007366:	0018      	movs	r0, r3
 8007368:	f004 f844 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(pkm_d, pkm);
 800736c:	4ba8      	ldr	r3, [pc, #672]	@ (8007610 <HMI_Vacant_W+0x3d0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4aba      	ldr	r2, [pc, #744]	@ (800765c <HMI_Vacant_W+0x41c>)
 8007372:	0011      	movs	r1, r2
 8007374:	0018      	movs	r0, r3
 8007376:	f004 f83d 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(tfare_d, tfare);
 800737a:	4ba7      	ldr	r3, [pc, #668]	@ (8007618 <HMI_Vacant_W+0x3d8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4ab8      	ldr	r2, [pc, #736]	@ (8007660 <HMI_Vacant_W+0x420>)
 8007380:	0011      	movs	r1, r2
 8007382:	0018      	movs	r0, r3
 8007384:	f004 f836 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(tsub_d, tsub);
 8007388:	4ba5      	ldr	r3, [pc, #660]	@ (8007620 <HMI_Vacant_W+0x3e0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4ab5      	ldr	r2, [pc, #724]	@ (8007664 <HMI_Vacant_W+0x424>)
 800738e:	0011      	movs	r1, r2
 8007390:	0018      	movs	r0, r3
 8007392:	f004 f82f 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(tflag_d, tflag);
 8007396:	4ba7      	ldr	r3, [pc, #668]	@ (8007634 <HMI_Vacant_W+0x3f4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4ab3      	ldr	r2, [pc, #716]	@ (8007668 <HMI_Vacant_W+0x428>)
 800739c:	0011      	movs	r1, r2
 800739e:	0018      	movs	r0, r3
 80073a0:	f004 f828 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(cflag_d, cflag);
 80073a4:	4ba4      	ldr	r3, [pc, #656]	@ (8007638 <HMI_Vacant_W+0x3f8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4ab0      	ldr	r2, [pc, #704]	@ (800766c <HMI_Vacant_W+0x42c>)
 80073aa:	0011      	movs	r1, r2
 80073ac:	0018      	movs	r0, r3
 80073ae:	f004 f821 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(cfare_d, cfare);
 80073b2:	4b9d      	ldr	r3, [pc, #628]	@ (8007628 <HMI_Vacant_W+0x3e8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4aae      	ldr	r2, [pc, #696]	@ (8007670 <HMI_Vacant_W+0x430>)
 80073b8:	0011      	movs	r1, r2
 80073ba:	0018      	movs	r0, r3
 80073bc:	f004 f81a 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(csub_d, csub);
 80073c0:	4b9a      	ldr	r3, [pc, #616]	@ (800762c <HMI_Vacant_W+0x3ec>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4aab      	ldr	r2, [pc, #684]	@ (8007674 <HMI_Vacant_W+0x434>)
 80073c6:	0011      	movs	r1, r2
 80073c8:	0018      	movs	r0, r3
 80073ca:	f004 f813 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(tpulse_d, tpulse);
 80073ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007640 <HMI_Vacant_W+0x400>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4aa9      	ldr	r2, [pc, #676]	@ (8007678 <HMI_Vacant_W+0x438>)
 80073d4:	0011      	movs	r1, r2
 80073d6:	0018      	movs	r0, r3
 80073d8:	f004 f80c 	bl	800b3f4 <Dec2ASC>
	Dec2ASC(ttime_d, ttime);
 80073dc:	4b99      	ldr	r3, [pc, #612]	@ (8007644 <HMI_Vacant_W+0x404>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4aa6      	ldr	r2, [pc, #664]	@ (800767c <HMI_Vacant_W+0x43c>)
 80073e2:	0011      	movs	r1, r2
 80073e4:	0018      	movs	r0, r3
 80073e6:	f004 f805 	bl	800b3f4 <Dec2ASC>
//	Dis = 0;                                    //空旗時沒按Clr 清Dis=>0
//	Distance = 0;
//	distance = 0;

	//Flag_Display check:
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Clear, 7, 0x0E);  //CLEAR button 顯示上次車資
 80073ea:	49a5      	ldr	r1, [pc, #660]	@ (8007680 <HMI_Vacant_W+0x440>)
 80073ec:	4883      	ldr	r0, [pc, #524]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80073ee:	230e      	movs	r3, #14
 80073f0:	2207      	movs	r2, #7
 80073f2:	f00c fb1d 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 80073f6:	2002      	movs	r0, #2
 80073f8:	f007 f894 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 80073fc:	4ba1      	ldr	r3, [pc, #644]	@ (8007684 <HMI_Vacant_W+0x444>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02b      	beq.n	800745c <HMI_Vacant_W+0x21c>
	{
		RxFlag = FALSE;
 8007404:	4b9f      	ldr	r3, [pc, #636]	@ (8007684 <HMI_Vacant_W+0x444>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
		if (RxBuff[8] == 0x01 && Flag_Display == TRUE)			//重按CLR 取消顯示
 800740a:	4b9f      	ldr	r3, [pc, #636]	@ (8007688 <HMI_Vacant_W+0x448>)
 800740c:	7a1b      	ldrb	r3, [r3, #8]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d110      	bne.n	8007434 <HMI_Vacant_W+0x1f4>
 8007412:	4b9e      	ldr	r3, [pc, #632]	@ (800768c <HMI_Vacant_W+0x44c>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10c      	bne.n	8007434 <HMI_Vacant_W+0x1f4>
		{
			display_wait = 0;
 800741a:	4b9d      	ldr	r3, [pc, #628]	@ (8007690 <HMI_Vacant_W+0x450>)
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
			Flag_Display = FALSE;
 8007420:	4b9a      	ldr	r3, [pc, #616]	@ (800768c <HMI_Vacant_W+0x44c>)
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x0E);
 8007426:	499b      	ldr	r1, [pc, #620]	@ (8007694 <HMI_Vacant_W+0x454>)
 8007428:	4874      	ldr	r0, [pc, #464]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800742a:	230e      	movs	r3, #14
 800742c:	2208      	movs	r2, #8
 800742e:	f00c faff 	bl	8013a30 <HAL_UART_Transmit>
 8007432:	e016      	b.n	8007462 <HMI_Vacant_W+0x222>
		}
		else if(RxBuff[8] == 0x01)
 8007434:	4b94      	ldr	r3, [pc, #592]	@ (8007688 <HMI_Vacant_W+0x448>)
 8007436:	7a1b      	ldrb	r3, [r3, #8]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d112      	bne.n	8007462 <HMI_Vacant_W+0x222>
		{
			display_wait++;
 800743c:	4b94      	ldr	r3, [pc, #592]	@ (8007690 <HMI_Vacant_W+0x450>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	4b92      	ldr	r3, [pc, #584]	@ (8007690 <HMI_Vacant_W+0x450>)
 8007446:	701a      	strb	r2, [r3, #0]
			Flag_Display = TRUE;
 8007448:	4b90      	ldr	r3, [pc, #576]	@ (800768c <HMI_Vacant_W+0x44c>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x0E);
 800744e:	4991      	ldr	r1, [pc, #580]	@ (8007694 <HMI_Vacant_W+0x454>)
 8007450:	486a      	ldr	r0, [pc, #424]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 8007452:	230e      	movs	r3, #14
 8007454:	2208      	movs	r2, #8
 8007456:	f00c faeb 	bl	8013a30 <HAL_UART_Transmit>
 800745a:	e002      	b.n	8007462 <HMI_Vacant_W+0x222>
		}
	}
	else
	{
		Flag_Display = FALSE;
 800745c:	4b8b      	ldr	r3, [pc, #556]	@ (800768c <HMI_Vacant_W+0x44c>)
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_Display)                                                //顯示上次車資
 8007462:	4b8a      	ldr	r3, [pc, #552]	@ (800768c <HMI_Vacant_W+0x44c>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d047      	beq.n	80074fa <HMI_Vacant_W+0x2ba>
	{
		//change
//		Long_to_byte(Last_Final_price_x10,temp_array);
		Long_to_byte(Last_fare_d_x100, temp_array);
 800746a:	4b8b      	ldr	r3, [pc, #556]	@ (8007698 <HMI_Vacant_W+0x458>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	003a      	movs	r2, r7
 8007470:	0011      	movs	r1, r2
 8007472:	0018      	movs	r0, r3
 8007474:	f000 ff3e 	bl	80082f4 <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8007478:	0039      	movs	r1, r7
 800747a:	4b88      	ldr	r3, [pc, #544]	@ (800769c <HMI_Vacant_W+0x45c>)
 800747c:	220a      	movs	r2, #10
 800747e:	0018      	movs	r0, r3
 8007480:	f000 ff57 	bl	8008332 <HMI_Command>

		Long_to_byte(ex_Addition,temp_array);
 8007484:	4b86      	ldr	r3, [pc, #536]	@ (80076a0 <HMI_Vacant_W+0x460>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	003a      	movs	r2, r7
 800748a:	0011      	movs	r1, r2
 800748c:	0018      	movs	r0, r3
 800748e:	f000 ff31 	bl	80082f4 <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 8007492:	0039      	movs	r1, r7
 8007494:	4b83      	ldr	r3, [pc, #524]	@ (80076a4 <HMI_Vacant_W+0x464>)
 8007496:	220a      	movs	r2, #10
 8007498:	0018      	movs	r0, r3
 800749a:	f000 ff4a 	bl	8008332 <HMI_Command>

		Long_to_byte(Last_Dis,temp_array);
 800749e:	4b82      	ldr	r3, [pc, #520]	@ (80076a8 <HMI_Vacant_W+0x468>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	003a      	movs	r2, r7
 80074a4:	0011      	movs	r1, r2
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 ff24 	bl	80082f4 <Long_to_byte>
		HMI_Command(Dis_A,temp_array,10);
 80074ac:	0039      	movs	r1, r7
 80074ae:	4b7f      	ldr	r3, [pc, #508]	@ (80076ac <HMI_Vacant_W+0x46c>)
 80074b0:	220a      	movs	r2, #10
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 ff3d 	bl	8008332 <HMI_Command>

		HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x1C);
 80074b8:	497d      	ldr	r1, [pc, #500]	@ (80076b0 <HMI_Vacant_W+0x470>)
 80074ba:	4850      	ldr	r0, [pc, #320]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80074bc:	231c      	movs	r3, #28
 80074be:	220e      	movs	r2, #14
 80074c0:	f00c fab6 	bl	8013a30 <HAL_UART_Transmit>

		printer_rd();
 80074c4:	f000 fd68 	bl	8007f98 <printer_rd>
		check_rd(); //Print operational data
 80074c8:	f000 fe70 	bl	80081ac <check_rd>
		clear_rd();
 80074cc:	f000 fe92 	bl	80081f4 <clear_rd>

		if(display_wait != 0)
 80074d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007690 <HMI_Vacant_W+0x450>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d04f      	beq.n	8007578 <HMI_Vacant_W+0x338>
		{
			display_wait++;
 80074d8:	4b6d      	ldr	r3, [pc, #436]	@ (8007690 <HMI_Vacant_W+0x450>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	4b6b      	ldr	r3, [pc, #428]	@ (8007690 <HMI_Vacant_W+0x450>)
 80074e2:	701a      	strb	r2, [r3, #0]
			//display 5s
			if(display_wait >= 6)
 80074e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007690 <HMI_Vacant_W+0x450>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b05      	cmp	r3, #5
 80074ea:	d945      	bls.n	8007578 <HMI_Vacant_W+0x338>
			{
				Flag_Display = FALSE;
 80074ec:	4b67      	ldr	r3, [pc, #412]	@ (800768c <HMI_Vacant_W+0x44c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
				display_wait = 0;
 80074f2:	4b67      	ldr	r3, [pc, #412]	@ (8007690 <HMI_Vacant_W+0x450>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e03e      	b.n	8007578 <HMI_Vacant_W+0x338>
		}
	}
	else
	{
//		Long_to_byte(Final_price_x10,temp_array);
		Long_to_byte(fare_d_x100, temp_array);
 80074fa:	4b6e      	ldr	r3, [pc, #440]	@ (80076b4 <HMI_Vacant_W+0x474>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	003a      	movs	r2, r7
 8007500:	0011      	movs	r1, r2
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fef6 	bl	80082f4 <Long_to_byte>
		HMI_Command(Fee,temp_array,10);
 8007508:	0039      	movs	r1, r7
 800750a:	4b64      	ldr	r3, [pc, #400]	@ (800769c <HMI_Vacant_W+0x45c>)
 800750c:	220a      	movs	r2, #10
 800750e:	0018      	movs	r0, r3
 8007510:	f000 ff0f 	bl	8008332 <HMI_Command>

		Long_to_byte(Addition,temp_array);
 8007514:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <HMI_Vacant_W+0x3e4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	003a      	movs	r2, r7
 800751a:	0011      	movs	r1, r2
 800751c:	0018      	movs	r0, r3
 800751e:	f000 fee9 	bl	80082f4 <Long_to_byte>
		HMI_Command(Add_Charge,temp_array,10);
 8007522:	0039      	movs	r1, r7
 8007524:	4b5f      	ldr	r3, [pc, #380]	@ (80076a4 <HMI_Vacant_W+0x464>)
 8007526:	220a      	movs	r2, #10
 8007528:	0018      	movs	r0, r3
 800752a:	f000 ff02 	bl	8008332 <HMI_Command>
		////////////////////////pull to start of function
//		last_counter = 0;
//		Dis = 0;                                    //空旗時沒按Clr 清Dis=>0
//		Distance = 0;
//		distance = 0;
		Long_to_byte(Dis,temp_array);
 800752e:	4b37      	ldr	r3, [pc, #220]	@ (800760c <HMI_Vacant_W+0x3cc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	003a      	movs	r2, r7
 8007534:	0011      	movs	r1, r2
 8007536:	0018      	movs	r0, r3
 8007538:	f000 fedc 	bl	80082f4 <Long_to_byte>
		HMI_Command(Dis_A,temp_array,10);
 800753c:	0039      	movs	r1, r7
 800753e:	4b5b      	ldr	r3, [pc, #364]	@ (80076ac <HMI_Vacant_W+0x46c>)
 8007540:	220a      	movs	r2, #10
 8007542:	0018      	movs	r0, r3
 8007544:	f000 fef5 	bl	8008332 <HMI_Command>

		sec = 0;
 8007548:	4b5b      	ldr	r3, [pc, #364]	@ (80076b8 <HMI_Vacant_W+0x478>)
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
		min = 0;
 800754e:	4b5b      	ldr	r3, [pc, #364]	@ (80076bc <HMI_Vacant_W+0x47c>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
		hou = 0;
 8007554:	4b5a      	ldr	r3, [pc, #360]	@ (80076c0 <HMI_Vacant_W+0x480>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) Dur_HMS_clear, 14, 0x1C);  //Show Time = 00:00:00
 800755a:	495a      	ldr	r1, [pc, #360]	@ (80076c4 <HMI_Vacant_W+0x484>)
 800755c:	4827      	ldr	r0, [pc, #156]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800755e:	231c      	movs	r3, #28
 8007560:	220e      	movs	r2, #14
 8007562:	f00c fa65 	bl	8013a30 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);// not allow user to print during VACANT added by Edwin
 8007566:	4958      	ldr	r1, [pc, #352]	@ (80076c8 <HMI_Vacant_W+0x488>)
 8007568:	4824      	ldr	r0, [pc, #144]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800756a:	2310      	movs	r3, #16
 800756c:	2208      	movs	r2, #8
 800756e:	f00c fa5f 	bl	8013a30 <HAL_UART_Transmit>
		HAL_Delay(2);
 8007572:	2002      	movs	r0, #2
 8007574:	f006 ffd6 	bl	800e524 <HAL_Delay>
	}

	//switch QR code (plate/hketoll) on VACANT
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_qr, 7, 0x0E);
 8007578:	4954      	ldr	r1, [pc, #336]	@ (80076cc <HMI_Vacant_W+0x48c>)
 800757a:	4820      	ldr	r0, [pc, #128]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 800757c:	230e      	movs	r3, #14
 800757e:	2207      	movs	r2, #7
 8007580:	f00c fa56 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007584:	2002      	movs	r0, #2
 8007586:	f006 ffcd 	bl	800e524 <HAL_Delay>
	if (RxFlag)
 800758a:	4b3e      	ldr	r3, [pc, #248]	@ (8007684 <HMI_Vacant_W+0x444>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d100      	bne.n	8007594 <HMI_Vacant_W+0x354>
 8007592:	e0be      	b.n	8007712 <HMI_Vacant_W+0x4d2>
	{
		RxFlag = FALSE;
 8007594:	4b3b      	ldr	r3, [pc, #236]	@ (8007684 <HMI_Vacant_W+0x444>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01 && len_detail!=0x0)                         //RxBuff is the data received from HMI, the [8] byte is the value of button (being pressed=0x01)
 800759a:	4b3b      	ldr	r3, [pc, #236]	@ (8007688 <HMI_Vacant_W+0x448>)
 800759c:	7a1b      	ldrb	r3, [r3, #8]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d000      	beq.n	80075a4 <HMI_Vacant_W+0x364>
 80075a2:	e0a1      	b.n	80076e8 <HMI_Vacant_W+0x4a8>
 80075a4:	4b4a      	ldr	r3, [pc, #296]	@ (80076d0 <HMI_Vacant_W+0x490>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d100      	bne.n	80075ae <HMI_Vacant_W+0x36e>
 80075ac:	e09c      	b.n	80076e8 <HMI_Vacant_W+0x4a8>
		{
			qr_wait++;
 80075ae:	4b49      	ldr	r3, [pc, #292]	@ (80076d4 <HMI_Vacant_W+0x494>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <HMI_Vacant_W+0x494>)
 80075b8:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, etoll_qr, 63, 0x1C);
 80075ba:	4947      	ldr	r1, [pc, #284]	@ (80076d8 <HMI_Vacant_W+0x498>)
 80075bc:	480f      	ldr	r0, [pc, #60]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80075be:	231c      	movs	r3, #28
 80075c0:	223f      	movs	r2, #63	@ 0x3f
 80075c2:	f00c fa35 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_on, 8, 0x0E);
 80075c6:	4945      	ldr	r1, [pc, #276]	@ (80076dc <HMI_Vacant_W+0x49c>)
 80075c8:	480c      	ldr	r0, [pc, #48]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80075ca:	230e      	movs	r3, #14
 80075cc:	2208      	movs	r2, #8
 80075ce:	f00c fa2f 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_bg_green, 8, 0x0E);
 80075d2:	4943      	ldr	r1, [pc, #268]	@ (80076e0 <HMI_Vacant_W+0x4a0>)
 80075d4:	4809      	ldr	r0, [pc, #36]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80075d6:	230e      	movs	r3, #14
 80075d8:	2208      	movs	r2, #8
 80075da:	f00c fa29 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_content_black, 8, 0x0E);
 80075de:	4941      	ldr	r1, [pc, #260]	@ (80076e4 <HMI_Vacant_W+0x4a4>)
 80075e0:	4806      	ldr	r0, [pc, #24]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80075e2:	230e      	movs	r3, #14
 80075e4:	2208      	movs	r2, #8
 80075e6:	f00c fa23 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_on, 8, 0x0E);//must write this again , it wont change green when 8 details otherwise
 80075ea:	493c      	ldr	r1, [pc, #240]	@ (80076dc <HMI_Vacant_W+0x49c>)
 80075ec:	4803      	ldr	r0, [pc, #12]	@ (80075fc <HMI_Vacant_W+0x3bc>)
 80075ee:	230e      	movs	r3, #14
 80075f0:	2208      	movs	r2, #8
 80075f2:	f00c fa1d 	bl	8013a30 <HAL_UART_Transmit>
 80075f6:	e086      	b.n	8007706 <HMI_Vacant_W+0x4c6>
 80075f8:	2000000c 	.word	0x2000000c
 80075fc:	20000700 	.word	0x20000700
 8007600:	2000001c 	.word	0x2000001c
 8007604:	20000024 	.word	0x20000024
 8007608:	20000fd0 	.word	0x20000fd0
 800760c:	20000b0c 	.word	0x20000b0c
 8007610:	20000fd4 	.word	0x20000fd4
 8007614:	20000ebc 	.word	0x20000ebc
 8007618:	20000fe4 	.word	0x20000fe4
 800761c:	20000af4 	.word	0x20000af4
 8007620:	20000fe8 	.word	0x20000fe8
 8007624:	20000b18 	.word	0x20000b18
 8007628:	20000fec 	.word	0x20000fec
 800762c:	20000ff0 	.word	0x20000ff0
 8007630:	20001014 	.word	0x20001014
 8007634:	20000fd8 	.word	0x20000fd8
 8007638:	20000fdc 	.word	0x20000fdc
 800763c:	20001015 	.word	0x20001015
 8007640:	20000fe0 	.word	0x20000fe0
 8007644:	20001004 	.word	0x20001004
 8007648:	20001016 	.word	0x20001016
 800764c:	404e0000 	.word	0x404e0000
 8007650:	408f4000 	.word	0x408f4000
 8007654:	40240000 	.word	0x40240000
 8007658:	2000101c 	.word	0x2000101c
 800765c:	20001024 	.word	0x20001024
 8007660:	20001044 	.word	0x20001044
 8007664:	2000104c 	.word	0x2000104c
 8007668:	2000102c 	.word	0x2000102c
 800766c:	20001034 	.word	0x20001034
 8007670:	20001054 	.word	0x20001054
 8007674:	2000105c 	.word	0x2000105c
 8007678:	2000103c 	.word	0x2000103c
 800767c:	20001064 	.word	0x20001064
 8007680:	0801a060 	.word	0x0801a060
 8007684:	20000ae4 	.word	0x20000ae4
 8007688:	20000ae8 	.word	0x20000ae8
 800768c:	20000b04 	.word	0x20000b04
 8007690:	20000b05 	.word	0x20000b05
 8007694:	2000004c 	.word	0x2000004c
 8007698:	20000eb0 	.word	0x20000eb0
 800769c:	0801a020 	.word	0x0801a020
 80076a0:	20000b00 	.word	0x20000b00
 80076a4:	0801a02c 	.word	0x0801a02c
 80076a8:	20000b10 	.word	0x20000b10
 80076ac:	0801a078 	.word	0x0801a078
 80076b0:	20000054 	.word	0x20000054
 80076b4:	20000eac 	.word	0x20000eac
 80076b8:	20000b6c 	.word	0x20000b6c
 80076bc:	20000b6d 	.word	0x20000b6d
 80076c0:	20000b6e 	.word	0x20000b6e
 80076c4:	20000064 	.word	0x20000064
 80076c8:	20000044 	.word	0x20000044
 80076cc:	0801a084 	.word	0x0801a084
 80076d0:	2000359e 	.word	0x2000359e
 80076d4:	20000b06 	.word	0x20000b06
 80076d8:	200000a4 	.word	0x200000a4
 80076dc:	0801a094 	.word	0x0801a094
 80076e0:	0801a09c 	.word	0x0801a09c
 80076e4:	0801a0a4 	.word	0x0801a0a4
		}
		else
		{
			qr_wait = 0;
 80076e8:	4be0      	ldr	r3, [pc, #896]	@ (8007a6c <HMI_Vacant_W+0x82c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, plate_qr, 18, 0x1C);
 80076ee:	49e0      	ldr	r1, [pc, #896]	@ (8007a70 <HMI_Vacant_W+0x830>)
 80076f0:	48e0      	ldr	r0, [pc, #896]	@ (8007a74 <HMI_Vacant_W+0x834>)
 80076f2:	231c      	movs	r3, #28
 80076f4:	2212      	movs	r2, #18
 80076f6:	f00c f99b 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_off, 8, 0x0E);
 80076fa:	49df      	ldr	r1, [pc, #892]	@ (8007a78 <HMI_Vacant_W+0x838>)
 80076fc:	48dd      	ldr	r0, [pc, #884]	@ (8007a74 <HMI_Vacant_W+0x834>)
 80076fe:	230e      	movs	r3, #14
 8007700:	2208      	movs	r2, #8
 8007702:	f00c f995 	bl	8013a30 <HAL_UART_Transmit>
		}
		memset(RxBuff,0,12);                           //Reset to 0 after run the function
 8007706:	4bdd      	ldr	r3, [pc, #884]	@ (8007a7c <HMI_Vacant_W+0x83c>)
 8007708:	220c      	movs	r2, #12
 800770a:	2100      	movs	r1, #0
 800770c:	0018      	movs	r0, r3
 800770e:	f011 fcdf 	bl	80190d0 <memset>
	}
	if (qr_wait >= 10)
 8007712:	4bd6      	ldr	r3, [pc, #856]	@ (8007a6c <HMI_Vacant_W+0x82c>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b09      	cmp	r3, #9
 8007718:	d908      	bls.n	800772c <HMI_Vacant_W+0x4ec>
	{
		qr_wait = 0;
 800771a:	4bd4      	ldr	r3, [pc, #848]	@ (8007a6c <HMI_Vacant_W+0x82c>)
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, CLR_RD_qr, 8, 0x1C);
 8007720:	49d7      	ldr	r1, [pc, #860]	@ (8007a80 <HMI_Vacant_W+0x840>)
 8007722:	48d4      	ldr	r0, [pc, #848]	@ (8007a74 <HMI_Vacant_W+0x834>)
 8007724:	231c      	movs	r3, #28
 8007726:	2208      	movs	r2, #8
 8007728:	f00c f982 	bl	8013a30 <HAL_UART_Transmit>
	}

	//pages
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_page, 7, 0x0E);
 800772c:	49d5      	ldr	r1, [pc, #852]	@ (8007a84 <HMI_Vacant_W+0x844>)
 800772e:	48d1      	ldr	r0, [pc, #836]	@ (8007a74 <HMI_Vacant_W+0x834>)
 8007730:	230e      	movs	r3, #14
 8007732:	2207      	movs	r2, #7
 8007734:	f00c f97c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007738:	2002      	movs	r0, #2
 800773a:	f006 fef3 	bl	800e524 <HAL_Delay>
	if (RxFlag)
 800773e:	4bd2      	ldr	r3, [pc, #840]	@ (8007a88 <HMI_Vacant_W+0x848>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d020      	beq.n	8007788 <HMI_Vacant_W+0x548>
	{
		RxFlag = FALSE;
 8007746:	4bd0      	ldr	r3, [pc, #832]	@ (8007a88 <HMI_Vacant_W+0x848>)
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 800774c:	4bcb      	ldr	r3, [pc, #812]	@ (8007a7c <HMI_Vacant_W+0x83c>)
 800774e:	7a1b      	ldrb	r3, [r3, #8]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10d      	bne.n	8007770 <HMI_Vacant_W+0x530>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)Page01, 10, 0x0E);
 8007754:	49cd      	ldr	r1, [pc, #820]	@ (8007a8c <HMI_Vacant_W+0x84c>)
 8007756:	48c7      	ldr	r0, [pc, #796]	@ (8007a74 <HMI_Vacant_W+0x834>)
 8007758:	230e      	movs	r3, #14
 800775a:	220a      	movs	r2, #10
 800775c:	f00c f968 	bl	8013a30 <HAL_UART_Transmit>
			E_read();                                                 // try to tackle it from HMI
 8007760:	f003 feb8 	bl	800b4d4 <E_read>
			HAL_UART_Transmit(&huart1, (uint8_t *) page_clear, 8, 0x0E);//Clear 2 times is a must
 8007764:	49ca      	ldr	r1, [pc, #808]	@ (8007a90 <HMI_Vacant_W+0x850>)
 8007766:	48c3      	ldr	r0, [pc, #780]	@ (8007a74 <HMI_Vacant_W+0x834>)
 8007768:	230e      	movs	r3, #14
 800776a:	2208      	movs	r2, #8
 800776c:	f00c f960 	bl	8013a30 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t *) page_clear, 8, 0x0E); //Clear 2 times is a must
 8007770:	49c7      	ldr	r1, [pc, #796]	@ (8007a90 <HMI_Vacant_W+0x850>)
 8007772:	48c0      	ldr	r0, [pc, #768]	@ (8007a74 <HMI_Vacant_W+0x834>)
 8007774:	230e      	movs	r3, #14
 8007776:	2208      	movs	r2, #8
 8007778:	f00c f95a 	bl	8013a30 <HAL_UART_Transmit>
		memset(RxBuff,0,12);
 800777c:	4bbf      	ldr	r3, [pc, #764]	@ (8007a7c <HMI_Vacant_W+0x83c>)
 800777e:	220c      	movs	r2, #12
 8007780:	2100      	movs	r1, #0
 8007782:	0018      	movs	r0, r3
 8007784:	f011 fca4 	bl	80190d0 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) Plus10_clear, 8, 0x10);
 8007788:	49c2      	ldr	r1, [pc, #776]	@ (8007a94 <HMI_Vacant_W+0x854>)
 800778a:	48ba      	ldr	r0, [pc, #744]	@ (8007a74 <HMI_Vacant_W+0x834>)
 800778c:	2310      	movs	r3, #16
 800778e:	2208      	movs	r2, #8
 8007790:	f00c f94e 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 8007794:	2001      	movs	r0, #1
 8007796:	f006 fec5 	bl	800e524 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) Plus1_clear, 8, 0x10);
 800779a:	49bf      	ldr	r1, [pc, #764]	@ (8007a98 <HMI_Vacant_W+0x858>)
 800779c:	48b5      	ldr	r0, [pc, #724]	@ (8007a74 <HMI_Vacant_W+0x834>)
 800779e:	2310      	movs	r3, #16
 80077a0:	2208      	movs	r2, #8
 80077a2:	f00c f945 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(1);
 80077a6:	2001      	movs	r0, #1
 80077a8:	f006 febc 	bl	800e524 <HAL_Delay>

	IC_Val1 = 0;
 80077ac:	4bbb      	ldr	r3, [pc, #748]	@ (8007a9c <HMI_Vacant_W+0x85c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
	IC_Val2 = 0;
 80077b2:	4bbb      	ldr	r3, [pc, #748]	@ (8007aa0 <HMI_Vacant_W+0x860>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]
	IC_Val3 = 0;
 80077b8:	4bba      	ldr	r3, [pc, #744]	@ (8007aa4 <HMI_Vacant_W+0x864>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
	IC_Val4 = 0;
 80077be:	4bba      	ldr	r3, [pc, #744]	@ (8007aa8 <HMI_Vacant_W+0x868>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
	Width = 0;
 80077c4:	4bb9      	ldr	r3, [pc, #740]	@ (8007aac <HMI_Vacant_W+0x86c>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
	Difference = 0;
 80077ca:	4bb9      	ldr	r3, [pc, #740]	@ (8007ab0 <HMI_Vacant_W+0x870>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
	//counter = 0;
	//last_counter = 0;
	//Dis = 0;
	//Distance = 0;

	if (Flag_Tbox_Finish)
 80077d0:	4bb8      	ldr	r3, [pc, #736]	@ (8007ab4 <HMI_Vacant_W+0x874>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d100      	bne.n	80077da <HMI_Vacant_W+0x59a>
 80077d8:	e218      	b.n	8007c0c <HMI_Vacant_W+0x9cc>
	{
		Flag_Tbox_Start = TRUE;
 80077da:	4bb7      	ldr	r3, [pc, #732]	@ (8007ab8 <HMI_Vacant_W+0x878>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
		Flag_Tbox_Finish = FALSE;
 80077e0:	4bb4      	ldr	r3, [pc, #720]	@ (8007ab4 <HMI_Vacant_W+0x874>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]

		Flag_Printer_Start = TRUE;
 80077e6:	4bb5      	ldr	r3, [pc, #724]	@ (8007abc <HMI_Vacant_W+0x87c>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	701a      	strb	r2, [r3, #0]
		Flag_Printer_End = FALSE;
 80077ec:	4bb4      	ldr	r3, [pc, #720]	@ (8007ac0 <HMI_Vacant_W+0x880>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]

		if(!Flag_End_Record)
 80077f2:	4bb4      	ldr	r3, [pc, #720]	@ (8007ac4 <HMI_Vacant_W+0x884>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <HMI_Vacant_W+0x5c0>
		{
			//printed on stop mode,already record the end time
			tbox_finish();
 80077fa:	f000 ff75 	bl	80086e8 <tbox_finish>
 80077fe:	e029      	b.n	8007854 <HMI_Vacant_W+0x614>
		else
		{
			//get end time
			//end - dd/mm/yy hh:mm
			//hmi_rtc - yy-mm-dd hh:mm:ss
			end[0] = hmi_rtc[14]; //dd
 8007800:	4bb1      	ldr	r3, [pc, #708]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007802:	7b9a      	ldrb	r2, [r3, #14]
 8007804:	4bb1      	ldr	r3, [pc, #708]	@ (8007acc <HMI_Vacant_W+0x88c>)
 8007806:	701a      	strb	r2, [r3, #0]
			end[1] = hmi_rtc[15];
 8007808:	4baf      	ldr	r3, [pc, #700]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800780a:	7bda      	ldrb	r2, [r3, #15]
 800780c:	4baf      	ldr	r3, [pc, #700]	@ (8007acc <HMI_Vacant_W+0x88c>)
 800780e:	705a      	strb	r2, [r3, #1]
			end[3] = hmi_rtc[11]; //mm
 8007810:	4bad      	ldr	r3, [pc, #692]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007812:	7ada      	ldrb	r2, [r3, #11]
 8007814:	4bad      	ldr	r3, [pc, #692]	@ (8007acc <HMI_Vacant_W+0x88c>)
 8007816:	70da      	strb	r2, [r3, #3]
			end[4] = hmi_rtc[12];
 8007818:	4bab      	ldr	r3, [pc, #684]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800781a:	7b1a      	ldrb	r2, [r3, #12]
 800781c:	4bab      	ldr	r3, [pc, #684]	@ (8007acc <HMI_Vacant_W+0x88c>)
 800781e:	711a      	strb	r2, [r3, #4]
			end[6] = hmi_rtc[8]; //yy
 8007820:	4ba9      	ldr	r3, [pc, #676]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007822:	7a1a      	ldrb	r2, [r3, #8]
 8007824:	4ba9      	ldr	r3, [pc, #676]	@ (8007acc <HMI_Vacant_W+0x88c>)
 8007826:	719a      	strb	r2, [r3, #6]
			end[7] = hmi_rtc[9];
 8007828:	4ba7      	ldr	r3, [pc, #668]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800782a:	7a5a      	ldrb	r2, [r3, #9]
 800782c:	4ba7      	ldr	r3, [pc, #668]	@ (8007acc <HMI_Vacant_W+0x88c>)
 800782e:	71da      	strb	r2, [r3, #7]
			end[9] = hmi_rtc[17]; //hh
 8007830:	4ba5      	ldr	r3, [pc, #660]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007832:	7c5a      	ldrb	r2, [r3, #17]
 8007834:	4ba5      	ldr	r3, [pc, #660]	@ (8007acc <HMI_Vacant_W+0x88c>)
 8007836:	725a      	strb	r2, [r3, #9]
			end[10] = hmi_rtc[18];
 8007838:	4ba3      	ldr	r3, [pc, #652]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800783a:	7c9a      	ldrb	r2, [r3, #18]
 800783c:	4ba3      	ldr	r3, [pc, #652]	@ (8007acc <HMI_Vacant_W+0x88c>)
 800783e:	729a      	strb	r2, [r3, #10]
			end[12] = hmi_rtc[20]; //mm
 8007840:	4ba1      	ldr	r3, [pc, #644]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007842:	7d1a      	ldrb	r2, [r3, #20]
 8007844:	4ba1      	ldr	r3, [pc, #644]	@ (8007acc <HMI_Vacant_W+0x88c>)
 8007846:	731a      	strb	r2, [r3, #12]
			end[13] = hmi_rtc[21];
 8007848:	4b9f      	ldr	r3, [pc, #636]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800784a:	7d5a      	ldrb	r2, [r3, #21]
 800784c:	4b9f      	ldr	r3, [pc, #636]	@ (8007acc <HMI_Vacant_W+0x88c>)
 800784e:	735a      	strb	r2, [r3, #13]
			tbox_finish();
 8007850:	f000 ff4a 	bl	80086e8 <tbox_finish>
		}
		Flag_End_Record = TRUE;
 8007854:	4b9b      	ldr	r3, [pc, #620]	@ (8007ac4 <HMI_Vacant_W+0x884>)
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]
		//calculate trip time (end time - start time)
		E_write();
 800785a:	f004 f95d 	bl	800bb18 <E_write>
		//trip data write to sd card
		SD_buffer[34] = 0x32;       //2
 800785e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007860:	2222      	movs	r2, #34	@ 0x22
 8007862:	2132      	movs	r1, #50	@ 0x32
 8007864:	5499      	strb	r1, [r3, r2]
		SD_buffer[35] = 0x30;       //0
 8007866:	4b9a      	ldr	r3, [pc, #616]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007868:	2223      	movs	r2, #35	@ 0x23
 800786a:	2130      	movs	r1, #48	@ 0x30
 800786c:	5499      	strb	r1, [r3, r2]
		SD_buffer[36] = hmi_rtc[8]; //yy
 800786e:	4b96      	ldr	r3, [pc, #600]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007870:	7a19      	ldrb	r1, [r3, #8]
 8007872:	4b97      	ldr	r3, [pc, #604]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007874:	2224      	movs	r2, #36	@ 0x24
 8007876:	5499      	strb	r1, [r3, r2]
		SD_buffer[37] = hmi_rtc[9];
 8007878:	4b93      	ldr	r3, [pc, #588]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800787a:	7a59      	ldrb	r1, [r3, #9]
 800787c:	4b94      	ldr	r3, [pc, #592]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 800787e:	2225      	movs	r2, #37	@ 0x25
 8007880:	5499      	strb	r1, [r3, r2]
		SD_buffer[38] = 0x2D;       //-
 8007882:	4b93      	ldr	r3, [pc, #588]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007884:	2226      	movs	r2, #38	@ 0x26
 8007886:	212d      	movs	r1, #45	@ 0x2d
 8007888:	5499      	strb	r1, [r3, r2]
		SD_buffer[39] = hmi_rtc[11]; //mm
 800788a:	4b8f      	ldr	r3, [pc, #572]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 800788c:	7ad9      	ldrb	r1, [r3, #11]
 800788e:	4b90      	ldr	r3, [pc, #576]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007890:	2227      	movs	r2, #39	@ 0x27
 8007892:	5499      	strb	r1, [r3, r2]
		SD_buffer[40] = hmi_rtc[12];
 8007894:	4b8c      	ldr	r3, [pc, #560]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007896:	7b19      	ldrb	r1, [r3, #12]
 8007898:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 800789a:	2228      	movs	r2, #40	@ 0x28
 800789c:	5499      	strb	r1, [r3, r2]
		SD_buffer[41] = 0x2D;       //-
 800789e:	4b8c      	ldr	r3, [pc, #560]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078a0:	2229      	movs	r2, #41	@ 0x29
 80078a2:	212d      	movs	r1, #45	@ 0x2d
 80078a4:	5499      	strb	r1, [r3, r2]
		SD_buffer[42] = hmi_rtc[14]; //dd
 80078a6:	4b88      	ldr	r3, [pc, #544]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078a8:	7b99      	ldrb	r1, [r3, #14]
 80078aa:	4b89      	ldr	r3, [pc, #548]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078ac:	222a      	movs	r2, #42	@ 0x2a
 80078ae:	5499      	strb	r1, [r3, r2]
		SD_buffer[43] = hmi_rtc[15];
 80078b0:	4b85      	ldr	r3, [pc, #532]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078b2:	7bd9      	ldrb	r1, [r3, #15]
 80078b4:	4b86      	ldr	r3, [pc, #536]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078b6:	222b      	movs	r2, #43	@ 0x2b
 80078b8:	5499      	strb	r1, [r3, r2]
		SD_buffer[44] = 0x20;
 80078ba:	4b85      	ldr	r3, [pc, #532]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078bc:	222c      	movs	r2, #44	@ 0x2c
 80078be:	2120      	movs	r1, #32
 80078c0:	5499      	strb	r1, [r3, r2]
		SD_buffer[45] = hmi_rtc[17]; //hh
 80078c2:	4b81      	ldr	r3, [pc, #516]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078c4:	7c59      	ldrb	r1, [r3, #17]
 80078c6:	4b82      	ldr	r3, [pc, #520]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078c8:	222d      	movs	r2, #45	@ 0x2d
 80078ca:	5499      	strb	r1, [r3, r2]
		SD_buffer[46] = hmi_rtc[18];
 80078cc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078ce:	7c99      	ldrb	r1, [r3, #18]
 80078d0:	4b7f      	ldr	r3, [pc, #508]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078d2:	222e      	movs	r2, #46	@ 0x2e
 80078d4:	5499      	strb	r1, [r3, r2]
		SD_buffer[47] = 0x3A;        //:
 80078d6:	4b7e      	ldr	r3, [pc, #504]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078d8:	222f      	movs	r2, #47	@ 0x2f
 80078da:	213a      	movs	r1, #58	@ 0x3a
 80078dc:	5499      	strb	r1, [r3, r2]
		SD_buffer[48] = hmi_rtc[20]; //mm
 80078de:	4b7a      	ldr	r3, [pc, #488]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078e0:	7d19      	ldrb	r1, [r3, #20]
 80078e2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078e4:	2230      	movs	r2, #48	@ 0x30
 80078e6:	5499      	strb	r1, [r3, r2]
		SD_buffer[49] = hmi_rtc[21];
 80078e8:	4b77      	ldr	r3, [pc, #476]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078ea:	7d59      	ldrb	r1, [r3, #21]
 80078ec:	4b78      	ldr	r3, [pc, #480]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078ee:	2231      	movs	r2, #49	@ 0x31
 80078f0:	5499      	strb	r1, [r3, r2]
		SD_buffer[50] = 0x3A;		//:
 80078f2:	4b77      	ldr	r3, [pc, #476]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 80078f4:	2232      	movs	r2, #50	@ 0x32
 80078f6:	213a      	movs	r1, #58	@ 0x3a
 80078f8:	5499      	strb	r1, [r3, r2]
		SD_buffer[51] = hmi_rtc[23]; //ss
 80078fa:	4b73      	ldr	r3, [pc, #460]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 80078fc:	7dd9      	ldrb	r1, [r3, #23]
 80078fe:	4b74      	ldr	r3, [pc, #464]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007900:	2233      	movs	r2, #51	@ 0x33
 8007902:	5499      	strb	r1, [r3, r2]
		SD_buffer[52] = hmi_rtc[24];
 8007904:	4b70      	ldr	r3, [pc, #448]	@ (8007ac8 <HMI_Vacant_W+0x888>)
 8007906:	7e19      	ldrb	r1, [r3, #24]
 8007908:	4b71      	ldr	r3, [pc, #452]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 800790a:	2234      	movs	r2, #52	@ 0x34
 800790c:	5499      	strb	r1, [r3, r2]
		SD_buffer[53] = 0x20;
 800790e:	4b70      	ldr	r3, [pc, #448]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007910:	2235      	movs	r2, #53	@ 0x35
 8007912:	2120      	movs	r1, #32
 8007914:	5499      	strb	r1, [r3, r2]

		SD_buffer[54] = paid_min[8];
 8007916:	4b6f      	ldr	r3, [pc, #444]	@ (8007ad4 <HMI_Vacant_W+0x894>)
 8007918:	7a19      	ldrb	r1, [r3, #8]
 800791a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 800791c:	2236      	movs	r2, #54	@ 0x36
 800791e:	5499      	strb	r1, [r3, r2]
		SD_buffer[55] = paid_min[9];
 8007920:	4b6c      	ldr	r3, [pc, #432]	@ (8007ad4 <HMI_Vacant_W+0x894>)
 8007922:	7a59      	ldrb	r1, [r3, #9]
 8007924:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007926:	2237      	movs	r2, #55	@ 0x37
 8007928:	5499      	strb	r1, [r3, r2]
		SD_buffer[56] = paid_min[10];
 800792a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad4 <HMI_Vacant_W+0x894>)
 800792c:	7a99      	ldrb	r1, [r3, #10]
 800792e:	4b68      	ldr	r3, [pc, #416]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007930:	2238      	movs	r2, #56	@ 0x38
 8007932:	5499      	strb	r1, [r3, r2]
		SD_buffer[57] = 0x2E;      //.
 8007934:	4b66      	ldr	r3, [pc, #408]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007936:	2239      	movs	r2, #57	@ 0x39
 8007938:	212e      	movs	r1, #46	@ 0x2e
 800793a:	5499      	strb	r1, [r3, r2]
		SD_buffer[58] = paid_min[12];
 800793c:	4b65      	ldr	r3, [pc, #404]	@ (8007ad4 <HMI_Vacant_W+0x894>)
 800793e:	7b19      	ldrb	r1, [r3, #12]
 8007940:	4b63      	ldr	r3, [pc, #396]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007942:	223a      	movs	r2, #58	@ 0x3a
 8007944:	5499      	strb	r1, [r3, r2]
		SD_buffer[59] = paid_min[13];
 8007946:	4b63      	ldr	r3, [pc, #396]	@ (8007ad4 <HMI_Vacant_W+0x894>)
 8007948:	7b59      	ldrb	r1, [r3, #13]
 800794a:	4b61      	ldr	r3, [pc, #388]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 800794c:	223b      	movs	r2, #59	@ 0x3b
 800794e:	5499      	strb	r1, [r3, r2]
		SD_buffer[60] = 0x20;
 8007950:	4b5f      	ldr	r3, [pc, #380]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007952:	223c      	movs	r2, #60	@ 0x3c
 8007954:	2120      	movs	r1, #32
 8007956:	5499      	strb	r1, [r3, r2]

		//journey time
		jtime_d = ((ttime_counter / 60.0)* 1000) / 10; //changed
 8007958:	4b5f      	ldr	r3, [pc, #380]	@ (8007ad8 <HMI_Vacant_W+0x898>)
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	0018      	movs	r0, r3
 800795e:	f7fb fc3b 	bl	80031d8 <__aeabi_i2d>
 8007962:	2200      	movs	r2, #0
 8007964:	4b5d      	ldr	r3, [pc, #372]	@ (8007adc <HMI_Vacant_W+0x89c>)
 8007966:	f7fa f953 	bl	8001c10 <__aeabi_ddiv>
 800796a:	0002      	movs	r2, r0
 800796c:	000b      	movs	r3, r1
 800796e:	0010      	movs	r0, r2
 8007970:	0019      	movs	r1, r3
 8007972:	2200      	movs	r2, #0
 8007974:	4b5a      	ldr	r3, [pc, #360]	@ (8007ae0 <HMI_Vacant_W+0x8a0>)
 8007976:	f7fa fd8f 	bl	8002498 <__aeabi_dmul>
 800797a:	0002      	movs	r2, r0
 800797c:	000b      	movs	r3, r1
 800797e:	0010      	movs	r0, r2
 8007980:	0019      	movs	r1, r3
 8007982:	2200      	movs	r2, #0
 8007984:	4b57      	ldr	r3, [pc, #348]	@ (8007ae4 <HMI_Vacant_W+0x8a4>)
 8007986:	f7fa f943 	bl	8001c10 <__aeabi_ddiv>
 800798a:	0002      	movs	r2, r0
 800798c:	000b      	movs	r3, r1
 800798e:	0010      	movs	r0, r2
 8007990:	0019      	movs	r1, r3
 8007992:	f7f8 fdef 	bl	8000574 <__aeabi_d2uiz>
 8007996:	0002      	movs	r2, r0
 8007998:	4b53      	ldr	r3, [pc, #332]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 800799a:	601a      	str	r2, [r3, #0]
		jtime[7] = (jtime_d /1 % 10) + 0x30;
 800799c:	4b52      	ldr	r3, [pc, #328]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	210a      	movs	r1, #10
 80079a2:	0018      	movs	r0, r3
 80079a4:	f7f8 fc46 	bl	8000234 <__aeabi_uidivmod>
 80079a8:	000b      	movs	r3, r1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	3330      	adds	r3, #48	@ 0x30
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	4b4e      	ldr	r3, [pc, #312]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 80079b2:	71da      	strb	r2, [r3, #7]
		jtime[6] = (jtime_d /10 % 10) + 0x30;
 80079b4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	210a      	movs	r1, #10
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7f8 fbb4 	bl	8000128 <__udivsi3>
 80079c0:	0003      	movs	r3, r0
 80079c2:	210a      	movs	r1, #10
 80079c4:	0018      	movs	r0, r3
 80079c6:	f7f8 fc35 	bl	8000234 <__aeabi_uidivmod>
 80079ca:	000b      	movs	r3, r1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3330      	adds	r3, #48	@ 0x30
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	4b46      	ldr	r3, [pc, #280]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 80079d4:	719a      	strb	r2, [r3, #6]
		jtime[5] = (jtime_d /100 % 10) + 0x30;
 80079d6:	4b44      	ldr	r3, [pc, #272]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2164      	movs	r1, #100	@ 0x64
 80079dc:	0018      	movs	r0, r3
 80079de:	f7f8 fba3 	bl	8000128 <__udivsi3>
 80079e2:	0003      	movs	r3, r0
 80079e4:	210a      	movs	r1, #10
 80079e6:	0018      	movs	r0, r3
 80079e8:	f7f8 fc24 	bl	8000234 <__aeabi_uidivmod>
 80079ec:	000b      	movs	r3, r1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	3330      	adds	r3, #48	@ 0x30
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	4b3d      	ldr	r3, [pc, #244]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 80079f6:	715a      	strb	r2, [r3, #5]
		jtime[4] = (jtime_d /1000 % 10) + 0x30;
 80079f8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	22fa      	movs	r2, #250	@ 0xfa
 80079fe:	0091      	lsls	r1, r2, #2
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7f8 fb91 	bl	8000128 <__udivsi3>
 8007a06:	0003      	movs	r3, r0
 8007a08:	210a      	movs	r1, #10
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7f8 fc12 	bl	8000234 <__aeabi_uidivmod>
 8007a10:	000b      	movs	r3, r1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	3330      	adds	r3, #48	@ 0x30
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 8007a1a:	711a      	strb	r2, [r3, #4]
		jtime[3] = (jtime_d /10000 % 10) + 0x30;
 8007a1c:	4b32      	ldr	r3, [pc, #200]	@ (8007ae8 <HMI_Vacant_W+0x8a8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4933      	ldr	r1, [pc, #204]	@ (8007af0 <HMI_Vacant_W+0x8b0>)
 8007a22:	0018      	movs	r0, r3
 8007a24:	f7f8 fb80 	bl	8000128 <__udivsi3>
 8007a28:	0003      	movs	r3, r0
 8007a2a:	210a      	movs	r1, #10
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f7f8 fc01 	bl	8000234 <__aeabi_uidivmod>
 8007a32:	000b      	movs	r3, r1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	3330      	adds	r3, #48	@ 0x30
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 8007a3c:	70da      	strb	r2, [r3, #3]

		if (jtime[3] == 0x30)
 8007a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 8007a40:	78db      	ldrb	r3, [r3, #3]
 8007a42:	2b30      	cmp	r3, #48	@ 0x30
 8007a44:	d104      	bne.n	8007a50 <HMI_Vacant_W+0x810>
			SD_buffer[61] = 0x20;
 8007a46:	4b22      	ldr	r3, [pc, #136]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007a48:	223d      	movs	r2, #61	@ 0x3d
 8007a4a:	2120      	movs	r1, #32
 8007a4c:	5499      	strb	r1, [r3, r2]
 8007a4e:	e004      	b.n	8007a5a <HMI_Vacant_W+0x81a>
		else
			SD_buffer[61] = jtime[3];
 8007a50:	4b26      	ldr	r3, [pc, #152]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 8007a52:	78d9      	ldrb	r1, [r3, #3]
 8007a54:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007a56:	223d      	movs	r2, #61	@ 0x3d
 8007a58:	5499      	strb	r1, [r3, r2]
		if (jtime[4] == 0x30)
 8007a5a:	4b24      	ldr	r3, [pc, #144]	@ (8007aec <HMI_Vacant_W+0x8ac>)
 8007a5c:	791b      	ldrb	r3, [r3, #4]
 8007a5e:	2b30      	cmp	r3, #48	@ 0x30
 8007a60:	d148      	bne.n	8007af4 <HMI_Vacant_W+0x8b4>
			SD_buffer[62] = 0x20;
 8007a62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <HMI_Vacant_W+0x890>)
 8007a64:	223e      	movs	r2, #62	@ 0x3e
 8007a66:	2120      	movs	r1, #32
 8007a68:	5499      	strb	r1, [r3, r2]
 8007a6a:	e048      	b.n	8007afe <HMI_Vacant_W+0x8be>
 8007a6c:	20000b06 	.word	0x20000b06
 8007a70:	20000090 	.word	0x20000090
 8007a74:	20000700 	.word	0x20000700
 8007a78:	0801a08c 	.word	0x0801a08c
 8007a7c:	20000ae8 	.word	0x20000ae8
 8007a80:	0801a0bc 	.word	0x0801a0bc
 8007a84:	0801a0f4 	.word	0x0801a0f4
 8007a88:	20000ae4 	.word	0x20000ae4
 8007a8c:	0801a0fc 	.word	0x0801a0fc
 8007a90:	0801a108 	.word	0x0801a108
 8007a94:	20000034 	.word	0x20000034
 8007a98:	2000003c 	.word	0x2000003c
 8007a9c:	20000e28 	.word	0x20000e28
 8007aa0:	20000e2c 	.word	0x20000e2c
 8007aa4:	20000e30 	.word	0x20000e30
 8007aa8:	20000e34 	.word	0x20000e34
 8007aac:	20000e3c 	.word	0x20000e3c
 8007ab0:	20000e38 	.word	0x20000e38
 8007ab4:	20000be8 	.word	0x20000be8
 8007ab8:	200002cb 	.word	0x200002cb
 8007abc:	200002c9 	.word	0x200002c9
 8007ac0:	20000bcc 	.word	0x20000bcc
 8007ac4:	200002ca 	.word	0x200002ca
 8007ac8:	20000074 	.word	0x20000074
 8007acc:	2000025c 	.word	0x2000025c
 8007ad0:	200034fc 	.word	0x200034fc
 8007ad4:	2000029c 	.word	0x2000029c
 8007ad8:	20001016 	.word	0x20001016
 8007adc:	404e0000 	.word	0x404e0000
 8007ae0:	408f4000 	.word	0x408f4000
 8007ae4:	40240000 	.word	0x40240000
 8007ae8:	20001010 	.word	0x20001010
 8007aec:	20001074 	.word	0x20001074
 8007af0:	00002710 	.word	0x00002710
		else
			SD_buffer[62] = jtime[4];
 8007af4:	4b75      	ldr	r3, [pc, #468]	@ (8007ccc <HMI_Vacant_W+0xa8c>)
 8007af6:	7919      	ldrb	r1, [r3, #4]
 8007af8:	4b75      	ldr	r3, [pc, #468]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007afa:	223e      	movs	r2, #62	@ 0x3e
 8007afc:	5499      	strb	r1, [r3, r2]

		SD_buffer[63] = jtime[5];
 8007afe:	4b73      	ldr	r3, [pc, #460]	@ (8007ccc <HMI_Vacant_W+0xa8c>)
 8007b00:	7959      	ldrb	r1, [r3, #5]
 8007b02:	4b73      	ldr	r3, [pc, #460]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b04:	223f      	movs	r2, #63	@ 0x3f
 8007b06:	5499      	strb	r1, [r3, r2]
		SD_buffer[64] = 0x2E;      //.
 8007b08:	4b71      	ldr	r3, [pc, #452]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b0a:	2240      	movs	r2, #64	@ 0x40
 8007b0c:	212e      	movs	r1, #46	@ 0x2e
 8007b0e:	5499      	strb	r1, [r3, r2]
		SD_buffer[65] = jtime[6];
 8007b10:	4b6e      	ldr	r3, [pc, #440]	@ (8007ccc <HMI_Vacant_W+0xa8c>)
 8007b12:	7999      	ldrb	r1, [r3, #6]
 8007b14:	4b6e      	ldr	r3, [pc, #440]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b16:	2241      	movs	r2, #65	@ 0x41
 8007b18:	5499      	strb	r1, [r3, r2]
		SD_buffer[66] = jtime[7];
 8007b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8007ccc <HMI_Vacant_W+0xa8c>)
 8007b1c:	79d9      	ldrb	r1, [r3, #7]
 8007b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b20:	2242      	movs	r2, #66	@ 0x42
 8007b22:	5499      	strb	r1, [r3, r2]
		SD_buffer[67] = 0x20;
 8007b24:	4b6a      	ldr	r3, [pc, #424]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b26:	2243      	movs	r2, #67	@ 0x43
 8007b28:	2120      	movs	r1, #32
 8007b2a:	5499      	strb	r1, [r3, r2]
		ttime_counter = 0;
 8007b2c:	4b69      	ldr	r3, [pc, #420]	@ (8007cd4 <HMI_Vacant_W+0xa94>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	801a      	strh	r2, [r3, #0]

		SD_buffer[68] = paid_km[8];
 8007b32:	4b69      	ldr	r3, [pc, #420]	@ (8007cd8 <HMI_Vacant_W+0xa98>)
 8007b34:	7a19      	ldrb	r1, [r3, #8]
 8007b36:	4b66      	ldr	r3, [pc, #408]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b38:	2244      	movs	r2, #68	@ 0x44
 8007b3a:	5499      	strb	r1, [r3, r2]
		SD_buffer[69] = paid_km[9];
 8007b3c:	4b66      	ldr	r3, [pc, #408]	@ (8007cd8 <HMI_Vacant_W+0xa98>)
 8007b3e:	7a59      	ldrb	r1, [r3, #9]
 8007b40:	4b63      	ldr	r3, [pc, #396]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b42:	2245      	movs	r2, #69	@ 0x45
 8007b44:	5499      	strb	r1, [r3, r2]
		SD_buffer[70] = paid_km[10];
 8007b46:	4b64      	ldr	r3, [pc, #400]	@ (8007cd8 <HMI_Vacant_W+0xa98>)
 8007b48:	7a99      	ldrb	r1, [r3, #10]
 8007b4a:	4b61      	ldr	r3, [pc, #388]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b4c:	2246      	movs	r2, #70	@ 0x46
 8007b4e:	5499      	strb	r1, [r3, r2]
		SD_buffer[71] = 0x2E;
 8007b50:	4b5f      	ldr	r3, [pc, #380]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b52:	2247      	movs	r2, #71	@ 0x47
 8007b54:	212e      	movs	r1, #46	@ 0x2e
 8007b56:	5499      	strb	r1, [r3, r2]
		SD_buffer[72] = paid_km[12];
 8007b58:	4b5f      	ldr	r3, [pc, #380]	@ (8007cd8 <HMI_Vacant_W+0xa98>)
 8007b5a:	7b19      	ldrb	r1, [r3, #12]
 8007b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b5e:	2248      	movs	r2, #72	@ 0x48
 8007b60:	5499      	strb	r1, [r3, r2]
		SD_buffer[73] = paid_km[13];
 8007b62:	4b5d      	ldr	r3, [pc, #372]	@ (8007cd8 <HMI_Vacant_W+0xa98>)
 8007b64:	7b59      	ldrb	r1, [r3, #13]
 8007b66:	4b5a      	ldr	r3, [pc, #360]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b68:	2249      	movs	r2, #73	@ 0x49
 8007b6a:	5499      	strb	r1, [r3, r2]
		SD_buffer[74] = 0x20;
 8007b6c:	4b58      	ldr	r3, [pc, #352]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b6e:	224a      	movs	r2, #74	@ 0x4a
 8007b70:	2120      	movs	r1, #32
 8007b72:	5499      	strb	r1, [r3, r2]

		SD_buffer[75] = total_km[8];
 8007b74:	4b59      	ldr	r3, [pc, #356]	@ (8007cdc <HMI_Vacant_W+0xa9c>)
 8007b76:	7a19      	ldrb	r1, [r3, #8]
 8007b78:	4b55      	ldr	r3, [pc, #340]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b7a:	224b      	movs	r2, #75	@ 0x4b
 8007b7c:	5499      	strb	r1, [r3, r2]
		SD_buffer[76] = total_km[9];
 8007b7e:	4b57      	ldr	r3, [pc, #348]	@ (8007cdc <HMI_Vacant_W+0xa9c>)
 8007b80:	7a59      	ldrb	r1, [r3, #9]
 8007b82:	4b53      	ldr	r3, [pc, #332]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b84:	224c      	movs	r2, #76	@ 0x4c
 8007b86:	5499      	strb	r1, [r3, r2]
		SD_buffer[77] = total_km[10];
 8007b88:	4b54      	ldr	r3, [pc, #336]	@ (8007cdc <HMI_Vacant_W+0xa9c>)
 8007b8a:	7a99      	ldrb	r1, [r3, #10]
 8007b8c:	4b50      	ldr	r3, [pc, #320]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b8e:	224d      	movs	r2, #77	@ 0x4d
 8007b90:	5499      	strb	r1, [r3, r2]
		SD_buffer[78] = 0x2E;        //.
 8007b92:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007b94:	224e      	movs	r2, #78	@ 0x4e
 8007b96:	212e      	movs	r1, #46	@ 0x2e
 8007b98:	5499      	strb	r1, [r3, r2]
		SD_buffer[79] = total_km[12];
 8007b9a:	4b50      	ldr	r3, [pc, #320]	@ (8007cdc <HMI_Vacant_W+0xa9c>)
 8007b9c:	7b19      	ldrb	r1, [r3, #12]
 8007b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007ba0:	224f      	movs	r2, #79	@ 0x4f
 8007ba2:	5499      	strb	r1, [r3, r2]
		SD_buffer[80] = total_km[13];
 8007ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8007cdc <HMI_Vacant_W+0xa9c>)
 8007ba6:	7b59      	ldrb	r1, [r3, #13]
 8007ba8:	4b49      	ldr	r3, [pc, #292]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007baa:	2250      	movs	r2, #80	@ 0x50
 8007bac:	5499      	strb	r1, [r3, r2]
		SD_buffer[81] = 0x20;
 8007bae:	4b48      	ldr	r3, [pc, #288]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007bb0:	2251      	movs	r2, #81	@ 0x51
 8007bb2:	2120      	movs	r1, #32
 8007bb4:	5499      	strb	r1, [r3, r2]

		SD_buffer[113] = 0x0A; //new line
 8007bb6:	4b46      	ldr	r3, [pc, #280]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007bb8:	2271      	movs	r2, #113	@ 0x71
 8007bba:	210a      	movs	r1, #10
 8007bbc:	5499      	strb	r1, [r3, r2]
		fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8007bbe:	4948      	ldr	r1, [pc, #288]	@ (8007ce0 <HMI_Vacant_W+0xaa0>)
 8007bc0:	4b48      	ldr	r3, [pc, #288]	@ (8007ce4 <HMI_Vacant_W+0xaa4>)
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f010 faaf 	bl	8018128 <f_open>
 8007bca:	0003      	movs	r3, r0
 8007bcc:	001a      	movs	r2, r3
 8007bce:	4b46      	ldr	r3, [pc, #280]	@ (8007ce8 <HMI_Vacant_W+0xaa8>)
 8007bd0:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 8007bd2:	4b44      	ldr	r3, [pc, #272]	@ (8007ce4 <HMI_Vacant_W+0xaa4>)
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	4b43      	ldr	r3, [pc, #268]	@ (8007ce4 <HMI_Vacant_W+0xaa4>)
 8007bd8:	0011      	movs	r1, r2
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f010 ff01 	bl	80189e2 <f_lseek>
 8007be0:	0003      	movs	r3, r0
 8007be2:	001a      	movs	r2, r3
 8007be4:	4b40      	ldr	r3, [pc, #256]	@ (8007ce8 <HMI_Vacant_W+0xaa8>)
 8007be6:	701a      	strb	r2, [r3, #0]
//		fresult = f_puts("AB1234 A000001 2023-07-18 18:18:30 2023-07-18 18:35:54 4.3 17.4 10.3 10.8 5.6 107.8 5 112.8\n", &fil);
		                //XY1234 A00001 2024-09-16 15:59:21 2024-09-16 15:59:25   0.05   0.06   0.00   0.00    0.00   25.50   0.00   25.50
		char const * ch = (const char*)&SD_buffer;
 8007be8:	4b39      	ldr	r3, [pc, #228]	@ (8007cd0 <HMI_Vacant_W+0xa90>)
 8007bea:	607b      	str	r3, [r7, #4]
		fresult = f_puts(ch, &fil);
 8007bec:	4a3d      	ldr	r2, [pc, #244]	@ (8007ce4 <HMI_Vacant_W+0xaa4>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0011      	movs	r1, r2
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f011 f9a0 	bl	8018f38 <f_puts>
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ce8 <HMI_Vacant_W+0xaa8>)
 8007bfe:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 8007c00:	4b38      	ldr	r3, [pc, #224]	@ (8007ce4 <HMI_Vacant_W+0xaa4>)
 8007c02:	0018      	movs	r0, r3
 8007c04:	f010 feb9 	bl	801897a <f_close>
		clear_buffer();
 8007c08:	f7fc f982 	bl	8003f10 <clear_buffer>
	}
	Flag_Control_Up();
 8007c0c:	f003 fae6 	bl	800b1dc <Flag_Control_Up>
	flag_sp = 1;
 8007c10:	4b36      	ldr	r3, [pc, #216]	@ (8007cec <HMI_Vacant_W+0xaac>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	701a      	strb	r2, [r3, #0]
	flag_vs_first = 1;
 8007c16:	4b36      	ldr	r3, [pc, #216]	@ (8007cf0 <HMI_Vacant_W+0xab0>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
	Flag_added = FALSE;                           //5 second  add total fare.
 8007c1c:	4b35      	ldr	r3, [pc, #212]	@ (8007cf4 <HMI_Vacant_W+0xab4>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
	Flag_payment = FALSE;							//delete payment QR code
 8007c22:	4b35      	ldr	r3, [pc, #212]	@ (8007cf8 <HMI_Vacant_W+0xab8>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
	payment_wait=0;									//delete payment QR code
 8007c28:	4b34      	ldr	r3, [pc, #208]	@ (8007cfc <HMI_Vacant_W+0xabc>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
	Fu = 0;
 8007c2e:	4b34      	ldr	r3, [pc, #208]	@ (8007d00 <HMI_Vacant_W+0xac0>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
	Ft = 0;
 8007c34:	4b33      	ldr	r3, [pc, #204]	@ (8007d04 <HMI_Vacant_W+0xac4>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
	Fd = 0;
 8007c3a:	4b33      	ldr	r3, [pc, #204]	@ (8007d08 <HMI_Vacant_W+0xac8>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
	Dt = 0;
 8007c40:	4b32      	ldr	r3, [pc, #200]	@ (8007d0c <HMI_Vacant_W+0xacc>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
	DtX = 0;
 8007c46:	4b32      	ldr	r3, [pc, #200]	@ (8007d10 <HMI_Vacant_W+0xad0>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
	Fi = 0; //2.35;
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <HMI_Vacant_W+0xad4>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
	fare_d_x10 = 0;
 8007c52:	4b31      	ldr	r3, [pc, #196]	@ (8007d18 <HMI_Vacant_W+0xad8>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
	fare_d_x100 = 0;
 8007c58:	4b30      	ldr	r3, [pc, #192]	@ (8007d1c <HMI_Vacant_W+0xadc>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
	fare_d = 0;
 8007c5e:	4b30      	ldr	r3, [pc, #192]	@ (8007d20 <HMI_Vacant_W+0xae0>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
	Last_fare_d = 0;
 8007c64:	4b2f      	ldr	r3, [pc, #188]	@ (8007d24 <HMI_Vacant_W+0xae4>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
	fare = 0;
 8007c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d28 <HMI_Vacant_W+0xae8>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
	fare_km = 0;
 8007c70:	4b2e      	ldr	r3, [pc, #184]	@ (8007d2c <HMI_Vacant_W+0xaec>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
	fare_min = 0;
 8007c76:	4b2e      	ldr	r3, [pc, #184]	@ (8007d30 <HMI_Vacant_W+0xaf0>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
	Flag_2km = FALSE;
 8007c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d34 <HMI_Vacant_W+0xaf4>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
	flag_fare_r = FALSE;
 8007c82:	4b2d      	ldr	r3, [pc, #180]	@ (8007d38 <HMI_Vacant_W+0xaf8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
	Final_price = 0;
 8007c88:	4b2c      	ldr	r3, [pc, #176]	@ (8007d3c <HMI_Vacant_W+0xafc>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
	Final_price_x10 = 0;
 8007c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d40 <HMI_Vacant_W+0xb00>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
	Addition = 0;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <HMI_Vacant_W+0xb04>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
	flag_count = 0;
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8007d48 <HMI_Vacant_W+0xb08>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
	change_count = 0;
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d4c <HMI_Vacant_W+0xb0c>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	fare_km_x = 0;
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d50 <HMI_Vacant_W+0xb10>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
//	ttime_counter = 0; //move to end
	last_counter = 0;
 8007cac:	4b29      	ldr	r3, [pc, #164]	@ (8007d54 <HMI_Vacant_W+0xb14>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
	Dis = 0;                                    //空旗時沒按Clr 清Dis=>0
 8007cb2:	4b29      	ldr	r3, [pc, #164]	@ (8007d58 <HMI_Vacant_W+0xb18>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
	Distance = 0;
 8007cb8:	4b28      	ldr	r3, [pc, #160]	@ (8007d5c <HMI_Vacant_W+0xb1c>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
	distance = 0;
 8007cbe:	4b28      	ldr	r3, [pc, #160]	@ (8007d60 <HMI_Vacant_W+0xb20>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	46c0      	nop			@ (mov r8, r8)
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b002      	add	sp, #8
 8007cca:	bdb0      	pop	{r4, r5, r7, pc}
 8007ccc:	20001074 	.word	0x20001074
 8007cd0:	200034fc 	.word	0x200034fc
 8007cd4:	20001016 	.word	0x20001016
 8007cd8:	2000028c 	.word	0x2000028c
 8007cdc:	2000027c 	.word	0x2000027c
 8007ce0:	080199e8 	.word	0x080199e8
 8007ce4:	200020c4 	.word	0x200020c4
 8007ce8:	200030f4 	.word	0x200030f4
 8007cec:	20000539 	.word	0x20000539
 8007cf0:	20000bcf 	.word	0x20000bcf
 8007cf4:	20000b07 	.word	0x20000b07
 8007cf8:	20000b09 	.word	0x20000b09
 8007cfc:	20000b0a 	.word	0x20000b0a
 8007d00:	20000e8c 	.word	0x20000e8c
 8007d04:	20000e90 	.word	0x20000e90
 8007d08:	20000e94 	.word	0x20000e94
 8007d0c:	20000e84 	.word	0x20000e84
 8007d10:	20000e88 	.word	0x20000e88
 8007d14:	20000e80 	.word	0x20000e80
 8007d18:	20000ea8 	.word	0x20000ea8
 8007d1c:	20000eac 	.word	0x20000eac
 8007d20:	20000ea0 	.word	0x20000ea0
 8007d24:	20000ea4 	.word	0x20000ea4
 8007d28:	20000e9c 	.word	0x20000e9c
 8007d2c:	20000eb4 	.word	0x20000eb4
 8007d30:	20000eb8 	.word	0x20000eb8
 8007d34:	20000e98 	.word	0x20000e98
 8007d38:	20000ec4 	.word	0x20000ec4
 8007d3c:	20000af4 	.word	0x20000af4
 8007d40:	20000bd8 	.word	0x20000bd8
 8007d44:	20000b18 	.word	0x20000b18
 8007d48:	20001014 	.word	0x20001014
 8007d4c:	20001015 	.word	0x20001015
 8007d50:	20000ebc 	.word	0x20000ebc
 8007d54:	20000e78 	.word	0x20000e78
 8007d58:	20000b0c 	.word	0x20000b0c
 8007d5c:	20000e68 	.word	0x20000e68
 8007d60:	20000e6c 	.word	0x20000e6c

08007d64 <extras_rd>:

void extras_rd(void)
{
 8007d64:	b590      	push	{r4, r7, lr}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
	Last_Addition = Addition;
 8007d6a:	4b79      	ldr	r3, [pc, #484]	@ (8007f50 <extras_rd+0x1ec>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b79      	ldr	r3, [pc, #484]	@ (8007f54 <extras_rd+0x1f0>)
 8007d70:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus10, 7, 0x0E);
 8007d72:	4979      	ldr	r1, [pc, #484]	@ (8007f58 <extras_rd+0x1f4>)
 8007d74:	4879      	ldr	r0, [pc, #484]	@ (8007f5c <extras_rd+0x1f8>)
 8007d76:	230e      	movs	r3, #14
 8007d78:	2207      	movs	r2, #7
 8007d7a:	f00b fe59 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007d7e:	2002      	movs	r0, #2
 8007d80:	f006 fbd0 	bl	800e524 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 8007d84:	4b76      	ldr	r3, [pc, #472]	@ (8007f60 <extras_rd+0x1fc>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01f      	beq.n	8007dcc <extras_rd+0x68>
	{
		RxFlag = FALSE;
 8007d8c:	4b74      	ldr	r3, [pc, #464]	@ (8007f60 <extras_rd+0x1fc>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	701a      	strb	r2, [r3, #0]
		unsigned char buffer1[2];
		buffer1[0] = RxBuff[7];
 8007d92:	4b74      	ldr	r3, [pc, #464]	@ (8007f64 <extras_rd+0x200>)
 8007d94:	79da      	ldrb	r2, [r3, #7]
 8007d96:	2408      	movs	r4, #8
 8007d98:	193b      	adds	r3, r7, r4
 8007d9a:	701a      	strb	r2, [r3, #0]
		buffer1[1] = RxBuff[8];
 8007d9c:	4b71      	ldr	r3, [pc, #452]	@ (8007f64 <extras_rd+0x200>)
 8007d9e:	7a1a      	ldrb	r2, [r3, #8]
 8007da0:	193b      	adds	r3, r7, r4
 8007da2:	705a      	strb	r2, [r3, #1]
		Plus_10 = byte_to_long(buffer1);
 8007da4:	193b      	adds	r3, r7, r4
 8007da6:	0018      	movs	r0, r3
 8007da8:	f000 fb96 	bl	80084d8 <byte_to_long>
 8007dac:	0003      	movs	r3, r0
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	4b6d      	ldr	r3, [pc, #436]	@ (8007f68 <extras_rd+0x204>)
 8007db2:	801a      	strh	r2, [r3, #0]
		memset(RxBuff,0,12);
 8007db4:	4b6b      	ldr	r3, [pc, #428]	@ (8007f64 <extras_rd+0x200>)
 8007db6:	220c      	movs	r2, #12
 8007db8:	2100      	movs	r1, #0
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f011 f988 	bl	80190d0 <memset>
		memset(buffer1,0,2);
 8007dc0:	193b      	adds	r3, r7, r4
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f011 f982 	bl	80190d0 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus1, 7, 0x0E);
 8007dcc:	4967      	ldr	r1, [pc, #412]	@ (8007f6c <extras_rd+0x208>)
 8007dce:	4863      	ldr	r0, [pc, #396]	@ (8007f5c <extras_rd+0x1f8>)
 8007dd0:	230e      	movs	r3, #14
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	f00b fe2c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007dd8:	2002      	movs	r0, #2
 8007dda:	f006 fba3 	bl	800e524 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 8007dde:	4b60      	ldr	r3, [pc, #384]	@ (8007f60 <extras_rd+0x1fc>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01e      	beq.n	8007e24 <extras_rd+0xc0>
	{
		RxFlag = FALSE;
 8007de6:	4b5e      	ldr	r3, [pc, #376]	@ (8007f60 <extras_rd+0x1fc>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
		unsigned char buffer2[2];
		buffer2[0] = RxBuff[7];
 8007dec:	4b5d      	ldr	r3, [pc, #372]	@ (8007f64 <extras_rd+0x200>)
 8007dee:	79da      	ldrb	r2, [r3, #7]
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	701a      	strb	r2, [r3, #0]
		buffer2[1] = RxBuff[8];
 8007df4:	4b5b      	ldr	r3, [pc, #364]	@ (8007f64 <extras_rd+0x200>)
 8007df6:	7a1a      	ldrb	r2, [r3, #8]
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	705a      	strb	r2, [r3, #1]
		Plus_1 = byte_to_long(buffer2);
 8007dfc:	1d3b      	adds	r3, r7, #4
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 fb6a 	bl	80084d8 <byte_to_long>
 8007e04:	0003      	movs	r3, r0
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	4b59      	ldr	r3, [pc, #356]	@ (8007f70 <extras_rd+0x20c>)
 8007e0a:	801a      	strh	r2, [r3, #0]
		memset(RxBuff,0,12);
 8007e0c:	4b55      	ldr	r3, [pc, #340]	@ (8007f64 <extras_rd+0x200>)
 8007e0e:	220c      	movs	r2, #12
 8007e10:	2100      	movs	r1, #0
 8007e12:	0018      	movs	r0, r3
 8007e14:	f011 f95c 	bl	80190d0 <memset>
		memset(buffer2,0,2);
 8007e18:	1d3b      	adds	r3, r7, #4
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f011 f956 	bl	80190d0 <memset>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Clear, 7, 0x0E);
 8007e24:	4953      	ldr	r1, [pc, #332]	@ (8007f74 <extras_rd+0x210>)
 8007e26:	484d      	ldr	r0, [pc, #308]	@ (8007f5c <extras_rd+0x1f8>)
 8007e28:	230e      	movs	r3, #14
 8007e2a:	2207      	movs	r2, #7
 8007e2c:	f00b fe00 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007e30:	2002      	movs	r0, #2
 8007e32:	f006 fb77 	bl	800e524 <HAL_Delay>
//	HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
	if(RxFlag)
 8007e36:	4b4a      	ldr	r3, [pc, #296]	@ (8007f60 <extras_rd+0x1fc>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d04f      	beq.n	8007ede <extras_rd+0x17a>
	{
		RxFlag = FALSE;
 8007e3e:	4b48      	ldr	r3, [pc, #288]	@ (8007f60 <extras_rd+0x1fc>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8007e44:	4b47      	ldr	r3, [pc, #284]	@ (8007f64 <extras_rd+0x200>)
 8007e46:	7a1b      	ldrb	r3, [r3, #8]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d148      	bne.n	8007ede <extras_rd+0x17a>
		{
//			HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
			HAL_UART_Transmit(&huart1,Clear_clear,8,0x10);
 8007e4c:	494a      	ldr	r1, [pc, #296]	@ (8007f78 <extras_rd+0x214>)
 8007e4e:	4843      	ldr	r0, [pc, #268]	@ (8007f5c <extras_rd+0x1f8>)
 8007e50:	2310      	movs	r3, #16
 8007e52:	2208      	movs	r2, #8
 8007e54:	f00b fdec 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Plus10_clear, 8, 0x10);
 8007e58:	4948      	ldr	r1, [pc, #288]	@ (8007f7c <extras_rd+0x218>)
 8007e5a:	4840      	ldr	r0, [pc, #256]	@ (8007f5c <extras_rd+0x1f8>)
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	2208      	movs	r2, #8
 8007e60:	f00b fde6 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Plus1_clear, 8, 0x10);
 8007e64:	4946      	ldr	r1, [pc, #280]	@ (8007f80 <extras_rd+0x21c>)
 8007e66:	483d      	ldr	r0, [pc, #244]	@ (8007f5c <extras_rd+0x1f8>)
 8007e68:	2310      	movs	r3, #16
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	f00b fde0 	bl	8013a30 <HAL_UART_Transmit>
			Addition = 0;
 8007e70:	4b37      	ldr	r3, [pc, #220]	@ (8007f50 <extras_rd+0x1ec>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
			Plus_10 = 0;
 8007e76:	4b3c      	ldr	r3, [pc, #240]	@ (8007f68 <extras_rd+0x204>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	801a      	strh	r2, [r3, #0]
			Plus_1 = 0;
 8007e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f70 <extras_rd+0x20c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	801a      	strh	r2, [r3, #0]
			//clear print sub[6]-[11]
			sub[6] = 0x20;
 8007e82:	4b40      	ldr	r3, [pc, #256]	@ (8007f84 <extras_rd+0x220>)
 8007e84:	2220      	movs	r2, #32
 8007e86:	719a      	strb	r2, [r3, #6]
			sub[7] = 0x20;
 8007e88:	4b3e      	ldr	r3, [pc, #248]	@ (8007f84 <extras_rd+0x220>)
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	71da      	strb	r2, [r3, #7]
			sub[8] = 0x20;
 8007e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f84 <extras_rd+0x220>)
 8007e90:	2220      	movs	r2, #32
 8007e92:	721a      	strb	r2, [r3, #8]
			sub[9] = 0x20;
 8007e94:	4b3b      	ldr	r3, [pc, #236]	@ (8007f84 <extras_rd+0x220>)
 8007e96:	2220      	movs	r2, #32
 8007e98:	725a      	strb	r2, [r3, #9]
			sub[10] = 0x20;
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8007f84 <extras_rd+0x220>)
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	729a      	strb	r2, [r3, #10]
			sub[11] = 0x30;
 8007ea0:	4b38      	ldr	r3, [pc, #224]	@ (8007f84 <extras_rd+0x220>)
 8007ea2:	2230      	movs	r2, #48	@ 0x30
 8007ea4:	72da      	strb	r2, [r3, #11]
			//clear print total[4]-[8]
			t_fare[4] = 0x20;
 8007ea6:	4b38      	ldr	r3, [pc, #224]	@ (8007f88 <extras_rd+0x224>)
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	711a      	strb	r2, [r3, #4]
			t_fare[5] = 0x20;
 8007eac:	4b36      	ldr	r3, [pc, #216]	@ (8007f88 <extras_rd+0x224>)
 8007eae:	2220      	movs	r2, #32
 8007eb0:	715a      	strb	r2, [r3, #5]
			t_fare[6] = 0x20;
 8007eb2:	4b35      	ldr	r3, [pc, #212]	@ (8007f88 <extras_rd+0x224>)
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	719a      	strb	r2, [r3, #6]
			t_fare[7] = 0x20;
 8007eb8:	4b33      	ldr	r3, [pc, #204]	@ (8007f88 <extras_rd+0x224>)
 8007eba:	2220      	movs	r2, #32
 8007ebc:	71da      	strb	r2, [r3, #7]
			t_fare[8] = 0x20;
 8007ebe:	4b32      	ldr	r3, [pc, #200]	@ (8007f88 <extras_rd+0x224>)
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	721a      	strb	r2, [r3, #8]
			uint8_t temp_array[4];
			Long_to_byte(Addition,temp_array);
 8007ec4:	4b22      	ldr	r3, [pc, #136]	@ (8007f50 <extras_rd+0x1ec>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	003a      	movs	r2, r7
 8007eca:	0011      	movs	r1, r2
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f000 fa11 	bl	80082f4 <Long_to_byte>
			HMI_Command(Add_Charge,temp_array,10);
 8007ed2:	0039      	movs	r1, r7
 8007ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8007f8c <extras_rd+0x228>)
 8007ed6:	220a      	movs	r2, #10
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 fa2a 	bl	8008332 <HMI_Command>
		}
	}

	Addition = 10 * (10 * Plus_10 + Plus_1);
 8007ede:	4b22      	ldr	r3, [pc, #136]	@ (8007f68 <extras_rd+0x204>)
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	0013      	movs	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	189b      	adds	r3, r3, r2
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	001a      	movs	r2, r3
 8007eee:	4b20      	ldr	r3, [pc, #128]	@ (8007f70 <extras_rd+0x20c>)
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	18d2      	adds	r2, r2, r3
 8007ef4:	0013      	movs	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	189b      	adds	r3, r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	001a      	movs	r2, r3
 8007efe:	4b14      	ldr	r3, [pc, #80]	@ (8007f50 <extras_rd+0x1ec>)
 8007f00:	601a      	str	r2, [r3, #0]
	uint8_t temp_array[4];
	Long_to_byte(Addition,temp_array);
 8007f02:	4b13      	ldr	r3, [pc, #76]	@ (8007f50 <extras_rd+0x1ec>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	240c      	movs	r4, #12
 8007f08:	193a      	adds	r2, r7, r4
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 f9f1 	bl	80082f4 <Long_to_byte>
	HMI_Command(Add_Charge,temp_array,10);
 8007f12:	1939      	adds	r1, r7, r4
 8007f14:	4b1d      	ldr	r3, [pc, #116]	@ (8007f8c <extras_rd+0x228>)
 8007f16:	220a      	movs	r2, #10
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 fa0a 	bl	8008332 <HMI_Command>

	if(Last_Addition != Addition)
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <extras_rd+0x1f0>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <extras_rd+0x1ec>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d002      	beq.n	8007f30 <extras_rd+0x1cc>
	{
		Flag_Addition_Add = TRUE;
 8007f2a:	4b19      	ldr	r3, [pc, #100]	@ (8007f90 <extras_rd+0x22c>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
	}

	if((Addition != 0) && (Flag_Addition_Add == FALSE))
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <extras_rd+0x1ec>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <extras_rd+0x1e2>
 8007f38:	4b15      	ldr	r3, [pc, #84]	@ (8007f90 <extras_rd+0x22c>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <extras_rd+0x1e2>
	{
		Flag_Addition_F = TRUE;
 8007f40:	4b14      	ldr	r3, [pc, #80]	@ (8007f94 <extras_rd+0x230>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
	}
}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b005      	add	sp, #20
 8007f4c:	bd90      	pop	{r4, r7, pc}
 8007f4e:	46c0      	nop			@ (mov r8, r8)
 8007f50:	20000b18 	.word	0x20000b18
 8007f54:	20000b14 	.word	0x20000b14
 8007f58:	0801a050 	.word	0x0801a050
 8007f5c:	20000700 	.word	0x20000700
 8007f60:	20000ae4 	.word	0x20000ae4
 8007f64:	20000ae8 	.word	0x20000ae8
 8007f68:	20000b20 	.word	0x20000b20
 8007f6c:	0801a058 	.word	0x0801a058
 8007f70:	20000b22 	.word	0x20000b22
 8007f74:	0801a060 	.word	0x0801a060
 8007f78:	2000004c 	.word	0x2000004c
 8007f7c:	20000034 	.word	0x20000034
 8007f80:	2000003c 	.word	0x2000003c
 8007f84:	200002ac 	.word	0x200002ac
 8007f88:	200002bc 	.word	0x200002bc
 8007f8c:	0801a02c 	.word	0x0801a02c
 8007f90:	20000b1c 	.word	0x20000b1c
 8007f94:	20000b1d 	.word	0x20000b1d

08007f98 <printer_rd>:

void printer_rd(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Print, 7, 0x0E);
 8007f9c:	496f      	ldr	r1, [pc, #444]	@ (800815c <printer_rd+0x1c4>)
 8007f9e:	4870      	ldr	r0, [pc, #448]	@ (8008160 <printer_rd+0x1c8>)
 8007fa0:	230e      	movs	r3, #14
 8007fa2:	2207      	movs	r2, #7
 8007fa4:	f00b fd44 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8007fa8:	2002      	movs	r0, #2
 8007faa:	f006 fabb 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 8007fae:	4b6d      	ldr	r3, [pc, #436]	@ (8008164 <printer_rd+0x1cc>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d100      	bne.n	8007fb8 <printer_rd+0x20>
 8007fb6:	e0ce      	b.n	8008156 <printer_rd+0x1be>
	{
		RxFlag = FALSE;
 8007fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8008164 <printer_rd+0x1cc>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8007fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8008168 <printer_rd+0x1d0>)
 8007fc0:	7a1b      	ldrb	r3, [r3, #8]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d000      	beq.n	8007fc8 <printer_rd+0x30>
 8007fc6:	e0c6      	b.n	8008156 <printer_rd+0x1be>
		{
//			HAL_UART_Transmit(&huart3,RxBuff,12,0x20);
			HAL_UART_Transmit(&huart1, (uint8_t *) Print_clear, 8, 0x10);
 8007fc8:	4968      	ldr	r1, [pc, #416]	@ (800816c <printer_rd+0x1d4>)
 8007fca:	4865      	ldr	r0, [pc, #404]	@ (8008160 <printer_rd+0x1c8>)
 8007fcc:	2310      	movs	r3, #16
 8007fce:	2208      	movs	r2, #8
 8007fd0:	f00b fd2e 	bl	8013a30 <HAL_UART_Transmit>
			Flag_Printed = TRUE;
 8007fd4:	4b66      	ldr	r3, [pc, #408]	@ (8008170 <printer_rd+0x1d8>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	701a      	strb	r2, [r3, #0]

			//record printer end time
			if((Drv_state == S_STOP) & Flag_Printed & Flag_End_Record)
 8007fda:	4b66      	ldr	r3, [pc, #408]	@ (8008174 <printer_rd+0x1dc>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	3b02      	subs	r3, #2
 8007fe0:	425a      	negs	r2, r3
 8007fe2:	4153      	adcs	r3, r2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	4b61      	ldr	r3, [pc, #388]	@ (8008170 <printer_rd+0x1d8>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	4013      	ands	r3, r2
 8007fee:	4a62      	ldr	r2, [pc, #392]	@ (8008178 <printer_rd+0x1e0>)
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	d100      	bne.n	8007ff8 <printer_rd+0x60>
 8007ff6:	e087      	b.n	8008108 <printer_rd+0x170>
			{
				Flag_End_Record = FALSE;
 8007ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8008178 <printer_rd+0x1e0>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
				//get end time
				//end - dd/mm/yy hh:mm
				//hmi_rtc - yy-mm-dd hh:mm:ss
				if (flag_vs_first == 1)
 8007ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800817c <printer_rd+0x1e4>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d12b      	bne.n	800805e <printer_rd+0xc6>
				{
					flag_vs_first = 0;
 8008006:	4b5d      	ldr	r3, [pc, #372]	@ (800817c <printer_rd+0x1e4>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
					end[0] = start[0];
 800800c:	4b5c      	ldr	r3, [pc, #368]	@ (8008180 <printer_rd+0x1e8>)
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	4b5c      	ldr	r3, [pc, #368]	@ (8008184 <printer_rd+0x1ec>)
 8008012:	701a      	strb	r2, [r3, #0]
					end[1] = start[1];
 8008014:	4b5a      	ldr	r3, [pc, #360]	@ (8008180 <printer_rd+0x1e8>)
 8008016:	785a      	ldrb	r2, [r3, #1]
 8008018:	4b5a      	ldr	r3, [pc, #360]	@ (8008184 <printer_rd+0x1ec>)
 800801a:	705a      	strb	r2, [r3, #1]
					end[3] = start[3];
 800801c:	4b58      	ldr	r3, [pc, #352]	@ (8008180 <printer_rd+0x1e8>)
 800801e:	78da      	ldrb	r2, [r3, #3]
 8008020:	4b58      	ldr	r3, [pc, #352]	@ (8008184 <printer_rd+0x1ec>)
 8008022:	70da      	strb	r2, [r3, #3]
					end[4] = start[4];
 8008024:	4b56      	ldr	r3, [pc, #344]	@ (8008180 <printer_rd+0x1e8>)
 8008026:	791a      	ldrb	r2, [r3, #4]
 8008028:	4b56      	ldr	r3, [pc, #344]	@ (8008184 <printer_rd+0x1ec>)
 800802a:	711a      	strb	r2, [r3, #4]
					end[6] = start[6];
 800802c:	4b54      	ldr	r3, [pc, #336]	@ (8008180 <printer_rd+0x1e8>)
 800802e:	799a      	ldrb	r2, [r3, #6]
 8008030:	4b54      	ldr	r3, [pc, #336]	@ (8008184 <printer_rd+0x1ec>)
 8008032:	719a      	strb	r2, [r3, #6]
					end[7] = start[7];
 8008034:	4b52      	ldr	r3, [pc, #328]	@ (8008180 <printer_rd+0x1e8>)
 8008036:	79da      	ldrb	r2, [r3, #7]
 8008038:	4b52      	ldr	r3, [pc, #328]	@ (8008184 <printer_rd+0x1ec>)
 800803a:	71da      	strb	r2, [r3, #7]
					end[9] = start[9];
 800803c:	4b50      	ldr	r3, [pc, #320]	@ (8008180 <printer_rd+0x1e8>)
 800803e:	7a5a      	ldrb	r2, [r3, #9]
 8008040:	4b50      	ldr	r3, [pc, #320]	@ (8008184 <printer_rd+0x1ec>)
 8008042:	725a      	strb	r2, [r3, #9]
					end[10] = start[10];
 8008044:	4b4e      	ldr	r3, [pc, #312]	@ (8008180 <printer_rd+0x1e8>)
 8008046:	7a9a      	ldrb	r2, [r3, #10]
 8008048:	4b4e      	ldr	r3, [pc, #312]	@ (8008184 <printer_rd+0x1ec>)
 800804a:	729a      	strb	r2, [r3, #10]
					end[12] = start[12];
 800804c:	4b4c      	ldr	r3, [pc, #304]	@ (8008180 <printer_rd+0x1e8>)
 800804e:	7b1a      	ldrb	r2, [r3, #12]
 8008050:	4b4c      	ldr	r3, [pc, #304]	@ (8008184 <printer_rd+0x1ec>)
 8008052:	731a      	strb	r2, [r3, #12]
					end[13] = start[13];
 8008054:	4b4a      	ldr	r3, [pc, #296]	@ (8008180 <printer_rd+0x1e8>)
 8008056:	7b5a      	ldrb	r2, [r3, #13]
 8008058:	4b4a      	ldr	r3, [pc, #296]	@ (8008184 <printer_rd+0x1ec>)
 800805a:	735a      	strb	r2, [r3, #13]
 800805c:	e054      	b.n	8008108 <printer_rd+0x170>
				}
				else if (flag_vs == 0)
 800805e:	4b4a      	ldr	r3, [pc, #296]	@ (8008188 <printer_rd+0x1f0>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d128      	bne.n	80080b8 <printer_rd+0x120>
				{
					//record re-stop start moment
					end[0] = re_stop[0];
 8008066:	4b49      	ldr	r3, [pc, #292]	@ (800818c <printer_rd+0x1f4>)
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	4b46      	ldr	r3, [pc, #280]	@ (8008184 <printer_rd+0x1ec>)
 800806c:	701a      	strb	r2, [r3, #0]
					end[1] = re_stop[1];
 800806e:	4b47      	ldr	r3, [pc, #284]	@ (800818c <printer_rd+0x1f4>)
 8008070:	785a      	ldrb	r2, [r3, #1]
 8008072:	4b44      	ldr	r3, [pc, #272]	@ (8008184 <printer_rd+0x1ec>)
 8008074:	705a      	strb	r2, [r3, #1]
					end[3] = re_stop[3];
 8008076:	4b45      	ldr	r3, [pc, #276]	@ (800818c <printer_rd+0x1f4>)
 8008078:	78da      	ldrb	r2, [r3, #3]
 800807a:	4b42      	ldr	r3, [pc, #264]	@ (8008184 <printer_rd+0x1ec>)
 800807c:	70da      	strb	r2, [r3, #3]
					end[4] = re_stop[4];
 800807e:	4b43      	ldr	r3, [pc, #268]	@ (800818c <printer_rd+0x1f4>)
 8008080:	791a      	ldrb	r2, [r3, #4]
 8008082:	4b40      	ldr	r3, [pc, #256]	@ (8008184 <printer_rd+0x1ec>)
 8008084:	711a      	strb	r2, [r3, #4]
					end[6] = re_stop[6];
 8008086:	4b41      	ldr	r3, [pc, #260]	@ (800818c <printer_rd+0x1f4>)
 8008088:	799a      	ldrb	r2, [r3, #6]
 800808a:	4b3e      	ldr	r3, [pc, #248]	@ (8008184 <printer_rd+0x1ec>)
 800808c:	719a      	strb	r2, [r3, #6]
					end[7] = re_stop[7];
 800808e:	4b3f      	ldr	r3, [pc, #252]	@ (800818c <printer_rd+0x1f4>)
 8008090:	79da      	ldrb	r2, [r3, #7]
 8008092:	4b3c      	ldr	r3, [pc, #240]	@ (8008184 <printer_rd+0x1ec>)
 8008094:	71da      	strb	r2, [r3, #7]
					end[9] = re_stop[9];
 8008096:	4b3d      	ldr	r3, [pc, #244]	@ (800818c <printer_rd+0x1f4>)
 8008098:	7a5a      	ldrb	r2, [r3, #9]
 800809a:	4b3a      	ldr	r3, [pc, #232]	@ (8008184 <printer_rd+0x1ec>)
 800809c:	725a      	strb	r2, [r3, #9]
					end[10] = re_stop[10];
 800809e:	4b3b      	ldr	r3, [pc, #236]	@ (800818c <printer_rd+0x1f4>)
 80080a0:	7a9a      	ldrb	r2, [r3, #10]
 80080a2:	4b38      	ldr	r3, [pc, #224]	@ (8008184 <printer_rd+0x1ec>)
 80080a4:	729a      	strb	r2, [r3, #10]
					end[12] = re_stop[12];
 80080a6:	4b39      	ldr	r3, [pc, #228]	@ (800818c <printer_rd+0x1f4>)
 80080a8:	7b1a      	ldrb	r2, [r3, #12]
 80080aa:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <printer_rd+0x1ec>)
 80080ac:	731a      	strb	r2, [r3, #12]
					end[13] = re_stop[13];
 80080ae:	4b37      	ldr	r3, [pc, #220]	@ (800818c <printer_rd+0x1f4>)
 80080b0:	7b5a      	ldrb	r2, [r3, #13]
 80080b2:	4b34      	ldr	r3, [pc, #208]	@ (8008184 <printer_rd+0x1ec>)
 80080b4:	735a      	strb	r2, [r3, #13]
 80080b6:	e027      	b.n	8008108 <printer_rd+0x170>
				}
				else
				{
					end[0] = hmi_rtc[14];
 80080b8:	4b35      	ldr	r3, [pc, #212]	@ (8008190 <printer_rd+0x1f8>)
 80080ba:	7b9a      	ldrb	r2, [r3, #14]
 80080bc:	4b31      	ldr	r3, [pc, #196]	@ (8008184 <printer_rd+0x1ec>)
 80080be:	701a      	strb	r2, [r3, #0]
					end[1] = hmi_rtc[15];
 80080c0:	4b33      	ldr	r3, [pc, #204]	@ (8008190 <printer_rd+0x1f8>)
 80080c2:	7bda      	ldrb	r2, [r3, #15]
 80080c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <printer_rd+0x1ec>)
 80080c6:	705a      	strb	r2, [r3, #1]
					end[3] = hmi_rtc[11];
 80080c8:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <printer_rd+0x1f8>)
 80080ca:	7ada      	ldrb	r2, [r3, #11]
 80080cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008184 <printer_rd+0x1ec>)
 80080ce:	70da      	strb	r2, [r3, #3]
					end[4] = hmi_rtc[12];
 80080d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <printer_rd+0x1f8>)
 80080d2:	7b1a      	ldrb	r2, [r3, #12]
 80080d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008184 <printer_rd+0x1ec>)
 80080d6:	711a      	strb	r2, [r3, #4]
					end[6] = hmi_rtc[8];
 80080d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008190 <printer_rd+0x1f8>)
 80080da:	7a1a      	ldrb	r2, [r3, #8]
 80080dc:	4b29      	ldr	r3, [pc, #164]	@ (8008184 <printer_rd+0x1ec>)
 80080de:	719a      	strb	r2, [r3, #6]
					end[7] = hmi_rtc[9];
 80080e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008190 <printer_rd+0x1f8>)
 80080e2:	7a5a      	ldrb	r2, [r3, #9]
 80080e4:	4b27      	ldr	r3, [pc, #156]	@ (8008184 <printer_rd+0x1ec>)
 80080e6:	71da      	strb	r2, [r3, #7]
					end[9] = hmi_rtc[17];
 80080e8:	4b29      	ldr	r3, [pc, #164]	@ (8008190 <printer_rd+0x1f8>)
 80080ea:	7c5a      	ldrb	r2, [r3, #17]
 80080ec:	4b25      	ldr	r3, [pc, #148]	@ (8008184 <printer_rd+0x1ec>)
 80080ee:	725a      	strb	r2, [r3, #9]
					end[10] = hmi_rtc[18];
 80080f0:	4b27      	ldr	r3, [pc, #156]	@ (8008190 <printer_rd+0x1f8>)
 80080f2:	7c9a      	ldrb	r2, [r3, #18]
 80080f4:	4b23      	ldr	r3, [pc, #140]	@ (8008184 <printer_rd+0x1ec>)
 80080f6:	729a      	strb	r2, [r3, #10]
					end[12] = hmi_rtc[20];
 80080f8:	4b25      	ldr	r3, [pc, #148]	@ (8008190 <printer_rd+0x1f8>)
 80080fa:	7d1a      	ldrb	r2, [r3, #20]
 80080fc:	4b21      	ldr	r3, [pc, #132]	@ (8008184 <printer_rd+0x1ec>)
 80080fe:	731a      	strb	r2, [r3, #12]
					end[13] = hmi_rtc[21];
 8008100:	4b23      	ldr	r3, [pc, #140]	@ (8008190 <printer_rd+0x1f8>)
 8008102:	7d5a      	ldrb	r2, [r3, #21]
 8008104:	4b1f      	ldr	r3, [pc, #124]	@ (8008184 <printer_rd+0x1ec>)
 8008106:	735a      	strb	r2, [r3, #13]
				}


			}
			if(Drv_state == S_STOP)
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <printer_rd+0x1dc>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d11d      	bne.n	800814c <printer_rd+0x1b4>
			{
			Flag_payment=TRUE;
 8008110:	4b20      	ldr	r3, [pc, #128]	@ (8008194 <printer_rd+0x1fc>)
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
			payment_wait=1;
 8008116:	4b20      	ldr	r3, [pc, #128]	@ (8008198 <printer_rd+0x200>)
 8008118:	2201      	movs	r2, #1
 800811a:	701a      	strb	r2, [r3, #0]
			//show e-payment qr code
			HAL_UART_Transmit(&huart1, epay_qr, 16, 0x1C);
 800811c:	491f      	ldr	r1, [pc, #124]	@ (800819c <printer_rd+0x204>)
 800811e:	4810      	ldr	r0, [pc, #64]	@ (8008160 <printer_rd+0x1c8>)
 8008120:	231c      	movs	r3, #28
 8008122:	2210      	movs	r2, #16
 8008124:	f00b fc84 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_on, 8, 0x0E);
 8008128:	491d      	ldr	r1, [pc, #116]	@ (80081a0 <printer_rd+0x208>)
 800812a:	480d      	ldr	r0, [pc, #52]	@ (8008160 <printer_rd+0x1c8>)
 800812c:	230e      	movs	r3, #14
 800812e:	2208      	movs	r2, #8
 8008130:	f00b fc7e 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_bg_white, 8, 0x0E);
 8008134:	491b      	ldr	r1, [pc, #108]	@ (80081a4 <printer_rd+0x20c>)
 8008136:	480a      	ldr	r0, [pc, #40]	@ (8008160 <printer_rd+0x1c8>)
 8008138:	230e      	movs	r3, #14
 800813a:	2208      	movs	r2, #8
 800813c:	f00b fc78 	bl	8013a30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) cmd_content_red, 8, 0x0E);
 8008140:	4919      	ldr	r1, [pc, #100]	@ (80081a8 <printer_rd+0x210>)
 8008142:	4807      	ldr	r0, [pc, #28]	@ (8008160 <printer_rd+0x1c8>)
 8008144:	230e      	movs	r3, #14
 8008146:	2208      	movs	r2, #8
 8008148:	f00b fc72 	bl	8013a30 <HAL_UART_Transmit>
			}

			printer_process();
 800814c:	f000 fba8 	bl	80088a0 <printer_process>
			//printer_e(); //test
			Flag_Printed = FALSE;
 8008150:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <printer_rd+0x1d8>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	0801a068 	.word	0x0801a068
 8008160:	20000700 	.word	0x20000700
 8008164:	20000ae4 	.word	0x20000ae4
 8008168:	20000ae8 	.word	0x20000ae8
 800816c:	20000044 	.word	0x20000044
 8008170:	20000bcd 	.word	0x20000bcd
 8008174:	20000b1e 	.word	0x20000b1e
 8008178:	200002ca 	.word	0x200002ca
 800817c:	20000bcf 	.word	0x20000bcf
 8008180:	2000024c 	.word	0x2000024c
 8008184:	2000025c 	.word	0x2000025c
 8008188:	20000bce 	.word	0x20000bce
 800818c:	2000026c 	.word	0x2000026c
 8008190:	20000074 	.word	0x20000074
 8008194:	20000b09 	.word	0x20000b09
 8008198:	20000b0a 	.word	0x20000b0a
 800819c:	200000e4 	.word	0x200000e4
 80081a0:	0801a094 	.word	0x0801a094
 80081a4:	0801a0ac 	.word	0x0801a0ac
 80081a8:	0801a0b4 	.word	0x0801a0b4

080081ac <check_rd>:

void check_rd(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus10, 7, 0x0E);
 80081b0:	490c      	ldr	r1, [pc, #48]	@ (80081e4 <check_rd+0x38>)
 80081b2:	480d      	ldr	r0, [pc, #52]	@ (80081e8 <check_rd+0x3c>)
 80081b4:	230e      	movs	r3, #14
 80081b6:	2207      	movs	r2, #7
 80081b8:	f00b fc3a 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 80081bc:	2002      	movs	r0, #2
 80081be:	f006 f9b1 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 80081c2:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <check_rd+0x40>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d008      	beq.n	80081dc <check_rd+0x30>
	{
		RxFlag = FALSE;
 80081ca:	4b08      	ldr	r3, [pc, #32]	@ (80081ec <check_rd+0x40>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 80081d0:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <check_rd+0x44>)
 80081d2:	7a1b      	ldrb	r3, [r3, #8]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d101      	bne.n	80081dc <check_rd+0x30>
		{
			printer_e(); //test
 80081d8:	f000 fd06 	bl	8008be8 <printer_e>
		}
	}
}
 80081dc:	46c0      	nop			@ (mov r8, r8)
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	0801a050 	.word	0x0801a050
 80081e8:	20000700 	.word	0x20000700
 80081ec:	20000ae4 	.word	0x20000ae4
 80081f0:	20000ae8 	.word	0x20000ae8

080081f4 <clear_rd>:

void clear_rd(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *) RD_Plus1, 7, 0x0E);
 80081f8:	4934      	ldr	r1, [pc, #208]	@ (80082cc <clear_rd+0xd8>)
 80081fa:	4835      	ldr	r0, [pc, #212]	@ (80082d0 <clear_rd+0xdc>)
 80081fc:	230e      	movs	r3, #14
 80081fe:	2207      	movs	r2, #7
 8008200:	f00b fc16 	bl	8013a30 <HAL_UART_Transmit>
	HAL_Delay(2);
 8008204:	2002      	movs	r0, #2
 8008206:	f006 f98d 	bl	800e524 <HAL_Delay>
	if(RxFlag)
 800820a:	4b32      	ldr	r3, [pc, #200]	@ (80082d4 <clear_rd+0xe0>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d059      	beq.n	80082c6 <clear_rd+0xd2>
	{
		RxFlag = FALSE;
 8008212:	4b30      	ldr	r3, [pc, #192]	@ (80082d4 <clear_rd+0xe0>)
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
		if(RxBuff[8] == 0x01)
 8008218:	4b2f      	ldr	r3, [pc, #188]	@ (80082d8 <clear_rd+0xe4>)
 800821a:	7a1b      	ldrb	r3, [r3, #8]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d152      	bne.n	80082c6 <clear_rd+0xd2>
		{
			cflag_d = 0;
 8008220:	4b2e      	ldr	r3, [pc, #184]	@ (80082dc <clear_rd+0xe8>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
			cfare_d = 0;
 8008226:	4b2e      	ldr	r3, [pc, #184]	@ (80082e0 <clear_rd+0xec>)
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
			csub_d = 0;
 800822c:	4b2d      	ldr	r3, [pc, #180]	@ (80082e4 <clear_rd+0xf0>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]

			cflag[0] = 0x30;
 8008232:	4b2d      	ldr	r3, [pc, #180]	@ (80082e8 <clear_rd+0xf4>)
 8008234:	2230      	movs	r2, #48	@ 0x30
 8008236:	701a      	strb	r2, [r3, #0]
			cflag[1] = 0x30;
 8008238:	4b2b      	ldr	r3, [pc, #172]	@ (80082e8 <clear_rd+0xf4>)
 800823a:	2230      	movs	r2, #48	@ 0x30
 800823c:	705a      	strb	r2, [r3, #1]
			cflag[2] = 0x30;
 800823e:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <clear_rd+0xf4>)
 8008240:	2230      	movs	r2, #48	@ 0x30
 8008242:	709a      	strb	r2, [r3, #2]
			cflag[3] = 0x30;
 8008244:	4b28      	ldr	r3, [pc, #160]	@ (80082e8 <clear_rd+0xf4>)
 8008246:	2230      	movs	r2, #48	@ 0x30
 8008248:	70da      	strb	r2, [r3, #3]
			cflag[4] = 0x30;
 800824a:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <clear_rd+0xf4>)
 800824c:	2230      	movs	r2, #48	@ 0x30
 800824e:	711a      	strb	r2, [r3, #4]
			cflag[5] = 0x30;
 8008250:	4b25      	ldr	r3, [pc, #148]	@ (80082e8 <clear_rd+0xf4>)
 8008252:	2230      	movs	r2, #48	@ 0x30
 8008254:	715a      	strb	r2, [r3, #5]
			cflag[6] = 0x30;
 8008256:	4b24      	ldr	r3, [pc, #144]	@ (80082e8 <clear_rd+0xf4>)
 8008258:	2230      	movs	r2, #48	@ 0x30
 800825a:	719a      	strb	r2, [r3, #6]
			cflag[7] = 0x30;
 800825c:	4b22      	ldr	r3, [pc, #136]	@ (80082e8 <clear_rd+0xf4>)
 800825e:	2230      	movs	r2, #48	@ 0x30
 8008260:	71da      	strb	r2, [r3, #7]

			cfare[0] = 0x30;
 8008262:	4b22      	ldr	r3, [pc, #136]	@ (80082ec <clear_rd+0xf8>)
 8008264:	2230      	movs	r2, #48	@ 0x30
 8008266:	701a      	strb	r2, [r3, #0]
			cfare[1] = 0x30;
 8008268:	4b20      	ldr	r3, [pc, #128]	@ (80082ec <clear_rd+0xf8>)
 800826a:	2230      	movs	r2, #48	@ 0x30
 800826c:	705a      	strb	r2, [r3, #1]
			cfare[2] = 0x30;
 800826e:	4b1f      	ldr	r3, [pc, #124]	@ (80082ec <clear_rd+0xf8>)
 8008270:	2230      	movs	r2, #48	@ 0x30
 8008272:	709a      	strb	r2, [r3, #2]
			cfare[3] = 0x30;
 8008274:	4b1d      	ldr	r3, [pc, #116]	@ (80082ec <clear_rd+0xf8>)
 8008276:	2230      	movs	r2, #48	@ 0x30
 8008278:	70da      	strb	r2, [r3, #3]
			cfare[4] = 0x30;
 800827a:	4b1c      	ldr	r3, [pc, #112]	@ (80082ec <clear_rd+0xf8>)
 800827c:	2230      	movs	r2, #48	@ 0x30
 800827e:	711a      	strb	r2, [r3, #4]
			cfare[5] = 0x30;
 8008280:	4b1a      	ldr	r3, [pc, #104]	@ (80082ec <clear_rd+0xf8>)
 8008282:	2230      	movs	r2, #48	@ 0x30
 8008284:	715a      	strb	r2, [r3, #5]
			cfare[6] = 0x30;
 8008286:	4b19      	ldr	r3, [pc, #100]	@ (80082ec <clear_rd+0xf8>)
 8008288:	2230      	movs	r2, #48	@ 0x30
 800828a:	719a      	strb	r2, [r3, #6]
			cfare[7] = 0x30;
 800828c:	4b17      	ldr	r3, [pc, #92]	@ (80082ec <clear_rd+0xf8>)
 800828e:	2230      	movs	r2, #48	@ 0x30
 8008290:	71da      	strb	r2, [r3, #7]

			csub[0] = 0x30;
 8008292:	4b17      	ldr	r3, [pc, #92]	@ (80082f0 <clear_rd+0xfc>)
 8008294:	2230      	movs	r2, #48	@ 0x30
 8008296:	701a      	strb	r2, [r3, #0]
			csub[1] = 0x30;
 8008298:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <clear_rd+0xfc>)
 800829a:	2230      	movs	r2, #48	@ 0x30
 800829c:	705a      	strb	r2, [r3, #1]
			csub[2] = 0x30;
 800829e:	4b14      	ldr	r3, [pc, #80]	@ (80082f0 <clear_rd+0xfc>)
 80082a0:	2230      	movs	r2, #48	@ 0x30
 80082a2:	709a      	strb	r2, [r3, #2]
			csub[3] = 0x30;
 80082a4:	4b12      	ldr	r3, [pc, #72]	@ (80082f0 <clear_rd+0xfc>)
 80082a6:	2230      	movs	r2, #48	@ 0x30
 80082a8:	70da      	strb	r2, [r3, #3]
			csub[4] = 0x30;
 80082aa:	4b11      	ldr	r3, [pc, #68]	@ (80082f0 <clear_rd+0xfc>)
 80082ac:	2230      	movs	r2, #48	@ 0x30
 80082ae:	711a      	strb	r2, [r3, #4]
			csub[5] = 0x30;
 80082b0:	4b0f      	ldr	r3, [pc, #60]	@ (80082f0 <clear_rd+0xfc>)
 80082b2:	2230      	movs	r2, #48	@ 0x30
 80082b4:	715a      	strb	r2, [r3, #5]
			csub[6] = 0x30;
 80082b6:	4b0e      	ldr	r3, [pc, #56]	@ (80082f0 <clear_rd+0xfc>)
 80082b8:	2230      	movs	r2, #48	@ 0x30
 80082ba:	719a      	strb	r2, [r3, #6]
			csub[7] = 0x30;
 80082bc:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <clear_rd+0xfc>)
 80082be:	2230      	movs	r2, #48	@ 0x30
 80082c0:	71da      	strb	r2, [r3, #7]

			E_write();
 80082c2:	f003 fc29 	bl	800bb18 <E_write>
		}
	}
}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	0801a058 	.word	0x0801a058
 80082d0:	20000700 	.word	0x20000700
 80082d4:	20000ae4 	.word	0x20000ae4
 80082d8:	20000ae8 	.word	0x20000ae8
 80082dc:	20000fdc 	.word	0x20000fdc
 80082e0:	20000fec 	.word	0x20000fec
 80082e4:	20000ff0 	.word	0x20000ff0
 80082e8:	20001034 	.word	0x20001034
 80082ec:	20001054 	.word	0x20001054
 80082f0:	2000105c 	.word	0x2000105c

080082f4 <Long_to_byte>:

void Long_to_byte(uint32_t longInt, uint8_t* byteArray)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	byteArray[0] = (uint8_t)((longInt & 0xFF000000) >> 24 );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	b2da      	uxtb	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0x00FF0000) >> 16 );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	0c1a      	lsrs	r2, r3, #16
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	3301      	adds	r3, #1
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	701a      	strb	r2, [r3, #0]
	byteArray[2] = (uint8_t)((longInt & 0x0000FF00) >> 8 );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0a1a      	lsrs	r2, r3, #8
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	3302      	adds	r3, #2
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]
	byteArray[3] = (uint8_t)((longInt & 0X000000FF));
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3303      	adds	r3, #3
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	b002      	add	sp, #8
 8008330:	bd80      	pop	{r7, pc}

08008332 <HMI_Command>:

	return LongInt;
}

void HMI_Command(const uint8_t* command, uint8_t* data, uint8_t NOB)
{
 8008332:	b590      	push	{r4, r7, lr}
 8008334:	b089      	sub	sp, #36	@ 0x24
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	1dfb      	adds	r3, r7, #7
 800833e:	701a      	strb	r2, [r3, #0]
	char string[15];

	memset(string,0,15);
 8008340:	2410      	movs	r4, #16
 8008342:	193b      	adds	r3, r7, r4
 8008344:	220f      	movs	r2, #15
 8008346:	2100      	movs	r1, #0
 8008348:	0018      	movs	r0, r3
 800834a:	f010 fec1 	bl	80190d0 <memset>
	memcpy(string, command, NOB);	// Fee 10 byte
 800834e:	1dfb      	adds	r3, r7, #7
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	193b      	adds	r3, r7, r4
 8008356:	0018      	movs	r0, r3
 8008358:	f010 feee 	bl	8019138 <memcpy>
	memcpy(string+6,data,4);
 800835c:	193b      	adds	r3, r7, r4
 800835e:	3306      	adds	r3, #6
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	2204      	movs	r2, #4
 8008364:	0018      	movs	r0, r3
 8008366:	f010 fee7 	bl	8019138 <memcpy>
	HMI_Transmit(string,NOB);
 800836a:	1dfb      	adds	r3, r7, #7
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	193b      	adds	r3, r7, r4
 8008370:	0011      	movs	r1, r2
 8008372:	0018      	movs	r0, r3
 8008374:	f000 f804 	bl	8008380 <HMI_Transmit>
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	b009      	add	sp, #36	@ 0x24
 800837e:	bd90      	pop	{r4, r7, pc}

08008380 <HMI_Transmit>:

void HMI_Transmit(char out[], uint8_t nob)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	000a      	movs	r2, r1
 800838a:	1cfb      	adds	r3, r7, #3
 800838c:	701a      	strb	r2, [r3, #0]
	uint8_t temp[20];
//	uint16_t length = 0;

	memcpy(temp,out,11);	// debug brake point
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	230c      	movs	r3, #12
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	220b      	movs	r2, #11
 8008396:	0018      	movs	r0, r3
 8008398:	f010 fece 	bl	8019138 <memcpy>
//	length = strlen(out);

	HAL_UART_Transmit(&huart1, (uint8_t *) out, nob, 10);
 800839c:	1cfb      	adds	r3, r7, #3
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4803      	ldr	r0, [pc, #12]	@ (80083b4 <HMI_Transmit+0x34>)
 80083a6:	230a      	movs	r3, #10
 80083a8:	f00b fb42 	bl	8013a30 <HAL_UART_Transmit>
}
 80083ac:	46c0      	nop			@ (mov r8, r8)
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b008      	add	sp, #32
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000700 	.word	0x20000700

080083b8 <CRC16>:

uint16_t CRC16(unsigned char *cal, uint16_t len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	000a      	movs	r2, r1
 80083c2:	1cbb      	adds	r3, r7, #2
 80083c4:	801a      	strh	r2, [r3, #0]
    int i;
    unsigned short crc = 0xFFFF;
 80083c6:	230a      	movs	r3, #10
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	2201      	movs	r2, #1
 80083cc:	4252      	negs	r2, r2
 80083ce:	801a      	strh	r2, [r3, #0]
    if (len == 0)
 80083d0:	1cbb      	adds	r3, r7, #2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d130      	bne.n	800843a <CRC16+0x82>
        len = 1;
 80083d8:	1cbb      	adds	r3, r7, #2
 80083da:	2201      	movs	r2, #1
 80083dc:	801a      	strh	r2, [r3, #0]

    while (len--)
 80083de:	e02c      	b.n	800843a <CRC16+0x82>
    {
        crc ^= *cal;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	0019      	movs	r1, r3
 80083e6:	220a      	movs	r2, #10
 80083e8:	18bb      	adds	r3, r7, r2
 80083ea:	18ba      	adds	r2, r7, r2
 80083ec:	8812      	ldrh	r2, [r2, #0]
 80083ee:	404a      	eors	r2, r1
 80083f0:	801a      	strh	r2, [r3, #0]
        for (i = 0; i<8; i++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e01a      	b.n	800842e <CRC16+0x76>
        {
            if (crc & 1)
 80083f8:	210a      	movs	r1, #10
 80083fa:	187b      	adds	r3, r7, r1
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	2201      	movs	r2, #1
 8008400:	4013      	ands	r3, r2
 8008402:	d00b      	beq.n	800841c <CRC16+0x64>
            {
                crc >>= 1;
 8008404:	187b      	adds	r3, r7, r1
 8008406:	187a      	adds	r2, r7, r1
 8008408:	8812      	ldrh	r2, [r2, #0]
 800840a:	0852      	lsrs	r2, r2, #1
 800840c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800840e:	187b      	adds	r3, r7, r1
 8008410:	187a      	adds	r2, r7, r1
 8008412:	8812      	ldrh	r2, [r2, #0]
 8008414:	4910      	ldr	r1, [pc, #64]	@ (8008458 <CRC16+0xa0>)
 8008416:	404a      	eors	r2, r1
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	e005      	b.n	8008428 <CRC16+0x70>
            }
            else
                crc >>= 1;
 800841c:	220a      	movs	r2, #10
 800841e:	18bb      	adds	r3, r7, r2
 8008420:	18ba      	adds	r2, r7, r2
 8008422:	8812      	ldrh	r2, [r2, #0]
 8008424:	0852      	lsrs	r2, r2, #1
 8008426:	801a      	strh	r2, [r3, #0]
        for (i = 0; i<8; i++)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b07      	cmp	r3, #7
 8008432:	dde1      	ble.n	80083f8 <CRC16+0x40>
        }
        cal++;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3301      	adds	r3, #1
 8008438:	607b      	str	r3, [r7, #4]
    while (len--)
 800843a:	1cbb      	adds	r3, r7, #2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	1cba      	adds	r2, r7, #2
 8008440:	1e59      	subs	r1, r3, #1
 8008442:	8011      	strh	r1, [r2, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1cb      	bne.n	80083e0 <CRC16+0x28>
    }
    return(crc);
 8008448:	230a      	movs	r3, #10
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	881b      	ldrh	r3, [r3, #0]
}
 800844e:	0018      	movs	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	b004      	add	sp, #16
 8008454:	bd80      	pop	{r7, pc}
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	ffffa001 	.word	0xffffa001

0800845c <checksum_8bit>:

unsigned char checksum_8bit(unsigned char *data, int len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	int i;
	unsigned short sum = 0x00;
 8008466:	230a      	movs	r3, #10
 8008468:	18fb      	adds	r3, r7, r3
 800846a:	2200      	movs	r2, #0
 800846c:	801a      	strh	r2, [r3, #0]
	for (i=0; i<len; i++)
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e00d      	b.n	8008490 <checksum_8bit+0x34>
	{
		sum += data[i];
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	18d3      	adds	r3, r2, r3
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	0019      	movs	r1, r3
 800847e:	220a      	movs	r2, #10
 8008480:	18bb      	adds	r3, r7, r2
 8008482:	18ba      	adds	r2, r7, r2
 8008484:	8812      	ldrh	r2, [r2, #0]
 8008486:	188a      	adds	r2, r1, r2
 8008488:	801a      	strh	r2, [r3, #0]
	for (i=0; i<len; i++)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	dbed      	blt.n	8008474 <checksum_8bit+0x18>
	}
//	sum &= 0xFF
	return (unsigned char)sum;
 8008498:	230a      	movs	r3, #10
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
}
 80084a0:	0018      	movs	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b004      	add	sp, #16
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <long_to_byte>:

void long_to_byte(uint16_t longInt, unsigned char* byteArray)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	0002      	movs	r2, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	1dbb      	adds	r3, r7, #6
 80084b4:	801a      	strh	r2, [r3, #0]
	byteArray[0] = (uint8_t)((longInt & 0xFF00) >> 8 );
 80084b6:	1dbb      	adds	r3, r7, #6
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	b29b      	uxth	r3, r3
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0X00FF));
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	3301      	adds	r3, #1
 80084c8:	1dba      	adds	r2, r7, #6
 80084ca:	8812      	ldrh	r2, [r2, #0]
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]
}
 80084d0:	46c0      	nop			@ (mov r8, r8)
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b002      	add	sp, #8
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <byte_to_long>:

uint32_t byte_to_long(uint8_t* byteArray)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	long LongInt = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]

	LongInt  = ((unsigned int) byteArray[0]) << 8;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	60fb      	str	r3, [r7, #12]
	LongInt |= ((unsigned int) byteArray[1]);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3301      	adds	r3, #1
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	001a      	movs	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

	return LongInt;
 80084fa:	68fb      	ldr	r3, [r7, #12]
}
 80084fc:	0018      	movs	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	b004      	add	sp, #16
 8008502:	bd80      	pop	{r7, pc}

08008504 <long_to_byte_crc>:

void long_to_byte_crc(uint16_t longInt, unsigned char* byteArray)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	0002      	movs	r2, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	1dbb      	adds	r3, r7, #6
 8008510:	801a      	strh	r2, [r3, #0]
	byteArray[0] = (uint8_t)(longInt & 0x00FF);
 8008512:	1dbb      	adds	r3, r7, #6
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	701a      	strb	r2, [r3, #0]
	byteArray[1] = (uint8_t)((longInt & 0XFF00) >> 8 );
 800851c:	1dbb      	adds	r3, r7, #6
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	b29a      	uxth	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	701a      	strb	r2, [r3, #0]
}
 800852c:	46c0      	nop			@ (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b002      	add	sp, #8
 8008532:	bd80      	pop	{r7, pc}

08008534 <tbox_start>:
	}
	return dec;
}

void tbox_start(void)
{
 8008534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008536:	b0a1      	sub	sp, #132	@ 0x84
 8008538:	af00      	add	r7, sp, #0
	uint16_t crc1_value;
	unsigned char crc1[2];
//	unsigned char t_start[16];

	//sn
	serial = serial + 1;
 800853a:	4b5a      	ldr	r3, [pc, #360]	@ (80086a4 <tbox_start+0x170>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	3301      	adds	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	4b58      	ldr	r3, [pc, #352]	@ (80086a4 <tbox_start+0x170>)
 8008544:	801a      	strh	r2, [r3, #0]
	long_to_byte(serial, sn);
 8008546:	4b57      	ldr	r3, [pc, #348]	@ (80086a4 <tbox_start+0x170>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	247c      	movs	r4, #124	@ 0x7c
 800854c:	193a      	adds	r2, r7, r4
 800854e:	0011      	movs	r1, r2
 8008550:	0018      	movs	r0, r3
 8008552:	f7ff ffa9 	bl	80084a8 <long_to_byte>
	memcpy(hd1, sn, sizeof(unsigned char)*2);
 8008556:	4b54      	ldr	r3, [pc, #336]	@ (80086a8 <tbox_start+0x174>)
 8008558:	193a      	adds	r2, r7, r4
 800855a:	8812      	ldrh	r2, [r2, #0]
 800855c:	801a      	strh	r2, [r3, #0]

	//data
	RTC_date = PCF2129_getDate();
 800855e:	4c53      	ldr	r4, [pc, #332]	@ (80086ac <tbox_start+0x178>)
 8008560:	003b      	movs	r3, r7
 8008562:	0018      	movs	r0, r3
 8008564:	f004 fe2e 	bl	800d1c4 <PCF2129_getDate>
 8008568:	003b      	movs	r3, r7
 800856a:	0020      	movs	r0, r4
 800856c:	0019      	movs	r1, r3
 800856e:	2358      	movs	r3, #88	@ 0x58
 8008570:	001a      	movs	r2, r3
 8008572:	f010 fde1 	bl	8019138 <memcpy>
	year = RTC_date.date.y;
 8008576:	4b4d      	ldr	r3, [pc, #308]	@ (80086ac <tbox_start+0x178>)
 8008578:	224d      	movs	r2, #77	@ 0x4d
 800857a:	5c9b      	ldrb	r3, [r3, r2]
 800857c:	001a      	movs	r2, r3
 800857e:	4b4c      	ldr	r3, [pc, #304]	@ (80086b0 <tbox_start+0x17c>)
 8008580:	801a      	strh	r2, [r3, #0]
	data1[0] = (uint8_t)(year & 0xFF);
 8008582:	4b4b      	ldr	r3, [pc, #300]	@ (80086b0 <tbox_start+0x17c>)
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b2da      	uxtb	r2, r3
 8008588:	4b4a      	ldr	r3, [pc, #296]	@ (80086b4 <tbox_start+0x180>)
 800858a:	701a      	strb	r2, [r3, #0]
	month = RTC_date.date.m;
 800858c:	4b47      	ldr	r3, [pc, #284]	@ (80086ac <tbox_start+0x178>)
 800858e:	224e      	movs	r2, #78	@ 0x4e
 8008590:	5c9b      	ldrb	r3, [r3, r2]
 8008592:	001a      	movs	r2, r3
 8008594:	4b48      	ldr	r3, [pc, #288]	@ (80086b8 <tbox_start+0x184>)
 8008596:	801a      	strh	r2, [r3, #0]
	data1[1] = (uint8_t)(month & 0xFF);
 8008598:	4b47      	ldr	r3, [pc, #284]	@ (80086b8 <tbox_start+0x184>)
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b2da      	uxtb	r2, r3
 800859e:	4b45      	ldr	r3, [pc, #276]	@ (80086b4 <tbox_start+0x180>)
 80085a0:	705a      	strb	r2, [r3, #1]
	day = RTC_date.date.d;
 80085a2:	4b42      	ldr	r3, [pc, #264]	@ (80086ac <tbox_start+0x178>)
 80085a4:	224f      	movs	r2, #79	@ 0x4f
 80085a6:	5c9b      	ldrb	r3, [r3, r2]
 80085a8:	001a      	movs	r2, r3
 80085aa:	4b44      	ldr	r3, [pc, #272]	@ (80086bc <tbox_start+0x188>)
 80085ac:	801a      	strh	r2, [r3, #0]
	data1[2] = (uint8_t)(day & 0xFF);
 80085ae:	4b43      	ldr	r3, [pc, #268]	@ (80086bc <tbox_start+0x188>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	4b3f      	ldr	r3, [pc, #252]	@ (80086b4 <tbox_start+0x180>)
 80085b6:	709a      	strb	r2, [r3, #2]
	hour = RTC_date.date.hh;
 80085b8:	4b3c      	ldr	r3, [pc, #240]	@ (80086ac <tbox_start+0x178>)
 80085ba:	2251      	movs	r2, #81	@ 0x51
 80085bc:	5c9b      	ldrb	r3, [r3, r2]
 80085be:	001a      	movs	r2, r3
 80085c0:	4b3f      	ldr	r3, [pc, #252]	@ (80086c0 <tbox_start+0x18c>)
 80085c2:	801a      	strh	r2, [r3, #0]
	data1[3] = (uint8_t)(hour & 0xFF);
 80085c4:	4b3e      	ldr	r3, [pc, #248]	@ (80086c0 <tbox_start+0x18c>)
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	4b3a      	ldr	r3, [pc, #232]	@ (80086b4 <tbox_start+0x180>)
 80085cc:	70da      	strb	r2, [r3, #3]
	minute = RTC_date.date.mm;
 80085ce:	4b37      	ldr	r3, [pc, #220]	@ (80086ac <tbox_start+0x178>)
 80085d0:	2252      	movs	r2, #82	@ 0x52
 80085d2:	5c9b      	ldrb	r3, [r3, r2]
 80085d4:	001a      	movs	r2, r3
 80085d6:	4b3b      	ldr	r3, [pc, #236]	@ (80086c4 <tbox_start+0x190>)
 80085d8:	801a      	strh	r2, [r3, #0]
	data1[4] = (uint8_t)(minute & 0xFF);
 80085da:	4b3a      	ldr	r3, [pc, #232]	@ (80086c4 <tbox_start+0x190>)
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	4b34      	ldr	r3, [pc, #208]	@ (80086b4 <tbox_start+0x180>)
 80085e2:	711a      	strb	r2, [r3, #4]
	second = RTC_date.date.ss;
 80085e4:	4b31      	ldr	r3, [pc, #196]	@ (80086ac <tbox_start+0x178>)
 80085e6:	2253      	movs	r2, #83	@ 0x53
 80085e8:	5c9b      	ldrb	r3, [r3, r2]
 80085ea:	001a      	movs	r2, r3
 80085ec:	4b36      	ldr	r3, [pc, #216]	@ (80086c8 <tbox_start+0x194>)
 80085ee:	801a      	strh	r2, [r3, #0]
	data1[5] = (uint8_t)(second & 0xFF);
 80085f0:	4b35      	ldr	r3, [pc, #212]	@ (80086c8 <tbox_start+0x194>)
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	4b2f      	ldr	r3, [pc, #188]	@ (80086b4 <tbox_start+0x180>)
 80085f8:	715a      	strb	r2, [r3, #5]
	//for crc calculate, cal_s = (header + data)
	memcpy(cal_s, hd1, sizeof(unsigned char)*6);
 80085fa:	2570      	movs	r5, #112	@ 0x70
 80085fc:	197b      	adds	r3, r7, r5
 80085fe:	4a2a      	ldr	r2, [pc, #168]	@ (80086a8 <tbox_start+0x174>)
 8008600:	6811      	ldr	r1, [r2, #0]
 8008602:	6019      	str	r1, [r3, #0]
 8008604:	8892      	ldrh	r2, [r2, #4]
 8008606:	809a      	strh	r2, [r3, #4]
	memcpy(cal_s+6, data1, sizeof(unsigned char)*6);
 8008608:	197b      	adds	r3, r7, r5
 800860a:	3306      	adds	r3, #6
 800860c:	4a29      	ldr	r2, [pc, #164]	@ (80086b4 <tbox_start+0x180>)
 800860e:	0018      	movs	r0, r3
 8008610:	0011      	movs	r1, r2
 8008612:	2306      	movs	r3, #6
 8008614:	001a      	movs	r2, r3
 8008616:	f010 fd8f 	bl	8019138 <memcpy>
	crc1_value = CRC16(cal_s, 12);
 800861a:	267e      	movs	r6, #126	@ 0x7e
 800861c:	19bc      	adds	r4, r7, r6
 800861e:	197b      	adds	r3, r7, r5
 8008620:	210c      	movs	r1, #12
 8008622:	0018      	movs	r0, r3
 8008624:	f7ff fec8 	bl	80083b8 <CRC16>
 8008628:	0003      	movs	r3, r0
 800862a:	8023      	strh	r3, [r4, #0]
	long_to_byte_crc(crc1_value, crc1);
 800862c:	246c      	movs	r4, #108	@ 0x6c
 800862e:	193a      	adds	r2, r7, r4
 8008630:	19bb      	adds	r3, r7, r6
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	0011      	movs	r1, r2
 8008636:	0018      	movs	r0, r3
 8008638:	f7ff ff64 	bl	8008504 <long_to_byte_crc>

	//update msg
	memcpy(t_start, zone, sizeof(unsigned char)*2);     //AA55
 800863c:	4b23      	ldr	r3, [pc, #140]	@ (80086cc <tbox_start+0x198>)
 800863e:	881a      	ldrh	r2, [r3, #0]
 8008640:	4b23      	ldr	r3, [pc, #140]	@ (80086d0 <tbox_start+0x19c>)
 8008642:	801a      	strh	r2, [r3, #0]
	memcpy(t_start+2, crc1, sizeof(unsigned char)*2);   //crc
 8008644:	4a23      	ldr	r2, [pc, #140]	@ (80086d4 <tbox_start+0x1a0>)
 8008646:	193b      	adds	r3, r7, r4
 8008648:	0010      	movs	r0, r2
 800864a:	0019      	movs	r1, r3
 800864c:	2302      	movs	r3, #2
 800864e:	001a      	movs	r2, r3
 8008650:	f010 fd72 	bl	8019138 <memcpy>
	memcpy(t_start+4, hd1, sizeof(unsigned char)*6);   //header 1
 8008654:	4a20      	ldr	r2, [pc, #128]	@ (80086d8 <tbox_start+0x1a4>)
 8008656:	4b14      	ldr	r3, [pc, #80]	@ (80086a8 <tbox_start+0x174>)
 8008658:	0010      	movs	r0, r2
 800865a:	0019      	movs	r1, r3
 800865c:	2306      	movs	r3, #6
 800865e:	001a      	movs	r2, r3
 8008660:	f010 fd6a 	bl	8019138 <memcpy>
	memcpy(t_start+10, data1, sizeof(unsigned char)*6);
 8008664:	4a1d      	ldr	r2, [pc, #116]	@ (80086dc <tbox_start+0x1a8>)
 8008666:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <tbox_start+0x180>)
 8008668:	0010      	movs	r0, r2
 800866a:	0019      	movs	r1, r3
 800866c:	2306      	movs	r3, #6
 800866e:	001a      	movs	r2, r3
 8008670:	f010 fd62 	bl	8019138 <memcpy>

	//transmit
	unsigned char buffer[sizeof(t_start)];
	memset(buffer, 0, sizeof(t_start));
 8008674:	255c      	movs	r5, #92	@ 0x5c
 8008676:	197b      	adds	r3, r7, r5
 8008678:	2210      	movs	r2, #16
 800867a:	2100      	movs	r1, #0
 800867c:	0018      	movs	r0, r3
 800867e:	f010 fd27 	bl	80190d0 <memset>
	memcpy(buffer, &t_start, sizeof(t_start));
 8008682:	197b      	adds	r3, r7, r5
 8008684:	4a12      	ldr	r2, [pc, #72]	@ (80086d0 <tbox_start+0x19c>)
 8008686:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008688:	c313      	stmia	r3!, {r0, r1, r4}
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, sizeof(buffer),0xffff);
 800868e:	4b14      	ldr	r3, [pc, #80]	@ (80086e0 <tbox_start+0x1ac>)
 8008690:	1979      	adds	r1, r7, r5
 8008692:	4814      	ldr	r0, [pc, #80]	@ (80086e4 <tbox_start+0x1b0>)
 8008694:	2210      	movs	r2, #16
 8008696:	f00b f9cb 	bl	8013a30 <HAL_UART_Transmit>

	//clear
//	memset(t_start, 0, 16);
}
 800869a:	46c0      	nop			@ (mov r8, r8)
 800869c:	46bd      	mov	sp, r7
 800869e:	b021      	add	sp, #132	@ 0x84
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	20000bd0 	.word	0x20000bd0
 80086a8:	200002d0 	.word	0x200002d0
 80086ac:	20000da4 	.word	0x20000da4
 80086b0:	20000dfc 	.word	0x20000dfc
 80086b4:	20000bec 	.word	0x20000bec
 80086b8:	20000dfe 	.word	0x20000dfe
 80086bc:	20000e00 	.word	0x20000e00
 80086c0:	20000e02 	.word	0x20000e02
 80086c4:	20000e04 	.word	0x20000e04
 80086c8:	20000e06 	.word	0x20000e06
 80086cc:	200002cc 	.word	0x200002cc
 80086d0:	20000c10 	.word	0x20000c10
 80086d4:	20000c12 	.word	0x20000c12
 80086d8:	20000c14 	.word	0x20000c14
 80086dc:	20000c1a 	.word	0x20000c1a
 80086e0:	0000ffff 	.word	0x0000ffff
 80086e4:	200008b0 	.word	0x200008b0

080086e8 <tbox_finish>:

void tbox_finish(void)
{
 80086e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ea:	b0ab      	sub	sp, #172	@ 0xac
 80086ec:	af00      	add	r7, sp, #0
	uint16_t crc2_value;
	unsigned char crc2[2];       //校驗碼
//	unsigned char t_finish[36];

	//sn
	serial = serial + 1;
 80086ee:	4b5b      	ldr	r3, [pc, #364]	@ (800885c <tbox_finish+0x174>)
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	4b59      	ldr	r3, [pc, #356]	@ (800885c <tbox_finish+0x174>)
 80086f8:	801a      	strh	r2, [r3, #0]
	long_to_byte(serial, sn);
 80086fa:	4b58      	ldr	r3, [pc, #352]	@ (800885c <tbox_finish+0x174>)
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	24a4      	movs	r4, #164	@ 0xa4
 8008700:	193a      	adds	r2, r7, r4
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7ff fecf 	bl	80084a8 <long_to_byte>
	memcpy(hd2, sn, sizeof(unsigned char)*2);
 800870a:	4b55      	ldr	r3, [pc, #340]	@ (8008860 <tbox_finish+0x178>)
 800870c:	193a      	adds	r2, r7, r4
 800870e:	8812      	ldrh	r2, [r2, #0]
 8008710:	801a      	strh	r2, [r3, #0]

	//data
	RTC_date = PCF2129_getDate();
 8008712:	4c54      	ldr	r4, [pc, #336]	@ (8008864 <tbox_finish+0x17c>)
 8008714:	003b      	movs	r3, r7
 8008716:	0018      	movs	r0, r3
 8008718:	f004 fd54 	bl	800d1c4 <PCF2129_getDate>
 800871c:	003b      	movs	r3, r7
 800871e:	0020      	movs	r0, r4
 8008720:	0019      	movs	r1, r3
 8008722:	2358      	movs	r3, #88	@ 0x58
 8008724:	001a      	movs	r2, r3
 8008726:	f010 fd07 	bl	8019138 <memcpy>
	year = RTC_date.date.y;
 800872a:	4b4e      	ldr	r3, [pc, #312]	@ (8008864 <tbox_finish+0x17c>)
 800872c:	224d      	movs	r2, #77	@ 0x4d
 800872e:	5c9b      	ldrb	r3, [r3, r2]
 8008730:	001a      	movs	r2, r3
 8008732:	4b4d      	ldr	r3, [pc, #308]	@ (8008868 <tbox_finish+0x180>)
 8008734:	801a      	strh	r2, [r3, #0]
	data2[8] = (uint8_t)(year & 0xFF);
 8008736:	4b4c      	ldr	r3, [pc, #304]	@ (8008868 <tbox_finish+0x180>)
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	4b4b      	ldr	r3, [pc, #300]	@ (800886c <tbox_finish+0x184>)
 800873e:	721a      	strb	r2, [r3, #8]
	month = RTC_date.date.m;
 8008740:	4b48      	ldr	r3, [pc, #288]	@ (8008864 <tbox_finish+0x17c>)
 8008742:	224e      	movs	r2, #78	@ 0x4e
 8008744:	5c9b      	ldrb	r3, [r3, r2]
 8008746:	001a      	movs	r2, r3
 8008748:	4b49      	ldr	r3, [pc, #292]	@ (8008870 <tbox_finish+0x188>)
 800874a:	801a      	strh	r2, [r3, #0]
	data2[9] = (uint8_t)(month & 0xFF);
 800874c:	4b48      	ldr	r3, [pc, #288]	@ (8008870 <tbox_finish+0x188>)
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4b46      	ldr	r3, [pc, #280]	@ (800886c <tbox_finish+0x184>)
 8008754:	725a      	strb	r2, [r3, #9]
	day = RTC_date.date.d;
 8008756:	4b43      	ldr	r3, [pc, #268]	@ (8008864 <tbox_finish+0x17c>)
 8008758:	224f      	movs	r2, #79	@ 0x4f
 800875a:	5c9b      	ldrb	r3, [r3, r2]
 800875c:	001a      	movs	r2, r3
 800875e:	4b45      	ldr	r3, [pc, #276]	@ (8008874 <tbox_finish+0x18c>)
 8008760:	801a      	strh	r2, [r3, #0]
	data2[10] = (uint8_t)(day & 0xFF);
 8008762:	4b44      	ldr	r3, [pc, #272]	@ (8008874 <tbox_finish+0x18c>)
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b2da      	uxtb	r2, r3
 8008768:	4b40      	ldr	r3, [pc, #256]	@ (800886c <tbox_finish+0x184>)
 800876a:	729a      	strb	r2, [r3, #10]
	hour = RTC_date.date.hh;
 800876c:	4b3d      	ldr	r3, [pc, #244]	@ (8008864 <tbox_finish+0x17c>)
 800876e:	2251      	movs	r2, #81	@ 0x51
 8008770:	5c9b      	ldrb	r3, [r3, r2]
 8008772:	001a      	movs	r2, r3
 8008774:	4b40      	ldr	r3, [pc, #256]	@ (8008878 <tbox_finish+0x190>)
 8008776:	801a      	strh	r2, [r3, #0]
	data2[11] = (uint8_t)(hour & 0xFF);
 8008778:	4b3f      	ldr	r3, [pc, #252]	@ (8008878 <tbox_finish+0x190>)
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4b3b      	ldr	r3, [pc, #236]	@ (800886c <tbox_finish+0x184>)
 8008780:	72da      	strb	r2, [r3, #11]
	minute = RTC_date.date.mm;
 8008782:	4b38      	ldr	r3, [pc, #224]	@ (8008864 <tbox_finish+0x17c>)
 8008784:	2252      	movs	r2, #82	@ 0x52
 8008786:	5c9b      	ldrb	r3, [r3, r2]
 8008788:	001a      	movs	r2, r3
 800878a:	4b3c      	ldr	r3, [pc, #240]	@ (800887c <tbox_finish+0x194>)
 800878c:	801a      	strh	r2, [r3, #0]
	data2[12] = (uint8_t)(minute & 0xFF);
 800878e:	4b3b      	ldr	r3, [pc, #236]	@ (800887c <tbox_finish+0x194>)
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	4b35      	ldr	r3, [pc, #212]	@ (800886c <tbox_finish+0x184>)
 8008796:	731a      	strb	r2, [r3, #12]
	second = RTC_date.date.ss;
 8008798:	4b32      	ldr	r3, [pc, #200]	@ (8008864 <tbox_finish+0x17c>)
 800879a:	2253      	movs	r2, #83	@ 0x53
 800879c:	5c9b      	ldrb	r3, [r3, r2]
 800879e:	001a      	movs	r2, r3
 80087a0:	4b37      	ldr	r3, [pc, #220]	@ (8008880 <tbox_finish+0x198>)
 80087a2:	801a      	strh	r2, [r3, #0]
	data2[13] = (uint8_t)(second & 0xFF);
 80087a4:	4b36      	ldr	r3, [pc, #216]	@ (8008880 <tbox_finish+0x198>)
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b30      	ldr	r3, [pc, #192]	@ (800886c <tbox_finish+0x184>)
 80087ac:	735a      	strb	r2, [r3, #13]

	//for crc calculate, cal_f = (header + data)
	memcpy(cal_f, hd2, sizeof(unsigned char)*6);
 80087ae:	2584      	movs	r5, #132	@ 0x84
 80087b0:	197b      	adds	r3, r7, r5
 80087b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008860 <tbox_finish+0x178>)
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	6019      	str	r1, [r3, #0]
 80087b8:	8892      	ldrh	r2, [r2, #4]
 80087ba:	809a      	strh	r2, [r3, #4]
	memcpy(cal_f+6, data2, sizeof(unsigned char)*26);         //DATA
 80087bc:	197b      	adds	r3, r7, r5
 80087be:	3306      	adds	r3, #6
 80087c0:	4a2a      	ldr	r2, [pc, #168]	@ (800886c <tbox_finish+0x184>)
 80087c2:	0018      	movs	r0, r3
 80087c4:	0011      	movs	r1, r2
 80087c6:	231a      	movs	r3, #26
 80087c8:	001a      	movs	r2, r3
 80087ca:	f010 fcb5 	bl	8019138 <memcpy>
	crc2_value = CRC16(cal_f, 32);
 80087ce:	26a6      	movs	r6, #166	@ 0xa6
 80087d0:	19bc      	adds	r4, r7, r6
 80087d2:	197b      	adds	r3, r7, r5
 80087d4:	2120      	movs	r1, #32
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7ff fdee 	bl	80083b8 <CRC16>
 80087dc:	0003      	movs	r3, r0
 80087de:	8023      	strh	r3, [r4, #0]
	long_to_byte_crc(crc2_value, crc2);
 80087e0:	2480      	movs	r4, #128	@ 0x80
 80087e2:	193a      	adds	r2, r7, r4
 80087e4:	19bb      	adds	r3, r7, r6
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	0011      	movs	r1, r2
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7ff fe8a 	bl	8008504 <long_to_byte_crc>

	//update msg
	memcpy(t_finish, zone, sizeof(unsigned char)*2);
 80087f0:	4b24      	ldr	r3, [pc, #144]	@ (8008884 <tbox_finish+0x19c>)
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	4b24      	ldr	r3, [pc, #144]	@ (8008888 <tbox_finish+0x1a0>)
 80087f6:	801a      	strh	r2, [r3, #0]
	memcpy(t_finish+2, crc2, sizeof(unsigned char)*2);
 80087f8:	4a24      	ldr	r2, [pc, #144]	@ (800888c <tbox_finish+0x1a4>)
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	0010      	movs	r0, r2
 80087fe:	0019      	movs	r1, r3
 8008800:	2302      	movs	r3, #2
 8008802:	001a      	movs	r2, r3
 8008804:	f010 fc98 	bl	8019138 <memcpy>
	memcpy(t_finish+4, hd2, sizeof(unsigned char)*6);
 8008808:	4a21      	ldr	r2, [pc, #132]	@ (8008890 <tbox_finish+0x1a8>)
 800880a:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <tbox_finish+0x178>)
 800880c:	0010      	movs	r0, r2
 800880e:	0019      	movs	r1, r3
 8008810:	2306      	movs	r3, #6
 8008812:	001a      	movs	r2, r3
 8008814:	f010 fc90 	bl	8019138 <memcpy>
	memcpy(t_finish+10, data2, sizeof(unsigned char)*26);
 8008818:	4a1e      	ldr	r2, [pc, #120]	@ (8008894 <tbox_finish+0x1ac>)
 800881a:	4b14      	ldr	r3, [pc, #80]	@ (800886c <tbox_finish+0x184>)
 800881c:	0010      	movs	r0, r2
 800881e:	0019      	movs	r1, r3
 8008820:	231a      	movs	r3, #26
 8008822:	001a      	movs	r2, r3
 8008824:	f010 fc88 	bl	8019138 <memcpy>

	//transmit
	unsigned char buffer[sizeof(t_finish)];
	memset(buffer, 0, sizeof(t_finish));
 8008828:	255c      	movs	r5, #92	@ 0x5c
 800882a:	197b      	adds	r3, r7, r5
 800882c:	2224      	movs	r2, #36	@ 0x24
 800882e:	2100      	movs	r1, #0
 8008830:	0018      	movs	r0, r3
 8008832:	f010 fc4d 	bl	80190d0 <memset>
	memcpy(buffer, &t_finish, sizeof(t_finish));
 8008836:	197b      	adds	r3, r7, r5
 8008838:	4a13      	ldr	r2, [pc, #76]	@ (8008888 <tbox_finish+0x1a0>)
 800883a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800883c:	c313      	stmia	r3!, {r0, r1, r4}
 800883e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008840:	c313      	stmia	r3!, {r0, r1, r4}
 8008842:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008844:	c313      	stmia	r3!, {r0, r1, r4}
	HAL_UART_Transmit(&huart4, (uint8_t *)buffer, sizeof(buffer),0xffff);
 8008846:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <tbox_finish+0x1b0>)
 8008848:	1979      	adds	r1, r7, r5
 800884a:	4814      	ldr	r0, [pc, #80]	@ (800889c <tbox_finish+0x1b4>)
 800884c:	2224      	movs	r2, #36	@ 0x24
 800884e:	f00b f8ef 	bl	8013a30 <HAL_UART_Transmit>

	//clear
//	memset(t_finish, 0, 36);
}
 8008852:	46c0      	nop			@ (mov r8, r8)
 8008854:	46bd      	mov	sp, r7
 8008856:	b02b      	add	sp, #172	@ 0xac
 8008858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885a:	46c0      	nop			@ (mov r8, r8)
 800885c:	20000bd0 	.word	0x20000bd0
 8008860:	200002d8 	.word	0x200002d8
 8008864:	20000da4 	.word	0x20000da4
 8008868:	20000dfc 	.word	0x20000dfc
 800886c:	20000bf4 	.word	0x20000bf4
 8008870:	20000dfe 	.word	0x20000dfe
 8008874:	20000e00 	.word	0x20000e00
 8008878:	20000e02 	.word	0x20000e02
 800887c:	20000e04 	.word	0x20000e04
 8008880:	20000e06 	.word	0x20000e06
 8008884:	200002cc 	.word	0x200002cc
 8008888:	20000c20 	.word	0x20000c20
 800888c:	20000c22 	.word	0x20000c22
 8008890:	20000c24 	.word	0x20000c24
 8008894:	20000c2a 	.word	0x20000c2a
 8008898:	0000ffff 	.word	0x0000ffff
 800889c:	200008b0 	.word	0x200008b0

080088a0 <printer_process>:

void printer_process(void)
{
 80088a0:	b5b0      	push	{r4, r5, r7, lr}
 80088a2:	af00      	add	r7, sp, #0
	//row_init: space + enter
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 80088a4:	4baf      	ldr	r3, [pc, #700]	@ (8008b64 <printer_process+0x2c4>)
 80088a6:	49b0      	ldr	r1, [pc, #704]	@ (8008b68 <printer_process+0x2c8>)
 80088a8:	48b0      	ldr	r0, [pc, #704]	@ (8008b6c <printer_process+0x2cc>)
 80088aa:	2206      	movs	r2, #6
 80088ac:	f00b f8c0 	bl	8013a30 <HAL_UART_Transmit>
	//row1: taxi no.
	memcpy(receipt1.sp, cmd, 6);
 80088b0:	4baf      	ldr	r3, [pc, #700]	@ (8008b70 <printer_process+0x2d0>)
 80088b2:	4ab0      	ldr	r2, [pc, #704]	@ (8008b74 <printer_process+0x2d4>)
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	6019      	str	r1, [r3, #0]
 80088b8:	8892      	ldrh	r2, [r2, #4]
 80088ba:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg01, 9);
 80088bc:	4bac      	ldr	r3, [pc, #688]	@ (8008b70 <printer_process+0x2d0>)
 80088be:	2206      	movs	r2, #6
 80088c0:	49ad      	ldr	r1, [pc, #692]	@ (8008b78 <printer_process+0x2d8>)
 80088c2:	189b      	adds	r3, r3, r2
 80088c4:	2209      	movs	r2, #9
 80088c6:	0018      	movs	r0, r3
 80088c8:	f010 fc36 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg02, 9);
 80088cc:	4ba8      	ldr	r3, [pc, #672]	@ (8008b70 <printer_process+0x2d0>)
 80088ce:	220f      	movs	r2, #15
 80088d0:	49aa      	ldr	r1, [pc, #680]	@ (8008b7c <printer_process+0x2dc>)
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	2209      	movs	r2, #9
 80088d6:	0018      	movs	r0, r3
 80088d8:	f010 fc2e 	bl	8019138 <memcpy>
	memcpy(receipt1.va, plate, 14);
 80088dc:	4ba4      	ldr	r3, [pc, #656]	@ (8008b70 <printer_process+0x2d0>)
 80088de:	4aa8      	ldr	r2, [pc, #672]	@ (8008b80 <printer_process+0x2e0>)
 80088e0:	3318      	adds	r3, #24
 80088e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80088e4:	c313      	stmia	r3!, {r0, r1, r4}
 80088e6:	8812      	ldrh	r2, [r2, #0]
 80088e8:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 80088ea:	4ba6      	ldr	r3, [pc, #664]	@ (8008b84 <printer_process+0x2e4>)
 80088ec:	881a      	ldrh	r2, [r3, #0]
 80088ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008b70 <printer_process+0x2d0>)
 80088f0:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 80088f2:	4a9e      	ldr	r2, [pc, #632]	@ (8008b6c <printer_process+0x2cc>)
 80088f4:	4b9e      	ldr	r3, [pc, #632]	@ (8008b70 <printer_process+0x2d0>)
 80088f6:	0011      	movs	r1, r2
 80088f8:	0018      	movs	r0, r3
 80088fa:	f000 fd7d 	bl	80093f8 <printer_transmit>
	//row2: start
	memcpy(receipt1.sp, cmd, 6);
 80088fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008b70 <printer_process+0x2d0>)
 8008900:	4a9c      	ldr	r2, [pc, #624]	@ (8008b74 <printer_process+0x2d4>)
 8008902:	6811      	ldr	r1, [r2, #0]
 8008904:	6019      	str	r1, [r3, #0]
 8008906:	8892      	ldrh	r2, [r2, #4]
 8008908:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg03, 9);
 800890a:	4b99      	ldr	r3, [pc, #612]	@ (8008b70 <printer_process+0x2d0>)
 800890c:	2206      	movs	r2, #6
 800890e:	499e      	ldr	r1, [pc, #632]	@ (8008b88 <printer_process+0x2e8>)
 8008910:	189b      	adds	r3, r3, r2
 8008912:	2209      	movs	r2, #9
 8008914:	0018      	movs	r0, r3
 8008916:	f010 fc0f 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg04, 9);
 800891a:	4b95      	ldr	r3, [pc, #596]	@ (8008b70 <printer_process+0x2d0>)
 800891c:	220f      	movs	r2, #15
 800891e:	499b      	ldr	r1, [pc, #620]	@ (8008b8c <printer_process+0x2ec>)
 8008920:	189b      	adds	r3, r3, r2
 8008922:	2209      	movs	r2, #9
 8008924:	0018      	movs	r0, r3
 8008926:	f010 fc07 	bl	8019138 <memcpy>
	memcpy(receipt1.va, start, 14);
 800892a:	4b91      	ldr	r3, [pc, #580]	@ (8008b70 <printer_process+0x2d0>)
 800892c:	4a98      	ldr	r2, [pc, #608]	@ (8008b90 <printer_process+0x2f0>)
 800892e:	3318      	adds	r3, #24
 8008930:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008932:	c313      	stmia	r3!, {r0, r1, r4}
 8008934:	8812      	ldrh	r2, [r2, #0]
 8008936:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008938:	4b92      	ldr	r3, [pc, #584]	@ (8008b84 <printer_process+0x2e4>)
 800893a:	881a      	ldrh	r2, [r3, #0]
 800893c:	4b8c      	ldr	r3, [pc, #560]	@ (8008b70 <printer_process+0x2d0>)
 800893e:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008940:	4a8a      	ldr	r2, [pc, #552]	@ (8008b6c <printer_process+0x2cc>)
 8008942:	4b8b      	ldr	r3, [pc, #556]	@ (8008b70 <printer_process+0x2d0>)
 8008944:	0011      	movs	r1, r2
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fd56 	bl	80093f8 <printer_transmit>
	//row3: end
	memcpy(receipt1.sp, cmd, 6);
 800894c:	4b88      	ldr	r3, [pc, #544]	@ (8008b70 <printer_process+0x2d0>)
 800894e:	4a89      	ldr	r2, [pc, #548]	@ (8008b74 <printer_process+0x2d4>)
 8008950:	6811      	ldr	r1, [r2, #0]
 8008952:	6019      	str	r1, [r3, #0]
 8008954:	8892      	ldrh	r2, [r2, #4]
 8008956:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg05, 9);
 8008958:	4b85      	ldr	r3, [pc, #532]	@ (8008b70 <printer_process+0x2d0>)
 800895a:	2206      	movs	r2, #6
 800895c:	498d      	ldr	r1, [pc, #564]	@ (8008b94 <printer_process+0x2f4>)
 800895e:	189b      	adds	r3, r3, r2
 8008960:	2209      	movs	r2, #9
 8008962:	0018      	movs	r0, r3
 8008964:	f010 fbe8 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg06, 9);
 8008968:	4b81      	ldr	r3, [pc, #516]	@ (8008b70 <printer_process+0x2d0>)
 800896a:	220f      	movs	r2, #15
 800896c:	498a      	ldr	r1, [pc, #552]	@ (8008b98 <printer_process+0x2f8>)
 800896e:	189b      	adds	r3, r3, r2
 8008970:	2209      	movs	r2, #9
 8008972:	0018      	movs	r0, r3
 8008974:	f010 fbe0 	bl	8019138 <memcpy>
	memcpy(receipt1.va, end, 14);
 8008978:	4b7d      	ldr	r3, [pc, #500]	@ (8008b70 <printer_process+0x2d0>)
 800897a:	4a88      	ldr	r2, [pc, #544]	@ (8008b9c <printer_process+0x2fc>)
 800897c:	3318      	adds	r3, #24
 800897e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008980:	c313      	stmia	r3!, {r0, r1, r4}
 8008982:	8812      	ldrh	r2, [r2, #0]
 8008984:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008986:	4b7f      	ldr	r3, [pc, #508]	@ (8008b84 <printer_process+0x2e4>)
 8008988:	881a      	ldrh	r2, [r3, #0]
 800898a:	4b79      	ldr	r3, [pc, #484]	@ (8008b70 <printer_process+0x2d0>)
 800898c:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 800898e:	4a77      	ldr	r2, [pc, #476]	@ (8008b6c <printer_process+0x2cc>)
 8008990:	4b77      	ldr	r3, [pc, #476]	@ (8008b70 <printer_process+0x2d0>)
 8008992:	0011      	movs	r1, r2
 8008994:	0018      	movs	r0, r3
 8008996:	f000 fd2f 	bl	80093f8 <printer_transmit>
	//row4: total_km
	memcpy(receipt1.sp, cmd, 6);
 800899a:	4b75      	ldr	r3, [pc, #468]	@ (8008b70 <printer_process+0x2d0>)
 800899c:	4a75      	ldr	r2, [pc, #468]	@ (8008b74 <printer_process+0x2d4>)
 800899e:	6811      	ldr	r1, [r2, #0]
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	8892      	ldrh	r2, [r2, #4]
 80089a4:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg07, 9);
 80089a6:	4b72      	ldr	r3, [pc, #456]	@ (8008b70 <printer_process+0x2d0>)
 80089a8:	2206      	movs	r2, #6
 80089aa:	497d      	ldr	r1, [pc, #500]	@ (8008ba0 <printer_process+0x300>)
 80089ac:	189b      	adds	r3, r3, r2
 80089ae:	2209      	movs	r2, #9
 80089b0:	0018      	movs	r0, r3
 80089b2:	f010 fbc1 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg08, 9);
 80089b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008b70 <printer_process+0x2d0>)
 80089b8:	220f      	movs	r2, #15
 80089ba:	497a      	ldr	r1, [pc, #488]	@ (8008ba4 <printer_process+0x304>)
 80089bc:	189b      	adds	r3, r3, r2
 80089be:	2209      	movs	r2, #9
 80089c0:	0018      	movs	r0, r3
 80089c2:	f010 fbb9 	bl	8019138 <memcpy>
	memcpy(receipt1.va, total_km, 14);
 80089c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008b70 <printer_process+0x2d0>)
 80089c8:	4a77      	ldr	r2, [pc, #476]	@ (8008ba8 <printer_process+0x308>)
 80089ca:	3318      	adds	r3, #24
 80089cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80089ce:	c313      	stmia	r3!, {r0, r1, r4}
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 80089d4:	4b6b      	ldr	r3, [pc, #428]	@ (8008b84 <printer_process+0x2e4>)
 80089d6:	881a      	ldrh	r2, [r3, #0]
 80089d8:	4b65      	ldr	r3, [pc, #404]	@ (8008b70 <printer_process+0x2d0>)
 80089da:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 80089dc:	4a63      	ldr	r2, [pc, #396]	@ (8008b6c <printer_process+0x2cc>)
 80089de:	4b64      	ldr	r3, [pc, #400]	@ (8008b70 <printer_process+0x2d0>)
 80089e0:	0011      	movs	r1, r2
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 fd08 	bl	80093f8 <printer_transmit>
	//row5: paid_km
	memcpy(receipt1.sp, cmd, 6);
 80089e8:	4b61      	ldr	r3, [pc, #388]	@ (8008b70 <printer_process+0x2d0>)
 80089ea:	4a62      	ldr	r2, [pc, #392]	@ (8008b74 <printer_process+0x2d4>)
 80089ec:	6811      	ldr	r1, [r2, #0]
 80089ee:	6019      	str	r1, [r3, #0]
 80089f0:	8892      	ldrh	r2, [r2, #4]
 80089f2:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg09, 9);
 80089f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008b70 <printer_process+0x2d0>)
 80089f6:	2206      	movs	r2, #6
 80089f8:	496c      	ldr	r1, [pc, #432]	@ (8008bac <printer_process+0x30c>)
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	2209      	movs	r2, #9
 80089fe:	0018      	movs	r0, r3
 8008a00:	f010 fb9a 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg10, 9);
 8008a04:	4b5a      	ldr	r3, [pc, #360]	@ (8008b70 <printer_process+0x2d0>)
 8008a06:	220f      	movs	r2, #15
 8008a08:	4969      	ldr	r1, [pc, #420]	@ (8008bb0 <printer_process+0x310>)
 8008a0a:	189b      	adds	r3, r3, r2
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f010 fb92 	bl	8019138 <memcpy>
	memcpy(receipt1.va, paid_km, 14);
 8008a14:	4b56      	ldr	r3, [pc, #344]	@ (8008b70 <printer_process+0x2d0>)
 8008a16:	4a67      	ldr	r2, [pc, #412]	@ (8008bb4 <printer_process+0x314>)
 8008a18:	3318      	adds	r3, #24
 8008a1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008a1c:	c313      	stmia	r3!, {r0, r1, r4}
 8008a1e:	8812      	ldrh	r2, [r2, #0]
 8008a20:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008a22:	4b58      	ldr	r3, [pc, #352]	@ (8008b84 <printer_process+0x2e4>)
 8008a24:	881a      	ldrh	r2, [r3, #0]
 8008a26:	4b52      	ldr	r3, [pc, #328]	@ (8008b70 <printer_process+0x2d0>)
 8008a28:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008a2a:	4a50      	ldr	r2, [pc, #320]	@ (8008b6c <printer_process+0x2cc>)
 8008a2c:	4b50      	ldr	r3, [pc, #320]	@ (8008b70 <printer_process+0x2d0>)
 8008a2e:	0011      	movs	r1, r2
 8008a30:	0018      	movs	r0, r3
 8008a32:	f000 fce1 	bl	80093f8 <printer_transmit>
	//row6: paid_min
	memcpy(receipt1.sp, cmd, 6);
 8008a36:	4b4e      	ldr	r3, [pc, #312]	@ (8008b70 <printer_process+0x2d0>)
 8008a38:	4a4e      	ldr	r2, [pc, #312]	@ (8008b74 <printer_process+0x2d4>)
 8008a3a:	6811      	ldr	r1, [r2, #0]
 8008a3c:	6019      	str	r1, [r3, #0]
 8008a3e:	8892      	ldrh	r2, [r2, #4]
 8008a40:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg11, 9);
 8008a42:	4b4b      	ldr	r3, [pc, #300]	@ (8008b70 <printer_process+0x2d0>)
 8008a44:	2206      	movs	r2, #6
 8008a46:	495c      	ldr	r1, [pc, #368]	@ (8008bb8 <printer_process+0x318>)
 8008a48:	189b      	adds	r3, r3, r2
 8008a4a:	2209      	movs	r2, #9
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f010 fb73 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg12, 9);
 8008a52:	4b47      	ldr	r3, [pc, #284]	@ (8008b70 <printer_process+0x2d0>)
 8008a54:	220f      	movs	r2, #15
 8008a56:	4959      	ldr	r1, [pc, #356]	@ (8008bbc <printer_process+0x31c>)
 8008a58:	189b      	adds	r3, r3, r2
 8008a5a:	2209      	movs	r2, #9
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f010 fb6b 	bl	8019138 <memcpy>
	memcpy(receipt1.va, paid_min, 14);
 8008a62:	4b43      	ldr	r3, [pc, #268]	@ (8008b70 <printer_process+0x2d0>)
 8008a64:	4a56      	ldr	r2, [pc, #344]	@ (8008bc0 <printer_process+0x320>)
 8008a66:	3318      	adds	r3, #24
 8008a68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008a6a:	c313      	stmia	r3!, {r0, r1, r4}
 8008a6c:	8812      	ldrh	r2, [r2, #0]
 8008a6e:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008a70:	4b44      	ldr	r3, [pc, #272]	@ (8008b84 <printer_process+0x2e4>)
 8008a72:	881a      	ldrh	r2, [r3, #0]
 8008a74:	4b3e      	ldr	r3, [pc, #248]	@ (8008b70 <printer_process+0x2d0>)
 8008a76:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008a78:	4a3c      	ldr	r2, [pc, #240]	@ (8008b6c <printer_process+0x2cc>)
 8008a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8008b70 <printer_process+0x2d0>)
 8008a7c:	0011      	movs	r1, r2
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f000 fcba 	bl	80093f8 <printer_transmit>
	//row7: surcharge
	memcpy(receipt1.sp, cmd, 6);
 8008a84:	4b3a      	ldr	r3, [pc, #232]	@ (8008b70 <printer_process+0x2d0>)
 8008a86:	4a3b      	ldr	r2, [pc, #236]	@ (8008b74 <printer_process+0x2d4>)
 8008a88:	6811      	ldr	r1, [r2, #0]
 8008a8a:	6019      	str	r1, [r3, #0]
 8008a8c:	8892      	ldrh	r2, [r2, #4]
 8008a8e:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg13, 9);
 8008a90:	4b37      	ldr	r3, [pc, #220]	@ (8008b70 <printer_process+0x2d0>)
 8008a92:	2206      	movs	r2, #6
 8008a94:	494b      	ldr	r1, [pc, #300]	@ (8008bc4 <printer_process+0x324>)
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	2209      	movs	r2, #9
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f010 fb4c 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg14, 9);
 8008aa0:	4b33      	ldr	r3, [pc, #204]	@ (8008b70 <printer_process+0x2d0>)
 8008aa2:	220f      	movs	r2, #15
 8008aa4:	4948      	ldr	r1, [pc, #288]	@ (8008bc8 <printer_process+0x328>)
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	2209      	movs	r2, #9
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f010 fb44 	bl	8019138 <memcpy>
	memcpy(receipt1.va, sub, 14);
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8008b70 <printer_process+0x2d0>)
 8008ab2:	4a46      	ldr	r2, [pc, #280]	@ (8008bcc <printer_process+0x32c>)
 8008ab4:	3318      	adds	r3, #24
 8008ab6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008ab8:	c313      	stmia	r3!, {r0, r1, r4}
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008abe:	4b31      	ldr	r3, [pc, #196]	@ (8008b84 <printer_process+0x2e4>)
 8008ac0:	881a      	ldrh	r2, [r3, #0]
 8008ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b70 <printer_process+0x2d0>)
 8008ac4:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008ac6:	4a29      	ldr	r2, [pc, #164]	@ (8008b6c <printer_process+0x2cc>)
 8008ac8:	4b29      	ldr	r3, [pc, #164]	@ (8008b70 <printer_process+0x2d0>)
 8008aca:	0011      	movs	r1, r2
 8008acc:	0018      	movs	r0, r3
 8008ace:	f000 fc93 	bl	80093f8 <printer_transmit>
	//row8: total_fare
	memcpy(receipt2.sp, cmd, 6);
 8008ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bd0 <printer_process+0x330>)
 8008ad4:	4a27      	ldr	r2, [pc, #156]	@ (8008b74 <printer_process+0x2d4>)
 8008ad6:	6811      	ldr	r1, [r2, #0]
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	8892      	ldrh	r2, [r2, #4]
 8008adc:	809a      	strh	r2, [r3, #4]
	memcpy(receipt2.ch, msg15, 9);
 8008ade:	4b3c      	ldr	r3, [pc, #240]	@ (8008bd0 <printer_process+0x330>)
 8008ae0:	2206      	movs	r2, #6
 8008ae2:	493c      	ldr	r1, [pc, #240]	@ (8008bd4 <printer_process+0x334>)
 8008ae4:	189b      	adds	r3, r3, r2
 8008ae6:	2209      	movs	r2, #9
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f010 fb25 	bl	8019138 <memcpy>
	memcpy(receipt2.en, msg16, 10);
 8008aee:	4b38      	ldr	r3, [pc, #224]	@ (8008bd0 <printer_process+0x330>)
 8008af0:	220f      	movs	r2, #15
 8008af2:	4939      	ldr	r1, [pc, #228]	@ (8008bd8 <printer_process+0x338>)
 8008af4:	189b      	adds	r3, r3, r2
 8008af6:	220a      	movs	r2, #10
 8008af8:	0018      	movs	r0, r3
 8008afa:	f010 fb1d 	bl	8019138 <memcpy>
	memcpy(receipt2.va, t_fare, 13);
 8008afe:	4b34      	ldr	r3, [pc, #208]	@ (8008bd0 <printer_process+0x330>)
 8008b00:	2219      	movs	r2, #25
 8008b02:	4936      	ldr	r1, [pc, #216]	@ (8008bdc <printer_process+0x33c>)
 8008b04:	189b      	adds	r3, r3, r2
 8008b06:	220d      	movs	r2, #13
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f010 fb15 	bl	8019138 <memcpy>
	memcpy(receipt2.cmd, enter,2);
 8008b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <printer_process+0x2e4>)
 8008b10:	881a      	ldrh	r2, [r3, #0]
 8008b12:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd0 <printer_process+0x330>)
 8008b14:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit2(&receipt2, &hlpuart1);
 8008b16:	4a15      	ldr	r2, [pc, #84]	@ (8008b6c <printer_process+0x2cc>)
 8008b18:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd0 <printer_process+0x330>)
 8008b1a:	0011      	movs	r1, r2
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f000 fc8d 	bl	800943c <printer_transmit2>
	//row_end: thank you
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) enter, sizeof(enter), 0xffff);
 8008b22:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <printer_process+0x2c4>)
 8008b24:	4917      	ldr	r1, [pc, #92]	@ (8008b84 <printer_process+0x2e4>)
 8008b26:	4811      	ldr	r0, [pc, #68]	@ (8008b6c <printer_process+0x2cc>)
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f00a ff81 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) msg17, sizeof(msg17), 0xffff);
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <printer_process+0x2c4>)
 8008b30:	492b      	ldr	r1, [pc, #172]	@ (8008be0 <printer_process+0x340>)
 8008b32:	480e      	ldr	r0, [pc, #56]	@ (8008b6c <printer_process+0x2cc>)
 8008b34:	2210      	movs	r2, #16
 8008b36:	f00a ff7b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) msg18, sizeof(msg18), 0xffff);
 8008b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b64 <printer_process+0x2c4>)
 8008b3c:	4929      	ldr	r1, [pc, #164]	@ (8008be4 <printer_process+0x344>)
 8008b3e:	480b      	ldr	r0, [pc, #44]	@ (8008b6c <printer_process+0x2cc>)
 8008b40:	2210      	movs	r2, #16
 8008b42:	f00a ff75 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 8008b46:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <printer_process+0x2c4>)
 8008b48:	4907      	ldr	r1, [pc, #28]	@ (8008b68 <printer_process+0x2c8>)
 8008b4a:	4808      	ldr	r0, [pc, #32]	@ (8008b6c <printer_process+0x2cc>)
 8008b4c:	2206      	movs	r2, #6
 8008b4e:	f00a ff6f 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 8008b52:	4b04      	ldr	r3, [pc, #16]	@ (8008b64 <printer_process+0x2c4>)
 8008b54:	4904      	ldr	r1, [pc, #16]	@ (8008b68 <printer_process+0x2c8>)
 8008b56:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <printer_process+0x2cc>)
 8008b58:	2206      	movs	r2, #6
 8008b5a:	f00a ff69 	bl	8013a30 <HAL_UART_Transmit>
}
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bdb0      	pop	{r4, r5, r7, pc}
 8008b64:	0000ffff 	.word	0x0000ffff
 8008b68:	2000022c 	.word	0x2000022c
 8008b6c:	20000670 	.word	0x20000670
 8008b70:	20000b7c 	.word	0x20000b7c
 8008b74:	20000234 	.word	0x20000234
 8008b78:	20000148 	.word	0x20000148
 8008b7c:	200001a8 	.word	0x200001a8
 8008b80:	2000023c 	.word	0x2000023c
 8008b84:	20000228 	.word	0x20000228
 8008b88:	20000154 	.word	0x20000154
 8008b8c:	200001b4 	.word	0x200001b4
 8008b90:	2000024c 	.word	0x2000024c
 8008b94:	20000160 	.word	0x20000160
 8008b98:	200001c0 	.word	0x200001c0
 8008b9c:	2000025c 	.word	0x2000025c
 8008ba0:	2000016c 	.word	0x2000016c
 8008ba4:	200001cc 	.word	0x200001cc
 8008ba8:	2000027c 	.word	0x2000027c
 8008bac:	20000178 	.word	0x20000178
 8008bb0:	200001d8 	.word	0x200001d8
 8008bb4:	2000028c 	.word	0x2000028c
 8008bb8:	20000184 	.word	0x20000184
 8008bbc:	200001e4 	.word	0x200001e4
 8008bc0:	2000029c 	.word	0x2000029c
 8008bc4:	20000190 	.word	0x20000190
 8008bc8:	200001f0 	.word	0x200001f0
 8008bcc:	200002ac 	.word	0x200002ac
 8008bd0:	20000ba4 	.word	0x20000ba4
 8008bd4:	2000019c 	.word	0x2000019c
 8008bd8:	200001fc 	.word	0x200001fc
 8008bdc:	200002bc 	.word	0x200002bc
 8008be0:	20000208 	.word	0x20000208
 8008be4:	20000218 	.word	0x20000218

08008be8 <printer_e>:

void printer_e(void)
{
 8008be8:	b590      	push	{r4, r7, lr}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
	E_read();
 8008bee:	f002 fc71 	bl	800b4d4 <E_read>
	//row_init: space + enter
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 8008bf2:	4bc6      	ldr	r3, [pc, #792]	@ (8008f0c <printer_e+0x324>)
 8008bf4:	49c6      	ldr	r1, [pc, #792]	@ (8008f10 <printer_e+0x328>)
 8008bf6:	48c7      	ldr	r0, [pc, #796]	@ (8008f14 <printer_e+0x32c>)
 8008bf8:	2206      	movs	r2, #6
 8008bfa:	f00a ff19 	bl	8013a30 <HAL_UART_Transmit>
	//row1: taxi no.
	memcpy(receipt1.sp, cmd, 6);
 8008bfe:	4bc6      	ldr	r3, [pc, #792]	@ (8008f18 <printer_e+0x330>)
 8008c00:	4ac6      	ldr	r2, [pc, #792]	@ (8008f1c <printer_e+0x334>)
 8008c02:	6811      	ldr	r1, [r2, #0]
 8008c04:	6019      	str	r1, [r3, #0]
 8008c06:	8892      	ldrh	r2, [r2, #4]
 8008c08:	809a      	strh	r2, [r3, #4]
	memcpy(receipt1.ch, msg01, 9);
 8008c0a:	4bc3      	ldr	r3, [pc, #780]	@ (8008f18 <printer_e+0x330>)
 8008c0c:	2206      	movs	r2, #6
 8008c0e:	49c4      	ldr	r1, [pc, #784]	@ (8008f20 <printer_e+0x338>)
 8008c10:	189b      	adds	r3, r3, r2
 8008c12:	2209      	movs	r2, #9
 8008c14:	0018      	movs	r0, r3
 8008c16:	f010 fa8f 	bl	8019138 <memcpy>
	memcpy(receipt1.en, msg02, 9);
 8008c1a:	4bbf      	ldr	r3, [pc, #764]	@ (8008f18 <printer_e+0x330>)
 8008c1c:	220f      	movs	r2, #15
 8008c1e:	49c1      	ldr	r1, [pc, #772]	@ (8008f24 <printer_e+0x33c>)
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	2209      	movs	r2, #9
 8008c24:	0018      	movs	r0, r3
 8008c26:	f010 fa87 	bl	8019138 <memcpy>
	memcpy(receipt1.va, plate, 14);
 8008c2a:	4bbb      	ldr	r3, [pc, #748]	@ (8008f18 <printer_e+0x330>)
 8008c2c:	4abe      	ldr	r2, [pc, #760]	@ (8008f28 <printer_e+0x340>)
 8008c2e:	3318      	adds	r3, #24
 8008c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008c32:	c313      	stmia	r3!, {r0, r1, r4}
 8008c34:	8812      	ldrh	r2, [r2, #0]
 8008c36:	801a      	strh	r2, [r3, #0]
	memcpy(receipt1.cmd, enter,2);
 8008c38:	4bbc      	ldr	r3, [pc, #752]	@ (8008f2c <printer_e+0x344>)
 8008c3a:	881a      	ldrh	r2, [r3, #0]
 8008c3c:	4bb6      	ldr	r3, [pc, #728]	@ (8008f18 <printer_e+0x330>)
 8008c3e:	84da      	strh	r2, [r3, #38]	@ 0x26
	printer_transmit(&receipt1, &hlpuart1);
 8008c40:	4ab4      	ldr	r2, [pc, #720]	@ (8008f14 <printer_e+0x32c>)
 8008c42:	4bb5      	ldr	r3, [pc, #724]	@ (8008f18 <printer_e+0x330>)
 8008c44:	0011      	movs	r1, r2
 8008c46:	0018      	movs	r0, r3
 8008c48:	f000 fbd6 	bl	80093f8 <printer_transmit>
	//row2: total km
	if (tkm[0] == 0x30)
 8008c4c:	4bb8      	ldr	r3, [pc, #736]	@ (8008f30 <printer_e+0x348>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b30      	cmp	r3, #48	@ 0x30
 8008c52:	d103      	bne.n	8008c5c <printer_e+0x74>
		data01[0] = 0x20;
 8008c54:	4bb7      	ldr	r3, [pc, #732]	@ (8008f34 <printer_e+0x34c>)
 8008c56:	2220      	movs	r2, #32
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	e003      	b.n	8008c64 <printer_e+0x7c>
	else
		data01[0] = tkm[0];
 8008c5c:	4bb4      	ldr	r3, [pc, #720]	@ (8008f30 <printer_e+0x348>)
 8008c5e:	781a      	ldrb	r2, [r3, #0]
 8008c60:	4bb4      	ldr	r3, [pc, #720]	@ (8008f34 <printer_e+0x34c>)
 8008c62:	701a      	strb	r2, [r3, #0]

	for (int i=1; i<=4; i++)
 8008c64:	2301      	movs	r3, #1
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e01d      	b.n	8008ca6 <printer_e+0xbe>
	{
		if (tkm[i] == 0x30 && tkm[i-1] == 0x30)
 8008c6a:	4ab1      	ldr	r2, [pc, #708]	@ (8008f30 <printer_e+0x348>)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	18d3      	adds	r3, r2, r3
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b30      	cmp	r3, #48	@ 0x30
 8008c74:	d10b      	bne.n	8008c8e <printer_e+0xa6>
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	4aad      	ldr	r2, [pc, #692]	@ (8008f30 <printer_e+0x348>)
 8008c7c:	5cd3      	ldrb	r3, [r2, r3]
 8008c7e:	2b30      	cmp	r3, #48	@ 0x30
 8008c80:	d105      	bne.n	8008c8e <printer_e+0xa6>
			data01[i] = 0x20;
 8008c82:	4aac      	ldr	r2, [pc, #688]	@ (8008f34 <printer_e+0x34c>)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	2220      	movs	r2, #32
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e008      	b.n	8008ca0 <printer_e+0xb8>
		else
			data01[i] = tkm[i];
 8008c8e:	4aa8      	ldr	r2, [pc, #672]	@ (8008f30 <printer_e+0x348>)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	18d3      	adds	r3, r2, r3
 8008c94:	7819      	ldrb	r1, [r3, #0]
 8008c96:	4aa7      	ldr	r2, [pc, #668]	@ (8008f34 <printer_e+0x34c>)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	18d3      	adds	r3, r2, r3
 8008c9c:	1c0a      	adds	r2, r1, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<=4; i++)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	ddde      	ble.n	8008c6a <printer_e+0x82>
	}
	data01[5] = tkm[5];
 8008cac:	4ba0      	ldr	r3, [pc, #640]	@ (8008f30 <printer_e+0x348>)
 8008cae:	795a      	ldrb	r2, [r3, #5]
 8008cb0:	4ba0      	ldr	r3, [pc, #640]	@ (8008f34 <printer_e+0x34c>)
 8008cb2:	715a      	strb	r2, [r3, #5]
	data01[7] = tkm[6];
 8008cb4:	4b9e      	ldr	r3, [pc, #632]	@ (8008f30 <printer_e+0x348>)
 8008cb6:	799a      	ldrb	r2, [r3, #6]
 8008cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8008f34 <printer_e+0x34c>)
 8008cba:	71da      	strb	r2, [r3, #7]
	data01[8] = tkm[7];
 8008cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8008f30 <printer_e+0x348>)
 8008cbe:	79da      	ldrb	r2, [r3, #7]
 8008cc0:	4b9c      	ldr	r3, [pc, #624]	@ (8008f34 <printer_e+0x34c>)
 8008cc2:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008cc4:	4b91      	ldr	r3, [pc, #580]	@ (8008f0c <printer_e+0x324>)
 8008cc6:	4995      	ldr	r1, [pc, #596]	@ (8008f1c <printer_e+0x334>)
 8008cc8:	4892      	ldr	r0, [pc, #584]	@ (8008f14 <printer_e+0x32c>)
 8008cca:	2206      	movs	r2, #6
 8008ccc:	f00a feb0 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg01, 23, 0xffff);
 8008cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8008f0c <printer_e+0x324>)
 8008cd2:	4999      	ldr	r1, [pc, #612]	@ (8008f38 <printer_e+0x350>)
 8008cd4:	488f      	ldr	r0, [pc, #572]	@ (8008f14 <printer_e+0x32c>)
 8008cd6:	2217      	movs	r2, #23
 8008cd8:	f00a feaa 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data01, 9, 0xffff);
 8008cdc:	4b8b      	ldr	r3, [pc, #556]	@ (8008f0c <printer_e+0x324>)
 8008cde:	4995      	ldr	r1, [pc, #596]	@ (8008f34 <printer_e+0x34c>)
 8008ce0:	488c      	ldr	r0, [pc, #560]	@ (8008f14 <printer_e+0x32c>)
 8008ce2:	2209      	movs	r2, #9
 8008ce4:	f00a fea4 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008ce8:	4b88      	ldr	r3, [pc, #544]	@ (8008f0c <printer_e+0x324>)
 8008cea:	4990      	ldr	r1, [pc, #576]	@ (8008f2c <printer_e+0x344>)
 8008cec:	4889      	ldr	r0, [pc, #548]	@ (8008f14 <printer_e+0x32c>)
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f00a fe9e 	bl	8013a30 <HAL_UART_Transmit>
	//row3: paid km
	if (pkm[0] == 0x30)
 8008cf4:	4b91      	ldr	r3, [pc, #580]	@ (8008f3c <printer_e+0x354>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b30      	cmp	r3, #48	@ 0x30
 8008cfa:	d103      	bne.n	8008d04 <printer_e+0x11c>
		data02[0] = 0x20;
 8008cfc:	4b90      	ldr	r3, [pc, #576]	@ (8008f40 <printer_e+0x358>)
 8008cfe:	2220      	movs	r2, #32
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e003      	b.n	8008d0c <printer_e+0x124>
	else
		data02[0] = pkm[0];
 8008d04:	4b8d      	ldr	r3, [pc, #564]	@ (8008f3c <printer_e+0x354>)
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	4b8d      	ldr	r3, [pc, #564]	@ (8008f40 <printer_e+0x358>)
 8008d0a:	701a      	strb	r2, [r3, #0]

	for (int i=1; i<=4; i++)
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	e01d      	b.n	8008d4e <printer_e+0x166>
	{
		if (pkm[i] == 0x30 && pkm[i-1] == 0x30)
 8008d12:	4a8a      	ldr	r2, [pc, #552]	@ (8008f3c <printer_e+0x354>)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b30      	cmp	r3, #48	@ 0x30
 8008d1c:	d10b      	bne.n	8008d36 <printer_e+0x14e>
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4a86      	ldr	r2, [pc, #536]	@ (8008f3c <printer_e+0x354>)
 8008d24:	5cd3      	ldrb	r3, [r2, r3]
 8008d26:	2b30      	cmp	r3, #48	@ 0x30
 8008d28:	d105      	bne.n	8008d36 <printer_e+0x14e>
			data02[i] = 0x20;
 8008d2a:	4a85      	ldr	r2, [pc, #532]	@ (8008f40 <printer_e+0x358>)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	18d3      	adds	r3, r2, r3
 8008d30:	2220      	movs	r2, #32
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	e008      	b.n	8008d48 <printer_e+0x160>
		else
			data02[i] = pkm[i];
 8008d36:	4a81      	ldr	r2, [pc, #516]	@ (8008f3c <printer_e+0x354>)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	18d3      	adds	r3, r2, r3
 8008d3c:	7819      	ldrb	r1, [r3, #0]
 8008d3e:	4a80      	ldr	r2, [pc, #512]	@ (8008f40 <printer_e+0x358>)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	18d3      	adds	r3, r2, r3
 8008d44:	1c0a      	adds	r2, r1, #0
 8008d46:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<=4; i++)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	ddde      	ble.n	8008d12 <printer_e+0x12a>
	}
	data02[5] = pkm[5];
 8008d54:	4b79      	ldr	r3, [pc, #484]	@ (8008f3c <printer_e+0x354>)
 8008d56:	795a      	ldrb	r2, [r3, #5]
 8008d58:	4b79      	ldr	r3, [pc, #484]	@ (8008f40 <printer_e+0x358>)
 8008d5a:	715a      	strb	r2, [r3, #5]
	data02[7] = pkm[6];
 8008d5c:	4b77      	ldr	r3, [pc, #476]	@ (8008f3c <printer_e+0x354>)
 8008d5e:	799a      	ldrb	r2, [r3, #6]
 8008d60:	4b77      	ldr	r3, [pc, #476]	@ (8008f40 <printer_e+0x358>)
 8008d62:	71da      	strb	r2, [r3, #7]
	data02[8] = pkm[7];
 8008d64:	4b75      	ldr	r3, [pc, #468]	@ (8008f3c <printer_e+0x354>)
 8008d66:	79da      	ldrb	r2, [r3, #7]
 8008d68:	4b75      	ldr	r3, [pc, #468]	@ (8008f40 <printer_e+0x358>)
 8008d6a:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008d6c:	4b67      	ldr	r3, [pc, #412]	@ (8008f0c <printer_e+0x324>)
 8008d6e:	496b      	ldr	r1, [pc, #428]	@ (8008f1c <printer_e+0x334>)
 8008d70:	4868      	ldr	r0, [pc, #416]	@ (8008f14 <printer_e+0x32c>)
 8008d72:	2206      	movs	r2, #6
 8008d74:	f00a fe5c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg02, 23, 0xffff);
 8008d78:	4b64      	ldr	r3, [pc, #400]	@ (8008f0c <printer_e+0x324>)
 8008d7a:	4972      	ldr	r1, [pc, #456]	@ (8008f44 <printer_e+0x35c>)
 8008d7c:	4865      	ldr	r0, [pc, #404]	@ (8008f14 <printer_e+0x32c>)
 8008d7e:	2217      	movs	r2, #23
 8008d80:	f00a fe56 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data02, 9, 0xffff);
 8008d84:	4b61      	ldr	r3, [pc, #388]	@ (8008f0c <printer_e+0x324>)
 8008d86:	496e      	ldr	r1, [pc, #440]	@ (8008f40 <printer_e+0x358>)
 8008d88:	4862      	ldr	r0, [pc, #392]	@ (8008f14 <printer_e+0x32c>)
 8008d8a:	2209      	movs	r2, #9
 8008d8c:	f00a fe50 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008d90:	4b5e      	ldr	r3, [pc, #376]	@ (8008f0c <printer_e+0x324>)
 8008d92:	4966      	ldr	r1, [pc, #408]	@ (8008f2c <printer_e+0x344>)
 8008d94:	485f      	ldr	r0, [pc, #380]	@ (8008f14 <printer_e+0x32c>)
 8008d96:	2202      	movs	r2, #2
 8008d98:	f00a fe4a 	bl	8013a30 <HAL_UART_Transmit>
	//row4: total flags
	if (tflag[2] == 0x30)
 8008d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f48 <printer_e+0x360>)
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	2b30      	cmp	r3, #48	@ 0x30
 8008da2:	d103      	bne.n	8008dac <printer_e+0x1c4>
		data03[3] = 0x20;
 8008da4:	4b69      	ldr	r3, [pc, #420]	@ (8008f4c <printer_e+0x364>)
 8008da6:	2220      	movs	r2, #32
 8008da8:	70da      	strb	r2, [r3, #3]
 8008daa:	e003      	b.n	8008db4 <printer_e+0x1cc>
	else
		data03[3] = tflag[2];
 8008dac:	4b66      	ldr	r3, [pc, #408]	@ (8008f48 <printer_e+0x360>)
 8008dae:	789a      	ldrb	r2, [r3, #2]
 8008db0:	4b66      	ldr	r3, [pc, #408]	@ (8008f4c <printer_e+0x364>)
 8008db2:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 8008db4:	2303      	movs	r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e01c      	b.n	8008df4 <printer_e+0x20c>
	{
		if (tflag[i] == 0x30 && tflag[i-1] == 0x30)
 8008dba:	4a63      	ldr	r2, [pc, #396]	@ (8008f48 <printer_e+0x360>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	18d3      	adds	r3, r2, r3
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b30      	cmp	r3, #48	@ 0x30
 8008dc4:	d10b      	bne.n	8008dde <printer_e+0x1f6>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	4a5f      	ldr	r2, [pc, #380]	@ (8008f48 <printer_e+0x360>)
 8008dcc:	5cd3      	ldrb	r3, [r2, r3]
 8008dce:	2b30      	cmp	r3, #48	@ 0x30
 8008dd0:	d105      	bne.n	8008dde <printer_e+0x1f6>
			data03[i+1] = 0x20;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8008f4c <printer_e+0x364>)
 8008dd8:	2120      	movs	r1, #32
 8008dda:	54d1      	strb	r1, [r2, r3]
 8008ddc:	e007      	b.n	8008dee <printer_e+0x206>
		else
			data03[i+1] = tflag[i];
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	4959      	ldr	r1, [pc, #356]	@ (8008f48 <printer_e+0x360>)
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	188a      	adds	r2, r1, r2
 8008de8:	7811      	ldrb	r1, [r2, #0]
 8008dea:	4a58      	ldr	r2, [pc, #352]	@ (8008f4c <printer_e+0x364>)
 8008dec:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b06      	cmp	r3, #6
 8008df8:	dddf      	ble.n	8008dba <printer_e+0x1d2>
	}
	data03[8] = tflag[7];
 8008dfa:	4b53      	ldr	r3, [pc, #332]	@ (8008f48 <printer_e+0x360>)
 8008dfc:	79da      	ldrb	r2, [r3, #7]
 8008dfe:	4b53      	ldr	r3, [pc, #332]	@ (8008f4c <printer_e+0x364>)
 8008e00:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008e02:	4b42      	ldr	r3, [pc, #264]	@ (8008f0c <printer_e+0x324>)
 8008e04:	4945      	ldr	r1, [pc, #276]	@ (8008f1c <printer_e+0x334>)
 8008e06:	4843      	ldr	r0, [pc, #268]	@ (8008f14 <printer_e+0x32c>)
 8008e08:	2206      	movs	r2, #6
 8008e0a:	f00a fe11 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg03, 23, 0xffff);
 8008e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f0c <printer_e+0x324>)
 8008e10:	494f      	ldr	r1, [pc, #316]	@ (8008f50 <printer_e+0x368>)
 8008e12:	4840      	ldr	r0, [pc, #256]	@ (8008f14 <printer_e+0x32c>)
 8008e14:	2217      	movs	r2, #23
 8008e16:	f00a fe0b 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data03, 9, 0xffff);
 8008e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8008f0c <printer_e+0x324>)
 8008e1c:	494b      	ldr	r1, [pc, #300]	@ (8008f4c <printer_e+0x364>)
 8008e1e:	483d      	ldr	r0, [pc, #244]	@ (8008f14 <printer_e+0x32c>)
 8008e20:	2209      	movs	r2, #9
 8008e22:	f00a fe05 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008e26:	4b39      	ldr	r3, [pc, #228]	@ (8008f0c <printer_e+0x324>)
 8008e28:	4940      	ldr	r1, [pc, #256]	@ (8008f2c <printer_e+0x344>)
 8008e2a:	483a      	ldr	r0, [pc, #232]	@ (8008f14 <printer_e+0x32c>)
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f00a fdff 	bl	8013a30 <HAL_UART_Transmit>
	//row5: current flags
	if (cflag[2] == 0x30)
 8008e32:	4b48      	ldr	r3, [pc, #288]	@ (8008f54 <printer_e+0x36c>)
 8008e34:	789b      	ldrb	r3, [r3, #2]
 8008e36:	2b30      	cmp	r3, #48	@ 0x30
 8008e38:	d103      	bne.n	8008e42 <printer_e+0x25a>
		data04[3] = 0x20;
 8008e3a:	4b47      	ldr	r3, [pc, #284]	@ (8008f58 <printer_e+0x370>)
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	70da      	strb	r2, [r3, #3]
 8008e40:	e003      	b.n	8008e4a <printer_e+0x262>
	else
		data04[3] = cflag[2];
 8008e42:	4b44      	ldr	r3, [pc, #272]	@ (8008f54 <printer_e+0x36c>)
 8008e44:	789a      	ldrb	r2, [r3, #2]
 8008e46:	4b44      	ldr	r3, [pc, #272]	@ (8008f58 <printer_e+0x370>)
 8008e48:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	60bb      	str	r3, [r7, #8]
 8008e4e:	e01c      	b.n	8008e8a <printer_e+0x2a2>
	{
		if (cflag[i] == 0x30 && cflag[i-1] == 0x30)
 8008e50:	4a40      	ldr	r2, [pc, #256]	@ (8008f54 <printer_e+0x36c>)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b30      	cmp	r3, #48	@ 0x30
 8008e5a:	d10b      	bne.n	8008e74 <printer_e+0x28c>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	4a3c      	ldr	r2, [pc, #240]	@ (8008f54 <printer_e+0x36c>)
 8008e62:	5cd3      	ldrb	r3, [r2, r3]
 8008e64:	2b30      	cmp	r3, #48	@ 0x30
 8008e66:	d105      	bne.n	8008e74 <printer_e+0x28c>
			data04[i+1] = 0x20;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8008f58 <printer_e+0x370>)
 8008e6e:	2120      	movs	r1, #32
 8008e70:	54d1      	strb	r1, [r2, r3]
 8008e72:	e007      	b.n	8008e84 <printer_e+0x29c>
		else
			data04[i+1] = cflag[i];
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4936      	ldr	r1, [pc, #216]	@ (8008f54 <printer_e+0x36c>)
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	188a      	adds	r2, r1, r2
 8008e7e:	7811      	ldrb	r1, [r2, #0]
 8008e80:	4a35      	ldr	r2, [pc, #212]	@ (8008f58 <printer_e+0x370>)
 8008e82:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b06      	cmp	r3, #6
 8008e8e:	dddf      	ble.n	8008e50 <printer_e+0x268>
	}
	data04[8] = cflag[7];
 8008e90:	4b30      	ldr	r3, [pc, #192]	@ (8008f54 <printer_e+0x36c>)
 8008e92:	79da      	ldrb	r2, [r3, #7]
 8008e94:	4b30      	ldr	r3, [pc, #192]	@ (8008f58 <printer_e+0x370>)
 8008e96:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008e98:	4b1c      	ldr	r3, [pc, #112]	@ (8008f0c <printer_e+0x324>)
 8008e9a:	4920      	ldr	r1, [pc, #128]	@ (8008f1c <printer_e+0x334>)
 8008e9c:	481d      	ldr	r0, [pc, #116]	@ (8008f14 <printer_e+0x32c>)
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	f00a fdc6 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg04, 23, 0xffff);
 8008ea4:	4b19      	ldr	r3, [pc, #100]	@ (8008f0c <printer_e+0x324>)
 8008ea6:	492d      	ldr	r1, [pc, #180]	@ (8008f5c <printer_e+0x374>)
 8008ea8:	481a      	ldr	r0, [pc, #104]	@ (8008f14 <printer_e+0x32c>)
 8008eaa:	2217      	movs	r2, #23
 8008eac:	f00a fdc0 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data04, 9, 0xffff);
 8008eb0:	4b16      	ldr	r3, [pc, #88]	@ (8008f0c <printer_e+0x324>)
 8008eb2:	4929      	ldr	r1, [pc, #164]	@ (8008f58 <printer_e+0x370>)
 8008eb4:	4817      	ldr	r0, [pc, #92]	@ (8008f14 <printer_e+0x32c>)
 8008eb6:	2209      	movs	r2, #9
 8008eb8:	f00a fdba 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <printer_e+0x324>)
 8008ebe:	491b      	ldr	r1, [pc, #108]	@ (8008f2c <printer_e+0x344>)
 8008ec0:	4814      	ldr	r0, [pc, #80]	@ (8008f14 <printer_e+0x32c>)
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f00a fdb4 	bl	8013a30 <HAL_UART_Transmit>
	//row6: fare changes
	if (tpulse[2] == 0x30)
 8008ec8:	4b25      	ldr	r3, [pc, #148]	@ (8008f60 <printer_e+0x378>)
 8008eca:	789b      	ldrb	r3, [r3, #2]
 8008ecc:	2b30      	cmp	r3, #48	@ 0x30
 8008ece:	d103      	bne.n	8008ed8 <printer_e+0x2f0>
		data05[3] = 0x20;
 8008ed0:	4b24      	ldr	r3, [pc, #144]	@ (8008f64 <printer_e+0x37c>)
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	70da      	strb	r2, [r3, #3]
 8008ed6:	e003      	b.n	8008ee0 <printer_e+0x2f8>
	else
		data05[3] = tpulse[2];
 8008ed8:	4b21      	ldr	r3, [pc, #132]	@ (8008f60 <printer_e+0x378>)
 8008eda:	789a      	ldrb	r2, [r3, #2]
 8008edc:	4b21      	ldr	r3, [pc, #132]	@ (8008f64 <printer_e+0x37c>)
 8008ede:	70da      	strb	r2, [r3, #3]

	for (int i=3; i<=6; i++)
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	607b      	str	r3, [r7, #4]
 8008ee4:	e04b      	b.n	8008f7e <printer_e+0x396>
	{
		if (tpulse[i] == 0x30 && tpulse[i-1] == 0x30)
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f60 <printer_e+0x378>)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b30      	cmp	r3, #48	@ 0x30
 8008ef0:	d13a      	bne.n	8008f68 <printer_e+0x380>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f60 <printer_e+0x378>)
 8008ef8:	5cd3      	ldrb	r3, [r2, r3]
 8008efa:	2b30      	cmp	r3, #48	@ 0x30
 8008efc:	d134      	bne.n	8008f68 <printer_e+0x380>
			data05[i+1] = 0x20;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a18      	ldr	r2, [pc, #96]	@ (8008f64 <printer_e+0x37c>)
 8008f04:	2120      	movs	r1, #32
 8008f06:	54d1      	strb	r1, [r2, r3]
 8008f08:	e036      	b.n	8008f78 <printer_e+0x390>
 8008f0a:	46c0      	nop			@ (mov r8, r8)
 8008f0c:	0000ffff 	.word	0x0000ffff
 8008f10:	2000022c 	.word	0x2000022c
 8008f14:	20000670 	.word	0x20000670
 8008f18:	20000b7c 	.word	0x20000b7c
 8008f1c:	20000234 	.word	0x20000234
 8008f20:	20000148 	.word	0x20000148
 8008f24:	200001a8 	.word	0x200001a8
 8008f28:	2000023c 	.word	0x2000023c
 8008f2c:	20000228 	.word	0x20000228
 8008f30:	2000101c 	.word	0x2000101c
 8008f34:	2000040c 	.word	0x2000040c
 8008f38:	2000031c 	.word	0x2000031c
 8008f3c:	20001024 	.word	0x20001024
 8008f40:	20000418 	.word	0x20000418
 8008f44:	20000334 	.word	0x20000334
 8008f48:	2000102c 	.word	0x2000102c
 8008f4c:	20000424 	.word	0x20000424
 8008f50:	2000034c 	.word	0x2000034c
 8008f54:	20001034 	.word	0x20001034
 8008f58:	20000430 	.word	0x20000430
 8008f5c:	20000364 	.word	0x20000364
 8008f60:	2000103c 	.word	0x2000103c
 8008f64:	2000043c 	.word	0x2000043c
		else
			data05[i+1] = tpulse[i];
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	49c7      	ldr	r1, [pc, #796]	@ (800928c <printer_e+0x6a4>)
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	188a      	adds	r2, r1, r2
 8008f72:	7811      	ldrb	r1, [r2, #0]
 8008f74:	4ac6      	ldr	r2, [pc, #792]	@ (8009290 <printer_e+0x6a8>)
 8008f76:	54d1      	strb	r1, [r2, r3]
	for (int i=3; i<=6; i++)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b06      	cmp	r3, #6
 8008f82:	ddb0      	ble.n	8008ee6 <printer_e+0x2fe>
	}
	data05[8] = tpulse[7];
 8008f84:	4bc1      	ldr	r3, [pc, #772]	@ (800928c <printer_e+0x6a4>)
 8008f86:	79da      	ldrb	r2, [r3, #7]
 8008f88:	4bc1      	ldr	r3, [pc, #772]	@ (8009290 <printer_e+0x6a8>)
 8008f8a:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8008f8c:	4bc1      	ldr	r3, [pc, #772]	@ (8009294 <printer_e+0x6ac>)
 8008f8e:	49c2      	ldr	r1, [pc, #776]	@ (8009298 <printer_e+0x6b0>)
 8008f90:	48c2      	ldr	r0, [pc, #776]	@ (800929c <printer_e+0x6b4>)
 8008f92:	2206      	movs	r2, #6
 8008f94:	f00a fd4c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg05, 23, 0xffff);
 8008f98:	4bbe      	ldr	r3, [pc, #760]	@ (8009294 <printer_e+0x6ac>)
 8008f9a:	49c1      	ldr	r1, [pc, #772]	@ (80092a0 <printer_e+0x6b8>)
 8008f9c:	48bf      	ldr	r0, [pc, #764]	@ (800929c <printer_e+0x6b4>)
 8008f9e:	2217      	movs	r2, #23
 8008fa0:	f00a fd46 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data05, 9, 0xffff);
 8008fa4:	4bbb      	ldr	r3, [pc, #748]	@ (8009294 <printer_e+0x6ac>)
 8008fa6:	49ba      	ldr	r1, [pc, #744]	@ (8009290 <printer_e+0x6a8>)
 8008fa8:	48bc      	ldr	r0, [pc, #752]	@ (800929c <printer_e+0x6b4>)
 8008faa:	2209      	movs	r2, #9
 8008fac:	f00a fd40 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8008fb0:	4bb8      	ldr	r3, [pc, #736]	@ (8009294 <printer_e+0x6ac>)
 8008fb2:	49bc      	ldr	r1, [pc, #752]	@ (80092a4 <printer_e+0x6bc>)
 8008fb4:	48b9      	ldr	r0, [pc, #740]	@ (800929c <printer_e+0x6b4>)
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f00a fd3a 	bl	8013a30 <HAL_UART_Transmit>
	//row7: total fare
	if (tfare[1] == 0x30)
 8008fbc:	4bba      	ldr	r3, [pc, #744]	@ (80092a8 <printer_e+0x6c0>)
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b30      	cmp	r3, #48	@ 0x30
 8008fc2:	d103      	bne.n	8008fcc <printer_e+0x3e4>
		data06[0] = 0x20;
 8008fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80092ac <printer_e+0x6c4>)
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	e003      	b.n	8008fd4 <printer_e+0x3ec>
	else
		data06[0] = tfare[1];
 8008fcc:	4bb6      	ldr	r3, [pc, #728]	@ (80092a8 <printer_e+0x6c0>)
 8008fce:	785a      	ldrb	r2, [r3, #1]
 8008fd0:	4bb6      	ldr	r3, [pc, #728]	@ (80092ac <printer_e+0x6c4>)
 8008fd2:	701a      	strb	r2, [r3, #0]

	if (tfare[2] == 0x30 && tfare[1] == 0x30)
 8008fd4:	4bb4      	ldr	r3, [pc, #720]	@ (80092a8 <printer_e+0x6c0>)
 8008fd6:	789b      	ldrb	r3, [r3, #2]
 8008fd8:	2b30      	cmp	r3, #48	@ 0x30
 8008fda:	d107      	bne.n	8008fec <printer_e+0x404>
 8008fdc:	4bb2      	ldr	r3, [pc, #712]	@ (80092a8 <printer_e+0x6c0>)
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b30      	cmp	r3, #48	@ 0x30
 8008fe2:	d103      	bne.n	8008fec <printer_e+0x404>
		data06[1] = 0x20;
 8008fe4:	4bb1      	ldr	r3, [pc, #708]	@ (80092ac <printer_e+0x6c4>)
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	705a      	strb	r2, [r3, #1]
 8008fea:	e003      	b.n	8008ff4 <printer_e+0x40c>
	else
		data06[1] = tfare[2];
 8008fec:	4bae      	ldr	r3, [pc, #696]	@ (80092a8 <printer_e+0x6c0>)
 8008fee:	789a      	ldrb	r2, [r3, #2]
 8008ff0:	4bae      	ldr	r3, [pc, #696]	@ (80092ac <printer_e+0x6c4>)
 8008ff2:	705a      	strb	r2, [r3, #1]

	if (tfare[3] == 0x30 && tfare[2] == 0x30)
 8008ff4:	4bac      	ldr	r3, [pc, #688]	@ (80092a8 <printer_e+0x6c0>)
 8008ff6:	78db      	ldrb	r3, [r3, #3]
 8008ff8:	2b30      	cmp	r3, #48	@ 0x30
 8008ffa:	d107      	bne.n	800900c <printer_e+0x424>
 8008ffc:	4baa      	ldr	r3, [pc, #680]	@ (80092a8 <printer_e+0x6c0>)
 8008ffe:	789b      	ldrb	r3, [r3, #2]
 8009000:	2b30      	cmp	r3, #48	@ 0x30
 8009002:	d103      	bne.n	800900c <printer_e+0x424>
		data06[2] = 0x20;
 8009004:	4ba9      	ldr	r3, [pc, #676]	@ (80092ac <printer_e+0x6c4>)
 8009006:	2220      	movs	r2, #32
 8009008:	709a      	strb	r2, [r3, #2]
 800900a:	e003      	b.n	8009014 <printer_e+0x42c>
	else
		data06[2] = tfare[3];
 800900c:	4ba6      	ldr	r3, [pc, #664]	@ (80092a8 <printer_e+0x6c0>)
 800900e:	78da      	ldrb	r2, [r3, #3]
 8009010:	4ba6      	ldr	r3, [pc, #664]	@ (80092ac <printer_e+0x6c4>)
 8009012:	709a      	strb	r2, [r3, #2]

	if (tfare[4] == 0x30 && tfare[3] == 0x30)
 8009014:	4ba4      	ldr	r3, [pc, #656]	@ (80092a8 <printer_e+0x6c0>)
 8009016:	791b      	ldrb	r3, [r3, #4]
 8009018:	2b30      	cmp	r3, #48	@ 0x30
 800901a:	d107      	bne.n	800902c <printer_e+0x444>
 800901c:	4ba2      	ldr	r3, [pc, #648]	@ (80092a8 <printer_e+0x6c0>)
 800901e:	78db      	ldrb	r3, [r3, #3]
 8009020:	2b30      	cmp	r3, #48	@ 0x30
 8009022:	d103      	bne.n	800902c <printer_e+0x444>
		data06[3] = 0x20;
 8009024:	4ba1      	ldr	r3, [pc, #644]	@ (80092ac <printer_e+0x6c4>)
 8009026:	2220      	movs	r2, #32
 8009028:	70da      	strb	r2, [r3, #3]
 800902a:	e003      	b.n	8009034 <printer_e+0x44c>
	else
		data06[3] = tfare[4];
 800902c:	4b9e      	ldr	r3, [pc, #632]	@ (80092a8 <printer_e+0x6c0>)
 800902e:	791a      	ldrb	r2, [r3, #4]
 8009030:	4b9e      	ldr	r3, [pc, #632]	@ (80092ac <printer_e+0x6c4>)
 8009032:	70da      	strb	r2, [r3, #3]

	data06[4] = tfare[5];
 8009034:	4b9c      	ldr	r3, [pc, #624]	@ (80092a8 <printer_e+0x6c0>)
 8009036:	795a      	ldrb	r2, [r3, #5]
 8009038:	4b9c      	ldr	r3, [pc, #624]	@ (80092ac <printer_e+0x6c4>)
 800903a:	711a      	strb	r2, [r3, #4]
	data06[5] = tfare[6];
 800903c:	4b9a      	ldr	r3, [pc, #616]	@ (80092a8 <printer_e+0x6c0>)
 800903e:	799a      	ldrb	r2, [r3, #6]
 8009040:	4b9a      	ldr	r3, [pc, #616]	@ (80092ac <printer_e+0x6c4>)
 8009042:	715a      	strb	r2, [r3, #5]
	data06[7] = tfare[7];
 8009044:	4b98      	ldr	r3, [pc, #608]	@ (80092a8 <printer_e+0x6c0>)
 8009046:	79da      	ldrb	r2, [r3, #7]
 8009048:	4b98      	ldr	r3, [pc, #608]	@ (80092ac <printer_e+0x6c4>)
 800904a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800904c:	4b91      	ldr	r3, [pc, #580]	@ (8009294 <printer_e+0x6ac>)
 800904e:	4992      	ldr	r1, [pc, #584]	@ (8009298 <printer_e+0x6b0>)
 8009050:	4892      	ldr	r0, [pc, #584]	@ (800929c <printer_e+0x6b4>)
 8009052:	2206      	movs	r2, #6
 8009054:	f00a fcec 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg06, 23, 0xffff);
 8009058:	4b8e      	ldr	r3, [pc, #568]	@ (8009294 <printer_e+0x6ac>)
 800905a:	4995      	ldr	r1, [pc, #596]	@ (80092b0 <printer_e+0x6c8>)
 800905c:	488f      	ldr	r0, [pc, #572]	@ (800929c <printer_e+0x6b4>)
 800905e:	2217      	movs	r2, #23
 8009060:	f00a fce6 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data06, 9, 0xffff);
 8009064:	4b8b      	ldr	r3, [pc, #556]	@ (8009294 <printer_e+0x6ac>)
 8009066:	4991      	ldr	r1, [pc, #580]	@ (80092ac <printer_e+0x6c4>)
 8009068:	488c      	ldr	r0, [pc, #560]	@ (800929c <printer_e+0x6b4>)
 800906a:	2209      	movs	r2, #9
 800906c:	f00a fce0 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8009070:	4b88      	ldr	r3, [pc, #544]	@ (8009294 <printer_e+0x6ac>)
 8009072:	498c      	ldr	r1, [pc, #560]	@ (80092a4 <printer_e+0x6bc>)
 8009074:	4889      	ldr	r0, [pc, #548]	@ (800929c <printer_e+0x6b4>)
 8009076:	2202      	movs	r2, #2
 8009078:	f00a fcda 	bl	8013a30 <HAL_UART_Transmit>
	//row8: total sub
	if (tsub[1] == 0x30)
 800907c:	4b8d      	ldr	r3, [pc, #564]	@ (80092b4 <printer_e+0x6cc>)
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d103      	bne.n	800908c <printer_e+0x4a4>
		data07[0] = 0x20;
 8009084:	4b8c      	ldr	r3, [pc, #560]	@ (80092b8 <printer_e+0x6d0>)
 8009086:	2220      	movs	r2, #32
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e003      	b.n	8009094 <printer_e+0x4ac>
	else
		data07[0] = tsub[1];
 800908c:	4b89      	ldr	r3, [pc, #548]	@ (80092b4 <printer_e+0x6cc>)
 800908e:	785a      	ldrb	r2, [r3, #1]
 8009090:	4b89      	ldr	r3, [pc, #548]	@ (80092b8 <printer_e+0x6d0>)
 8009092:	701a      	strb	r2, [r3, #0]

	if (tsub[2] == 0x30 && tsub[1] == 0x30)
 8009094:	4b87      	ldr	r3, [pc, #540]	@ (80092b4 <printer_e+0x6cc>)
 8009096:	789b      	ldrb	r3, [r3, #2]
 8009098:	2b30      	cmp	r3, #48	@ 0x30
 800909a:	d107      	bne.n	80090ac <printer_e+0x4c4>
 800909c:	4b85      	ldr	r3, [pc, #532]	@ (80092b4 <printer_e+0x6cc>)
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d103      	bne.n	80090ac <printer_e+0x4c4>
		data07[1] = 0x20;
 80090a4:	4b84      	ldr	r3, [pc, #528]	@ (80092b8 <printer_e+0x6d0>)
 80090a6:	2220      	movs	r2, #32
 80090a8:	705a      	strb	r2, [r3, #1]
 80090aa:	e003      	b.n	80090b4 <printer_e+0x4cc>
	else
		data07[1] = tsub[2];
 80090ac:	4b81      	ldr	r3, [pc, #516]	@ (80092b4 <printer_e+0x6cc>)
 80090ae:	789a      	ldrb	r2, [r3, #2]
 80090b0:	4b81      	ldr	r3, [pc, #516]	@ (80092b8 <printer_e+0x6d0>)
 80090b2:	705a      	strb	r2, [r3, #1]

	if (tsub[3] == 0x30 && tsub[2] == 0x30)
 80090b4:	4b7f      	ldr	r3, [pc, #508]	@ (80092b4 <printer_e+0x6cc>)
 80090b6:	78db      	ldrb	r3, [r3, #3]
 80090b8:	2b30      	cmp	r3, #48	@ 0x30
 80090ba:	d107      	bne.n	80090cc <printer_e+0x4e4>
 80090bc:	4b7d      	ldr	r3, [pc, #500]	@ (80092b4 <printer_e+0x6cc>)
 80090be:	789b      	ldrb	r3, [r3, #2]
 80090c0:	2b30      	cmp	r3, #48	@ 0x30
 80090c2:	d103      	bne.n	80090cc <printer_e+0x4e4>
		data07[2] = 0x20;
 80090c4:	4b7c      	ldr	r3, [pc, #496]	@ (80092b8 <printer_e+0x6d0>)
 80090c6:	2220      	movs	r2, #32
 80090c8:	709a      	strb	r2, [r3, #2]
 80090ca:	e003      	b.n	80090d4 <printer_e+0x4ec>
	else
		data07[2] = tsub[3];
 80090cc:	4b79      	ldr	r3, [pc, #484]	@ (80092b4 <printer_e+0x6cc>)
 80090ce:	78da      	ldrb	r2, [r3, #3]
 80090d0:	4b79      	ldr	r3, [pc, #484]	@ (80092b8 <printer_e+0x6d0>)
 80090d2:	709a      	strb	r2, [r3, #2]

	if (tsub[4] == 0x30 && tsub[3] == 0x30)
 80090d4:	4b77      	ldr	r3, [pc, #476]	@ (80092b4 <printer_e+0x6cc>)
 80090d6:	791b      	ldrb	r3, [r3, #4]
 80090d8:	2b30      	cmp	r3, #48	@ 0x30
 80090da:	d107      	bne.n	80090ec <printer_e+0x504>
 80090dc:	4b75      	ldr	r3, [pc, #468]	@ (80092b4 <printer_e+0x6cc>)
 80090de:	78db      	ldrb	r3, [r3, #3]
 80090e0:	2b30      	cmp	r3, #48	@ 0x30
 80090e2:	d103      	bne.n	80090ec <printer_e+0x504>
		data07[3] = 0x20;
 80090e4:	4b74      	ldr	r3, [pc, #464]	@ (80092b8 <printer_e+0x6d0>)
 80090e6:	2220      	movs	r2, #32
 80090e8:	70da      	strb	r2, [r3, #3]
 80090ea:	e003      	b.n	80090f4 <printer_e+0x50c>
	else
		data07[3] = tsub[4];
 80090ec:	4b71      	ldr	r3, [pc, #452]	@ (80092b4 <printer_e+0x6cc>)
 80090ee:	791a      	ldrb	r2, [r3, #4]
 80090f0:	4b71      	ldr	r3, [pc, #452]	@ (80092b8 <printer_e+0x6d0>)
 80090f2:	70da      	strb	r2, [r3, #3]

	data07[4] = tsub[5];
 80090f4:	4b6f      	ldr	r3, [pc, #444]	@ (80092b4 <printer_e+0x6cc>)
 80090f6:	795a      	ldrb	r2, [r3, #5]
 80090f8:	4b6f      	ldr	r3, [pc, #444]	@ (80092b8 <printer_e+0x6d0>)
 80090fa:	711a      	strb	r2, [r3, #4]
	data07[5] = tsub[6];
 80090fc:	4b6d      	ldr	r3, [pc, #436]	@ (80092b4 <printer_e+0x6cc>)
 80090fe:	799a      	ldrb	r2, [r3, #6]
 8009100:	4b6d      	ldr	r3, [pc, #436]	@ (80092b8 <printer_e+0x6d0>)
 8009102:	715a      	strb	r2, [r3, #5]
	data07[7] = tsub[7];
 8009104:	4b6b      	ldr	r3, [pc, #428]	@ (80092b4 <printer_e+0x6cc>)
 8009106:	79da      	ldrb	r2, [r3, #7]
 8009108:	4b6b      	ldr	r3, [pc, #428]	@ (80092b8 <printer_e+0x6d0>)
 800910a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800910c:	4b61      	ldr	r3, [pc, #388]	@ (8009294 <printer_e+0x6ac>)
 800910e:	4962      	ldr	r1, [pc, #392]	@ (8009298 <printer_e+0x6b0>)
 8009110:	4862      	ldr	r0, [pc, #392]	@ (800929c <printer_e+0x6b4>)
 8009112:	2206      	movs	r2, #6
 8009114:	f00a fc8c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg07, 23, 0xffff);
 8009118:	4b5e      	ldr	r3, [pc, #376]	@ (8009294 <printer_e+0x6ac>)
 800911a:	4968      	ldr	r1, [pc, #416]	@ (80092bc <printer_e+0x6d4>)
 800911c:	485f      	ldr	r0, [pc, #380]	@ (800929c <printer_e+0x6b4>)
 800911e:	2217      	movs	r2, #23
 8009120:	f00a fc86 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data07, 9, 0xffff);
 8009124:	4b5b      	ldr	r3, [pc, #364]	@ (8009294 <printer_e+0x6ac>)
 8009126:	4964      	ldr	r1, [pc, #400]	@ (80092b8 <printer_e+0x6d0>)
 8009128:	485c      	ldr	r0, [pc, #368]	@ (800929c <printer_e+0x6b4>)
 800912a:	2209      	movs	r2, #9
 800912c:	f00a fc80 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8009130:	4b58      	ldr	r3, [pc, #352]	@ (8009294 <printer_e+0x6ac>)
 8009132:	495c      	ldr	r1, [pc, #368]	@ (80092a4 <printer_e+0x6bc>)
 8009134:	4859      	ldr	r0, [pc, #356]	@ (800929c <printer_e+0x6b4>)
 8009136:	2202      	movs	r2, #2
 8009138:	f00a fc7a 	bl	8013a30 <HAL_UART_Transmit>
	//row9: current total fare
	if (cfare[3] == 0x30)
 800913c:	4b60      	ldr	r3, [pc, #384]	@ (80092c0 <printer_e+0x6d8>)
 800913e:	78db      	ldrb	r3, [r3, #3]
 8009140:	2b30      	cmp	r3, #48	@ 0x30
 8009142:	d103      	bne.n	800914c <printer_e+0x564>
		data08[2] = 0x20;
 8009144:	4b5f      	ldr	r3, [pc, #380]	@ (80092c4 <printer_e+0x6dc>)
 8009146:	2220      	movs	r2, #32
 8009148:	709a      	strb	r2, [r3, #2]
 800914a:	e003      	b.n	8009154 <printer_e+0x56c>
	else
		data08[2] = cfare[3];
 800914c:	4b5c      	ldr	r3, [pc, #368]	@ (80092c0 <printer_e+0x6d8>)
 800914e:	78da      	ldrb	r2, [r3, #3]
 8009150:	4b5c      	ldr	r3, [pc, #368]	@ (80092c4 <printer_e+0x6dc>)
 8009152:	709a      	strb	r2, [r3, #2]

	if (cfare[4] == 0x30 && cfare[3] == 0x30)
 8009154:	4b5a      	ldr	r3, [pc, #360]	@ (80092c0 <printer_e+0x6d8>)
 8009156:	791b      	ldrb	r3, [r3, #4]
 8009158:	2b30      	cmp	r3, #48	@ 0x30
 800915a:	d107      	bne.n	800916c <printer_e+0x584>
 800915c:	4b58      	ldr	r3, [pc, #352]	@ (80092c0 <printer_e+0x6d8>)
 800915e:	78db      	ldrb	r3, [r3, #3]
 8009160:	2b30      	cmp	r3, #48	@ 0x30
 8009162:	d103      	bne.n	800916c <printer_e+0x584>
		data08[3] = 0x20;
 8009164:	4b57      	ldr	r3, [pc, #348]	@ (80092c4 <printer_e+0x6dc>)
 8009166:	2220      	movs	r2, #32
 8009168:	70da      	strb	r2, [r3, #3]
 800916a:	e003      	b.n	8009174 <printer_e+0x58c>
	else
		data08[3] = cfare[4];
 800916c:	4b54      	ldr	r3, [pc, #336]	@ (80092c0 <printer_e+0x6d8>)
 800916e:	791a      	ldrb	r2, [r3, #4]
 8009170:	4b54      	ldr	r3, [pc, #336]	@ (80092c4 <printer_e+0x6dc>)
 8009172:	70da      	strb	r2, [r3, #3]

	data08[4] = cfare[5];
 8009174:	4b52      	ldr	r3, [pc, #328]	@ (80092c0 <printer_e+0x6d8>)
 8009176:	795a      	ldrb	r2, [r3, #5]
 8009178:	4b52      	ldr	r3, [pc, #328]	@ (80092c4 <printer_e+0x6dc>)
 800917a:	711a      	strb	r2, [r3, #4]
	data08[5] = cfare[6];
 800917c:	4b50      	ldr	r3, [pc, #320]	@ (80092c0 <printer_e+0x6d8>)
 800917e:	799a      	ldrb	r2, [r3, #6]
 8009180:	4b50      	ldr	r3, [pc, #320]	@ (80092c4 <printer_e+0x6dc>)
 8009182:	715a      	strb	r2, [r3, #5]
	data08[7] = cfare[7];
 8009184:	4b4e      	ldr	r3, [pc, #312]	@ (80092c0 <printer_e+0x6d8>)
 8009186:	79da      	ldrb	r2, [r3, #7]
 8009188:	4b4e      	ldr	r3, [pc, #312]	@ (80092c4 <printer_e+0x6dc>)
 800918a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800918c:	4b41      	ldr	r3, [pc, #260]	@ (8009294 <printer_e+0x6ac>)
 800918e:	4942      	ldr	r1, [pc, #264]	@ (8009298 <printer_e+0x6b0>)
 8009190:	4842      	ldr	r0, [pc, #264]	@ (800929c <printer_e+0x6b4>)
 8009192:	2206      	movs	r2, #6
 8009194:	f00a fc4c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg08, 23, 0xffff);
 8009198:	4b3e      	ldr	r3, [pc, #248]	@ (8009294 <printer_e+0x6ac>)
 800919a:	494b      	ldr	r1, [pc, #300]	@ (80092c8 <printer_e+0x6e0>)
 800919c:	483f      	ldr	r0, [pc, #252]	@ (800929c <printer_e+0x6b4>)
 800919e:	2217      	movs	r2, #23
 80091a0:	f00a fc46 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data08, 9, 0xffff);
 80091a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009294 <printer_e+0x6ac>)
 80091a6:	4947      	ldr	r1, [pc, #284]	@ (80092c4 <printer_e+0x6dc>)
 80091a8:	483c      	ldr	r0, [pc, #240]	@ (800929c <printer_e+0x6b4>)
 80091aa:	2209      	movs	r2, #9
 80091ac:	f00a fc40 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 80091b0:	4b38      	ldr	r3, [pc, #224]	@ (8009294 <printer_e+0x6ac>)
 80091b2:	493c      	ldr	r1, [pc, #240]	@ (80092a4 <printer_e+0x6bc>)
 80091b4:	4839      	ldr	r0, [pc, #228]	@ (800929c <printer_e+0x6b4>)
 80091b6:	2202      	movs	r2, #2
 80091b8:	f00a fc3a 	bl	8013a30 <HAL_UART_Transmit>
	//row10: current total sub
	if (csub[3] == 0x30)
 80091bc:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <printer_e+0x6e4>)
 80091be:	78db      	ldrb	r3, [r3, #3]
 80091c0:	2b30      	cmp	r3, #48	@ 0x30
 80091c2:	d103      	bne.n	80091cc <printer_e+0x5e4>
		data09[2] = 0x20;
 80091c4:	4b42      	ldr	r3, [pc, #264]	@ (80092d0 <printer_e+0x6e8>)
 80091c6:	2220      	movs	r2, #32
 80091c8:	709a      	strb	r2, [r3, #2]
 80091ca:	e003      	b.n	80091d4 <printer_e+0x5ec>
	else
		data09[2] = csub[3];
 80091cc:	4b3f      	ldr	r3, [pc, #252]	@ (80092cc <printer_e+0x6e4>)
 80091ce:	78da      	ldrb	r2, [r3, #3]
 80091d0:	4b3f      	ldr	r3, [pc, #252]	@ (80092d0 <printer_e+0x6e8>)
 80091d2:	709a      	strb	r2, [r3, #2]

	if (csub[4] == 0x30 && csub[3] == 0x30)
 80091d4:	4b3d      	ldr	r3, [pc, #244]	@ (80092cc <printer_e+0x6e4>)
 80091d6:	791b      	ldrb	r3, [r3, #4]
 80091d8:	2b30      	cmp	r3, #48	@ 0x30
 80091da:	d107      	bne.n	80091ec <printer_e+0x604>
 80091dc:	4b3b      	ldr	r3, [pc, #236]	@ (80092cc <printer_e+0x6e4>)
 80091de:	78db      	ldrb	r3, [r3, #3]
 80091e0:	2b30      	cmp	r3, #48	@ 0x30
 80091e2:	d103      	bne.n	80091ec <printer_e+0x604>
		data09[3] = 0x20;
 80091e4:	4b3a      	ldr	r3, [pc, #232]	@ (80092d0 <printer_e+0x6e8>)
 80091e6:	2220      	movs	r2, #32
 80091e8:	70da      	strb	r2, [r3, #3]
 80091ea:	e003      	b.n	80091f4 <printer_e+0x60c>
	else
		data09[3] = csub[4];
 80091ec:	4b37      	ldr	r3, [pc, #220]	@ (80092cc <printer_e+0x6e4>)
 80091ee:	791a      	ldrb	r2, [r3, #4]
 80091f0:	4b37      	ldr	r3, [pc, #220]	@ (80092d0 <printer_e+0x6e8>)
 80091f2:	70da      	strb	r2, [r3, #3]

	data09[4] = csub[5];
 80091f4:	4b35      	ldr	r3, [pc, #212]	@ (80092cc <printer_e+0x6e4>)
 80091f6:	795a      	ldrb	r2, [r3, #5]
 80091f8:	4b35      	ldr	r3, [pc, #212]	@ (80092d0 <printer_e+0x6e8>)
 80091fa:	711a      	strb	r2, [r3, #4]
	data09[5] = csub[6];
 80091fc:	4b33      	ldr	r3, [pc, #204]	@ (80092cc <printer_e+0x6e4>)
 80091fe:	799a      	ldrb	r2, [r3, #6]
 8009200:	4b33      	ldr	r3, [pc, #204]	@ (80092d0 <printer_e+0x6e8>)
 8009202:	715a      	strb	r2, [r3, #5]
	data09[7] = csub[7];
 8009204:	4b31      	ldr	r3, [pc, #196]	@ (80092cc <printer_e+0x6e4>)
 8009206:	79da      	ldrb	r2, [r3, #7]
 8009208:	4b31      	ldr	r3, [pc, #196]	@ (80092d0 <printer_e+0x6e8>)
 800920a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800920c:	4b21      	ldr	r3, [pc, #132]	@ (8009294 <printer_e+0x6ac>)
 800920e:	4922      	ldr	r1, [pc, #136]	@ (8009298 <printer_e+0x6b0>)
 8009210:	4822      	ldr	r0, [pc, #136]	@ (800929c <printer_e+0x6b4>)
 8009212:	2206      	movs	r2, #6
 8009214:	f00a fc0c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg09, 23, 0xffff);
 8009218:	4b1e      	ldr	r3, [pc, #120]	@ (8009294 <printer_e+0x6ac>)
 800921a:	492e      	ldr	r1, [pc, #184]	@ (80092d4 <printer_e+0x6ec>)
 800921c:	481f      	ldr	r0, [pc, #124]	@ (800929c <printer_e+0x6b4>)
 800921e:	2217      	movs	r2, #23
 8009220:	f00a fc06 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data09, 9, 0xffff);
 8009224:	4b1b      	ldr	r3, [pc, #108]	@ (8009294 <printer_e+0x6ac>)
 8009226:	492a      	ldr	r1, [pc, #168]	@ (80092d0 <printer_e+0x6e8>)
 8009228:	481c      	ldr	r0, [pc, #112]	@ (800929c <printer_e+0x6b4>)
 800922a:	2209      	movs	r2, #9
 800922c:	f00a fc00 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8009230:	4b18      	ldr	r3, [pc, #96]	@ (8009294 <printer_e+0x6ac>)
 8009232:	491c      	ldr	r1, [pc, #112]	@ (80092a4 <printer_e+0x6bc>)
 8009234:	4819      	ldr	r0, [pc, #100]	@ (800929c <printer_e+0x6b4>)
 8009236:	2202      	movs	r2, #2
 8009238:	f00a fbfa 	bl	8013a30 <HAL_UART_Transmit>
	//row11: total time
	if (ttime[2] == 0x30)
 800923c:	4b26      	ldr	r3, [pc, #152]	@ (80092d8 <printer_e+0x6f0>)
 800923e:	789b      	ldrb	r3, [r3, #2]
 8009240:	2b30      	cmp	r3, #48	@ 0x30
 8009242:	d103      	bne.n	800924c <printer_e+0x664>
		data10[2] = 0x20;
 8009244:	4b25      	ldr	r3, [pc, #148]	@ (80092dc <printer_e+0x6f4>)
 8009246:	2220      	movs	r2, #32
 8009248:	709a      	strb	r2, [r3, #2]
 800924a:	e003      	b.n	8009254 <printer_e+0x66c>
	else
		data10[2] = ttime[2];
 800924c:	4b22      	ldr	r3, [pc, #136]	@ (80092d8 <printer_e+0x6f0>)
 800924e:	789a      	ldrb	r2, [r3, #2]
 8009250:	4b22      	ldr	r3, [pc, #136]	@ (80092dc <printer_e+0x6f4>)
 8009252:	709a      	strb	r2, [r3, #2]

	if (ttime[3] == 0x30 && ttime[2] == 0x30)
 8009254:	4b20      	ldr	r3, [pc, #128]	@ (80092d8 <printer_e+0x6f0>)
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b30      	cmp	r3, #48	@ 0x30
 800925a:	d107      	bne.n	800926c <printer_e+0x684>
 800925c:	4b1e      	ldr	r3, [pc, #120]	@ (80092d8 <printer_e+0x6f0>)
 800925e:	789b      	ldrb	r3, [r3, #2]
 8009260:	2b30      	cmp	r3, #48	@ 0x30
 8009262:	d103      	bne.n	800926c <printer_e+0x684>
		data10[3] = 0x20;
 8009264:	4b1d      	ldr	r3, [pc, #116]	@ (80092dc <printer_e+0x6f4>)
 8009266:	2220      	movs	r2, #32
 8009268:	70da      	strb	r2, [r3, #3]
 800926a:	e003      	b.n	8009274 <printer_e+0x68c>
	else
		data10[3] = ttime[3];
 800926c:	4b1a      	ldr	r3, [pc, #104]	@ (80092d8 <printer_e+0x6f0>)
 800926e:	78da      	ldrb	r2, [r3, #3]
 8009270:	4b1a      	ldr	r3, [pc, #104]	@ (80092dc <printer_e+0x6f4>)
 8009272:	70da      	strb	r2, [r3, #3]

	if (ttime[4] == 0x30 && ttime[3] == 0x30)
 8009274:	4b18      	ldr	r3, [pc, #96]	@ (80092d8 <printer_e+0x6f0>)
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	2b30      	cmp	r3, #48	@ 0x30
 800927a:	d131      	bne.n	80092e0 <printer_e+0x6f8>
 800927c:	4b16      	ldr	r3, [pc, #88]	@ (80092d8 <printer_e+0x6f0>)
 800927e:	78db      	ldrb	r3, [r3, #3]
 8009280:	2b30      	cmp	r3, #48	@ 0x30
 8009282:	d12d      	bne.n	80092e0 <printer_e+0x6f8>
		data10[4] = 0x20;
 8009284:	4b15      	ldr	r3, [pc, #84]	@ (80092dc <printer_e+0x6f4>)
 8009286:	2220      	movs	r2, #32
 8009288:	711a      	strb	r2, [r3, #4]
 800928a:	e02d      	b.n	80092e8 <printer_e+0x700>
 800928c:	2000103c 	.word	0x2000103c
 8009290:	2000043c 	.word	0x2000043c
 8009294:	0000ffff 	.word	0x0000ffff
 8009298:	20000234 	.word	0x20000234
 800929c:	20000670 	.word	0x20000670
 80092a0:	2000037c 	.word	0x2000037c
 80092a4:	20000228 	.word	0x20000228
 80092a8:	20001044 	.word	0x20001044
 80092ac:	20000448 	.word	0x20000448
 80092b0:	20000394 	.word	0x20000394
 80092b4:	2000104c 	.word	0x2000104c
 80092b8:	20000454 	.word	0x20000454
 80092bc:	200003ac 	.word	0x200003ac
 80092c0:	20001054 	.word	0x20001054
 80092c4:	20000460 	.word	0x20000460
 80092c8:	200003c4 	.word	0x200003c4
 80092cc:	2000105c 	.word	0x2000105c
 80092d0:	2000046c 	.word	0x2000046c
 80092d4:	200003dc 	.word	0x200003dc
 80092d8:	20001064 	.word	0x20001064
 80092dc:	20000478 	.word	0x20000478
	else
		data10[4] = ttime[4];
 80092e0:	4b3b      	ldr	r3, [pc, #236]	@ (80093d0 <printer_e+0x7e8>)
 80092e2:	791a      	ldrb	r2, [r3, #4]
 80092e4:	4b3b      	ldr	r3, [pc, #236]	@ (80093d4 <printer_e+0x7ec>)
 80092e6:	711a      	strb	r2, [r3, #4]

	data10[5] = ttime[5];
 80092e8:	4b39      	ldr	r3, [pc, #228]	@ (80093d0 <printer_e+0x7e8>)
 80092ea:	795a      	ldrb	r2, [r3, #5]
 80092ec:	4b39      	ldr	r3, [pc, #228]	@ (80093d4 <printer_e+0x7ec>)
 80092ee:	715a      	strb	r2, [r3, #5]
	data10[7] = ttime[6];
 80092f0:	4b37      	ldr	r3, [pc, #220]	@ (80093d0 <printer_e+0x7e8>)
 80092f2:	799a      	ldrb	r2, [r3, #6]
 80092f4:	4b37      	ldr	r3, [pc, #220]	@ (80093d4 <printer_e+0x7ec>)
 80092f6:	71da      	strb	r2, [r3, #7]
	data10[8] = ttime[7];
 80092f8:	4b35      	ldr	r3, [pc, #212]	@ (80093d0 <printer_e+0x7e8>)
 80092fa:	79da      	ldrb	r2, [r3, #7]
 80092fc:	4b35      	ldr	r3, [pc, #212]	@ (80093d4 <printer_e+0x7ec>)
 80092fe:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 8009300:	4b35      	ldr	r3, [pc, #212]	@ (80093d8 <printer_e+0x7f0>)
 8009302:	4936      	ldr	r1, [pc, #216]	@ (80093dc <printer_e+0x7f4>)
 8009304:	4836      	ldr	r0, [pc, #216]	@ (80093e0 <printer_e+0x7f8>)
 8009306:	2206      	movs	r2, #6
 8009308:	f00a fb92 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, tmsg10, 23, 0xffff);
 800930c:	4b32      	ldr	r3, [pc, #200]	@ (80093d8 <printer_e+0x7f0>)
 800930e:	4935      	ldr	r1, [pc, #212]	@ (80093e4 <printer_e+0x7fc>)
 8009310:	4833      	ldr	r0, [pc, #204]	@ (80093e0 <printer_e+0x7f8>)
 8009312:	2217      	movs	r2, #23
 8009314:	f00a fb8c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, data10, 9, 0xffff);
 8009318:	4b2f      	ldr	r3, [pc, #188]	@ (80093d8 <printer_e+0x7f0>)
 800931a:	492e      	ldr	r1, [pc, #184]	@ (80093d4 <printer_e+0x7ec>)
 800931c:	4830      	ldr	r0, [pc, #192]	@ (80093e0 <printer_e+0x7f8>)
 800931e:	2209      	movs	r2, #9
 8009320:	f00a fb86 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8009324:	4b2c      	ldr	r3, [pc, #176]	@ (80093d8 <printer_e+0x7f0>)
 8009326:	4930      	ldr	r1, [pc, #192]	@ (80093e8 <printer_e+0x800>)
 8009328:	482d      	ldr	r0, [pc, #180]	@ (80093e0 <printer_e+0x7f8>)
 800932a:	2202      	movs	r2, #2
 800932c:	f00a fb80 	bl	8013a30 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, tmsg11, 23, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, data11, 9, 0xffff);
//	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
	//row13: (chi)print time: 04/05/23 11:15
	dtdata[10] = hmi_rtc[14];
 8009330:	4b2e      	ldr	r3, [pc, #184]	@ (80093ec <printer_e+0x804>)
 8009332:	7b9a      	ldrb	r2, [r3, #14]
 8009334:	4b2e      	ldr	r3, [pc, #184]	@ (80093f0 <printer_e+0x808>)
 8009336:	729a      	strb	r2, [r3, #10]
	dtdata[11] = hmi_rtc[15];
 8009338:	4b2c      	ldr	r3, [pc, #176]	@ (80093ec <printer_e+0x804>)
 800933a:	7bda      	ldrb	r2, [r3, #15]
 800933c:	4b2c      	ldr	r3, [pc, #176]	@ (80093f0 <printer_e+0x808>)
 800933e:	72da      	strb	r2, [r3, #11]
	dtdata[13] = hmi_rtc[11];
 8009340:	4b2a      	ldr	r3, [pc, #168]	@ (80093ec <printer_e+0x804>)
 8009342:	7ada      	ldrb	r2, [r3, #11]
 8009344:	4b2a      	ldr	r3, [pc, #168]	@ (80093f0 <printer_e+0x808>)
 8009346:	735a      	strb	r2, [r3, #13]
	dtdata[14] = hmi_rtc[12];
 8009348:	4b28      	ldr	r3, [pc, #160]	@ (80093ec <printer_e+0x804>)
 800934a:	7b1a      	ldrb	r2, [r3, #12]
 800934c:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <printer_e+0x808>)
 800934e:	739a      	strb	r2, [r3, #14]
	dtdata[16] = hmi_rtc[8];
 8009350:	4b26      	ldr	r3, [pc, #152]	@ (80093ec <printer_e+0x804>)
 8009352:	7a1a      	ldrb	r2, [r3, #8]
 8009354:	4b26      	ldr	r3, [pc, #152]	@ (80093f0 <printer_e+0x808>)
 8009356:	741a      	strb	r2, [r3, #16]
	dtdata[17] = hmi_rtc[9];
 8009358:	4b24      	ldr	r3, [pc, #144]	@ (80093ec <printer_e+0x804>)
 800935a:	7a5a      	ldrb	r2, [r3, #9]
 800935c:	4b24      	ldr	r3, [pc, #144]	@ (80093f0 <printer_e+0x808>)
 800935e:	745a      	strb	r2, [r3, #17]
	dtdata[19] = hmi_rtc[17];
 8009360:	4b22      	ldr	r3, [pc, #136]	@ (80093ec <printer_e+0x804>)
 8009362:	7c5a      	ldrb	r2, [r3, #17]
 8009364:	4b22      	ldr	r3, [pc, #136]	@ (80093f0 <printer_e+0x808>)
 8009366:	74da      	strb	r2, [r3, #19]
	dtdata[20] = hmi_rtc[18];
 8009368:	4b20      	ldr	r3, [pc, #128]	@ (80093ec <printer_e+0x804>)
 800936a:	7c9a      	ldrb	r2, [r3, #18]
 800936c:	4b20      	ldr	r3, [pc, #128]	@ (80093f0 <printer_e+0x808>)
 800936e:	751a      	strb	r2, [r3, #20]
	dtdata[22] = hmi_rtc[20];
 8009370:	4b1e      	ldr	r3, [pc, #120]	@ (80093ec <printer_e+0x804>)
 8009372:	7d1a      	ldrb	r2, [r3, #20]
 8009374:	4b1e      	ldr	r3, [pc, #120]	@ (80093f0 <printer_e+0x808>)
 8009376:	759a      	strb	r2, [r3, #22]
	dtdata[23] = hmi_rtc[21];
 8009378:	4b1c      	ldr	r3, [pc, #112]	@ (80093ec <printer_e+0x804>)
 800937a:	7d5a      	ldrb	r2, [r3, #21]
 800937c:	4b1c      	ldr	r3, [pc, #112]	@ (80093f0 <printer_e+0x808>)
 800937e:	75da      	strb	r2, [r3, #23]

	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 8009380:	4b15      	ldr	r3, [pc, #84]	@ (80093d8 <printer_e+0x7f0>)
 8009382:	4919      	ldr	r1, [pc, #100]	@ (80093e8 <printer_e+0x800>)
 8009384:	4816      	ldr	r0, [pc, #88]	@ (80093e0 <printer_e+0x7f8>)
 8009386:	2202      	movs	r2, #2
 8009388:	f00a fb52 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, cmd, 6, 0xffff);
 800938c:	4b12      	ldr	r3, [pc, #72]	@ (80093d8 <printer_e+0x7f0>)
 800938e:	4913      	ldr	r1, [pc, #76]	@ (80093dc <printer_e+0x7f4>)
 8009390:	4813      	ldr	r0, [pc, #76]	@ (80093e0 <printer_e+0x7f8>)
 8009392:	2206      	movs	r2, #6
 8009394:	f00a fb4c 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, dtdata, 24, 0xffff);
 8009398:	4b0f      	ldr	r3, [pc, #60]	@ (80093d8 <printer_e+0x7f0>)
 800939a:	4915      	ldr	r1, [pc, #84]	@ (80093f0 <printer_e+0x808>)
 800939c:	4810      	ldr	r0, [pc, #64]	@ (80093e0 <printer_e+0x7f8>)
 800939e:	2218      	movs	r2, #24
 80093a0:	f00a fb46 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, enter, 2, 0xffff);
 80093a4:	4b0c      	ldr	r3, [pc, #48]	@ (80093d8 <printer_e+0x7f0>)
 80093a6:	4910      	ldr	r1, [pc, #64]	@ (80093e8 <printer_e+0x800>)
 80093a8:	480d      	ldr	r0, [pc, #52]	@ (80093e0 <printer_e+0x7f8>)
 80093aa:	2202      	movs	r2, #2
 80093ac:	f00a fb40 	bl	8013a30 <HAL_UART_Transmit>

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 80093b0:	4b09      	ldr	r3, [pc, #36]	@ (80093d8 <printer_e+0x7f0>)
 80093b2:	4910      	ldr	r1, [pc, #64]	@ (80093f4 <printer_e+0x80c>)
 80093b4:	480a      	ldr	r0, [pc, #40]	@ (80093e0 <printer_e+0x7f8>)
 80093b6:	2206      	movs	r2, #6
 80093b8:	f00a fb3a 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) uTx_Data, sizeof(uTx_Data), 0xffff);
 80093bc:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <printer_e+0x7f0>)
 80093be:	490d      	ldr	r1, [pc, #52]	@ (80093f4 <printer_e+0x80c>)
 80093c0:	4807      	ldr	r0, [pc, #28]	@ (80093e0 <printer_e+0x7f8>)
 80093c2:	2206      	movs	r2, #6
 80093c4:	f00a fb34 	bl	8013a30 <HAL_UART_Transmit>
}
 80093c8:	46c0      	nop			@ (mov r8, r8)
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b007      	add	sp, #28
 80093ce:	bd90      	pop	{r4, r7, pc}
 80093d0:	20001064 	.word	0x20001064
 80093d4:	20000478 	.word	0x20000478
 80093d8:	0000ffff 	.word	0x0000ffff
 80093dc:	20000234 	.word	0x20000234
 80093e0:	20000670 	.word	0x20000670
 80093e4:	200003f4 	.word	0x200003f4
 80093e8:	20000228 	.word	0x20000228
 80093ec:	20000074 	.word	0x20000074
 80093f0:	20000484 	.word	0x20000484
 80093f4:	2000022c 	.word	0x2000022c

080093f8 <printer_transmit>:

void printer_transmit(struct print1 *data, UART_HandleTypeDef *huart)
{
 80093f8:	b590      	push	{r4, r7, lr}
 80093fa:	b08d      	sub	sp, #52	@ 0x34
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	unsigned char buffer[sizeof(struct print1)];
	memset(buffer, 0, sizeof(struct print1));
 8009402:	2408      	movs	r4, #8
 8009404:	193b      	adds	r3, r7, r4
 8009406:	2228      	movs	r2, #40	@ 0x28
 8009408:	2100      	movs	r1, #0
 800940a:	0018      	movs	r0, r3
 800940c:	f00f fe60 	bl	80190d0 <memset>
	memcpy(buffer, data, sizeof(struct print1));
 8009410:	193a      	adds	r2, r7, r4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0010      	movs	r0, r2
 8009416:	0019      	movs	r1, r3
 8009418:	2328      	movs	r3, #40	@ 0x28
 800941a:	001a      	movs	r2, r3
 800941c:	f00f fe8c 	bl	8019138 <memcpy>

//	memcpy(buffer, &data, sizeof data);

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) buffer, sizeof(buffer), 0xffff);
 8009420:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <printer_transmit+0x3c>)
 8009422:	1939      	adds	r1, r7, r4
 8009424:	4804      	ldr	r0, [pc, #16]	@ (8009438 <printer_transmit+0x40>)
 8009426:	2228      	movs	r2, #40	@ 0x28
 8009428:	f00a fb02 	bl	8013a30 <HAL_UART_Transmit>
}
 800942c:	46c0      	nop			@ (mov r8, r8)
 800942e:	46bd      	mov	sp, r7
 8009430:	b00d      	add	sp, #52	@ 0x34
 8009432:	bd90      	pop	{r4, r7, pc}
 8009434:	0000ffff 	.word	0x0000ffff
 8009438:	20000670 	.word	0x20000670

0800943c <printer_transmit2>:

void printer_transmit2(struct print2 *data, UART_HandleTypeDef *huart)
{
 800943c:	b590      	push	{r4, r7, lr}
 800943e:	b08d      	sub	sp, #52	@ 0x34
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	unsigned char buffer[sizeof(struct print2)];
	memset(buffer, 0, sizeof(struct print2));
 8009446:	2408      	movs	r4, #8
 8009448:	193b      	adds	r3, r7, r4
 800944a:	2228      	movs	r2, #40	@ 0x28
 800944c:	2100      	movs	r1, #0
 800944e:	0018      	movs	r0, r3
 8009450:	f00f fe3e 	bl	80190d0 <memset>
	memcpy(buffer, data, sizeof(struct print2));
 8009454:	193a      	adds	r2, r7, r4
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	0010      	movs	r0, r2
 800945a:	0019      	movs	r1, r3
 800945c:	2328      	movs	r3, #40	@ 0x28
 800945e:	001a      	movs	r2, r3
 8009460:	f00f fe6a 	bl	8019138 <memcpy>

//	memcpy(buffer, &data, sizeof data);

	HAL_UART_Transmit(&hlpuart1, (uint8_t *) buffer, sizeof(buffer), 0xffff);
 8009464:	4b04      	ldr	r3, [pc, #16]	@ (8009478 <printer_transmit2+0x3c>)
 8009466:	1939      	adds	r1, r7, r4
 8009468:	4804      	ldr	r0, [pc, #16]	@ (800947c <printer_transmit2+0x40>)
 800946a:	2228      	movs	r2, #40	@ 0x28
 800946c:	f00a fae0 	bl	8013a30 <HAL_UART_Transmit>
}
 8009470:	46c0      	nop			@ (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b00d      	add	sp, #52	@ 0x34
 8009476:	bd90      	pop	{r4, r7, pc}
 8009478:	0000ffff 	.word	0x0000ffff
 800947c:	20000670 	.word	0x20000670

08009480 <eeprom_w>:

//write data to EEPROM

void eeprom_w(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Write(&hi2c2, ADDR_EEPROM_Write, 0, I2C_MEMADD_SIZE_16BIT,&(WriteBuffer[0]),BufferSize, 1000) == HAL_OK)
 8009486:	480e      	ldr	r0, [pc, #56]	@ (80094c0 <eeprom_w+0x40>)
 8009488:	23fa      	movs	r3, #250	@ 0xfa
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	9302      	str	r3, [sp, #8]
 800948e:	2350      	movs	r3, #80	@ 0x50
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	4b0c      	ldr	r3, [pc, #48]	@ (80094c4 <eeprom_w+0x44>)
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2302      	movs	r3, #2
 8009498:	2200      	movs	r2, #0
 800949a:	21a0      	movs	r1, #160	@ 0xa0
 800949c:	f006 f8d2 	bl	800f644 <HAL_I2C_Mem_Write>
 80094a0:	1e03      	subs	r3, r0, #0
 80094a2:	d103      	bne.n	80094ac <eeprom_w+0x2c>
	{
		HAL_Delay(10);
 80094a4:	200a      	movs	r0, #10
 80094a6:	f005 f83d 	bl	800e524 <HAL_Delay>
		//test - return eeprom write data
		//HAL_UART_Transmit(&huart2,WriteBuffer,BufferSize,0x200);
		Flag_test1 = TRUE;
		HAL_Delay(10);
	}
}
 80094aa:	e005      	b.n	80094b8 <eeprom_w+0x38>
		Flag_test1 = TRUE;
 80094ac:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <eeprom_w+0x48>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80094b2:	200a      	movs	r0, #10
 80094b4:	f005 f836 	bl	800e524 <HAL_Delay>
}
 80094b8:	46c0      	nop			@ (mov r8, r8)
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	46c0      	nop			@ (mov r8, r8)
 80094c0:	20000624 	.word	0x20000624
 80094c4:	20000c94 	.word	0x20000c94
 80094c8:	20000d9f 	.word	0x20000d9f

080094cc <eeprom_check>:

//read data from EEPROM & check
void eeprom_check(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, ADDR_EEPROM_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBuffer,BufferSize, 1000);
 80094d2:	4811      	ldr	r0, [pc, #68]	@ (8009518 <eeprom_check+0x4c>)
 80094d4:	23fa      	movs	r3, #250	@ 0xfa
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	9302      	str	r3, [sp, #8]
 80094da:	2350      	movs	r3, #80	@ 0x50
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <eeprom_check+0x50>)
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	2302      	movs	r3, #2
 80094e4:	2200      	movs	r2, #0
 80094e6:	21a1      	movs	r1, #161	@ 0xa1
 80094e8:	f006 f9da 	bl	800f8a0 <HAL_I2C_Mem_Read>
	if(memcmp(WriteBuffer,ReadBuffer,BufferSize) == 0 )
 80094ec:	490b      	ldr	r1, [pc, #44]	@ (800951c <eeprom_check+0x50>)
 80094ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <eeprom_check+0x54>)
 80094f0:	2250      	movs	r2, #80	@ 0x50
 80094f2:	0018      	movs	r0, r3
 80094f4:	f00f fdde 	bl	80190b4 <memcmp>
 80094f8:	1e03      	subs	r3, r0, #0
 80094fa:	d103      	bne.n	8009504 <eeprom_check+0x38>
	{
		HAL_Delay(10);
 80094fc:	200a      	movs	r0, #10
 80094fe:	f005 f811 	bl	800e524 <HAL_Delay>
		//test - return read buffer
		//HAL_UART_Transmit(&huart2,ReadBuffer,BufferSize,0x200);
		Flag_test2 = TRUE;
		HAL_Delay(10);
	}
}
 8009502:	e005      	b.n	8009510 <eeprom_check+0x44>
		Flag_test2 = TRUE;
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <eeprom_check+0x58>)
 8009506:	2201      	movs	r2, #1
 8009508:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 800950a:	200a      	movs	r0, #10
 800950c:	f005 f80a 	bl	800e524 <HAL_Delay>
}
 8009510:	46c0      	nop			@ (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	46c0      	nop			@ (mov r8, r8)
 8009518:	20000624 	.word	0x20000624
 800951c:	20000c44 	.word	0x20000c44
 8009520:	20000c94 	.word	0x20000c94
 8009524:	20000da0 	.word	0x20000da0

08009528 <eeprom_r>:

void eeprom_r(void)
{
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b08f      	sub	sp, #60	@ 0x3c
 800952c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, ADDR_EEPROM_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBuffer,BufferSize, 1000);
 800952e:	48e0      	ldr	r0, [pc, #896]	@ (80098b0 <eeprom_r+0x388>)
 8009530:	23fa      	movs	r3, #250	@ 0xfa
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	2350      	movs	r3, #80	@ 0x50
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	4bde      	ldr	r3, [pc, #888]	@ (80098b4 <eeprom_r+0x38c>)
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2302      	movs	r3, #2
 8009540:	2200      	movs	r2, #0
 8009542:	21a1      	movs	r1, #161	@ 0xa1
 8009544:	f006 f9ac 	bl	800f8a0 <HAL_I2C_Mem_Read>
	*/

	//0 - header AA BB

	//1 - ReadBuffer[0][1][2][3] - 2km
	Dist_Fkm[0] = ReadBuffer[0];
 8009548:	4bda      	ldr	r3, [pc, #872]	@ (80098b4 <eeprom_r+0x38c>)
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	211c      	movs	r1, #28
 800954e:	187b      	adds	r3, r7, r1
 8009550:	701a      	strb	r2, [r3, #0]
	Dist_Fkm[1] = ReadBuffer[1];
 8009552:	4bd8      	ldr	r3, [pc, #864]	@ (80098b4 <eeprom_r+0x38c>)
 8009554:	785a      	ldrb	r2, [r3, #1]
 8009556:	187b      	adds	r3, r7, r1
 8009558:	705a      	strb	r2, [r3, #1]
	Dist_Fkm[2] = ReadBuffer[2];
 800955a:	4bd6      	ldr	r3, [pc, #856]	@ (80098b4 <eeprom_r+0x38c>)
 800955c:	789a      	ldrb	r2, [r3, #2]
 800955e:	187b      	adds	r3, r7, r1
 8009560:	709a      	strb	r2, [r3, #2]
	Dist_Fkm[3] = ReadBuffer[3];
 8009562:	4bd4      	ldr	r3, [pc, #848]	@ (80098b4 <eeprom_r+0x38c>)
 8009564:	78da      	ldrb	r2, [r3, #3]
 8009566:	187b      	adds	r3, r7, r1
 8009568:	70da      	strb	r2, [r3, #3]
	//first 2km, not used yet
	memset(Dist_Fkm, 0, 4);
 800956a:	187b      	adds	r3, r7, r1
 800956c:	2204      	movs	r2, #4
 800956e:	2100      	movs	r1, #0
 8009570:	0018      	movs	r0, r3
 8009572:	f00f fdad 	bl	80190d0 <memset>

	//2 - ReadBuffer[4][5] - Fa_amt, 935, 745, 1750
	Fa_amt[0] = ReadBuffer[4];
 8009576:	4bcf      	ldr	r3, [pc, #828]	@ (80098b4 <eeprom_r+0x38c>)
 8009578:	791a      	ldrb	r2, [r3, #4]
 800957a:	2418      	movs	r4, #24
 800957c:	193b      	adds	r3, r7, r4
 800957e:	701a      	strb	r2, [r3, #0]
	Fa_amt[1] = ReadBuffer[5];
 8009580:	4bcc      	ldr	r3, [pc, #816]	@ (80098b4 <eeprom_r+0x38c>)
 8009582:	795a      	ldrb	r2, [r3, #5]
 8009584:	193b      	adds	r3, r7, r4
 8009586:	705a      	strb	r2, [r3, #1]
	Fare_reached = (float) byte_to_long(Fa_amt) / 10;
 8009588:	193b      	adds	r3, r7, r4
 800958a:	0018      	movs	r0, r3
 800958c:	f7fe ffa4 	bl	80084d8 <byte_to_long>
 8009590:	0003      	movs	r3, r0
 8009592:	0018      	movs	r0, r3
 8009594:	f7f7 ff96 	bl	80014c4 <__aeabi_ui2f>
 8009598:	1c03      	adds	r3, r0, #0
 800959a:	49c7      	ldr	r1, [pc, #796]	@ (80098b8 <eeprom_r+0x390>)
 800959c:	1c18      	adds	r0, r3, #0
 800959e:	f7f7 fa5d 	bl	8000a5c <__aeabi_fdiv>
 80095a2:	1c03      	adds	r3, r0, #0
 80095a4:	1c1a      	adds	r2, r3, #0
 80095a6:	4bc5      	ldr	r3, [pc, #788]	@ (80098bc <eeprom_r+0x394>)
 80095a8:	601a      	str	r2, [r3, #0]
	memset(Fa_amt, 0, 2);
 80095aa:	193b      	adds	r3, r7, r4
 80095ac:	2202      	movs	r2, #2
 80095ae:	2100      	movs	r1, #0
 80095b0:	0018      	movs	r0, r3
 80095b2:	f00f fd8d 	bl	80190d0 <memset>

	//3 - ReadBuffer[6][7] - Fa_2km, 270, 235, 220
	Fa_2km[0] = ReadBuffer[6];
 80095b6:	4bbf      	ldr	r3, [pc, #764]	@ (80098b4 <eeprom_r+0x38c>)
 80095b8:	799a      	ldrb	r2, [r3, #6]
 80095ba:	2414      	movs	r4, #20
 80095bc:	193b      	adds	r3, r7, r4
 80095be:	701a      	strb	r2, [r3, #0]
	Fa_2km[1] = ReadBuffer[7];
 80095c0:	4bbc      	ldr	r3, [pc, #752]	@ (80098b4 <eeprom_r+0x38c>)
 80095c2:	79da      	ldrb	r2, [r3, #7]
 80095c4:	193b      	adds	r3, r7, r4
 80095c6:	705a      	strb	r2, [r3, #1]
	Fare_2km = (float) byte_to_long(Fa_2km) / 10;
 80095c8:	193b      	adds	r3, r7, r4
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7fe ff84 	bl	80084d8 <byte_to_long>
 80095d0:	0003      	movs	r3, r0
 80095d2:	0018      	movs	r0, r3
 80095d4:	f7f7 ff76 	bl	80014c4 <__aeabi_ui2f>
 80095d8:	1c03      	adds	r3, r0, #0
 80095da:	49b7      	ldr	r1, [pc, #732]	@ (80098b8 <eeprom_r+0x390>)
 80095dc:	1c18      	adds	r0, r3, #0
 80095de:	f7f7 fa3d 	bl	8000a5c <__aeabi_fdiv>
 80095e2:	1c03      	adds	r3, r0, #0
 80095e4:	1c1a      	adds	r2, r3, #0
 80095e6:	4bb6      	ldr	r3, [pc, #728]	@ (80098c0 <eeprom_r+0x398>)
 80095e8:	601a      	str	r2, [r3, #0]
	//Fare_200m0 = Fare_2km / 10 (2.7, 2.35, 2.2), C_Fare_Min = Fare_2km * 10 (2700, 2350, 2200)
	Fare_200m0 = (float) byte_to_long(Fa_2km) / 100;
 80095ea:	193b      	adds	r3, r7, r4
 80095ec:	0018      	movs	r0, r3
 80095ee:	f7fe ff73 	bl	80084d8 <byte_to_long>
 80095f2:	0003      	movs	r3, r0
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f7 ff65 	bl	80014c4 <__aeabi_ui2f>
 80095fa:	1c03      	adds	r3, r0, #0
 80095fc:	49b1      	ldr	r1, [pc, #708]	@ (80098c4 <eeprom_r+0x39c>)
 80095fe:	1c18      	adds	r0, r3, #0
 8009600:	f7f7 fa2c 	bl	8000a5c <__aeabi_fdiv>
 8009604:	1c03      	adds	r3, r0, #0
 8009606:	1c1a      	adds	r2, r3, #0
 8009608:	4baf      	ldr	r3, [pc, #700]	@ (80098c8 <eeprom_r+0x3a0>)
 800960a:	601a      	str	r2, [r3, #0]
	Fare_min = byte_to_long(Fa_2km) * 10;
 800960c:	193b      	adds	r3, r7, r4
 800960e:	0018      	movs	r0, r3
 8009610:	f7fe ff62 	bl	80084d8 <byte_to_long>
 8009614:	0002      	movs	r2, r0
 8009616:	0013      	movs	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	189b      	adds	r3, r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	001a      	movs	r2, r3
 8009620:	4baa      	ldr	r3, [pc, #680]	@ (80098cc <eeprom_r+0x3a4>)
 8009622:	601a      	str	r2, [r3, #0]
	memset(Fa_2km, 0, 2);
 8009624:	193b      	adds	r3, r7, r4
 8009626:	2202      	movs	r2, #2
 8009628:	2100      	movs	r1, #0
 800962a:	0018      	movs	r0, r3
 800962c:	f00f fd50 	bl	80190d0 <memset>

	//4 - ReadBuffer[8][9] - Fa_200m1, 19, 17, 17
	Fa_200m1[0] = ReadBuffer[8];
 8009630:	4ba0      	ldr	r3, [pc, #640]	@ (80098b4 <eeprom_r+0x38c>)
 8009632:	7a1a      	ldrb	r2, [r3, #8]
 8009634:	2410      	movs	r4, #16
 8009636:	193b      	adds	r3, r7, r4
 8009638:	701a      	strb	r2, [r3, #0]
	Fa_200m1[1] = ReadBuffer[9];
 800963a:	4b9e      	ldr	r3, [pc, #632]	@ (80098b4 <eeprom_r+0x38c>)
 800963c:	7a5a      	ldrb	r2, [r3, #9]
 800963e:	193b      	adds	r3, r7, r4
 8009640:	705a      	strb	r2, [r3, #1]
	Fare_200m1 = (float) byte_to_long(Fa_200m1) / 10;
 8009642:	193b      	adds	r3, r7, r4
 8009644:	0018      	movs	r0, r3
 8009646:	f7fe ff47 	bl	80084d8 <byte_to_long>
 800964a:	0003      	movs	r3, r0
 800964c:	0018      	movs	r0, r3
 800964e:	f7f7 ff39 	bl	80014c4 <__aeabi_ui2f>
 8009652:	1c03      	adds	r3, r0, #0
 8009654:	4998      	ldr	r1, [pc, #608]	@ (80098b8 <eeprom_r+0x390>)
 8009656:	1c18      	adds	r0, r3, #0
 8009658:	f7f7 fa00 	bl	8000a5c <__aeabi_fdiv>
 800965c:	1c03      	adds	r3, r0, #0
 800965e:	1c1a      	adds	r2, r3, #0
 8009660:	4b9b      	ldr	r3, [pc, #620]	@ (80098d0 <eeprom_r+0x3a8>)
 8009662:	601a      	str	r2, [r3, #0]
	//Fare_200m1 -> T1
	memset(Fa_200m1, 0, 2);
 8009664:	193b      	adds	r3, r7, r4
 8009666:	2202      	movs	r2, #2
 8009668:	2100      	movs	r1, #0
 800966a:	0018      	movs	r0, r3
 800966c:	f00f fd30 	bl	80190d0 <memset>

	//5 - ReadBuffer[10][11] - Fa_200m2, 13, 13, 15
	Fa_200m2[0] = ReadBuffer[10];
 8009670:	4b90      	ldr	r3, [pc, #576]	@ (80098b4 <eeprom_r+0x38c>)
 8009672:	7a9a      	ldrb	r2, [r3, #10]
 8009674:	240c      	movs	r4, #12
 8009676:	193b      	adds	r3, r7, r4
 8009678:	701a      	strb	r2, [r3, #0]
	Fa_200m2[1] = ReadBuffer[11];
 800967a:	4b8e      	ldr	r3, [pc, #568]	@ (80098b4 <eeprom_r+0x38c>)
 800967c:	7ada      	ldrb	r2, [r3, #11]
 800967e:	193b      	adds	r3, r7, r4
 8009680:	705a      	strb	r2, [r3, #1]
	Fare_200m2 = (float) byte_to_long(Fa_200m2) / 10;
 8009682:	193b      	adds	r3, r7, r4
 8009684:	0018      	movs	r0, r3
 8009686:	f7fe ff27 	bl	80084d8 <byte_to_long>
 800968a:	0003      	movs	r3, r0
 800968c:	0018      	movs	r0, r3
 800968e:	f7f7 ff19 	bl	80014c4 <__aeabi_ui2f>
 8009692:	1c03      	adds	r3, r0, #0
 8009694:	4988      	ldr	r1, [pc, #544]	@ (80098b8 <eeprom_r+0x390>)
 8009696:	1c18      	adds	r0, r3, #0
 8009698:	f7f7 f9e0 	bl	8000a5c <__aeabi_fdiv>
 800969c:	1c03      	adds	r3, r0, #0
 800969e:	1c1a      	adds	r2, r3, #0
 80096a0:	4b8c      	ldr	r3, [pc, #560]	@ (80098d4 <eeprom_r+0x3ac>)
 80096a2:	601a      	str	r2, [r3, #0]
	//Fare_200m2 -> T2
	memset(Fa_200m2, 0, 2);
 80096a4:	193b      	adds	r3, r7, r4
 80096a6:	2202      	movs	r2, #2
 80096a8:	2100      	movs	r1, #0
 80096aa:	0018      	movs	r0, r3
 80096ac:	f00f fd10 	bl	80190d0 <memset>

	//6 - ReadBuffer[12][13] - k, 1000
	constant_k[0] = ReadBuffer[12];
 80096b0:	4b80      	ldr	r3, [pc, #512]	@ (80098b4 <eeprom_r+0x38c>)
 80096b2:	7b1a      	ldrb	r2, [r3, #12]
 80096b4:	2408      	movs	r4, #8
 80096b6:	193b      	adds	r3, r7, r4
 80096b8:	701a      	strb	r2, [r3, #0]
	constant_k[1] = ReadBuffer[13];
 80096ba:	4b7e      	ldr	r3, [pc, #504]	@ (80098b4 <eeprom_r+0x38c>)
 80096bc:	7b5a      	ldrb	r2, [r3, #13]
 80096be:	193b      	adds	r3, r7, r4
 80096c0:	705a      	strb	r2, [r3, #1]
	ck_r = byte_to_long(constant_k);
 80096c2:	193b      	adds	r3, r7, r4
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7fe ff07 	bl	80084d8 <byte_to_long>
 80096ca:	0003      	movs	r3, r0
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	4b82      	ldr	r3, [pc, #520]	@ (80098d8 <eeprom_r+0x3b0>)
 80096d0:	801a      	strh	r2, [r3, #0]
	memset(constant_k, 0, 2);
 80096d2:	193b      	adds	r3, r7, r4
 80096d4:	2202      	movs	r2, #2
 80096d6:	2100      	movs	r1, #0
 80096d8:	0018      	movs	r0, r3
 80096da:	f00f fcf9 	bl	80190d0 <memset>

	//7 - ReadBuffer[14][15] - Sp_Co
	Sp_Co[0] = ReadBuffer[14];
 80096de:	4b75      	ldr	r3, [pc, #468]	@ (80098b4 <eeprom_r+0x38c>)
 80096e0:	7b9a      	ldrb	r2, [r3, #14]
 80096e2:	1d3b      	adds	r3, r7, #4
 80096e4:	701a      	strb	r2, [r3, #0]
	Sp_Co[1] = ReadBuffer[15];
 80096e6:	4b73      	ldr	r3, [pc, #460]	@ (80098b4 <eeprom_r+0x38c>)
 80096e8:	7bda      	ldrb	r2, [r3, #15]
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	705a      	strb	r2, [r3, #1]
	Speed_co = byte_to_long(Sp_Co);
 80096ee:	1d3b      	adds	r3, r7, #4
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7fe fef1 	bl	80084d8 <byte_to_long>
 80096f6:	0003      	movs	r3, r0
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	4b78      	ldr	r3, [pc, #480]	@ (80098dc <eeprom_r+0x3b4>)
 80096fc:	801a      	strh	r2, [r3, #0]
	//Speed_co -> 12km/h
	memset(Sp_Co, 0, 2);
 80096fe:	1d3b      	adds	r3, r7, #4
 8009700:	2202      	movs	r2, #2
 8009702:	2100      	movs	r1, #0
 8009704:	0018      	movs	r0, r3
 8009706:	f00f fce3 	bl	80190d0 <memset>

	//8 - ReadBuffer[16][17] - Sp_Max
	Sp_Max[0] = ReadBuffer[16];
 800970a:	4b6a      	ldr	r3, [pc, #424]	@ (80098b4 <eeprom_r+0x38c>)
 800970c:	7c1a      	ldrb	r2, [r3, #16]
 800970e:	003b      	movs	r3, r7
 8009710:	701a      	strb	r2, [r3, #0]
	Sp_Max[1] = ReadBuffer[17];
 8009712:	4b68      	ldr	r3, [pc, #416]	@ (80098b4 <eeprom_r+0x38c>)
 8009714:	7c5a      	ldrb	r2, [r3, #17]
 8009716:	003b      	movs	r3, r7
 8009718:	705a      	strb	r2, [r3, #1]
	Speed_max = byte_to_long(Sp_Max);
 800971a:	003b      	movs	r3, r7
 800971c:	0018      	movs	r0, r3
 800971e:	f7fe fedb 	bl	80084d8 <byte_to_long>
 8009722:	0003      	movs	r3, r0
 8009724:	b29a      	uxth	r2, r3
 8009726:	4b6e      	ldr	r3, [pc, #440]	@ (80098e0 <eeprom_r+0x3b8>)
 8009728:	801a      	strh	r2, [r3, #0]
	//Speed_max -> 150km/h
	memset(Sp_Max, 0, 2);
 800972a:	003b      	movs	r3, r7
 800972c:	2202      	movs	r2, #2
 800972e:	2100      	movs	r1, #0
 8009730:	0018      	movs	r0, r3
 8009732:	f00f fccd 	bl	80190d0 <memset>

	//9 - ReadBuffer[18][19] - Type of Taxi
	Type[0] = ReadBuffer[18];
 8009736:	4b5f      	ldr	r3, [pc, #380]	@ (80098b4 <eeprom_r+0x38c>)
 8009738:	7c9a      	ldrb	r2, [r3, #18]
 800973a:	4b6a      	ldr	r3, [pc, #424]	@ (80098e4 <eeprom_r+0x3bc>)
 800973c:	701a      	strb	r2, [r3, #0]
	Type[1] = ReadBuffer[19];
 800973e:	4b5d      	ldr	r3, [pc, #372]	@ (80098b4 <eeprom_r+0x38c>)
 8009740:	7cda      	ldrb	r2, [r3, #19]
 8009742:	4b68      	ldr	r3, [pc, #416]	@ (80098e4 <eeprom_r+0x3bc>)
 8009744:	705a      	strb	r2, [r3, #1]
	//taxiType -> 00 01 02 03 -> init urban nt lantau
	//no need to transfer, will use in parameter reply
	//memset(Type, 0, 2);

	//10 - ReadBuffer[20] - length of plate no.
	len_plate = ReadBuffer[20]; //plate_qr[2]; //hex2Dec(&plate_qr[2]);
 8009746:	4b5b      	ldr	r3, [pc, #364]	@ (80098b4 <eeprom_r+0x38c>)
 8009748:	7d1a      	ldrb	r2, [r3, #20]
 800974a:	4b67      	ldr	r3, [pc, #412]	@ (80098e8 <eeprom_r+0x3c0>)
 800974c:	701a      	strb	r2, [r3, #0]
	plate_qr[2] = len_plate + 5;
 800974e:	4b66      	ldr	r3, [pc, #408]	@ (80098e8 <eeprom_r+0x3c0>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	3305      	adds	r3, #5
 8009754:	b2da      	uxtb	r2, r3
 8009756:	4b65      	ldr	r3, [pc, #404]	@ (80098ec <eeprom_r+0x3c4>)
 8009758:	709a      	strb	r2, [r3, #2]

	//11 - ReadBuffer[21][22][23][24][25][26][27][28][29][30] - plate no.
	plate_no[0] = ReadBuffer[21];
 800975a:	4b56      	ldr	r3, [pc, #344]	@ (80098b4 <eeprom_r+0x38c>)
 800975c:	7d5a      	ldrb	r2, [r3, #21]
 800975e:	4b64      	ldr	r3, [pc, #400]	@ (80098f0 <eeprom_r+0x3c8>)
 8009760:	701a      	strb	r2, [r3, #0]
	plate_no[1] = ReadBuffer[22];
 8009762:	4b54      	ldr	r3, [pc, #336]	@ (80098b4 <eeprom_r+0x38c>)
 8009764:	7d9a      	ldrb	r2, [r3, #22]
 8009766:	4b62      	ldr	r3, [pc, #392]	@ (80098f0 <eeprom_r+0x3c8>)
 8009768:	705a      	strb	r2, [r3, #1]
	plate_no[2] = ReadBuffer[23];
 800976a:	4b52      	ldr	r3, [pc, #328]	@ (80098b4 <eeprom_r+0x38c>)
 800976c:	7dda      	ldrb	r2, [r3, #23]
 800976e:	4b60      	ldr	r3, [pc, #384]	@ (80098f0 <eeprom_r+0x3c8>)
 8009770:	709a      	strb	r2, [r3, #2]
	plate_no[3] = ReadBuffer[24];
 8009772:	4b50      	ldr	r3, [pc, #320]	@ (80098b4 <eeprom_r+0x38c>)
 8009774:	7e1a      	ldrb	r2, [r3, #24]
 8009776:	4b5e      	ldr	r3, [pc, #376]	@ (80098f0 <eeprom_r+0x3c8>)
 8009778:	70da      	strb	r2, [r3, #3]
	plate_no[4] = ReadBuffer[25];
 800977a:	4b4e      	ldr	r3, [pc, #312]	@ (80098b4 <eeprom_r+0x38c>)
 800977c:	7e5a      	ldrb	r2, [r3, #25]
 800977e:	4b5c      	ldr	r3, [pc, #368]	@ (80098f0 <eeprom_r+0x3c8>)
 8009780:	711a      	strb	r2, [r3, #4]
	plate_no[5] = ReadBuffer[26];
 8009782:	4b4c      	ldr	r3, [pc, #304]	@ (80098b4 <eeprom_r+0x38c>)
 8009784:	7e9a      	ldrb	r2, [r3, #26]
 8009786:	4b5a      	ldr	r3, [pc, #360]	@ (80098f0 <eeprom_r+0x3c8>)
 8009788:	715a      	strb	r2, [r3, #5]
	plate_no[6] = ReadBuffer[27];
 800978a:	4b4a      	ldr	r3, [pc, #296]	@ (80098b4 <eeprom_r+0x38c>)
 800978c:	7eda      	ldrb	r2, [r3, #27]
 800978e:	4b58      	ldr	r3, [pc, #352]	@ (80098f0 <eeprom_r+0x3c8>)
 8009790:	719a      	strb	r2, [r3, #6]
	plate_no[7] = ReadBuffer[28];
 8009792:	4b48      	ldr	r3, [pc, #288]	@ (80098b4 <eeprom_r+0x38c>)
 8009794:	7f1a      	ldrb	r2, [r3, #28]
 8009796:	4b56      	ldr	r3, [pc, #344]	@ (80098f0 <eeprom_r+0x3c8>)
 8009798:	71da      	strb	r2, [r3, #7]
	plate_no[8] = ReadBuffer[29];
 800979a:	4b46      	ldr	r3, [pc, #280]	@ (80098b4 <eeprom_r+0x38c>)
 800979c:	7f5a      	ldrb	r2, [r3, #29]
 800979e:	4b54      	ldr	r3, [pc, #336]	@ (80098f0 <eeprom_r+0x3c8>)
 80097a0:	721a      	strb	r2, [r3, #8]
	plate_no[9] = ReadBuffer[30];
 80097a2:	4b44      	ldr	r3, [pc, #272]	@ (80098b4 <eeprom_r+0x38c>)
 80097a4:	7f9a      	ldrb	r2, [r3, #30]
 80097a6:	4b52      	ldr	r3, [pc, #328]	@ (80098f0 <eeprom_r+0x3c8>)
 80097a8:	725a      	strb	r2, [r3, #9]

	for(int i=0; i<len_plate; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ae:	e00f      	b.n	80097d0 <eeprom_r+0x2a8>
	{
		plate_qr[i+6] = plate_no[10-len_plate+i];
 80097b0:	4b4d      	ldr	r3, [pc, #308]	@ (80098e8 <eeprom_r+0x3c0>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	001a      	movs	r2, r3
 80097b6:	230a      	movs	r3, #10
 80097b8:	1a9a      	subs	r2, r3, r2
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	18d2      	adds	r2, r2, r3
 80097be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c0:	3306      	adds	r3, #6
 80097c2:	494b      	ldr	r1, [pc, #300]	@ (80098f0 <eeprom_r+0x3c8>)
 80097c4:	5c89      	ldrb	r1, [r1, r2]
 80097c6:	4a49      	ldr	r2, [pc, #292]	@ (80098ec <eeprom_r+0x3c4>)
 80097c8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<len_plate; i++)
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	3301      	adds	r3, #1
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d0:	4b45      	ldr	r3, [pc, #276]	@ (80098e8 <eeprom_r+0x3c0>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	001a      	movs	r2, r3
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	4293      	cmp	r3, r2
 80097da:	dbe9      	blt.n	80097b0 <eeprom_r+0x288>
	}
	plate_qr[len_plate+6] = 0xFF;
 80097dc:	4b42      	ldr	r3, [pc, #264]	@ (80098e8 <eeprom_r+0x3c0>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	3306      	adds	r3, #6
 80097e2:	4a42      	ldr	r2, [pc, #264]	@ (80098ec <eeprom_r+0x3c4>)
 80097e4:	21ff      	movs	r1, #255	@ 0xff
 80097e6:	54d1      	strb	r1, [r2, r3]
	plate_qr[len_plate+7] = 0xFF;
 80097e8:	4b3f      	ldr	r3, [pc, #252]	@ (80098e8 <eeprom_r+0x3c0>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	3307      	adds	r3, #7
 80097ee:	4a3f      	ldr	r2, [pc, #252]	@ (80098ec <eeprom_r+0x3c4>)
 80097f0:	21ff      	movs	r1, #255	@ 0xff
 80097f2:	54d1      	strb	r1, [r2, r3]

	//printer -> print the receipt / tbox will use set plate no. in web config
	plate[13] = plate_no[9];
 80097f4:	4b3e      	ldr	r3, [pc, #248]	@ (80098f0 <eeprom_r+0x3c8>)
 80097f6:	7a5a      	ldrb	r2, [r3, #9]
 80097f8:	4b3e      	ldr	r3, [pc, #248]	@ (80098f4 <eeprom_r+0x3cc>)
 80097fa:	735a      	strb	r2, [r3, #13]
	plate[12] = plate_no[8];
 80097fc:	4b3c      	ldr	r3, [pc, #240]	@ (80098f0 <eeprom_r+0x3c8>)
 80097fe:	7a1a      	ldrb	r2, [r3, #8]
 8009800:	4b3c      	ldr	r3, [pc, #240]	@ (80098f4 <eeprom_r+0x3cc>)
 8009802:	731a      	strb	r2, [r3, #12]
	plate[11] = plate_no[7];
 8009804:	4b3a      	ldr	r3, [pc, #232]	@ (80098f0 <eeprom_r+0x3c8>)
 8009806:	79da      	ldrb	r2, [r3, #7]
 8009808:	4b3a      	ldr	r3, [pc, #232]	@ (80098f4 <eeprom_r+0x3cc>)
 800980a:	72da      	strb	r2, [r3, #11]
	plate[10] = plate_no[6];
 800980c:	4b38      	ldr	r3, [pc, #224]	@ (80098f0 <eeprom_r+0x3c8>)
 800980e:	799a      	ldrb	r2, [r3, #6]
 8009810:	4b38      	ldr	r3, [pc, #224]	@ (80098f4 <eeprom_r+0x3cc>)
 8009812:	729a      	strb	r2, [r3, #10]
	plate[9] = plate_no[5];
 8009814:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <eeprom_r+0x3c8>)
 8009816:	795a      	ldrb	r2, [r3, #5]
 8009818:	4b36      	ldr	r3, [pc, #216]	@ (80098f4 <eeprom_r+0x3cc>)
 800981a:	725a      	strb	r2, [r3, #9]
	plate[8] = plate_no[4];
 800981c:	4b34      	ldr	r3, [pc, #208]	@ (80098f0 <eeprom_r+0x3c8>)
 800981e:	791a      	ldrb	r2, [r3, #4]
 8009820:	4b34      	ldr	r3, [pc, #208]	@ (80098f4 <eeprom_r+0x3cc>)
 8009822:	721a      	strb	r2, [r3, #8]
	plate[7] = plate_no[3];
 8009824:	4b32      	ldr	r3, [pc, #200]	@ (80098f0 <eeprom_r+0x3c8>)
 8009826:	78da      	ldrb	r2, [r3, #3]
 8009828:	4b32      	ldr	r3, [pc, #200]	@ (80098f4 <eeprom_r+0x3cc>)
 800982a:	71da      	strb	r2, [r3, #7]
	plate[6] = plate_no[2];
 800982c:	4b30      	ldr	r3, [pc, #192]	@ (80098f0 <eeprom_r+0x3c8>)
 800982e:	789a      	ldrb	r2, [r3, #2]
 8009830:	4b30      	ldr	r3, [pc, #192]	@ (80098f4 <eeprom_r+0x3cc>)
 8009832:	719a      	strb	r2, [r3, #6]
	plate[5] = plate_no[1];
 8009834:	4b2e      	ldr	r3, [pc, #184]	@ (80098f0 <eeprom_r+0x3c8>)
 8009836:	785a      	ldrb	r2, [r3, #1]
 8009838:	4b2e      	ldr	r3, [pc, #184]	@ (80098f4 <eeprom_r+0x3cc>)
 800983a:	715a      	strb	r2, [r3, #5]
	plate[4] = plate_no[0];
 800983c:	4b2c      	ldr	r3, [pc, #176]	@ (80098f0 <eeprom_r+0x3c8>)
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	4b2c      	ldr	r3, [pc, #176]	@ (80098f4 <eeprom_r+0x3cc>)
 8009842:	711a      	strb	r2, [r3, #4]
	//parameter reply -> directly reply plate_no[] in Replybuffer[]
	//memset(plate_no, 0, 10);

	//12 - ReadBuffer[31][32][33][34][35][36] - rtc set date and time - rtc_set()
	//13 - ReadBuffer[37] - length of details of vehicle
	len_detail = ReadBuffer[37]; //hex2Dec(&etoll_qr[2]);
 8009844:	4b1b      	ldr	r3, [pc, #108]	@ (80098b4 <eeprom_r+0x38c>)
 8009846:	2225      	movs	r2, #37	@ 0x25
 8009848:	5c9a      	ldrb	r2, [r3, r2]
 800984a:	4b2b      	ldr	r3, [pc, #172]	@ (80098f8 <eeprom_r+0x3d0>)
 800984c:	701a      	strb	r2, [r3, #0]
	etoll_qr[2] = len_detail + 53;// etoll_qr is the QR code
 800984e:	4b2a      	ldr	r3, [pc, #168]	@ (80098f8 <eeprom_r+0x3d0>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	3335      	adds	r3, #53	@ 0x35
 8009854:	b2da      	uxtb	r2, r3
 8009856:	4b29      	ldr	r3, [pc, #164]	@ (80098fc <eeprom_r+0x3d4>)
 8009858:	709a      	strb	r2, [r3, #2]

	//14 - details of vehicle - 8 bytes - ASCII           //Chris reminder: 不要加判斷在eeprom function
	details[0] = ReadBuffer[38];
 800985a:	4b16      	ldr	r3, [pc, #88]	@ (80098b4 <eeprom_r+0x38c>)
 800985c:	2226      	movs	r2, #38	@ 0x26
 800985e:	5c9a      	ldrb	r2, [r3, r2]
 8009860:	4b27      	ldr	r3, [pc, #156]	@ (8009900 <eeprom_r+0x3d8>)
 8009862:	701a      	strb	r2, [r3, #0]
	details[1] = ReadBuffer[39];
 8009864:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <eeprom_r+0x38c>)
 8009866:	2227      	movs	r2, #39	@ 0x27
 8009868:	5c9a      	ldrb	r2, [r3, r2]
 800986a:	4b25      	ldr	r3, [pc, #148]	@ (8009900 <eeprom_r+0x3d8>)
 800986c:	705a      	strb	r2, [r3, #1]
	details[2] = ReadBuffer[40];
 800986e:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <eeprom_r+0x38c>)
 8009870:	2228      	movs	r2, #40	@ 0x28
 8009872:	5c9a      	ldrb	r2, [r3, r2]
 8009874:	4b22      	ldr	r3, [pc, #136]	@ (8009900 <eeprom_r+0x3d8>)
 8009876:	709a      	strb	r2, [r3, #2]
	details[3] = ReadBuffer[41];
 8009878:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <eeprom_r+0x38c>)
 800987a:	2229      	movs	r2, #41	@ 0x29
 800987c:	5c9a      	ldrb	r2, [r3, r2]
 800987e:	4b20      	ldr	r3, [pc, #128]	@ (8009900 <eeprom_r+0x3d8>)
 8009880:	70da      	strb	r2, [r3, #3]
	details[4] = ReadBuffer[42];
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <eeprom_r+0x38c>)
 8009884:	222a      	movs	r2, #42	@ 0x2a
 8009886:	5c9a      	ldrb	r2, [r3, r2]
 8009888:	4b1d      	ldr	r3, [pc, #116]	@ (8009900 <eeprom_r+0x3d8>)
 800988a:	711a      	strb	r2, [r3, #4]
	details[5] = ReadBuffer[43];
 800988c:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <eeprom_r+0x38c>)
 800988e:	222b      	movs	r2, #43	@ 0x2b
 8009890:	5c9a      	ldrb	r2, [r3, r2]
 8009892:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <eeprom_r+0x3d8>)
 8009894:	715a      	strb	r2, [r3, #5]
	details[6] = ReadBuffer[44];
 8009896:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <eeprom_r+0x38c>)
 8009898:	222c      	movs	r2, #44	@ 0x2c
 800989a:	5c9a      	ldrb	r2, [r3, r2]
 800989c:	4b18      	ldr	r3, [pc, #96]	@ (8009900 <eeprom_r+0x3d8>)
 800989e:	719a      	strb	r2, [r3, #6]
	details[7] = ReadBuffer[45];
 80098a0:	4b04      	ldr	r3, [pc, #16]	@ (80098b4 <eeprom_r+0x38c>)
 80098a2:	222d      	movs	r2, #45	@ 0x2d
 80098a4:	5c9a      	ldrb	r2, [r3, r2]
 80098a6:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <eeprom_r+0x3d8>)
 80098a8:	71da      	strb	r2, [r3, #7]

	for(int i=0; i<len_detail; i++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	623b      	str	r3, [r7, #32]
 80098ae:	e039      	b.n	8009924 <eeprom_r+0x3fc>
 80098b0:	20000624 	.word	0x20000624
 80098b4:	20000c44 	.word	0x20000c44
 80098b8:	41200000 	.word	0x41200000
 80098bc:	20000e48 	.word	0x20000e48
 80098c0:	20000e4c 	.word	0x20000e4c
 80098c4:	42c80000 	.word	0x42c80000
 80098c8:	20000e50 	.word	0x20000e50
 80098cc:	20000e5c 	.word	0x20000e5c
 80098d0:	20000e54 	.word	0x20000e54
 80098d4:	20000e58 	.word	0x20000e58
 80098d8:	20000e60 	.word	0x20000e60
 80098dc:	200002f4 	.word	0x200002f4
 80098e0:	200002f6 	.word	0x200002f6
 80098e4:	20000d78 	.word	0x20000d78
 80098e8:	2000359d 	.word	0x2000359d
 80098ec:	20000090 	.word	0x20000090
 80098f0:	20000d7c 	.word	0x20000d7c
 80098f4:	2000023c 	.word	0x2000023c
 80098f8:	2000359e 	.word	0x2000359e
 80098fc:	200000a4 	.word	0x200000a4
 8009900:	20000d88 	.word	0x20000d88
	{
		etoll_qr[i+53] = details[8-len_detail+i]; //len_detail can be 0-8
 8009904:	4b38      	ldr	r3, [pc, #224]	@ (80099e8 <eeprom_r+0x4c0>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	001a      	movs	r2, r3
 800990a:	2308      	movs	r3, #8
 800990c:	1a9a      	subs	r2, r3, r2
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	18d2      	adds	r2, r2, r3
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	3335      	adds	r3, #53	@ 0x35
 8009916:	4935      	ldr	r1, [pc, #212]	@ (80099ec <eeprom_r+0x4c4>)
 8009918:	5c89      	ldrb	r1, [r1, r2]
 800991a:	4a35      	ldr	r2, [pc, #212]	@ (80099f0 <eeprom_r+0x4c8>)
 800991c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<len_detail; i++)
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	3301      	adds	r3, #1
 8009922:	623b      	str	r3, [r7, #32]
 8009924:	4b30      	ldr	r3, [pc, #192]	@ (80099e8 <eeprom_r+0x4c0>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	001a      	movs	r2, r3
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	4293      	cmp	r3, r2
 800992e:	dbe9      	blt.n	8009904 <eeprom_r+0x3dc>
	}
	etoll_qr[len_detail+53] = 0xFF;
 8009930:	4b2d      	ldr	r3, [pc, #180]	@ (80099e8 <eeprom_r+0x4c0>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	3335      	adds	r3, #53	@ 0x35
 8009936:	4a2e      	ldr	r2, [pc, #184]	@ (80099f0 <eeprom_r+0x4c8>)
 8009938:	21ff      	movs	r1, #255	@ 0xff
 800993a:	54d1      	strb	r1, [r2, r3]
	etoll_qr[len_detail+53+1] = 0xFF;
 800993c:	4b2a      	ldr	r3, [pc, #168]	@ (80099e8 <eeprom_r+0x4c0>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	3336      	adds	r3, #54	@ 0x36
 8009942:	4a2b      	ldr	r2, [pc, #172]	@ (80099f0 <eeprom_r+0x4c8>)
 8009944:	21ff      	movs	r1, #255	@ 0xff
 8009946:	54d1      	strb	r1, [r2, r3]

	//DONE
	//15 - ReadBuffer[46][47][48][49][50][51][52][53][54][55][56][57] - serial no. - YTMETER00001
	serial_no[0] = ReadBuffer[46];
 8009948:	4b2a      	ldr	r3, [pc, #168]	@ (80099f4 <eeprom_r+0x4cc>)
 800994a:	222e      	movs	r2, #46	@ 0x2e
 800994c:	5c9a      	ldrb	r2, [r3, r2]
 800994e:	4b2a      	ldr	r3, [pc, #168]	@ (80099f8 <eeprom_r+0x4d0>)
 8009950:	701a      	strb	r2, [r3, #0]
	serial_no[1] = ReadBuffer[47];
 8009952:	4b28      	ldr	r3, [pc, #160]	@ (80099f4 <eeprom_r+0x4cc>)
 8009954:	222f      	movs	r2, #47	@ 0x2f
 8009956:	5c9a      	ldrb	r2, [r3, r2]
 8009958:	4b27      	ldr	r3, [pc, #156]	@ (80099f8 <eeprom_r+0x4d0>)
 800995a:	705a      	strb	r2, [r3, #1]
	serial_no[2] = ReadBuffer[48];
 800995c:	4b25      	ldr	r3, [pc, #148]	@ (80099f4 <eeprom_r+0x4cc>)
 800995e:	2230      	movs	r2, #48	@ 0x30
 8009960:	5c9a      	ldrb	r2, [r3, r2]
 8009962:	4b25      	ldr	r3, [pc, #148]	@ (80099f8 <eeprom_r+0x4d0>)
 8009964:	709a      	strb	r2, [r3, #2]
	serial_no[3] = ReadBuffer[49];
 8009966:	4b23      	ldr	r3, [pc, #140]	@ (80099f4 <eeprom_r+0x4cc>)
 8009968:	2231      	movs	r2, #49	@ 0x31
 800996a:	5c9a      	ldrb	r2, [r3, r2]
 800996c:	4b22      	ldr	r3, [pc, #136]	@ (80099f8 <eeprom_r+0x4d0>)
 800996e:	70da      	strb	r2, [r3, #3]
	serial_no[4] = ReadBuffer[50];
 8009970:	4b20      	ldr	r3, [pc, #128]	@ (80099f4 <eeprom_r+0x4cc>)
 8009972:	2232      	movs	r2, #50	@ 0x32
 8009974:	5c9a      	ldrb	r2, [r3, r2]
 8009976:	4b20      	ldr	r3, [pc, #128]	@ (80099f8 <eeprom_r+0x4d0>)
 8009978:	711a      	strb	r2, [r3, #4]
	serial_no[5] = ReadBuffer[51];
 800997a:	4b1e      	ldr	r3, [pc, #120]	@ (80099f4 <eeprom_r+0x4cc>)
 800997c:	2233      	movs	r2, #51	@ 0x33
 800997e:	5c9a      	ldrb	r2, [r3, r2]
 8009980:	4b1d      	ldr	r3, [pc, #116]	@ (80099f8 <eeprom_r+0x4d0>)
 8009982:	715a      	strb	r2, [r3, #5]
	serial_no[6] = ReadBuffer[52];
 8009984:	4b1b      	ldr	r3, [pc, #108]	@ (80099f4 <eeprom_r+0x4cc>)
 8009986:	2234      	movs	r2, #52	@ 0x34
 8009988:	5c9a      	ldrb	r2, [r3, r2]
 800998a:	4b1b      	ldr	r3, [pc, #108]	@ (80099f8 <eeprom_r+0x4d0>)
 800998c:	719a      	strb	r2, [r3, #6]
	serial_no[7] = ReadBuffer[53];
 800998e:	4b19      	ldr	r3, [pc, #100]	@ (80099f4 <eeprom_r+0x4cc>)
 8009990:	2235      	movs	r2, #53	@ 0x35
 8009992:	5c9a      	ldrb	r2, [r3, r2]
 8009994:	4b18      	ldr	r3, [pc, #96]	@ (80099f8 <eeprom_r+0x4d0>)
 8009996:	71da      	strb	r2, [r3, #7]
	serial_no[8] = ReadBuffer[54];
 8009998:	4b16      	ldr	r3, [pc, #88]	@ (80099f4 <eeprom_r+0x4cc>)
 800999a:	2236      	movs	r2, #54	@ 0x36
 800999c:	5c9a      	ldrb	r2, [r3, r2]
 800999e:	4b16      	ldr	r3, [pc, #88]	@ (80099f8 <eeprom_r+0x4d0>)
 80099a0:	721a      	strb	r2, [r3, #8]
	serial_no[9] = ReadBuffer[55];
 80099a2:	4b14      	ldr	r3, [pc, #80]	@ (80099f4 <eeprom_r+0x4cc>)
 80099a4:	2237      	movs	r2, #55	@ 0x37
 80099a6:	5c9a      	ldrb	r2, [r3, r2]
 80099a8:	4b13      	ldr	r3, [pc, #76]	@ (80099f8 <eeprom_r+0x4d0>)
 80099aa:	725a      	strb	r2, [r3, #9]
	serial_no[10] = ReadBuffer[56];
 80099ac:	4b11      	ldr	r3, [pc, #68]	@ (80099f4 <eeprom_r+0x4cc>)
 80099ae:	2238      	movs	r2, #56	@ 0x38
 80099b0:	5c9a      	ldrb	r2, [r3, r2]
 80099b2:	4b11      	ldr	r3, [pc, #68]	@ (80099f8 <eeprom_r+0x4d0>)
 80099b4:	729a      	strb	r2, [r3, #10]
	serial_no[11] = ReadBuffer[57];
 80099b6:	4b0f      	ldr	r3, [pc, #60]	@ (80099f4 <eeprom_r+0x4cc>)
 80099b8:	2239      	movs	r2, #57	@ 0x39
 80099ba:	5c9a      	ldrb	r2, [r3, r2]
 80099bc:	4b0e      	ldr	r3, [pc, #56]	@ (80099f8 <eeprom_r+0x4d0>)
 80099be:	72da      	strb	r2, [r3, #11]

	//16 - ReadBuffer[58][59][60] - fare effective date - (bcd) 23 08 02
	effected[0] = ReadBuffer[58];
 80099c0:	4b0c      	ldr	r3, [pc, #48]	@ (80099f4 <eeprom_r+0x4cc>)
 80099c2:	223a      	movs	r2, #58	@ 0x3a
 80099c4:	5c9a      	ldrb	r2, [r3, r2]
 80099c6:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <eeprom_r+0x4d4>)
 80099c8:	701a      	strb	r2, [r3, #0]
	effected[1] = ReadBuffer[59];
 80099ca:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <eeprom_r+0x4cc>)
 80099cc:	223b      	movs	r2, #59	@ 0x3b
 80099ce:	5c9a      	ldrb	r2, [r3, r2]
 80099d0:	4b0a      	ldr	r3, [pc, #40]	@ (80099fc <eeprom_r+0x4d4>)
 80099d2:	705a      	strb	r2, [r3, #1]
	effected[2] = ReadBuffer[60];
 80099d4:	4b07      	ldr	r3, [pc, #28]	@ (80099f4 <eeprom_r+0x4cc>)
 80099d6:	223c      	movs	r2, #60	@ 0x3c
 80099d8:	5c9a      	ldrb	r2, [r3, r2]
 80099da:	4b08      	ldr	r3, [pc, #32]	@ (80099fc <eeprom_r+0x4d4>)
 80099dc:	709a      	strb	r2, [r3, #2]
	//17 - stop bytes FF
}
 80099de:	46c0      	nop			@ (mov r8, r8)
 80099e0:	46bd      	mov	sp, r7
 80099e2:	b00b      	add	sp, #44	@ 0x2c
 80099e4:	bd90      	pop	{r4, r7, pc}
 80099e6:	46c0      	nop			@ (mov r8, r8)
 80099e8:	2000359e 	.word	0x2000359e
 80099ec:	20000d88 	.word	0x20000d88
 80099f0:	200000a4 	.word	0x200000a4
 80099f4:	20000c44 	.word	0x20000c44
 80099f8:	20000d90 	.word	0x20000d90
 80099fc:	20000d9c 	.word	0x20000d9c

08009a00 <rtc_set>:

//set time & date
void rtc_set(void)
{
 8009a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a02:	b091      	sub	sp, #68	@ 0x44
 8009a04:	af10      	add	r7, sp, #64	@ 0x40
	//read from eeprom for first time set

	PCF2129_Init(hi2c1, RTC_WRITE_ADDR);
 8009a06:	4c18      	ldr	r4, [pc, #96]	@ (8009a68 <rtc_set+0x68>)
 8009a08:	23a2      	movs	r3, #162	@ 0xa2
 8009a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a0c:	466b      	mov	r3, sp
 8009a0e:	0018      	movs	r0, r3
 8009a10:	0023      	movs	r3, r4
 8009a12:	3310      	adds	r3, #16
 8009a14:	223c      	movs	r2, #60	@ 0x3c
 8009a16:	0019      	movs	r1, r3
 8009a18:	f00f fb8e 	bl	8019138 <memcpy>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	6861      	ldr	r1, [r4, #4]
 8009a20:	68a2      	ldr	r2, [r4, #8]
 8009a22:	68e3      	ldr	r3, [r4, #12]
 8009a24:	f003 fba4 	bl	800d170 <PCF2129_Init>
	PCF2129_configure();                         ///Set 24hr Format
 8009a28:	f003 fbc4 	bl	800d1b4 <PCF2129_configure>

	PCF2129_setDate(ReadBuffer[31], ReadBuffer[32], ReadBuffer[33], ReadBuffer[34], ReadBuffer[35], ReadBuffer[36]);
 8009a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a6c <rtc_set+0x6c>)
 8009a2e:	7fdb      	ldrb	r3, [r3, #31]
 8009a30:	001e      	movs	r6, r3
 8009a32:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <rtc_set+0x6c>)
 8009a34:	2220      	movs	r2, #32
 8009a36:	5c99      	ldrb	r1, [r3, r2]
 8009a38:	4b0c      	ldr	r3, [pc, #48]	@ (8009a6c <rtc_set+0x6c>)
 8009a3a:	2221      	movs	r2, #33	@ 0x21
 8009a3c:	5c98      	ldrb	r0, [r3, r2]
 8009a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a6c <rtc_set+0x6c>)
 8009a40:	2222      	movs	r2, #34	@ 0x22
 8009a42:	5c9c      	ldrb	r4, [r3, r2]
 8009a44:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <rtc_set+0x6c>)
 8009a46:	2223      	movs	r2, #35	@ 0x23
 8009a48:	5c9b      	ldrb	r3, [r3, r2]
 8009a4a:	4a08      	ldr	r2, [pc, #32]	@ (8009a6c <rtc_set+0x6c>)
 8009a4c:	2524      	movs	r5, #36	@ 0x24
 8009a4e:	5d52      	ldrb	r2, [r2, r5]
 8009a50:	9201      	str	r2, [sp, #4]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	0023      	movs	r3, r4
 8009a56:	0002      	movs	r2, r0
 8009a58:	0030      	movs	r0, r6
 8009a5a:	f003 fc79 	bl	800d350 <PCF2129_setDate>
}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	46bd      	mov	sp, r7
 8009a62:	b001      	add	sp, #4
 8009a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a66:	46c0      	nop			@ (mov r8, r8)
 8009a68:	200005d8 	.word	0x200005d8
 8009a6c:	20000c44 	.word	0x20000c44

08009a70 <time_update>:

//read time & date
//transfer to uart
void time_update(void)
{
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	46de      	mov	lr, fp
 8009a74:	4657      	mov	r7, sl
 8009a76:	464e      	mov	r6, r9
 8009a78:	4645      	mov	r5, r8
 8009a7a:	b5e0      	push	{r5, r6, r7, lr}
 8009a7c:	4cf6      	ldr	r4, [pc, #984]	@ (8009e58 <time_update+0x3e8>)
 8009a7e:	44a5      	add	sp, r4
 8009a80:	af0a      	add	r7, sp, #40	@ 0x28
	unsigned char r_buffer[9];
	unsigned char u_buffer[6];

	RTC_date = PCF2129_getDate();
 8009a82:	4cf6      	ldr	r4, [pc, #984]	@ (8009e5c <time_update+0x3ec>)
 8009a84:	2510      	movs	r5, #16
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f003 fb9b 	bl	800d1c4 <PCF2129_getDate>
 8009a8e:	4bf4      	ldr	r3, [pc, #976]	@ (8009e60 <time_update+0x3f0>)
 8009a90:	2286      	movs	r2, #134	@ 0x86
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	189b      	adds	r3, r3, r2
 8009a96:	2210      	movs	r2, #16
 8009a98:	4694      	mov	ip, r2
 8009a9a:	44bc      	add	ip, r7
 8009a9c:	4463      	add	r3, ip
 8009a9e:	0020      	movs	r0, r4
 8009aa0:	0019      	movs	r1, r3
 8009aa2:	2358      	movs	r3, #88	@ 0x58
 8009aa4:	001a      	movs	r2, r3
 8009aa6:	f00f fb47 	bl	8019138 <memcpy>

	year = RTC_date.date.y;
 8009aaa:	4bec      	ldr	r3, [pc, #944]	@ (8009e5c <time_update+0x3ec>)
 8009aac:	224d      	movs	r2, #77	@ 0x4d
 8009aae:	5c9b      	ldrb	r3, [r3, r2]
 8009ab0:	001a      	movs	r2, r3
 8009ab2:	4bec      	ldr	r3, [pc, #944]	@ (8009e64 <time_update+0x3f4>)
 8009ab4:	801a      	strh	r2, [r3, #0]
	r_buffer[0] = (uint8_t)(year & 0xFF);
 8009ab6:	4beb      	ldr	r3, [pc, #940]	@ (8009e64 <time_update+0x3f4>)
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	2182      	movs	r1, #130	@ 0x82
 8009abe:	0089      	lsls	r1, r1, #2
 8009ac0:	0028      	movs	r0, r5
 8009ac2:	180b      	adds	r3, r1, r0
 8009ac4:	19db      	adds	r3, r3, r7
 8009ac6:	701a      	strb	r2, [r3, #0]

	month = RTC_date.date.m;
 8009ac8:	4be4      	ldr	r3, [pc, #912]	@ (8009e5c <time_update+0x3ec>)
 8009aca:	224e      	movs	r2, #78	@ 0x4e
 8009acc:	5c9b      	ldrb	r3, [r3, r2]
 8009ace:	001a      	movs	r2, r3
 8009ad0:	4be5      	ldr	r3, [pc, #916]	@ (8009e68 <time_update+0x3f8>)
 8009ad2:	801a      	strh	r2, [r3, #0]
	r_buffer[1] = (uint8_t)(month & 0xFF);
 8009ad4:	4be4      	ldr	r3, [pc, #912]	@ (8009e68 <time_update+0x3f8>)
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	180b      	adds	r3, r1, r0
 8009adc:	19db      	adds	r3, r3, r7
 8009ade:	705a      	strb	r2, [r3, #1]

	day = RTC_date.date.d;
 8009ae0:	4bde      	ldr	r3, [pc, #888]	@ (8009e5c <time_update+0x3ec>)
 8009ae2:	224f      	movs	r2, #79	@ 0x4f
 8009ae4:	5c9b      	ldrb	r3, [r3, r2]
 8009ae6:	001a      	movs	r2, r3
 8009ae8:	4be0      	ldr	r3, [pc, #896]	@ (8009e6c <time_update+0x3fc>)
 8009aea:	801a      	strh	r2, [r3, #0]
	r_buffer[2] = (uint8_t)(day & 0xFF);
 8009aec:	4bdf      	ldr	r3, [pc, #892]	@ (8009e6c <time_update+0x3fc>)
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	180b      	adds	r3, r1, r0
 8009af4:	19db      	adds	r3, r3, r7
 8009af6:	709a      	strb	r2, [r3, #2]

//	weekday = RTC_date.date.w;
//	buffer[3] = (uint8_t)(weekday & 0xFF);

	hour = RTC_date.date.hh;
 8009af8:	4bd8      	ldr	r3, [pc, #864]	@ (8009e5c <time_update+0x3ec>)
 8009afa:	2251      	movs	r2, #81	@ 0x51
 8009afc:	5c9b      	ldrb	r3, [r3, r2]
 8009afe:	001a      	movs	r2, r3
 8009b00:	4bdb      	ldr	r3, [pc, #876]	@ (8009e70 <time_update+0x400>)
 8009b02:	801a      	strh	r2, [r3, #0]
	r_buffer[3] = (uint8_t)(hour & 0xFF);
 8009b04:	4bda      	ldr	r3, [pc, #872]	@ (8009e70 <time_update+0x400>)
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	180b      	adds	r3, r1, r0
 8009b0c:	19db      	adds	r3, r3, r7
 8009b0e:	70da      	strb	r2, [r3, #3]

	minute = RTC_date.date.mm;
 8009b10:	4bd2      	ldr	r3, [pc, #840]	@ (8009e5c <time_update+0x3ec>)
 8009b12:	2252      	movs	r2, #82	@ 0x52
 8009b14:	5c9b      	ldrb	r3, [r3, r2]
 8009b16:	001a      	movs	r2, r3
 8009b18:	4bd6      	ldr	r3, [pc, #856]	@ (8009e74 <time_update+0x404>)
 8009b1a:	801a      	strh	r2, [r3, #0]
	r_buffer[4] = (uint8_t)(minute & 0xFF);
 8009b1c:	4bd5      	ldr	r3, [pc, #852]	@ (8009e74 <time_update+0x404>)
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	180b      	adds	r3, r1, r0
 8009b24:	19db      	adds	r3, r3, r7
 8009b26:	711a      	strb	r2, [r3, #4]

	second = RTC_date.date.ss;
 8009b28:	4bcc      	ldr	r3, [pc, #816]	@ (8009e5c <time_update+0x3ec>)
 8009b2a:	2253      	movs	r2, #83	@ 0x53
 8009b2c:	5c9b      	ldrb	r3, [r3, r2]
 8009b2e:	001a      	movs	r2, r3
 8009b30:	4bd1      	ldr	r3, [pc, #836]	@ (8009e78 <time_update+0x408>)
 8009b32:	801a      	strh	r2, [r3, #0]
	r_buffer[5] = (uint8_t)(second & 0xFF);
 8009b34:	4bd0      	ldr	r3, [pc, #832]	@ (8009e78 <time_update+0x408>)
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	180b      	adds	r3, r1, r0
 8009b3c:	19db      	adds	r3, r3, r7
 8009b3e:	715a      	strb	r2, [r3, #5]

	ctrl_1 = PCF2129_read(PCF2129_REG_CONTROL1);
 8009b40:	2000      	movs	r0, #0
 8009b42:	f003 fc61 	bl	800d408 <PCF2129_read>
 8009b46:	0003      	movs	r3, r0
 8009b48:	001a      	movs	r2, r3
 8009b4a:	4bcc      	ldr	r3, [pc, #816]	@ (8009e7c <time_update+0x40c>)
 8009b4c:	701a      	strb	r2, [r3, #0]
	ctrl_2 = PCF2129_read(PCF2129_REG_CONTROL2);
 8009b4e:	2001      	movs	r0, #1
 8009b50:	f003 fc5a 	bl	800d408 <PCF2129_read>
 8009b54:	0003      	movs	r3, r0
 8009b56:	001a      	movs	r2, r3
 8009b58:	4bc9      	ldr	r3, [pc, #804]	@ (8009e80 <time_update+0x410>)
 8009b5a:	701a      	strb	r2, [r3, #0]
	ctrl_3 = PCF2129_read(PCF2129_REG_CONTROL3);
 8009b5c:	2002      	movs	r0, #2
 8009b5e:	f003 fc53 	bl	800d408 <PCF2129_read>
 8009b62:	0003      	movs	r3, r0
 8009b64:	001a      	movs	r2, r3
 8009b66:	4bc7      	ldr	r3, [pc, #796]	@ (8009e84 <time_update+0x414>)
 8009b68:	701a      	strb	r2, [r3, #0]

	hh = PCF2129_read(PCF2129_REG_ALARM_HOUR);
 8009b6a:	200c      	movs	r0, #12
 8009b6c:	f003 fc4c 	bl	800d408 <PCF2129_read>
 8009b70:	0003      	movs	r3, r0
 8009b72:	001a      	movs	r2, r3
 8009b74:	4bc4      	ldr	r3, [pc, #784]	@ (8009e88 <time_update+0x418>)
 8009b76:	701a      	strb	r2, [r3, #0]
	mm = PCF2129_read(PCF2129_REG_ALARM_MINUTE);
 8009b78:	200b      	movs	r0, #11
 8009b7a:	f003 fc45 	bl	800d408 <PCF2129_read>
 8009b7e:	0003      	movs	r3, r0
 8009b80:	001a      	movs	r2, r3
 8009b82:	4bc2      	ldr	r3, [pc, #776]	@ (8009e8c <time_update+0x41c>)
 8009b84:	701a      	strb	r2, [r3, #0]
	ss = PCF2129_read(PCF2129_REG_ALARM_SECOND);
 8009b86:	200a      	movs	r0, #10
 8009b88:	f003 fc3e 	bl	800d408 <PCF2129_read>
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	001a      	movs	r2, r3
 8009b90:	4bbf      	ldr	r3, [pc, #764]	@ (8009e90 <time_update+0x420>)
 8009b92:	701a      	strb	r2, [r3, #0]

	PCF2129_write(PCF2129_REG_CONTROL1, 0x00);
 8009b94:	2100      	movs	r1, #0
 8009b96:	2000      	movs	r0, #0
 8009b98:	f003 fc5e 	bl	800d458 <PCF2129_write>
//	PCF2129_write(PCF2129_REG_CONTROL2, 0x00);
	PCF2129_write(PCF2129_REG_CONTROL3, 0x00);
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	2002      	movs	r0, #2
 8009ba0:	f003 fc5a 	bl	800d458 <PCF2129_write>

//	check AIE if power off reset all flags
	if ((ctrl_2 & 0x02) == 0x02)
 8009ba4:	4bb6      	ldr	r3, [pc, #728]	@ (8009e80 <time_update+0x410>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	001a      	movs	r2, r3
 8009baa:	2302      	movs	r3, #2
 8009bac:	4013      	ands	r3, r2
 8009bae:	d01f      	beq.n	8009bf0 <time_update+0x180>
	{
		EventDebugLog("AIE if 0x02 Before Flag_Protect");
 8009bb0:	4bb8      	ldr	r3, [pc, #736]	@ (8009e94 <time_update+0x424>)
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f000 fc78 	bl	800a4a8 <EventDebugLog>

		//if AIE set, continue anti-tamper mode, only show unlock time
		flag_alarm_clear = TRUE;
 8009bb8:	4bb7      	ldr	r3, [pc, #732]	@ (8009e98 <time_update+0x428>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
		Flag_Protect = TRUE;  						//鎖錶狀態
 8009bbe:	4bb7      	ldr	r3, [pc, #732]	@ (8009e9c <time_update+0x42c>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	701a      	strb	r2, [r3, #0]

		EventDebugLog("AIE if 0x02 After Flag_Protect");
 8009bc4:	4bb6      	ldr	r3, [pc, #728]	@ (8009ea0 <time_update+0x430>)
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	f000 fc6e 	bl	800a4a8 <EventDebugLog>

		counter=0; //Add by Edwin to prevent adding distance while locking
 8009bcc:	4bb5      	ldr	r3, [pc, #724]	@ (8009ea4 <time_update+0x434>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
		last_counter=0;//Add by Edwin to prevent adding distance while locking
 8009bd2:	4bb5      	ldr	r3, [pc, #724]	@ (8009ea8 <time_update+0x438>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
		Dt=0;//Add by Edwin
 8009bd8:	4bb4      	ldr	r3, [pc, #720]	@ (8009eac <time_update+0x43c>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
		Fu=0;//Add by Edwin
 8009bde:	4bb4      	ldr	r3, [pc, #720]	@ (8009eb0 <time_update+0x440>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
		Ft=0;//Add by Edwin
 8009be4:	4bb3      	ldr	r3, [pc, #716]	@ (8009eb4 <time_update+0x444>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
		Fd=0;//Add by Edwin
 8009bea:	4bb3      	ldr	r3, [pc, #716]	@ (8009eb8 <time_update+0x448>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
	}
	
	//Flag_set_alarm_rtc - this flag will set after 30s alarm, this if will calculate 1 hour count down
	if(Flag_set_alarm_rtc)
 8009bf0:	4bb2      	ldr	r3, [pc, #712]	@ (8009ebc <time_update+0x44c>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d100      	bne.n	8009bfa <time_update+0x18a>
 8009bf8:	e213      	b.n	800a022 <time_update+0x5b2>
	{
		Flag_set_alarm_rtc = FALSE;
 8009bfa:	4bb0      	ldr	r3, [pc, #704]	@ (8009ebc <time_update+0x44c>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
		//current time to unix TimeStamp
		stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 8009c00:	4b96      	ldr	r3, [pc, #600]	@ (8009e5c <time_update+0x3ec>)
 8009c02:	224d      	movs	r2, #77	@ 0x4d
 8009c04:	5c9b      	ldrb	r3, [r3, r2]
 8009c06:	0018      	movs	r0, r3
 8009c08:	f003 fc67 	bl	800d4da <bcdToDec>
 8009c0c:	0003      	movs	r3, r0
 8009c0e:	22fa      	movs	r2, #250	@ 0xfa
 8009c10:	00d2      	lsls	r2, r2, #3
 8009c12:	4694      	mov	ip, r2
 8009c14:	4463      	add	r3, ip
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	4ba9      	ldr	r3, [pc, #676]	@ (8009ec0 <time_update+0x450>)
 8009c1a:	801a      	strh	r2, [r3, #0]
		stCurrentTime.month = bcdToDec(RTC_date.date.m);
 8009c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8009e5c <time_update+0x3ec>)
 8009c1e:	224e      	movs	r2, #78	@ 0x4e
 8009c20:	5c9b      	ldrb	r3, [r3, r2]
 8009c22:	0018      	movs	r0, r3
 8009c24:	f003 fc59 	bl	800d4da <bcdToDec>
 8009c28:	0003      	movs	r3, r0
 8009c2a:	001a      	movs	r2, r3
 8009c2c:	4ba4      	ldr	r3, [pc, #656]	@ (8009ec0 <time_update+0x450>)
 8009c2e:	709a      	strb	r2, [r3, #2]
		stCurrentTime.date = bcdToDec(RTC_date.date.d);
 8009c30:	4b8a      	ldr	r3, [pc, #552]	@ (8009e5c <time_update+0x3ec>)
 8009c32:	224f      	movs	r2, #79	@ 0x4f
 8009c34:	5c9b      	ldrb	r3, [r3, r2]
 8009c36:	0018      	movs	r0, r3
 8009c38:	f003 fc4f 	bl	800d4da <bcdToDec>
 8009c3c:	0003      	movs	r3, r0
 8009c3e:	001a      	movs	r2, r3
 8009c40:	4b9f      	ldr	r3, [pc, #636]	@ (8009ec0 <time_update+0x450>)
 8009c42:	70da      	strb	r2, [r3, #3]
		stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 8009c44:	4b85      	ldr	r3, [pc, #532]	@ (8009e5c <time_update+0x3ec>)
 8009c46:	2251      	movs	r2, #81	@ 0x51
 8009c48:	5c9b      	ldrb	r3, [r3, r2]
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f003 fc45 	bl	800d4da <bcdToDec>
 8009c50:	0003      	movs	r3, r0
 8009c52:	001a      	movs	r2, r3
 8009c54:	4b9a      	ldr	r3, [pc, #616]	@ (8009ec0 <time_update+0x450>)
 8009c56:	711a      	strb	r2, [r3, #4]
		stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 8009c58:	4b80      	ldr	r3, [pc, #512]	@ (8009e5c <time_update+0x3ec>)
 8009c5a:	2252      	movs	r2, #82	@ 0x52
 8009c5c:	5c9b      	ldrb	r3, [r3, r2]
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f003 fc3b 	bl	800d4da <bcdToDec>
 8009c64:	0003      	movs	r3, r0
 8009c66:	001a      	movs	r2, r3
 8009c68:	4b95      	ldr	r3, [pc, #596]	@ (8009ec0 <time_update+0x450>)
 8009c6a:	715a      	strb	r2, [r3, #5]
		stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 8009c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8009e5c <time_update+0x3ec>)
 8009c6e:	2253      	movs	r2, #83	@ 0x53
 8009c70:	5c9b      	ldrb	r3, [r3, r2]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f003 fc31 	bl	800d4da <bcdToDec>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	4b90      	ldr	r3, [pc, #576]	@ (8009ec0 <time_update+0x450>)
 8009c7e:	719a      	strb	r2, [r3, #6]

		u32UnixTimeStamp = utcToUnix(&stCurrentTime);
 8009c80:	4b8f      	ldr	r3, [pc, #572]	@ (8009ec0 <time_update+0x450>)
 8009c82:	0018      	movs	r0, r3
 8009c84:	f003 fdb0 	bl	800d7e8 <utcToUnix>
 8009c88:	0002      	movs	r2, r0
 8009c8a:	4b8e      	ldr	r3, [pc, #568]	@ (8009ec4 <time_update+0x454>)
 8009c8c:	601a      	str	r2, [r3, #0]

		//calculate alarm time - TimeStamp + alarm time(1 hour)
		u32UnixTimeStamp += 3600; //test 1 min (60); //5 mins (300) //set 3600 for 1 hour
 8009c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ec4 <time_update+0x454>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	22e1      	movs	r2, #225	@ 0xe1
 8009c94:	0112      	lsls	r2, r2, #4
 8009c96:	189a      	adds	r2, r3, r2
 8009c98:	4b8a      	ldr	r3, [pc, #552]	@ (8009ec4 <time_update+0x454>)
 8009c9a:	601a      	str	r2, [r3, #0]

		//write to pcf2129
		unixToUtc(u32UnixTimeStamp);
 8009c9c:	4b89      	ldr	r3, [pc, #548]	@ (8009ec4 <time_update+0x454>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	2510      	movs	r5, #16
 8009ca2:	197b      	adds	r3, r7, r5
 8009ca4:	0011      	movs	r1, r2
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f003 fc50 	bl	800d54c <unixToUtc>

		//change to bcd format
		u_buffer[0] = decToBcd((UtcTime.year-2000));
 8009cac:	4b86      	ldr	r3, [pc, #536]	@ (8009ec8 <time_update+0x458>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	3330      	adds	r3, #48	@ 0x30
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f003 fc2a 	bl	800d50e <decToBcd>
 8009cba:	0003      	movs	r3, r0
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	2480      	movs	r4, #128	@ 0x80
 8009cc0:	00a4      	lsls	r4, r4, #2
 8009cc2:	1963      	adds	r3, r4, r5
 8009cc4:	19db      	adds	r3, r3, r7
 8009cc6:	701a      	strb	r2, [r3, #0]
		u_buffer[1] = decToBcd(UtcTime.month);
 8009cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8009ec8 <time_update+0x458>)
 8009cca:	785b      	ldrb	r3, [r3, #1]
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f003 fc1e 	bl	800d50e <decToBcd>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	1963      	adds	r3, r4, r5
 8009cd8:	19db      	adds	r3, r3, r7
 8009cda:	705a      	strb	r2, [r3, #1]
		u_buffer[2] = decToBcd(UtcTime.date);
 8009cdc:	4b7a      	ldr	r3, [pc, #488]	@ (8009ec8 <time_update+0x458>)
 8009cde:	789b      	ldrb	r3, [r3, #2]
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f003 fc14 	bl	800d50e <decToBcd>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	001a      	movs	r2, r3
 8009cea:	1963      	adds	r3, r4, r5
 8009cec:	19db      	adds	r3, r3, r7
 8009cee:	709a      	strb	r2, [r3, #2]
		u_buffer[3] = decToBcd(UtcTime.hour);
 8009cf0:	4b75      	ldr	r3, [pc, #468]	@ (8009ec8 <time_update+0x458>)
 8009cf2:	78db      	ldrb	r3, [r3, #3]
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f003 fc0a 	bl	800d50e <decToBcd>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	001a      	movs	r2, r3
 8009cfe:	1963      	adds	r3, r4, r5
 8009d00:	19db      	adds	r3, r3, r7
 8009d02:	70da      	strb	r2, [r3, #3]
		u_buffer[4] = decToBcd(UtcTime.minute);
 8009d04:	4b70      	ldr	r3, [pc, #448]	@ (8009ec8 <time_update+0x458>)
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f003 fc00 	bl	800d50e <decToBcd>
 8009d0e:	0003      	movs	r3, r0
 8009d10:	001a      	movs	r2, r3
 8009d12:	1963      	adds	r3, r4, r5
 8009d14:	19db      	adds	r3, r3, r7
 8009d16:	711a      	strb	r2, [r3, #4]
		u_buffer[5] = decToBcd(UtcTime.second);
 8009d18:	4b6b      	ldr	r3, [pc, #428]	@ (8009ec8 <time_update+0x458>)
 8009d1a:	795b      	ldrb	r3, [r3, #5]
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f003 fbf6 	bl	800d50e <decToBcd>
 8009d22:	0003      	movs	r3, r0
 8009d24:	001a      	movs	r2, r3
 8009d26:	1963      	adds	r3, r4, r5
 8009d28:	19db      	adds	r3, r3, r7
 8009d2a:	715a      	strb	r2, [r3, #5]
		//Leo&Edwin: Add log to SD card to record down the things to write in RCF2129.
		//log==> current time+setalarm+ u_buffer[3]:u_buffer[4]:u_buffer[5]



		fresult = f_open(&fil, "LockLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8009d2c:	4967      	ldr	r1, [pc, #412]	@ (8009ecc <time_update+0x45c>)
 8009d2e:	4b68      	ldr	r3, [pc, #416]	@ (8009ed0 <time_update+0x460>)
 8009d30:	2203      	movs	r2, #3
 8009d32:	0018      	movs	r0, r3
 8009d34:	f00e f9f8 	bl	8018128 <f_open>
 8009d38:	0003      	movs	r3, r0
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	4b65      	ldr	r3, [pc, #404]	@ (8009ed4 <time_update+0x464>)
 8009d3e:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_NO_FILE) {
 8009d40:	4b64      	ldr	r3, [pc, #400]	@ (8009ed4 <time_update+0x464>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d124      	bne.n	8009d92 <time_update+0x322>
		    // Create the file
		    fresult = f_open(&fil, "LockLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8009d48:	4960      	ldr	r1, [pc, #384]	@ (8009ecc <time_update+0x45c>)
 8009d4a:	4b61      	ldr	r3, [pc, #388]	@ (8009ed0 <time_update+0x460>)
 8009d4c:	220a      	movs	r2, #10
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f00e f9ea 	bl	8018128 <f_open>
 8009d54:	0003      	movs	r3, r0
 8009d56:	001a      	movs	r2, r3
 8009d58:	4b5e      	ldr	r3, [pc, #376]	@ (8009ed4 <time_update+0x464>)
 8009d5a:	701a      	strb	r2, [r3, #0]

		    // Check if the file was created successfully
		    if (fresult == FR_OK) {
 8009d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8009ed4 <time_update+0x464>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d116      	bne.n	8009d92 <time_update+0x322>
		        // Optionally write initial data to the file
		        const char *initialData = "Smart Taximeter Lock Log \n";
 8009d64:	4b5c      	ldr	r3, [pc, #368]	@ (8009ed8 <time_update+0x468>)
 8009d66:	2485      	movs	r4, #133	@ 0x85
 8009d68:	00a4      	lsls	r4, r4, #2
 8009d6a:	1962      	adds	r2, r4, r5
 8009d6c:	19d2      	adds	r2, r2, r7
 8009d6e:	6013      	str	r3, [r2, #0]
		        UINT bytesWritten;
		        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 8009d70:	1963      	adds	r3, r4, r5
 8009d72:	19db      	adds	r3, r3, r7
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	0018      	movs	r0, r3
 8009d78:	f7f6 f9c4 	bl	8000104 <strlen>
 8009d7c:	0002      	movs	r2, r0
 8009d7e:	23f4      	movs	r3, #244	@ 0xf4
 8009d80:	005b      	lsls	r3, r3, #1
 8009d82:	195b      	adds	r3, r3, r5
 8009d84:	19db      	adds	r3, r3, r7
 8009d86:	1961      	adds	r1, r4, r5
 8009d88:	19c9      	adds	r1, r1, r7
 8009d8a:	6809      	ldr	r1, [r1, #0]
 8009d8c:	4850      	ldr	r0, [pc, #320]	@ (8009ed0 <time_update+0x460>)
 8009d8e:	f00e fbd0 	bl	8018532 <f_write>
		    }
		}

		fresult = f_lseek(&fil, f_size(&fil));
 8009d92:	4b4f      	ldr	r3, [pc, #316]	@ (8009ed0 <time_update+0x460>)
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	4b4e      	ldr	r3, [pc, #312]	@ (8009ed0 <time_update+0x460>)
 8009d98:	0011      	movs	r1, r2
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f00e fe21 	bl	80189e2 <f_lseek>
 8009da0:	0003      	movs	r3, r0
 8009da2:	001a      	movs	r2, r3
 8009da4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ed4 <time_update+0x464>)
 8009da6:	701a      	strb	r2, [r3, #0]
		char buffer2[200];
		snprintf(buffer2, sizeof(buffer2), "\nBefore writing Alarm :\n Locking Time(ymdhms):%d-%d-%d %d:%d:%d,\n Flag_set_alarm_rtc: %d,\n u_buffer[3](dec): %d,\n u_buffer[4](dec): %d,\n u_buffer[5](dec): %d,\n ctrl_2_before: %d,\n",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(u_buffer[3]), bcdToDec(u_buffer[4]),bcdToDec(u_buffer[5]),PCF2129_read(PCF2129_REG_CONTROL2));
 8009da8:	4b45      	ldr	r3, [pc, #276]	@ (8009ec0 <time_update+0x450>)
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	4b44      	ldr	r3, [pc, #272]	@ (8009ec0 <time_update+0x450>)
 8009db0:	789b      	ldrb	r3, [r3, #2]
 8009db2:	001c      	movs	r4, r3
 8009db4:	4b42      	ldr	r3, [pc, #264]	@ (8009ec0 <time_update+0x450>)
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	001d      	movs	r5, r3
 8009dba:	4b41      	ldr	r3, [pc, #260]	@ (8009ec0 <time_update+0x450>)
 8009dbc:	791b      	ldrb	r3, [r3, #4]
 8009dbe:	001e      	movs	r6, r3
 8009dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ec0 <time_update+0x450>)
 8009dc2:	795b      	ldrb	r3, [r3, #5]
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ec0 <time_update+0x450>)
 8009dc8:	799b      	ldrb	r3, [r3, #6]
 8009dca:	4699      	mov	r9, r3
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <time_update+0x44c>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	469a      	mov	sl, r3
 8009dd2:	2280      	movs	r2, #128	@ 0x80
 8009dd4:	0092      	lsls	r2, r2, #2
 8009dd6:	2010      	movs	r0, #16
 8009dd8:	1813      	adds	r3, r2, r0
 8009dda:	19db      	adds	r3, r3, r7
 8009ddc:	78db      	ldrb	r3, [r3, #3]
 8009dde:	0018      	movs	r0, r3
 8009de0:	f003 fb7b 	bl	800d4da <bcdToDec>
 8009de4:	0003      	movs	r3, r0
 8009de6:	469b      	mov	fp, r3
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	2010      	movs	r0, #16
 8009dee:	1813      	adds	r3, r2, r0
 8009df0:	19db      	adds	r3, r3, r7
 8009df2:	791b      	ldrb	r3, [r3, #4]
 8009df4:	0018      	movs	r0, r3
 8009df6:	f003 fb70 	bl	800d4da <bcdToDec>
 8009dfa:	0003      	movs	r3, r0
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	2280      	movs	r2, #128	@ 0x80
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	2010      	movs	r0, #16
 8009e04:	1813      	adds	r3, r2, r0
 8009e06:	19db      	adds	r3, r3, r7
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f003 fb65 	bl	800d4da <bcdToDec>
 8009e10:	0003      	movs	r3, r0
 8009e12:	607b      	str	r3, [r7, #4]
 8009e14:	2001      	movs	r0, #1
 8009e16:	f003 faf7 	bl	800d408 <PCF2129_read>
 8009e1a:	0003      	movs	r3, r0
 8009e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8009edc <time_update+0x46c>)
 8009e1e:	2158      	movs	r1, #88	@ 0x58
 8009e20:	2010      	movs	r0, #16
 8009e22:	1809      	adds	r1, r1, r0
 8009e24:	19c8      	adds	r0, r1, r7
 8009e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	9108      	str	r1, [sp, #32]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	465b      	mov	r3, fp
 8009e32:	9306      	str	r3, [sp, #24]
 8009e34:	4653      	mov	r3, sl
 8009e36:	9305      	str	r3, [sp, #20]
 8009e38:	464b      	mov	r3, r9
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	4643      	mov	r3, r8
 8009e3e:	9303      	str	r3, [sp, #12]
 8009e40:	9602      	str	r6, [sp, #8]
 8009e42:	9501      	str	r5, [sp, #4]
 8009e44:	9400      	str	r4, [sp, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	21c8      	movs	r1, #200	@ 0xc8
 8009e4a:	f00f f8ff 	bl	801904c <sniprintf>
		fresult = f_puts(buffer2, &fil);
 8009e4e:	4a20      	ldr	r2, [pc, #128]	@ (8009ed0 <time_update+0x460>)
 8009e50:	2158      	movs	r1, #88	@ 0x58
 8009e52:	2510      	movs	r5, #16
 8009e54:	194b      	adds	r3, r1, r5
 8009e56:	e043      	b.n	8009ee0 <time_update+0x470>
 8009e58:	fffffdac 	.word	0xfffffdac
 8009e5c:	20000da4 	.word	0x20000da4
 8009e60:	fffffde8 	.word	0xfffffde8
 8009e64:	20000dfc 	.word	0x20000dfc
 8009e68:	20000dfe 	.word	0x20000dfe
 8009e6c:	20000e00 	.word	0x20000e00
 8009e70:	20000e02 	.word	0x20000e02
 8009e74:	20000e04 	.word	0x20000e04
 8009e78:	20000e06 	.word	0x20000e06
 8009e7c:	20000e1c 	.word	0x20000e1c
 8009e80:	20000e1d 	.word	0x20000e1d
 8009e84:	20000e1e 	.word	0x20000e1e
 8009e88:	20000e20 	.word	0x20000e20
 8009e8c:	20000e21 	.word	0x20000e21
 8009e90:	20000e22 	.word	0x20000e22
 8009e94:	08019a80 	.word	0x08019a80
 8009e98:	20000e1f 	.word	0x20000e1f
 8009e9c:	20000ec5 	.word	0x20000ec5
 8009ea0:	08019aa0 	.word	0x08019aa0
 8009ea4:	20000e70 	.word	0x20000e70
 8009ea8:	20000e78 	.word	0x20000e78
 8009eac:	20000e84 	.word	0x20000e84
 8009eb0:	20000e8c 	.word	0x20000e8c
 8009eb4:	20000e90 	.word	0x20000e90
 8009eb8:	20000e94 	.word	0x20000e94
 8009ebc:	20000ec6 	.word	0x20000ec6
 8009ec0:	20000e14 	.word	0x20000e14
 8009ec4:	20000e10 	.word	0x20000e10
 8009ec8:	20000e08 	.word	0x20000e08
 8009ecc:	08019ac0 	.word	0x08019ac0
 8009ed0:	200020c4 	.word	0x200020c4
 8009ed4:	200030f4 	.word	0x200030f4
 8009ed8:	08019acc 	.word	0x08019acc
 8009edc:	08019ae8 	.word	0x08019ae8
 8009ee0:	19db      	adds	r3, r3, r7
 8009ee2:	0011      	movs	r1, r2
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f00f f827 	bl	8018f38 <f_puts>
 8009eea:	0003      	movs	r3, r0
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4b81      	ldr	r3, [pc, #516]	@ (800a0f4 <time_update+0x684>)
 8009ef0:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 8009ef2:	4b81      	ldr	r3, [pc, #516]	@ (800a0f8 <time_update+0x688>)
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f00e fd40 	bl	801897a <f_close>
		clear_buffer();
 8009efa:	f7fa f809 	bl	8003f10 <clear_buffer>

		//write to alarm registers
		PCF2129_write(PCF2129_REG_ALARM_SECOND, u_buffer[5]);
 8009efe:	2480      	movs	r4, #128	@ 0x80
 8009f00:	00a4      	lsls	r4, r4, #2
 8009f02:	1963      	adds	r3, r4, r5
 8009f04:	19db      	adds	r3, r3, r7
 8009f06:	795b      	ldrb	r3, [r3, #5]
 8009f08:	0019      	movs	r1, r3
 8009f0a:	200a      	movs	r0, #10
 8009f0c:	f003 faa4 	bl	800d458 <PCF2129_write>
		PCF2129_write(PCF2129_REG_ALARM_MINUTE, u_buffer[4]);
 8009f10:	1963      	adds	r3, r4, r5
 8009f12:	19db      	adds	r3, r3, r7
 8009f14:	791b      	ldrb	r3, [r3, #4]
 8009f16:	0019      	movs	r1, r3
 8009f18:	200b      	movs	r0, #11
 8009f1a:	f003 fa9d 	bl	800d458 <PCF2129_write>
		PCF2129_write(PCF2129_REG_ALARM_HOUR, u_buffer[3]);
 8009f1e:	1963      	adds	r3, r4, r5
 8009f20:	19db      	adds	r3, r3, r7
 8009f22:	78db      	ldrb	r3, [r3, #3]
 8009f24:	0019      	movs	r1, r3
 8009f26:	200c      	movs	r0, #12
 8009f28:	f003 fa96 	bl	800d458 <PCF2129_write>

		//AIE
		PCF2129_write(PCF2129_REG_CONTROL2, 0x02);
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f003 fa92 	bl	800d458 <PCF2129_write>

		//PCF2129_read    // Add by Leo & Edwin
		//log==> current time+ reread alarm+ hh_read[3]:mm_read[4]:ss_read[5]
		fresult = f_open(&fil, "LockLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);//open
 8009f34:	4971      	ldr	r1, [pc, #452]	@ (800a0fc <time_update+0x68c>)
 8009f36:	4b70      	ldr	r3, [pc, #448]	@ (800a0f8 <time_update+0x688>)
 8009f38:	2203      	movs	r2, #3
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f00e f8f4 	bl	8018128 <f_open>
 8009f40:	0003      	movs	r3, r0
 8009f42:	001a      	movs	r2, r3
 8009f44:	4b6b      	ldr	r3, [pc, #428]	@ (800a0f4 <time_update+0x684>)
 8009f46:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 8009f48:	4b6b      	ldr	r3, [pc, #428]	@ (800a0f8 <time_update+0x688>)
 8009f4a:	68da      	ldr	r2, [r3, #12]
 8009f4c:	4b6a      	ldr	r3, [pc, #424]	@ (800a0f8 <time_update+0x688>)
 8009f4e:	0011      	movs	r1, r2
 8009f50:	0018      	movs	r0, r3
 8009f52:	f00e fd46 	bl	80189e2 <f_lseek>
 8009f56:	0003      	movs	r3, r0
 8009f58:	001a      	movs	r2, r3
 8009f5a:	4b66      	ldr	r3, [pc, #408]	@ (800a0f4 <time_update+0x684>)
 8009f5c:	701a      	strb	r2, [r3, #0]
		char buffer1[200];
		snprintf(buffer1, sizeof(buffer1), "\nAfter writing Alarm :\n Written Time(ymdhms):%d-%d-%d %d:%d:%d,\n Flag_set_alarm_rtc: %d,\n Alarm_hr: %d,\n Alarm_min: %d,\n Alarm_sec: %d,\n ctrl_2_after: %d,\n ",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(PCF2129_read(PCF2129_REG_ALARM_HOUR)), bcdToDec(PCF2129_read(PCF2129_REG_ALARM_MINUTE)),bcdToDec(PCF2129_read(PCF2129_REG_ALARM_SECOND)),PCF2129_read(PCF2129_REG_CONTROL2));
 8009f5e:	4b68      	ldr	r3, [pc, #416]	@ (800a100 <time_update+0x690>)
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	4b66      	ldr	r3, [pc, #408]	@ (800a100 <time_update+0x690>)
 8009f66:	789b      	ldrb	r3, [r3, #2]
 8009f68:	001c      	movs	r4, r3
 8009f6a:	4b65      	ldr	r3, [pc, #404]	@ (800a100 <time_update+0x690>)
 8009f6c:	78db      	ldrb	r3, [r3, #3]
 8009f6e:	001d      	movs	r5, r3
 8009f70:	4b63      	ldr	r3, [pc, #396]	@ (800a100 <time_update+0x690>)
 8009f72:	791b      	ldrb	r3, [r3, #4]
 8009f74:	001e      	movs	r6, r3
 8009f76:	4b62      	ldr	r3, [pc, #392]	@ (800a100 <time_update+0x690>)
 8009f78:	795b      	ldrb	r3, [r3, #5]
 8009f7a:	4698      	mov	r8, r3
 8009f7c:	4b60      	ldr	r3, [pc, #384]	@ (800a100 <time_update+0x690>)
 8009f7e:	799b      	ldrb	r3, [r3, #6]
 8009f80:	4699      	mov	r9, r3
 8009f82:	4b60      	ldr	r3, [pc, #384]	@ (800a104 <time_update+0x694>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	469a      	mov	sl, r3
 8009f88:	200c      	movs	r0, #12
 8009f8a:	f003 fa3d 	bl	800d408 <PCF2129_read>
 8009f8e:	0003      	movs	r3, r0
 8009f90:	0018      	movs	r0, r3
 8009f92:	f003 faa2 	bl	800d4da <bcdToDec>
 8009f96:	0003      	movs	r3, r0
 8009f98:	469b      	mov	fp, r3
 8009f9a:	200b      	movs	r0, #11
 8009f9c:	f003 fa34 	bl	800d408 <PCF2129_read>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f003 fa99 	bl	800d4da <bcdToDec>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	200a      	movs	r0, #10
 8009fae:	f003 fa2b 	bl	800d408 <PCF2129_read>
 8009fb2:	0003      	movs	r3, r0
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f003 fa90 	bl	800d4da <bcdToDec>
 8009fba:	0003      	movs	r3, r0
 8009fbc:	607b      	str	r3, [r7, #4]
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	f003 fa22 	bl	800d408 <PCF2129_read>
 8009fc4:	0003      	movs	r3, r0
 8009fc6:	4a50      	ldr	r2, [pc, #320]	@ (800a108 <time_update+0x698>)
 8009fc8:	2190      	movs	r1, #144	@ 0x90
 8009fca:	0049      	lsls	r1, r1, #1
 8009fcc:	2010      	movs	r0, #16
 8009fce:	1809      	adds	r1, r1, r0
 8009fd0:	19c8      	adds	r0, r1, r7
 8009fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	9108      	str	r1, [sp, #32]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	465b      	mov	r3, fp
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	4653      	mov	r3, sl
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	4643      	mov	r3, r8
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	9602      	str	r6, [sp, #8]
 8009fee:	9501      	str	r5, [sp, #4]
 8009ff0:	9400      	str	r4, [sp, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	21c8      	movs	r1, #200	@ 0xc8
 8009ff6:	f00f f829 	bl	801904c <sniprintf>
		fresult = f_puts(buffer1, &fil);
 8009ffa:	4a3f      	ldr	r2, [pc, #252]	@ (800a0f8 <time_update+0x688>)
 8009ffc:	2190      	movs	r1, #144	@ 0x90
 8009ffe:	0049      	lsls	r1, r1, #1
 800a000:	2510      	movs	r5, #16
 800a002:	194b      	adds	r3, r1, r5
 800a004:	19db      	adds	r3, r3, r7
 800a006:	0011      	movs	r1, r2
 800a008:	0018      	movs	r0, r3
 800a00a:	f00e ff95 	bl	8018f38 <f_puts>
 800a00e:	0003      	movs	r3, r0
 800a010:	b2da      	uxtb	r2, r3
 800a012:	4b38      	ldr	r3, [pc, #224]	@ (800a0f4 <time_update+0x684>)
 800a014:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 800a016:	4b38      	ldr	r3, [pc, #224]	@ (800a0f8 <time_update+0x688>)
 800a018:	0018      	movs	r0, r3
 800a01a:	f00e fcae 	bl	801897a <f_close>
		clear_buffer();
 800a01e:	f7f9 ff77 	bl	8003f10 <clear_buffer>
	}
	//trigger the alarm - ~INT = 0 (PA11)
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)     //A   //11 //解鎖
 800a022:	2380      	movs	r3, #128	@ 0x80
 800a024:	011a      	lsls	r2, r3, #4
 800a026:	23a0      	movs	r3, #160	@ 0xa0
 800a028:	05db      	lsls	r3, r3, #23
 800a02a:	0011      	movs	r1, r2
 800a02c:	0018      	movs	r0, r3
 800a02e:	f005 f829 	bl	800f084 <HAL_GPIO_ReadPin>
 800a032:	1e03      	subs	r3, r0, #0
 800a034:	d101      	bne.n	800a03a <time_update+0x5ca>
	{
		Unlock_Meter();
 800a036:	f000 f86d 	bl	800a114 <Unlock_Meter>
//		Width = 0;
//		Speed = 0;
	}

	unsigned char rtc_buffer[18];
	BCD2ASC(rtc_buffer, r_buffer, 18);
 800a03a:	2382      	movs	r3, #130	@ 0x82
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	2510      	movs	r5, #16
 800a040:	195b      	adds	r3, r3, r5
 800a042:	19d9      	adds	r1, r3, r7
 800a044:	24f6      	movs	r4, #246	@ 0xf6
 800a046:	0064      	lsls	r4, r4, #1
 800a048:	1963      	adds	r3, r4, r5
 800a04a:	19db      	adds	r3, r3, r7
 800a04c:	2212      	movs	r2, #18
 800a04e:	0018      	movs	r0, r3
 800a050:	f000 fb68 	bl	800a724 <BCD2ASC>

	hmi_rtc[8] = rtc_buffer[0];
 800a054:	0021      	movs	r1, r4
 800a056:	0028      	movs	r0, r5
 800a058:	180b      	adds	r3, r1, r0
 800a05a:	19db      	adds	r3, r3, r7
 800a05c:	781a      	ldrb	r2, [r3, #0]
 800a05e:	4b2b      	ldr	r3, [pc, #172]	@ (800a10c <time_update+0x69c>)
 800a060:	721a      	strb	r2, [r3, #8]
	hmi_rtc[9] = rtc_buffer[1];
 800a062:	180b      	adds	r3, r1, r0
 800a064:	19db      	adds	r3, r3, r7
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	4b28      	ldr	r3, [pc, #160]	@ (800a10c <time_update+0x69c>)
 800a06a:	725a      	strb	r2, [r3, #9]

	hmi_rtc[11] = rtc_buffer[2];
 800a06c:	180b      	adds	r3, r1, r0
 800a06e:	19db      	adds	r3, r3, r7
 800a070:	789a      	ldrb	r2, [r3, #2]
 800a072:	4b26      	ldr	r3, [pc, #152]	@ (800a10c <time_update+0x69c>)
 800a074:	72da      	strb	r2, [r3, #11]
	hmi_rtc[12] = rtc_buffer[3];
 800a076:	180b      	adds	r3, r1, r0
 800a078:	19db      	adds	r3, r3, r7
 800a07a:	78da      	ldrb	r2, [r3, #3]
 800a07c:	4b23      	ldr	r3, [pc, #140]	@ (800a10c <time_update+0x69c>)
 800a07e:	731a      	strb	r2, [r3, #12]

	hmi_rtc[14] = rtc_buffer[4];
 800a080:	180b      	adds	r3, r1, r0
 800a082:	19db      	adds	r3, r3, r7
 800a084:	791a      	ldrb	r2, [r3, #4]
 800a086:	4b21      	ldr	r3, [pc, #132]	@ (800a10c <time_update+0x69c>)
 800a088:	739a      	strb	r2, [r3, #14]
	hmi_rtc[15] = rtc_buffer[5];
 800a08a:	180b      	adds	r3, r1, r0
 800a08c:	19db      	adds	r3, r3, r7
 800a08e:	795a      	ldrb	r2, [r3, #5]
 800a090:	4b1e      	ldr	r3, [pc, #120]	@ (800a10c <time_update+0x69c>)
 800a092:	73da      	strb	r2, [r3, #15]

	hmi_rtc[17] = rtc_buffer[6];
 800a094:	180b      	adds	r3, r1, r0
 800a096:	19db      	adds	r3, r3, r7
 800a098:	799a      	ldrb	r2, [r3, #6]
 800a09a:	4b1c      	ldr	r3, [pc, #112]	@ (800a10c <time_update+0x69c>)
 800a09c:	745a      	strb	r2, [r3, #17]
	hmi_rtc[18] = rtc_buffer[7];
 800a09e:	180b      	adds	r3, r1, r0
 800a0a0:	19db      	adds	r3, r3, r7
 800a0a2:	79da      	ldrb	r2, [r3, #7]
 800a0a4:	4b19      	ldr	r3, [pc, #100]	@ (800a10c <time_update+0x69c>)
 800a0a6:	749a      	strb	r2, [r3, #18]

	hmi_rtc[20] = rtc_buffer[8];
 800a0a8:	180b      	adds	r3, r1, r0
 800a0aa:	19db      	adds	r3, r3, r7
 800a0ac:	7a1a      	ldrb	r2, [r3, #8]
 800a0ae:	4b17      	ldr	r3, [pc, #92]	@ (800a10c <time_update+0x69c>)
 800a0b0:	751a      	strb	r2, [r3, #20]
	hmi_rtc[21] = rtc_buffer[9];
 800a0b2:	180b      	adds	r3, r1, r0
 800a0b4:	19db      	adds	r3, r3, r7
 800a0b6:	7a5a      	ldrb	r2, [r3, #9]
 800a0b8:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <time_update+0x69c>)
 800a0ba:	755a      	strb	r2, [r3, #21]

	hmi_rtc[23] = rtc_buffer[10];
 800a0bc:	180b      	adds	r3, r1, r0
 800a0be:	19db      	adds	r3, r3, r7
 800a0c0:	7a9a      	ldrb	r2, [r3, #10]
 800a0c2:	4b12      	ldr	r3, [pc, #72]	@ (800a10c <time_update+0x69c>)
 800a0c4:	75da      	strb	r2, [r3, #23]
	hmi_rtc[24] = rtc_buffer[11];
 800a0c6:	180b      	adds	r3, r1, r0
 800a0c8:	19db      	adds	r3, r3, r7
 800a0ca:	7ada      	ldrb	r2, [r3, #11]
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a10c <time_update+0x69c>)
 800a0ce:	761a      	strb	r2, [r3, #24]

	HAL_UART_Transmit(&huart1, hmi_rtc, 25, 0x20);
 800a0d0:	490e      	ldr	r1, [pc, #56]	@ (800a10c <time_update+0x69c>)
 800a0d2:	480f      	ldr	r0, [pc, #60]	@ (800a110 <time_update+0x6a0>)
 800a0d4:	2320      	movs	r3, #32
 800a0d6:	2219      	movs	r2, #25
 800a0d8:	f009 fcaa 	bl	8013a30 <HAL_UART_Transmit>
}
 800a0dc:	46c0      	nop			@ (mov r8, r8)
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	238b      	movs	r3, #139	@ 0x8b
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	449d      	add	sp, r3
 800a0e6:	bcf0      	pop	{r4, r5, r6, r7}
 800a0e8:	46bb      	mov	fp, r7
 800a0ea:	46b2      	mov	sl, r6
 800a0ec:	46a9      	mov	r9, r5
 800a0ee:	46a0      	mov	r8, r4
 800a0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	200030f4 	.word	0x200030f4
 800a0f8:	200020c4 	.word	0x200020c4
 800a0fc:	08019ac0 	.word	0x08019ac0
 800a100:	20000e14 	.word	0x20000e14
 800a104:	20000ec6 	.word	0x20000ec6
 800a108:	08019b9c 	.word	0x08019b9c
 800a10c:	20000074 	.word	0x20000074
 800a110:	20000700 	.word	0x20000700

0800a114 <Unlock_Meter>:

void Unlock_Meter(void) // Move by Edwin
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
	flag_alarm_clear = FALSE;
 800a118:	4b2c      	ldr	r3, [pc, #176]	@ (800a1cc <Unlock_Meter+0xb8>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	701a      	strb	r2, [r3, #0]

	EventDebugLog("Unlock Meter Before Flag_Protect modified");
 800a11e:	4b2c      	ldr	r3, [pc, #176]	@ (800a1d0 <Unlock_Meter+0xbc>)
 800a120:	0018      	movs	r0, r3
 800a122:	f000 f9c1 	bl	800a4a8 <EventDebugLog>

	Flag_Protect = FALSE;
 800a126:	4b2b      	ldr	r3, [pc, #172]	@ (800a1d4 <Unlock_Meter+0xc0>)
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
	Flag_alarm = TRUE;
 800a12c:	4b2a      	ldr	r3, [pc, #168]	@ (800a1d8 <Unlock_Meter+0xc4>)
 800a12e:	2201      	movs	r2, #1
 800a130:	701a      	strb	r2, [r3, #0]
	PCF2129_write(PCF2129_REG_CONTROL2, 0x00);
 800a132:	2100      	movs	r1, #0
 800a134:	2001      	movs	r0, #1
 800a136:	f003 f98f 	bl	800d458 <PCF2129_write>

	EventDebugLog("Unlock Meter After Flag_Protect modified");
 800a13a:	4b28      	ldr	r3, [pc, #160]	@ (800a1dc <Unlock_Meter+0xc8>)
 800a13c:	0018      	movs	r0, r3
 800a13e:	f000 f9b3 	bl	800a4a8 <EventDebugLog>

	HAL_UART_Transmit(&huart1, unlock_clear, 12, 0x20);
 800a142:	4927      	ldr	r1, [pc, #156]	@ (800a1e0 <Unlock_Meter+0xcc>)
 800a144:	4827      	ldr	r0, [pc, #156]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a146:	2320      	movs	r3, #32
 800a148:	220c      	movs	r2, #12
 800a14a:	f009 fc71 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, C_Fare_clear, 7, 0x20);
 800a14e:	4926      	ldr	r1, [pc, #152]	@ (800a1e8 <Unlock_Meter+0xd4>)
 800a150:	4824      	ldr	r0, [pc, #144]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a152:	2320      	movs	r3, #32
 800a154:	2207      	movs	r2, #7
 800a156:	f009 fc6b 	bl	8013a30 <HAL_UART_Transmit>

	//TIME清零 by Edwin
	sec = 0;
 800a15a:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <Unlock_Meter+0xd8>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	701a      	strb	r2, [r3, #0]
	min = 0;
 800a160:	4b23      	ldr	r3, [pc, #140]	@ (800a1f0 <Unlock_Meter+0xdc>)
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
	hou = 0;
 800a166:	4b23      	ldr	r3, [pc, #140]	@ (800a1f4 <Unlock_Meter+0xe0>)
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) Dur_HMS_clear, 14, 0x1C);
 800a16c:	4922      	ldr	r1, [pc, #136]	@ (800a1f8 <Unlock_Meter+0xe4>)
 800a16e:	481d      	ldr	r0, [pc, #116]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a170:	231c      	movs	r3, #28
 800a172:	220e      	movs	r2, #14
 800a174:	f009 fc5c 	bl	8013a30 <HAL_UART_Transmit>
	counter = 0;//add by Edwin to prevent meter jump to stop again
 800a178:	4b20      	ldr	r3, [pc, #128]	@ (800a1fc <Unlock_Meter+0xe8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
	Fu=0;//Add by Edwin
 800a17e:	4b20      	ldr	r3, [pc, #128]	@ (800a200 <Unlock_Meter+0xec>)
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
	Ft=0;//Add by Edwin
 800a184:	4b1f      	ldr	r3, [pc, #124]	@ (800a204 <Unlock_Meter+0xf0>)
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
	Fd=0;//Add by Edwin
 800a18a:	4b1f      	ldr	r3, [pc, #124]	@ (800a208 <Unlock_Meter+0xf4>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Hired_Off, 8, 0x10);
 800a190:	491e      	ldr	r1, [pc, #120]	@ (800a20c <Unlock_Meter+0xf8>)
 800a192:	4814      	ldr	r0, [pc, #80]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a194:	2310      	movs	r3, #16
 800a196:	2208      	movs	r2, #8
 800a198:	f009 fc4a 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Stop_Off, 8, 0x10);
 800a19c:	491c      	ldr	r1, [pc, #112]	@ (800a210 <Unlock_Meter+0xfc>)
 800a19e:	4811      	ldr	r0, [pc, #68]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	f009 fc44 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) LED_Vacant_On, 8, 0x10);
 800a1a8:	491a      	ldr	r1, [pc, #104]	@ (800a214 <Unlock_Meter+0x100>)
 800a1aa:	480e      	ldr	r0, [pc, #56]	@ (800a1e4 <Unlock_Meter+0xd0>)
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	f009 fc3e 	bl	8013a30 <HAL_UART_Transmit>




	Drv_state = S_VACANT;
 800a1b4:	4b18      	ldr	r3, [pc, #96]	@ (800a218 <Unlock_Meter+0x104>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
	Width = 0;
 800a1ba:	4b18      	ldr	r3, [pc, #96]	@ (800a21c <Unlock_Meter+0x108>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]
	Speed = 0;
 800a1c0:	4b17      	ldr	r3, [pc, #92]	@ (800a220 <Unlock_Meter+0x10c>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
	}
 800a1c6:	46c0      	nop			@ (mov r8, r8)
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000e1f 	.word	0x20000e1f
 800a1d0:	08019c3c 	.word	0x08019c3c
 800a1d4:	20000ec5 	.word	0x20000ec5
 800a1d8:	200002f8 	.word	0x200002f8
 800a1dc:	08019c68 	.word	0x08019c68
 800a1e0:	200002fc 	.word	0x200002fc
 800a1e4:	20000700 	.word	0x20000700
 800a1e8:	20000308 	.word	0x20000308
 800a1ec:	20000b6c 	.word	0x20000b6c
 800a1f0:	20000b6d 	.word	0x20000b6d
 800a1f4:	20000b6e 	.word	0x20000b6e
 800a1f8:	20000064 	.word	0x20000064
 800a1fc:	20000e70 	.word	0x20000e70
 800a200:	20000e8c 	.word	0x20000e8c
 800a204:	20000e90 	.word	0x20000e90
 800a208:	20000e94 	.word	0x20000e94
 800a20c:	2000000c 	.word	0x2000000c
 800a210:	2000001c 	.word	0x2000001c
 800a214:	20000024 	.word	0x20000024
 800a218:	20000b1e 	.word	0x20000b1e
 800a21c:	20000e3c 	.word	0x20000e3c
 800a220:	20000e64 	.word	0x20000e64

0800a224 <DebugLog>:

void DebugLog(void)
{
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	46de      	mov	lr, fp
 800a228:	4657      	mov	r7, sl
 800a22a:	464e      	mov	r6, r9
 800a22c:	4645      	mov	r5, r8
 800a22e:	b5e0      	push	{r5, r6, r7, lr}
 800a230:	b0ef      	sub	sp, #444	@ 0x1bc
 800a232:	af14      	add	r7, sp, #80	@ 0x50
	#ifdef DEBUG
	stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 800a234:	4b89      	ldr	r3, [pc, #548]	@ (800a45c <DebugLog+0x238>)
 800a236:	224d      	movs	r2, #77	@ 0x4d
 800a238:	5c9b      	ldrb	r3, [r3, r2]
 800a23a:	0018      	movs	r0, r3
 800a23c:	f003 f94d 	bl	800d4da <bcdToDec>
 800a240:	0003      	movs	r3, r0
 800a242:	22fa      	movs	r2, #250	@ 0xfa
 800a244:	00d2      	lsls	r2, r2, #3
 800a246:	4694      	mov	ip, r2
 800a248:	4463      	add	r3, ip
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	4b84      	ldr	r3, [pc, #528]	@ (800a460 <DebugLog+0x23c>)
 800a24e:	801a      	strh	r2, [r3, #0]
	stCurrentTime.month = bcdToDec(RTC_date.date.m);
 800a250:	4b82      	ldr	r3, [pc, #520]	@ (800a45c <DebugLog+0x238>)
 800a252:	224e      	movs	r2, #78	@ 0x4e
 800a254:	5c9b      	ldrb	r3, [r3, r2]
 800a256:	0018      	movs	r0, r3
 800a258:	f003 f93f 	bl	800d4da <bcdToDec>
 800a25c:	0003      	movs	r3, r0
 800a25e:	001a      	movs	r2, r3
 800a260:	4b7f      	ldr	r3, [pc, #508]	@ (800a460 <DebugLog+0x23c>)
 800a262:	709a      	strb	r2, [r3, #2]
	stCurrentTime.date = bcdToDec(RTC_date.date.d);
 800a264:	4b7d      	ldr	r3, [pc, #500]	@ (800a45c <DebugLog+0x238>)
 800a266:	224f      	movs	r2, #79	@ 0x4f
 800a268:	5c9b      	ldrb	r3, [r3, r2]
 800a26a:	0018      	movs	r0, r3
 800a26c:	f003 f935 	bl	800d4da <bcdToDec>
 800a270:	0003      	movs	r3, r0
 800a272:	001a      	movs	r2, r3
 800a274:	4b7a      	ldr	r3, [pc, #488]	@ (800a460 <DebugLog+0x23c>)
 800a276:	70da      	strb	r2, [r3, #3]
	stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 800a278:	4b78      	ldr	r3, [pc, #480]	@ (800a45c <DebugLog+0x238>)
 800a27a:	2251      	movs	r2, #81	@ 0x51
 800a27c:	5c9b      	ldrb	r3, [r3, r2]
 800a27e:	0018      	movs	r0, r3
 800a280:	f003 f92b 	bl	800d4da <bcdToDec>
 800a284:	0003      	movs	r3, r0
 800a286:	001a      	movs	r2, r3
 800a288:	4b75      	ldr	r3, [pc, #468]	@ (800a460 <DebugLog+0x23c>)
 800a28a:	711a      	strb	r2, [r3, #4]
	stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 800a28c:	4b73      	ldr	r3, [pc, #460]	@ (800a45c <DebugLog+0x238>)
 800a28e:	2252      	movs	r2, #82	@ 0x52
 800a290:	5c9b      	ldrb	r3, [r3, r2]
 800a292:	0018      	movs	r0, r3
 800a294:	f003 f921 	bl	800d4da <bcdToDec>
 800a298:	0003      	movs	r3, r0
 800a29a:	001a      	movs	r2, r3
 800a29c:	4b70      	ldr	r3, [pc, #448]	@ (800a460 <DebugLog+0x23c>)
 800a29e:	715a      	strb	r2, [r3, #5]
	stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 800a2a0:	4b6e      	ldr	r3, [pc, #440]	@ (800a45c <DebugLog+0x238>)
 800a2a2:	2253      	movs	r2, #83	@ 0x53
 800a2a4:	5c9b      	ldrb	r3, [r3, r2]
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f003 f917 	bl	800d4da <bcdToDec>
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	001a      	movs	r2, r3
 800a2b0:	4b6b      	ldr	r3, [pc, #428]	@ (800a460 <DebugLog+0x23c>)
 800a2b2:	719a      	strb	r2, [r3, #6]
	if (stCurrentTime.second%3==0){
 800a2b4:	4b6a      	ldr	r3, [pc, #424]	@ (800a460 <DebugLog+0x23c>)
 800a2b6:	799b      	ldrb	r3, [r3, #6]
 800a2b8:	2103      	movs	r1, #3
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7f5 ffba 	bl	8000234 <__aeabi_uidivmod>
 800a2c0:	000b      	movs	r3, r1
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d000      	beq.n	800a2ca <DebugLog+0xa6>
 800a2c8:	e0be      	b.n	800a448 <DebugLog+0x224>
	fresult = f_open(&fil, "DebugLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800a2ca:	4966      	ldr	r1, [pc, #408]	@ (800a464 <DebugLog+0x240>)
 800a2cc:	4b66      	ldr	r3, [pc, #408]	@ (800a468 <DebugLog+0x244>)
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f00d ff29 	bl	8018128 <f_open>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	001a      	movs	r2, r3
 800a2da:	4b64      	ldr	r3, [pc, #400]	@ (800a46c <DebugLog+0x248>)
 800a2dc:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NO_FILE) {
 800a2de:	4b63      	ldr	r3, [pc, #396]	@ (800a46c <DebugLog+0x248>)
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d125      	bne.n	800a332 <DebugLog+0x10e>
	    // Create the file
	    fresult = f_open(&fil, "DebugLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800a2e6:	495f      	ldr	r1, [pc, #380]	@ (800a464 <DebugLog+0x240>)
 800a2e8:	4b5f      	ldr	r3, [pc, #380]	@ (800a468 <DebugLog+0x244>)
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f00d ff1b 	bl	8018128 <f_open>
 800a2f2:	0003      	movs	r3, r0
 800a2f4:	001a      	movs	r2, r3
 800a2f6:	4b5d      	ldr	r3, [pc, #372]	@ (800a46c <DebugLog+0x248>)
 800a2f8:	701a      	strb	r2, [r3, #0]

	    // Check if the file was created successfully
	    if (fresult == FR_OK) {
 800a2fa:	4b5c      	ldr	r3, [pc, #368]	@ (800a46c <DebugLog+0x248>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d117      	bne.n	800a332 <DebugLog+0x10e>
	        // Optionally write initial data to the file
	        const char *initialData = "Smart Taximeter Debug Log \n";
 800a302:	4b5b      	ldr	r3, [pc, #364]	@ (800a470 <DebugLog+0x24c>)
 800a304:	249a      	movs	r4, #154	@ 0x9a
 800a306:	0064      	lsls	r4, r4, #1
 800a308:	2530      	movs	r5, #48	@ 0x30
 800a30a:	1962      	adds	r2, r4, r5
 800a30c:	19d2      	adds	r2, r2, r7
 800a30e:	6013      	str	r3, [r2, #0]
	        UINT bytesWritten;
	        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 800a310:	1963      	adds	r3, r4, r5
 800a312:	19db      	adds	r3, r3, r7
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	0018      	movs	r0, r3
 800a318:	f7f5 fef4 	bl	8000104 <strlen>
 800a31c:	0002      	movs	r2, r0
 800a31e:	2398      	movs	r3, #152	@ 0x98
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	195b      	adds	r3, r3, r5
 800a324:	19db      	adds	r3, r3, r7
 800a326:	1961      	adds	r1, r4, r5
 800a328:	19c9      	adds	r1, r1, r7
 800a32a:	6809      	ldr	r1, [r1, #0]
 800a32c:	484e      	ldr	r0, [pc, #312]	@ (800a468 <DebugLog+0x244>)
 800a32e:	f00e f900 	bl	8018532 <f_write>
	    }
	}

	fresult = f_lseek(&fil, f_size(&fil));
 800a332:	4b4d      	ldr	r3, [pc, #308]	@ (800a468 <DebugLog+0x244>)
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	4b4c      	ldr	r3, [pc, #304]	@ (800a468 <DebugLog+0x244>)
 800a338:	0011      	movs	r1, r2
 800a33a:	0018      	movs	r0, r3
 800a33c:	f00e fb51 	bl	80189e2 <f_lseek>
 800a340:	0003      	movs	r3, r0
 800a342:	001a      	movs	r2, r3
 800a344:	4b49      	ldr	r3, [pc, #292]	@ (800a46c <DebugLog+0x248>)
 800a346:	701a      	strb	r2, [r3, #0]
	char buffer3[300];
	snprintf(buffer3, sizeof(buffer3), "\nLog Time(ymdhms):%d-%d-%d %d:%d:%d  Flag_set_alarm_rtc: %d  hh:mm:ss: %d:%d:%d  ctrl_2: %d  Flag_Protect: %d  Flag_Alarm: %d  Tamper_Counter: %d  counter: %d  last_counter: %d  Speed: %d  Width: %d",stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(hh),bcdToDec(mm),bcdToDec(ss),ctrl_2,Flag_Protect,Flag_alarm,Tamper_Counter,counter,last_counter,Speed,Width);
 800a348:	4b45      	ldr	r3, [pc, #276]	@ (800a460 <DebugLog+0x23c>)
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a34e:	4b44      	ldr	r3, [pc, #272]	@ (800a460 <DebugLog+0x23c>)
 800a350:	789b      	ldrb	r3, [r3, #2]
 800a352:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a354:	4b42      	ldr	r3, [pc, #264]	@ (800a460 <DebugLog+0x23c>)
 800a356:	78db      	ldrb	r3, [r3, #3]
 800a358:	627b      	str	r3, [r7, #36]	@ 0x24
 800a35a:	4b41      	ldr	r3, [pc, #260]	@ (800a460 <DebugLog+0x23c>)
 800a35c:	791b      	ldrb	r3, [r3, #4]
 800a35e:	623b      	str	r3, [r7, #32]
 800a360:	4b3f      	ldr	r3, [pc, #252]	@ (800a460 <DebugLog+0x23c>)
 800a362:	795b      	ldrb	r3, [r3, #5]
 800a364:	61fb      	str	r3, [r7, #28]
 800a366:	4b3e      	ldr	r3, [pc, #248]	@ (800a460 <DebugLog+0x23c>)
 800a368:	799b      	ldrb	r3, [r3, #6]
 800a36a:	61bb      	str	r3, [r7, #24]
 800a36c:	4b41      	ldr	r3, [pc, #260]	@ (800a474 <DebugLog+0x250>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	4b41      	ldr	r3, [pc, #260]	@ (800a478 <DebugLog+0x254>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	0018      	movs	r0, r3
 800a378:	f003 f8af 	bl	800d4da <bcdToDec>
 800a37c:	0003      	movs	r3, r0
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	4b3e      	ldr	r3, [pc, #248]	@ (800a47c <DebugLog+0x258>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	0018      	movs	r0, r3
 800a386:	f003 f8a8 	bl	800d4da <bcdToDec>
 800a38a:	0003      	movs	r3, r0
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	4b3c      	ldr	r3, [pc, #240]	@ (800a480 <DebugLog+0x25c>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	0018      	movs	r0, r3
 800a394:	f003 f8a1 	bl	800d4da <bcdToDec>
 800a398:	0003      	movs	r3, r0
 800a39a:	60bb      	str	r3, [r7, #8]
 800a39c:	4b39      	ldr	r3, [pc, #228]	@ (800a484 <DebugLog+0x260>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	607b      	str	r3, [r7, #4]
 800a3a2:	4b39      	ldr	r3, [pc, #228]	@ (800a488 <DebugLog+0x264>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	4b38      	ldr	r3, [pc, #224]	@ (800a48c <DebugLog+0x268>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	469b      	mov	fp, r3
 800a3ae:	4b38      	ldr	r3, [pc, #224]	@ (800a490 <DebugLog+0x26c>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	469a      	mov	sl, r3
 800a3b4:	4b37      	ldr	r3, [pc, #220]	@ (800a494 <DebugLog+0x270>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	4b37      	ldr	r3, [pc, #220]	@ (800a498 <DebugLog+0x274>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4690      	mov	r8, r2
 800a3c0:	4b36      	ldr	r3, [pc, #216]	@ (800a49c <DebugLog+0x278>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	1c18      	adds	r0, r3, #0
 800a3c6:	f7f8 ff59 	bl	800327c <__aeabi_f2d>
 800a3ca:	4b35      	ldr	r3, [pc, #212]	@ (800a4a0 <DebugLog+0x27c>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4e35      	ldr	r6, [pc, #212]	@ (800a4a4 <DebugLog+0x280>)
 800a3d0:	2396      	movs	r3, #150	@ 0x96
 800a3d2:	005d      	lsls	r5, r3, #1
 800a3d4:	2334      	movs	r3, #52	@ 0x34
 800a3d6:	18fc      	adds	r4, r7, r3
 800a3d8:	9212      	str	r2, [sp, #72]	@ 0x48
 800a3da:	9010      	str	r0, [sp, #64]	@ 0x40
 800a3dc:	9111      	str	r1, [sp, #68]	@ 0x44
 800a3de:	4642      	mov	r2, r8
 800a3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3e2:	464a      	mov	r2, r9
 800a3e4:	920d      	str	r2, [sp, #52]	@ 0x34
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	920c      	str	r2, [sp, #48]	@ 0x30
 800a3ea:	465a      	mov	r2, fp
 800a3ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	9208      	str	r2, [sp, #32]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	9207      	str	r2, [sp, #28]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	9206      	str	r2, [sp, #24]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	9205      	str	r2, [sp, #20]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	9204      	str	r2, [sp, #16]
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	9203      	str	r2, [sp, #12]
 800a40e:	6a3a      	ldr	r2, [r7, #32]
 800a410:	9202      	str	r2, [sp, #8]
 800a412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a414:	9201      	str	r2, [sp, #4]
 800a416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a418:	9200      	str	r2, [sp, #0]
 800a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41c:	0032      	movs	r2, r6
 800a41e:	0029      	movs	r1, r5
 800a420:	0020      	movs	r0, r4
 800a422:	f00e fe13 	bl	801904c <sniprintf>
	fresult = f_puts(buffer3, &fil);
 800a426:	4a10      	ldr	r2, [pc, #64]	@ (800a468 <DebugLog+0x244>)
 800a428:	2334      	movs	r3, #52	@ 0x34
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	0011      	movs	r1, r2
 800a42e:	0018      	movs	r0, r3
 800a430:	f00e fd82 	bl	8018f38 <f_puts>
 800a434:	0003      	movs	r3, r0
 800a436:	b2da      	uxtb	r2, r3
 800a438:	4b0c      	ldr	r3, [pc, #48]	@ (800a46c <DebugLog+0x248>)
 800a43a:	701a      	strb	r2, [r3, #0]
	f_close (&fil);
 800a43c:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <DebugLog+0x244>)
 800a43e:	0018      	movs	r0, r3
 800a440:	f00e fa9b 	bl	801897a <f_close>
	clear_buffer();
 800a444:	f7f9 fd64 	bl	8003f10 <clear_buffer>
	}
	#endif
}
 800a448:	46c0      	nop			@ (mov r8, r8)
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b05b      	add	sp, #364	@ 0x16c
 800a44e:	bcf0      	pop	{r4, r5, r6, r7}
 800a450:	46bb      	mov	fp, r7
 800a452:	46b2      	mov	sl, r6
 800a454:	46a9      	mov	r9, r5
 800a456:	46a0      	mov	r8, r4
 800a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a45a:	46c0      	nop			@ (mov r8, r8)
 800a45c:	20000da4 	.word	0x20000da4
 800a460:	20000e14 	.word	0x20000e14
 800a464:	08019c94 	.word	0x08019c94
 800a468:	200020c4 	.word	0x200020c4
 800a46c:	200030f4 	.word	0x200030f4
 800a470:	08019ca4 	.word	0x08019ca4
 800a474:	20000ec6 	.word	0x20000ec6
 800a478:	20000e20 	.word	0x20000e20
 800a47c:	20000e21 	.word	0x20000e21
 800a480:	20000e22 	.word	0x20000e22
 800a484:	20000e1d 	.word	0x20000e1d
 800a488:	20000ec5 	.word	0x20000ec5
 800a48c:	200002f8 	.word	0x200002f8
 800a490:	20000ec7 	.word	0x20000ec7
 800a494:	20000e70 	.word	0x20000e70
 800a498:	20000e78 	.word	0x20000e78
 800a49c:	20000e64 	.word	0x20000e64
 800a4a0:	20000e3c 	.word	0x20000e3c
 800a4a4:	08019cc0 	.word	0x08019cc0

0800a4a8 <EventDebugLog>:
void EventDebugLog(char *str)
{
 800a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4aa:	46de      	mov	lr, fp
 800a4ac:	4657      	mov	r7, sl
 800a4ae:	464e      	mov	r6, r9
 800a4b0:	4645      	mov	r5, r8
 800a4b2:	b5e0      	push	{r5, r6, r7, lr}
 800a4b4:	b0f1      	sub	sp, #452	@ 0x1c4
 800a4b6:	af14      	add	r7, sp, #80	@ 0x50
 800a4b8:	6378      	str	r0, [r7, #52]	@ 0x34
	#ifdef DEBUG
	stCurrentTime.year = bcdToDec(RTC_date.date.y) + 2000;
 800a4ba:	4b87      	ldr	r3, [pc, #540]	@ (800a6d8 <EventDebugLog+0x230>)
 800a4bc:	224d      	movs	r2, #77	@ 0x4d
 800a4be:	5c9b      	ldrb	r3, [r3, r2]
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f003 f80a 	bl	800d4da <bcdToDec>
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	22fa      	movs	r2, #250	@ 0xfa
 800a4ca:	00d2      	lsls	r2, r2, #3
 800a4cc:	4694      	mov	ip, r2
 800a4ce:	4463      	add	r3, ip
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	4b82      	ldr	r3, [pc, #520]	@ (800a6dc <EventDebugLog+0x234>)
 800a4d4:	801a      	strh	r2, [r3, #0]
	stCurrentTime.month = bcdToDec(RTC_date.date.m);
 800a4d6:	4b80      	ldr	r3, [pc, #512]	@ (800a6d8 <EventDebugLog+0x230>)
 800a4d8:	224e      	movs	r2, #78	@ 0x4e
 800a4da:	5c9b      	ldrb	r3, [r3, r2]
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f002 fffc 	bl	800d4da <bcdToDec>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	001a      	movs	r2, r3
 800a4e6:	4b7d      	ldr	r3, [pc, #500]	@ (800a6dc <EventDebugLog+0x234>)
 800a4e8:	709a      	strb	r2, [r3, #2]
	stCurrentTime.date = bcdToDec(RTC_date.date.d);
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a6d8 <EventDebugLog+0x230>)
 800a4ec:	224f      	movs	r2, #79	@ 0x4f
 800a4ee:	5c9b      	ldrb	r3, [r3, r2]
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f002 fff2 	bl	800d4da <bcdToDec>
 800a4f6:	0003      	movs	r3, r0
 800a4f8:	001a      	movs	r2, r3
 800a4fa:	4b78      	ldr	r3, [pc, #480]	@ (800a6dc <EventDebugLog+0x234>)
 800a4fc:	70da      	strb	r2, [r3, #3]
	stCurrentTime.hour = bcdToDec(RTC_date.date.hh);
 800a4fe:	4b76      	ldr	r3, [pc, #472]	@ (800a6d8 <EventDebugLog+0x230>)
 800a500:	2251      	movs	r2, #81	@ 0x51
 800a502:	5c9b      	ldrb	r3, [r3, r2]
 800a504:	0018      	movs	r0, r3
 800a506:	f002 ffe8 	bl	800d4da <bcdToDec>
 800a50a:	0003      	movs	r3, r0
 800a50c:	001a      	movs	r2, r3
 800a50e:	4b73      	ldr	r3, [pc, #460]	@ (800a6dc <EventDebugLog+0x234>)
 800a510:	711a      	strb	r2, [r3, #4]
	stCurrentTime.minute = bcdToDec(RTC_date.date.mm);
 800a512:	4b71      	ldr	r3, [pc, #452]	@ (800a6d8 <EventDebugLog+0x230>)
 800a514:	2252      	movs	r2, #82	@ 0x52
 800a516:	5c9b      	ldrb	r3, [r3, r2]
 800a518:	0018      	movs	r0, r3
 800a51a:	f002 ffde 	bl	800d4da <bcdToDec>
 800a51e:	0003      	movs	r3, r0
 800a520:	001a      	movs	r2, r3
 800a522:	4b6e      	ldr	r3, [pc, #440]	@ (800a6dc <EventDebugLog+0x234>)
 800a524:	715a      	strb	r2, [r3, #5]
	stCurrentTime.second = bcdToDec(RTC_date.date.ss);
 800a526:	4b6c      	ldr	r3, [pc, #432]	@ (800a6d8 <EventDebugLog+0x230>)
 800a528:	2253      	movs	r2, #83	@ 0x53
 800a52a:	5c9b      	ldrb	r3, [r3, r2]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f002 ffd4 	bl	800d4da <bcdToDec>
 800a532:	0003      	movs	r3, r0
 800a534:	001a      	movs	r2, r3
 800a536:	4b69      	ldr	r3, [pc, #420]	@ (800a6dc <EventDebugLog+0x234>)
 800a538:	719a      	strb	r2, [r3, #6]
//	if (stCurrentTime.second%3==0){
	fresult = f_open(&fil, "DebugLog.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800a53a:	4969      	ldr	r1, [pc, #420]	@ (800a6e0 <EventDebugLog+0x238>)
 800a53c:	4b69      	ldr	r3, [pc, #420]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a53e:	2203      	movs	r2, #3
 800a540:	0018      	movs	r0, r3
 800a542:	f00d fdf1 	bl	8018128 <f_open>
 800a546:	0003      	movs	r3, r0
 800a548:	001a      	movs	r2, r3
 800a54a:	4b67      	ldr	r3, [pc, #412]	@ (800a6e8 <EventDebugLog+0x240>)
 800a54c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_NO_FILE) {
 800a54e:	4b66      	ldr	r3, [pc, #408]	@ (800a6e8 <EventDebugLog+0x240>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b04      	cmp	r3, #4
 800a554:	d124      	bne.n	800a5a0 <EventDebugLog+0xf8>
	    // Create the file
	    fresult = f_open(&fil, "DebugLog.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800a556:	4962      	ldr	r1, [pc, #392]	@ (800a6e0 <EventDebugLog+0x238>)
 800a558:	4b62      	ldr	r3, [pc, #392]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a55a:	220a      	movs	r2, #10
 800a55c:	0018      	movs	r0, r3
 800a55e:	f00d fde3 	bl	8018128 <f_open>
 800a562:	0003      	movs	r3, r0
 800a564:	001a      	movs	r2, r3
 800a566:	4b60      	ldr	r3, [pc, #384]	@ (800a6e8 <EventDebugLog+0x240>)
 800a568:	701a      	strb	r2, [r3, #0]

	    // Check if the file was created successfully
	    if (fresult == FR_OK) {
 800a56a:	4b5f      	ldr	r3, [pc, #380]	@ (800a6e8 <EventDebugLog+0x240>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d116      	bne.n	800a5a0 <EventDebugLog+0xf8>
	        // Optionally write initial data to the file
	        const char *initialData = "Smart Taximeter Debug Log \n";
 800a572:	4b5e      	ldr	r3, [pc, #376]	@ (800a6ec <EventDebugLog+0x244>)
 800a574:	249e      	movs	r4, #158	@ 0x9e
 800a576:	0064      	lsls	r4, r4, #1
 800a578:	2530      	movs	r5, #48	@ 0x30
 800a57a:	1962      	adds	r2, r4, r5
 800a57c:	19d2      	adds	r2, r2, r7
 800a57e:	6013      	str	r3, [r2, #0]
	        UINT bytesWritten;
	        f_write(&fil, initialData, strlen(initialData), &bytesWritten);
 800a580:	1963      	adds	r3, r4, r5
 800a582:	19db      	adds	r3, r3, r7
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	0018      	movs	r0, r3
 800a588:	f7f5 fdbc 	bl	8000104 <strlen>
 800a58c:	0002      	movs	r2, r0
 800a58e:	230c      	movs	r3, #12
 800a590:	195b      	adds	r3, r3, r5
 800a592:	19db      	adds	r3, r3, r7
 800a594:	1961      	adds	r1, r4, r5
 800a596:	19c9      	adds	r1, r1, r7
 800a598:	6809      	ldr	r1, [r1, #0]
 800a59a:	4852      	ldr	r0, [pc, #328]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a59c:	f00d ffc9 	bl	8018532 <f_write>
	    }
	}

	fresult = f_lseek(&fil, f_size(&fil));
 800a5a0:	4b50      	ldr	r3, [pc, #320]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	4b4f      	ldr	r3, [pc, #316]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a5a6:	0011      	movs	r1, r2
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f00e fa1a 	bl	80189e2 <f_lseek>
 800a5ae:	0003      	movs	r3, r0
 800a5b0:	001a      	movs	r2, r3
 800a5b2:	4b4d      	ldr	r3, [pc, #308]	@ (800a6e8 <EventDebugLog+0x240>)
 800a5b4:	701a      	strb	r2, [r3, #0]
	char buffer3[300];
	snprintf(buffer3, sizeof(buffer3), "\nEvent: %s  Log Time(ymdhms):%d-%d-%d %d:%d:%d  Flag_set_alarm_rtc: %d  hh:mm:ss: %d:%d:%d  ctrl_2: %d  Flag_Protect: %d  Flag_Alarm: %d  Tamper_Counter: %d  counter: %d  last_counter: %d  Speed: %d  Width: %d",str,stCurrentTime.year ,stCurrentTime.month,stCurrentTime.date, stCurrentTime.hour, stCurrentTime.minute, stCurrentTime.second, Flag_set_alarm_rtc, bcdToDec(hh),bcdToDec(mm),bcdToDec(ss),ctrl_2,Flag_Protect,Flag_alarm,Tamper_Counter,counter,last_counter,Speed,Width);
 800a5b6:	4b49      	ldr	r3, [pc, #292]	@ (800a6dc <EventDebugLog+0x234>)
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5bc:	4b47      	ldr	r3, [pc, #284]	@ (800a6dc <EventDebugLog+0x234>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5c2:	4b46      	ldr	r3, [pc, #280]	@ (800a6dc <EventDebugLog+0x234>)
 800a5c4:	78db      	ldrb	r3, [r3, #3]
 800a5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5c8:	4b44      	ldr	r3, [pc, #272]	@ (800a6dc <EventDebugLog+0x234>)
 800a5ca:	791b      	ldrb	r3, [r3, #4]
 800a5cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5ce:	4b43      	ldr	r3, [pc, #268]	@ (800a6dc <EventDebugLog+0x234>)
 800a5d0:	795b      	ldrb	r3, [r3, #5]
 800a5d2:	623b      	str	r3, [r7, #32]
 800a5d4:	4b41      	ldr	r3, [pc, #260]	@ (800a6dc <EventDebugLog+0x234>)
 800a5d6:	799b      	ldrb	r3, [r3, #6]
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	4b45      	ldr	r3, [pc, #276]	@ (800a6f0 <EventDebugLog+0x248>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	61bb      	str	r3, [r7, #24]
 800a5e0:	4b44      	ldr	r3, [pc, #272]	@ (800a6f4 <EventDebugLog+0x24c>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f002 ff78 	bl	800d4da <bcdToDec>
 800a5ea:	0003      	movs	r3, r0
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	4b42      	ldr	r3, [pc, #264]	@ (800a6f8 <EventDebugLog+0x250>)
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f002 ff71 	bl	800d4da <bcdToDec>
 800a5f8:	0003      	movs	r3, r0
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a6fc <EventDebugLog+0x254>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	0018      	movs	r0, r3
 800a602:	f002 ff6a 	bl	800d4da <bcdToDec>
 800a606:	0003      	movs	r3, r0
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	4b3d      	ldr	r3, [pc, #244]	@ (800a700 <EventDebugLog+0x258>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	4b3c      	ldr	r3, [pc, #240]	@ (800a704 <EventDebugLog+0x25c>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	607b      	str	r3, [r7, #4]
 800a616:	4b3c      	ldr	r3, [pc, #240]	@ (800a708 <EventDebugLog+0x260>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	469b      	mov	fp, r3
 800a61c:	4b3b      	ldr	r3, [pc, #236]	@ (800a70c <EventDebugLog+0x264>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	469a      	mov	sl, r3
 800a622:	4b3b      	ldr	r3, [pc, #236]	@ (800a710 <EventDebugLog+0x268>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4691      	mov	r9, r2
 800a628:	4b3a      	ldr	r3, [pc, #232]	@ (800a714 <EventDebugLog+0x26c>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	4690      	mov	r8, r2
 800a62e:	4b3a      	ldr	r3, [pc, #232]	@ (800a718 <EventDebugLog+0x270>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	1c18      	adds	r0, r3, #0
 800a634:	f7f8 fe22 	bl	800327c <__aeabi_f2d>
 800a638:	4b38      	ldr	r3, [pc, #224]	@ (800a71c <EventDebugLog+0x274>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800a63e:	46a4      	mov	ip, r4
 800a640:	4e37      	ldr	r6, [pc, #220]	@ (800a720 <EventDebugLog+0x278>)
 800a642:	2396      	movs	r3, #150	@ 0x96
 800a644:	005d      	lsls	r5, r3, #1
 800a646:	2410      	movs	r4, #16
 800a648:	2330      	movs	r3, #48	@ 0x30
 800a64a:	18e4      	adds	r4, r4, r3
 800a64c:	19e4      	adds	r4, r4, r7
 800a64e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a650:	9010      	str	r0, [sp, #64]	@ 0x40
 800a652:	9111      	str	r1, [sp, #68]	@ 0x44
 800a654:	4642      	mov	r2, r8
 800a656:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a658:	464a      	mov	r2, r9
 800a65a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a65c:	4652      	mov	r2, sl
 800a65e:	920d      	str	r2, [sp, #52]	@ 0x34
 800a660:	465a      	mov	r2, fp
 800a662:	920c      	str	r2, [sp, #48]	@ 0x30
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	9208      	str	r2, [sp, #32]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	9207      	str	r2, [sp, #28]
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	9206      	str	r2, [sp, #24]
 800a67c:	69fa      	ldr	r2, [r7, #28]
 800a67e:	9205      	str	r2, [sp, #20]
 800a680:	6a3a      	ldr	r2, [r7, #32]
 800a682:	9204      	str	r2, [sp, #16]
 800a684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a686:	9203      	str	r2, [sp, #12]
 800a688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a68a:	9202      	str	r2, [sp, #8]
 800a68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a68e:	9201      	str	r2, [sp, #4]
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	4663      	mov	r3, ip
 800a696:	0032      	movs	r2, r6
 800a698:	0029      	movs	r1, r5
 800a69a:	0020      	movs	r0, r4
 800a69c:	f00e fcd6 	bl	801904c <sniprintf>
	fresult = f_puts(buffer3, &fil);
 800a6a0:	4a10      	ldr	r2, [pc, #64]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a6a2:	2410      	movs	r4, #16
 800a6a4:	2330      	movs	r3, #48	@ 0x30
 800a6a6:	18e3      	adds	r3, r4, r3
 800a6a8:	19db      	adds	r3, r3, r7
 800a6aa:	0011      	movs	r1, r2
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f00e fc43 	bl	8018f38 <f_puts>
 800a6b2:	0003      	movs	r3, r0
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e8 <EventDebugLog+0x240>)
 800a6b8:	701a      	strb	r2, [r3, #0]
	f_close (&fil);
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e4 <EventDebugLog+0x23c>)
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f00e f95c 	bl	801897a <f_close>
	clear_buffer();
 800a6c2:	f7f9 fc25 	bl	8003f10 <clear_buffer>
//	}
	#endif
}
 800a6c6:	46c0      	nop			@ (mov r8, r8)
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	b05d      	add	sp, #372	@ 0x174
 800a6cc:	bcf0      	pop	{r4, r5, r6, r7}
 800a6ce:	46bb      	mov	fp, r7
 800a6d0:	46b2      	mov	sl, r6
 800a6d2:	46a9      	mov	r9, r5
 800a6d4:	46a0      	mov	r8, r4
 800a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d8:	20000da4 	.word	0x20000da4
 800a6dc:	20000e14 	.word	0x20000e14
 800a6e0:	08019c94 	.word	0x08019c94
 800a6e4:	200020c4 	.word	0x200020c4
 800a6e8:	200030f4 	.word	0x200030f4
 800a6ec:	08019ca4 	.word	0x08019ca4
 800a6f0:	20000ec6 	.word	0x20000ec6
 800a6f4:	20000e20 	.word	0x20000e20
 800a6f8:	20000e21 	.word	0x20000e21
 800a6fc:	20000e22 	.word	0x20000e22
 800a700:	20000e1d 	.word	0x20000e1d
 800a704:	20000ec5 	.word	0x20000ec5
 800a708:	200002f8 	.word	0x200002f8
 800a70c:	20000ec7 	.word	0x20000ec7
 800a710:	20000e70 	.word	0x20000e70
 800a714:	20000e78 	.word	0x20000e78
 800a718:	20000e64 	.word	0x20000e64
 800a71c:	20000e3c 	.word	0x20000e3c
 800a720:	08019d88 	.word	0x08019d88

0800a724 <BCD2ASC>:

void BCD2ASC(uint8_t *asc, const uint8_t *bcd, uint32_t len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
	uint8_t c = 0;
 800a730:	2316      	movs	r3, #22
 800a732:	18fb      	adds	r3, r7, r3
 800a734:	2200      	movs	r2, #0
 800a736:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	static uint8_t bcd2ascii[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

	for (i = 0; i < len; i++)
 800a738:	2317      	movs	r3, #23
 800a73a:	18fb      	adds	r3, r7, r3
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	e024      	b.n	800a78c <BCD2ASC+0x68>
	{
		//first bcd
		c = *bcd >> 4;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	2016      	movs	r0, #22
 800a748:	183b      	adds	r3, r7, r0
 800a74a:	0912      	lsrs	r2, r2, #4
 800a74c:	701a      	strb	r2, [r3, #0]
		*asc++ = bcd2ascii[c];
 800a74e:	183b      	adds	r3, r7, r0
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	1c59      	adds	r1, r3, #1
 800a756:	60f9      	str	r1, [r7, #12]
 800a758:	4912      	ldr	r1, [pc, #72]	@ (800a7a4 <BCD2ASC+0x80>)
 800a75a:	5c8a      	ldrb	r2, [r1, r2]
 800a75c:	701a      	strb	r2, [r3, #0]

		//second bcd
		c = *bcd & 0x0F;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	781a      	ldrb	r2, [r3, #0]
 800a762:	183b      	adds	r3, r7, r0
 800a764:	210f      	movs	r1, #15
 800a766:	400a      	ands	r2, r1
 800a768:	701a      	strb	r2, [r3, #0]
		*asc++ = bcd2ascii[c];
 800a76a:	183b      	adds	r3, r7, r0
 800a76c:	781a      	ldrb	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	1c59      	adds	r1, r3, #1
 800a772:	60f9      	str	r1, [r7, #12]
 800a774:	490b      	ldr	r1, [pc, #44]	@ (800a7a4 <BCD2ASC+0x80>)
 800a776:	5c8a      	ldrb	r2, [r1, r2]
 800a778:	701a      	strb	r2, [r3, #0]
		bcd++;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < len; i++)
 800a780:	2117      	movs	r1, #23
 800a782:	187b      	adds	r3, r7, r1
 800a784:	781a      	ldrb	r2, [r3, #0]
 800a786:	187b      	adds	r3, r7, r1
 800a788:	3201      	adds	r2, #1
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	2317      	movs	r3, #23
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d8d4      	bhi.n	800a742 <BCD2ASC+0x1e>
	}
}
 800a798:	46c0      	nop			@ (mov r8, r8)
 800a79a:	46c0      	nop			@ (mov r8, r8)
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b006      	add	sp, #24
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	46c0      	nop			@ (mov r8, r8)
 800a7a4:	2000053c 	.word	0x2000053c

0800a7a8 <Dur_hms_cal>:
	temp = (((data/10) << 4) + (data%10));
	return temp;
}

void Dur_hms_cal()                                                      //the time show on main page during hired /stop
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
	sec++;
 800a7ac:	4b56      	ldr	r3, [pc, #344]	@ (800a908 <Dur_hms_cal+0x160>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	4b54      	ldr	r3, [pc, #336]	@ (800a908 <Dur_hms_cal+0x160>)
 800a7b6:	701a      	strb	r2, [r3, #0]
	if(sec == 60)
 800a7b8:	4b53      	ldr	r3, [pc, #332]	@ (800a908 <Dur_hms_cal+0x160>)
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	2b3c      	cmp	r3, #60	@ 0x3c
 800a7be:	d108      	bne.n	800a7d2 <Dur_hms_cal+0x2a>
	{
		min++;
 800a7c0:	4b52      	ldr	r3, [pc, #328]	@ (800a90c <Dur_hms_cal+0x164>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	4b50      	ldr	r3, [pc, #320]	@ (800a90c <Dur_hms_cal+0x164>)
 800a7ca:	701a      	strb	r2, [r3, #0]
		sec = 0;
 800a7cc:	4b4e      	ldr	r3, [pc, #312]	@ (800a908 <Dur_hms_cal+0x160>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	701a      	strb	r2, [r3, #0]
	}
	if(min == 60)
 800a7d2:	4b4e      	ldr	r3, [pc, #312]	@ (800a90c <Dur_hms_cal+0x164>)
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b3c      	cmp	r3, #60	@ 0x3c
 800a7d8:	d108      	bne.n	800a7ec <Dur_hms_cal+0x44>
	{
		hou++;
 800a7da:	4b4d      	ldr	r3, [pc, #308]	@ (800a910 <Dur_hms_cal+0x168>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a910 <Dur_hms_cal+0x168>)
 800a7e4:	701a      	strb	r2, [r3, #0]
		min = 0;
 800a7e6:	4b49      	ldr	r3, [pc, #292]	@ (800a90c <Dur_hms_cal+0x164>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	701a      	strb	r2, [r3, #0]
//	if(hou == 24)
//	{
//		hou = 0;
//	}
	//display limit - duration 99:59:59
	if(hou >= 99)
 800a7ec:	4b48      	ldr	r3, [pc, #288]	@ (800a910 <Dur_hms_cal+0x168>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b62      	cmp	r3, #98	@ 0x62
 800a7f2:	d908      	bls.n	800a806 <Dur_hms_cal+0x5e>
	{
		hou = 99;
 800a7f4:	4b46      	ldr	r3, [pc, #280]	@ (800a910 <Dur_hms_cal+0x168>)
 800a7f6:	2263      	movs	r2, #99	@ 0x63
 800a7f8:	701a      	strb	r2, [r3, #0]
		min = 59;
 800a7fa:	4b44      	ldr	r3, [pc, #272]	@ (800a90c <Dur_hms_cal+0x164>)
 800a7fc:	223b      	movs	r2, #59	@ 0x3b
 800a7fe:	701a      	strb	r2, [r3, #0]
		sec = 59;
 800a800:	4b41      	ldr	r3, [pc, #260]	@ (800a908 <Dur_hms_cal+0x160>)
 800a802:	223b      	movs	r2, #59	@ 0x3b
 800a804:	701a      	strb	r2, [r3, #0]
	}

	sec_1 = (sec / 1 % 10) + 0x30;
 800a806:	4b40      	ldr	r3, [pc, #256]	@ (800a908 <Dur_hms_cal+0x160>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	210a      	movs	r1, #10
 800a80c:	0018      	movs	r0, r3
 800a80e:	f7f5 fd11 	bl	8000234 <__aeabi_uidivmod>
 800a812:	000b      	movs	r3, r1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	3330      	adds	r3, #48	@ 0x30
 800a818:	b29a      	uxth	r2, r3
 800a81a:	4b3e      	ldr	r3, [pc, #248]	@ (800a914 <Dur_hms_cal+0x16c>)
 800a81c:	801a      	strh	r2, [r3, #0]
	sec_10 = (sec / 10 % 10) + 0x30;
 800a81e:	4b3a      	ldr	r3, [pc, #232]	@ (800a908 <Dur_hms_cal+0x160>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	210a      	movs	r1, #10
 800a824:	0018      	movs	r0, r3
 800a826:	f7f5 fc7f 	bl	8000128 <__udivsi3>
 800a82a:	0003      	movs	r3, r0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	210a      	movs	r1, #10
 800a830:	0018      	movs	r0, r3
 800a832:	f7f5 fcff 	bl	8000234 <__aeabi_uidivmod>
 800a836:	000b      	movs	r3, r1
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	3330      	adds	r3, #48	@ 0x30
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	4b36      	ldr	r3, [pc, #216]	@ (800a918 <Dur_hms_cal+0x170>)
 800a840:	801a      	strh	r2, [r3, #0]
	min_1 = (min / 1 % 10) + 0x30;
 800a842:	4b32      	ldr	r3, [pc, #200]	@ (800a90c <Dur_hms_cal+0x164>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	210a      	movs	r1, #10
 800a848:	0018      	movs	r0, r3
 800a84a:	f7f5 fcf3 	bl	8000234 <__aeabi_uidivmod>
 800a84e:	000b      	movs	r3, r1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	3330      	adds	r3, #48	@ 0x30
 800a854:	b29a      	uxth	r2, r3
 800a856:	4b31      	ldr	r3, [pc, #196]	@ (800a91c <Dur_hms_cal+0x174>)
 800a858:	801a      	strh	r2, [r3, #0]
	min_10 = (min / 10 % 10) + 0x30;
 800a85a:	4b2c      	ldr	r3, [pc, #176]	@ (800a90c <Dur_hms_cal+0x164>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	210a      	movs	r1, #10
 800a860:	0018      	movs	r0, r3
 800a862:	f7f5 fc61 	bl	8000128 <__udivsi3>
 800a866:	0003      	movs	r3, r0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	210a      	movs	r1, #10
 800a86c:	0018      	movs	r0, r3
 800a86e:	f7f5 fce1 	bl	8000234 <__aeabi_uidivmod>
 800a872:	000b      	movs	r3, r1
 800a874:	b2db      	uxtb	r3, r3
 800a876:	3330      	adds	r3, #48	@ 0x30
 800a878:	b29a      	uxth	r2, r3
 800a87a:	4b29      	ldr	r3, [pc, #164]	@ (800a920 <Dur_hms_cal+0x178>)
 800a87c:	801a      	strh	r2, [r3, #0]
	hou_1 = (hou / 1 % 10) + 0x30;
 800a87e:	4b24      	ldr	r3, [pc, #144]	@ (800a910 <Dur_hms_cal+0x168>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	210a      	movs	r1, #10
 800a884:	0018      	movs	r0, r3
 800a886:	f7f5 fcd5 	bl	8000234 <__aeabi_uidivmod>
 800a88a:	000b      	movs	r3, r1
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	3330      	adds	r3, #48	@ 0x30
 800a890:	b29a      	uxth	r2, r3
 800a892:	4b24      	ldr	r3, [pc, #144]	@ (800a924 <Dur_hms_cal+0x17c>)
 800a894:	801a      	strh	r2, [r3, #0]
	hou_10 = (hou / 10 % 10) + 0x30;
 800a896:	4b1e      	ldr	r3, [pc, #120]	@ (800a910 <Dur_hms_cal+0x168>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	210a      	movs	r1, #10
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7f5 fc43 	bl	8000128 <__udivsi3>
 800a8a2:	0003      	movs	r3, r0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	210a      	movs	r1, #10
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f7f5 fcc3 	bl	8000234 <__aeabi_uidivmod>
 800a8ae:	000b      	movs	r3, r1
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	3330      	adds	r3, #48	@ 0x30
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <Dur_hms_cal+0x180>)
 800a8b8:	801a      	strh	r2, [r3, #0]

	Dur_HMS[13] = sec_1;
 800a8ba:	4b16      	ldr	r3, [pc, #88]	@ (800a914 <Dur_hms_cal+0x16c>)
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8c2:	735a      	strb	r2, [r3, #13]
	Dur_HMS[12] = sec_10;
 800a8c4:	4b14      	ldr	r3, [pc, #80]	@ (800a918 <Dur_hms_cal+0x170>)
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b18      	ldr	r3, [pc, #96]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8cc:	731a      	strb	r2, [r3, #12]
	Dur_HMS[10] = min_1;
 800a8ce:	4b13      	ldr	r3, [pc, #76]	@ (800a91c <Dur_hms_cal+0x174>)
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	4b15      	ldr	r3, [pc, #84]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8d6:	729a      	strb	r2, [r3, #10]
	Dur_HMS[9] = min_10;
 800a8d8:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <Dur_hms_cal+0x178>)
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8e0:	725a      	strb	r2, [r3, #9]
	Dur_HMS[7] = hou_1;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <Dur_hms_cal+0x17c>)
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	4b10      	ldr	r3, [pc, #64]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8ea:	71da      	strb	r2, [r3, #7]
	Dur_HMS[6] = hou_10;
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a928 <Dur_hms_cal+0x180>)
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8f4:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x20);
 800a8f6:	490d      	ldr	r1, [pc, #52]	@ (800a92c <Dur_hms_cal+0x184>)
 800a8f8:	480d      	ldr	r0, [pc, #52]	@ (800a930 <Dur_hms_cal+0x188>)
 800a8fa:	2320      	movs	r3, #32
 800a8fc:	220e      	movs	r2, #14
 800a8fe:	f009 f897 	bl	8013a30 <HAL_UART_Transmit>
}
 800a902:	46c0      	nop			@ (mov r8, r8)
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000b6c 	.word	0x20000b6c
 800a90c:	20000b6d 	.word	0x20000b6d
 800a910:	20000b6e 	.word	0x20000b6e
 800a914:	20000b70 	.word	0x20000b70
 800a918:	20000b72 	.word	0x20000b72
 800a91c:	20000b74 	.word	0x20000b74
 800a920:	20000b76 	.word	0x20000b76
 800a924:	20000b78 	.word	0x20000b78
 800a928:	20000b7a 	.word	0x20000b7a
 800a92c:	20000054 	.word	0x20000054
 800a930:	20000700 	.word	0x20000700

0800a934 <Read_Pulse>:

void Read_Pulse(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
	//change Width_min from 6000 to 2000
	if ((Width != 0) && (Width >= 10000 || Width <= 2000))
 800a938:	4b2e      	ldr	r3, [pc, #184]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00d      	beq.n	800a95c <Read_Pulse+0x28>
 800a940:	4b2c      	ldr	r3, [pc, #176]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a2c      	ldr	r2, [pc, #176]	@ (800a9f8 <Read_Pulse+0xc4>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d805      	bhi.n	800a956 <Read_Pulse+0x22>
 800a94a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	23fa      	movs	r3, #250	@ 0xfa
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	429a      	cmp	r2, r3
 800a954:	d802      	bhi.n	800a95c <Read_Pulse+0x28>
	{
		last_pulse = 1;
 800a956:	4b29      	ldr	r3, [pc, #164]	@ (800a9fc <Read_Pulse+0xc8>)
 800a958:	2201      	movs	r2, #1
 800a95a:	701a      	strb	r2, [r3, #0]
	}

	if ((Width != 0) && (Width >= 10000 || Width <= 2000) && (last_pulse == 1)) //鎖錶判定1, 寬度不在範圍
 800a95c:	4b25      	ldr	r3, [pc, #148]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d015      	beq.n	800a990 <Read_Pulse+0x5c>
 800a964:	4b23      	ldr	r3, [pc, #140]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a23      	ldr	r2, [pc, #140]	@ (800a9f8 <Read_Pulse+0xc4>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d805      	bhi.n	800a97a <Read_Pulse+0x46>
 800a96e:	4b21      	ldr	r3, [pc, #132]	@ (800a9f4 <Read_Pulse+0xc0>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	23fa      	movs	r3, #250	@ 0xfa
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	429a      	cmp	r2, r3
 800a978:	d80a      	bhi.n	800a990 <Read_Pulse+0x5c>
 800a97a:	4b20      	ldr	r3, [pc, #128]	@ (800a9fc <Read_Pulse+0xc8>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d106      	bne.n	800a990 <Read_Pulse+0x5c>
	{
		Tamper_Counter++;
 800a982:	4b1f      	ldr	r3, [pc, #124]	@ (800aa00 <Read_Pulse+0xcc>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b1d      	ldr	r3, [pc, #116]	@ (800aa00 <Read_Pulse+0xcc>)
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	e02e      	b.n	800a9ee <Read_Pulse+0xba>
	}
	else if (Speed >= Speed_max) //150
 800a990:	4b1c      	ldr	r3, [pc, #112]	@ (800aa04 <Read_Pulse+0xd0>)
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	0018      	movs	r0, r3
 800a996:	f7f6 fd49 	bl	800142c <__aeabi_i2f>
 800a99a:	1c02      	adds	r2, r0, #0
 800a99c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa08 <Read_Pulse+0xd4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	1c19      	adds	r1, r3, #0
 800a9a2:	1c10      	adds	r0, r2, #0
 800a9a4:	f7f5 fd90 	bl	80004c8 <__aeabi_fcmple>
 800a9a8:	1e03      	subs	r3, r0, #0
 800a9aa:	d006      	beq.n	800a9ba <Read_Pulse+0x86>
	{
		Tamper_Counter++;
 800a9ac:	4b14      	ldr	r3, [pc, #80]	@ (800aa00 <Read_Pulse+0xcc>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	4b12      	ldr	r3, [pc, #72]	@ (800aa00 <Read_Pulse+0xcc>)
 800a9b6:	701a      	strb	r2, [r3, #0]
	else
	{
		last_pulse = 0;
		Tamper_Counter = 0;
	}
}
 800a9b8:	e019      	b.n	800a9ee <Read_Pulse+0xba>
	else if (flag_tester && (Speed >= 120))    //鎖錶判定2, 超速
 800a9ba:	4b14      	ldr	r3, [pc, #80]	@ (800aa0c <Read_Pulse+0xd8>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00e      	beq.n	800a9e0 <Read_Pulse+0xac>
 800a9c2:	4b11      	ldr	r3, [pc, #68]	@ (800aa08 <Read_Pulse+0xd4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4912      	ldr	r1, [pc, #72]	@ (800aa10 <Read_Pulse+0xdc>)
 800a9c8:	1c18      	adds	r0, r3, #0
 800a9ca:	f7f5 fd91 	bl	80004f0 <__aeabi_fcmpge>
 800a9ce:	1e03      	subs	r3, r0, #0
 800a9d0:	d006      	beq.n	800a9e0 <Read_Pulse+0xac>
		Tamper_Counter++;
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800aa00 <Read_Pulse+0xcc>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b09      	ldr	r3, [pc, #36]	@ (800aa00 <Read_Pulse+0xcc>)
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	e006      	b.n	800a9ee <Read_Pulse+0xba>
		last_pulse = 0;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	@ (800a9fc <Read_Pulse+0xc8>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
		Tamper_Counter = 0;
 800a9e6:	4b06      	ldr	r3, [pc, #24]	@ (800aa00 <Read_Pulse+0xcc>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
}
 800a9ec:	e7ff      	b.n	800a9ee <Read_Pulse+0xba>
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20000e3c 	.word	0x20000e3c
 800a9f8:	0000270f 	.word	0x0000270f
 800a9fc:	20000ec8 	.word	0x20000ec8
 800aa00:	20000ec7 	.word	0x20000ec7
 800aa04:	200002f6 	.word	0x200002f6
 800aa08:	20000e64 	.word	0x20000e64
 800aa0c:	2000359b 	.word	0x2000359b
 800aa10:	42f00000 	.word	0x42f00000

0800aa14 <Read_Distance>:

void Read_Distance(void)
{
 800aa14:	b5b0      	push	{r4, r5, r7, lr}
 800aa16:	af00      	add	r7, sp, #0
	Distance = (float) (counter * 1.0 / ck);	 //  大D = 1m/1000= 0.001km
 800aa18:	4b1f      	ldr	r3, [pc, #124]	@ (800aa98 <Read_Distance+0x84>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f7f8 fc09 	bl	8003234 <__aeabi_ui2d>
 800aa22:	0004      	movs	r4, r0
 800aa24:	000d      	movs	r5, r1
 800aa26:	4b1d      	ldr	r3, [pc, #116]	@ (800aa9c <Read_Distance+0x88>)
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f7f8 fbd4 	bl	80031d8 <__aeabi_i2d>
 800aa30:	0002      	movs	r2, r0
 800aa32:	000b      	movs	r3, r1
 800aa34:	0020      	movs	r0, r4
 800aa36:	0029      	movs	r1, r5
 800aa38:	f7f7 f8ea 	bl	8001c10 <__aeabi_ddiv>
 800aa3c:	0002      	movs	r2, r0
 800aa3e:	000b      	movs	r3, r1
 800aa40:	0010      	movs	r0, r2
 800aa42:	0019      	movs	r1, r3
 800aa44:	f7f8 fc62 	bl	800330c <__aeabi_d2f>
 800aa48:	1c02      	adds	r2, r0, #0
 800aa4a:	4b15      	ldr	r3, [pc, #84]	@ (800aaa0 <Read_Distance+0x8c>)
 800aa4c:	601a      	str	r2, [r3, #0]
	distance = (float) (counter * 1000.0 / ck);  //  小d =1m
 800aa4e:	4b12      	ldr	r3, [pc, #72]	@ (800aa98 <Read_Distance+0x84>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7f8 fbee 	bl	8003234 <__aeabi_ui2d>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4b12      	ldr	r3, [pc, #72]	@ (800aaa4 <Read_Distance+0x90>)
 800aa5c:	f7f7 fd1c 	bl	8002498 <__aeabi_dmul>
 800aa60:	0002      	movs	r2, r0
 800aa62:	000b      	movs	r3, r1
 800aa64:	0014      	movs	r4, r2
 800aa66:	001d      	movs	r5, r3
 800aa68:	4b0c      	ldr	r3, [pc, #48]	@ (800aa9c <Read_Distance+0x88>)
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f7f8 fbb3 	bl	80031d8 <__aeabi_i2d>
 800aa72:	0002      	movs	r2, r0
 800aa74:	000b      	movs	r3, r1
 800aa76:	0020      	movs	r0, r4
 800aa78:	0029      	movs	r1, r5
 800aa7a:	f7f7 f8c9 	bl	8001c10 <__aeabi_ddiv>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	000b      	movs	r3, r1
 800aa82:	0010      	movs	r0, r2
 800aa84:	0019      	movs	r1, r3
 800aa86:	f7f8 fc41 	bl	800330c <__aeabi_d2f>
 800aa8a:	1c02      	adds	r2, r0, #0
 800aa8c:	4b06      	ldr	r3, [pc, #24]	@ (800aaa8 <Read_Distance+0x94>)
 800aa8e:	601a      	str	r2, [r3, #0]
}
 800aa90:	46c0      	nop			@ (mov r8, r8)
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bdb0      	pop	{r4, r5, r7, pc}
 800aa96:	46c0      	nop			@ (mov r8, r8)
 800aa98:	20000e70 	.word	0x20000e70
 800aa9c:	200002f2 	.word	0x200002f2
 800aaa0:	20000e68 	.word	0x20000e68
 800aaa4:	408f4000 	.word	0x408f4000
 800aaa8:	20000e6c 	.word	0x20000e6c

0800aaac <Read_Speed>:

void Read_Speed(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
	if(Difference != 0)
 800aab0:	4b13      	ldr	r3, [pc, #76]	@ (800ab00 <Read_Speed+0x54>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01c      	beq.n	800aaf2 <Read_Speed+0x46>
	{
//		Speed_x = ((float) (1000000 / ck) / Difference) * 3.6;
//		Difference = 0;
		Speed = ((float) (counter - last_counter) * 3.6);
 800aab8:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <Read_Speed+0x58>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	4b12      	ldr	r3, [pc, #72]	@ (800ab08 <Read_Speed+0x5c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	0018      	movs	r0, r3
 800aac4:	f7f6 fcfe 	bl	80014c4 <__aeabi_ui2f>
 800aac8:	1c03      	adds	r3, r0, #0
 800aaca:	1c18      	adds	r0, r3, #0
 800aacc:	f7f8 fbd6 	bl	800327c <__aeabi_f2d>
 800aad0:	4a0e      	ldr	r2, [pc, #56]	@ (800ab0c <Read_Speed+0x60>)
 800aad2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab10 <Read_Speed+0x64>)
 800aad4:	f7f7 fce0 	bl	8002498 <__aeabi_dmul>
 800aad8:	0002      	movs	r2, r0
 800aada:	000b      	movs	r3, r1
 800aadc:	0010      	movs	r0, r2
 800aade:	0019      	movs	r1, r3
 800aae0:	f7f8 fc14 	bl	800330c <__aeabi_d2f>
 800aae4:	1c02      	adds	r2, r0, #0
 800aae6:	4b0b      	ldr	r3, [pc, #44]	@ (800ab14 <Read_Speed+0x68>)
 800aae8:	601a      	str	r2, [r3, #0]
		Difference = 0;
 800aaea:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <Read_Speed+0x54>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
	else
	{
		Speed = 0;
//		Speed_x = 0;
	}
}
 800aaf0:	e002      	b.n	800aaf8 <Read_Speed+0x4c>
		Speed = 0;
 800aaf2:	4b08      	ldr	r3, [pc, #32]	@ (800ab14 <Read_Speed+0x68>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
}
 800aaf8:	46c0      	nop			@ (mov r8, r8)
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	46c0      	nop			@ (mov r8, r8)
 800ab00:	20000e38 	.word	0x20000e38
 800ab04:	20000e70 	.word	0x20000e70
 800ab08:	20000e78 	.word	0x20000e78
 800ab0c:	cccccccd 	.word	0xcccccccd
 800ab10:	400ccccc 	.word	0x400ccccc
 800ab14:	20000e64 	.word	0x20000e64

0800ab18 <Fare_Calculation>:

void Fare_Calculation(void)  // fare calculating function
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
	//anti-tampering check
	Read_Pulse();             // check the pulse is tamper or not (within a width)
 800ab1e:	f7ff ff09 	bl	800a934 <Read_Pulse>
	Read_Distance();          // Distance is in km , distance is in 0.1m
 800ab22:	f7ff ff77 	bl	800aa14 <Read_Distance>
	Read_Speed();
 800ab26:	f7ff ffc1 	bl	800aaac <Read_Speed>

	if (Tamper_Counter >= 5)                         //LOCK
 800ab2a:	4bcd      	ldr	r3, [pc, #820]	@ (800ae60 <Fare_Calculation+0x348>)
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d800      	bhi.n	800ab34 <Fare_Calculation+0x1c>
 800ab32:	e0d7      	b.n	800ace4 <Fare_Calculation+0x1cc>
	{
		//record locked data to SD card
		//LOCKED
		SD_buffer[34] = 0x4C;
 800ab34:	4bcb      	ldr	r3, [pc, #812]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab36:	2222      	movs	r2, #34	@ 0x22
 800ab38:	214c      	movs	r1, #76	@ 0x4c
 800ab3a:	5499      	strb	r1, [r3, r2]
		SD_buffer[35] = 0x4F;
 800ab3c:	4bc9      	ldr	r3, [pc, #804]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab3e:	2223      	movs	r2, #35	@ 0x23
 800ab40:	214f      	movs	r1, #79	@ 0x4f
 800ab42:	5499      	strb	r1, [r3, r2]
		SD_buffer[36] = 0x43;
 800ab44:	4bc7      	ldr	r3, [pc, #796]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab46:	2224      	movs	r2, #36	@ 0x24
 800ab48:	2143      	movs	r1, #67	@ 0x43
 800ab4a:	5499      	strb	r1, [r3, r2]
		SD_buffer[37] = 0x4B;
 800ab4c:	4bc5      	ldr	r3, [pc, #788]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab4e:	2225      	movs	r2, #37	@ 0x25
 800ab50:	214b      	movs	r1, #75	@ 0x4b
 800ab52:	5499      	strb	r1, [r3, r2]
		SD_buffer[38] = 0x45;
 800ab54:	4bc3      	ldr	r3, [pc, #780]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab56:	2226      	movs	r2, #38	@ 0x26
 800ab58:	2145      	movs	r1, #69	@ 0x45
 800ab5a:	5499      	strb	r1, [r3, r2]
		SD_buffer[39] = 0x44;
 800ab5c:	4bc1      	ldr	r3, [pc, #772]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab5e:	2227      	movs	r2, #39	@ 0x27
 800ab60:	2144      	movs	r1, #68	@ 0x44
 800ab62:	5499      	strb	r1, [r3, r2]
		SD_buffer[40] = 0x20;
 800ab64:	4bbf      	ldr	r3, [pc, #764]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ab66:	2228      	movs	r2, #40	@ 0x28
 800ab68:	2120      	movs	r1, #32
 800ab6a:	5499      	strb	r1, [r3, r2]
		//speed & width
		speed_d = (Speed * 100) / 10;
 800ab6c:	4bbe      	ldr	r3, [pc, #760]	@ (800ae68 <Fare_Calculation+0x350>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	49be      	ldr	r1, [pc, #760]	@ (800ae6c <Fare_Calculation+0x354>)
 800ab72:	1c18      	adds	r0, r3, #0
 800ab74:	f7f6 f958 	bl	8000e28 <__aeabi_fmul>
 800ab78:	1c03      	adds	r3, r0, #0
 800ab7a:	49bd      	ldr	r1, [pc, #756]	@ (800ae70 <Fare_Calculation+0x358>)
 800ab7c:	1c18      	adds	r0, r3, #0
 800ab7e:	f7f5 ff6d 	bl	8000a5c <__aeabi_fdiv>
 800ab82:	1c03      	adds	r3, r0, #0
 800ab84:	1c18      	adds	r0, r3, #0
 800ab86:	f7f5 fcdd 	bl	8000544 <__aeabi_f2uiz>
 800ab8a:	0002      	movs	r2, r0
 800ab8c:	4bb9      	ldr	r3, [pc, #740]	@ (800ae74 <Fare_Calculation+0x35c>)
 800ab8e:	601a      	str	r2, [r3, #0]
		Dec2ASC(speed_d, speed_a);
 800ab90:	4bb8      	ldr	r3, [pc, #736]	@ (800ae74 <Fare_Calculation+0x35c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4ab8      	ldr	r2, [pc, #736]	@ (800ae78 <Fare_Calculation+0x360>)
 800ab96:	0011      	movs	r1, r2
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f000 fc2b 	bl	800b3f4 <Dec2ASC>
		if (speed_a[4] == 0)
 800ab9e:	4bb6      	ldr	r3, [pc, #728]	@ (800ae78 <Fare_Calculation+0x360>)
 800aba0:	791b      	ldrb	r3, [r3, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <Fare_Calculation+0x98>
			SD_buffer[41] = 0x20;
 800aba6:	4baf      	ldr	r3, [pc, #700]	@ (800ae64 <Fare_Calculation+0x34c>)
 800aba8:	2229      	movs	r2, #41	@ 0x29
 800abaa:	2120      	movs	r1, #32
 800abac:	5499      	strb	r1, [r3, r2]
 800abae:	e004      	b.n	800abba <Fare_Calculation+0xa2>
		else
			SD_buffer[41] = speed_a[4];
 800abb0:	4bb1      	ldr	r3, [pc, #708]	@ (800ae78 <Fare_Calculation+0x360>)
 800abb2:	7919      	ldrb	r1, [r3, #4]
 800abb4:	4bab      	ldr	r3, [pc, #684]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abb6:	2229      	movs	r2, #41	@ 0x29
 800abb8:	5499      	strb	r1, [r3, r2]
		if (speed_a[5] == 0)
 800abba:	4baf      	ldr	r3, [pc, #700]	@ (800ae78 <Fare_Calculation+0x360>)
 800abbc:	795b      	ldrb	r3, [r3, #5]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d104      	bne.n	800abcc <Fare_Calculation+0xb4>
			SD_buffer[42] = 0x20;
 800abc2:	4ba8      	ldr	r3, [pc, #672]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abc4:	222a      	movs	r2, #42	@ 0x2a
 800abc6:	2120      	movs	r1, #32
 800abc8:	5499      	strb	r1, [r3, r2]
 800abca:	e004      	b.n	800abd6 <Fare_Calculation+0xbe>
		else
			SD_buffer[42] = speed_a[5];
 800abcc:	4baa      	ldr	r3, [pc, #680]	@ (800ae78 <Fare_Calculation+0x360>)
 800abce:	7959      	ldrb	r1, [r3, #5]
 800abd0:	4ba4      	ldr	r3, [pc, #656]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abd2:	222a      	movs	r2, #42	@ 0x2a
 800abd4:	5499      	strb	r1, [r3, r2]
		if (speed_a[6] == 0)
 800abd6:	4ba8      	ldr	r3, [pc, #672]	@ (800ae78 <Fare_Calculation+0x360>)
 800abd8:	799b      	ldrb	r3, [r3, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <Fare_Calculation+0xd0>
			SD_buffer[43] = 0x30;
 800abde:	4ba1      	ldr	r3, [pc, #644]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abe0:	222b      	movs	r2, #43	@ 0x2b
 800abe2:	2130      	movs	r1, #48	@ 0x30
 800abe4:	5499      	strb	r1, [r3, r2]
 800abe6:	e004      	b.n	800abf2 <Fare_Calculation+0xda>
		else
			SD_buffer[43] = speed_a[6];
 800abe8:	4ba3      	ldr	r3, [pc, #652]	@ (800ae78 <Fare_Calculation+0x360>)
 800abea:	7999      	ldrb	r1, [r3, #6]
 800abec:	4b9d      	ldr	r3, [pc, #628]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abee:	222b      	movs	r2, #43	@ 0x2b
 800abf0:	5499      	strb	r1, [r3, r2]
		SD_buffer[44] = 0x2E;
 800abf2:	4b9c      	ldr	r3, [pc, #624]	@ (800ae64 <Fare_Calculation+0x34c>)
 800abf4:	222c      	movs	r2, #44	@ 0x2c
 800abf6:	212e      	movs	r1, #46	@ 0x2e
 800abf8:	5499      	strb	r1, [r3, r2]
		SD_buffer[45] = speed_a[7];
 800abfa:	4b9f      	ldr	r3, [pc, #636]	@ (800ae78 <Fare_Calculation+0x360>)
 800abfc:	79d9      	ldrb	r1, [r3, #7]
 800abfe:	4b99      	ldr	r3, [pc, #612]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac00:	222d      	movs	r2, #45	@ 0x2d
 800ac02:	5499      	strb	r1, [r3, r2]
		SD_buffer[46] = 0x20;
 800ac04:	4b97      	ldr	r3, [pc, #604]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac06:	222e      	movs	r2, #46	@ 0x2e
 800ac08:	2120      	movs	r1, #32
 800ac0a:	5499      	strb	r1, [r3, r2]

		Dec2ASC(Width, width_a);
 800ac0c:	4b9b      	ldr	r3, [pc, #620]	@ (800ae7c <Fare_Calculation+0x364>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a9b      	ldr	r2, [pc, #620]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac12:	0011      	movs	r1, r2
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 fbed 	bl	800b3f4 <Dec2ASC>
		if (width_a[3] == 0)
 800ac1a:	4b99      	ldr	r3, [pc, #612]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac1c:	78db      	ldrb	r3, [r3, #3]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <Fare_Calculation+0x114>
			SD_buffer[47] = 0x20;
 800ac22:	4b90      	ldr	r3, [pc, #576]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac24:	222f      	movs	r2, #47	@ 0x2f
 800ac26:	2120      	movs	r1, #32
 800ac28:	5499      	strb	r1, [r3, r2]
 800ac2a:	e004      	b.n	800ac36 <Fare_Calculation+0x11e>
		else
			SD_buffer[47] = width_a[3];
 800ac2c:	4b94      	ldr	r3, [pc, #592]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac2e:	78d9      	ldrb	r1, [r3, #3]
 800ac30:	4b8c      	ldr	r3, [pc, #560]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac32:	222f      	movs	r2, #47	@ 0x2f
 800ac34:	5499      	strb	r1, [r3, r2]
		SD_buffer[48] = width_a[4];
 800ac36:	4b92      	ldr	r3, [pc, #584]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac38:	7919      	ldrb	r1, [r3, #4]
 800ac3a:	4b8a      	ldr	r3, [pc, #552]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac3c:	2230      	movs	r2, #48	@ 0x30
 800ac3e:	5499      	strb	r1, [r3, r2]
		SD_buffer[49] = width_a[5];
 800ac40:	4b8f      	ldr	r3, [pc, #572]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac42:	7959      	ldrb	r1, [r3, #5]
 800ac44:	4b87      	ldr	r3, [pc, #540]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac46:	2231      	movs	r2, #49	@ 0x31
 800ac48:	5499      	strb	r1, [r3, r2]
		SD_buffer[50] = width_a[6];
 800ac4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac4c:	7999      	ldrb	r1, [r3, #6]
 800ac4e:	4b85      	ldr	r3, [pc, #532]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac50:	2232      	movs	r2, #50	@ 0x32
 800ac52:	5499      	strb	r1, [r3, r2]
		SD_buffer[51] = width_a[7];
 800ac54:	4b8a      	ldr	r3, [pc, #552]	@ (800ae80 <Fare_Calculation+0x368>)
 800ac56:	79d9      	ldrb	r1, [r3, #7]
 800ac58:	4b82      	ldr	r3, [pc, #520]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac5a:	2233      	movs	r2, #51	@ 0x33
 800ac5c:	5499      	strb	r1, [r3, r2]
		SD_buffer[52] = 0x20;
 800ac5e:	4b81      	ldr	r3, [pc, #516]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac60:	2234      	movs	r2, #52	@ 0x34
 800ac62:	2120      	movs	r1, #32
 800ac64:	5499      	strb	r1, [r3, r2]

		SD_buffer[53] = 0x0A;
 800ac66:	4b7f      	ldr	r3, [pc, #508]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac68:	2235      	movs	r2, #53	@ 0x35
 800ac6a:	210a      	movs	r1, #10
 800ac6c:	5499      	strb	r1, [r3, r2]
		fresult = f_open(&fil, "tripDATA.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800ac6e:	4985      	ldr	r1, [pc, #532]	@ (800ae84 <Fare_Calculation+0x36c>)
 800ac70:	4b85      	ldr	r3, [pc, #532]	@ (800ae88 <Fare_Calculation+0x370>)
 800ac72:	2203      	movs	r2, #3
 800ac74:	0018      	movs	r0, r3
 800ac76:	f00d fa57 	bl	8018128 <f_open>
 800ac7a:	0003      	movs	r3, r0
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	4b83      	ldr	r3, [pc, #524]	@ (800ae8c <Fare_Calculation+0x374>)
 800ac80:	701a      	strb	r2, [r3, #0]
		fresult = f_lseek(&fil, f_size(&fil));
 800ac82:	4b81      	ldr	r3, [pc, #516]	@ (800ae88 <Fare_Calculation+0x370>)
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	4b80      	ldr	r3, [pc, #512]	@ (800ae88 <Fare_Calculation+0x370>)
 800ac88:	0011      	movs	r1, r2
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f00d fea9 	bl	80189e2 <f_lseek>
 800ac90:	0003      	movs	r3, r0
 800ac92:	001a      	movs	r2, r3
 800ac94:	4b7d      	ldr	r3, [pc, #500]	@ (800ae8c <Fare_Calculation+0x374>)
 800ac96:	701a      	strb	r2, [r3, #0]
//		fresult = f_puts("AB1234 A000001 2023-07-18 18:18:30 TAMPER 180.0 15000\n", &fil);
		char const * tp = (const char*)&SD_buffer;
 800ac98:	4b72      	ldr	r3, [pc, #456]	@ (800ae64 <Fare_Calculation+0x34c>)
 800ac9a:	607b      	str	r3, [r7, #4]
		fresult = f_puts(tp, &fil);
 800ac9c:	4a7a      	ldr	r2, [pc, #488]	@ (800ae88 <Fare_Calculation+0x370>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	0011      	movs	r1, r2
 800aca2:	0018      	movs	r0, r3
 800aca4:	f00e f948 	bl	8018f38 <f_puts>
 800aca8:	0003      	movs	r3, r0
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	4b77      	ldr	r3, [pc, #476]	@ (800ae8c <Fare_Calculation+0x374>)
 800acae:	701a      	strb	r2, [r3, #0]
		f_close (&fil);
 800acb0:	4b75      	ldr	r3, [pc, #468]	@ (800ae88 <Fare_Calculation+0x370>)
 800acb2:	0018      	movs	r0, r3
 800acb4:	f00d fe61 	bl	801897a <f_close>
		clear_buffer();
 800acb8:	f7f9 f92a 	bl	8003f10 <clear_buffer>

		Width = 0;
 800acbc:	4b6f      	ldr	r3, [pc, #444]	@ (800ae7c <Fare_Calculation+0x364>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
		Speed = 0;
 800acc2:	4b69      	ldr	r3, [pc, #420]	@ (800ae68 <Fare_Calculation+0x350>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
		Tamper_Counter = 0;
 800acc8:	4b65      	ldr	r3, [pc, #404]	@ (800ae60 <Fare_Calculation+0x348>)
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]


		EventDebugLog("Before Normal Lock in Fare Calculation");
 800acce:	4b70      	ldr	r3, [pc, #448]	@ (800ae90 <Fare_Calculation+0x378>)
 800acd0:	0018      	movs	r0, r3
 800acd2:	f7ff fbe9 	bl	800a4a8 <EventDebugLog>

		Flag_Protect = TRUE;
 800acd6:	4b6f      	ldr	r3, [pc, #444]	@ (800ae94 <Fare_Calculation+0x37c>)
 800acd8:	2201      	movs	r2, #1
 800acda:	701a      	strb	r2, [r3, #0]
		EventDebugLog("After Normal Lock in Fare Calculation");
 800acdc:	4b6e      	ldr	r3, [pc, #440]	@ (800ae98 <Fare_Calculation+0x380>)
 800acde:	0018      	movs	r0, r3
 800ace0:	f7ff fbe2 	bl	800a4a8 <EventDebugLog>
	}
	
	if (fare > Fare_reached || fabs(fare - Fare_reached) <= 1e-3)
 800ace4:	4b6d      	ldr	r3, [pc, #436]	@ (800ae9c <Fare_Calculation+0x384>)
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	4b6d      	ldr	r3, [pc, #436]	@ (800aea0 <Fare_Calculation+0x388>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	1c19      	adds	r1, r3, #0
 800acee:	1c10      	adds	r0, r2, #0
 800acf0:	f7f5 fbf4 	bl	80004dc <__aeabi_fcmpgt>
 800acf4:	1e03      	subs	r3, r0, #0
 800acf6:	d113      	bne.n	800ad20 <Fare_Calculation+0x208>
 800acf8:	4b68      	ldr	r3, [pc, #416]	@ (800ae9c <Fare_Calculation+0x384>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	4b68      	ldr	r3, [pc, #416]	@ (800aea0 <Fare_Calculation+0x388>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	1c19      	adds	r1, r3, #0
 800ad02:	1c10      	adds	r0, r2, #0
 800ad04:	f7f6 f9ce 	bl	80010a4 <__aeabi_fsub>
 800ad08:	1c03      	adds	r3, r0, #0
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	085b      	lsrs	r3, r3, #1
 800ad0e:	1c18      	adds	r0, r3, #0
 800ad10:	f7f8 fab4 	bl	800327c <__aeabi_f2d>
 800ad14:	4a63      	ldr	r2, [pc, #396]	@ (800aea4 <Fare_Calculation+0x38c>)
 800ad16:	4b64      	ldr	r3, [pc, #400]	@ (800aea8 <Fare_Calculation+0x390>)
 800ad18:	f7f5 fb9c 	bl	8000454 <__aeabi_dcmple>
 800ad1c:	1e03      	subs	r3, r0, #0
 800ad1e:	d004      	beq.n	800ad2a <Fare_Calculation+0x212>
		Fi = Fare_200m2;                                                         // Long distance  Fi = Fare Interval
 800ad20:	4b62      	ldr	r3, [pc, #392]	@ (800aeac <Fare_Calculation+0x394>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	4b62      	ldr	r3, [pc, #392]	@ (800aeb0 <Fare_Calculation+0x398>)
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e026      	b.n	800ad78 <Fare_Calculation+0x260>
	else if (fare > Fare_2km || fabs(fare - Fare_2km) <= 1e-3)
 800ad2a:	4b5c      	ldr	r3, [pc, #368]	@ (800ae9c <Fare_Calculation+0x384>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	4b61      	ldr	r3, [pc, #388]	@ (800aeb4 <Fare_Calculation+0x39c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	1c19      	adds	r1, r3, #0
 800ad34:	1c10      	adds	r0, r2, #0
 800ad36:	f7f5 fbd1 	bl	80004dc <__aeabi_fcmpgt>
 800ad3a:	1e03      	subs	r3, r0, #0
 800ad3c:	d113      	bne.n	800ad66 <Fare_Calculation+0x24e>
 800ad3e:	4b57      	ldr	r3, [pc, #348]	@ (800ae9c <Fare_Calculation+0x384>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	4b5c      	ldr	r3, [pc, #368]	@ (800aeb4 <Fare_Calculation+0x39c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	1c19      	adds	r1, r3, #0
 800ad48:	1c10      	adds	r0, r2, #0
 800ad4a:	f7f6 f9ab 	bl	80010a4 <__aeabi_fsub>
 800ad4e:	1c03      	adds	r3, r0, #0
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	1c18      	adds	r0, r3, #0
 800ad56:	f7f8 fa91 	bl	800327c <__aeabi_f2d>
 800ad5a:	4a52      	ldr	r2, [pc, #328]	@ (800aea4 <Fare_Calculation+0x38c>)
 800ad5c:	4b52      	ldr	r3, [pc, #328]	@ (800aea8 <Fare_Calculation+0x390>)
 800ad5e:	f7f5 fb79 	bl	8000454 <__aeabi_dcmple>
 800ad62:	1e03      	subs	r3, r0, #0
 800ad64:	d004      	beq.n	800ad70 <Fare_Calculation+0x258>
		Fi = Fare_200m1;                                                       // 2km to before long distance
 800ad66:	4b54      	ldr	r3, [pc, #336]	@ (800aeb8 <Fare_Calculation+0x3a0>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b51      	ldr	r3, [pc, #324]	@ (800aeb0 <Fare_Calculation+0x398>)
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e003      	b.n	800ad78 <Fare_Calculation+0x260>
	else
		Fi = Fare_200m0;                                                     // <2KM
 800ad70:	4b52      	ldr	r3, [pc, #328]	@ (800aebc <Fare_Calculation+0x3a4>)
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	4b4e      	ldr	r3, [pc, #312]	@ (800aeb0 <Fare_Calculation+0x398>)
 800ad76:	601a      	str	r2, [r3, #0]

	if (Speed <= Speed_co)                           //Speed <= Speed constant(12km/h)
 800ad78:	4b51      	ldr	r3, [pc, #324]	@ (800aec0 <Fare_Calculation+0x3a8>)
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	0018      	movs	r0, r3
 800ad7e:	f7f6 fb55 	bl	800142c <__aeabi_i2f>
 800ad82:	1c02      	adds	r2, r0, #0
 800ad84:	4b38      	ldr	r3, [pc, #224]	@ (800ae68 <Fare_Calculation+0x350>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	1c19      	adds	r1, r3, #0
 800ad8a:	1c10      	adds	r0, r2, #0
 800ad8c:	f7f5 fbb0 	bl	80004f0 <__aeabi_fcmpge>
 800ad90:	1e03      	subs	r3, r0, #0
 800ad92:	d052      	beq.n	800ae3a <Fare_Calculation+0x322>
	{
		if(Drv_state == S_HIRED)												//only when hired mode, count the Fare unit and time
 800ad94:	4b4b      	ldr	r3, [pc, #300]	@ (800aec4 <Fare_Calculation+0x3ac>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d121      	bne.n	800ade0 <Fare_Calculation+0x2c8>
		{
			last_counter = counter;                                           //update count without count the paid distance
 800ad9c:	4b4a      	ldr	r3, [pc, #296]	@ (800aec8 <Fare_Calculation+0x3b0>)
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	4b4a      	ldr	r3, [pc, #296]	@ (800aecc <Fare_Calculation+0x3b4>)
 800ada2:	601a      	str	r2, [r3, #0]
//			Fu+=4;
			Fu+=(float)ck/300;
 800ada4:	4b4a      	ldr	r3, [pc, #296]	@ (800aed0 <Fare_Calculation+0x3b8>)
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	0018      	movs	r0, r3
 800adaa:	f7f6 fb8b 	bl	80014c4 <__aeabi_ui2f>
 800adae:	1c03      	adds	r3, r0, #0
 800adb0:	4948      	ldr	r1, [pc, #288]	@ (800aed4 <Fare_Calculation+0x3bc>)
 800adb2:	1c18      	adds	r0, r3, #0
 800adb4:	f7f5 fe52 	bl	8000a5c <__aeabi_fdiv>
 800adb8:	1c03      	adds	r3, r0, #0
 800adba:	1c1a      	adds	r2, r3, #0
 800adbc:	4b46      	ldr	r3, [pc, #280]	@ (800aed8 <Fare_Calculation+0x3c0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	1c19      	adds	r1, r3, #0
 800adc2:	1c10      	adds	r0, r2, #0
 800adc4:	f7f5 fcc0 	bl	8000748 <__aeabi_fadd>
 800adc8:	1c03      	adds	r3, r0, #0
 800adca:	1c1a      	adds	r2, r3, #0
 800adcc:	4b42      	ldr	r3, [pc, #264]	@ (800aed8 <Fare_Calculation+0x3c0>)
 800adce:	601a      	str	r2, [r3, #0]
			Ft++;                                                             // Cpt : paid time counter ++
 800add0:	4b42      	ldr	r3, [pc, #264]	@ (800aedc <Fare_Calculation+0x3c4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	4b41      	ldr	r3, [pc, #260]	@ (800aedc <Fare_Calculation+0x3c4>)
 800add8:	601a      	str	r2, [r3, #0]
			Dur_hms_cal();                                                    //Count Time
 800adda:	f7ff fce5 	bl	800a7a8 <Dur_hms_cal>
 800adde:	e09e      	b.n	800af1e <Fare_Calculation+0x406>
		}
		else
		{
			Dt = counter - last_counter;										//new distance
 800ade0:	4b39      	ldr	r3, [pc, #228]	@ (800aec8 <Fare_Calculation+0x3b0>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	4b39      	ldr	r3, [pc, #228]	@ (800aecc <Fare_Calculation+0x3b4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	1ad2      	subs	r2, r2, r3
 800adea:	4b3d      	ldr	r3, [pc, #244]	@ (800aee0 <Fare_Calculation+0x3c8>)
 800adec:	601a      	str	r2, [r3, #0]
			DtX = Dt + DtX;														//old distance + new distance = total distance
 800adee:	4b3c      	ldr	r3, [pc, #240]	@ (800aee0 <Fare_Calculation+0x3c8>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	4b3c      	ldr	r3, [pc, #240]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	18d2      	adds	r2, r2, r3
 800adf8:	4b3a      	ldr	r3, [pc, #232]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800adfa:	601a      	str	r2, [r3, #0]
			last_counter = counter;												//new distance become old distance
 800adfc:	4b32      	ldr	r3, [pc, #200]	@ (800aec8 <Fare_Calculation+0x3b0>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	4b32      	ldr	r3, [pc, #200]	@ (800aecc <Fare_Calculation+0x3b4>)
 800ae02:	601a      	str	r2, [r3, #0]
			for (; DtX>0; DtX--)												//When total distance record >0, count the distance to the fare distance
 800ae04:	e014      	b.n	800ae30 <Fare_Calculation+0x318>
			{
				Fd++;															//fare distance++
 800ae06:	4b38      	ldr	r3, [pc, #224]	@ (800aee8 <Fare_Calculation+0x3d0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	4b36      	ldr	r3, [pc, #216]	@ (800aee8 <Fare_Calculation+0x3d0>)
 800ae0e:	601a      	str	r2, [r3, #0]
				Fu++;															//fare unit ++
 800ae10:	4b31      	ldr	r3, [pc, #196]	@ (800aed8 <Fare_Calculation+0x3c0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	21fe      	movs	r1, #254	@ 0xfe
 800ae16:	0589      	lsls	r1, r1, #22
 800ae18:	1c18      	adds	r0, r3, #0
 800ae1a:	f7f5 fc95 	bl	8000748 <__aeabi_fadd>
 800ae1e:	1c03      	adds	r3, r0, #0
 800ae20:	1c1a      	adds	r2, r3, #0
 800ae22:	4b2d      	ldr	r3, [pc, #180]	@ (800aed8 <Fare_Calculation+0x3c0>)
 800ae24:	601a      	str	r2, [r3, #0]
			for (; DtX>0; DtX--)												//When total distance record >0, count the distance to the fare distance
 800ae26:	4b2f      	ldr	r3, [pc, #188]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	1e5a      	subs	r2, r3, #1
 800ae2c:	4b2d      	ldr	r3, [pc, #180]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	4b2c      	ldr	r3, [pc, #176]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e6      	bne.n	800ae06 <Fare_Calculation+0x2ee>
 800ae38:	e071      	b.n	800af1e <Fare_Calculation+0x406>
			}
		}
	}
	else											//Speed > Speed constant(12km/h)
	{
		Dt = counter - last_counter;
 800ae3a:	4b23      	ldr	r3, [pc, #140]	@ (800aec8 <Fare_Calculation+0x3b0>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	4b23      	ldr	r3, [pc, #140]	@ (800aecc <Fare_Calculation+0x3b4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	1ad2      	subs	r2, r2, r3
 800ae44:	4b26      	ldr	r3, [pc, #152]	@ (800aee0 <Fare_Calculation+0x3c8>)
 800ae46:	601a      	str	r2, [r3, #0]
		DtX = Dt + DtX;
 800ae48:	4b25      	ldr	r3, [pc, #148]	@ (800aee0 <Fare_Calculation+0x3c8>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	4b25      	ldr	r3, [pc, #148]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	18d2      	adds	r2, r2, r3
 800ae52:	4b24      	ldr	r3, [pc, #144]	@ (800aee4 <Fare_Calculation+0x3cc>)
 800ae54:	601a      	str	r2, [r3, #0]
		last_counter = counter;
 800ae56:	4b1c      	ldr	r3, [pc, #112]	@ (800aec8 <Fare_Calculation+0x3b0>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	4b1c      	ldr	r3, [pc, #112]	@ (800aecc <Fare_Calculation+0x3b4>)
 800ae5c:	601a      	str	r2, [r3, #0]
		for (; DtX>0; DtX--)
 800ae5e:	e05a      	b.n	800af16 <Fare_Calculation+0x3fe>
 800ae60:	20000ec7 	.word	0x20000ec7
 800ae64:	200034fc 	.word	0x200034fc
 800ae68:	20000e64 	.word	0x20000e64
 800ae6c:	42c80000 	.word	0x42c80000
 800ae70:	41200000 	.word	0x41200000
 800ae74:	20000ecc 	.word	0x20000ecc
 800ae78:	20000ed0 	.word	0x20000ed0
 800ae7c:	20000e3c 	.word	0x20000e3c
 800ae80:	20000ed8 	.word	0x20000ed8
 800ae84:	080199e8 	.word	0x080199e8
 800ae88:	200020c4 	.word	0x200020c4
 800ae8c:	200030f4 	.word	0x200030f4
 800ae90:	08019e5c 	.word	0x08019e5c
 800ae94:	20000ec5 	.word	0x20000ec5
 800ae98:	08019e84 	.word	0x08019e84
 800ae9c:	20000e9c 	.word	0x20000e9c
 800aea0:	20000e48 	.word	0x20000e48
 800aea4:	d2f1a9fc 	.word	0xd2f1a9fc
 800aea8:	3f50624d 	.word	0x3f50624d
 800aeac:	20000e58 	.word	0x20000e58
 800aeb0:	20000e80 	.word	0x20000e80
 800aeb4:	20000e4c 	.word	0x20000e4c
 800aeb8:	20000e54 	.word	0x20000e54
 800aebc:	20000e50 	.word	0x20000e50
 800aec0:	200002f4 	.word	0x200002f4
 800aec4:	20000b1e 	.word	0x20000b1e
 800aec8:	20000e70 	.word	0x20000e70
 800aecc:	20000e78 	.word	0x20000e78
 800aed0:	200002f2 	.word	0x200002f2
 800aed4:	43960000 	.word	0x43960000
 800aed8:	20000e8c 	.word	0x20000e8c
 800aedc:	20000e90 	.word	0x20000e90
 800aee0:	20000e84 	.word	0x20000e84
 800aee4:	20000e88 	.word	0x20000e88
 800aee8:	20000e94 	.word	0x20000e94
		{
			Fd++;
 800aeec:	4ba3      	ldr	r3, [pc, #652]	@ (800b17c <Fare_Calculation+0x664>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	4ba2      	ldr	r3, [pc, #648]	@ (800b17c <Fare_Calculation+0x664>)
 800aef4:	601a      	str	r2, [r3, #0]
			Fu++;
 800aef6:	4ba2      	ldr	r3, [pc, #648]	@ (800b180 <Fare_Calculation+0x668>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	21fe      	movs	r1, #254	@ 0xfe
 800aefc:	0589      	lsls	r1, r1, #22
 800aefe:	1c18      	adds	r0, r3, #0
 800af00:	f7f5 fc22 	bl	8000748 <__aeabi_fadd>
 800af04:	1c03      	adds	r3, r0, #0
 800af06:	1c1a      	adds	r2, r3, #0
 800af08:	4b9d      	ldr	r3, [pc, #628]	@ (800b180 <Fare_Calculation+0x668>)
 800af0a:	601a      	str	r2, [r3, #0]
		for (; DtX>0; DtX--)
 800af0c:	4b9d      	ldr	r3, [pc, #628]	@ (800b184 <Fare_Calculation+0x66c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	1e5a      	subs	r2, r3, #1
 800af12:	4b9c      	ldr	r3, [pc, #624]	@ (800b184 <Fare_Calculation+0x66c>)
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	4b9b      	ldr	r3, [pc, #620]	@ (800b184 <Fare_Calculation+0x66c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e6      	bne.n	800aeec <Fare_Calculation+0x3d4>
		}
	}

	//check Fu
	if (fabs(Fu - (float)ck/5) <= 1e-6 || Fu > (float)ck/5) 		// if Fare unit - 200 ~= 0  or Fu - 200 > 0
 800af1e:	4b98      	ldr	r3, [pc, #608]	@ (800b180 <Fare_Calculation+0x668>)
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	4b99      	ldr	r3, [pc, #612]	@ (800b188 <Fare_Calculation+0x670>)
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	0018      	movs	r0, r3
 800af28:	f7f6 facc 	bl	80014c4 <__aeabi_ui2f>
 800af2c:	1c03      	adds	r3, r0, #0
 800af2e:	4997      	ldr	r1, [pc, #604]	@ (800b18c <Fare_Calculation+0x674>)
 800af30:	1c18      	adds	r0, r3, #0
 800af32:	f7f5 fd93 	bl	8000a5c <__aeabi_fdiv>
 800af36:	1c03      	adds	r3, r0, #0
 800af38:	1c19      	adds	r1, r3, #0
 800af3a:	1c20      	adds	r0, r4, #0
 800af3c:	f7f6 f8b2 	bl	80010a4 <__aeabi_fsub>
 800af40:	1c03      	adds	r3, r0, #0
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	085b      	lsrs	r3, r3, #1
 800af46:	1c18      	adds	r0, r3, #0
 800af48:	f7f8 f998 	bl	800327c <__aeabi_f2d>
 800af4c:	4a90      	ldr	r2, [pc, #576]	@ (800b190 <Fare_Calculation+0x678>)
 800af4e:	4b91      	ldr	r3, [pc, #580]	@ (800b194 <Fare_Calculation+0x67c>)
 800af50:	f7f5 fa80 	bl	8000454 <__aeabi_dcmple>
 800af54:	1e03      	subs	r3, r0, #0
 800af56:	d113      	bne.n	800af80 <Fare_Calculation+0x468>
 800af58:	4b8b      	ldr	r3, [pc, #556]	@ (800b188 <Fare_Calculation+0x670>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	0018      	movs	r0, r3
 800af5e:	f7f6 fab1 	bl	80014c4 <__aeabi_ui2f>
 800af62:	1c03      	adds	r3, r0, #0
 800af64:	4989      	ldr	r1, [pc, #548]	@ (800b18c <Fare_Calculation+0x674>)
 800af66:	1c18      	adds	r0, r3, #0
 800af68:	f7f5 fd78 	bl	8000a5c <__aeabi_fdiv>
 800af6c:	1c03      	adds	r3, r0, #0
 800af6e:	1c1a      	adds	r2, r3, #0
 800af70:	4b83      	ldr	r3, [pc, #524]	@ (800b180 <Fare_Calculation+0x668>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	1c19      	adds	r1, r3, #0
 800af76:	1c10      	adds	r0, r2, #0
 800af78:	f7f5 fa9c 	bl	80004b4 <__aeabi_fcmplt>
 800af7c:	1e03      	subs	r3, r0, #0
 800af7e:	d021      	beq.n	800afc4 <Fare_Calculation+0x4ac>
	{
		fare = fare + Fi;                                            //keep adding fare     //new fare = fare + fare interval
 800af80:	4b85      	ldr	r3, [pc, #532]	@ (800b198 <Fare_Calculation+0x680>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b85      	ldr	r3, [pc, #532]	@ (800b19c <Fare_Calculation+0x684>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	1c19      	adds	r1, r3, #0
 800af8a:	1c10      	adds	r0, r2, #0
 800af8c:	f7f5 fbdc 	bl	8000748 <__aeabi_fadd>
 800af90:	1c03      	adds	r3, r0, #0
 800af92:	1c1a      	adds	r2, r3, #0
 800af94:	4b80      	ldr	r3, [pc, #512]	@ (800b198 <Fare_Calculation+0x680>)
 800af96:	601a      	str	r2, [r3, #0]
		Fu = Fu - ck/5;																		//new fare unit = old fare unit -200
 800af98:	4b79      	ldr	r3, [pc, #484]	@ (800b180 <Fare_Calculation+0x668>)
 800af9a:	681c      	ldr	r4, [r3, #0]
 800af9c:	4b7a      	ldr	r3, [pc, #488]	@ (800b188 <Fare_Calculation+0x670>)
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	2105      	movs	r1, #5
 800afa2:	0018      	movs	r0, r3
 800afa4:	f7f5 f8c0 	bl	8000128 <__udivsi3>
 800afa8:	0003      	movs	r3, r0
 800afaa:	b29b      	uxth	r3, r3
 800afac:	0018      	movs	r0, r3
 800afae:	f7f6 fa3d 	bl	800142c <__aeabi_i2f>
 800afb2:	1c03      	adds	r3, r0, #0
 800afb4:	1c19      	adds	r1, r3, #0
 800afb6:	1c20      	adds	r0, r4, #0
 800afb8:	f7f6 f874 	bl	80010a4 <__aeabi_fsub>
 800afbc:	1c03      	adds	r3, r0, #0
 800afbe:	1c1a      	adds	r2, r3, #0
 800afc0:	4b6f      	ldr	r3, [pc, #444]	@ (800b180 <Fare_Calculation+0x668>)
 800afc2:	601a      	str	r2, [r3, #0]
	}

	fare_km = ((float)Fd / ck);   // Fd is Fare distance(m), ck = 1/1000 = convert to km
 800afc4:	4b6d      	ldr	r3, [pc, #436]	@ (800b17c <Fare_Calculation+0x664>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	0018      	movs	r0, r3
 800afca:	f7f6 fa7b 	bl	80014c4 <__aeabi_ui2f>
 800afce:	1c04      	adds	r4, r0, #0
 800afd0:	4b6d      	ldr	r3, [pc, #436]	@ (800b188 <Fare_Calculation+0x670>)
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	0018      	movs	r0, r3
 800afd6:	f7f6 fa29 	bl	800142c <__aeabi_i2f>
 800afda:	1c03      	adds	r3, r0, #0
 800afdc:	1c19      	adds	r1, r3, #0
 800afde:	1c20      	adds	r0, r4, #0
 800afe0:	f7f5 fd3c 	bl	8000a5c <__aeabi_fdiv>
 800afe4:	1c03      	adds	r3, r0, #0
 800afe6:	1c1a      	adds	r2, r3, #0
 800afe8:	4b6d      	ldr	r3, [pc, #436]	@ (800b1a0 <Fare_Calculation+0x688>)
 800afea:	601a      	str	r2, [r3, #0]
	fare_min = ((float)Ft / 60.0); // Ft is Fare time(s), 1/60= convert to min
 800afec:	4b6d      	ldr	r3, [pc, #436]	@ (800b1a4 <Fare_Calculation+0x68c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	0018      	movs	r0, r3
 800aff2:	f7f6 fa67 	bl	80014c4 <__aeabi_ui2f>
 800aff6:	1c03      	adds	r3, r0, #0
 800aff8:	496b      	ldr	r1, [pc, #428]	@ (800b1a8 <Fare_Calculation+0x690>)
 800affa:	1c18      	adds	r0, r3, #0
 800affc:	f7f5 fd2e 	bl	8000a5c <__aeabi_fdiv>
 800b000:	1c03      	adds	r3, r0, #0
 800b002:	1c1a      	adds	r2, r3, #0
 800b004:	4b69      	ldr	r3, [pc, #420]	@ (800b1ac <Fare_Calculation+0x694>)
 800b006:	601a      	str	r2, [r3, #0]

	if((Flag_2km == FALSE) && (((distance > 2000) || (fabs(distance-2000) <= 1e-3)) || ((fare>Fare_2km) || (fabs(fare-Fare_2km) <= 1e-3))))       //If they want 2001 jump, change all 2000 in this line to 2001.
 800b008:	4b69      	ldr	r3, [pc, #420]	@ (800b1b0 <Fare_Calculation+0x698>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d14e      	bne.n	800b0ae <Fare_Calculation+0x596>
 800b010:	4b68      	ldr	r3, [pc, #416]	@ (800b1b4 <Fare_Calculation+0x69c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4968      	ldr	r1, [pc, #416]	@ (800b1b8 <Fare_Calculation+0x6a0>)
 800b016:	1c18      	adds	r0, r3, #0
 800b018:	f7f5 fa60 	bl	80004dc <__aeabi_fcmpgt>
 800b01c:	1e03      	subs	r3, r0, #0
 800b01e:	d12f      	bne.n	800b080 <Fare_Calculation+0x568>
 800b020:	4b64      	ldr	r3, [pc, #400]	@ (800b1b4 <Fare_Calculation+0x69c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4964      	ldr	r1, [pc, #400]	@ (800b1b8 <Fare_Calculation+0x6a0>)
 800b026:	1c18      	adds	r0, r3, #0
 800b028:	f7f6 f83c 	bl	80010a4 <__aeabi_fsub>
 800b02c:	1c03      	adds	r3, r0, #0
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	085b      	lsrs	r3, r3, #1
 800b032:	1c18      	adds	r0, r3, #0
 800b034:	f7f8 f922 	bl	800327c <__aeabi_f2d>
 800b038:	4a60      	ldr	r2, [pc, #384]	@ (800b1bc <Fare_Calculation+0x6a4>)
 800b03a:	4b61      	ldr	r3, [pc, #388]	@ (800b1c0 <Fare_Calculation+0x6a8>)
 800b03c:	f7f5 fa0a 	bl	8000454 <__aeabi_dcmple>
 800b040:	1e03      	subs	r3, r0, #0
 800b042:	d11d      	bne.n	800b080 <Fare_Calculation+0x568>
 800b044:	4b54      	ldr	r3, [pc, #336]	@ (800b198 <Fare_Calculation+0x680>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b5e      	ldr	r3, [pc, #376]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	1c19      	adds	r1, r3, #0
 800b04e:	1c10      	adds	r0, r2, #0
 800b050:	f7f5 fa44 	bl	80004dc <__aeabi_fcmpgt>
 800b054:	1e03      	subs	r3, r0, #0
 800b056:	d113      	bne.n	800b080 <Fare_Calculation+0x568>
 800b058:	4b4f      	ldr	r3, [pc, #316]	@ (800b198 <Fare_Calculation+0x680>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	4b59      	ldr	r3, [pc, #356]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	1c19      	adds	r1, r3, #0
 800b062:	1c10      	adds	r0, r2, #0
 800b064:	f7f6 f81e 	bl	80010a4 <__aeabi_fsub>
 800b068:	1c03      	adds	r3, r0, #0
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	1c18      	adds	r0, r3, #0
 800b070:	f7f8 f904 	bl	800327c <__aeabi_f2d>
 800b074:	4a51      	ldr	r2, [pc, #324]	@ (800b1bc <Fare_Calculation+0x6a4>)
 800b076:	4b52      	ldr	r3, [pc, #328]	@ (800b1c0 <Fare_Calculation+0x6a8>)
 800b078:	f7f5 f9ec 	bl	8000454 <__aeabi_dcmple>
 800b07c:	1e03      	subs	r3, r0, #0
 800b07e:	d016      	beq.n	800b0ae <Fare_Calculation+0x596>
	{
		Flag_2km = TRUE;
 800b080:	4b4b      	ldr	r3, [pc, #300]	@ (800b1b0 <Fare_Calculation+0x698>)
 800b082:	2201      	movs	r2, #1
 800b084:	701a      	strb	r2, [r3, #0]
		Fi = Fare_200m1; 
 800b086:	4b50      	ldr	r3, [pc, #320]	@ (800b1c8 <Fare_Calculation+0x6b0>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	4b44      	ldr	r3, [pc, #272]	@ (800b19c <Fare_Calculation+0x684>)
 800b08c:	601a      	str	r2, [r3, #0]
		fare = Fare_2km;
 800b08e:	4b4d      	ldr	r3, [pc, #308]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b41      	ldr	r3, [pc, #260]	@ (800b198 <Fare_Calculation+0x680>)
 800b094:	601a      	str	r2, [r3, #0]
		fare = fare + Fi;
 800b096:	4b40      	ldr	r3, [pc, #256]	@ (800b198 <Fare_Calculation+0x680>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b40      	ldr	r3, [pc, #256]	@ (800b19c <Fare_Calculation+0x684>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	1c19      	adds	r1, r3, #0
 800b0a0:	1c10      	adds	r0, r2, #0
 800b0a2:	f7f5 fb51 	bl	8000748 <__aeabi_fadd>
 800b0a6:	1c03      	adds	r3, r0, #0
 800b0a8:	1c1a      	adds	r2, r3, #0
 800b0aa:	4b3b      	ldr	r3, [pc, #236]	@ (800b198 <Fare_Calculation+0x680>)
 800b0ac:	601a      	str	r2, [r3, #0]
	}

	//check fare for HMI fare display - fare_d
	if ((fare > Fare_2km) || fabs(fare-Fare_2km) <= 1e-3)                //more than 2 km show actual price
 800b0ae:	4b3a      	ldr	r3, [pc, #232]	@ (800b198 <Fare_Calculation+0x680>)
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	4b44      	ldr	r3, [pc, #272]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	1c19      	adds	r1, r3, #0
 800b0b8:	1c10      	adds	r0, r2, #0
 800b0ba:	f7f5 fa0f 	bl	80004dc <__aeabi_fcmpgt>
 800b0be:	1e03      	subs	r3, r0, #0
 800b0c0:	d113      	bne.n	800b0ea <Fare_Calculation+0x5d2>
 800b0c2:	4b35      	ldr	r3, [pc, #212]	@ (800b198 <Fare_Calculation+0x680>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	1c19      	adds	r1, r3, #0
 800b0cc:	1c10      	adds	r0, r2, #0
 800b0ce:	f7f5 ffe9 	bl	80010a4 <__aeabi_fsub>
 800b0d2:	1c03      	adds	r3, r0, #0
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	085b      	lsrs	r3, r3, #1
 800b0d8:	1c18      	adds	r0, r3, #0
 800b0da:	f7f8 f8cf 	bl	800327c <__aeabi_f2d>
 800b0de:	4a37      	ldr	r2, [pc, #220]	@ (800b1bc <Fare_Calculation+0x6a4>)
 800b0e0:	4b37      	ldr	r3, [pc, #220]	@ (800b1c0 <Fare_Calculation+0x6a8>)
 800b0e2:	f7f5 f9b7 	bl	8000454 <__aeabi_dcmple>
 800b0e6:	1e03      	subs	r3, r0, #0
 800b0e8:	d004      	beq.n	800b0f4 <Fare_Calculation+0x5dc>
	{
		fare_d = fare;
 800b0ea:	4b2b      	ldr	r3, [pc, #172]	@ (800b198 <Fare_Calculation+0x680>)
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	4b37      	ldr	r3, [pc, #220]	@ (800b1cc <Fare_Calculation+0x6b4>)
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	e003      	b.n	800b0fc <Fare_Calculation+0x5e4>
	}
	else
	{
		fare_d = Fare_2km; //20.5 //24.0;                                //less than 2 km show 2km price
 800b0f4:	4b33      	ldr	r3, [pc, #204]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	4b34      	ldr	r3, [pc, #208]	@ (800b1cc <Fare_Calculation+0x6b4>)
 800b0fa:	601a      	str	r2, [r3, #0]
	}

	if ((Last_fare_d != fare_d) && (fare_d != Fare_2km))
 800b0fc:	4b34      	ldr	r3, [pc, #208]	@ (800b1d0 <Fare_Calculation+0x6b8>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4b32      	ldr	r3, [pc, #200]	@ (800b1cc <Fare_Calculation+0x6b4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	1c19      	adds	r1, r3, #0
 800b106:	1c10      	adds	r0, r2, #0
 800b108:	f7f5 f9ce 	bl	80004a8 <__aeabi_fcmpeq>
 800b10c:	1e03      	subs	r3, r0, #0
 800b10e:	d12d      	bne.n	800b16c <Fare_Calculation+0x654>
 800b110:	4b2e      	ldr	r3, [pc, #184]	@ (800b1cc <Fare_Calculation+0x6b4>)
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4b2b      	ldr	r3, [pc, #172]	@ (800b1c4 <Fare_Calculation+0x6ac>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	1c19      	adds	r1, r3, #0
 800b11a:	1c10      	adds	r0, r2, #0
 800b11c:	f7f5 f9c4 	bl	80004a8 <__aeabi_fcmpeq>
 800b120:	1e03      	subs	r3, r0, #0
 800b122:	d123      	bne.n	800b16c <Fare_Calculation+0x654>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800b124:	4b2b      	ldr	r3, [pc, #172]	@ (800b1d4 <Fare_Calculation+0x6bc>)
 800b126:	2201      	movs	r2, #1
 800b128:	2180      	movs	r1, #128	@ 0x80
 800b12a:	0018      	movs	r0, r3
 800b12c:	f003 ffc7 	bl	800f0be <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800b130:	2001      	movs	r0, #1
 800b132:	f003 f9f7 	bl	800e524 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800b136:	4b27      	ldr	r3, [pc, #156]	@ (800b1d4 <Fare_Calculation+0x6bc>)
 800b138:	2200      	movs	r2, #0
 800b13a:	2180      	movs	r1, #128	@ 0x80
 800b13c:	0018      	movs	r0, r3
 800b13e:	f003 ffbe 	bl	800f0be <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800b142:	4b24      	ldr	r3, [pc, #144]	@ (800b1d4 <Fare_Calculation+0x6bc>)
 800b144:	2201      	movs	r2, #1
 800b146:	2108      	movs	r1, #8
 800b148:	0018      	movs	r0, r3
 800b14a:	f003 ffb8 	bl	800f0be <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800b14e:	2014      	movs	r0, #20
 800b150:	f003 f9e8 	bl	800e524 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800b154:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d4 <Fare_Calculation+0x6bc>)
 800b156:	2200      	movs	r2, #0
 800b158:	2108      	movs	r1, #8
 800b15a:	0018      	movs	r0, r3
 800b15c:	f003 ffaf 	bl	800f0be <HAL_GPIO_WritePin>
		change_count += 1;
 800b160:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d8 <Fare_Calculation+0x6c0>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d8 <Fare_Calculation+0x6c0>)
 800b16a:	701a      	strb	r2, [r3, #0]
	}

	Last_fare_d = fare_d;
 800b16c:	4b17      	ldr	r3, [pc, #92]	@ (800b1cc <Fare_Calculation+0x6b4>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b17      	ldr	r3, [pc, #92]	@ (800b1d0 <Fare_Calculation+0x6b8>)
 800b172:	601a      	str	r2, [r3, #0]
}
 800b174:	46c0      	nop			@ (mov r8, r8)
 800b176:	46bd      	mov	sp, r7
 800b178:	b003      	add	sp, #12
 800b17a:	bd90      	pop	{r4, r7, pc}
 800b17c:	20000e94 	.word	0x20000e94
 800b180:	20000e8c 	.word	0x20000e8c
 800b184:	20000e88 	.word	0x20000e88
 800b188:	200002f2 	.word	0x200002f2
 800b18c:	40a00000 	.word	0x40a00000
 800b190:	a0b5ed8d 	.word	0xa0b5ed8d
 800b194:	3eb0c6f7 	.word	0x3eb0c6f7
 800b198:	20000e9c 	.word	0x20000e9c
 800b19c:	20000e80 	.word	0x20000e80
 800b1a0:	20000eb4 	.word	0x20000eb4
 800b1a4:	20000e90 	.word	0x20000e90
 800b1a8:	42700000 	.word	0x42700000
 800b1ac:	20000eb8 	.word	0x20000eb8
 800b1b0:	20000e98 	.word	0x20000e98
 800b1b4:	20000e6c 	.word	0x20000e6c
 800b1b8:	44fa0000 	.word	0x44fa0000
 800b1bc:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1c0:	3f50624d 	.word	0x3f50624d
 800b1c4:	20000e4c 	.word	0x20000e4c
 800b1c8:	20000e54 	.word	0x20000e54
 800b1cc:	20000ea0 	.word	0x20000ea0
 800b1d0:	20000ea4 	.word	0x20000ea4
 800b1d4:	50000400 	.word	0x50000400
 800b1d8:	20001015 	.word	0x20001015

0800b1dc <Flag_Control_Up>:

void Flag_Control_Up()
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800b1e0:	2380      	movs	r3, #128	@ 0x80
 800b1e2:	019b      	lsls	r3, r3, #6
 800b1e4:	480a      	ldr	r0, [pc, #40]	@ (800b210 <Flag_Control_Up+0x34>)
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	0019      	movs	r1, r3
 800b1ea:	f003 ff68 	bl	800f0be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 800b1ee:	2380      	movs	r3, #128	@ 0x80
 800b1f0:	01db      	lsls	r3, r3, #7
 800b1f2:	4807      	ldr	r0, [pc, #28]	@ (800b210 <Flag_Control_Up+0x34>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	0019      	movs	r1, r3
 800b1f8:	f003 ff61 	bl	800f0be <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800b1fc:	2380      	movs	r3, #128	@ 0x80
 800b1fe:	021b      	lsls	r3, r3, #8
 800b200:	4803      	ldr	r0, [pc, #12]	@ (800b210 <Flag_Control_Up+0x34>)
 800b202:	2201      	movs	r2, #1
 800b204:	0019      	movs	r1, r3
 800b206:	f003 ff5a 	bl	800f0be <HAL_GPIO_WritePin>
}
 800b20a:	46c0      	nop			@ (mov r8, r8)
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	50000400 	.word	0x50000400

0800b214 <Flag_Control_Down>:

void Flag_Control_Down()
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800b218:	2380      	movs	r3, #128	@ 0x80
 800b21a:	019b      	lsls	r3, r3, #6
 800b21c:	480a      	ldr	r0, [pc, #40]	@ (800b248 <Flag_Control_Down+0x34>)
 800b21e:	2200      	movs	r2, #0
 800b220:	0019      	movs	r1, r3
 800b222:	f003 ff4c 	bl	800f0be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800b226:	2380      	movs	r3, #128	@ 0x80
 800b228:	01db      	lsls	r3, r3, #7
 800b22a:	4807      	ldr	r0, [pc, #28]	@ (800b248 <Flag_Control_Down+0x34>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	0019      	movs	r1, r3
 800b230:	f003 ff45 	bl	800f0be <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800b234:	2380      	movs	r3, #128	@ 0x80
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	4803      	ldr	r0, [pc, #12]	@ (800b248 <Flag_Control_Down+0x34>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	0019      	movs	r1, r3
 800b23e:	f003 ff3e 	bl	800f0be <HAL_GPIO_WritePin>
}
 800b242:	46c0      	nop			@ (mov r8, r8)
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	50000400 	.word	0x50000400

0800b24c <Anti_Tamper_Handle>:

void Anti_Tamper_Handle()
{
 800b24c:	b5b0      	push	{r4, r5, r7, lr}
 800b24e:	b08c      	sub	sp, #48	@ 0x30
 800b250:	af00      	add	r7, sp, #0
	//set alarm in rtc & ctrl_2

	//1. alarm 30s (first time enter will alarm)
	//2. 'C' in HMI fare
	unsigned char C_Fare[] = {0x5A, 0xA5, 0x04, 0x82, 0x10, 0x30, 0x43};  //show "c"
 800b252:	2528      	movs	r5, #40	@ 0x28
 800b254:	197b      	adds	r3, r7, r5
 800b256:	4a55      	ldr	r2, [pc, #340]	@ (800b3ac <Anti_Tamper_Handle+0x160>)
 800b258:	6811      	ldr	r1, [r2, #0]
 800b25a:	6019      	str	r1, [r3, #0]
 800b25c:	8891      	ldrh	r1, [r2, #4]
 800b25e:	8099      	strh	r1, [r3, #4]
 800b260:	7992      	ldrb	r2, [r2, #6]
 800b262:	719a      	strb	r2, [r3, #6]

	uint8_t temp_array[4];
	Long_to_byte(Fare_min, temp_array);
 800b264:	4b52      	ldr	r3, [pc, #328]	@ (800b3b0 <Anti_Tamper_Handle+0x164>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2424      	movs	r4, #36	@ 0x24
 800b26a:	193a      	adds	r2, r7, r4
 800b26c:	0011      	movs	r1, r2
 800b26e:	0018      	movs	r0, r3
 800b270:	f7fd f840 	bl	80082f4 <Long_to_byte>
	C_Fare_Min[6] = temp_array[0];
 800b274:	0021      	movs	r1, r4
 800b276:	187b      	adds	r3, r7, r1
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	4b4e      	ldr	r3, [pc, #312]	@ (800b3b4 <Anti_Tamper_Handle+0x168>)
 800b27c:	719a      	strb	r2, [r3, #6]
	C_Fare_Min[7] = temp_array[1];
 800b27e:	187b      	adds	r3, r7, r1
 800b280:	785a      	ldrb	r2, [r3, #1]
 800b282:	4b4c      	ldr	r3, [pc, #304]	@ (800b3b4 <Anti_Tamper_Handle+0x168>)
 800b284:	71da      	strb	r2, [r3, #7]
	C_Fare_Min[8] = temp_array[2];
 800b286:	187b      	adds	r3, r7, r1
 800b288:	789a      	ldrb	r2, [r3, #2]
 800b28a:	4b4a      	ldr	r3, [pc, #296]	@ (800b3b4 <Anti_Tamper_Handle+0x168>)
 800b28c:	721a      	strb	r2, [r3, #8]
	C_Fare_Min[9] = temp_array[3];
 800b28e:	187b      	adds	r3, r7, r1
 800b290:	78da      	ldrb	r2, [r3, #3]
 800b292:	4b48      	ldr	r3, [pc, #288]	@ (800b3b4 <Anti_Tamper_Handle+0x168>)
 800b294:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit(&huart1, C_Fare, 7, 0x20);
 800b296:	1979      	adds	r1, r7, r5
 800b298:	4847      	ldr	r0, [pc, #284]	@ (800b3b8 <Anti_Tamper_Handle+0x16c>)
 800b29a:	2320      	movs	r3, #32
 800b29c:	2207      	movs	r2, #7
 800b29e:	f008 fbc7 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, C_Fare_Min, 10, 0x20);
 800b2a2:	4944      	ldr	r1, [pc, #272]	@ (800b3b4 <Anti_Tamper_Handle+0x168>)
 800b2a4:	4844      	ldr	r0, [pc, #272]	@ (800b3b8 <Anti_Tamper_Handle+0x16c>)
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	220a      	movs	r2, #10
 800b2aa:	f008 fbc1 	bl	8013a30 <HAL_UART_Transmit>

	unsigned char alarm[] = {0x5A, 0xA5, 0x05, 0x82, 0x00, 0xA0, 0x00, 0x7d};
 800b2ae:	231c      	movs	r3, #28
 800b2b0:	18fb      	adds	r3, r7, r3
 800b2b2:	4a42      	ldr	r2, [pc, #264]	@ (800b3bc <Anti_Tamper_Handle+0x170>)
 800b2b4:	ca03      	ldmia	r2!, {r0, r1}
 800b2b6:	c303      	stmia	r3!, {r0, r1}
	//flag protect set again (maybe power off), no need alarm, only show unlock
	if(flag_alarm_clear)			//判定鎖錶ALARM已響
 800b2b8:	4b41      	ldr	r3, [pc, #260]	@ (800b3c0 <Anti_Tamper_Handle+0x174>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <Anti_Tamper_Handle+0x7a>
	{
		Flag_alarm = FALSE;
 800b2c0:	4b40      	ldr	r3, [pc, #256]	@ (800b3c4 <Anti_Tamper_Handle+0x178>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	701a      	strb	r2, [r3, #0]
	}

	if(Flag_alarm)					//要響ALARM
 800b2c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b3c4 <Anti_Tamper_Handle+0x178>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d022      	beq.n	800b314 <Anti_Tamper_Handle+0xc8>
	{
		Flag_alarm = FALSE;
 800b2ce:	4b3d      	ldr	r3, [pc, #244]	@ (800b3c4 <Anti_Tamper_Handle+0x178>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
		Flag_set_alarm_rtc = TRUE;
 800b2d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b3c8 <Anti_Tamper_Handle+0x17c>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
		for(i=0; i<30; i++) //test 5s - set 30s                           //i<30指響30秒
 800b2da:	4b3c      	ldr	r3, [pc, #240]	@ (800b3cc <Anti_Tamper_Handle+0x180>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	801a      	strh	r2, [r3, #0]
 800b2e0:	e013      	b.n	800b30a <Anti_Tamper_Handle+0xbe>
		{
			time_update();
 800b2e2:	f7fe fbc5 	bl	8009a70 <time_update>
			HAL_UART_Transmit(&huart1, alarm, 8, 0xffff);
 800b2e6:	4b3a      	ldr	r3, [pc, #232]	@ (800b3d0 <Anti_Tamper_Handle+0x184>)
 800b2e8:	221c      	movs	r2, #28
 800b2ea:	18b9      	adds	r1, r7, r2
 800b2ec:	4832      	ldr	r0, [pc, #200]	@ (800b3b8 <Anti_Tamper_Handle+0x16c>)
 800b2ee:	2208      	movs	r2, #8
 800b2f0:	f008 fb9e 	bl	8013a30 <HAL_UART_Transmit>
			HAL_Delay(1000);
 800b2f4:	23fa      	movs	r3, #250	@ 0xfa
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f003 f913 	bl	800e524 <HAL_Delay>
		for(i=0; i<30; i++) //test 5s - set 30s                           //i<30指響30秒
 800b2fe:	4b33      	ldr	r3, [pc, #204]	@ (800b3cc <Anti_Tamper_Handle+0x180>)
 800b300:	881b      	ldrh	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	4b31      	ldr	r3, [pc, #196]	@ (800b3cc <Anti_Tamper_Handle+0x180>)
 800b308:	801a      	strh	r2, [r3, #0]
 800b30a:	4b30      	ldr	r3, [pc, #192]	@ (800b3cc <Anti_Tamper_Handle+0x180>)
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	2b1d      	cmp	r3, #29
 800b310:	d9e7      	bls.n	800b2e2 <Anti_Tamper_Handle+0x96>
		Dt=0;//Added by Edwin to prevent record any pulse

		time_update();
//		HAL_Delay(1000);
	}
}
 800b312:	e047      	b.n	800b3a4 <Anti_Tamper_Handle+0x158>
		unsigned char unlock[] = {0x5A, 0xA5, 0x09, 0x82, 0x10, 0x32, 0x55, 0x4E, 0x4C, 0x4F, 0x43, 0x4B};
 800b314:	1d3b      	adds	r3, r7, #4
 800b316:	4a2f      	ldr	r2, [pc, #188]	@ (800b3d4 <Anti_Tamper_Handle+0x188>)
 800b318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b31a:	c313      	stmia	r3!, {r0, r1, r4}
		HAL_UART_Transmit(&huart1, unlock, 12, 0x20);   //show "UNLOCK"
 800b31c:	1d39      	adds	r1, r7, #4
 800b31e:	4826      	ldr	r0, [pc, #152]	@ (800b3b8 <Anti_Tamper_Handle+0x16c>)
 800b320:	2320      	movs	r3, #32
 800b322:	220c      	movs	r2, #12
 800b324:	f008 fb84 	bl	8013a30 <HAL_UART_Transmit>
		a_buffer[0] = hh;
 800b328:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d8 <Anti_Tamper_Handle+0x18c>)
 800b32a:	781a      	ldrb	r2, [r3, #0]
 800b32c:	2118      	movs	r1, #24
 800b32e:	187b      	adds	r3, r7, r1
 800b330:	701a      	strb	r2, [r3, #0]
		a_buffer[1] = mm;
 800b332:	4b2a      	ldr	r3, [pc, #168]	@ (800b3dc <Anti_Tamper_Handle+0x190>)
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	187b      	adds	r3, r7, r1
 800b338:	705a      	strb	r2, [r3, #1]
		a_buffer[2] = ss;
 800b33a:	4b29      	ldr	r3, [pc, #164]	@ (800b3e0 <Anti_Tamper_Handle+0x194>)
 800b33c:	781a      	ldrb	r2, [r3, #0]
 800b33e:	187b      	adds	r3, r7, r1
 800b340:	709a      	strb	r2, [r3, #2]
		BCD2ASC(d_buffer, a_buffer, 6);  //convert BCD to ASCII to show time on screen
 800b342:	1879      	adds	r1, r7, r1
 800b344:	2410      	movs	r4, #16
 800b346:	193b      	adds	r3, r7, r4
 800b348:	2206      	movs	r2, #6
 800b34a:	0018      	movs	r0, r3
 800b34c:	f7ff f9ea 	bl	800a724 <BCD2ASC>
		Dur_HMS[13] = d_buffer[5];
 800b350:	0021      	movs	r1, r4
 800b352:	187b      	adds	r3, r7, r1
 800b354:	795a      	ldrb	r2, [r3, #5]
 800b356:	4b23      	ldr	r3, [pc, #140]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b358:	735a      	strb	r2, [r3, #13]
		Dur_HMS[12] = d_buffer[4];
 800b35a:	187b      	adds	r3, r7, r1
 800b35c:	791a      	ldrb	r2, [r3, #4]
 800b35e:	4b21      	ldr	r3, [pc, #132]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b360:	731a      	strb	r2, [r3, #12]
		Dur_HMS[10] = d_buffer[3];
 800b362:	187b      	adds	r3, r7, r1
 800b364:	78da      	ldrb	r2, [r3, #3]
 800b366:	4b1f      	ldr	r3, [pc, #124]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b368:	729a      	strb	r2, [r3, #10]
		Dur_HMS[9] = d_buffer[2];
 800b36a:	187b      	adds	r3, r7, r1
 800b36c:	789a      	ldrb	r2, [r3, #2]
 800b36e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b370:	725a      	strb	r2, [r3, #9]
		Dur_HMS[7] = d_buffer[1];
 800b372:	187b      	adds	r3, r7, r1
 800b374:	785a      	ldrb	r2, [r3, #1]
 800b376:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b378:	71da      	strb	r2, [r3, #7]
		Dur_HMS[6] = d_buffer[0];
 800b37a:	187b      	adds	r3, r7, r1
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	4b19      	ldr	r3, [pc, #100]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b380:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, Dur_HMS, 14, 0x20);
 800b382:	4918      	ldr	r1, [pc, #96]	@ (800b3e4 <Anti_Tamper_Handle+0x198>)
 800b384:	480c      	ldr	r0, [pc, #48]	@ (800b3b8 <Anti_Tamper_Handle+0x16c>)
 800b386:	2320      	movs	r3, #32
 800b388:	220e      	movs	r2, #14
 800b38a:	f008 fb51 	bl	8013a30 <HAL_UART_Transmit>
		counter= 0; //Added by Edwin to prevent record any pulse
 800b38e:	4b16      	ldr	r3, [pc, #88]	@ (800b3e8 <Anti_Tamper_Handle+0x19c>)
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
		last_counter=0; //Added by Edwin to prevent record any pulse
 800b394:	4b15      	ldr	r3, [pc, #84]	@ (800b3ec <Anti_Tamper_Handle+0x1a0>)
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
		Dt=0;//Added by Edwin to prevent record any pulse
 800b39a:	4b15      	ldr	r3, [pc, #84]	@ (800b3f0 <Anti_Tamper_Handle+0x1a4>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
		time_update();
 800b3a0:	f7fe fb66 	bl	8009a70 <time_update>
}
 800b3a4:	46c0      	nop			@ (mov r8, r8)
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	b00c      	add	sp, #48	@ 0x30
 800b3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ac:	08019eac 	.word	0x08019eac
 800b3b0:	20000e5c 	.word	0x20000e5c
 800b3b4:	20000310 	.word	0x20000310
 800b3b8:	20000700 	.word	0x20000700
 800b3bc:	08019eb4 	.word	0x08019eb4
 800b3c0:	20000e1f 	.word	0x20000e1f
 800b3c4:	200002f8 	.word	0x200002f8
 800b3c8:	20000ec6 	.word	0x20000ec6
 800b3cc:	20000ce4 	.word	0x20000ce4
 800b3d0:	0000ffff 	.word	0x0000ffff
 800b3d4:	08019ebc 	.word	0x08019ebc
 800b3d8:	20000e20 	.word	0x20000e20
 800b3dc:	20000e21 	.word	0x20000e21
 800b3e0:	20000e22 	.word	0x20000e22
 800b3e4:	20000054 	.word	0x20000054
 800b3e8:	20000e70 	.word	0x20000e70
 800b3ec:	20000e78 	.word	0x20000e78
 800b3f0:	20000e84 	.word	0x20000e84

0800b3f4 <Dec2ASC>:
//		Drv_state = S_VACANT;
//	}
//}

void Dec2ASC(uint32_t decimal, uint8_t* asc)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	uint8_t len = 0;
 800b3fe:	2317      	movs	r3, #23
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = decimal;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	613b      	str	r3, [r7, #16]

	do {
		len++;
 800b40a:	2117      	movs	r1, #23
 800b40c:	187b      	adds	r3, r7, r1
 800b40e:	781a      	ldrb	r2, [r3, #0]
 800b410:	187b      	adds	r3, r7, r1
 800b412:	3201      	adds	r2, #1
 800b414:	701a      	strb	r2, [r3, #0]
		tmp /= 10;
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	210a      	movs	r1, #10
 800b41a:	0018      	movs	r0, r3
 800b41c:	f7f4 fe84 	bl	8000128 <__udivsi3>
 800b420:	0003      	movs	r3, r0
 800b422:	613b      	str	r3, [r7, #16]
	} while (tmp > 0);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1ef      	bne.n	800b40a <Dec2ASC+0x16>

	for (int i=0; i<len; i++)
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	e019      	b.n	800b464 <Dec2ASC+0x70>
	{
		asc[7-i] = decimal % 10 + 0x30;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	210a      	movs	r1, #10
 800b434:	0018      	movs	r0, r3
 800b436:	f7f4 fefd 	bl	8000234 <__aeabi_uidivmod>
 800b43a:	000b      	movs	r3, r1
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2107      	movs	r1, #7
 800b442:	1acb      	subs	r3, r1, r3
 800b444:	0019      	movs	r1, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	185b      	adds	r3, r3, r1
 800b44a:	3230      	adds	r2, #48	@ 0x30
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	701a      	strb	r2, [r3, #0]
		decimal /= 10;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	210a      	movs	r1, #10
 800b454:	0018      	movs	r0, r3
 800b456:	f7f4 fe67 	bl	8000128 <__udivsi3>
 800b45a:	0003      	movs	r3, r0
 800b45c:	607b      	str	r3, [r7, #4]
	for (int i=0; i<len; i++)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	2317      	movs	r3, #23
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	dbdf      	blt.n	800b430 <Dec2ASC+0x3c>
	}
}
 800b470:	46c0      	nop			@ (mov r8, r8)
 800b472:	46c0      	nop			@ (mov r8, r8)
 800b474:	46bd      	mov	sp, r7
 800b476:	b006      	add	sp, #24
 800b478:	bd80      	pop	{r7, pc}

0800b47a <ASC2Dec>:

uint32_t ASC2Dec(uint8_t* asc)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
	uint32_t decimal = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<8; i++)
 800b486:	2300      	movs	r3, #0
 800b488:	60bb      	str	r3, [r7, #8]
 800b48a:	e01b      	b.n	800b4c4 <ASC2Dec+0x4a>
	{
		if (asc[i]>=0x30 && asc[i]<=0x39)
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	18d3      	adds	r3, r2, r3
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b2f      	cmp	r3, #47	@ 0x2f
 800b496:	d912      	bls.n	800b4be <ASC2Dec+0x44>
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	18d3      	adds	r3, r2, r3
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b39      	cmp	r3, #57	@ 0x39
 800b4a2:	d80c      	bhi.n	800b4be <ASC2Dec+0x44>
			decimal = 10*decimal + (asc[i] - 0x30);
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	0013      	movs	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	189b      	adds	r3, r3, r2
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	0019      	movs	r1, r3
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	18d3      	adds	r3, r2, r3
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	18cb      	adds	r3, r1, r3
 800b4ba:	3b30      	subs	r3, #48	@ 0x30
 800b4bc:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<8; i++)
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	dde0      	ble.n	800b48c <ASC2Dec+0x12>
	}
	return decimal;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	b004      	add	sp, #16
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <E_read>:

void E_read(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, 0xA1, (3<<7), 2, dataRead, 100, 1000);
 800b4da:	23c0      	movs	r3, #192	@ 0xc0
 800b4dc:	005a      	lsls	r2, r3, #1
 800b4de:	48fe      	ldr	r0, [pc, #1016]	@ (800b8d8 <E_read+0x404>)
 800b4e0:	23fa      	movs	r3, #250	@ 0xfa
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	9302      	str	r3, [sp, #8]
 800b4e6:	2364      	movs	r3, #100	@ 0x64
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	4bfc      	ldr	r3, [pc, #1008]	@ (800b8dc <E_read+0x408>)
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	21a1      	movs	r1, #161	@ 0xa1
 800b4f2:	f004 f9d5 	bl	800f8a0 <HAL_I2C_Mem_Read>
	tkm[0] = dataRead[0];
 800b4f6:	4bf9      	ldr	r3, [pc, #996]	@ (800b8dc <E_read+0x408>)
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	4bf9      	ldr	r3, [pc, #996]	@ (800b8e0 <E_read+0x40c>)
 800b4fc:	701a      	strb	r2, [r3, #0]
	tkm[1] = dataRead[1];
 800b4fe:	4bf7      	ldr	r3, [pc, #988]	@ (800b8dc <E_read+0x408>)
 800b500:	785a      	ldrb	r2, [r3, #1]
 800b502:	4bf7      	ldr	r3, [pc, #988]	@ (800b8e0 <E_read+0x40c>)
 800b504:	705a      	strb	r2, [r3, #1]
	tkm[2] = dataRead[2];
 800b506:	4bf5      	ldr	r3, [pc, #980]	@ (800b8dc <E_read+0x408>)
 800b508:	789a      	ldrb	r2, [r3, #2]
 800b50a:	4bf5      	ldr	r3, [pc, #980]	@ (800b8e0 <E_read+0x40c>)
 800b50c:	709a      	strb	r2, [r3, #2]
	tkm[3] = dataRead[3];
 800b50e:	4bf3      	ldr	r3, [pc, #972]	@ (800b8dc <E_read+0x408>)
 800b510:	78da      	ldrb	r2, [r3, #3]
 800b512:	4bf3      	ldr	r3, [pc, #972]	@ (800b8e0 <E_read+0x40c>)
 800b514:	70da      	strb	r2, [r3, #3]
	tkm[4] = dataRead[4];
 800b516:	4bf1      	ldr	r3, [pc, #964]	@ (800b8dc <E_read+0x408>)
 800b518:	791a      	ldrb	r2, [r3, #4]
 800b51a:	4bf1      	ldr	r3, [pc, #964]	@ (800b8e0 <E_read+0x40c>)
 800b51c:	711a      	strb	r2, [r3, #4]
	tkm[5] = dataRead[5];
 800b51e:	4bef      	ldr	r3, [pc, #956]	@ (800b8dc <E_read+0x408>)
 800b520:	795a      	ldrb	r2, [r3, #5]
 800b522:	4bef      	ldr	r3, [pc, #956]	@ (800b8e0 <E_read+0x40c>)
 800b524:	715a      	strb	r2, [r3, #5]
	tkm[6] = dataRead[6];
 800b526:	4bed      	ldr	r3, [pc, #948]	@ (800b8dc <E_read+0x408>)
 800b528:	799a      	ldrb	r2, [r3, #6]
 800b52a:	4bed      	ldr	r3, [pc, #948]	@ (800b8e0 <E_read+0x40c>)
 800b52c:	719a      	strb	r2, [r3, #6]
	tkm[7] = dataRead[7];
 800b52e:	4beb      	ldr	r3, [pc, #940]	@ (800b8dc <E_read+0x408>)
 800b530:	79da      	ldrb	r2, [r3, #7]
 800b532:	4beb      	ldr	r3, [pc, #940]	@ (800b8e0 <E_read+0x40c>)
 800b534:	71da      	strb	r2, [r3, #7]

	pkm[0] = dataRead[8];
 800b536:	4be9      	ldr	r3, [pc, #932]	@ (800b8dc <E_read+0x408>)
 800b538:	7a1a      	ldrb	r2, [r3, #8]
 800b53a:	4bea      	ldr	r3, [pc, #936]	@ (800b8e4 <E_read+0x410>)
 800b53c:	701a      	strb	r2, [r3, #0]
	pkm[1] = dataRead[9];
 800b53e:	4be7      	ldr	r3, [pc, #924]	@ (800b8dc <E_read+0x408>)
 800b540:	7a5a      	ldrb	r2, [r3, #9]
 800b542:	4be8      	ldr	r3, [pc, #928]	@ (800b8e4 <E_read+0x410>)
 800b544:	705a      	strb	r2, [r3, #1]
	pkm[2] = dataRead[10];
 800b546:	4be5      	ldr	r3, [pc, #916]	@ (800b8dc <E_read+0x408>)
 800b548:	7a9a      	ldrb	r2, [r3, #10]
 800b54a:	4be6      	ldr	r3, [pc, #920]	@ (800b8e4 <E_read+0x410>)
 800b54c:	709a      	strb	r2, [r3, #2]
	pkm[3] = dataRead[11];
 800b54e:	4be3      	ldr	r3, [pc, #908]	@ (800b8dc <E_read+0x408>)
 800b550:	7ada      	ldrb	r2, [r3, #11]
 800b552:	4be4      	ldr	r3, [pc, #912]	@ (800b8e4 <E_read+0x410>)
 800b554:	70da      	strb	r2, [r3, #3]
	pkm[4] = dataRead[12];
 800b556:	4be1      	ldr	r3, [pc, #900]	@ (800b8dc <E_read+0x408>)
 800b558:	7b1a      	ldrb	r2, [r3, #12]
 800b55a:	4be2      	ldr	r3, [pc, #904]	@ (800b8e4 <E_read+0x410>)
 800b55c:	711a      	strb	r2, [r3, #4]
	pkm[5] = dataRead[13];
 800b55e:	4bdf      	ldr	r3, [pc, #892]	@ (800b8dc <E_read+0x408>)
 800b560:	7b5a      	ldrb	r2, [r3, #13]
 800b562:	4be0      	ldr	r3, [pc, #896]	@ (800b8e4 <E_read+0x410>)
 800b564:	715a      	strb	r2, [r3, #5]
	pkm[6] = dataRead[14];
 800b566:	4bdd      	ldr	r3, [pc, #884]	@ (800b8dc <E_read+0x408>)
 800b568:	7b9a      	ldrb	r2, [r3, #14]
 800b56a:	4bde      	ldr	r3, [pc, #888]	@ (800b8e4 <E_read+0x410>)
 800b56c:	719a      	strb	r2, [r3, #6]
	pkm[7] = dataRead[15];
 800b56e:	4bdb      	ldr	r3, [pc, #876]	@ (800b8dc <E_read+0x408>)
 800b570:	7bda      	ldrb	r2, [r3, #15]
 800b572:	4bdc      	ldr	r3, [pc, #880]	@ (800b8e4 <E_read+0x410>)
 800b574:	71da      	strb	r2, [r3, #7]

	tflag[0] = dataRead[16];
 800b576:	4bd9      	ldr	r3, [pc, #868]	@ (800b8dc <E_read+0x408>)
 800b578:	7c1a      	ldrb	r2, [r3, #16]
 800b57a:	4bdb      	ldr	r3, [pc, #876]	@ (800b8e8 <E_read+0x414>)
 800b57c:	701a      	strb	r2, [r3, #0]
	tflag[1] = dataRead[17];
 800b57e:	4bd7      	ldr	r3, [pc, #860]	@ (800b8dc <E_read+0x408>)
 800b580:	7c5a      	ldrb	r2, [r3, #17]
 800b582:	4bd9      	ldr	r3, [pc, #868]	@ (800b8e8 <E_read+0x414>)
 800b584:	705a      	strb	r2, [r3, #1]
	tflag[2] = dataRead[18];
 800b586:	4bd5      	ldr	r3, [pc, #852]	@ (800b8dc <E_read+0x408>)
 800b588:	7c9a      	ldrb	r2, [r3, #18]
 800b58a:	4bd7      	ldr	r3, [pc, #860]	@ (800b8e8 <E_read+0x414>)
 800b58c:	709a      	strb	r2, [r3, #2]
	tflag[3] = dataRead[19];
 800b58e:	4bd3      	ldr	r3, [pc, #844]	@ (800b8dc <E_read+0x408>)
 800b590:	7cda      	ldrb	r2, [r3, #19]
 800b592:	4bd5      	ldr	r3, [pc, #852]	@ (800b8e8 <E_read+0x414>)
 800b594:	70da      	strb	r2, [r3, #3]
	tflag[4] = dataRead[20];
 800b596:	4bd1      	ldr	r3, [pc, #836]	@ (800b8dc <E_read+0x408>)
 800b598:	7d1a      	ldrb	r2, [r3, #20]
 800b59a:	4bd3      	ldr	r3, [pc, #844]	@ (800b8e8 <E_read+0x414>)
 800b59c:	711a      	strb	r2, [r3, #4]
	tflag[5] = dataRead[21];
 800b59e:	4bcf      	ldr	r3, [pc, #828]	@ (800b8dc <E_read+0x408>)
 800b5a0:	7d5a      	ldrb	r2, [r3, #21]
 800b5a2:	4bd1      	ldr	r3, [pc, #836]	@ (800b8e8 <E_read+0x414>)
 800b5a4:	715a      	strb	r2, [r3, #5]
	tflag[6] = dataRead[22];
 800b5a6:	4bcd      	ldr	r3, [pc, #820]	@ (800b8dc <E_read+0x408>)
 800b5a8:	7d9a      	ldrb	r2, [r3, #22]
 800b5aa:	4bcf      	ldr	r3, [pc, #828]	@ (800b8e8 <E_read+0x414>)
 800b5ac:	719a      	strb	r2, [r3, #6]
	tflag[7] = dataRead[23];
 800b5ae:	4bcb      	ldr	r3, [pc, #812]	@ (800b8dc <E_read+0x408>)
 800b5b0:	7dda      	ldrb	r2, [r3, #23]
 800b5b2:	4bcd      	ldr	r3, [pc, #820]	@ (800b8e8 <E_read+0x414>)
 800b5b4:	71da      	strb	r2, [r3, #7]

	cflag[0] = dataRead[24];
 800b5b6:	4bc9      	ldr	r3, [pc, #804]	@ (800b8dc <E_read+0x408>)
 800b5b8:	7e1a      	ldrb	r2, [r3, #24]
 800b5ba:	4bcc      	ldr	r3, [pc, #816]	@ (800b8ec <E_read+0x418>)
 800b5bc:	701a      	strb	r2, [r3, #0]
	cflag[1] = dataRead[25];
 800b5be:	4bc7      	ldr	r3, [pc, #796]	@ (800b8dc <E_read+0x408>)
 800b5c0:	7e5a      	ldrb	r2, [r3, #25]
 800b5c2:	4bca      	ldr	r3, [pc, #808]	@ (800b8ec <E_read+0x418>)
 800b5c4:	705a      	strb	r2, [r3, #1]
	cflag[2] = dataRead[26];
 800b5c6:	4bc5      	ldr	r3, [pc, #788]	@ (800b8dc <E_read+0x408>)
 800b5c8:	7e9a      	ldrb	r2, [r3, #26]
 800b5ca:	4bc8      	ldr	r3, [pc, #800]	@ (800b8ec <E_read+0x418>)
 800b5cc:	709a      	strb	r2, [r3, #2]
	cflag[3] = dataRead[27];
 800b5ce:	4bc3      	ldr	r3, [pc, #780]	@ (800b8dc <E_read+0x408>)
 800b5d0:	7eda      	ldrb	r2, [r3, #27]
 800b5d2:	4bc6      	ldr	r3, [pc, #792]	@ (800b8ec <E_read+0x418>)
 800b5d4:	70da      	strb	r2, [r3, #3]
	cflag[4] = dataRead[28];
 800b5d6:	4bc1      	ldr	r3, [pc, #772]	@ (800b8dc <E_read+0x408>)
 800b5d8:	7f1a      	ldrb	r2, [r3, #28]
 800b5da:	4bc4      	ldr	r3, [pc, #784]	@ (800b8ec <E_read+0x418>)
 800b5dc:	711a      	strb	r2, [r3, #4]
	cflag[5] = dataRead[29];
 800b5de:	4bbf      	ldr	r3, [pc, #764]	@ (800b8dc <E_read+0x408>)
 800b5e0:	7f5a      	ldrb	r2, [r3, #29]
 800b5e2:	4bc2      	ldr	r3, [pc, #776]	@ (800b8ec <E_read+0x418>)
 800b5e4:	715a      	strb	r2, [r3, #5]
	cflag[6] = dataRead[30];
 800b5e6:	4bbd      	ldr	r3, [pc, #756]	@ (800b8dc <E_read+0x408>)
 800b5e8:	7f9a      	ldrb	r2, [r3, #30]
 800b5ea:	4bc0      	ldr	r3, [pc, #768]	@ (800b8ec <E_read+0x418>)
 800b5ec:	719a      	strb	r2, [r3, #6]
	cflag[7] = dataRead[31];
 800b5ee:	4bbb      	ldr	r3, [pc, #748]	@ (800b8dc <E_read+0x408>)
 800b5f0:	7fda      	ldrb	r2, [r3, #31]
 800b5f2:	4bbe      	ldr	r3, [pc, #760]	@ (800b8ec <E_read+0x418>)
 800b5f4:	71da      	strb	r2, [r3, #7]

	tpulse[0] = dataRead[32];
 800b5f6:	4bb9      	ldr	r3, [pc, #740]	@ (800b8dc <E_read+0x408>)
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	5c9a      	ldrb	r2, [r3, r2]
 800b5fc:	4bbc      	ldr	r3, [pc, #752]	@ (800b8f0 <E_read+0x41c>)
 800b5fe:	701a      	strb	r2, [r3, #0]
	tpulse[1] = dataRead[33];
 800b600:	4bb6      	ldr	r3, [pc, #728]	@ (800b8dc <E_read+0x408>)
 800b602:	2221      	movs	r2, #33	@ 0x21
 800b604:	5c9a      	ldrb	r2, [r3, r2]
 800b606:	4bba      	ldr	r3, [pc, #744]	@ (800b8f0 <E_read+0x41c>)
 800b608:	705a      	strb	r2, [r3, #1]
	tpulse[2] = dataRead[34];
 800b60a:	4bb4      	ldr	r3, [pc, #720]	@ (800b8dc <E_read+0x408>)
 800b60c:	2222      	movs	r2, #34	@ 0x22
 800b60e:	5c9a      	ldrb	r2, [r3, r2]
 800b610:	4bb7      	ldr	r3, [pc, #732]	@ (800b8f0 <E_read+0x41c>)
 800b612:	709a      	strb	r2, [r3, #2]
	tpulse[3] = dataRead[35];
 800b614:	4bb1      	ldr	r3, [pc, #708]	@ (800b8dc <E_read+0x408>)
 800b616:	2223      	movs	r2, #35	@ 0x23
 800b618:	5c9a      	ldrb	r2, [r3, r2]
 800b61a:	4bb5      	ldr	r3, [pc, #724]	@ (800b8f0 <E_read+0x41c>)
 800b61c:	70da      	strb	r2, [r3, #3]
	tpulse[4] = dataRead[36];
 800b61e:	4baf      	ldr	r3, [pc, #700]	@ (800b8dc <E_read+0x408>)
 800b620:	2224      	movs	r2, #36	@ 0x24
 800b622:	5c9a      	ldrb	r2, [r3, r2]
 800b624:	4bb2      	ldr	r3, [pc, #712]	@ (800b8f0 <E_read+0x41c>)
 800b626:	711a      	strb	r2, [r3, #4]
	tpulse[5] = dataRead[37];
 800b628:	4bac      	ldr	r3, [pc, #688]	@ (800b8dc <E_read+0x408>)
 800b62a:	2225      	movs	r2, #37	@ 0x25
 800b62c:	5c9a      	ldrb	r2, [r3, r2]
 800b62e:	4bb0      	ldr	r3, [pc, #704]	@ (800b8f0 <E_read+0x41c>)
 800b630:	715a      	strb	r2, [r3, #5]
	tpulse[6] = dataRead[38];
 800b632:	4baa      	ldr	r3, [pc, #680]	@ (800b8dc <E_read+0x408>)
 800b634:	2226      	movs	r2, #38	@ 0x26
 800b636:	5c9a      	ldrb	r2, [r3, r2]
 800b638:	4bad      	ldr	r3, [pc, #692]	@ (800b8f0 <E_read+0x41c>)
 800b63a:	719a      	strb	r2, [r3, #6]
	tpulse[7] = dataRead[39];
 800b63c:	4ba7      	ldr	r3, [pc, #668]	@ (800b8dc <E_read+0x408>)
 800b63e:	2227      	movs	r2, #39	@ 0x27
 800b640:	5c9a      	ldrb	r2, [r3, r2]
 800b642:	4bab      	ldr	r3, [pc, #684]	@ (800b8f0 <E_read+0x41c>)
 800b644:	71da      	strb	r2, [r3, #7]

	tfare[0] = dataRead[40];
 800b646:	4ba5      	ldr	r3, [pc, #660]	@ (800b8dc <E_read+0x408>)
 800b648:	2228      	movs	r2, #40	@ 0x28
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	4ba9      	ldr	r3, [pc, #676]	@ (800b8f4 <E_read+0x420>)
 800b64e:	701a      	strb	r2, [r3, #0]
	tfare[1] = dataRead[41];
 800b650:	4ba2      	ldr	r3, [pc, #648]	@ (800b8dc <E_read+0x408>)
 800b652:	2229      	movs	r2, #41	@ 0x29
 800b654:	5c9a      	ldrb	r2, [r3, r2]
 800b656:	4ba7      	ldr	r3, [pc, #668]	@ (800b8f4 <E_read+0x420>)
 800b658:	705a      	strb	r2, [r3, #1]
	tfare[2] = dataRead[42];
 800b65a:	4ba0      	ldr	r3, [pc, #640]	@ (800b8dc <E_read+0x408>)
 800b65c:	222a      	movs	r2, #42	@ 0x2a
 800b65e:	5c9a      	ldrb	r2, [r3, r2]
 800b660:	4ba4      	ldr	r3, [pc, #656]	@ (800b8f4 <E_read+0x420>)
 800b662:	709a      	strb	r2, [r3, #2]
	tfare[3] = dataRead[43];
 800b664:	4b9d      	ldr	r3, [pc, #628]	@ (800b8dc <E_read+0x408>)
 800b666:	222b      	movs	r2, #43	@ 0x2b
 800b668:	5c9a      	ldrb	r2, [r3, r2]
 800b66a:	4ba2      	ldr	r3, [pc, #648]	@ (800b8f4 <E_read+0x420>)
 800b66c:	70da      	strb	r2, [r3, #3]
	tfare[4] = dataRead[44];
 800b66e:	4b9b      	ldr	r3, [pc, #620]	@ (800b8dc <E_read+0x408>)
 800b670:	222c      	movs	r2, #44	@ 0x2c
 800b672:	5c9a      	ldrb	r2, [r3, r2]
 800b674:	4b9f      	ldr	r3, [pc, #636]	@ (800b8f4 <E_read+0x420>)
 800b676:	711a      	strb	r2, [r3, #4]
	tfare[5] = dataRead[45];
 800b678:	4b98      	ldr	r3, [pc, #608]	@ (800b8dc <E_read+0x408>)
 800b67a:	222d      	movs	r2, #45	@ 0x2d
 800b67c:	5c9a      	ldrb	r2, [r3, r2]
 800b67e:	4b9d      	ldr	r3, [pc, #628]	@ (800b8f4 <E_read+0x420>)
 800b680:	715a      	strb	r2, [r3, #5]
	tfare[6] = dataRead[46];
 800b682:	4b96      	ldr	r3, [pc, #600]	@ (800b8dc <E_read+0x408>)
 800b684:	222e      	movs	r2, #46	@ 0x2e
 800b686:	5c9a      	ldrb	r2, [r3, r2]
 800b688:	4b9a      	ldr	r3, [pc, #616]	@ (800b8f4 <E_read+0x420>)
 800b68a:	719a      	strb	r2, [r3, #6]
	tfare[7] = dataRead[47];
 800b68c:	4b93      	ldr	r3, [pc, #588]	@ (800b8dc <E_read+0x408>)
 800b68e:	222f      	movs	r2, #47	@ 0x2f
 800b690:	5c9a      	ldrb	r2, [r3, r2]
 800b692:	4b98      	ldr	r3, [pc, #608]	@ (800b8f4 <E_read+0x420>)
 800b694:	71da      	strb	r2, [r3, #7]

	tsub[0] = dataRead[48];
 800b696:	4b91      	ldr	r3, [pc, #580]	@ (800b8dc <E_read+0x408>)
 800b698:	2230      	movs	r2, #48	@ 0x30
 800b69a:	5c9a      	ldrb	r2, [r3, r2]
 800b69c:	4b96      	ldr	r3, [pc, #600]	@ (800b8f8 <E_read+0x424>)
 800b69e:	701a      	strb	r2, [r3, #0]
	tsub[1] = dataRead[49];
 800b6a0:	4b8e      	ldr	r3, [pc, #568]	@ (800b8dc <E_read+0x408>)
 800b6a2:	2231      	movs	r2, #49	@ 0x31
 800b6a4:	5c9a      	ldrb	r2, [r3, r2]
 800b6a6:	4b94      	ldr	r3, [pc, #592]	@ (800b8f8 <E_read+0x424>)
 800b6a8:	705a      	strb	r2, [r3, #1]
	tsub[2] = dataRead[50];
 800b6aa:	4b8c      	ldr	r3, [pc, #560]	@ (800b8dc <E_read+0x408>)
 800b6ac:	2232      	movs	r2, #50	@ 0x32
 800b6ae:	5c9a      	ldrb	r2, [r3, r2]
 800b6b0:	4b91      	ldr	r3, [pc, #580]	@ (800b8f8 <E_read+0x424>)
 800b6b2:	709a      	strb	r2, [r3, #2]
	tsub[3] = dataRead[51];
 800b6b4:	4b89      	ldr	r3, [pc, #548]	@ (800b8dc <E_read+0x408>)
 800b6b6:	2233      	movs	r2, #51	@ 0x33
 800b6b8:	5c9a      	ldrb	r2, [r3, r2]
 800b6ba:	4b8f      	ldr	r3, [pc, #572]	@ (800b8f8 <E_read+0x424>)
 800b6bc:	70da      	strb	r2, [r3, #3]
	tsub[4] = dataRead[52];
 800b6be:	4b87      	ldr	r3, [pc, #540]	@ (800b8dc <E_read+0x408>)
 800b6c0:	2234      	movs	r2, #52	@ 0x34
 800b6c2:	5c9a      	ldrb	r2, [r3, r2]
 800b6c4:	4b8c      	ldr	r3, [pc, #560]	@ (800b8f8 <E_read+0x424>)
 800b6c6:	711a      	strb	r2, [r3, #4]
	tsub[5] = dataRead[53];
 800b6c8:	4b84      	ldr	r3, [pc, #528]	@ (800b8dc <E_read+0x408>)
 800b6ca:	2235      	movs	r2, #53	@ 0x35
 800b6cc:	5c9a      	ldrb	r2, [r3, r2]
 800b6ce:	4b8a      	ldr	r3, [pc, #552]	@ (800b8f8 <E_read+0x424>)
 800b6d0:	715a      	strb	r2, [r3, #5]
	tsub[6] = dataRead[54];
 800b6d2:	4b82      	ldr	r3, [pc, #520]	@ (800b8dc <E_read+0x408>)
 800b6d4:	2236      	movs	r2, #54	@ 0x36
 800b6d6:	5c9a      	ldrb	r2, [r3, r2]
 800b6d8:	4b87      	ldr	r3, [pc, #540]	@ (800b8f8 <E_read+0x424>)
 800b6da:	719a      	strb	r2, [r3, #6]
	tsub[7] = dataRead[55];
 800b6dc:	4b7f      	ldr	r3, [pc, #508]	@ (800b8dc <E_read+0x408>)
 800b6de:	2237      	movs	r2, #55	@ 0x37
 800b6e0:	5c9a      	ldrb	r2, [r3, r2]
 800b6e2:	4b85      	ldr	r3, [pc, #532]	@ (800b8f8 <E_read+0x424>)
 800b6e4:	71da      	strb	r2, [r3, #7]

	cfare[0] = dataRead[56];
 800b6e6:	4b7d      	ldr	r3, [pc, #500]	@ (800b8dc <E_read+0x408>)
 800b6e8:	2238      	movs	r2, #56	@ 0x38
 800b6ea:	5c9a      	ldrb	r2, [r3, r2]
 800b6ec:	4b83      	ldr	r3, [pc, #524]	@ (800b8fc <E_read+0x428>)
 800b6ee:	701a      	strb	r2, [r3, #0]
	cfare[1] = dataRead[57];
 800b6f0:	4b7a      	ldr	r3, [pc, #488]	@ (800b8dc <E_read+0x408>)
 800b6f2:	2239      	movs	r2, #57	@ 0x39
 800b6f4:	5c9a      	ldrb	r2, [r3, r2]
 800b6f6:	4b81      	ldr	r3, [pc, #516]	@ (800b8fc <E_read+0x428>)
 800b6f8:	705a      	strb	r2, [r3, #1]
	cfare[2] = dataRead[58];
 800b6fa:	4b78      	ldr	r3, [pc, #480]	@ (800b8dc <E_read+0x408>)
 800b6fc:	223a      	movs	r2, #58	@ 0x3a
 800b6fe:	5c9a      	ldrb	r2, [r3, r2]
 800b700:	4b7e      	ldr	r3, [pc, #504]	@ (800b8fc <E_read+0x428>)
 800b702:	709a      	strb	r2, [r3, #2]
	cfare[3] = dataRead[59];
 800b704:	4b75      	ldr	r3, [pc, #468]	@ (800b8dc <E_read+0x408>)
 800b706:	223b      	movs	r2, #59	@ 0x3b
 800b708:	5c9a      	ldrb	r2, [r3, r2]
 800b70a:	4b7c      	ldr	r3, [pc, #496]	@ (800b8fc <E_read+0x428>)
 800b70c:	70da      	strb	r2, [r3, #3]
	cfare[4] = dataRead[60];
 800b70e:	4b73      	ldr	r3, [pc, #460]	@ (800b8dc <E_read+0x408>)
 800b710:	223c      	movs	r2, #60	@ 0x3c
 800b712:	5c9a      	ldrb	r2, [r3, r2]
 800b714:	4b79      	ldr	r3, [pc, #484]	@ (800b8fc <E_read+0x428>)
 800b716:	711a      	strb	r2, [r3, #4]
	cfare[5] = dataRead[61];
 800b718:	4b70      	ldr	r3, [pc, #448]	@ (800b8dc <E_read+0x408>)
 800b71a:	223d      	movs	r2, #61	@ 0x3d
 800b71c:	5c9a      	ldrb	r2, [r3, r2]
 800b71e:	4b77      	ldr	r3, [pc, #476]	@ (800b8fc <E_read+0x428>)
 800b720:	715a      	strb	r2, [r3, #5]
	cfare[6] = dataRead[62];
 800b722:	4b6e      	ldr	r3, [pc, #440]	@ (800b8dc <E_read+0x408>)
 800b724:	223e      	movs	r2, #62	@ 0x3e
 800b726:	5c9a      	ldrb	r2, [r3, r2]
 800b728:	4b74      	ldr	r3, [pc, #464]	@ (800b8fc <E_read+0x428>)
 800b72a:	719a      	strb	r2, [r3, #6]
	cfare[7] = dataRead[63];
 800b72c:	4b6b      	ldr	r3, [pc, #428]	@ (800b8dc <E_read+0x408>)
 800b72e:	223f      	movs	r2, #63	@ 0x3f
 800b730:	5c9a      	ldrb	r2, [r3, r2]
 800b732:	4b72      	ldr	r3, [pc, #456]	@ (800b8fc <E_read+0x428>)
 800b734:	71da      	strb	r2, [r3, #7]

	csub[0] = dataRead[64];
 800b736:	4b69      	ldr	r3, [pc, #420]	@ (800b8dc <E_read+0x408>)
 800b738:	2240      	movs	r2, #64	@ 0x40
 800b73a:	5c9a      	ldrb	r2, [r3, r2]
 800b73c:	4b70      	ldr	r3, [pc, #448]	@ (800b900 <E_read+0x42c>)
 800b73e:	701a      	strb	r2, [r3, #0]
	csub[1] = dataRead[65];
 800b740:	4b66      	ldr	r3, [pc, #408]	@ (800b8dc <E_read+0x408>)
 800b742:	2241      	movs	r2, #65	@ 0x41
 800b744:	5c9a      	ldrb	r2, [r3, r2]
 800b746:	4b6e      	ldr	r3, [pc, #440]	@ (800b900 <E_read+0x42c>)
 800b748:	705a      	strb	r2, [r3, #1]
	csub[2] = dataRead[66];
 800b74a:	4b64      	ldr	r3, [pc, #400]	@ (800b8dc <E_read+0x408>)
 800b74c:	2242      	movs	r2, #66	@ 0x42
 800b74e:	5c9a      	ldrb	r2, [r3, r2]
 800b750:	4b6b      	ldr	r3, [pc, #428]	@ (800b900 <E_read+0x42c>)
 800b752:	709a      	strb	r2, [r3, #2]
	csub[3] = dataRead[67];
 800b754:	4b61      	ldr	r3, [pc, #388]	@ (800b8dc <E_read+0x408>)
 800b756:	2243      	movs	r2, #67	@ 0x43
 800b758:	5c9a      	ldrb	r2, [r3, r2]
 800b75a:	4b69      	ldr	r3, [pc, #420]	@ (800b900 <E_read+0x42c>)
 800b75c:	70da      	strb	r2, [r3, #3]
	csub[4] = dataRead[68];
 800b75e:	4b5f      	ldr	r3, [pc, #380]	@ (800b8dc <E_read+0x408>)
 800b760:	2244      	movs	r2, #68	@ 0x44
 800b762:	5c9a      	ldrb	r2, [r3, r2]
 800b764:	4b66      	ldr	r3, [pc, #408]	@ (800b900 <E_read+0x42c>)
 800b766:	711a      	strb	r2, [r3, #4]
	csub[5] = dataRead[69];
 800b768:	4b5c      	ldr	r3, [pc, #368]	@ (800b8dc <E_read+0x408>)
 800b76a:	2245      	movs	r2, #69	@ 0x45
 800b76c:	5c9a      	ldrb	r2, [r3, r2]
 800b76e:	4b64      	ldr	r3, [pc, #400]	@ (800b900 <E_read+0x42c>)
 800b770:	715a      	strb	r2, [r3, #5]
	csub[6] = dataRead[70];
 800b772:	4b5a      	ldr	r3, [pc, #360]	@ (800b8dc <E_read+0x408>)
 800b774:	2246      	movs	r2, #70	@ 0x46
 800b776:	5c9a      	ldrb	r2, [r3, r2]
 800b778:	4b61      	ldr	r3, [pc, #388]	@ (800b900 <E_read+0x42c>)
 800b77a:	719a      	strb	r2, [r3, #6]
	csub[7] = dataRead[71];
 800b77c:	4b57      	ldr	r3, [pc, #348]	@ (800b8dc <E_read+0x408>)
 800b77e:	2247      	movs	r2, #71	@ 0x47
 800b780:	5c9a      	ldrb	r2, [r3, r2]
 800b782:	4b5f      	ldr	r3, [pc, #380]	@ (800b900 <E_read+0x42c>)
 800b784:	71da      	strb	r2, [r3, #7]

	ttime[0] = dataRead[72];
 800b786:	4b55      	ldr	r3, [pc, #340]	@ (800b8dc <E_read+0x408>)
 800b788:	2248      	movs	r2, #72	@ 0x48
 800b78a:	5c9a      	ldrb	r2, [r3, r2]
 800b78c:	4b5d      	ldr	r3, [pc, #372]	@ (800b904 <E_read+0x430>)
 800b78e:	701a      	strb	r2, [r3, #0]
	ttime[1] = dataRead[73];
 800b790:	4b52      	ldr	r3, [pc, #328]	@ (800b8dc <E_read+0x408>)
 800b792:	2249      	movs	r2, #73	@ 0x49
 800b794:	5c9a      	ldrb	r2, [r3, r2]
 800b796:	4b5b      	ldr	r3, [pc, #364]	@ (800b904 <E_read+0x430>)
 800b798:	705a      	strb	r2, [r3, #1]
	ttime[2] = dataRead[74];
 800b79a:	4b50      	ldr	r3, [pc, #320]	@ (800b8dc <E_read+0x408>)
 800b79c:	224a      	movs	r2, #74	@ 0x4a
 800b79e:	5c9a      	ldrb	r2, [r3, r2]
 800b7a0:	4b58      	ldr	r3, [pc, #352]	@ (800b904 <E_read+0x430>)
 800b7a2:	709a      	strb	r2, [r3, #2]
	ttime[3] = dataRead[75];
 800b7a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b8dc <E_read+0x408>)
 800b7a6:	224b      	movs	r2, #75	@ 0x4b
 800b7a8:	5c9a      	ldrb	r2, [r3, r2]
 800b7aa:	4b56      	ldr	r3, [pc, #344]	@ (800b904 <E_read+0x430>)
 800b7ac:	70da      	strb	r2, [r3, #3]
	ttime[4] = dataRead[76];
 800b7ae:	4b4b      	ldr	r3, [pc, #300]	@ (800b8dc <E_read+0x408>)
 800b7b0:	224c      	movs	r2, #76	@ 0x4c
 800b7b2:	5c9a      	ldrb	r2, [r3, r2]
 800b7b4:	4b53      	ldr	r3, [pc, #332]	@ (800b904 <E_read+0x430>)
 800b7b6:	711a      	strb	r2, [r3, #4]
	ttime[5] = dataRead[77];
 800b7b8:	4b48      	ldr	r3, [pc, #288]	@ (800b8dc <E_read+0x408>)
 800b7ba:	224d      	movs	r2, #77	@ 0x4d
 800b7bc:	5c9a      	ldrb	r2, [r3, r2]
 800b7be:	4b51      	ldr	r3, [pc, #324]	@ (800b904 <E_read+0x430>)
 800b7c0:	715a      	strb	r2, [r3, #5]
	ttime[6] = dataRead[78];
 800b7c2:	4b46      	ldr	r3, [pc, #280]	@ (800b8dc <E_read+0x408>)
 800b7c4:	224e      	movs	r2, #78	@ 0x4e
 800b7c6:	5c9a      	ldrb	r2, [r3, r2]
 800b7c8:	4b4e      	ldr	r3, [pc, #312]	@ (800b904 <E_read+0x430>)
 800b7ca:	719a      	strb	r2, [r3, #6]
	ttime[7] = dataRead[79];
 800b7cc:	4b43      	ldr	r3, [pc, #268]	@ (800b8dc <E_read+0x408>)
 800b7ce:	224f      	movs	r2, #79	@ 0x4f
 800b7d0:	5c9a      	ldrb	r2, [r3, r2]
 800b7d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b904 <E_read+0x430>)
 800b7d4:	71da      	strb	r2, [r3, #7]

	pulses[0] = dataRead[80];
 800b7d6:	4b41      	ldr	r3, [pc, #260]	@ (800b8dc <E_read+0x408>)
 800b7d8:	2250      	movs	r2, #80	@ 0x50
 800b7da:	5c9a      	ldrb	r2, [r3, r2]
 800b7dc:	4b4a      	ldr	r3, [pc, #296]	@ (800b908 <E_read+0x434>)
 800b7de:	701a      	strb	r2, [r3, #0]
	pulses[1] = dataRead[81];
 800b7e0:	4b3e      	ldr	r3, [pc, #248]	@ (800b8dc <E_read+0x408>)
 800b7e2:	2251      	movs	r2, #81	@ 0x51
 800b7e4:	5c9a      	ldrb	r2, [r3, r2]
 800b7e6:	4b48      	ldr	r3, [pc, #288]	@ (800b908 <E_read+0x434>)
 800b7e8:	705a      	strb	r2, [r3, #1]
	pulses[2] = dataRead[82];
 800b7ea:	4b3c      	ldr	r3, [pc, #240]	@ (800b8dc <E_read+0x408>)
 800b7ec:	2252      	movs	r2, #82	@ 0x52
 800b7ee:	5c9a      	ldrb	r2, [r3, r2]
 800b7f0:	4b45      	ldr	r3, [pc, #276]	@ (800b908 <E_read+0x434>)
 800b7f2:	709a      	strb	r2, [r3, #2]
	pulses[3] = dataRead[83];
 800b7f4:	4b39      	ldr	r3, [pc, #228]	@ (800b8dc <E_read+0x408>)
 800b7f6:	2253      	movs	r2, #83	@ 0x53
 800b7f8:	5c9a      	ldrb	r2, [r3, r2]
 800b7fa:	4b43      	ldr	r3, [pc, #268]	@ (800b908 <E_read+0x434>)
 800b7fc:	70da      	strb	r2, [r3, #3]
	pulses[4] = dataRead[84];
 800b7fe:	4b37      	ldr	r3, [pc, #220]	@ (800b8dc <E_read+0x408>)
 800b800:	2254      	movs	r2, #84	@ 0x54
 800b802:	5c9a      	ldrb	r2, [r3, r2]
 800b804:	4b40      	ldr	r3, [pc, #256]	@ (800b908 <E_read+0x434>)
 800b806:	711a      	strb	r2, [r3, #4]
	pulses[5] = dataRead[85];
 800b808:	4b34      	ldr	r3, [pc, #208]	@ (800b8dc <E_read+0x408>)
 800b80a:	2255      	movs	r2, #85	@ 0x55
 800b80c:	5c9a      	ldrb	r2, [r3, r2]
 800b80e:	4b3e      	ldr	r3, [pc, #248]	@ (800b908 <E_read+0x434>)
 800b810:	715a      	strb	r2, [r3, #5]
	pulses[6] = dataRead[86];
 800b812:	4b32      	ldr	r3, [pc, #200]	@ (800b8dc <E_read+0x408>)
 800b814:	2256      	movs	r2, #86	@ 0x56
 800b816:	5c9a      	ldrb	r2, [r3, r2]
 800b818:	4b3b      	ldr	r3, [pc, #236]	@ (800b908 <E_read+0x434>)
 800b81a:	719a      	strb	r2, [r3, #6]
	pulses[7] = dataRead[87];
 800b81c:	4b2f      	ldr	r3, [pc, #188]	@ (800b8dc <E_read+0x408>)
 800b81e:	2257      	movs	r2, #87	@ 0x57
 800b820:	5c9a      	ldrb	r2, [r3, r2]
 800b822:	4b39      	ldr	r3, [pc, #228]	@ (800b908 <E_read+0x434>)
 800b824:	71da      	strb	r2, [r3, #7]

	tkm_d = ASC2Dec(tkm);
 800b826:	4b2e      	ldr	r3, [pc, #184]	@ (800b8e0 <E_read+0x40c>)
 800b828:	0018      	movs	r0, r3
 800b82a:	f7ff fe26 	bl	800b47a <ASC2Dec>
 800b82e:	0002      	movs	r2, r0
 800b830:	4b36      	ldr	r3, [pc, #216]	@ (800b90c <E_read+0x438>)
 800b832:	601a      	str	r2, [r3, #0]
	pkm_d = ASC2Dec(pkm);
 800b834:	4b2b      	ldr	r3, [pc, #172]	@ (800b8e4 <E_read+0x410>)
 800b836:	0018      	movs	r0, r3
 800b838:	f7ff fe1f 	bl	800b47a <ASC2Dec>
 800b83c:	0002      	movs	r2, r0
 800b83e:	4b34      	ldr	r3, [pc, #208]	@ (800b910 <E_read+0x43c>)
 800b840:	601a      	str	r2, [r3, #0]
	tflag_d = ASC2Dec(tflag);
 800b842:	4b29      	ldr	r3, [pc, #164]	@ (800b8e8 <E_read+0x414>)
 800b844:	0018      	movs	r0, r3
 800b846:	f7ff fe18 	bl	800b47a <ASC2Dec>
 800b84a:	0002      	movs	r2, r0
 800b84c:	4b31      	ldr	r3, [pc, #196]	@ (800b914 <E_read+0x440>)
 800b84e:	601a      	str	r2, [r3, #0]
	cflag_d = ASC2Dec(cflag);
 800b850:	4b26      	ldr	r3, [pc, #152]	@ (800b8ec <E_read+0x418>)
 800b852:	0018      	movs	r0, r3
 800b854:	f7ff fe11 	bl	800b47a <ASC2Dec>
 800b858:	0002      	movs	r2, r0
 800b85a:	4b2f      	ldr	r3, [pc, #188]	@ (800b918 <E_read+0x444>)
 800b85c:	601a      	str	r2, [r3, #0]
	tpulse_d = ASC2Dec(tpulse);
 800b85e:	4b24      	ldr	r3, [pc, #144]	@ (800b8f0 <E_read+0x41c>)
 800b860:	0018      	movs	r0, r3
 800b862:	f7ff fe0a 	bl	800b47a <ASC2Dec>
 800b866:	0002      	movs	r2, r0
 800b868:	4b2c      	ldr	r3, [pc, #176]	@ (800b91c <E_read+0x448>)
 800b86a:	601a      	str	r2, [r3, #0]
	tfare_d = ASC2Dec(tfare);
 800b86c:	4b21      	ldr	r3, [pc, #132]	@ (800b8f4 <E_read+0x420>)
 800b86e:	0018      	movs	r0, r3
 800b870:	f7ff fe03 	bl	800b47a <ASC2Dec>
 800b874:	0002      	movs	r2, r0
 800b876:	4b2a      	ldr	r3, [pc, #168]	@ (800b920 <E_read+0x44c>)
 800b878:	601a      	str	r2, [r3, #0]
	tsub_d = ASC2Dec(tsub);
 800b87a:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f8 <E_read+0x424>)
 800b87c:	0018      	movs	r0, r3
 800b87e:	f7ff fdfc 	bl	800b47a <ASC2Dec>
 800b882:	0002      	movs	r2, r0
 800b884:	4b27      	ldr	r3, [pc, #156]	@ (800b924 <E_read+0x450>)
 800b886:	601a      	str	r2, [r3, #0]
	cfare_d = ASC2Dec(cfare);
 800b888:	4b1c      	ldr	r3, [pc, #112]	@ (800b8fc <E_read+0x428>)
 800b88a:	0018      	movs	r0, r3
 800b88c:	f7ff fdf5 	bl	800b47a <ASC2Dec>
 800b890:	0002      	movs	r2, r0
 800b892:	4b25      	ldr	r3, [pc, #148]	@ (800b928 <E_read+0x454>)
 800b894:	601a      	str	r2, [r3, #0]
	csub_d = ASC2Dec(csub);
 800b896:	4b1a      	ldr	r3, [pc, #104]	@ (800b900 <E_read+0x42c>)
 800b898:	0018      	movs	r0, r3
 800b89a:	f7ff fdee 	bl	800b47a <ASC2Dec>
 800b89e:	0002      	movs	r2, r0
 800b8a0:	4b22      	ldr	r3, [pc, #136]	@ (800b92c <E_read+0x458>)
 800b8a2:	601a      	str	r2, [r3, #0]
//	ttime_d = ASC2Dec(ttime);
	ttime_x = ASC2Dec(ttime);
 800b8a4:	4b17      	ldr	r3, [pc, #92]	@ (800b904 <E_read+0x430>)
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f7ff fde7 	bl	800b47a <ASC2Dec>
 800b8ac:	0002      	movs	r2, r0
 800b8ae:	4b20      	ldr	r3, [pc, #128]	@ (800b930 <E_read+0x45c>)
 800b8b0:	601a      	str	r2, [r3, #0]

//Done: transfer eeprom data to display
	uint8_t temp_array[4];

	Long_to_byte(tkm_d, temp_array);
 800b8b2:	4b16      	ldr	r3, [pc, #88]	@ (800b90c <E_read+0x438>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	1d3a      	adds	r2, r7, #4
 800b8b8:	0011      	movs	r1, r2
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7fc fd1a 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay, temp_array, sizeof(uint8_t)*4);
 800b8c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b934 <E_read+0x460>)
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	6812      	ldr	r2, [r2, #0]
 800b8c6:	601a      	str	r2, [r3, #0]
	Long_to_byte(pkm_d, temp_array);
 800b8c8:	4b11      	ldr	r3, [pc, #68]	@ (800b910 <E_read+0x43c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1d3a      	adds	r2, r7, #4
 800b8ce:	0011      	movs	r1, r2
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f7fc fd0f 	bl	80082f4 <Long_to_byte>
 800b8d6:	e02f      	b.n	800b938 <E_read+0x464>
 800b8d8:	20000624 	.word	0x20000624
 800b8dc:	20000ee0 	.word	0x20000ee0
 800b8e0:	2000101c 	.word	0x2000101c
 800b8e4:	20001024 	.word	0x20001024
 800b8e8:	2000102c 	.word	0x2000102c
 800b8ec:	20001034 	.word	0x20001034
 800b8f0:	2000103c 	.word	0x2000103c
 800b8f4:	20001044 	.word	0x20001044
 800b8f8:	2000104c 	.word	0x2000104c
 800b8fc:	20001054 	.word	0x20001054
 800b900:	2000105c 	.word	0x2000105c
 800b904:	20001064 	.word	0x20001064
 800b908:	2000107c 	.word	0x2000107c
 800b90c:	20000fd0 	.word	0x20000fd0
 800b910:	20000fd4 	.word	0x20000fd4
 800b914:	20000fd8 	.word	0x20000fd8
 800b918:	20000fdc 	.word	0x20000fdc
 800b91c:	20000fe0 	.word	0x20000fe0
 800b920:	20000fe4 	.word	0x20000fe4
 800b924:	20000fe8 	.word	0x20000fe8
 800b928:	20000fec 	.word	0x20000fec
 800b92c:	20000ff0 	.word	0x20000ff0
 800b930:	20001008 	.word	0x20001008
 800b934:	20000fa8 	.word	0x20000fa8
	memcpy(dataDisplay+4, temp_array, sizeof(uint8_t)*4);
 800b938:	4a5d      	ldr	r2, [pc, #372]	@ (800bab0 <E_read+0x5dc>)
 800b93a:	1d3b      	adds	r3, r7, #4
 800b93c:	0010      	movs	r0, r2
 800b93e:	0019      	movs	r1, r3
 800b940:	2304      	movs	r3, #4
 800b942:	001a      	movs	r2, r3
 800b944:	f00d fbf8 	bl	8019138 <memcpy>
	Long_to_byte(tflag_d, temp_array);
 800b948:	4b5a      	ldr	r3, [pc, #360]	@ (800bab4 <E_read+0x5e0>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	1d3a      	adds	r2, r7, #4
 800b94e:	0011      	movs	r1, r2
 800b950:	0018      	movs	r0, r3
 800b952:	f7fc fccf 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+8, temp_array, sizeof(uint8_t)*4);
 800b956:	4a58      	ldr	r2, [pc, #352]	@ (800bab8 <E_read+0x5e4>)
 800b958:	1d3b      	adds	r3, r7, #4
 800b95a:	0010      	movs	r0, r2
 800b95c:	0019      	movs	r1, r3
 800b95e:	2304      	movs	r3, #4
 800b960:	001a      	movs	r2, r3
 800b962:	f00d fbe9 	bl	8019138 <memcpy>
	Long_to_byte(tpulse_d, temp_array);
 800b966:	4b55      	ldr	r3, [pc, #340]	@ (800babc <E_read+0x5e8>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	1d3a      	adds	r2, r7, #4
 800b96c:	0011      	movs	r1, r2
 800b96e:	0018      	movs	r0, r3
 800b970:	f7fc fcc0 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+12, temp_array, sizeof(uint8_t)*4);
 800b974:	4a52      	ldr	r2, [pc, #328]	@ (800bac0 <E_read+0x5ec>)
 800b976:	1d3b      	adds	r3, r7, #4
 800b978:	0010      	movs	r0, r2
 800b97a:	0019      	movs	r1, r3
 800b97c:	2304      	movs	r3, #4
 800b97e:	001a      	movs	r2, r3
 800b980:	f00d fbda 	bl	8019138 <memcpy>

	tfare_d_x10 = tfare_d * 10;
 800b984:	4b4f      	ldr	r3, [pc, #316]	@ (800bac4 <E_read+0x5f0>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	0013      	movs	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	189b      	adds	r3, r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	001a      	movs	r2, r3
 800b992:	4b4d      	ldr	r3, [pc, #308]	@ (800bac8 <E_read+0x5f4>)
 800b994:	601a      	str	r2, [r3, #0]
	Long_to_byte(tfare_d_x10, temp_array);
 800b996:	4b4c      	ldr	r3, [pc, #304]	@ (800bac8 <E_read+0x5f4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	1d3a      	adds	r2, r7, #4
 800b99c:	0011      	movs	r1, r2
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7fc fca8 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+16, temp_array, sizeof(uint8_t)*4);
 800b9a4:	4a49      	ldr	r2, [pc, #292]	@ (800bacc <E_read+0x5f8>)
 800b9a6:	1d3b      	adds	r3, r7, #4
 800b9a8:	0010      	movs	r0, r2
 800b9aa:	0019      	movs	r1, r3
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	001a      	movs	r2, r3
 800b9b0:	f00d fbc2 	bl	8019138 <memcpy>
	tsub_d_x10 = tsub_d * 10;
 800b9b4:	4b46      	ldr	r3, [pc, #280]	@ (800bad0 <E_read+0x5fc>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	0013      	movs	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	189b      	adds	r3, r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	001a      	movs	r2, r3
 800b9c2:	4b44      	ldr	r3, [pc, #272]	@ (800bad4 <E_read+0x600>)
 800b9c4:	601a      	str	r2, [r3, #0]
	Long_to_byte(tsub_d_x10, temp_array);
 800b9c6:	4b43      	ldr	r3, [pc, #268]	@ (800bad4 <E_read+0x600>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	1d3a      	adds	r2, r7, #4
 800b9cc:	0011      	movs	r1, r2
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f7fc fc90 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+20, temp_array, sizeof(uint8_t)*4);
 800b9d4:	4a40      	ldr	r2, [pc, #256]	@ (800bad8 <E_read+0x604>)
 800b9d6:	1d3b      	adds	r3, r7, #4
 800b9d8:	0010      	movs	r0, r2
 800b9da:	0019      	movs	r1, r3
 800b9dc:	2304      	movs	r3, #4
 800b9de:	001a      	movs	r2, r3
 800b9e0:	f00d fbaa 	bl	8019138 <memcpy>

	Long_to_byte(ttime_x, temp_array);
 800b9e4:	4b3d      	ldr	r3, [pc, #244]	@ (800badc <E_read+0x608>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	1d3a      	adds	r2, r7, #4
 800b9ea:	0011      	movs	r1, r2
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f7fc fc81 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+24, temp_array, sizeof(uint8_t)*4);
 800b9f2:	4a3b      	ldr	r2, [pc, #236]	@ (800bae0 <E_read+0x60c>)
 800b9f4:	1d3b      	adds	r3, r7, #4
 800b9f6:	0010      	movs	r0, r2
 800b9f8:	0019      	movs	r1, r3
 800b9fa:	2304      	movs	r3, #4
 800b9fc:	001a      	movs	r2, r3
 800b9fe:	f00d fb9b 	bl	8019138 <memcpy>
	Long_to_byte(cflag_d, temp_array);
 800ba02:	4b38      	ldr	r3, [pc, #224]	@ (800bae4 <E_read+0x610>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	1d3a      	adds	r2, r7, #4
 800ba08:	0011      	movs	r1, r2
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7fc fc72 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+28, temp_array, sizeof(uint8_t)*4);
 800ba10:	4a35      	ldr	r2, [pc, #212]	@ (800bae8 <E_read+0x614>)
 800ba12:	1d3b      	adds	r3, r7, #4
 800ba14:	0010      	movs	r0, r2
 800ba16:	0019      	movs	r1, r3
 800ba18:	2304      	movs	r3, #4
 800ba1a:	001a      	movs	r2, r3
 800ba1c:	f00d fb8c 	bl	8019138 <memcpy>

	cfare_d_x10 = cfare_d * 10;
 800ba20:	4b32      	ldr	r3, [pc, #200]	@ (800baec <E_read+0x618>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	0013      	movs	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	189b      	adds	r3, r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	001a      	movs	r2, r3
 800ba2e:	4b30      	ldr	r3, [pc, #192]	@ (800baf0 <E_read+0x61c>)
 800ba30:	601a      	str	r2, [r3, #0]
	Long_to_byte(cfare_d_x10, temp_array);
 800ba32:	4b2f      	ldr	r3, [pc, #188]	@ (800baf0 <E_read+0x61c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1d3a      	adds	r2, r7, #4
 800ba38:	0011      	movs	r1, r2
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7fc fc5a 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+32, temp_array, sizeof(uint8_t)*4);
 800ba40:	4a2c      	ldr	r2, [pc, #176]	@ (800baf4 <E_read+0x620>)
 800ba42:	1d3b      	adds	r3, r7, #4
 800ba44:	0010      	movs	r0, r2
 800ba46:	0019      	movs	r1, r3
 800ba48:	2304      	movs	r3, #4
 800ba4a:	001a      	movs	r2, r3
 800ba4c:	f00d fb74 	bl	8019138 <memcpy>
	csub_d_x10 = csub_d * 10;
 800ba50:	4b29      	ldr	r3, [pc, #164]	@ (800baf8 <E_read+0x624>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	0013      	movs	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	189b      	adds	r3, r3, r2
 800ba5a:	005b      	lsls	r3, r3, #1
 800ba5c:	001a      	movs	r2, r3
 800ba5e:	4b27      	ldr	r3, [pc, #156]	@ (800bafc <E_read+0x628>)
 800ba60:	601a      	str	r2, [r3, #0]
	Long_to_byte(csub_d_x10, temp_array);
 800ba62:	4b26      	ldr	r3, [pc, #152]	@ (800bafc <E_read+0x628>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	1d3a      	adds	r2, r7, #4
 800ba68:	0011      	movs	r1, r2
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f7fc fc42 	bl	80082f4 <Long_to_byte>
	memcpy(dataDisplay+36, temp_array, sizeof(uint8_t)*4);
 800ba70:	4a23      	ldr	r2, [pc, #140]	@ (800bb00 <E_read+0x62c>)
 800ba72:	1d3b      	adds	r3, r7, #4
 800ba74:	0010      	movs	r0, r2
 800ba76:	0019      	movs	r1, r3
 800ba78:	2304      	movs	r3, #4
 800ba7a:	001a      	movs	r2, r3
 800ba7c:	f00d fb5c 	bl	8019138 <memcpy>

	memcpy(total_hmi+6, dataDisplay, sizeof(uint8_t)*40);
 800ba80:	4a20      	ldr	r2, [pc, #128]	@ (800bb04 <E_read+0x630>)
 800ba82:	4b21      	ldr	r3, [pc, #132]	@ (800bb08 <E_read+0x634>)
 800ba84:	0010      	movs	r0, r2
 800ba86:	0019      	movs	r1, r3
 800ba88:	2328      	movs	r3, #40	@ 0x28
 800ba8a:	001a      	movs	r2, r3
 800ba8c:	f00d fb54 	bl	8019138 <memcpy>
	HAL_UART_Transmit(&huart1, total_hmi, 46, 0x0E);
 800ba90:	491e      	ldr	r1, [pc, #120]	@ (800bb0c <E_read+0x638>)
 800ba92:	481f      	ldr	r0, [pc, #124]	@ (800bb10 <E_read+0x63c>)
 800ba94:	230e      	movs	r3, #14
 800ba96:	222e      	movs	r2, #46	@ 0x2e
 800ba98:	f007 ffca 	bl	8013a30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, total_detail, 34, 0x0E);    //0E is timeout  8HW+8FW+12(sn)+8(fare eff(deleted)=  28 bytes data  + 6 bytes data (header 5aa5  length 00 command 82 address 105c)
 800ba9c:	491d      	ldr	r1, [pc, #116]	@ (800bb14 <E_read+0x640>)
 800ba9e:	481c      	ldr	r0, [pc, #112]	@ (800bb10 <E_read+0x63c>)
 800baa0:	230e      	movs	r3, #14
 800baa2:	2222      	movs	r2, #34	@ 0x22
 800baa4:	f007 ffc4 	bl	8013a30 <HAL_UART_Transmit>
}
 800baa8:	46c0      	nop			@ (mov r8, r8)
 800baaa:	46bd      	mov	sp, r7
 800baac:	b002      	add	sp, #8
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20000fac 	.word	0x20000fac
 800bab4:	20000fd8 	.word	0x20000fd8
 800bab8:	20000fb0 	.word	0x20000fb0
 800babc:	20000fe0 	.word	0x20000fe0
 800bac0:	20000fb4 	.word	0x20000fb4
 800bac4:	20000fe4 	.word	0x20000fe4
 800bac8:	20000ff4 	.word	0x20000ff4
 800bacc:	20000fb8 	.word	0x20000fb8
 800bad0:	20000fe8 	.word	0x20000fe8
 800bad4:	20000ff8 	.word	0x20000ff8
 800bad8:	20000fbc 	.word	0x20000fbc
 800badc:	20001008 	.word	0x20001008
 800bae0:	20000fc0 	.word	0x20000fc0
 800bae4:	20000fdc 	.word	0x20000fdc
 800bae8:	20000fc4 	.word	0x20000fc4
 800baec:	20000fec 	.word	0x20000fec
 800baf0:	20000ffc 	.word	0x20000ffc
 800baf4:	20000fc8 	.word	0x20000fc8
 800baf8:	20000ff0 	.word	0x20000ff0
 800bafc:	20001000 	.word	0x20001000
 800bb00:	20000fcc 	.word	0x20000fcc
 800bb04:	200000fa 	.word	0x200000fa
 800bb08:	20000fa8 	.word	0x20000fa8
 800bb0c:	200000f4 	.word	0x200000f4
 800bb10:	20000700 	.word	0x20000700
 800bb14:	20000124 	.word	0x20000124

0800bb18 <E_write>:

void E_write(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af04      	add	r7, sp, #16
	dataWrite[0] = tkm[0];
 800bb1e:	4bf4      	ldr	r3, [pc, #976]	@ (800bef0 <E_write+0x3d8>)
 800bb20:	781a      	ldrb	r2, [r3, #0]
 800bb22:	4bf4      	ldr	r3, [pc, #976]	@ (800bef4 <E_write+0x3dc>)
 800bb24:	701a      	strb	r2, [r3, #0]
	dataWrite[1] = tkm[1];
 800bb26:	4bf2      	ldr	r3, [pc, #968]	@ (800bef0 <E_write+0x3d8>)
 800bb28:	785a      	ldrb	r2, [r3, #1]
 800bb2a:	4bf2      	ldr	r3, [pc, #968]	@ (800bef4 <E_write+0x3dc>)
 800bb2c:	705a      	strb	r2, [r3, #1]
	dataWrite[2] = tkm[2];
 800bb2e:	4bf0      	ldr	r3, [pc, #960]	@ (800bef0 <E_write+0x3d8>)
 800bb30:	789a      	ldrb	r2, [r3, #2]
 800bb32:	4bf0      	ldr	r3, [pc, #960]	@ (800bef4 <E_write+0x3dc>)
 800bb34:	709a      	strb	r2, [r3, #2]
	dataWrite[3] = tkm[3];
 800bb36:	4bee      	ldr	r3, [pc, #952]	@ (800bef0 <E_write+0x3d8>)
 800bb38:	78da      	ldrb	r2, [r3, #3]
 800bb3a:	4bee      	ldr	r3, [pc, #952]	@ (800bef4 <E_write+0x3dc>)
 800bb3c:	70da      	strb	r2, [r3, #3]
	dataWrite[4] = tkm[4];
 800bb3e:	4bec      	ldr	r3, [pc, #944]	@ (800bef0 <E_write+0x3d8>)
 800bb40:	791a      	ldrb	r2, [r3, #4]
 800bb42:	4bec      	ldr	r3, [pc, #944]	@ (800bef4 <E_write+0x3dc>)
 800bb44:	711a      	strb	r2, [r3, #4]
	dataWrite[5] = tkm[5];
 800bb46:	4bea      	ldr	r3, [pc, #936]	@ (800bef0 <E_write+0x3d8>)
 800bb48:	795a      	ldrb	r2, [r3, #5]
 800bb4a:	4bea      	ldr	r3, [pc, #936]	@ (800bef4 <E_write+0x3dc>)
 800bb4c:	715a      	strb	r2, [r3, #5]
	dataWrite[6] = tkm[6];
 800bb4e:	4be8      	ldr	r3, [pc, #928]	@ (800bef0 <E_write+0x3d8>)
 800bb50:	799a      	ldrb	r2, [r3, #6]
 800bb52:	4be8      	ldr	r3, [pc, #928]	@ (800bef4 <E_write+0x3dc>)
 800bb54:	719a      	strb	r2, [r3, #6]
	dataWrite[7] = tkm[7];
 800bb56:	4be6      	ldr	r3, [pc, #920]	@ (800bef0 <E_write+0x3d8>)
 800bb58:	79da      	ldrb	r2, [r3, #7]
 800bb5a:	4be6      	ldr	r3, [pc, #920]	@ (800bef4 <E_write+0x3dc>)
 800bb5c:	71da      	strb	r2, [r3, #7]

	dataWrite[8] = pkm[0];
 800bb5e:	4be6      	ldr	r3, [pc, #920]	@ (800bef8 <E_write+0x3e0>)
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	4be4      	ldr	r3, [pc, #912]	@ (800bef4 <E_write+0x3dc>)
 800bb64:	721a      	strb	r2, [r3, #8]
	dataWrite[9] = pkm[1];
 800bb66:	4be4      	ldr	r3, [pc, #912]	@ (800bef8 <E_write+0x3e0>)
 800bb68:	785a      	ldrb	r2, [r3, #1]
 800bb6a:	4be2      	ldr	r3, [pc, #904]	@ (800bef4 <E_write+0x3dc>)
 800bb6c:	725a      	strb	r2, [r3, #9]
	dataWrite[10] = pkm[2];
 800bb6e:	4be2      	ldr	r3, [pc, #904]	@ (800bef8 <E_write+0x3e0>)
 800bb70:	789a      	ldrb	r2, [r3, #2]
 800bb72:	4be0      	ldr	r3, [pc, #896]	@ (800bef4 <E_write+0x3dc>)
 800bb74:	729a      	strb	r2, [r3, #10]
	dataWrite[11] = pkm[3];
 800bb76:	4be0      	ldr	r3, [pc, #896]	@ (800bef8 <E_write+0x3e0>)
 800bb78:	78da      	ldrb	r2, [r3, #3]
 800bb7a:	4bde      	ldr	r3, [pc, #888]	@ (800bef4 <E_write+0x3dc>)
 800bb7c:	72da      	strb	r2, [r3, #11]
	dataWrite[12] = pkm[4];
 800bb7e:	4bde      	ldr	r3, [pc, #888]	@ (800bef8 <E_write+0x3e0>)
 800bb80:	791a      	ldrb	r2, [r3, #4]
 800bb82:	4bdc      	ldr	r3, [pc, #880]	@ (800bef4 <E_write+0x3dc>)
 800bb84:	731a      	strb	r2, [r3, #12]
	dataWrite[13] = pkm[5];
 800bb86:	4bdc      	ldr	r3, [pc, #880]	@ (800bef8 <E_write+0x3e0>)
 800bb88:	795a      	ldrb	r2, [r3, #5]
 800bb8a:	4bda      	ldr	r3, [pc, #872]	@ (800bef4 <E_write+0x3dc>)
 800bb8c:	735a      	strb	r2, [r3, #13]
	dataWrite[14] = pkm[6];
 800bb8e:	4bda      	ldr	r3, [pc, #872]	@ (800bef8 <E_write+0x3e0>)
 800bb90:	799a      	ldrb	r2, [r3, #6]
 800bb92:	4bd8      	ldr	r3, [pc, #864]	@ (800bef4 <E_write+0x3dc>)
 800bb94:	739a      	strb	r2, [r3, #14]
	dataWrite[15] = pkm[7];
 800bb96:	4bd8      	ldr	r3, [pc, #864]	@ (800bef8 <E_write+0x3e0>)
 800bb98:	79da      	ldrb	r2, [r3, #7]
 800bb9a:	4bd6      	ldr	r3, [pc, #856]	@ (800bef4 <E_write+0x3dc>)
 800bb9c:	73da      	strb	r2, [r3, #15]

	dataWrite[16] = tflag[0];
 800bb9e:	4bd7      	ldr	r3, [pc, #860]	@ (800befc <E_write+0x3e4>)
 800bba0:	781a      	ldrb	r2, [r3, #0]
 800bba2:	4bd4      	ldr	r3, [pc, #848]	@ (800bef4 <E_write+0x3dc>)
 800bba4:	741a      	strb	r2, [r3, #16]
	dataWrite[17] = tflag[1];
 800bba6:	4bd5      	ldr	r3, [pc, #852]	@ (800befc <E_write+0x3e4>)
 800bba8:	785a      	ldrb	r2, [r3, #1]
 800bbaa:	4bd2      	ldr	r3, [pc, #840]	@ (800bef4 <E_write+0x3dc>)
 800bbac:	745a      	strb	r2, [r3, #17]
	dataWrite[18] = tflag[2];
 800bbae:	4bd3      	ldr	r3, [pc, #844]	@ (800befc <E_write+0x3e4>)
 800bbb0:	789a      	ldrb	r2, [r3, #2]
 800bbb2:	4bd0      	ldr	r3, [pc, #832]	@ (800bef4 <E_write+0x3dc>)
 800bbb4:	749a      	strb	r2, [r3, #18]
	dataWrite[19] = tflag[3];
 800bbb6:	4bd1      	ldr	r3, [pc, #836]	@ (800befc <E_write+0x3e4>)
 800bbb8:	78da      	ldrb	r2, [r3, #3]
 800bbba:	4bce      	ldr	r3, [pc, #824]	@ (800bef4 <E_write+0x3dc>)
 800bbbc:	74da      	strb	r2, [r3, #19]
	dataWrite[20] = tflag[4];
 800bbbe:	4bcf      	ldr	r3, [pc, #828]	@ (800befc <E_write+0x3e4>)
 800bbc0:	791a      	ldrb	r2, [r3, #4]
 800bbc2:	4bcc      	ldr	r3, [pc, #816]	@ (800bef4 <E_write+0x3dc>)
 800bbc4:	751a      	strb	r2, [r3, #20]
	dataWrite[21] = tflag[5];
 800bbc6:	4bcd      	ldr	r3, [pc, #820]	@ (800befc <E_write+0x3e4>)
 800bbc8:	795a      	ldrb	r2, [r3, #5]
 800bbca:	4bca      	ldr	r3, [pc, #808]	@ (800bef4 <E_write+0x3dc>)
 800bbcc:	755a      	strb	r2, [r3, #21]
	dataWrite[22] = tflag[6];
 800bbce:	4bcb      	ldr	r3, [pc, #812]	@ (800befc <E_write+0x3e4>)
 800bbd0:	799a      	ldrb	r2, [r3, #6]
 800bbd2:	4bc8      	ldr	r3, [pc, #800]	@ (800bef4 <E_write+0x3dc>)
 800bbd4:	759a      	strb	r2, [r3, #22]
	dataWrite[23] = tflag[7];
 800bbd6:	4bc9      	ldr	r3, [pc, #804]	@ (800befc <E_write+0x3e4>)
 800bbd8:	79da      	ldrb	r2, [r3, #7]
 800bbda:	4bc6      	ldr	r3, [pc, #792]	@ (800bef4 <E_write+0x3dc>)
 800bbdc:	75da      	strb	r2, [r3, #23]

	dataWrite[24] = cflag[0];
 800bbde:	4bc8      	ldr	r3, [pc, #800]	@ (800bf00 <E_write+0x3e8>)
 800bbe0:	781a      	ldrb	r2, [r3, #0]
 800bbe2:	4bc4      	ldr	r3, [pc, #784]	@ (800bef4 <E_write+0x3dc>)
 800bbe4:	761a      	strb	r2, [r3, #24]
	dataWrite[25] = cflag[1];
 800bbe6:	4bc6      	ldr	r3, [pc, #792]	@ (800bf00 <E_write+0x3e8>)
 800bbe8:	785a      	ldrb	r2, [r3, #1]
 800bbea:	4bc2      	ldr	r3, [pc, #776]	@ (800bef4 <E_write+0x3dc>)
 800bbec:	765a      	strb	r2, [r3, #25]
	dataWrite[26] = cflag[2];
 800bbee:	4bc4      	ldr	r3, [pc, #784]	@ (800bf00 <E_write+0x3e8>)
 800bbf0:	789a      	ldrb	r2, [r3, #2]
 800bbf2:	4bc0      	ldr	r3, [pc, #768]	@ (800bef4 <E_write+0x3dc>)
 800bbf4:	769a      	strb	r2, [r3, #26]
	dataWrite[27] = cflag[3];
 800bbf6:	4bc2      	ldr	r3, [pc, #776]	@ (800bf00 <E_write+0x3e8>)
 800bbf8:	78da      	ldrb	r2, [r3, #3]
 800bbfa:	4bbe      	ldr	r3, [pc, #760]	@ (800bef4 <E_write+0x3dc>)
 800bbfc:	76da      	strb	r2, [r3, #27]
	dataWrite[28] = cflag[4];
 800bbfe:	4bc0      	ldr	r3, [pc, #768]	@ (800bf00 <E_write+0x3e8>)
 800bc00:	791a      	ldrb	r2, [r3, #4]
 800bc02:	4bbc      	ldr	r3, [pc, #752]	@ (800bef4 <E_write+0x3dc>)
 800bc04:	771a      	strb	r2, [r3, #28]
	dataWrite[29] = cflag[5];
 800bc06:	4bbe      	ldr	r3, [pc, #760]	@ (800bf00 <E_write+0x3e8>)
 800bc08:	795a      	ldrb	r2, [r3, #5]
 800bc0a:	4bba      	ldr	r3, [pc, #744]	@ (800bef4 <E_write+0x3dc>)
 800bc0c:	775a      	strb	r2, [r3, #29]
	dataWrite[30] = cflag[6];
 800bc0e:	4bbc      	ldr	r3, [pc, #752]	@ (800bf00 <E_write+0x3e8>)
 800bc10:	799a      	ldrb	r2, [r3, #6]
 800bc12:	4bb8      	ldr	r3, [pc, #736]	@ (800bef4 <E_write+0x3dc>)
 800bc14:	779a      	strb	r2, [r3, #30]
	dataWrite[31] = cflag[7];
 800bc16:	4bba      	ldr	r3, [pc, #744]	@ (800bf00 <E_write+0x3e8>)
 800bc18:	79da      	ldrb	r2, [r3, #7]
 800bc1a:	4bb6      	ldr	r3, [pc, #728]	@ (800bef4 <E_write+0x3dc>)
 800bc1c:	77da      	strb	r2, [r3, #31]

	dataWrite[32] = tpulse[0];
 800bc1e:	4bb9      	ldr	r3, [pc, #740]	@ (800bf04 <E_write+0x3ec>)
 800bc20:	7819      	ldrb	r1, [r3, #0]
 800bc22:	4bb4      	ldr	r3, [pc, #720]	@ (800bef4 <E_write+0x3dc>)
 800bc24:	2220      	movs	r2, #32
 800bc26:	5499      	strb	r1, [r3, r2]
	dataWrite[33] = tpulse[1];
 800bc28:	4bb6      	ldr	r3, [pc, #728]	@ (800bf04 <E_write+0x3ec>)
 800bc2a:	7859      	ldrb	r1, [r3, #1]
 800bc2c:	4bb1      	ldr	r3, [pc, #708]	@ (800bef4 <E_write+0x3dc>)
 800bc2e:	2221      	movs	r2, #33	@ 0x21
 800bc30:	5499      	strb	r1, [r3, r2]
	dataWrite[34] = tpulse[2];
 800bc32:	4bb4      	ldr	r3, [pc, #720]	@ (800bf04 <E_write+0x3ec>)
 800bc34:	7899      	ldrb	r1, [r3, #2]
 800bc36:	4baf      	ldr	r3, [pc, #700]	@ (800bef4 <E_write+0x3dc>)
 800bc38:	2222      	movs	r2, #34	@ 0x22
 800bc3a:	5499      	strb	r1, [r3, r2]
	dataWrite[35] = tpulse[3];
 800bc3c:	4bb1      	ldr	r3, [pc, #708]	@ (800bf04 <E_write+0x3ec>)
 800bc3e:	78d9      	ldrb	r1, [r3, #3]
 800bc40:	4bac      	ldr	r3, [pc, #688]	@ (800bef4 <E_write+0x3dc>)
 800bc42:	2223      	movs	r2, #35	@ 0x23
 800bc44:	5499      	strb	r1, [r3, r2]
	dataWrite[36] = tpulse[4];
 800bc46:	4baf      	ldr	r3, [pc, #700]	@ (800bf04 <E_write+0x3ec>)
 800bc48:	7919      	ldrb	r1, [r3, #4]
 800bc4a:	4baa      	ldr	r3, [pc, #680]	@ (800bef4 <E_write+0x3dc>)
 800bc4c:	2224      	movs	r2, #36	@ 0x24
 800bc4e:	5499      	strb	r1, [r3, r2]
	dataWrite[37] = tpulse[5];
 800bc50:	4bac      	ldr	r3, [pc, #688]	@ (800bf04 <E_write+0x3ec>)
 800bc52:	7959      	ldrb	r1, [r3, #5]
 800bc54:	4ba7      	ldr	r3, [pc, #668]	@ (800bef4 <E_write+0x3dc>)
 800bc56:	2225      	movs	r2, #37	@ 0x25
 800bc58:	5499      	strb	r1, [r3, r2]
	dataWrite[38] = tpulse[6];
 800bc5a:	4baa      	ldr	r3, [pc, #680]	@ (800bf04 <E_write+0x3ec>)
 800bc5c:	7999      	ldrb	r1, [r3, #6]
 800bc5e:	4ba5      	ldr	r3, [pc, #660]	@ (800bef4 <E_write+0x3dc>)
 800bc60:	2226      	movs	r2, #38	@ 0x26
 800bc62:	5499      	strb	r1, [r3, r2]
	dataWrite[39] = tpulse[7];
 800bc64:	4ba7      	ldr	r3, [pc, #668]	@ (800bf04 <E_write+0x3ec>)
 800bc66:	79d9      	ldrb	r1, [r3, #7]
 800bc68:	4ba2      	ldr	r3, [pc, #648]	@ (800bef4 <E_write+0x3dc>)
 800bc6a:	2227      	movs	r2, #39	@ 0x27
 800bc6c:	5499      	strb	r1, [r3, r2]

	dataWrite[40] = tfare[0];
 800bc6e:	4ba6      	ldr	r3, [pc, #664]	@ (800bf08 <E_write+0x3f0>)
 800bc70:	7819      	ldrb	r1, [r3, #0]
 800bc72:	4ba0      	ldr	r3, [pc, #640]	@ (800bef4 <E_write+0x3dc>)
 800bc74:	2228      	movs	r2, #40	@ 0x28
 800bc76:	5499      	strb	r1, [r3, r2]
	dataWrite[41] = tfare[1];
 800bc78:	4ba3      	ldr	r3, [pc, #652]	@ (800bf08 <E_write+0x3f0>)
 800bc7a:	7859      	ldrb	r1, [r3, #1]
 800bc7c:	4b9d      	ldr	r3, [pc, #628]	@ (800bef4 <E_write+0x3dc>)
 800bc7e:	2229      	movs	r2, #41	@ 0x29
 800bc80:	5499      	strb	r1, [r3, r2]
	dataWrite[42] = tfare[2];
 800bc82:	4ba1      	ldr	r3, [pc, #644]	@ (800bf08 <E_write+0x3f0>)
 800bc84:	7899      	ldrb	r1, [r3, #2]
 800bc86:	4b9b      	ldr	r3, [pc, #620]	@ (800bef4 <E_write+0x3dc>)
 800bc88:	222a      	movs	r2, #42	@ 0x2a
 800bc8a:	5499      	strb	r1, [r3, r2]
	dataWrite[43] = tfare[3];
 800bc8c:	4b9e      	ldr	r3, [pc, #632]	@ (800bf08 <E_write+0x3f0>)
 800bc8e:	78d9      	ldrb	r1, [r3, #3]
 800bc90:	4b98      	ldr	r3, [pc, #608]	@ (800bef4 <E_write+0x3dc>)
 800bc92:	222b      	movs	r2, #43	@ 0x2b
 800bc94:	5499      	strb	r1, [r3, r2]
	dataWrite[44] = tfare[4];
 800bc96:	4b9c      	ldr	r3, [pc, #624]	@ (800bf08 <E_write+0x3f0>)
 800bc98:	7919      	ldrb	r1, [r3, #4]
 800bc9a:	4b96      	ldr	r3, [pc, #600]	@ (800bef4 <E_write+0x3dc>)
 800bc9c:	222c      	movs	r2, #44	@ 0x2c
 800bc9e:	5499      	strb	r1, [r3, r2]
	dataWrite[45] = tfare[5];
 800bca0:	4b99      	ldr	r3, [pc, #612]	@ (800bf08 <E_write+0x3f0>)
 800bca2:	7959      	ldrb	r1, [r3, #5]
 800bca4:	4b93      	ldr	r3, [pc, #588]	@ (800bef4 <E_write+0x3dc>)
 800bca6:	222d      	movs	r2, #45	@ 0x2d
 800bca8:	5499      	strb	r1, [r3, r2]
	dataWrite[46] = tfare[6];
 800bcaa:	4b97      	ldr	r3, [pc, #604]	@ (800bf08 <E_write+0x3f0>)
 800bcac:	7999      	ldrb	r1, [r3, #6]
 800bcae:	4b91      	ldr	r3, [pc, #580]	@ (800bef4 <E_write+0x3dc>)
 800bcb0:	222e      	movs	r2, #46	@ 0x2e
 800bcb2:	5499      	strb	r1, [r3, r2]
	dataWrite[47] = tfare[7];
 800bcb4:	4b94      	ldr	r3, [pc, #592]	@ (800bf08 <E_write+0x3f0>)
 800bcb6:	79d9      	ldrb	r1, [r3, #7]
 800bcb8:	4b8e      	ldr	r3, [pc, #568]	@ (800bef4 <E_write+0x3dc>)
 800bcba:	222f      	movs	r2, #47	@ 0x2f
 800bcbc:	5499      	strb	r1, [r3, r2]

	dataWrite[48] = tsub[0];
 800bcbe:	4b93      	ldr	r3, [pc, #588]	@ (800bf0c <E_write+0x3f4>)
 800bcc0:	7819      	ldrb	r1, [r3, #0]
 800bcc2:	4b8c      	ldr	r3, [pc, #560]	@ (800bef4 <E_write+0x3dc>)
 800bcc4:	2230      	movs	r2, #48	@ 0x30
 800bcc6:	5499      	strb	r1, [r3, r2]
	dataWrite[49] = tsub[1];
 800bcc8:	4b90      	ldr	r3, [pc, #576]	@ (800bf0c <E_write+0x3f4>)
 800bcca:	7859      	ldrb	r1, [r3, #1]
 800bccc:	4b89      	ldr	r3, [pc, #548]	@ (800bef4 <E_write+0x3dc>)
 800bcce:	2231      	movs	r2, #49	@ 0x31
 800bcd0:	5499      	strb	r1, [r3, r2]
	dataWrite[50] = tsub[2];
 800bcd2:	4b8e      	ldr	r3, [pc, #568]	@ (800bf0c <E_write+0x3f4>)
 800bcd4:	7899      	ldrb	r1, [r3, #2]
 800bcd6:	4b87      	ldr	r3, [pc, #540]	@ (800bef4 <E_write+0x3dc>)
 800bcd8:	2232      	movs	r2, #50	@ 0x32
 800bcda:	5499      	strb	r1, [r3, r2]
	dataWrite[51] = tsub[3];
 800bcdc:	4b8b      	ldr	r3, [pc, #556]	@ (800bf0c <E_write+0x3f4>)
 800bcde:	78d9      	ldrb	r1, [r3, #3]
 800bce0:	4b84      	ldr	r3, [pc, #528]	@ (800bef4 <E_write+0x3dc>)
 800bce2:	2233      	movs	r2, #51	@ 0x33
 800bce4:	5499      	strb	r1, [r3, r2]
	dataWrite[52] = tsub[4];
 800bce6:	4b89      	ldr	r3, [pc, #548]	@ (800bf0c <E_write+0x3f4>)
 800bce8:	7919      	ldrb	r1, [r3, #4]
 800bcea:	4b82      	ldr	r3, [pc, #520]	@ (800bef4 <E_write+0x3dc>)
 800bcec:	2234      	movs	r2, #52	@ 0x34
 800bcee:	5499      	strb	r1, [r3, r2]
	dataWrite[53] = tsub[5];
 800bcf0:	4b86      	ldr	r3, [pc, #536]	@ (800bf0c <E_write+0x3f4>)
 800bcf2:	7959      	ldrb	r1, [r3, #5]
 800bcf4:	4b7f      	ldr	r3, [pc, #508]	@ (800bef4 <E_write+0x3dc>)
 800bcf6:	2235      	movs	r2, #53	@ 0x35
 800bcf8:	5499      	strb	r1, [r3, r2]
	dataWrite[54] = tsub[6];
 800bcfa:	4b84      	ldr	r3, [pc, #528]	@ (800bf0c <E_write+0x3f4>)
 800bcfc:	7999      	ldrb	r1, [r3, #6]
 800bcfe:	4b7d      	ldr	r3, [pc, #500]	@ (800bef4 <E_write+0x3dc>)
 800bd00:	2236      	movs	r2, #54	@ 0x36
 800bd02:	5499      	strb	r1, [r3, r2]
	dataWrite[55] = tsub[7];
 800bd04:	4b81      	ldr	r3, [pc, #516]	@ (800bf0c <E_write+0x3f4>)
 800bd06:	79d9      	ldrb	r1, [r3, #7]
 800bd08:	4b7a      	ldr	r3, [pc, #488]	@ (800bef4 <E_write+0x3dc>)
 800bd0a:	2237      	movs	r2, #55	@ 0x37
 800bd0c:	5499      	strb	r1, [r3, r2]

	dataWrite[56] = cfare[0];
 800bd0e:	4b80      	ldr	r3, [pc, #512]	@ (800bf10 <E_write+0x3f8>)
 800bd10:	7819      	ldrb	r1, [r3, #0]
 800bd12:	4b78      	ldr	r3, [pc, #480]	@ (800bef4 <E_write+0x3dc>)
 800bd14:	2238      	movs	r2, #56	@ 0x38
 800bd16:	5499      	strb	r1, [r3, r2]
	dataWrite[57] = cfare[1];
 800bd18:	4b7d      	ldr	r3, [pc, #500]	@ (800bf10 <E_write+0x3f8>)
 800bd1a:	7859      	ldrb	r1, [r3, #1]
 800bd1c:	4b75      	ldr	r3, [pc, #468]	@ (800bef4 <E_write+0x3dc>)
 800bd1e:	2239      	movs	r2, #57	@ 0x39
 800bd20:	5499      	strb	r1, [r3, r2]
	dataWrite[58] = cfare[2];
 800bd22:	4b7b      	ldr	r3, [pc, #492]	@ (800bf10 <E_write+0x3f8>)
 800bd24:	7899      	ldrb	r1, [r3, #2]
 800bd26:	4b73      	ldr	r3, [pc, #460]	@ (800bef4 <E_write+0x3dc>)
 800bd28:	223a      	movs	r2, #58	@ 0x3a
 800bd2a:	5499      	strb	r1, [r3, r2]
	dataWrite[59] = cfare[3];
 800bd2c:	4b78      	ldr	r3, [pc, #480]	@ (800bf10 <E_write+0x3f8>)
 800bd2e:	78d9      	ldrb	r1, [r3, #3]
 800bd30:	4b70      	ldr	r3, [pc, #448]	@ (800bef4 <E_write+0x3dc>)
 800bd32:	223b      	movs	r2, #59	@ 0x3b
 800bd34:	5499      	strb	r1, [r3, r2]
	dataWrite[60] = cfare[4];
 800bd36:	4b76      	ldr	r3, [pc, #472]	@ (800bf10 <E_write+0x3f8>)
 800bd38:	7919      	ldrb	r1, [r3, #4]
 800bd3a:	4b6e      	ldr	r3, [pc, #440]	@ (800bef4 <E_write+0x3dc>)
 800bd3c:	223c      	movs	r2, #60	@ 0x3c
 800bd3e:	5499      	strb	r1, [r3, r2]
	dataWrite[61] = cfare[5];
 800bd40:	4b73      	ldr	r3, [pc, #460]	@ (800bf10 <E_write+0x3f8>)
 800bd42:	7959      	ldrb	r1, [r3, #5]
 800bd44:	4b6b      	ldr	r3, [pc, #428]	@ (800bef4 <E_write+0x3dc>)
 800bd46:	223d      	movs	r2, #61	@ 0x3d
 800bd48:	5499      	strb	r1, [r3, r2]
	dataWrite[62] = cfare[6];
 800bd4a:	4b71      	ldr	r3, [pc, #452]	@ (800bf10 <E_write+0x3f8>)
 800bd4c:	7999      	ldrb	r1, [r3, #6]
 800bd4e:	4b69      	ldr	r3, [pc, #420]	@ (800bef4 <E_write+0x3dc>)
 800bd50:	223e      	movs	r2, #62	@ 0x3e
 800bd52:	5499      	strb	r1, [r3, r2]
	dataWrite[63] = cfare[7];
 800bd54:	4b6e      	ldr	r3, [pc, #440]	@ (800bf10 <E_write+0x3f8>)
 800bd56:	79d9      	ldrb	r1, [r3, #7]
 800bd58:	4b66      	ldr	r3, [pc, #408]	@ (800bef4 <E_write+0x3dc>)
 800bd5a:	223f      	movs	r2, #63	@ 0x3f
 800bd5c:	5499      	strb	r1, [r3, r2]

	dataWrite[64] = csub[0];
 800bd5e:	4b6d      	ldr	r3, [pc, #436]	@ (800bf14 <E_write+0x3fc>)
 800bd60:	7819      	ldrb	r1, [r3, #0]
 800bd62:	4b64      	ldr	r3, [pc, #400]	@ (800bef4 <E_write+0x3dc>)
 800bd64:	2240      	movs	r2, #64	@ 0x40
 800bd66:	5499      	strb	r1, [r3, r2]
	dataWrite[65] = csub[1];
 800bd68:	4b6a      	ldr	r3, [pc, #424]	@ (800bf14 <E_write+0x3fc>)
 800bd6a:	7859      	ldrb	r1, [r3, #1]
 800bd6c:	4b61      	ldr	r3, [pc, #388]	@ (800bef4 <E_write+0x3dc>)
 800bd6e:	2241      	movs	r2, #65	@ 0x41
 800bd70:	5499      	strb	r1, [r3, r2]
	dataWrite[66] = csub[2];
 800bd72:	4b68      	ldr	r3, [pc, #416]	@ (800bf14 <E_write+0x3fc>)
 800bd74:	7899      	ldrb	r1, [r3, #2]
 800bd76:	4b5f      	ldr	r3, [pc, #380]	@ (800bef4 <E_write+0x3dc>)
 800bd78:	2242      	movs	r2, #66	@ 0x42
 800bd7a:	5499      	strb	r1, [r3, r2]
	dataWrite[67] = csub[3];
 800bd7c:	4b65      	ldr	r3, [pc, #404]	@ (800bf14 <E_write+0x3fc>)
 800bd7e:	78d9      	ldrb	r1, [r3, #3]
 800bd80:	4b5c      	ldr	r3, [pc, #368]	@ (800bef4 <E_write+0x3dc>)
 800bd82:	2243      	movs	r2, #67	@ 0x43
 800bd84:	5499      	strb	r1, [r3, r2]
	dataWrite[68] = csub[4];
 800bd86:	4b63      	ldr	r3, [pc, #396]	@ (800bf14 <E_write+0x3fc>)
 800bd88:	7919      	ldrb	r1, [r3, #4]
 800bd8a:	4b5a      	ldr	r3, [pc, #360]	@ (800bef4 <E_write+0x3dc>)
 800bd8c:	2244      	movs	r2, #68	@ 0x44
 800bd8e:	5499      	strb	r1, [r3, r2]
	dataWrite[69] = csub[5];
 800bd90:	4b60      	ldr	r3, [pc, #384]	@ (800bf14 <E_write+0x3fc>)
 800bd92:	7959      	ldrb	r1, [r3, #5]
 800bd94:	4b57      	ldr	r3, [pc, #348]	@ (800bef4 <E_write+0x3dc>)
 800bd96:	2245      	movs	r2, #69	@ 0x45
 800bd98:	5499      	strb	r1, [r3, r2]
	dataWrite[70] = csub[6];
 800bd9a:	4b5e      	ldr	r3, [pc, #376]	@ (800bf14 <E_write+0x3fc>)
 800bd9c:	7999      	ldrb	r1, [r3, #6]
 800bd9e:	4b55      	ldr	r3, [pc, #340]	@ (800bef4 <E_write+0x3dc>)
 800bda0:	2246      	movs	r2, #70	@ 0x46
 800bda2:	5499      	strb	r1, [r3, r2]
	dataWrite[71] = csub[7];
 800bda4:	4b5b      	ldr	r3, [pc, #364]	@ (800bf14 <E_write+0x3fc>)
 800bda6:	79d9      	ldrb	r1, [r3, #7]
 800bda8:	4b52      	ldr	r3, [pc, #328]	@ (800bef4 <E_write+0x3dc>)
 800bdaa:	2247      	movs	r2, #71	@ 0x47
 800bdac:	5499      	strb	r1, [r3, r2]

	dataWrite[72] = ttime[0];
 800bdae:	4b5a      	ldr	r3, [pc, #360]	@ (800bf18 <E_write+0x400>)
 800bdb0:	7819      	ldrb	r1, [r3, #0]
 800bdb2:	4b50      	ldr	r3, [pc, #320]	@ (800bef4 <E_write+0x3dc>)
 800bdb4:	2248      	movs	r2, #72	@ 0x48
 800bdb6:	5499      	strb	r1, [r3, r2]
	dataWrite[73] = ttime[1];
 800bdb8:	4b57      	ldr	r3, [pc, #348]	@ (800bf18 <E_write+0x400>)
 800bdba:	7859      	ldrb	r1, [r3, #1]
 800bdbc:	4b4d      	ldr	r3, [pc, #308]	@ (800bef4 <E_write+0x3dc>)
 800bdbe:	2249      	movs	r2, #73	@ 0x49
 800bdc0:	5499      	strb	r1, [r3, r2]
	dataWrite[74] = ttime[2];
 800bdc2:	4b55      	ldr	r3, [pc, #340]	@ (800bf18 <E_write+0x400>)
 800bdc4:	7899      	ldrb	r1, [r3, #2]
 800bdc6:	4b4b      	ldr	r3, [pc, #300]	@ (800bef4 <E_write+0x3dc>)
 800bdc8:	224a      	movs	r2, #74	@ 0x4a
 800bdca:	5499      	strb	r1, [r3, r2]
	dataWrite[75] = ttime[3];
 800bdcc:	4b52      	ldr	r3, [pc, #328]	@ (800bf18 <E_write+0x400>)
 800bdce:	78d9      	ldrb	r1, [r3, #3]
 800bdd0:	4b48      	ldr	r3, [pc, #288]	@ (800bef4 <E_write+0x3dc>)
 800bdd2:	224b      	movs	r2, #75	@ 0x4b
 800bdd4:	5499      	strb	r1, [r3, r2]
	dataWrite[76] = ttime[4];
 800bdd6:	4b50      	ldr	r3, [pc, #320]	@ (800bf18 <E_write+0x400>)
 800bdd8:	7919      	ldrb	r1, [r3, #4]
 800bdda:	4b46      	ldr	r3, [pc, #280]	@ (800bef4 <E_write+0x3dc>)
 800bddc:	224c      	movs	r2, #76	@ 0x4c
 800bdde:	5499      	strb	r1, [r3, r2]
	dataWrite[77] = ttime[5];
 800bde0:	4b4d      	ldr	r3, [pc, #308]	@ (800bf18 <E_write+0x400>)
 800bde2:	7959      	ldrb	r1, [r3, #5]
 800bde4:	4b43      	ldr	r3, [pc, #268]	@ (800bef4 <E_write+0x3dc>)
 800bde6:	224d      	movs	r2, #77	@ 0x4d
 800bde8:	5499      	strb	r1, [r3, r2]
	dataWrite[78] = ttime[6];
 800bdea:	4b4b      	ldr	r3, [pc, #300]	@ (800bf18 <E_write+0x400>)
 800bdec:	7999      	ldrb	r1, [r3, #6]
 800bdee:	4b41      	ldr	r3, [pc, #260]	@ (800bef4 <E_write+0x3dc>)
 800bdf0:	224e      	movs	r2, #78	@ 0x4e
 800bdf2:	5499      	strb	r1, [r3, r2]
	dataWrite[79] = ttime[7];
 800bdf4:	4b48      	ldr	r3, [pc, #288]	@ (800bf18 <E_write+0x400>)
 800bdf6:	79d9      	ldrb	r1, [r3, #7]
 800bdf8:	4b3e      	ldr	r3, [pc, #248]	@ (800bef4 <E_write+0x3dc>)
 800bdfa:	224f      	movs	r2, #79	@ 0x4f
 800bdfc:	5499      	strb	r1, [r3, r2]

	dataWrite[80] = pulses[0];
 800bdfe:	4b47      	ldr	r3, [pc, #284]	@ (800bf1c <E_write+0x404>)
 800be00:	7819      	ldrb	r1, [r3, #0]
 800be02:	4b3c      	ldr	r3, [pc, #240]	@ (800bef4 <E_write+0x3dc>)
 800be04:	2250      	movs	r2, #80	@ 0x50
 800be06:	5499      	strb	r1, [r3, r2]
	dataWrite[81] = pulses[1];
 800be08:	4b44      	ldr	r3, [pc, #272]	@ (800bf1c <E_write+0x404>)
 800be0a:	7859      	ldrb	r1, [r3, #1]
 800be0c:	4b39      	ldr	r3, [pc, #228]	@ (800bef4 <E_write+0x3dc>)
 800be0e:	2251      	movs	r2, #81	@ 0x51
 800be10:	5499      	strb	r1, [r3, r2]
	dataWrite[82] = pulses[2];
 800be12:	4b42      	ldr	r3, [pc, #264]	@ (800bf1c <E_write+0x404>)
 800be14:	7899      	ldrb	r1, [r3, #2]
 800be16:	4b37      	ldr	r3, [pc, #220]	@ (800bef4 <E_write+0x3dc>)
 800be18:	2252      	movs	r2, #82	@ 0x52
 800be1a:	5499      	strb	r1, [r3, r2]
	dataWrite[83] = pulses[3];
 800be1c:	4b3f      	ldr	r3, [pc, #252]	@ (800bf1c <E_write+0x404>)
 800be1e:	78d9      	ldrb	r1, [r3, #3]
 800be20:	4b34      	ldr	r3, [pc, #208]	@ (800bef4 <E_write+0x3dc>)
 800be22:	2253      	movs	r2, #83	@ 0x53
 800be24:	5499      	strb	r1, [r3, r2]
	dataWrite[84] = pulses[4];
 800be26:	4b3d      	ldr	r3, [pc, #244]	@ (800bf1c <E_write+0x404>)
 800be28:	7919      	ldrb	r1, [r3, #4]
 800be2a:	4b32      	ldr	r3, [pc, #200]	@ (800bef4 <E_write+0x3dc>)
 800be2c:	2254      	movs	r2, #84	@ 0x54
 800be2e:	5499      	strb	r1, [r3, r2]
	dataWrite[85] = pulses[5];
 800be30:	4b3a      	ldr	r3, [pc, #232]	@ (800bf1c <E_write+0x404>)
 800be32:	7959      	ldrb	r1, [r3, #5]
 800be34:	4b2f      	ldr	r3, [pc, #188]	@ (800bef4 <E_write+0x3dc>)
 800be36:	2255      	movs	r2, #85	@ 0x55
 800be38:	5499      	strb	r1, [r3, r2]
	dataWrite[86] = pulses[6];
 800be3a:	4b38      	ldr	r3, [pc, #224]	@ (800bf1c <E_write+0x404>)
 800be3c:	7999      	ldrb	r1, [r3, #6]
 800be3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bef4 <E_write+0x3dc>)
 800be40:	2256      	movs	r2, #86	@ 0x56
 800be42:	5499      	strb	r1, [r3, r2]
	dataWrite[87] = pulses[7];
 800be44:	4b35      	ldr	r3, [pc, #212]	@ (800bf1c <E_write+0x404>)
 800be46:	79d9      	ldrb	r1, [r3, #7]
 800be48:	4b2a      	ldr	r3, [pc, #168]	@ (800bef4 <E_write+0x3dc>)
 800be4a:	2257      	movs	r2, #87	@ 0x57
 800be4c:	5499      	strb	r1, [r3, r2]

	dataWrite[88] = dt[0];
 800be4e:	4b34      	ldr	r3, [pc, #208]	@ (800bf20 <E_write+0x408>)
 800be50:	7819      	ldrb	r1, [r3, #0]
 800be52:	4b28      	ldr	r3, [pc, #160]	@ (800bef4 <E_write+0x3dc>)
 800be54:	2258      	movs	r2, #88	@ 0x58
 800be56:	5499      	strb	r1, [r3, r2]
	dataWrite[89] = dt[1];
 800be58:	4b31      	ldr	r3, [pc, #196]	@ (800bf20 <E_write+0x408>)
 800be5a:	7859      	ldrb	r1, [r3, #1]
 800be5c:	4b25      	ldr	r3, [pc, #148]	@ (800bef4 <E_write+0x3dc>)
 800be5e:	2259      	movs	r2, #89	@ 0x59
 800be60:	5499      	strb	r1, [r3, r2]
	dataWrite[90] = dt[2];
 800be62:	4b2f      	ldr	r3, [pc, #188]	@ (800bf20 <E_write+0x408>)
 800be64:	7899      	ldrb	r1, [r3, #2]
 800be66:	4b23      	ldr	r3, [pc, #140]	@ (800bef4 <E_write+0x3dc>)
 800be68:	225a      	movs	r2, #90	@ 0x5a
 800be6a:	5499      	strb	r1, [r3, r2]
	dataWrite[91] = dt[3];
 800be6c:	4b2c      	ldr	r3, [pc, #176]	@ (800bf20 <E_write+0x408>)
 800be6e:	78d9      	ldrb	r1, [r3, #3]
 800be70:	4b20      	ldr	r3, [pc, #128]	@ (800bef4 <E_write+0x3dc>)
 800be72:	225b      	movs	r2, #91	@ 0x5b
 800be74:	5499      	strb	r1, [r3, r2]
	dataWrite[92] = dt[4];
 800be76:	4b2a      	ldr	r3, [pc, #168]	@ (800bf20 <E_write+0x408>)
 800be78:	7919      	ldrb	r1, [r3, #4]
 800be7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bef4 <E_write+0x3dc>)
 800be7c:	225c      	movs	r2, #92	@ 0x5c
 800be7e:	5499      	strb	r1, [r3, r2]
	dataWrite[93] = dt[5];
 800be80:	4b27      	ldr	r3, [pc, #156]	@ (800bf20 <E_write+0x408>)
 800be82:	7959      	ldrb	r1, [r3, #5]
 800be84:	4b1b      	ldr	r3, [pc, #108]	@ (800bef4 <E_write+0x3dc>)
 800be86:	225d      	movs	r2, #93	@ 0x5d
 800be88:	5499      	strb	r1, [r3, r2]
	dataWrite[94] = dt[6];
 800be8a:	4b25      	ldr	r3, [pc, #148]	@ (800bf20 <E_write+0x408>)
 800be8c:	7999      	ldrb	r1, [r3, #6]
 800be8e:	4b19      	ldr	r3, [pc, #100]	@ (800bef4 <E_write+0x3dc>)
 800be90:	225e      	movs	r2, #94	@ 0x5e
 800be92:	5499      	strb	r1, [r3, r2]
	dataWrite[95] = dt[7];
 800be94:	4b22      	ldr	r3, [pc, #136]	@ (800bf20 <E_write+0x408>)
 800be96:	79d9      	ldrb	r1, [r3, #7]
 800be98:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <E_write+0x3dc>)
 800be9a:	225f      	movs	r2, #95	@ 0x5f
 800be9c:	5499      	strb	r1, [r3, r2]
	dataWrite[96] = dt[8];
 800be9e:	4b20      	ldr	r3, [pc, #128]	@ (800bf20 <E_write+0x408>)
 800bea0:	7a19      	ldrb	r1, [r3, #8]
 800bea2:	4b14      	ldr	r3, [pc, #80]	@ (800bef4 <E_write+0x3dc>)
 800bea4:	2260      	movs	r2, #96	@ 0x60
 800bea6:	5499      	strb	r1, [r3, r2]
	dataWrite[97] = dt[9];
 800bea8:	4b1d      	ldr	r3, [pc, #116]	@ (800bf20 <E_write+0x408>)
 800beaa:	7a59      	ldrb	r1, [r3, #9]
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <E_write+0x3dc>)
 800beae:	2261      	movs	r2, #97	@ 0x61
 800beb0:	5499      	strb	r1, [r3, r2]
	dataWrite[98] = dt[10];
 800beb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf20 <E_write+0x408>)
 800beb4:	7a99      	ldrb	r1, [r3, #10]
 800beb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <E_write+0x3dc>)
 800beb8:	2262      	movs	r2, #98	@ 0x62
 800beba:	5499      	strb	r1, [r3, r2]
	dataWrite[99] = dt[11];
 800bebc:	4b18      	ldr	r3, [pc, #96]	@ (800bf20 <E_write+0x408>)
 800bebe:	7ad9      	ldrb	r1, [r3, #11]
 800bec0:	4b0c      	ldr	r3, [pc, #48]	@ (800bef4 <E_write+0x3dc>)
 800bec2:	2263      	movs	r2, #99	@ 0x63
 800bec4:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(&hi2c2, 0xA0, (3<<7), 2, dataWrite, 100, 1000);
 800bec6:	23c0      	movs	r3, #192	@ 0xc0
 800bec8:	005a      	lsls	r2, r3, #1
 800beca:	4816      	ldr	r0, [pc, #88]	@ (800bf24 <E_write+0x40c>)
 800becc:	23fa      	movs	r3, #250	@ 0xfa
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	9302      	str	r3, [sp, #8]
 800bed2:	2364      	movs	r3, #100	@ 0x64
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	4b07      	ldr	r3, [pc, #28]	@ (800bef4 <E_write+0x3dc>)
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	2302      	movs	r3, #2
 800bedc:	21a0      	movs	r1, #160	@ 0xa0
 800bede:	f003 fbb1 	bl	800f644 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800bee2:	2005      	movs	r0, #5
 800bee4:	f002 fb1e 	bl	800e524 <HAL_Delay>
}
 800bee8:	46c0      	nop			@ (mov r8, r8)
 800beea:	46bd      	mov	sp, r7
 800beec:	e01c      	b.n	800bf28 <E_write+0x410>
 800beee:	46c0      	nop			@ (mov r8, r8)
 800bef0:	2000101c 	.word	0x2000101c
 800bef4:	20000f44 	.word	0x20000f44
 800bef8:	20001024 	.word	0x20001024
 800befc:	2000102c 	.word	0x2000102c
 800bf00:	20001034 	.word	0x20001034
 800bf04:	2000103c 	.word	0x2000103c
 800bf08:	20001044 	.word	0x20001044
 800bf0c:	2000104c 	.word	0x2000104c
 800bf10:	20001054 	.word	0x20001054
 800bf14:	2000105c 	.word	0x2000105c
 800bf18:	20001064 	.word	0x20001064
 800bf1c:	2000107c 	.word	0x2000107c
 800bf20:	20001084 	.word	0x20001084
 800bf24:	20000624 	.word	0x20000624
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	46c0      	nop			@ (mov r8, r8)

0800bf2c <Voice_init>:

//voice
void Voice_init(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
	//v_can_start[5][6] ~ [15][16], odd-0x35(number)/0x30(letter), even = plate_qr[6]-[11]
	//v_cn_start[5][6] ~ [15][16], odd-0x4A(number)/0x30(letter), even = plate_qr[6]-[11]
	for (int i=6; i<=11; i++)
 800bf32:	2306      	movs	r3, #6
 800bf34:	607b      	str	r3, [r7, #4]
 800bf36:	e045      	b.n	800bfc4 <Voice_init+0x98>
	{
		if (plate_qr[i] < 0x41)
 800bf38:	4a3f      	ldr	r2, [pc, #252]	@ (800c038 <Voice_init+0x10c>)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	18d3      	adds	r3, r2, r3
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b40      	cmp	r3, #64	@ 0x40
 800bf42:	d81e      	bhi.n	800bf82 <Voice_init+0x56>
		{
			v_can_start[2*i-7] = 0x35;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	3b07      	subs	r3, #7
 800bf4a:	4a3c      	ldr	r2, [pc, #240]	@ (800c03c <Voice_init+0x110>)
 800bf4c:	2135      	movs	r1, #53	@ 0x35
 800bf4e:	54d1      	strb	r1, [r2, r3]
			v_can_start[2*i-6] = plate_qr[i];
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3b03      	subs	r3, #3
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	4938      	ldr	r1, [pc, #224]	@ (800c038 <Voice_init+0x10c>)
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	188a      	adds	r2, r1, r2
 800bf5c:	7811      	ldrb	r1, [r2, #0]
 800bf5e:	4a37      	ldr	r2, [pc, #220]	@ (800c03c <Voice_init+0x110>)
 800bf60:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-7] = 0x4A;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	3b07      	subs	r3, #7
 800bf68:	4a35      	ldr	r2, [pc, #212]	@ (800c040 <Voice_init+0x114>)
 800bf6a:	214a      	movs	r1, #74	@ 0x4a
 800bf6c:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-6] = plate_qr[i];
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3b03      	subs	r3, #3
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4930      	ldr	r1, [pc, #192]	@ (800c038 <Voice_init+0x10c>)
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	188a      	adds	r2, r1, r2
 800bf7a:	7811      	ldrb	r1, [r2, #0]
 800bf7c:	4a30      	ldr	r2, [pc, #192]	@ (800c040 <Voice_init+0x114>)
 800bf7e:	54d1      	strb	r1, [r2, r3]
 800bf80:	e01d      	b.n	800bfbe <Voice_init+0x92>
		}
		else
		{
			v_can_start[2*i-7] = 0x30;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	3b07      	subs	r3, #7
 800bf88:	4a2c      	ldr	r2, [pc, #176]	@ (800c03c <Voice_init+0x110>)
 800bf8a:	2130      	movs	r1, #48	@ 0x30
 800bf8c:	54d1      	strb	r1, [r2, r3]
			v_can_start[2*i-6] = plate_qr[i];
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3b03      	subs	r3, #3
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	4928      	ldr	r1, [pc, #160]	@ (800c038 <Voice_init+0x10c>)
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	188a      	adds	r2, r1, r2
 800bf9a:	7811      	ldrb	r1, [r2, #0]
 800bf9c:	4a27      	ldr	r2, [pc, #156]	@ (800c03c <Voice_init+0x110>)
 800bf9e:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-7] = 0x30;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	3b07      	subs	r3, #7
 800bfa6:	4a26      	ldr	r2, [pc, #152]	@ (800c040 <Voice_init+0x114>)
 800bfa8:	2130      	movs	r1, #48	@ 0x30
 800bfaa:	54d1      	strb	r1, [r2, r3]
			v_cn_start[2*i-6] = plate_qr[i];
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3b03      	subs	r3, #3
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4921      	ldr	r1, [pc, #132]	@ (800c038 <Voice_init+0x10c>)
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	188a      	adds	r2, r1, r2
 800bfb8:	7811      	ldrb	r1, [r2, #0]
 800bfba:	4a21      	ldr	r2, [pc, #132]	@ (800c040 <Voice_init+0x114>)
 800bfbc:	54d1      	strb	r1, [r2, r3]
	for (int i=6; i<=11; i++)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	607b      	str	r3, [r7, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b0b      	cmp	r3, #11
 800bfc8:	ddb6      	ble.n	800bf38 <Voice_init+0xc>
		}
	}

	v_en_start[6] = plate_qr[6];
 800bfca:	4b1b      	ldr	r3, [pc, #108]	@ (800c038 <Voice_init+0x10c>)
 800bfcc:	799a      	ldrb	r2, [r3, #6]
 800bfce:	4b1d      	ldr	r3, [pc, #116]	@ (800c044 <Voice_init+0x118>)
 800bfd0:	719a      	strb	r2, [r3, #6]
	v_en_start[8] = plate_qr[7];
 800bfd2:	4b19      	ldr	r3, [pc, #100]	@ (800c038 <Voice_init+0x10c>)
 800bfd4:	79da      	ldrb	r2, [r3, #7]
 800bfd6:	4b1b      	ldr	r3, [pc, #108]	@ (800c044 <Voice_init+0x118>)
 800bfd8:	721a      	strb	r2, [r3, #8]
	v_en_start[10] = plate_qr[8];
 800bfda:	4b17      	ldr	r3, [pc, #92]	@ (800c038 <Voice_init+0x10c>)
 800bfdc:	7a1a      	ldrb	r2, [r3, #8]
 800bfde:	4b19      	ldr	r3, [pc, #100]	@ (800c044 <Voice_init+0x118>)
 800bfe0:	729a      	strb	r2, [r3, #10]
	v_en_start[12] = plate_qr[9];
 800bfe2:	4b15      	ldr	r3, [pc, #84]	@ (800c038 <Voice_init+0x10c>)
 800bfe4:	7a5a      	ldrb	r2, [r3, #9]
 800bfe6:	4b17      	ldr	r3, [pc, #92]	@ (800c044 <Voice_init+0x118>)
 800bfe8:	731a      	strb	r2, [r3, #12]
	v_en_start[14] = plate_qr[10];
 800bfea:	4b13      	ldr	r3, [pc, #76]	@ (800c038 <Voice_init+0x10c>)
 800bfec:	7a9a      	ldrb	r2, [r3, #10]
 800bfee:	4b15      	ldr	r3, [pc, #84]	@ (800c044 <Voice_init+0x118>)
 800bff0:	739a      	strb	r2, [r3, #14]
	v_en_start[16] = plate_qr[11];
 800bff2:	4b11      	ldr	r3, [pc, #68]	@ (800c038 <Voice_init+0x10c>)
 800bff4:	7ada      	ldrb	r2, [r3, #11]
 800bff6:	4b13      	ldr	r3, [pc, #76]	@ (800c044 <Voice_init+0x118>)
 800bff8:	741a      	strb	r2, [r3, #16]

	v_can_start[19] = checksum_8bit(v_can_start,20);
 800bffa:	4b10      	ldr	r3, [pc, #64]	@ (800c03c <Voice_init+0x110>)
 800bffc:	2114      	movs	r1, #20
 800bffe:	0018      	movs	r0, r3
 800c000:	f7fc fa2c 	bl	800845c <checksum_8bit>
 800c004:	0003      	movs	r3, r0
 800c006:	001a      	movs	r2, r3
 800c008:	4b0c      	ldr	r3, [pc, #48]	@ (800c03c <Voice_init+0x110>)
 800c00a:	74da      	strb	r2, [r3, #19]
	v_cn_start[19] = checksum_8bit(v_cn_start,20);
 800c00c:	4b0c      	ldr	r3, [pc, #48]	@ (800c040 <Voice_init+0x114>)
 800c00e:	2114      	movs	r1, #20
 800c010:	0018      	movs	r0, r3
 800c012:	f7fc fa23 	bl	800845c <checksum_8bit>
 800c016:	0003      	movs	r3, r0
 800c018:	001a      	movs	r2, r3
 800c01a:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <Voice_init+0x114>)
 800c01c:	74da      	strb	r2, [r3, #19]
	v_en_start[19] = checksum_8bit(v_en_start,20);
 800c01e:	4b09      	ldr	r3, [pc, #36]	@ (800c044 <Voice_init+0x118>)
 800c020:	2114      	movs	r1, #20
 800c022:	0018      	movs	r0, r3
 800c024:	f7fc fa1a 	bl	800845c <checksum_8bit>
 800c028:	0003      	movs	r3, r0
 800c02a:	001a      	movs	r2, r3
 800c02c:	4b05      	ldr	r3, [pc, #20]	@ (800c044 <Voice_init+0x118>)
 800c02e:	74da      	strb	r2, [r3, #19]
}
 800c030:	46c0      	nop			@ (mov r8, r8)
 800c032:	46bd      	mov	sp, r7
 800c034:	b002      	add	sp, #8
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20000090 	.word	0x20000090
 800c03c:	2000049c 	.word	0x2000049c
 800c040:	200004b0 	.word	0x200004b0
 800c044:	200004c4 	.word	0x200004c4

0800c048 <Voice_start>:

void Voice_start(unsigned char data[])
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)data, 20, 1000);
 800c050:	23fa      	movs	r3, #250	@ 0xfa
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4804      	ldr	r0, [pc, #16]	@ (800c068 <Voice_start+0x20>)
 800c058:	2214      	movs	r2, #20
 800c05a:	f007 fce9 	bl	8013a30 <HAL_UART_Transmit>
}
 800c05e:	46c0      	nop			@ (mov r8, r8)
 800c060:	46bd      	mov	sp, r7
 800c062:	b002      	add	sp, #8
 800c064:	bd80      	pop	{r7, pc}
 800c066:	46c0      	nop			@ (mov r8, r8)
 800c068:	20000790 	.word	0x20000790

0800c06c <Voice_end>:

void Voice_end(unsigned char data[])
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)data, 32, 1000);
 800c074:	23fa      	movs	r3, #250	@ 0xfa
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	4804      	ldr	r0, [pc, #16]	@ (800c08c <Voice_end+0x20>)
 800c07c:	2220      	movs	r2, #32
 800c07e:	f007 fcd7 	bl	8013a30 <HAL_UART_Transmit>
}
 800c082:	46c0      	nop			@ (mov r8, r8)
 800c084:	46bd      	mov	sp, r7
 800c086:	b002      	add	sp, #8
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	46c0      	nop			@ (mov r8, r8)
 800c08c:	20000790 	.word	0x20000790

0800c090 <cal_vcan>:

void cal_vcan(unsigned char data[], unsigned char result[])
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3301      	adds	r3, #1
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2b30      	cmp	r3, #48	@ 0x30
 800c0a2:	d100      	bne.n	800c0a6 <cal_vcan+0x16>
 800c0a4:	e0ba      	b.n	800c21c <cal_vcan+0x18c>
	{
		result[0] += 2;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	3302      	adds	r3, #2
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	701a      	strb	r2, [r3, #0]
		//x000 - (1000 ~ 9000)
		result[1] = 0x46;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	2246      	movs	r2, #70	@ 0x46
 800c0b8:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	3302      	adds	r3, #2
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	7852      	ldrb	r2, [r2, #1]
 800c0c2:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3302      	adds	r3, #2
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b30      	cmp	r3, #48	@ 0x30
 800c0cc:	d14f      	bne.n	800c16e <cal_vcan+0xde>
		{
			if (data[3] == 0x30)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3303      	adds	r3, #3
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b30      	cmp	r3, #48	@ 0x30
 800c0d6:	d11d      	bne.n	800c114 <cal_vcan+0x84>
			{
				if (data[4] != 0x30)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b30      	cmp	r3, #48	@ 0x30
 800c0e0:	d100      	bne.n	800c0e4 <cal_vcan+0x54>
 800c0e2:	e118      	b.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 4;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	701a      	strb	r2, [r3, #0]
					//0x - (1001 ~ 9009)
					result[3] = 0x35;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3303      	adds	r3, #3
 800c0f4:	2235      	movs	r2, #53	@ 0x35
 800c0f6:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	2230      	movs	r2, #48	@ 0x30
 800c0fe:	701a      	strb	r2, [r3, #0]
					result[5] = 0x35;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	3305      	adds	r3, #5
 800c104:	2235      	movs	r2, #53	@ 0x35
 800c106:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	3306      	adds	r3, #6
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	7912      	ldrb	r2, [r2, #4]
 800c110:	701a      	strb	r2, [r3, #0]
 800c112:	e100      	b.n	800c316 <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 4;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	3304      	adds	r3, #4
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	701a      	strb	r2, [r3, #0]
				//0x0 - (x0x0 1010 ~ 9090)
				result[3] = 0x35;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	3303      	adds	r3, #3
 800c124:	2235      	movs	r2, #53	@ 0x35
 800c126:	701a      	strb	r2, [r3, #0]
				result[4] = 0x30;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	3304      	adds	r3, #4
 800c12c:	2230      	movs	r2, #48	@ 0x30
 800c12e:	701a      	strb	r2, [r3, #0]
				result[5] = 0x44;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	3305      	adds	r3, #5
 800c134:	2244      	movs	r2, #68	@ 0x44
 800c136:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	3306      	adds	r3, #6
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	78d2      	ldrb	r2, [r2, #3]
 800c140:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3304      	adds	r3, #4
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b30      	cmp	r3, #48	@ 0x30
 800c14a:	d100      	bne.n	800c14e <cal_vcan+0xbe>
 800c14c:	e0e3      	b.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 2;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	3302      	adds	r3, #2
 800c154:	b2da      	uxtb	r2, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	701a      	strb	r2, [r3, #0]
					//x - (x0xx 1011 ~ 9099)
					result[7] = 0x35;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	3307      	adds	r3, #7
 800c15e:	2235      	movs	r2, #53	@ 0x35
 800c160:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	3308      	adds	r3, #8
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	7912      	ldrb	r2, [r2, #4]
 800c16a:	701a      	strb	r2, [r3, #0]
 800c16c:	e0d3      	b.n	800c316 <cal_vcan+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	3302      	adds	r3, #2
 800c174:	b2da      	uxtb	r2, r3
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	701a      	strb	r2, [r3, #0]
			//xx00 (1100 ~ 9900)
			result[3] = 0x45;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	3303      	adds	r3, #3
 800c17e:	2245      	movs	r2, #69	@ 0x45
 800c180:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	3304      	adds	r3, #4
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	7892      	ldrb	r2, [r2, #2]
 800c18a:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3303      	adds	r3, #3
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b30      	cmp	r3, #48	@ 0x30
 800c194:	d11d      	bne.n	800c1d2 <cal_vcan+0x142>
			{
				if (data[4] != 0x30)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3304      	adds	r3, #4
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b30      	cmp	r3, #48	@ 0x30
 800c19e:	d100      	bne.n	800c1a2 <cal_vcan+0x112>
 800c1a0:	e0b9      	b.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 4;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	701a      	strb	r2, [r3, #0]
					//0x (1101 ~ 9909)
					result[5] = 0x35;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	3305      	adds	r3, #5
 800c1b2:	2235      	movs	r2, #53	@ 0x35
 800c1b4:	701a      	strb	r2, [r3, #0]
					result[6] = 0x30;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	3306      	adds	r3, #6
 800c1ba:	2230      	movs	r2, #48	@ 0x30
 800c1bc:	701a      	strb	r2, [r3, #0]
					result[7] = 0x35;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	2235      	movs	r2, #53	@ 0x35
 800c1c4:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	7912      	ldrb	r2, [r2, #4]
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	e0a1      	b.n	800c316 <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	3302      	adds	r3, #2
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	701a      	strb	r2, [r3, #0]
				//x0 - (1110 ~ 9990)
				result[5] = 0x44;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	3305      	adds	r3, #5
 800c1e2:	2244      	movs	r2, #68	@ 0x44
 800c1e4:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	3306      	adds	r3, #6
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	78d2      	ldrb	r2, [r2, #3]
 800c1ee:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b30      	cmp	r3, #48	@ 0x30
 800c1f8:	d100      	bne.n	800c1fc <cal_vcan+0x16c>
 800c1fa:	e08c      	b.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 2;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	3302      	adds	r3, #2
 800c202:	b2da      	uxtb	r2, r3
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	701a      	strb	r2, [r3, #0]
					//x - (1111 ~ 9999)
					result[7] = 0x35;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	3307      	adds	r3, #7
 800c20c:	2235      	movs	r2, #53	@ 0x35
 800c20e:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	7912      	ldrb	r2, [r2, #4]
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e07c      	b.n	800c316 <cal_vcan+0x286>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3302      	adds	r3, #2
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b30      	cmp	r3, #48	@ 0x30
 800c224:	d054      	beq.n	800c2d0 <cal_vcan+0x240>
		{
			result[0] += 2;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	3302      	adds	r3, #2
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	701a      	strb	r2, [r3, #0]
			//x?�� - (100 ~ 900)
			result[1] = 0x45;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	3301      	adds	r3, #1
 800c236:	2245      	movs	r2, #69	@ 0x45
 800c238:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	3302      	adds	r3, #2
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	7892      	ldrb	r2, [r2, #2]
 800c242:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3303      	adds	r3, #3
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b30      	cmp	r3, #48	@ 0x30
 800c24c:	d11c      	bne.n	800c288 <cal_vcan+0x1f8>
			{
				if (data[4] != 0x30)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3304      	adds	r3, #4
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b30      	cmp	r3, #48	@ 0x30
 800c256:	d05e      	beq.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 4;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	3304      	adds	r3, #4
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[3] = 0x35;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	3303      	adds	r3, #3
 800c268:	2235      	movs	r2, #53	@ 0x35
 800c26a:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	3304      	adds	r3, #4
 800c270:	2230      	movs	r2, #48	@ 0x30
 800c272:	701a      	strb	r2, [r3, #0]
					result[5] = 0x35;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	3305      	adds	r3, #5
 800c278:	2235      	movs	r2, #53	@ 0x35
 800c27a:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3306      	adds	r3, #6
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	7912      	ldrb	r2, [r2, #4]
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	e046      	b.n	800c316 <cal_vcan+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	3302      	adds	r3, #2
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[3] = 0x44;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	3303      	adds	r3, #3
 800c298:	2244      	movs	r2, #68	@ 0x44
 800c29a:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	78d2      	ldrb	r2, [r2, #3]
 800c2a4:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	2b30      	cmp	r3, #48	@ 0x30
 800c2ae:	d032      	beq.n	800c316 <cal_vcan+0x286>
				{
					result[0] += 2;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	3302      	adds	r3, #2
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[5] = 0x35;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	3305      	adds	r3, #5
 800c2c0:	2235      	movs	r2, #53	@ 0x35
 800c2c2:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	3306      	adds	r3, #6
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7912      	ldrb	r2, [r2, #4]
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	e022      	b.n	800c316 <cal_vcan+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	3302      	adds	r3, #2
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	701a      	strb	r2, [r3, #0]
			//x0 - (30 ~ 90)
			result[1] = 0x44;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	2244      	movs	r2, #68	@ 0x44
 800c2e2:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	3302      	adds	r3, #2
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	78d2      	ldrb	r2, [r2, #3]
 800c2ec:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b30      	cmp	r3, #48	@ 0x30
 800c2f6:	d00e      	beq.n	800c316 <cal_vcan+0x286>
			{
				result[0] += 2;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	701a      	strb	r2, [r3, #0]
				//x - (23 ~ 99)
				result[3] = 0x35;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	3303      	adds	r3, #3
 800c308:	2235      	movs	r2, #53	@ 0x35
 800c30a:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	3304      	adds	r3, #4
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7912      	ldrb	r2, [r2, #4]
 800c314:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//yuan
	result[0] += 2;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	3302      	adds	r3, #2
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x36;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	3b01      	subs	r3, #1
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	18d3      	adds	r3, r2, r3
 800c32c:	2236      	movs	r2, #54	@ 0x36
 800c32e:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x34;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	001a      	movs	r2, r3
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	189b      	adds	r3, r3, r2
 800c33a:	2234      	movs	r2, #52	@ 0x34
 800c33c:	701a      	strb	r2, [r3, #0]

	if (data[5] != 0x30)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3305      	adds	r3, #5
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	2b30      	cmp	r3, #48	@ 0x30
 800c346:	d022      	beq.n	800c38e <cal_vcan+0x2fe>
	{
		result[0] += 4;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	3304      	adds	r3, #4
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	701a      	strb	r2, [r3, #0]
		result[result[0] - 3] = 0x35;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	3b03      	subs	r3, #3
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	18d3      	adds	r3, r2, r3
 800c35e:	2235      	movs	r2, #53	@ 0x35
 800c360:	701a      	strb	r2, [r3, #0]
		result[result[0] - 2] = data[5];
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	3b02      	subs	r3, #2
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	18d3      	adds	r3, r2, r3
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7952      	ldrb	r2, [r2, #5]
 800c370:	701a      	strb	r2, [r3, #0]
		//hau
		result[result[0] - 1] = 0x36;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	3b01      	subs	r3, #1
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	18d3      	adds	r3, r2, r3
 800c37c:	2236      	movs	r2, #54	@ 0x36
 800c37e:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x33;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	001a      	movs	r2, r3
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	189b      	adds	r3, r3, r2
 800c38a:	2233      	movs	r2, #51	@ 0x33
 800c38c:	701a      	strb	r2, [r3, #0]
	}

	if (data[0] != 0)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d100      	bne.n	800c398 <cal_vcan+0x308>
 800c396:	e11f      	b.n	800c5d8 <cal_vcan+0x548>
	{
		//surcharge
		result[0] += 2;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	3302      	adds	r3, #2
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x37;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	18d3      	adds	r3, r2, r3
 800c3ae:	2237      	movs	r2, #55	@ 0x37
 800c3b0:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x32;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	001a      	movs	r2, r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	189b      	adds	r3, r3, r2
 800c3bc:	2232      	movs	r2, #50	@ 0x32
 800c3be:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3306      	adds	r3, #6
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b30      	cmp	r3, #48	@ 0x30
 800c3c8:	d074      	beq.n	800c4b4 <cal_vcan+0x424>
		{
			result[0] += 2;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	701a      	strb	r2, [r3, #0]
			//x?�� - (x?��)
			result[result[0] - 1] = 0x45;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	18d3      	adds	r3, r2, r3
 800c3e0:	2245      	movs	r2, #69	@ 0x45
 800c3e2:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	001a      	movs	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	189b      	adds	r3, r3, r2
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	7992      	ldrb	r2, [r2, #6]
 800c3f2:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3307      	adds	r3, #7
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b30      	cmp	r3, #48	@ 0x30
 800c3fc:	d129      	bne.n	800c452 <cal_vcan+0x3c2>
			{
				if (data[8] != 0x30)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3308      	adds	r3, #8
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b30      	cmp	r3, #48	@ 0x30
 800c406:	d100      	bne.n	800c40a <cal_vcan+0x37a>
 800c408:	e0d2      	b.n	800c5b0 <cal_vcan+0x520>
				{
					result[0] += 4;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	3304      	adds	r3, #4
 800c410:	b2da      	uxtb	r2, r3
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[result[0] - 3] = 0x35;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	3b03      	subs	r3, #3
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	18d3      	adds	r3, r2, r3
 800c420:	2235      	movs	r2, #53	@ 0x35
 800c422:	701a      	strb	r2, [r3, #0]
					result[result[0] - 2] = 0x30;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	3b02      	subs	r3, #2
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	18d3      	adds	r3, r2, r3
 800c42e:	2230      	movs	r2, #48	@ 0x30
 800c430:	701a      	strb	r2, [r3, #0]
					result[result[0] - 1] = 0x35;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	3b01      	subs	r3, #1
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	18d3      	adds	r3, r2, r3
 800c43c:	2235      	movs	r2, #53	@ 0x35
 800c43e:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	001a      	movs	r2, r3
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	189b      	adds	r3, r3, r2
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	7a12      	ldrb	r2, [r2, #8]
 800c44e:	701a      	strb	r2, [r3, #0]
 800c450:	e0ae      	b.n	800c5b0 <cal_vcan+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	3302      	adds	r3, #2
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[result[0] - 1] = 0x44;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	3b01      	subs	r3, #1
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	18d3      	adds	r3, r2, r3
 800c468:	2244      	movs	r2, #68	@ 0x44
 800c46a:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	001a      	movs	r2, r3
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	189b      	adds	r3, r3, r2
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	79d2      	ldrb	r2, [r2, #7]
 800c47a:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3308      	adds	r3, #8
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b30      	cmp	r3, #48	@ 0x30
 800c484:	d100      	bne.n	800c488 <cal_vcan+0x3f8>
 800c486:	e093      	b.n	800c5b0 <cal_vcan+0x520>
				{
					result[0] += 2;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	3302      	adds	r3, #2
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[result[0] - 1] = 0x35;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	3b01      	subs	r3, #1
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	18d3      	adds	r3, r2, r3
 800c49e:	2235      	movs	r2, #53	@ 0x35
 800c4a0:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	001a      	movs	r2, r3
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	189b      	adds	r3, r3, r2
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	7a12      	ldrb	r2, [r2, #8]
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	e07d      	b.n	800c5b0 <cal_vcan+0x520>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3307      	adds	r3, #7
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b31      	cmp	r3, #49	@ 0x31
 800c4bc:	d12e      	bne.n	800c51c <cal_vcan+0x48c>
			{
				result[0] += 2;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	3302      	adds	r3, #2
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	701a      	strb	r2, [r3, #0]
				//10 - (10)
				result[result[0] - 1] = 0x36;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	18d3      	adds	r3, r2, r3
 800c4d4:	2236      	movs	r2, #54	@ 0x36
 800c4d6:	701a      	strb	r2, [r3, #0]
				result[result[0]] = 0x30;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	001a      	movs	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	189b      	adds	r3, r3, r2
 800c4e2:	2230      	movs	r2, #48	@ 0x30
 800c4e4:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b30      	cmp	r3, #48	@ 0x30
 800c4ee:	d05f      	beq.n	800c5b0 <cal_vcan+0x520>
				{
					result[0] += 2;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	3302      	adds	r3, #2
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	701a      	strb	r2, [r3, #0]
					//x - (11 ~ 19)
					result[result[0] - 1] = 0x35;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	3b01      	subs	r3, #1
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	18d3      	adds	r3, r2, r3
 800c506:	2235      	movs	r2, #53	@ 0x35
 800c508:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	001a      	movs	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	189b      	adds	r3, r3, r2
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	7a12      	ldrb	r2, [r2, #8]
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	e049      	b.n	800c5b0 <cal_vcan+0x520>
				}
			}
			else if (data[7] != 0x30)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3307      	adds	r3, #7
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2b30      	cmp	r3, #48	@ 0x30
 800c524:	d02f      	beq.n	800c586 <cal_vcan+0x4f6>
			{
				result[0] += 2;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	3302      	adds	r3, #2
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	701a      	strb	r2, [r3, #0]
				//x0 - (20 ~ 90)
				result[result[0] - 1] = 0x44;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	3b01      	subs	r3, #1
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	18d3      	adds	r3, r2, r3
 800c53c:	2244      	movs	r2, #68	@ 0x44
 800c53e:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	001a      	movs	r2, r3
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	189b      	adds	r3, r3, r2
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	79d2      	ldrb	r2, [r2, #7]
 800c54e:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3308      	adds	r3, #8
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b30      	cmp	r3, #48	@ 0x30
 800c558:	d02a      	beq.n	800c5b0 <cal_vcan+0x520>
				{
					result[0] += 2;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	3302      	adds	r3, #2
 800c560:	b2da      	uxtb	r2, r3
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	701a      	strb	r2, [r3, #0]
					//x - (21 ~ 99)
					result[result[0] - 1] = 0x35;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	18d3      	adds	r3, r2, r3
 800c570:	2235      	movs	r2, #53	@ 0x35
 800c572:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	001a      	movs	r2, r3
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	189b      	adds	r3, r3, r2
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	7a12      	ldrb	r2, [r2, #8]
 800c582:	701a      	strb	r2, [r3, #0]
 800c584:	e014      	b.n	800c5b0 <cal_vcan+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	3302      	adds	r3, #2
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	701a      	strb	r2, [r3, #0]
				//x - (1 ~ 9)
				result[result[0] - 1] = 0x35;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	3b01      	subs	r3, #1
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	18d3      	adds	r3, r2, r3
 800c59c:	2235      	movs	r2, #53	@ 0x35
 800c59e:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	001a      	movs	r2, r3
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	189b      	adds	r3, r3, r2
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	7a12      	ldrb	r2, [r2, #8]
 800c5ae:	701a      	strb	r2, [r3, #0]
			}
		}
		//yuan
		result[0] += 2;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	3302      	adds	r3, #2
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x36;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	18d3      	adds	r3, r2, r3
 800c5c6:	2236      	movs	r2, #54	@ 0x36
 800c5c8:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x34;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	001a      	movs	r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	189b      	adds	r3, r3, r2
 800c5d4:	2234      	movs	r2, #52	@ 0x34
 800c5d6:	701a      	strb	r2, [r3, #0]
	}
	//thx, bye
	result[0] += 2;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	3302      	adds	r3, #2
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x37;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	18d3      	adds	r3, r2, r3
 800c5ee:	2237      	movs	r2, #55	@ 0x37
 800c5f0:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x31;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	001a      	movs	r2, r3
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	189b      	adds	r3, r3, r2
 800c5fc:	2231      	movs	r2, #49	@ 0x31
 800c5fe:	701a      	strb	r2, [r3, #0]
}
 800c600:	46c0      	nop			@ (mov r8, r8)
 800c602:	46bd      	mov	sp, r7
 800c604:	b002      	add	sp, #8
 800c606:	bd80      	pop	{r7, pc}

0800c608 <cal_vcn>:

void cal_vcn(unsigned char data[], unsigned char result[])
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3301      	adds	r3, #1
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2b30      	cmp	r3, #48	@ 0x30
 800c61a:	d100      	bne.n	800c61e <cal_vcn+0x16>
 800c61c:	e0ba      	b.n	800c794 <cal_vcn+0x18c>
	{
		result[0] += 2;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	3302      	adds	r3, #2
 800c624:	b2da      	uxtb	r2, r3
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	701a      	strb	r2, [r3, #0]
		//x000 - (1000 ~ 9000)
		result[1] = 0x49;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	2249      	movs	r2, #73	@ 0x49
 800c630:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	3302      	adds	r3, #2
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	7852      	ldrb	r2, [r2, #1]
 800c63a:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3302      	adds	r3, #2
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b30      	cmp	r3, #48	@ 0x30
 800c644:	d14f      	bne.n	800c6e6 <cal_vcn+0xde>
		{
			if (data[3] == 0x30)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3303      	adds	r3, #3
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b30      	cmp	r3, #48	@ 0x30
 800c64e:	d11d      	bne.n	800c68c <cal_vcn+0x84>
			{
				if (data[4] != 0x30)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3304      	adds	r3, #4
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b30      	cmp	r3, #48	@ 0x30
 800c658:	d100      	bne.n	800c65c <cal_vcn+0x54>
 800c65a:	e118      	b.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 4;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	3304      	adds	r3, #4
 800c662:	b2da      	uxtb	r2, r3
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	701a      	strb	r2, [r3, #0]
					//0x - (1001 ~ 9009)
					result[3] = 0x4A;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	3303      	adds	r3, #3
 800c66c:	224a      	movs	r2, #74	@ 0x4a
 800c66e:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	3304      	adds	r3, #4
 800c674:	2230      	movs	r2, #48	@ 0x30
 800c676:	701a      	strb	r2, [r3, #0]
					result[5] = 0x4A;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	3305      	adds	r3, #5
 800c67c:	224a      	movs	r2, #74	@ 0x4a
 800c67e:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	3306      	adds	r3, #6
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	7912      	ldrb	r2, [r2, #4]
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	e100      	b.n	800c88e <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 4;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	3304      	adds	r3, #4
 800c692:	b2da      	uxtb	r2, r3
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	701a      	strb	r2, [r3, #0]
				//0x0 - (1010 ~ 9090)
				result[3] = 0x4A;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	3303      	adds	r3, #3
 800c69c:	224a      	movs	r2, #74	@ 0x4a
 800c69e:	701a      	strb	r2, [r3, #0]
				result[4] = 0x30;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	2230      	movs	r2, #48	@ 0x30
 800c6a6:	701a      	strb	r2, [r3, #0]
				result[5] = 0x47;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	3305      	adds	r3, #5
 800c6ac:	2247      	movs	r2, #71	@ 0x47
 800c6ae:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	3306      	adds	r3, #6
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	78d2      	ldrb	r2, [r2, #3]
 800c6b8:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b30      	cmp	r3, #48	@ 0x30
 800c6c2:	d100      	bne.n	800c6c6 <cal_vcn+0xbe>
 800c6c4:	e0e3      	b.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 2;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	3302      	adds	r3, #2
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	701a      	strb	r2, [r3, #0]
					//x - (1011 ~ 9099)
					result[7] = 0x4A;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	3307      	adds	r3, #7
 800c6d6:	224a      	movs	r2, #74	@ 0x4a
 800c6d8:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	3308      	adds	r3, #8
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	7912      	ldrb	r2, [r2, #4]
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e0d3      	b.n	800c88e <cal_vcn+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	3302      	adds	r3, #2
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[3] = 0x48;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	3303      	adds	r3, #3
 800c6f6:	2248      	movs	r2, #72	@ 0x48
 800c6f8:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	7892      	ldrb	r2, [r2, #2]
 800c702:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3303      	adds	r3, #3
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b30      	cmp	r3, #48	@ 0x30
 800c70c:	d11d      	bne.n	800c74a <cal_vcn+0x142>
			{
				if (data[4] != 0x30)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3304      	adds	r3, #4
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b30      	cmp	r3, #48	@ 0x30
 800c716:	d100      	bne.n	800c71a <cal_vcn+0x112>
 800c718:	e0b9      	b.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 4;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	3304      	adds	r3, #4
 800c720:	b2da      	uxtb	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	701a      	strb	r2, [r3, #0]
					//0x - (1101 ~ 9909)
					result[5] = 0x4A;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	3305      	adds	r3, #5
 800c72a:	224a      	movs	r2, #74	@ 0x4a
 800c72c:	701a      	strb	r2, [r3, #0]
					result[6] = 0x30;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	3306      	adds	r3, #6
 800c732:	2230      	movs	r2, #48	@ 0x30
 800c734:	701a      	strb	r2, [r3, #0]
					result[7] = 0x4A;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	3307      	adds	r3, #7
 800c73a:	224a      	movs	r2, #74	@ 0x4a
 800c73c:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	3308      	adds	r3, #8
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	7912      	ldrb	r2, [r2, #4]
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	e0a1      	b.n	800c88e <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	3302      	adds	r3, #2
 800c750:	b2da      	uxtb	r2, r3
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	701a      	strb	r2, [r3, #0]
				//x0 - (1110 ~ 9990)
				result[5] = 0x47;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	3305      	adds	r3, #5
 800c75a:	2247      	movs	r2, #71	@ 0x47
 800c75c:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	3306      	adds	r3, #6
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	78d2      	ldrb	r2, [r2, #3]
 800c766:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3304      	adds	r3, #4
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b30      	cmp	r3, #48	@ 0x30
 800c770:	d100      	bne.n	800c774 <cal_vcn+0x16c>
 800c772:	e08c      	b.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 2;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	3302      	adds	r3, #2
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	701a      	strb	r2, [r3, #0]
					//x - (1111 ~ 9999)
					result[7] = 0x4A;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	3307      	adds	r3, #7
 800c784:	224a      	movs	r2, #74	@ 0x4a
 800c786:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	7912      	ldrb	r2, [r2, #4]
 800c790:	701a      	strb	r2, [r3, #0]
 800c792:	e07c      	b.n	800c88e <cal_vcn+0x286>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3302      	adds	r3, #2
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b30      	cmp	r3, #48	@ 0x30
 800c79c:	d054      	beq.n	800c848 <cal_vcn+0x240>
		{
			result[0] += 2;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	3302      	adds	r3, #2
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[1] = 0x48;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	2248      	movs	r2, #72	@ 0x48
 800c7b0:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	3302      	adds	r3, #2
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	7892      	ldrb	r2, [r2, #2]
 800c7ba:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3303      	adds	r3, #3
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b30      	cmp	r3, #48	@ 0x30
 800c7c4:	d11c      	bne.n	800c800 <cal_vcn+0x1f8>
			{
				if (data[4] != 0x30)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b30      	cmp	r3, #48	@ 0x30
 800c7ce:	d05e      	beq.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 4;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[3] = 0x4A;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	3303      	adds	r3, #3
 800c7e0:	224a      	movs	r2, #74	@ 0x4a
 800c7e2:	701a      	strb	r2, [r3, #0]
					result[4] = 0x30;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	2230      	movs	r2, #48	@ 0x30
 800c7ea:	701a      	strb	r2, [r3, #0]
					result[5] = 0x4A;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	3305      	adds	r3, #5
 800c7f0:	224a      	movs	r2, #74	@ 0x4a
 800c7f2:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	3306      	adds	r3, #6
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	7912      	ldrb	r2, [r2, #4]
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e046      	b.n	800c88e <cal_vcn+0x286>
				}
			}
			else
			{
				result[0] += 2;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	3302      	adds	r3, #2
 800c806:	b2da      	uxtb	r2, r3
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[3] = 0x47;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	3303      	adds	r3, #3
 800c810:	2247      	movs	r2, #71	@ 0x47
 800c812:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	3304      	adds	r3, #4
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	78d2      	ldrb	r2, [r2, #3]
 800c81c:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3304      	adds	r3, #4
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b30      	cmp	r3, #48	@ 0x30
 800c826:	d032      	beq.n	800c88e <cal_vcn+0x286>
				{
					result[0] += 2;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	3302      	adds	r3, #2
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[5] = 0x4A;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	3305      	adds	r3, #5
 800c838:	224a      	movs	r2, #74	@ 0x4a
 800c83a:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	3306      	adds	r3, #6
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7912      	ldrb	r2, [r2, #4]
 800c844:	701a      	strb	r2, [r3, #0]
 800c846:	e022      	b.n	800c88e <cal_vcn+0x286>
				}
			}
		}
		else
		{
			result[0] += 2;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	3302      	adds	r3, #2
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	701a      	strb	r2, [r3, #0]
			//x0 - (30 ~ 90)
			result[1] = 0x47;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	3301      	adds	r3, #1
 800c858:	2247      	movs	r2, #71	@ 0x47
 800c85a:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	3302      	adds	r3, #2
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	78d2      	ldrb	r2, [r2, #3]
 800c864:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3304      	adds	r3, #4
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b30      	cmp	r3, #48	@ 0x30
 800c86e:	d00e      	beq.n	800c88e <cal_vcn+0x286>
			{
				result[0] += 2;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	3302      	adds	r3, #2
 800c876:	b2da      	uxtb	r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	701a      	strb	r2, [r3, #0]
				//x - (23 ~ 99)
				result[3] = 0x4A;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	3303      	adds	r3, #3
 800c880:	224a      	movs	r2, #74	@ 0x4a
 800c882:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	3304      	adds	r3, #4
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7912      	ldrb	r2, [r2, #4]
 800c88c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (data[5] != 0x30)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3305      	adds	r3, #5
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b30      	cmp	r3, #48	@ 0x30
 800c896:	d022      	beq.n	800c8de <cal_vcn+0x2d6>
	{
		result[0] += 4;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	3304      	adds	r3, #4
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	701a      	strb	r2, [r3, #0]
		//dot
		result[result[0] - 3] = 0x38;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	3b03      	subs	r3, #3
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	18d3      	adds	r3, r2, r3
 800c8ae:	2238      	movs	r2, #56	@ 0x38
 800c8b0:	701a      	strb	r2, [r3, #0]
		result[result[0] - 2] = 0x38;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	3b02      	subs	r3, #2
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	18d3      	adds	r3, r2, r3
 800c8bc:	2238      	movs	r2, #56	@ 0x38
 800c8be:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x4A;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	18d3      	adds	r3, r2, r3
 800c8ca:	224a      	movs	r2, #74	@ 0x4a
 800c8cc:	701a      	strb	r2, [r3, #0]
		result[result[0]] = data[5];
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	001a      	movs	r2, r3
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	189b      	adds	r3, r3, r2
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	7952      	ldrb	r2, [r2, #5]
 800c8dc:	701a      	strb	r2, [r3, #0]
	}
	//yuan
	result[0] += 2;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	3302      	adds	r3, #2
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x38;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	18d3      	adds	r3, r2, r3
 800c8f4:	2238      	movs	r2, #56	@ 0x38
 800c8f6:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x39;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	001a      	movs	r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	189b      	adds	r3, r3, r2
 800c902:	2239      	movs	r2, #57	@ 0x39
 800c904:	701a      	strb	r2, [r3, #0]

	if (data[0] != 0)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d100      	bne.n	800c910 <cal_vcn+0x308>
 800c90e:	e11f      	b.n	800cb50 <cal_vcn+0x548>
	{
		//surcharge
		result[0] += 2;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	3302      	adds	r3, #2
 800c916:	b2da      	uxtb	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x39;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	3b01      	subs	r3, #1
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	18d3      	adds	r3, r2, r3
 800c926:	2239      	movs	r2, #57	@ 0x39
 800c928:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x37;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	001a      	movs	r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	189b      	adds	r3, r3, r2
 800c934:	2237      	movs	r2, #55	@ 0x37
 800c936:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3306      	adds	r3, #6
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b30      	cmp	r3, #48	@ 0x30
 800c940:	d074      	beq.n	800ca2c <cal_vcn+0x424>
		{
			result[0] += 2;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	3302      	adds	r3, #2
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	701a      	strb	r2, [r3, #0]
			//x00 - (100 ~ 900)
			result[result[0] - 1] = 0x48;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	3b01      	subs	r3, #1
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	18d3      	adds	r3, r2, r3
 800c958:	2248      	movs	r2, #72	@ 0x48
 800c95a:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	001a      	movs	r2, r3
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	189b      	adds	r3, r3, r2
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	7992      	ldrb	r2, [r2, #6]
 800c96a:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3307      	adds	r3, #7
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b30      	cmp	r3, #48	@ 0x30
 800c974:	d129      	bne.n	800c9ca <cal_vcn+0x3c2>
			{
				if (data[8] != 0x30)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3308      	adds	r3, #8
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b30      	cmp	r3, #48	@ 0x30
 800c97e:	d100      	bne.n	800c982 <cal_vcn+0x37a>
 800c980:	e0d2      	b.n	800cb28 <cal_vcn+0x520>
				{
					result[0] += 4;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	3304      	adds	r3, #4
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	701a      	strb	r2, [r3, #0]
					//0x - (101 ~ 909)
					result[result[0] - 3] = 0x4A;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	3b03      	subs	r3, #3
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	18d3      	adds	r3, r2, r3
 800c998:	224a      	movs	r2, #74	@ 0x4a
 800c99a:	701a      	strb	r2, [r3, #0]
					result[result[0] - 2] = 0x30;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	3b02      	subs	r3, #2
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	18d3      	adds	r3, r2, r3
 800c9a6:	2230      	movs	r2, #48	@ 0x30
 800c9a8:	701a      	strb	r2, [r3, #0]
					result[result[0] - 1] = 0x4A;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	18d3      	adds	r3, r2, r3
 800c9b4:	224a      	movs	r2, #74	@ 0x4a
 800c9b6:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	001a      	movs	r2, r3
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	189b      	adds	r3, r3, r2
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	7a12      	ldrb	r2, [r2, #8]
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	e0ae      	b.n	800cb28 <cal_vcn+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	3302      	adds	r3, #2
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	701a      	strb	r2, [r3, #0]
				//x0 - (110 ~ 990)
				result[result[0] - 1] = 0x47;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	18d3      	adds	r3, r2, r3
 800c9e0:	2247      	movs	r2, #71	@ 0x47
 800c9e2:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	001a      	movs	r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	189b      	adds	r3, r3, r2
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	79d2      	ldrb	r2, [r2, #7]
 800c9f2:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b30      	cmp	r3, #48	@ 0x30
 800c9fc:	d100      	bne.n	800ca00 <cal_vcn+0x3f8>
 800c9fe:	e093      	b.n	800cb28 <cal_vcn+0x520>
				{
					result[0] += 2;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	3302      	adds	r3, #2
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	701a      	strb	r2, [r3, #0]
					//x - (111 ~ 999)
					result[result[0] - 1] = 0x4A;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	18d3      	adds	r3, r2, r3
 800ca16:	224a      	movs	r2, #74	@ 0x4a
 800ca18:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	001a      	movs	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	189b      	adds	r3, r3, r2
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	7a12      	ldrb	r2, [r2, #8]
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	e07d      	b.n	800cb28 <cal_vcn+0x520>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3307      	adds	r3, #7
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b31      	cmp	r3, #49	@ 0x31
 800ca34:	d12e      	bne.n	800ca94 <cal_vcn+0x48c>
			{
				result[0] += 2;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	3302      	adds	r3, #2
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
				//10 - (10)
				result[result[0] - 1] = 0x38;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	18d3      	adds	r3, r2, r3
 800ca4c:	2238      	movs	r2, #56	@ 0x38
 800ca4e:	701a      	strb	r2, [r3, #0]
				result[result[0]] = 0x35;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	001a      	movs	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	189b      	adds	r3, r3, r2
 800ca5a:	2235      	movs	r2, #53	@ 0x35
 800ca5c:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3308      	adds	r3, #8
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b30      	cmp	r3, #48	@ 0x30
 800ca66:	d05f      	beq.n	800cb28 <cal_vcn+0x520>
				{
					result[0] += 2;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	3302      	adds	r3, #2
 800ca6e:	b2da      	uxtb	r2, r3
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	701a      	strb	r2, [r3, #0]
					//x - (11 ~ 19)
					result[result[0] - 1] = 0x4A;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	18d3      	adds	r3, r2, r3
 800ca7e:	224a      	movs	r2, #74	@ 0x4a
 800ca80:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	001a      	movs	r2, r3
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	189b      	adds	r3, r3, r2
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	7a12      	ldrb	r2, [r2, #8]
 800ca90:	701a      	strb	r2, [r3, #0]
 800ca92:	e049      	b.n	800cb28 <cal_vcn+0x520>
				}
			}
			else if (data[7] != 0x30)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3307      	adds	r3, #7
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2b30      	cmp	r3, #48	@ 0x30
 800ca9c:	d02f      	beq.n	800cafe <cal_vcn+0x4f6>
			{
				result[0] += 2;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	3302      	adds	r3, #2
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	701a      	strb	r2, [r3, #0]
				//x0 - (20 ~ 90)
				result[result[0] - 1] = 0x47;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	18d3      	adds	r3, r2, r3
 800cab4:	2247      	movs	r2, #71	@ 0x47
 800cab6:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	001a      	movs	r2, r3
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	189b      	adds	r3, r3, r2
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	79d2      	ldrb	r2, [r2, #7]
 800cac6:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3308      	adds	r3, #8
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b30      	cmp	r3, #48	@ 0x30
 800cad0:	d02a      	beq.n	800cb28 <cal_vcn+0x520>
				{
					result[0] += 2;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	3302      	adds	r3, #2
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	701a      	strb	r2, [r3, #0]
					//x - (21 ~ 99)
					result[result[0] - 1] = 0x4A;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	18d3      	adds	r3, r2, r3
 800cae8:	224a      	movs	r2, #74	@ 0x4a
 800caea:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	001a      	movs	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	189b      	adds	r3, r3, r2
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	7a12      	ldrb	r2, [r2, #8]
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	e014      	b.n	800cb28 <cal_vcn+0x520>
				}
			}
			else
			{
				result[0] += 2;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	3302      	adds	r3, #2
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	701a      	strb	r2, [r3, #0]
				//x - (1 ~ 9)
				result[result[0] - 1] = 0x4A;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	18d3      	adds	r3, r2, r3
 800cb14:	224a      	movs	r2, #74	@ 0x4a
 800cb16:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	001a      	movs	r2, r3
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	189b      	adds	r3, r3, r2
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	7a12      	ldrb	r2, [r2, #8]
 800cb26:	701a      	strb	r2, [r3, #0]
			}
		}
		//yuan
		result[0] += 2;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	3302      	adds	r3, #2
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x38;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	18d3      	adds	r3, r2, r3
 800cb3e:	2238      	movs	r2, #56	@ 0x38
 800cb40:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x39;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	001a      	movs	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	189b      	adds	r3, r3, r2
 800cb4c:	2239      	movs	r2, #57	@ 0x39
 800cb4e:	701a      	strb	r2, [r3, #0]
	}
	//thx, bye
	result[0] += 2;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	3302      	adds	r3, #2
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x39;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	18d3      	adds	r3, r2, r3
 800cb66:	2239      	movs	r2, #57	@ 0x39
 800cb68:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x36;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	001a      	movs	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	189b      	adds	r3, r3, r2
 800cb74:	2236      	movs	r2, #54	@ 0x36
 800cb76:	701a      	strb	r2, [r3, #0]
}
 800cb78:	46c0      	nop			@ (mov r8, r8)
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	b002      	add	sp, #8
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <cal_ven>:

void cal_ven(unsigned char data[], unsigned char result[])
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
	if (data[1] != 0x30)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b30      	cmp	r3, #48	@ 0x30
 800cb92:	d100      	bne.n	800cb96 <cal_ven+0x16>
 800cb94:	e0cc      	b.n	800cd30 <cal_ven+0x1b0>
	{
		result[0] += 2;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	3302      	adds	r3, #2
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	701a      	strb	r2, [r3, #0]
		//x thousand - (1000 ~ 9000)
		result[1] = 0x42;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	3301      	adds	r3, #1
 800cba6:	2242      	movs	r2, #66	@ 0x42
 800cba8:	701a      	strb	r2, [r3, #0]
		result[2] = data[1];
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	3302      	adds	r3, #2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	7852      	ldrb	r2, [r2, #1]
 800cbb2:	701a      	strb	r2, [r3, #0]
		if (data[2] == 0x30)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3302      	adds	r3, #2
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b30      	cmp	r3, #48	@ 0x30
 800cbbc:	d154      	bne.n	800cc68 <cal_ven+0xe8>
		{
			if (data[3] == 0x30)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	3303      	adds	r3, #3
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b30      	cmp	r3, #48	@ 0x30
 800cbc6:	d115      	bne.n	800cbf4 <cal_ven+0x74>
			{
				if (data[4] != 0x30)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b30      	cmp	r3, #48	@ 0x30
 800cbd0:	d100      	bne.n	800cbd4 <cal_ven+0x54>
 800cbd2:	e137      	b.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	3302      	adds	r3, #2
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	701a      	strb	r2, [r3, #0]
					//x - (1001 ~ 9009)
					result[3] = 0x30;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	3303      	adds	r3, #3
 800cbe4:	2230      	movs	r2, #48	@ 0x30
 800cbe6:	701a      	strb	r2, [r3, #0]
					result[4] = data[4];
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	3304      	adds	r3, #4
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	7912      	ldrb	r2, [r2, #4]
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	e127      	b.n	800ce44 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3303      	adds	r3, #3
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b31      	cmp	r3, #49	@ 0x31
 800cbfc:	d10f      	bne.n	800cc1e <cal_ven+0x9e>
			{
				result[0] += 2;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	3302      	adds	r3, #2
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x thousand ten/eleven/.../nineteen)
				result[3] = 0x31;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	3303      	adds	r3, #3
 800cc0e:	2231      	movs	r2, #49	@ 0x31
 800cc10:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3304      	adds	r3, #4
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	7912      	ldrb	r2, [r2, #4]
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e112      	b.n	800ce44 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	3302      	adds	r3, #2
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety (x thousand twenty/.../ninety)
				result[3] = 0x32;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3303      	adds	r3, #3
 800cc2e:	2232      	movs	r2, #50	@ 0x32
 800cc30:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	3304      	adds	r3, #4
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	78d2      	ldrb	r2, [r2, #3]
 800cc3a:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3304      	adds	r3, #4
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b30      	cmp	r3, #48	@ 0x30
 800cc44:	d100      	bne.n	800cc48 <cal_ven+0xc8>
 800cc46:	e0fd      	b.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	701a      	strb	r2, [r3, #0]
					//x - (x thousand twenty/.../ninety x)
					result[5] = 0x30;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	3305      	adds	r3, #5
 800cc58:	2230      	movs	r2, #48	@ 0x30
 800cc5a:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	3306      	adds	r3, #6
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	7912      	ldrb	r2, [r2, #4]
 800cc64:	701a      	strb	r2, [r3, #0]
 800cc66:	e0ed      	b.n	800ce44 <cal_ven+0x2c4>
				}
			}
		}
		else
		{
			result[0] += 2;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	3302      	adds	r3, #2
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	701a      	strb	r2, [r3, #0]
			//x hundred (x thousand x hundred)
			result[3] = 0x41;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	3303      	adds	r3, #3
 800cc78:	2241      	movs	r2, #65	@ 0x41
 800cc7a:	701a      	strb	r2, [r3, #0]
			result[4] = data[2];
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	7892      	ldrb	r2, [r2, #2]
 800cc84:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3303      	adds	r3, #3
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b30      	cmp	r3, #48	@ 0x30
 800cc8e:	d115      	bne.n	800ccbc <cal_ven+0x13c>
			{
				if (data[4] != 0x30)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3304      	adds	r3, #4
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b30      	cmp	r3, #48	@ 0x30
 800cc98:	d100      	bne.n	800cc9c <cal_ven+0x11c>
 800cc9a:	e0d3      	b.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	3302      	adds	r3, #2
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	701a      	strb	r2, [r3, #0]
					//x - (x thousand x hundred x)
					result[5] = 0x30;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	3305      	adds	r3, #5
 800ccac:	2230      	movs	r2, #48	@ 0x30
 800ccae:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3306      	adds	r3, #6
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	7912      	ldrb	r2, [r2, #4]
 800ccb8:	701a      	strb	r2, [r3, #0]
 800ccba:	e0c3      	b.n	800ce44 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b31      	cmp	r3, #49	@ 0x31
 800ccc4:	d10f      	bne.n	800cce6 <cal_ven+0x166>
			{
				result[0] += 2;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	3302      	adds	r3, #2
 800cccc:	b2da      	uxtb	r2, r3
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x thousand x hundred ten/eleven/.../nineteen)
				result[5] = 0x31;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	3305      	adds	r3, #5
 800ccd6:	2231      	movs	r2, #49	@ 0x31
 800ccd8:	701a      	strb	r2, [r3, #0]
				result[6] = data[4];
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	3306      	adds	r3, #6
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	7912      	ldrb	r2, [r2, #4]
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	e0ae      	b.n	800ce44 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	3302      	adds	r3, #2
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety (x thousand x hundred twenty/.../ninety)
				result[5] = 0x32;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	3305      	adds	r3, #5
 800ccf6:	2232      	movs	r2, #50	@ 0x32
 800ccf8:	701a      	strb	r2, [r3, #0]
				result[6] = data[3];
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	3306      	adds	r3, #6
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	78d2      	ldrb	r2, [r2, #3]
 800cd02:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3304      	adds	r3, #4
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b30      	cmp	r3, #48	@ 0x30
 800cd0c:	d100      	bne.n	800cd10 <cal_ven+0x190>
 800cd0e:	e099      	b.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	3302      	adds	r3, #2
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	701a      	strb	r2, [r3, #0]
					//x (x thousand x hundred twenty/.../ninety x)
					result[7] = 0x30;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	3307      	adds	r3, #7
 800cd20:	2230      	movs	r2, #48	@ 0x30
 800cd22:	701a      	strb	r2, [r3, #0]
					result[8] = data[4];
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3308      	adds	r3, #8
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	7912      	ldrb	r2, [r2, #4]
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	e089      	b.n	800ce44 <cal_ven+0x2c4>
			}
		}
	}
	else
	{
		if (data[2] != 0x30)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3302      	adds	r3, #2
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b30      	cmp	r3, #48	@ 0x30
 800cd38:	d061      	beq.n	800cdfe <cal_ven+0x27e>
		{
			result[0] += 2;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	3302      	adds	r3, #2
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	701a      	strb	r2, [r3, #0]
			//x hundred - (x hundred)
			result[1] = 0x41;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	2241      	movs	r2, #65	@ 0x41
 800cd4c:	701a      	strb	r2, [r3, #0]
			result[2] = data[2];
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	3302      	adds	r3, #2
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	7892      	ldrb	r2, [r2, #2]
 800cd56:	701a      	strb	r2, [r3, #0]
			if (data[3] == 0x30)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3303      	adds	r3, #3
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b30      	cmp	r3, #48	@ 0x30
 800cd60:	d114      	bne.n	800cd8c <cal_ven+0x20c>
			{
				if (data[4] != 0x30)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	3304      	adds	r3, #4
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b30      	cmp	r3, #48	@ 0x30
 800cd6a:	d06b      	beq.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 4;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	3304      	adds	r3, #4
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	701a      	strb	r2, [r3, #0]
					//x - (x hundred x)
					result[3] = 0x30;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	3303      	adds	r3, #3
 800cd7c:	2230      	movs	r2, #48	@ 0x30
 800cd7e:	701a      	strb	r2, [r3, #0]
					result[4] = data[4];
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	3304      	adds	r3, #4
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	7912      	ldrb	r2, [r2, #4]
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	e05b      	b.n	800ce44 <cal_ven+0x2c4>
				}
			}
			else if (data[3] == 0x31)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3303      	adds	r3, #3
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b31      	cmp	r3, #49	@ 0x31
 800cd94:	d10f      	bne.n	800cdb6 <cal_ven+0x236>
			{
				result[0] += 2;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	3302      	adds	r3, #2
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen (x hundred ten/eleven/.../nineteen)
				result[3] = 0x31;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	3303      	adds	r3, #3
 800cda6:	2231      	movs	r2, #49	@ 0x31
 800cda8:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	3304      	adds	r3, #4
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	7912      	ldrb	r2, [r2, #4]
 800cdb2:	701a      	strb	r2, [r3, #0]
 800cdb4:	e046      	b.n	800ce44 <cal_ven+0x2c4>
			}
			else
			{
				result[0] += 2;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	3302      	adds	r3, #2
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety - (x hundred twenty/.../ninety)
				result[3] = 0x32;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	3303      	adds	r3, #3
 800cdc6:	2232      	movs	r2, #50	@ 0x32
 800cdc8:	701a      	strb	r2, [r3, #0]
				result[4] = data[3];
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	3304      	adds	r3, #4
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	78d2      	ldrb	r2, [r2, #3]
 800cdd2:	701a      	strb	r2, [r3, #0]
				if (data[4] != 0x30)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b30      	cmp	r3, #48	@ 0x30
 800cddc:	d032      	beq.n	800ce44 <cal_ven+0x2c4>
				{
					result[0] += 2;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	3302      	adds	r3, #2
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	701a      	strb	r2, [r3, #0]
					//x - (x hundred twenty/.../ninety x)
					result[5] = 0x30;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3305      	adds	r3, #5
 800cdee:	2230      	movs	r2, #48	@ 0x30
 800cdf0:	701a      	strb	r2, [r3, #0]
					result[6] = data[4];
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	3306      	adds	r3, #6
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	7912      	ldrb	r2, [r2, #4]
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e022      	b.n	800ce44 <cal_ven+0x2c4>
				}
			}
		}
		else
		{
			result[0] += 2;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	3302      	adds	r3, #2
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	701a      	strb	r2, [r3, #0]
			//twenty, ..., ninety - (twenty/.../ninety)
			result[1] = 0x32;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	2232      	movs	r2, #50	@ 0x32
 800ce10:	701a      	strb	r2, [r3, #0]
			result[2] = data[3];
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	3302      	adds	r3, #2
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	78d2      	ldrb	r2, [r2, #3]
 800ce1a:	701a      	strb	r2, [r3, #0]
			if (data[4] != 0x30)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b30      	cmp	r3, #48	@ 0x30
 800ce24:	d00e      	beq.n	800ce44 <cal_ven+0x2c4>
			{
				result[0] += 2;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	3302      	adds	r3, #2
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	701a      	strb	r2, [r3, #0]
				//x - (twenty/.../ninety x)
				result[3] = 0x30;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	3303      	adds	r3, #3
 800ce36:	2230      	movs	r2, #48	@ 0x30
 800ce38:	701a      	strb	r2, [r3, #0]
				result[4] = data[4];
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	7912      	ldrb	r2, [r2, #4]
 800ce42:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//dollars
	result[0] += 2;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	3302      	adds	r3, #2
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x33;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	18d3      	adds	r3, r2, r3
 800ce5a:	2233      	movs	r2, #51	@ 0x33
 800ce5c:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x32;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	001a      	movs	r2, r3
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	189b      	adds	r3, r3, r2
 800ce68:	2232      	movs	r2, #50	@ 0x32
 800ce6a:	701a      	strb	r2, [r3, #0]

	if (data[5] != 0x30)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	3305      	adds	r3, #5
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b30      	cmp	r3, #48	@ 0x30
 800ce74:	d044      	beq.n	800cf00 <cal_ven+0x380>
	{
		result[0] += 6;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	3306      	adds	r3, #6
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	701a      	strb	r2, [r3, #0]
		//and
		result[result[0] - 5] = 0x33;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	3b05      	subs	r3, #5
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	18d3      	adds	r3, r2, r3
 800ce8c:	2233      	movs	r2, #51	@ 0x33
 800ce8e:	701a      	strb	r2, [r3, #0]
		result[result[0] - 4] = 0x30;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	3b04      	subs	r3, #4
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	18d3      	adds	r3, r2, r3
 800ce9a:	2230      	movs	r2, #48	@ 0x30
 800ce9c:	701a      	strb	r2, [r3, #0]
		if (data[5] == 0x31)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3305      	adds	r3, #5
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b31      	cmp	r3, #49	@ 0x31
 800cea6:	d10e      	bne.n	800cec6 <cal_ven+0x346>
		{
			//ten
			result[result[0] - 3] = 0x31;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	3b03      	subs	r3, #3
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	18d3      	adds	r3, r2, r3
 800ceb2:	2231      	movs	r2, #49	@ 0x31
 800ceb4:	701a      	strb	r2, [r3, #0]
			result[result[0] - 2] = 0x30;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	3b02      	subs	r3, #2
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	18d3      	adds	r3, r2, r3
 800cec0:	2230      	movs	r2, #48	@ 0x30
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	e00e      	b.n	800cee4 <cal_ven+0x364>
		}
		else
		{
			//twenty/.../ninety
			result[result[0] - 3] = 0x32;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	3b03      	subs	r3, #3
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	18d3      	adds	r3, r2, r3
 800ced0:	2232      	movs	r2, #50	@ 0x32
 800ced2:	701a      	strb	r2, [r3, #0]
			result[result[0] - 2] = data[5];
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	3b02      	subs	r3, #2
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	18d3      	adds	r3, r2, r3
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	7952      	ldrb	r2, [r2, #5]
 800cee2:	701a      	strb	r2, [r3, #0]
		}
		//cents
		result[result[0] - 1] = 0x33;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	18d3      	adds	r3, r2, r3
 800ceee:	2233      	movs	r2, #51	@ 0x33
 800cef0:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x31;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	001a      	movs	r2, r3
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	189b      	adds	r3, r3, r2
 800cefc:	2231      	movs	r2, #49	@ 0x31
 800cefe:	701a      	strb	r2, [r3, #0]
	}

	if (data[0] != 0)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d100      	bne.n	800cf0a <cal_ven+0x38a>
 800cf08:	e114      	b.n	800d134 <cal_ven+0x5b4>
	{
		//including the surcharge
		result[0] += 2;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	3302      	adds	r3, #2
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x33;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	18d3      	adds	r3, r2, r3
 800cf20:	2233      	movs	r2, #51	@ 0x33
 800cf22:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x39;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	001a      	movs	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	189b      	adds	r3, r3, r2
 800cf2e:	2239      	movs	r2, #57	@ 0x39
 800cf30:	701a      	strb	r2, [r3, #0]
		if (data[6] != 0x30)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3306      	adds	r3, #6
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b30      	cmp	r3, #48	@ 0x30
 800cf3a:	d100      	bne.n	800cf3e <cal_ven+0x3be>
 800cf3c:	e081      	b.n	800d042 <cal_ven+0x4c2>
		{
			result[0] += 2;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	3302      	adds	r3, #2
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	701a      	strb	r2, [r3, #0]
			//x hundred - (x hundred)
			result[result[0] - 1] = 0x41;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	18d3      	adds	r3, r2, r3
 800cf54:	2241      	movs	r2, #65	@ 0x41
 800cf56:	701a      	strb	r2, [r3, #0]
			result[result[0]] = data[6];
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	001a      	movs	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	189b      	adds	r3, r3, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	7992      	ldrb	r2, [r2, #6]
 800cf66:	701a      	strb	r2, [r3, #0]
			if (data[7] == 0x30)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3307      	adds	r3, #7
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2b30      	cmp	r3, #48	@ 0x30
 800cf70:	d11b      	bne.n	800cfaa <cal_ven+0x42a>
			{
				if (data[8] != 0x30)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	3308      	adds	r3, #8
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b30      	cmp	r3, #48	@ 0x30
 800cf7a:	d100      	bne.n	800cf7e <cal_ven+0x3fe>
 800cf7c:	e0c6      	b.n	800d10c <cal_ven+0x58c>
				{
					result[0] += 2;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	3302      	adds	r3, #2
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	701a      	strb	r2, [r3, #0]
					//x - (x hundred x)
					result[result[0] - 1] = 0x30;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	18d3      	adds	r3, r2, r3
 800cf94:	2230      	movs	r2, #48	@ 0x30
 800cf96:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	001a      	movs	r2, r3
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	189b      	adds	r3, r3, r2
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	7a12      	ldrb	r2, [r2, #8]
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	e0b0      	b.n	800d10c <cal_ven+0x58c>
				}
			}
			else
			{
				if (data[7] == 0x31)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3307      	adds	r3, #7
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b31      	cmp	r3, #49	@ 0x31
 800cfb2:	d115      	bne.n	800cfe0 <cal_ven+0x460>
				{
					result[0] += 2;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	3302      	adds	r3, #2
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	701a      	strb	r2, [r3, #0]
					//ten, eleven, ..., nineteen (x hundred ten/eleven/.../nineteen)
					result[result[0] - 1] = 0x30;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	18d3      	adds	r3, r2, r3
 800cfca:	2230      	movs	r2, #48	@ 0x30
 800cfcc:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	001a      	movs	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	189b      	adds	r3, r3, r2
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	7a12      	ldrb	r2, [r2, #8]
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	e095      	b.n	800d10c <cal_ven+0x58c>
				}
				else
				{
					result[0] += 2;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	3302      	adds	r3, #2
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	701a      	strb	r2, [r3, #0]
					//twenty, ..., ninety - (x hundred twenty/.../ninety)
					result[result[0] - 1] = 0x32;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	18d3      	adds	r3, r2, r3
 800cff6:	2232      	movs	r2, #50	@ 0x32
 800cff8:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[7];
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	001a      	movs	r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	189b      	adds	r3, r3, r2
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	79d2      	ldrb	r2, [r2, #7]
 800d008:	701a      	strb	r2, [r3, #0]
					if (data[8] != 0x30)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3308      	adds	r3, #8
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b30      	cmp	r3, #48	@ 0x30
 800d012:	d100      	bne.n	800d016 <cal_ven+0x496>
 800d014:	e07a      	b.n	800d10c <cal_ven+0x58c>
					{
						result[0] += 2;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	3302      	adds	r3, #2
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	701a      	strb	r2, [r3, #0]
						//x - (x hundred twenty/.../ninety x)
						result[result[0] - 1] = 0x30;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	3b01      	subs	r3, #1
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	18d3      	adds	r3, r2, r3
 800d02c:	2230      	movs	r2, #48	@ 0x30
 800d02e:	701a      	strb	r2, [r3, #0]
						result[result[0]] = data[8];
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	001a      	movs	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	189b      	adds	r3, r3, r2
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	7a12      	ldrb	r2, [r2, #8]
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e064      	b.n	800d10c <cal_ven+0x58c>
				}
			}
		}
		else
		{
			if (data[7] == 0x31)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	3307      	adds	r3, #7
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b31      	cmp	r3, #49	@ 0x31
 800d04a:	d115      	bne.n	800d078 <cal_ven+0x4f8>
			{
				result[0] += 2;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	3302      	adds	r3, #2
 800d052:	b2da      	uxtb	r2, r3
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	701a      	strb	r2, [r3, #0]
				//ten, eleven, ..., nineteen - (ten/eleven/.../nineteen)
				result[result[0] - 1] = 0x31;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	18d3      	adds	r3, r2, r3
 800d062:	2231      	movs	r2, #49	@ 0x31
 800d064:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	001a      	movs	r2, r3
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	189b      	adds	r3, r3, r2
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	7a12      	ldrb	r2, [r2, #8]
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	e049      	b.n	800d10c <cal_ven+0x58c>
			}
			else if (data[7] != 0x30)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	3307      	adds	r3, #7
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b30      	cmp	r3, #48	@ 0x30
 800d080:	d02f      	beq.n	800d0e2 <cal_ven+0x562>
			{
				result[0] += 2;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	3302      	adds	r3, #2
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	701a      	strb	r2, [r3, #0]
				//twenty, ..., ninety - (twenty/.../ninety)
				result[result[0] - 1] = 0x32;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	3b01      	subs	r3, #1
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	18d3      	adds	r3, r2, r3
 800d098:	2232      	movs	r2, #50	@ 0x32
 800d09a:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[7];
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	001a      	movs	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	189b      	adds	r3, r3, r2
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	79d2      	ldrb	r2, [r2, #7]
 800d0aa:	701a      	strb	r2, [r3, #0]
				if (data[8] != 0x30)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b30      	cmp	r3, #48	@ 0x30
 800d0b4:	d02a      	beq.n	800d10c <cal_ven+0x58c>
				{
					result[0] += 2;
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	3302      	adds	r3, #2
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	701a      	strb	r2, [r3, #0]
					//x - (twenty/.../ninety x)
					result[result[0] - 1] = 0x30;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	18d3      	adds	r3, r2, r3
 800d0cc:	2230      	movs	r2, #48	@ 0x30
 800d0ce:	701a      	strb	r2, [r3, #0]
					result[result[0]] = data[8];
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	001a      	movs	r2, r3
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	189b      	adds	r3, r3, r2
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	7a12      	ldrb	r2, [r2, #8]
 800d0de:	701a      	strb	r2, [r3, #0]
 800d0e0:	e014      	b.n	800d10c <cal_ven+0x58c>
				}
			}
			else
			{
				result[0] += 2;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	701a      	strb	r2, [r3, #0]
				//x - (x)
				result[result[0] - 1] = 0x30;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	18d3      	adds	r3, r2, r3
 800d0f8:	2230      	movs	r2, #48	@ 0x30
 800d0fa:	701a      	strb	r2, [r3, #0]
				result[result[0]] = data[8];
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	001a      	movs	r2, r3
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	189b      	adds	r3, r3, r2
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	7a12      	ldrb	r2, [r2, #8]
 800d10a:	701a      	strb	r2, [r3, #0]
			}
		}
		//dollars
		result[0] += 2;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	3302      	adds	r3, #2
 800d112:	b2da      	uxtb	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	701a      	strb	r2, [r3, #0]
		result[result[0] - 1] = 0x33;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	18d3      	adds	r3, r2, r3
 800d122:	2233      	movs	r2, #51	@ 0x33
 800d124:	701a      	strb	r2, [r3, #0]
		result[result[0]] = 0x32;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	001a      	movs	r2, r3
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	189b      	adds	r3, r3, r2
 800d130:	2232      	movs	r2, #50	@ 0x32
 800d132:	701a      	strb	r2, [r3, #0]
	}
	//thank you, have a nice day
	result[0] += 2;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	3302      	adds	r3, #2
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	701a      	strb	r2, [r3, #0]
	result[result[0] - 1] = 0x34;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	3b01      	subs	r3, #1
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	18d3      	adds	r3, r2, r3
 800d14a:	2234      	movs	r2, #52	@ 0x34
 800d14c:	701a      	strb	r2, [r3, #0]
	result[result[0]] = 0x30;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	001a      	movs	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	189b      	adds	r3, r3, r2
 800d158:	2230      	movs	r2, #48	@ 0x30
 800d15a:	701a      	strb	r2, [r3, #0]
}
 800d15c:	46c0      	nop			@ (mov r8, r8)
 800d15e:	46bd      	mov	sp, r7
 800d160:	b002      	add	sp, #8
 800d162:	bd80      	pop	{r7, pc}

0800d164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d168:	b672      	cpsid	i
}
 800d16a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d16c:	46c0      	nop			@ (mov r8, r8)
 800d16e:	e7fd      	b.n	800d16c <Error_Handler+0x8>

0800d170 <PCF2129_Init>:
 *  @note :
 *  @param :         使用HAL庫 I2C接口 (Use HAL library I2C interface)
 *  @retva l: None
=============================================================================
*/
void PCF2129_Init(I2C_HandleTypeDef i2c_h,uint8_t addr) {
 800d170:	b084      	sub	sp, #16
 800d172:	b5b0      	push	{r4, r5, r7, lr}
 800d174:	af00      	add	r7, sp, #0
 800d176:	2510      	movs	r5, #16
 800d178:	197c      	adds	r4, r7, r5
 800d17a:	6020      	str	r0, [r4, #0]
 800d17c:	6061      	str	r1, [r4, #4]
 800d17e:	60a2      	str	r2, [r4, #8]
 800d180:	60e3      	str	r3, [r4, #12]
    pcf2129.i2c_h = i2c_h;
 800d182:	4a0b      	ldr	r2, [pc, #44]	@ (800d1b0 <PCF2129_Init+0x40>)
 800d184:	002c      	movs	r4, r5
 800d186:	193b      	adds	r3, r7, r4
 800d188:	0010      	movs	r0, r2
 800d18a:	0019      	movs	r1, r3
 800d18c:	234c      	movs	r3, #76	@ 0x4c
 800d18e:	001a      	movs	r2, r3
 800d190:	f00b ffd2 	bl	8019138 <memcpy>
    pcf2129.i2caddr = addr;
 800d194:	4b06      	ldr	r3, [pc, #24]	@ (800d1b0 <PCF2129_Init+0x40>)
 800d196:	224c      	movs	r2, #76	@ 0x4c
 800d198:	1912      	adds	r2, r2, r4
 800d19a:	19d2      	adds	r2, r2, r7
 800d19c:	214c      	movs	r1, #76	@ 0x4c
 800d19e:	7812      	ldrb	r2, [r2, #0]
 800d1a0:	545a      	strb	r2, [r3, r1]
}
 800d1a2:	46c0      	nop			@ (mov r8, r8)
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bcb0      	pop	{r4, r5, r7}
 800d1a8:	bc08      	pop	{r3}
 800d1aa:	b004      	add	sp, #16
 800d1ac:	4718      	bx	r3
 800d1ae:	46c0      	nop			@ (mov r8, r8)
 800d1b0:	200035a0 	.word	0x200035a0

0800d1b4 <PCF2129_configure>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_configure(void) {
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	af00      	add	r7, sp, #0
    PCF2129_set24mode();
 800d1b8:	f000 f90c 	bl	800d3d4 <PCF2129_set24mode>
}
 800d1bc:	46c0      	nop			@ (mov r8, r8)
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <PCF2129_getDate>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
PCF2129_t PCF2129_getDate(void)
{
 800d1c4:	b590      	push	{r4, r7, lr}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af02      	add	r7, sp, #8
 800d1ca:	6078      	str	r0, [r7, #4]
	uint8_t datecontent;

	datecontent = PCF2129_REG_SECONDS;
 800d1cc:	240f      	movs	r4, #15
 800d1ce:	193b      	adds	r3, r7, r4
 800d1d0:	2203      	movs	r2, #3
 800d1d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d1d4:	193a      	adds	r2, r7, r4
 800d1d6:	485d      	ldr	r0, [pc, #372]	@ (800d34c <PCF2129_getDate+0x188>)
 800d1d8:	231e      	movs	r3, #30
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	21a2      	movs	r1, #162	@ 0xa2
 800d1e0:	f002 f820 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d1e4:	4b59      	ldr	r3, [pc, #356]	@ (800d34c <PCF2129_getDate+0x188>)
 800d1e6:	224c      	movs	r2, #76	@ 0x4c
 800d1e8:	5c9b      	ldrb	r3, [r3, r2]
 800d1ea:	0019      	movs	r1, r3
 800d1ec:	193a      	adds	r2, r7, r4
 800d1ee:	4857      	ldr	r0, [pc, #348]	@ (800d34c <PCF2129_getDate+0x188>)
 800d1f0:	231e      	movs	r3, #30
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	f002 f91d 	bl	800f434 <HAL_I2C_Master_Receive>
 800d1fa:	1e03      	subs	r3, r0, #0
 800d1fc:	d104      	bne.n	800d208 <PCF2129_getDate+0x44>
    	pcf2129.date.ss = datecontent;
 800d1fe:	193b      	adds	r3, r7, r4
 800d200:	7819      	ldrb	r1, [r3, #0]
 800d202:	4b52      	ldr	r3, [pc, #328]	@ (800d34c <PCF2129_getDate+0x188>)
 800d204:	2253      	movs	r2, #83	@ 0x53
 800d206:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_MINUTES;
 800d208:	240f      	movs	r4, #15
 800d20a:	193b      	adds	r3, r7, r4
 800d20c:	2204      	movs	r2, #4
 800d20e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d210:	193a      	adds	r2, r7, r4
 800d212:	484e      	ldr	r0, [pc, #312]	@ (800d34c <PCF2129_getDate+0x188>)
 800d214:	231e      	movs	r3, #30
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	2301      	movs	r3, #1
 800d21a:	21a2      	movs	r1, #162	@ 0xa2
 800d21c:	f002 f802 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d220:	4b4a      	ldr	r3, [pc, #296]	@ (800d34c <PCF2129_getDate+0x188>)
 800d222:	224c      	movs	r2, #76	@ 0x4c
 800d224:	5c9b      	ldrb	r3, [r3, r2]
 800d226:	0019      	movs	r1, r3
 800d228:	193a      	adds	r2, r7, r4
 800d22a:	4848      	ldr	r0, [pc, #288]	@ (800d34c <PCF2129_getDate+0x188>)
 800d22c:	231e      	movs	r3, #30
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2301      	movs	r3, #1
 800d232:	f002 f8ff 	bl	800f434 <HAL_I2C_Master_Receive>
 800d236:	1e03      	subs	r3, r0, #0
 800d238:	d104      	bne.n	800d244 <PCF2129_getDate+0x80>
    	pcf2129.date.mm= datecontent;
 800d23a:	193b      	adds	r3, r7, r4
 800d23c:	7819      	ldrb	r1, [r3, #0]
 800d23e:	4b43      	ldr	r3, [pc, #268]	@ (800d34c <PCF2129_getDate+0x188>)
 800d240:	2252      	movs	r2, #82	@ 0x52
 800d242:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_HOURS;
 800d244:	240f      	movs	r4, #15
 800d246:	193b      	adds	r3, r7, r4
 800d248:	2205      	movs	r2, #5
 800d24a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d24c:	193a      	adds	r2, r7, r4
 800d24e:	483f      	ldr	r0, [pc, #252]	@ (800d34c <PCF2129_getDate+0x188>)
 800d250:	231e      	movs	r3, #30
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	2301      	movs	r3, #1
 800d256:	21a2      	movs	r1, #162	@ 0xa2
 800d258:	f001 ffe4 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d25c:	4b3b      	ldr	r3, [pc, #236]	@ (800d34c <PCF2129_getDate+0x188>)
 800d25e:	224c      	movs	r2, #76	@ 0x4c
 800d260:	5c9b      	ldrb	r3, [r3, r2]
 800d262:	0019      	movs	r1, r3
 800d264:	193a      	adds	r2, r7, r4
 800d266:	4839      	ldr	r0, [pc, #228]	@ (800d34c <PCF2129_getDate+0x188>)
 800d268:	231e      	movs	r3, #30
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	2301      	movs	r3, #1
 800d26e:	f002 f8e1 	bl	800f434 <HAL_I2C_Master_Receive>
 800d272:	1e03      	subs	r3, r0, #0
 800d274:	d104      	bne.n	800d280 <PCF2129_getDate+0xbc>
    	pcf2129.date.hh = datecontent;
 800d276:	193b      	adds	r3, r7, r4
 800d278:	7819      	ldrb	r1, [r3, #0]
 800d27a:	4b34      	ldr	r3, [pc, #208]	@ (800d34c <PCF2129_getDate+0x188>)
 800d27c:	2251      	movs	r2, #81	@ 0x51
 800d27e:	5499      	strb	r1, [r3, r2]
//    datecontent = PCF2129_WEEKDAYS;
//    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
//    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
//        pcf2129.date.w= datecontent;

    datecontent = PCF2129_REG_DAYS;
 800d280:	240f      	movs	r4, #15
 800d282:	193b      	adds	r3, r7, r4
 800d284:	2206      	movs	r2, #6
 800d286:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d288:	193a      	adds	r2, r7, r4
 800d28a:	4830      	ldr	r0, [pc, #192]	@ (800d34c <PCF2129_getDate+0x188>)
 800d28c:	231e      	movs	r3, #30
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	2301      	movs	r3, #1
 800d292:	21a2      	movs	r1, #162	@ 0xa2
 800d294:	f001 ffc6 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d298:	4b2c      	ldr	r3, [pc, #176]	@ (800d34c <PCF2129_getDate+0x188>)
 800d29a:	224c      	movs	r2, #76	@ 0x4c
 800d29c:	5c9b      	ldrb	r3, [r3, r2]
 800d29e:	0019      	movs	r1, r3
 800d2a0:	193a      	adds	r2, r7, r4
 800d2a2:	482a      	ldr	r0, [pc, #168]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2a4:	231e      	movs	r3, #30
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	f002 f8c3 	bl	800f434 <HAL_I2C_Master_Receive>
 800d2ae:	1e03      	subs	r3, r0, #0
 800d2b0:	d104      	bne.n	800d2bc <PCF2129_getDate+0xf8>
    	pcf2129.date.d= datecontent;
 800d2b2:	193b      	adds	r3, r7, r4
 800d2b4:	7819      	ldrb	r1, [r3, #0]
 800d2b6:	4b25      	ldr	r3, [pc, #148]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2b8:	224f      	movs	r2, #79	@ 0x4f
 800d2ba:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_MONTHS;
 800d2bc:	240f      	movs	r4, #15
 800d2be:	193b      	adds	r3, r7, r4
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d2c4:	193a      	adds	r2, r7, r4
 800d2c6:	4821      	ldr	r0, [pc, #132]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2c8:	231e      	movs	r3, #30
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	21a2      	movs	r1, #162	@ 0xa2
 800d2d0:	f001 ffa8 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d2d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2d6:	224c      	movs	r2, #76	@ 0x4c
 800d2d8:	5c9b      	ldrb	r3, [r3, r2]
 800d2da:	0019      	movs	r1, r3
 800d2dc:	193a      	adds	r2, r7, r4
 800d2de:	481b      	ldr	r0, [pc, #108]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2e0:	231e      	movs	r3, #30
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	f002 f8a5 	bl	800f434 <HAL_I2C_Master_Receive>
 800d2ea:	1e03      	subs	r3, r0, #0
 800d2ec:	d104      	bne.n	800d2f8 <PCF2129_getDate+0x134>
        pcf2129.date.m= datecontent;
 800d2ee:	193b      	adds	r3, r7, r4
 800d2f0:	7819      	ldrb	r1, [r3, #0]
 800d2f2:	4b16      	ldr	r3, [pc, #88]	@ (800d34c <PCF2129_getDate+0x188>)
 800d2f4:	224e      	movs	r2, #78	@ 0x4e
 800d2f6:	5499      	strb	r1, [r3, r2]

    datecontent = PCF2129_REG_YEARS;
 800d2f8:	240f      	movs	r4, #15
 800d2fa:	193b      	adds	r3, r7, r4
 800d2fc:	2209      	movs	r2, #9
 800d2fe:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &datecontent, 1, I2C_TIMEOUT);
 800d300:	193a      	adds	r2, r7, r4
 800d302:	4812      	ldr	r0, [pc, #72]	@ (800d34c <PCF2129_getDate+0x188>)
 800d304:	231e      	movs	r3, #30
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2301      	movs	r3, #1
 800d30a:	21a2      	movs	r1, #162	@ 0xa2
 800d30c:	f001 ff8a 	bl	800f224 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &datecontent, 1, I2C_TIMEOUT) == 0)
 800d310:	4b0e      	ldr	r3, [pc, #56]	@ (800d34c <PCF2129_getDate+0x188>)
 800d312:	224c      	movs	r2, #76	@ 0x4c
 800d314:	5c9b      	ldrb	r3, [r3, r2]
 800d316:	0019      	movs	r1, r3
 800d318:	193a      	adds	r2, r7, r4
 800d31a:	480c      	ldr	r0, [pc, #48]	@ (800d34c <PCF2129_getDate+0x188>)
 800d31c:	231e      	movs	r3, #30
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	2301      	movs	r3, #1
 800d322:	f002 f887 	bl	800f434 <HAL_I2C_Master_Receive>
 800d326:	1e03      	subs	r3, r0, #0
 800d328:	d104      	bne.n	800d334 <PCF2129_getDate+0x170>
        pcf2129.date.y= datecontent;
 800d32a:	193b      	adds	r3, r7, r4
 800d32c:	7819      	ldrb	r1, [r3, #0]
 800d32e:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <PCF2129_getDate+0x188>)
 800d330:	224d      	movs	r2, #77	@ 0x4d
 800d332:	5499      	strb	r1, [r3, r2]
	pcf2129.date.hh = PCF2129_read(PCF2129_REG_HOURS);
	pcf2129.date.d = PCF2129_read(PCF2129_REG_DAYS);
	pcf2129.date.m = PCF2129_read(PCF2129_REG_MONTHS);
	pcf2129.date.y = PCF2129_read(PCF2129_REG_YEARS);
	*/
    return pcf2129;
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4b05      	ldr	r3, [pc, #20]	@ (800d34c <PCF2129_getDate+0x188>)
 800d338:	0010      	movs	r0, r2
 800d33a:	0019      	movs	r1, r3
 800d33c:	2358      	movs	r3, #88	@ 0x58
 800d33e:	001a      	movs	r2, r3
 800d340:	f00b fefa 	bl	8019138 <memcpy>
}
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	46bd      	mov	sp, r7
 800d348:	b005      	add	sp, #20
 800d34a:	bd90      	pop	{r4, r7, pc}
 800d34c:	200035a0 	.word	0x200035a0

0800d350 <PCF2129_setDate>:
 *  @retva l: None
=============================================================================
*/
void PCF2129_setDate(uint16_t years, uint8_t months, uint8_t days,
                     uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 800d350:	b5b0      	push	{r4, r5, r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	0005      	movs	r5, r0
 800d358:	000c      	movs	r4, r1
 800d35a:	0010      	movs	r0, r2
 800d35c:	0019      	movs	r1, r3
 800d35e:	1dbb      	adds	r3, r7, #6
 800d360:	1c2a      	adds	r2, r5, #0
 800d362:	801a      	strh	r2, [r3, #0]
 800d364:	1d7b      	adds	r3, r7, #5
 800d366:	1c22      	adds	r2, r4, #0
 800d368:	701a      	strb	r2, [r3, #0]
 800d36a:	1d3b      	adds	r3, r7, #4
 800d36c:	1c02      	adds	r2, r0, #0
 800d36e:	701a      	strb	r2, [r3, #0]
 800d370:	1cfb      	adds	r3, r7, #3
 800d372:	1c0a      	adds	r2, r1, #0
 800d374:	701a      	strb	r2, [r3, #0]
    PCF2129_write(PCF2129_REG_SECONDS,seconds);
 800d376:	231c      	movs	r3, #28
 800d378:	18fb      	adds	r3, r7, r3
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	0019      	movs	r1, r3
 800d37e:	2003      	movs	r0, #3
 800d380:	f000 f86a 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_MINUTES,minutes);
 800d384:	2318      	movs	r3, #24
 800d386:	18fb      	adds	r3, r7, r3
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	0019      	movs	r1, r3
 800d38c:	2004      	movs	r0, #4
 800d38e:	f000 f863 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_HOURS,hours);
 800d392:	1cfb      	adds	r3, r7, #3
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	0019      	movs	r1, r3
 800d398:	2005      	movs	r0, #5
 800d39a:	f000 f85d 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_DAYS,days);
 800d39e:	1d3b      	adds	r3, r7, #4
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	0019      	movs	r1, r3
 800d3a4:	2006      	movs	r0, #6
 800d3a6:	f000 f857 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_WEEKDAYS,0x00);
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	2007      	movs	r0, #7
 800d3ae:	f000 f853 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_MONTHS,months);
 800d3b2:	1d7b      	adds	r3, r7, #5
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	0019      	movs	r1, r3
 800d3b8:	2008      	movs	r0, #8
 800d3ba:	f000 f84d 	bl	800d458 <PCF2129_write>
    PCF2129_write(PCF2129_REG_YEARS,years);
 800d3be:	1dbb      	adds	r3, r7, #6
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	0019      	movs	r1, r3
 800d3c6:	2009      	movs	r0, #9
 800d3c8:	f000 f846 	bl	800d458 <PCF2129_write>
}
 800d3cc:	46c0      	nop			@ (mov r8, r8)
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	b002      	add	sp, #8
 800d3d2:	bdb0      	pop	{r4, r5, r7, pc}

0800d3d4 <PCF2129_set24mode>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_set24mode(void) {
 800d3d4:	b590      	push	{r4, r7, lr}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	ctrl = PCF2129_readCtrl(PCF2129_REG_CONTROL1);
 800d3da:	1dfc      	adds	r4, r7, #7
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f000 f85b 	bl	800d498 <PCF2129_readCtrl>
 800d3e2:	0003      	movs	r3, r0
 800d3e4:	7023      	strb	r3, [r4, #0]
	ctrl &= ~(PCF2129_CONTROL_12_24);
 800d3e6:	1dfb      	adds	r3, r7, #7
 800d3e8:	1dfa      	adds	r2, r7, #7
 800d3ea:	7812      	ldrb	r2, [r2, #0]
 800d3ec:	2104      	movs	r1, #4
 800d3ee:	438a      	bics	r2, r1
 800d3f0:	701a      	strb	r2, [r3, #0]
	PCF2129_writeCtrl(PCF2129_REG_CONTROL1, ctrl);
 800d3f2:	1dfb      	adds	r3, r7, #7
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	0019      	movs	r1, r3
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f000 f85b 	bl	800d4b4 <PCF2129_writeCtrl>
}
 800d3fe:	46c0      	nop			@ (mov r8, r8)
 800d400:	46bd      	mov	sp, r7
 800d402:	b003      	add	sp, #12
 800d404:	bd90      	pop	{r4, r7, pc}
	...

0800d408 <PCF2129_read>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t PCF2129_read(uint8_t address)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af02      	add	r7, sp, #8
 800d40e:	0002      	movs	r2, r0
 800d410:	1dfb      	adds	r3, r7, #7
 800d412:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&(pcf2129.i2c_h), 0xA2,  &address, 1, I2C_TIMEOUT);
 800d414:	1dfa      	adds	r2, r7, #7
 800d416:	480f      	ldr	r0, [pc, #60]	@ (800d454 <PCF2129_read+0x4c>)
 800d418:	231e      	movs	r3, #30
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	2301      	movs	r3, #1
 800d41e:	21a2      	movs	r1, #162	@ 0xa2
 800d420:	f001 ff00 	bl	800f224 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(&(pcf2129.i2c_h), pcf2129.i2caddr, &address, 1, I2C_TIMEOUT) == 0)
 800d424:	4b0b      	ldr	r3, [pc, #44]	@ (800d454 <PCF2129_read+0x4c>)
 800d426:	224c      	movs	r2, #76	@ 0x4c
 800d428:	5c9b      	ldrb	r3, [r3, r2]
 800d42a:	0019      	movs	r1, r3
 800d42c:	1dfa      	adds	r2, r7, #7
 800d42e:	4809      	ldr	r0, [pc, #36]	@ (800d454 <PCF2129_read+0x4c>)
 800d430:	231e      	movs	r3, #30
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	2301      	movs	r3, #1
 800d436:	f001 fffd 	bl	800f434 <HAL_I2C_Master_Receive>
 800d43a:	1e03      	subs	r3, r0, #0
 800d43c:	d104      	bne.n	800d448 <PCF2129_read+0x40>
	    	pcf2129.cdata.data = address;
 800d43e:	1dfb      	adds	r3, r7, #7
 800d440:	7819      	ldrb	r1, [r3, #0]
 800d442:	4b04      	ldr	r3, [pc, #16]	@ (800d454 <PCF2129_read+0x4c>)
 800d444:	2254      	movs	r2, #84	@ 0x54
 800d446:	5499      	strb	r1, [r3, r2]

	return address;
 800d448:	1dfb      	adds	r3, r7, #7
 800d44a:	781b      	ldrb	r3, [r3, #0]
	/*
	uint8_t data;
	HAL_I2C_Mem_Read(&(pcf2129.i2c_h), pcf2129.i2caddr, address-1, 1, &data, 1, I2C_TIMEOUT);
	return data;
	*/
}
 800d44c:	0018      	movs	r0, r3
 800d44e:	46bd      	mov	sp, r7
 800d450:	b002      	add	sp, #8
 800d452:	bd80      	pop	{r7, pc}
 800d454:	200035a0 	.word	0x200035a0

0800d458 <PCF2129_write>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_write(uint8_t address, uint8_t data)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af04      	add	r7, sp, #16
 800d45e:	0002      	movs	r2, r0
 800d460:	1dfb      	adds	r3, r7, #7
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	1dbb      	adds	r3, r7, #6
 800d466:	1c0a      	adds	r2, r1, #0
 800d468:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&(pcf2129.i2c_h), pcf2129.i2caddr, address, 1, &data, 1, I2C_TIMEOUT);
 800d46a:	4b0a      	ldr	r3, [pc, #40]	@ (800d494 <PCF2129_write+0x3c>)
 800d46c:	224c      	movs	r2, #76	@ 0x4c
 800d46e:	5c9b      	ldrb	r3, [r3, r2]
 800d470:	0019      	movs	r1, r3
 800d472:	1dfb      	adds	r3, r7, #7
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b29a      	uxth	r2, r3
 800d478:	4806      	ldr	r0, [pc, #24]	@ (800d494 <PCF2129_write+0x3c>)
 800d47a:	231e      	movs	r3, #30
 800d47c:	9302      	str	r3, [sp, #8]
 800d47e:	2301      	movs	r3, #1
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	1dbb      	adds	r3, r7, #6
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	2301      	movs	r3, #1
 800d488:	f002 f8dc 	bl	800f644 <HAL_I2C_Mem_Write>
}
 800d48c:	46c0      	nop			@ (mov r8, r8)
 800d48e:	46bd      	mov	sp, r7
 800d490:	b002      	add	sp, #8
 800d492:	bd80      	pop	{r7, pc}
 800d494:	200035a0 	.word	0x200035a0

0800d498 <PCF2129_readCtrl>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t PCF2129_readCtrl(uint8_t address) {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	0002      	movs	r2, r0
 800d4a0:	1dfb      	adds	r3, r7, #7
 800d4a2:	701a      	strb	r2, [r3, #0]
    return PCF2129_read(PCF2129_REG_CONTROL1);
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	f7ff ffaf 	bl	800d408 <PCF2129_read>
 800d4aa:	0003      	movs	r3, r0
}
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	b002      	add	sp, #8
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <PCF2129_writeCtrl>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
void PCF2129_writeCtrl(uint8_t address, uint8_t data) {
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	0002      	movs	r2, r0
 800d4bc:	1dfb      	adds	r3, r7, #7
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	1dbb      	adds	r3, r7, #6
 800d4c2:	1c0a      	adds	r2, r1, #0
 800d4c4:	701a      	strb	r2, [r3, #0]
    PCF2129_write(PCF2129_REG_CONTROL1, data);
 800d4c6:	1dbb      	adds	r3, r7, #6
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	0019      	movs	r1, r3
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	f7ff ffc3 	bl	800d458 <PCF2129_write>
}
 800d4d2:	46c0      	nop			@ (mov r8, r8)
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	b002      	add	sp, #8
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <bcdToDec>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t bcdToDec(uint8_t value) {
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	0002      	movs	r2, r0
 800d4e2:	1dfb      	adds	r3, r7, #7
 800d4e4:	701a      	strb	r2, [r3, #0]
    return (uint8_t) ( (value/16*10) + (value%16) );
 800d4e6:	1dfb      	adds	r3, r7, #7
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	091b      	lsrs	r3, r3, #4
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	1c1a      	adds	r2, r3, #0
 800d4f0:	0092      	lsls	r2, r2, #2
 800d4f2:	18d3      	adds	r3, r2, r3
 800d4f4:	18db      	adds	r3, r3, r3
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	1dfb      	adds	r3, r7, #7
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	210f      	movs	r1, #15
 800d4fe:	400b      	ands	r3, r1
 800d500:	b2db      	uxtb	r3, r3
 800d502:	18d3      	adds	r3, r2, r3
 800d504:	b2db      	uxtb	r3, r3
}
 800d506:	0018      	movs	r0, r3
 800d508:	46bd      	mov	sp, r7
 800d50a:	b002      	add	sp, #8
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <decToBcd>:
 *  @note :
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint8_t decToBcd(uint8_t value) {
 800d50e:	b590      	push	{r4, r7, lr}
 800d510:	b083      	sub	sp, #12
 800d512:	af00      	add	r7, sp, #0
 800d514:	0002      	movs	r2, r0
 800d516:	1dfb      	adds	r3, r7, #7
 800d518:	701a      	strb	r2, [r3, #0]
    return (uint8_t) ( (value/10*16) + (value%10) );
 800d51a:	1dfb      	adds	r3, r7, #7
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	210a      	movs	r1, #10
 800d520:	0018      	movs	r0, r3
 800d522:	f7f2 fe01 	bl	8000128 <__udivsi3>
 800d526:	0003      	movs	r3, r0
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	011b      	lsls	r3, r3, #4
 800d52c:	b2dc      	uxtb	r4, r3
 800d52e:	1dfb      	adds	r3, r7, #7
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	210a      	movs	r1, #10
 800d534:	0018      	movs	r0, r3
 800d536:	f7f2 fe7d 	bl	8000234 <__aeabi_uidivmod>
 800d53a:	000b      	movs	r3, r1
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	18e3      	adds	r3, r4, r3
 800d540:	b2db      	uxtb	r3, r3
}
 800d542:	0018      	movs	r0, r3
 800d544:	46bd      	mov	sp, r7
 800d546:	b003      	add	sp, #12
 800d548:	bd90      	pop	{r4, r7, pc}
	...

0800d54c <unixToUtc>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
utc_t unixToUtc(uint32_t u32UnixTimeStamp)
{
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b08f      	sub	sp, #60	@ 0x3c
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
	uint8_t flat_year_month_day[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800d556:	231c      	movs	r3, #28
 800d558:	18fb      	adds	r3, r7, r3
 800d55a:	4a99      	ldr	r2, [pc, #612]	@ (800d7c0 <unixToUtc+0x274>)
 800d55c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d55e:	c313      	stmia	r3!, {r0, r1, r4}
 800d560:	7812      	ldrb	r2, [r2, #0]
 800d562:	701a      	strb	r2, [r3, #0]
	uint8_t leap_year_month_day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800d564:	230c      	movs	r3, #12
 800d566:	18fb      	adds	r3, r7, r3
 800d568:	4a96      	ldr	r2, [pc, #600]	@ (800d7c4 <unixToUtc+0x278>)
 800d56a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d56c:	c313      	stmia	r3!, {r0, r1, r4}
 800d56e:	7812      	ldrb	r2, [r2, #0]
 800d570:	701a      	strb	r2, [r3, #0]

	int32_t year_temp = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t day_temp = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t cnt_temp = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t is_leap_or_flat_year;
	uint8_t i;

	cnt_temp = u32UnixTimeStamp;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while(cnt_temp >= 126230400)
 800d582:	e007      	b.n	800d594 <unixToUtc+0x48>
	{
		year_temp ++;
 800d584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d586:	3301      	adds	r3, #1
 800d588:	637b      	str	r3, [r7, #52]	@ 0x34
		cnt_temp = cnt_temp - 126230400;
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	4a8e      	ldr	r2, [pc, #568]	@ (800d7c8 <unixToUtc+0x27c>)
 800d58e:	4694      	mov	ip, r2
 800d590:	4463      	add	r3, ip
 800d592:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while(cnt_temp >= 126230400)
 800d594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d596:	4a8d      	ldr	r2, [pc, #564]	@ (800d7cc <unixToUtc+0x280>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	dcf3      	bgt.n	800d584 <unixToUtc+0x38>
	}

	UtcTime.year = UNIX_TIME_YEAR + (4 * year_temp);
 800d59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	3b4e      	subs	r3, #78	@ 0x4e
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	4b89      	ldr	r3, [pc, #548]	@ (800d7d0 <unixToUtc+0x284>)
 800d5aa:	701a      	strb	r2, [r3, #0]

	if(cnt_temp >= 31536000)
 800d5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ae:	4a89      	ldr	r2, [pc, #548]	@ (800d7d4 <unixToUtc+0x288>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	dd37      	ble.n	800d624 <unixToUtc+0xd8>
	{
		UtcTime.year ++;
 800d5b4:	4b86      	ldr	r3, [pc, #536]	@ (800d7d0 <unixToUtc+0x284>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	4b84      	ldr	r3, [pc, #528]	@ (800d7d0 <unixToUtc+0x284>)
 800d5be:	701a      	strb	r2, [r3, #0]
		cnt_temp -= 31536000;
 800d5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c2:	4a85      	ldr	r2, [pc, #532]	@ (800d7d8 <unixToUtc+0x28c>)
 800d5c4:	4694      	mov	ip, r2
 800d5c6:	4463      	add	r3, ip
 800d5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(cnt_temp >= 31536000)
 800d5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5cc:	4a81      	ldr	r2, [pc, #516]	@ (800d7d4 <unixToUtc+0x288>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	dd28      	ble.n	800d624 <unixToUtc+0xd8>
		{
			UtcTime.year ++;
 800d5d2:	4b7f      	ldr	r3, [pc, #508]	@ (800d7d0 <unixToUtc+0x284>)
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	4b7d      	ldr	r3, [pc, #500]	@ (800d7d0 <unixToUtc+0x284>)
 800d5dc:	701a      	strb	r2, [r3, #0]
			cnt_temp -= 31536000;
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	4a7d      	ldr	r2, [pc, #500]	@ (800d7d8 <unixToUtc+0x28c>)
 800d5e2:	4694      	mov	ip, r2
 800d5e4:	4463      	add	r3, ip
 800d5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			if(cnt_temp >= 31622400)
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	4a7c      	ldr	r2, [pc, #496]	@ (800d7dc <unixToUtc+0x290>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	dd19      	ble.n	800d624 <unixToUtc+0xd8>
			{
				UtcTime.year ++;
 800d5f0:	4b77      	ldr	r3, [pc, #476]	@ (800d7d0 <unixToUtc+0x284>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	4b75      	ldr	r3, [pc, #468]	@ (800d7d0 <unixToUtc+0x284>)
 800d5fa:	701a      	strb	r2, [r3, #0]
				cnt_temp -= 31622400;
 800d5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fe:	4a78      	ldr	r2, [pc, #480]	@ (800d7e0 <unixToUtc+0x294>)
 800d600:	4694      	mov	ip, r2
 800d602:	4463      	add	r3, ip
 800d604:	62fb      	str	r3, [r7, #44]	@ 0x2c

				if(cnt_temp >= 31536000)
 800d606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d608:	4a72      	ldr	r2, [pc, #456]	@ (800d7d4 <unixToUtc+0x288>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	dd0a      	ble.n	800d624 <unixToUtc+0xd8>
				{
					UtcTime.year ++;
 800d60e:	4b70      	ldr	r3, [pc, #448]	@ (800d7d0 <unixToUtc+0x284>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	3301      	adds	r3, #1
 800d614:	b2da      	uxtb	r2, r3
 800d616:	4b6e      	ldr	r3, [pc, #440]	@ (800d7d0 <unixToUtc+0x284>)
 800d618:	701a      	strb	r2, [r3, #0]
					cnt_temp -= 31536000;
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	4a6e      	ldr	r2, [pc, #440]	@ (800d7d8 <unixToUtc+0x28c>)
 800d61e:	4694      	mov	ip, r2
 800d620:	4463      	add	r3, ip
 800d622:	62fb      	str	r3, [r7, #44]	@ 0x2c
				}
			}
		}
	}

	if((((UtcTime.year % 4) == 0) && ((UtcTime.year % 100) != 0)) || ((UtcTime.year % 400) == 0))
 800d624:	4b6a      	ldr	r3, [pc, #424]	@ (800d7d0 <unixToUtc+0x284>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2203      	movs	r2, #3
 800d62a:	4013      	ands	r3, r2
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d109      	bne.n	800d646 <unixToUtc+0xfa>
 800d632:	4b67      	ldr	r3, [pc, #412]	@ (800d7d0 <unixToUtc+0x284>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2164      	movs	r1, #100	@ 0x64
 800d638:	0018      	movs	r0, r3
 800d63a:	f7f2 fdfb 	bl	8000234 <__aeabi_uidivmod>
 800d63e:	000b      	movs	r3, r1
 800d640:	b2db      	uxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d109      	bne.n	800d65a <unixToUtc+0x10e>
 800d646:	4b62      	ldr	r3, [pc, #392]	@ (800d7d0 <unixToUtc+0x284>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	001a      	movs	r2, r3
 800d64c:	23c8      	movs	r3, #200	@ 0xc8
 800d64e:	0059      	lsls	r1, r3, #1
 800d650:	0010      	movs	r0, r2
 800d652:	f7f2 fed9 	bl	8000408 <__aeabi_idivmod>
 800d656:	1e0b      	subs	r3, r1, #0
 800d658:	d104      	bne.n	800d664 <unixToUtc+0x118>
	{
		is_leap_or_flat_year = LEAP_YEAR;
 800d65a:	232b      	movs	r3, #43	@ 0x2b
 800d65c:	18fb      	adds	r3, r7, r3
 800d65e:	2201      	movs	r2, #1
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	e003      	b.n	800d66c <unixToUtc+0x120>
	}
	else
	{
		is_leap_or_flat_year = FLAT_YEAR;
 800d664:	232b      	movs	r3, #43	@ 0x2b
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	2200      	movs	r2, #0
 800d66a:	701a      	strb	r2, [r3, #0]
	}

	day_temp = cnt_temp / 86400;
 800d66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66e:	495d      	ldr	r1, [pc, #372]	@ (800d7e4 <unixToUtc+0x298>)
 800d670:	0018      	movs	r0, r3
 800d672:	f7f2 fde3 	bl	800023c <__divsi3>
 800d676:	0003      	movs	r3, r0
 800d678:	633b      	str	r3, [r7, #48]	@ 0x30

	UtcTime.hour = (cnt_temp - day_temp * 86400) / 3600; //Calculate hours
 800d67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d67c:	0013      	movs	r3, r2
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	189b      	adds	r3, r3, r2
 800d682:	011a      	lsls	r2, r3, #4
 800d684:	1ad2      	subs	r2, r2, r3
 800d686:	0113      	lsls	r3, r2, #4
 800d688:	1a9b      	subs	r3, r3, r2
 800d68a:	01db      	lsls	r3, r3, #7
 800d68c:	425a      	negs	r2, r3
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	18d3      	adds	r3, r2, r3
 800d692:	22e1      	movs	r2, #225	@ 0xe1
 800d694:	0111      	lsls	r1, r2, #4
 800d696:	0018      	movs	r0, r3
 800d698:	f7f2 fdd0 	bl	800023c <__divsi3>
 800d69c:	0003      	movs	r3, r0
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	4b4b      	ldr	r3, [pc, #300]	@ (800d7d0 <unixToUtc+0x284>)
 800d6a2:	70da      	strb	r2, [r3, #3]
	UtcTime.minute = (cnt_temp - day_temp * 86400 - UtcTime.hour * 3600) / 60; //Calculate minutes
 800d6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6a6:	0013      	movs	r3, r2
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	189b      	adds	r3, r3, r2
 800d6ac:	011a      	lsls	r2, r3, #4
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	0113      	lsls	r3, r2, #4
 800d6b2:	1a9b      	subs	r3, r3, r2
 800d6b4:	01db      	lsls	r3, r3, #7
 800d6b6:	425a      	negs	r2, r3
 800d6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ba:	18d1      	adds	r1, r2, r3
 800d6bc:	4b44      	ldr	r3, [pc, #272]	@ (800d7d0 <unixToUtc+0x284>)
 800d6be:	78db      	ldrb	r3, [r3, #3]
 800d6c0:	001a      	movs	r2, r3
 800d6c2:	0013      	movs	r3, r2
 800d6c4:	051b      	lsls	r3, r3, #20
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	189b      	adds	r3, r3, r2
 800d6cc:	015b      	lsls	r3, r3, #5
 800d6ce:	1a9b      	subs	r3, r3, r2
 800d6d0:	011b      	lsls	r3, r3, #4
 800d6d2:	18cb      	adds	r3, r1, r3
 800d6d4:	213c      	movs	r1, #60	@ 0x3c
 800d6d6:	0018      	movs	r0, r3
 800d6d8:	f7f2 fdb0 	bl	800023c <__divsi3>
 800d6dc:	0003      	movs	r3, r0
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	4b3b      	ldr	r3, [pc, #236]	@ (800d7d0 <unixToUtc+0x284>)
 800d6e2:	711a      	strb	r2, [r3, #4]
	UtcTime.second = cnt_temp % 60;
 800d6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e6:	213c      	movs	r1, #60	@ 0x3c
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f7f2 fe8d 	bl	8000408 <__aeabi_idivmod>
 800d6ee:	000b      	movs	r3, r1
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	4b37      	ldr	r3, [pc, #220]	@ (800d7d0 <unixToUtc+0x284>)
 800d6f4:	715a      	strb	r2, [r3, #5]

	UtcTime.month = 1;
 800d6f6:	4b36      	ldr	r3, [pc, #216]	@ (800d7d0 <unixToUtc+0x284>)
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	705a      	strb	r2, [r3, #1]
	for(i = 0; i < 12; i ++)
 800d6fc:	232a      	movs	r3, #42	@ 0x2a
 800d6fe:	18fb      	adds	r3, r7, r3
 800d700:	2200      	movs	r2, #0
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e044      	b.n	800d790 <unixToUtc+0x244>
	{
		if(is_leap_or_flat_year == FLAT_YEAR)
 800d706:	232b      	movs	r3, #43	@ 0x2b
 800d708:	18fb      	adds	r3, r7, r3
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d11a      	bne.n	800d746 <unixToUtc+0x1fa>
		{
			if(day_temp >= flat_year_month_day[i + 1])
 800d710:	212a      	movs	r1, #42	@ 0x2a
 800d712:	187b      	adds	r3, r7, r1
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	3301      	adds	r3, #1
 800d718:	201c      	movs	r0, #28
 800d71a:	183a      	adds	r2, r7, r0
 800d71c:	5cd3      	ldrb	r3, [r2, r3]
 800d71e:	001a      	movs	r2, r3
 800d720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d722:	4293      	cmp	r3, r2
 800d724:	db2e      	blt.n	800d784 <unixToUtc+0x238>
			{
				UtcTime.month ++; day_temp -= flat_year_month_day[i + 1];
 800d726:	4b2a      	ldr	r3, [pc, #168]	@ (800d7d0 <unixToUtc+0x284>)
 800d728:	785b      	ldrb	r3, [r3, #1]
 800d72a:	3301      	adds	r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	4b28      	ldr	r3, [pc, #160]	@ (800d7d0 <unixToUtc+0x284>)
 800d730:	705a      	strb	r2, [r3, #1]
 800d732:	187b      	adds	r3, r7, r1
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	3301      	adds	r3, #1
 800d738:	183a      	adds	r2, r7, r0
 800d73a:	5cd3      	ldrb	r3, [r2, r3]
 800d73c:	001a      	movs	r2, r3
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	1a9b      	subs	r3, r3, r2
 800d742:	633b      	str	r3, [r7, #48]	@ 0x30
 800d744:	e01e      	b.n	800d784 <unixToUtc+0x238>
			}
		}
		else if(is_leap_or_flat_year == LEAP_YEAR)
 800d746:	232b      	movs	r3, #43	@ 0x2b
 800d748:	18fb      	adds	r3, r7, r3
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d119      	bne.n	800d784 <unixToUtc+0x238>
		{
			if(day_temp >= leap_year_month_day[i + 1])
 800d750:	212a      	movs	r1, #42	@ 0x2a
 800d752:	187b      	adds	r3, r7, r1
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	3301      	adds	r3, #1
 800d758:	200c      	movs	r0, #12
 800d75a:	183a      	adds	r2, r7, r0
 800d75c:	5cd3      	ldrb	r3, [r2, r3]
 800d75e:	001a      	movs	r2, r3
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	4293      	cmp	r3, r2
 800d764:	db0e      	blt.n	800d784 <unixToUtc+0x238>
			{
				UtcTime.month ++;
 800d766:	4b1a      	ldr	r3, [pc, #104]	@ (800d7d0 <unixToUtc+0x284>)
 800d768:	785b      	ldrb	r3, [r3, #1]
 800d76a:	3301      	adds	r3, #1
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	4b18      	ldr	r3, [pc, #96]	@ (800d7d0 <unixToUtc+0x284>)
 800d770:	705a      	strb	r2, [r3, #1]
				day_temp -= leap_year_month_day[i + 1];
 800d772:	187b      	adds	r3, r7, r1
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	3301      	adds	r3, #1
 800d778:	183a      	adds	r2, r7, r0
 800d77a:	5cd3      	ldrb	r3, [r2, r3]
 800d77c:	001a      	movs	r2, r3
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	1a9b      	subs	r3, r3, r2
 800d782:	633b      	str	r3, [r7, #48]	@ 0x30
	for(i = 0; i < 12; i ++)
 800d784:	212a      	movs	r1, #42	@ 0x2a
 800d786:	187b      	adds	r3, r7, r1
 800d788:	781a      	ldrb	r2, [r3, #0]
 800d78a:	187b      	adds	r3, r7, r1
 800d78c:	3201      	adds	r2, #1
 800d78e:	701a      	strb	r2, [r3, #0]
 800d790:	232a      	movs	r3, #42	@ 0x2a
 800d792:	18fb      	adds	r3, r7, r3
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b0b      	cmp	r3, #11
 800d798:	d9b5      	bls.n	800d706 <unixToUtc+0x1ba>
			}
		}
	}

	UtcTime.date = day_temp + 1;
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	3301      	adds	r3, #1
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <unixToUtc+0x284>)
 800d7a4:	709a      	strb	r2, [r3, #2]

	return UtcTime;
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <unixToUtc+0x284>)
 800d7aa:	0010      	movs	r0, r2
 800d7ac:	0019      	movs	r1, r3
 800d7ae:	2306      	movs	r3, #6
 800d7b0:	001a      	movs	r2, r3
 800d7b2:	f00b fcc1 	bl	8019138 <memcpy>
}
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	b00f      	add	sp, #60	@ 0x3c
 800d7bc:	bd90      	pop	{r4, r7, pc}
 800d7be:	46c0      	nop			@ (mov r8, r8)
 800d7c0:	08019ec8 	.word	0x08019ec8
 800d7c4:	08019ed8 	.word	0x08019ed8
 800d7c8:	f879e080 	.word	0xf879e080
 800d7cc:	07861f7f 	.word	0x07861f7f
 800d7d0:	20000e08 	.word	0x20000e08
 800d7d4:	01e1337f 	.word	0x01e1337f
 800d7d8:	fe1ecc80 	.word	0xfe1ecc80
 800d7dc:	01e284ff 	.word	0x01e284ff
 800d7e0:	fe1d7b00 	.word	0xfe1d7b00
 800d7e4:	00015180 	.word	0x00015180

0800d7e8 <utcToUnix>:
 *  @param :None
 *  @retva l: None
=============================================================================
*/
uint32_t utcToUnix(time_tt *time)
{
 800d7e8:	b590      	push	{r4, r7, lr}
 800d7ea:	b08f      	sub	sp, #60	@ 0x3c
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
	uint8_t FlatYearMonthDay[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800d7f0:	2318      	movs	r3, #24
 800d7f2:	18fb      	adds	r3, r7, r3
 800d7f4:	4a84      	ldr	r2, [pc, #528]	@ (800da08 <utcToUnix+0x220>)
 800d7f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d7f8:	c313      	stmia	r3!, {r0, r1, r4}
 800d7fa:	7812      	ldrb	r2, [r2, #0]
 800d7fc:	701a      	strb	r2, [r3, #0]
	uint8_t LeapYearMonthDay[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800d7fe:	2308      	movs	r3, #8
 800d800:	18fb      	adds	r3, r7, r3
 800d802:	4a82      	ldr	r2, [pc, #520]	@ (800da0c <utcToUnix+0x224>)
 800d804:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d806:	c313      	stmia	r3!, {r0, r1, r4}
 800d808:	7812      	ldrb	r2, [r2, #0]
 800d80a:	701a      	strb	r2, [r3, #0]

	uint16_t i;
	uint16_t ThisYear;

	uint16_t LeapYearNumber = 0;
 800d80c:	2332      	movs	r3, #50	@ 0x32
 800d80e:	18fb      	adds	r3, r7, r3
 800d810:	2200      	movs	r2, #0
 800d812:	801a      	strh	r2, [r3, #0]
	uint16_t FlatYearNumber = 0;
 800d814:	2330      	movs	r3, #48	@ 0x30
 800d816:	18fb      	adds	r3, r7, r3
 800d818:	2200      	movs	r2, #0
 800d81a:	801a      	strh	r2, [r3, #0]
	uint16_t LastMonDays =  0;
 800d81c:	232e      	movs	r3, #46	@ 0x2e
 800d81e:	18fb      	adds	r3, r7, r3
 800d820:	2200      	movs	r2, #0
 800d822:	801a      	strh	r2, [r3, #0]

	uint32_t TimeStamp = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (i = 1970; i < stCurrentTime.year; i ++)
 800d828:	2336      	movs	r3, #54	@ 0x36
 800d82a:	18fb      	adds	r3, r7, r3
 800d82c:	4a78      	ldr	r2, [pc, #480]	@ (800da10 <utcToUnix+0x228>)
 800d82e:	801a      	strh	r2, [r3, #0]
 800d830:	e030      	b.n	800d894 <utcToUnix+0xac>
	{
		if((((i % 4) == 0) && ((i % 100) != 0)) || ((i % 400) == 0))
 800d832:	2136      	movs	r1, #54	@ 0x36
 800d834:	187b      	adds	r3, r7, r1
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	2203      	movs	r2, #3
 800d83a:	4013      	ands	r3, r2
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d109      	bne.n	800d856 <utcToUnix+0x6e>
 800d842:	187b      	adds	r3, r7, r1
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	2164      	movs	r1, #100	@ 0x64
 800d848:	0018      	movs	r0, r3
 800d84a:	f7f2 fcf3 	bl	8000234 <__aeabi_uidivmod>
 800d84e:	000b      	movs	r3, r1
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10b      	bne.n	800d86e <utcToUnix+0x86>
 800d856:	2336      	movs	r3, #54	@ 0x36
 800d858:	18fb      	adds	r3, r7, r3
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	22c8      	movs	r2, #200	@ 0xc8
 800d85e:	0051      	lsls	r1, r2, #1
 800d860:	0018      	movs	r0, r3
 800d862:	f7f2 fce7 	bl	8000234 <__aeabi_uidivmod>
 800d866:	000b      	movs	r3, r1
 800d868:	b29b      	uxth	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <utcToUnix+0x94>
		{
			LeapYearNumber ++;
 800d86e:	2132      	movs	r1, #50	@ 0x32
 800d870:	187b      	adds	r3, r7, r1
 800d872:	881a      	ldrh	r2, [r3, #0]
 800d874:	187b      	adds	r3, r7, r1
 800d876:	3201      	adds	r2, #1
 800d878:	801a      	strh	r2, [r3, #0]
 800d87a:	e005      	b.n	800d888 <utcToUnix+0xa0>
		}
		else
		{
			FlatYearNumber ++;
 800d87c:	2130      	movs	r1, #48	@ 0x30
 800d87e:	187b      	adds	r3, r7, r1
 800d880:	881a      	ldrh	r2, [r3, #0]
 800d882:	187b      	adds	r3, r7, r1
 800d884:	3201      	adds	r2, #1
 800d886:	801a      	strh	r2, [r3, #0]
	for (i = 1970; i < stCurrentTime.year; i ++)
 800d888:	2136      	movs	r1, #54	@ 0x36
 800d88a:	187b      	adds	r3, r7, r1
 800d88c:	881a      	ldrh	r2, [r3, #0]
 800d88e:	187b      	adds	r3, r7, r1
 800d890:	3201      	adds	r2, #1
 800d892:	801a      	strh	r2, [r3, #0]
 800d894:	4b5f      	ldr	r3, [pc, #380]	@ (800da14 <utcToUnix+0x22c>)
 800d896:	881b      	ldrh	r3, [r3, #0]
 800d898:	2236      	movs	r2, #54	@ 0x36
 800d89a:	18ba      	adds	r2, r7, r2
 800d89c:	8812      	ldrh	r2, [r2, #0]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d3c7      	bcc.n	800d832 <utcToUnix+0x4a>
		}
	}
	TimeStamp = LeapYearNumber * 31622400 + FlatYearNumber * 31536000;
 800d8a2:	2332      	movs	r3, #50	@ 0x32
 800d8a4:	18fb      	adds	r3, r7, r3
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	4a5b      	ldr	r2, [pc, #364]	@ (800da18 <utcToUnix+0x230>)
 800d8aa:	435a      	muls	r2, r3
 800d8ac:	0011      	movs	r1, r2
 800d8ae:	2330      	movs	r3, #48	@ 0x30
 800d8b0:	18fb      	adds	r3, r7, r3
 800d8b2:	881a      	ldrh	r2, [r3, #0]
 800d8b4:	0013      	movs	r3, r2
 800d8b6:	025b      	lsls	r3, r3, #9
 800d8b8:	189b      	adds	r3, r3, r2
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	189b      	adds	r3, r3, r2
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	011a      	lsls	r2, r3, #4
 800d8c4:	1ad2      	subs	r2, r2, r3
 800d8c6:	01d3      	lsls	r3, r2, #7
 800d8c8:	001a      	movs	r2, r3
 800d8ca:	0013      	movs	r3, r2
 800d8cc:	18cb      	adds	r3, r1, r3
 800d8ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	if((((stCurrentTime.year % 4) == 0) && ((stCurrentTime.year % 100) != 0)) || ((stCurrentTime.year % 400) == 0))
 800d8d0:	4b50      	ldr	r3, [pc, #320]	@ (800da14 <utcToUnix+0x22c>)
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	2203      	movs	r2, #3
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d109      	bne.n	800d8f2 <utcToUnix+0x10a>
 800d8de:	4b4d      	ldr	r3, [pc, #308]	@ (800da14 <utcToUnix+0x22c>)
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	2164      	movs	r1, #100	@ 0x64
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f7f2 fca5 	bl	8000234 <__aeabi_uidivmod>
 800d8ea:	000b      	movs	r3, r1
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <utcToUnix+0x120>
 800d8f2:	4b48      	ldr	r3, [pc, #288]	@ (800da14 <utcToUnix+0x22c>)
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	22c8      	movs	r2, #200	@ 0xc8
 800d8f8:	0051      	lsls	r1, r2, #1
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f7f2 fc9a 	bl	8000234 <__aeabi_uidivmod>
 800d900:	000b      	movs	r3, r1
 800d902:	b29b      	uxth	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d104      	bne.n	800d912 <utcToUnix+0x12a>
	{
		ThisYear = LEAP_YEAR;
 800d908:	2334      	movs	r3, #52	@ 0x34
 800d90a:	18fb      	adds	r3, r7, r3
 800d90c:	2201      	movs	r2, #1
 800d90e:	801a      	strh	r2, [r3, #0]
 800d910:	e003      	b.n	800d91a <utcToUnix+0x132>
	}
	else
	{
		ThisYear = FLAT_YEAR;
 800d912:	2334      	movs	r3, #52	@ 0x34
 800d914:	18fb      	adds	r3, r7, r3
 800d916:	2200      	movs	r2, #0
 800d918:	801a      	strh	r2, [r3, #0]
	}

	for ( i = 1; i < stCurrentTime.month; i ++)
 800d91a:	2336      	movs	r3, #54	@ 0x36
 800d91c:	18fb      	adds	r3, r7, r3
 800d91e:	2201      	movs	r2, #1
 800d920:	801a      	strh	r2, [r3, #0]
 800d922:	e02a      	b.n	800d97a <utcToUnix+0x192>
	{
		if(ThisYear == LEAP_YEAR)
 800d924:	2334      	movs	r3, #52	@ 0x34
 800d926:	18fb      	adds	r3, r7, r3
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d10d      	bne.n	800d94a <utcToUnix+0x162>
		{
			LastMonDays += LeapYearMonthDay[i];
 800d92e:	2336      	movs	r3, #54	@ 0x36
 800d930:	18fb      	adds	r3, r7, r3
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	2208      	movs	r2, #8
 800d936:	18ba      	adds	r2, r7, r2
 800d938:	5cd3      	ldrb	r3, [r2, r3]
 800d93a:	0019      	movs	r1, r3
 800d93c:	222e      	movs	r2, #46	@ 0x2e
 800d93e:	18bb      	adds	r3, r7, r2
 800d940:	18ba      	adds	r2, r7, r2
 800d942:	8812      	ldrh	r2, [r2, #0]
 800d944:	188a      	adds	r2, r1, r2
 800d946:	801a      	strh	r2, [r3, #0]
 800d948:	e011      	b.n	800d96e <utcToUnix+0x186>
		}
		else if(ThisYear == FLAT_YEAR)
 800d94a:	2334      	movs	r3, #52	@ 0x34
 800d94c:	18fb      	adds	r3, r7, r3
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10c      	bne.n	800d96e <utcToUnix+0x186>
		{
			LastMonDays += FlatYearMonthDay[i];
 800d954:	2336      	movs	r3, #54	@ 0x36
 800d956:	18fb      	adds	r3, r7, r3
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	2218      	movs	r2, #24
 800d95c:	18ba      	adds	r2, r7, r2
 800d95e:	5cd3      	ldrb	r3, [r2, r3]
 800d960:	0019      	movs	r1, r3
 800d962:	222e      	movs	r2, #46	@ 0x2e
 800d964:	18bb      	adds	r3, r7, r2
 800d966:	18ba      	adds	r2, r7, r2
 800d968:	8812      	ldrh	r2, [r2, #0]
 800d96a:	188a      	adds	r2, r1, r2
 800d96c:	801a      	strh	r2, [r3, #0]
	for ( i = 1; i < stCurrentTime.month; i ++)
 800d96e:	2136      	movs	r1, #54	@ 0x36
 800d970:	187b      	adds	r3, r7, r1
 800d972:	881a      	ldrh	r2, [r3, #0]
 800d974:	187b      	adds	r3, r7, r1
 800d976:	3201      	adds	r2, #1
 800d978:	801a      	strh	r2, [r3, #0]
 800d97a:	4b26      	ldr	r3, [pc, #152]	@ (800da14 <utcToUnix+0x22c>)
 800d97c:	789b      	ldrb	r3, [r3, #2]
 800d97e:	001a      	movs	r2, r3
 800d980:	2336      	movs	r3, #54	@ 0x36
 800d982:	18fb      	adds	r3, r7, r3
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	4293      	cmp	r3, r2
 800d988:	d3cc      	bcc.n	800d924 <utcToUnix+0x13c>
		}
	}
	LastMonDays = LastMonDays + stCurrentTime.date - 1;
 800d98a:	4b22      	ldr	r3, [pc, #136]	@ (800da14 <utcToUnix+0x22c>)
 800d98c:	78db      	ldrb	r3, [r3, #3]
 800d98e:	001a      	movs	r2, r3
 800d990:	212e      	movs	r1, #46	@ 0x2e
 800d992:	187b      	adds	r3, r7, r1
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	18d3      	adds	r3, r2, r3
 800d998:	b29a      	uxth	r2, r3
 800d99a:	187b      	adds	r3, r7, r1
 800d99c:	3a01      	subs	r2, #1
 800d99e:	801a      	strh	r2, [r3, #0]
	TimeStamp += LastMonDays * 86400;
 800d9a0:	187b      	adds	r3, r7, r1
 800d9a2:	881a      	ldrh	r2, [r3, #0]
 800d9a4:	0013      	movs	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	189b      	adds	r3, r3, r2
 800d9aa:	011a      	lsls	r2, r3, #4
 800d9ac:	1ad2      	subs	r2, r2, r3
 800d9ae:	0113      	lsls	r3, r2, #4
 800d9b0:	1a9b      	subs	r3, r3, r2
 800d9b2:	01db      	lsls	r3, r3, #7
 800d9b4:	001a      	movs	r2, r3
 800d9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b8:	189b      	adds	r3, r3, r2
 800d9ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	TimeStamp += stCurrentTime.hour * 3600;
 800d9bc:	4b15      	ldr	r3, [pc, #84]	@ (800da14 <utcToUnix+0x22c>)
 800d9be:	791b      	ldrb	r3, [r3, #4]
 800d9c0:	001a      	movs	r2, r3
 800d9c2:	0013      	movs	r3, r2
 800d9c4:	011b      	lsls	r3, r3, #4
 800d9c6:	1a9b      	subs	r3, r3, r2
 800d9c8:	011a      	lsls	r2, r3, #4
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	0113      	lsls	r3, r2, #4
 800d9ce:	001a      	movs	r2, r3
 800d9d0:	0013      	movs	r3, r2
 800d9d2:	001a      	movs	r2, r3
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	189b      	adds	r3, r3, r2
 800d9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	TimeStamp += stCurrentTime.minute * 60;
 800d9da:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <utcToUnix+0x22c>)
 800d9dc:	795b      	ldrb	r3, [r3, #5]
 800d9de:	001a      	movs	r2, r3
 800d9e0:	0013      	movs	r3, r2
 800d9e2:	011b      	lsls	r3, r3, #4
 800d9e4:	1a9b      	subs	r3, r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	001a      	movs	r2, r3
 800d9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ec:	189b      	adds	r3, r3, r2
 800d9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	TimeStamp += stCurrentTime.second;
 800d9f0:	4b08      	ldr	r3, [pc, #32]	@ (800da14 <utcToUnix+0x22c>)
 800d9f2:	799b      	ldrb	r3, [r3, #6]
 800d9f4:	001a      	movs	r2, r3
 800d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f8:	189b      	adds	r3, r3, r2
 800d9fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	return TimeStamp;
 800d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800d9fe:	0018      	movs	r0, r3
 800da00:	46bd      	mov	sp, r7
 800da02:	b00f      	add	sp, #60	@ 0x3c
 800da04:	bd90      	pop	{r4, r7, pc}
 800da06:	46c0      	nop			@ (mov r8, r8)
 800da08:	08019ec8 	.word	0x08019ec8
 800da0c:	08019ed8 	.word	0x08019ed8
 800da10:	000007b2 	.word	0x000007b2
 800da14:	20000e14 	.word	0x20000e14
 800da18:	01e28500 	.word	0x01e28500

0800da1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da22:	4b11      	ldr	r3, [pc, #68]	@ (800da68 <HAL_MspInit+0x4c>)
 800da24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da26:	4b10      	ldr	r3, [pc, #64]	@ (800da68 <HAL_MspInit+0x4c>)
 800da28:	2101      	movs	r1, #1
 800da2a:	430a      	orrs	r2, r1
 800da2c:	641a      	str	r2, [r3, #64]	@ 0x40
 800da2e:	4b0e      	ldr	r3, [pc, #56]	@ (800da68 <HAL_MspInit+0x4c>)
 800da30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da32:	2201      	movs	r2, #1
 800da34:	4013      	ands	r3, r2
 800da36:	607b      	str	r3, [r7, #4]
 800da38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800da3a:	4b0b      	ldr	r3, [pc, #44]	@ (800da68 <HAL_MspInit+0x4c>)
 800da3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da3e:	4b0a      	ldr	r3, [pc, #40]	@ (800da68 <HAL_MspInit+0x4c>)
 800da40:	2180      	movs	r1, #128	@ 0x80
 800da42:	0549      	lsls	r1, r1, #21
 800da44:	430a      	orrs	r2, r1
 800da46:	63da      	str	r2, [r3, #60]	@ 0x3c
 800da48:	4b07      	ldr	r3, [pc, #28]	@ (800da68 <HAL_MspInit+0x4c>)
 800da4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da4c:	2380      	movs	r3, #128	@ 0x80
 800da4e:	055b      	lsls	r3, r3, #21
 800da50:	4013      	ands	r3, r2
 800da52:	603b      	str	r3, [r7, #0]
 800da54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800da56:	23c0      	movs	r3, #192	@ 0xc0
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	0018      	movs	r0, r3
 800da5c:	f000 fd86 	bl	800e56c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da60:	46c0      	nop			@ (mov r8, r8)
 800da62:	46bd      	mov	sp, r7
 800da64:	b002      	add	sp, #8
 800da66:	bd80      	pop	{r7, pc}
 800da68:	40021000 	.word	0x40021000

0800da6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800da6c:	b590      	push	{r4, r7, lr}
 800da6e:	b099      	sub	sp, #100	@ 0x64
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da74:	234c      	movs	r3, #76	@ 0x4c
 800da76:	18fb      	adds	r3, r7, r3
 800da78:	0018      	movs	r0, r3
 800da7a:	2314      	movs	r3, #20
 800da7c:	001a      	movs	r2, r3
 800da7e:	2100      	movs	r1, #0
 800da80:	f00b fb26 	bl	80190d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800da84:	2418      	movs	r4, #24
 800da86:	193b      	adds	r3, r7, r4
 800da88:	0018      	movs	r0, r3
 800da8a:	2334      	movs	r3, #52	@ 0x34
 800da8c:	001a      	movs	r2, r3
 800da8e:	2100      	movs	r1, #0
 800da90:	f00b fb1e 	bl	80190d0 <memset>
  if(hi2c->Instance==I2C1)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a42      	ldr	r2, [pc, #264]	@ (800dba4 <HAL_I2C_MspInit+0x138>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d148      	bne.n	800db30 <HAL_I2C_MspInit+0xc4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800da9e:	193b      	adds	r3, r7, r4
 800daa0:	2220      	movs	r2, #32
 800daa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800daa4:	193b      	adds	r3, r7, r4
 800daa6:	2200      	movs	r2, #0
 800daa8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800daaa:	193b      	adds	r3, r7, r4
 800daac:	0018      	movs	r0, r3
 800daae:	f003 ff2b 	bl	8011908 <HAL_RCCEx_PeriphCLKConfig>
 800dab2:	1e03      	subs	r3, r0, #0
 800dab4:	d001      	beq.n	800daba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800dab6:	f7ff fb55 	bl	800d164 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800daba:	4b3b      	ldr	r3, [pc, #236]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800dabc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dabe:	4b3a      	ldr	r3, [pc, #232]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800dac0:	2101      	movs	r1, #1
 800dac2:	430a      	orrs	r2, r1
 800dac4:	635a      	str	r2, [r3, #52]	@ 0x34
 800dac6:	4b38      	ldr	r3, [pc, #224]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800dac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daca:	2201      	movs	r2, #1
 800dacc:	4013      	ands	r3, r2
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dad2:	214c      	movs	r1, #76	@ 0x4c
 800dad4:	187b      	adds	r3, r7, r1
 800dad6:	22c0      	movs	r2, #192	@ 0xc0
 800dad8:	00d2      	lsls	r2, r2, #3
 800dada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dadc:	187b      	adds	r3, r7, r1
 800dade:	2212      	movs	r2, #18
 800dae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae2:	187b      	adds	r3, r7, r1
 800dae4:	2200      	movs	r2, #0
 800dae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dae8:	187b      	adds	r3, r7, r1
 800daea:	2200      	movs	r2, #0
 800daec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800daee:	187b      	adds	r3, r7, r1
 800daf0:	2206      	movs	r2, #6
 800daf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daf4:	187a      	adds	r2, r7, r1
 800daf6:	23a0      	movs	r3, #160	@ 0xa0
 800daf8:	05db      	lsls	r3, r3, #23
 800dafa:	0011      	movs	r1, r2
 800dafc:	0018      	movs	r0, r3
 800dafe:	f001 f95d 	bl	800edbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800db02:	4b29      	ldr	r3, [pc, #164]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db06:	4b28      	ldr	r3, [pc, #160]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db08:	2180      	movs	r1, #128	@ 0x80
 800db0a:	0389      	lsls	r1, r1, #14
 800db0c:	430a      	orrs	r2, r1
 800db0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800db10:	4b25      	ldr	r3, [pc, #148]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db14:	2380      	movs	r3, #128	@ 0x80
 800db16:	039b      	lsls	r3, r3, #14
 800db18:	4013      	ands	r3, r2
 800db1a:	613b      	str	r3, [r7, #16]
 800db1c:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800db1e:	2200      	movs	r2, #0
 800db20:	2100      	movs	r1, #0
 800db22:	2017      	movs	r0, #23
 800db24:	f000 fde4 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800db28:	2017      	movs	r0, #23
 800db2a:	f000 fdf6 	bl	800e71a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800db2e:	e035      	b.n	800db9c <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a1d      	ldr	r2, [pc, #116]	@ (800dbac <HAL_I2C_MspInit+0x140>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d130      	bne.n	800db9c <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800db3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db40:	2102      	movs	r1, #2
 800db42:	430a      	orrs	r2, r1
 800db44:	635a      	str	r2, [r3, #52]	@ 0x34
 800db46:	4b18      	ldr	r3, [pc, #96]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4a:	2202      	movs	r2, #2
 800db4c:	4013      	ands	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800db52:	214c      	movs	r1, #76	@ 0x4c
 800db54:	187b      	adds	r3, r7, r1
 800db56:	22c0      	movs	r2, #192	@ 0xc0
 800db58:	0112      	lsls	r2, r2, #4
 800db5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800db5c:	187b      	adds	r3, r7, r1
 800db5e:	2212      	movs	r2, #18
 800db60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db62:	187b      	adds	r3, r7, r1
 800db64:	2200      	movs	r2, #0
 800db66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db68:	187b      	adds	r3, r7, r1
 800db6a:	2200      	movs	r2, #0
 800db6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800db6e:	187b      	adds	r3, r7, r1
 800db70:	2206      	movs	r2, #6
 800db72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800db74:	187b      	adds	r3, r7, r1
 800db76:	4a0e      	ldr	r2, [pc, #56]	@ (800dbb0 <HAL_I2C_MspInit+0x144>)
 800db78:	0019      	movs	r1, r3
 800db7a:	0010      	movs	r0, r2
 800db7c:	f001 f91e 	bl	800edbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800db80:	4b09      	ldr	r3, [pc, #36]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db84:	4b08      	ldr	r3, [pc, #32]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db86:	2180      	movs	r1, #128	@ 0x80
 800db88:	03c9      	lsls	r1, r1, #15
 800db8a:	430a      	orrs	r2, r1
 800db8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800db8e:	4b06      	ldr	r3, [pc, #24]	@ (800dba8 <HAL_I2C_MspInit+0x13c>)
 800db90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db92:	2380      	movs	r3, #128	@ 0x80
 800db94:	03db      	lsls	r3, r3, #15
 800db96:	4013      	ands	r3, r2
 800db98:	60bb      	str	r3, [r7, #8]
 800db9a:	68bb      	ldr	r3, [r7, #8]
}
 800db9c:	46c0      	nop			@ (mov r8, r8)
 800db9e:	46bd      	mov	sp, r7
 800dba0:	b019      	add	sp, #100	@ 0x64
 800dba2:	bd90      	pop	{r4, r7, pc}
 800dba4:	40005400 	.word	0x40005400
 800dba8:	40021000 	.word	0x40021000
 800dbac:	40005800 	.word	0x40005800
 800dbb0:	50000400 	.word	0x50000400

0800dbb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dbb4:	b590      	push	{r4, r7, lr}
 800dbb6:	b0a1      	sub	sp, #132	@ 0x84
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbbc:	236c      	movs	r3, #108	@ 0x6c
 800dbbe:	18fb      	adds	r3, r7, r3
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	2314      	movs	r3, #20
 800dbc4:	001a      	movs	r2, r3
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	f00b fa82 	bl	80190d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dbcc:	2438      	movs	r4, #56	@ 0x38
 800dbce:	193b      	adds	r3, r7, r4
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	2334      	movs	r3, #52	@ 0x34
 800dbd4:	001a      	movs	r2, r3
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	f00b fa7a 	bl	80190d0 <memset>
  if(huart->Instance==LPUART1)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4ad4      	ldr	r2, [pc, #848]	@ (800df34 <HAL_UART_MspInit+0x380>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d147      	bne.n	800dc76 <HAL_UART_MspInit+0xc2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800dbe6:	193b      	adds	r3, r7, r4
 800dbe8:	2210      	movs	r2, #16
 800dbea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800dbec:	193b      	adds	r3, r7, r4
 800dbee:	2280      	movs	r2, #128	@ 0x80
 800dbf0:	0112      	lsls	r2, r2, #4
 800dbf2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dbf4:	193b      	adds	r3, r7, r4
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	f003 fe86 	bl	8011908 <HAL_RCCEx_PeriphCLKConfig>
 800dbfc:	1e03      	subs	r3, r0, #0
 800dbfe:	d001      	beq.n	800dc04 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800dc00:	f7ff fab0 	bl	800d164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800dc04:	4bcc      	ldr	r3, [pc, #816]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc08:	4bcb      	ldr	r3, [pc, #812]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc0a:	2180      	movs	r1, #128	@ 0x80
 800dc0c:	0349      	lsls	r1, r1, #13
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dc12:	4bc9      	ldr	r3, [pc, #804]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc16:	2380      	movs	r3, #128	@ 0x80
 800dc18:	035b      	lsls	r3, r3, #13
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dc20:	4bc5      	ldr	r3, [pc, #788]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc24:	4bc4      	ldr	r3, [pc, #784]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc26:	2104      	movs	r1, #4
 800dc28:	430a      	orrs	r2, r1
 800dc2a:	635a      	str	r2, [r3, #52]	@ 0x34
 800dc2c:	4bc2      	ldr	r3, [pc, #776]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc30:	2204      	movs	r2, #4
 800dc32:	4013      	ands	r3, r2
 800dc34:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800dc38:	216c      	movs	r1, #108	@ 0x6c
 800dc3a:	187b      	adds	r3, r7, r1
 800dc3c:	2203      	movs	r2, #3
 800dc3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc40:	187b      	adds	r3, r7, r1
 800dc42:	2202      	movs	r2, #2
 800dc44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc46:	187b      	adds	r3, r7, r1
 800dc48:	2200      	movs	r2, #0
 800dc4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc4c:	187b      	adds	r3, r7, r1
 800dc4e:	2200      	movs	r2, #0
 800dc50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 800dc52:	187b      	adds	r3, r7, r1
 800dc54:	2201      	movs	r2, #1
 800dc56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc58:	187b      	adds	r3, r7, r1
 800dc5a:	4ab8      	ldr	r2, [pc, #736]	@ (800df3c <HAL_UART_MspInit+0x388>)
 800dc5c:	0019      	movs	r1, r3
 800dc5e:	0010      	movs	r0, r2
 800dc60:	f001 f8ac 	bl	800edbc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800dc64:	2200      	movs	r2, #0
 800dc66:	2102      	movs	r1, #2
 800dc68:	201d      	movs	r0, #29
 800dc6a:	f000 fd41 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800dc6e:	201d      	movs	r0, #29
 800dc70:	f000 fd53 	bl	800e71a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800dc74:	e15a      	b.n	800df2c <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART1)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4ab1      	ldr	r2, [pc, #708]	@ (800df40 <HAL_UART_MspInit+0x38c>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d168      	bne.n	800dd52 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800dc80:	2138      	movs	r1, #56	@ 0x38
 800dc82:	187b      	adds	r3, r7, r1
 800dc84:	2201      	movs	r2, #1
 800dc86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800dc88:	187b      	adds	r3, r7, r1
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dc8e:	187b      	adds	r3, r7, r1
 800dc90:	0018      	movs	r0, r3
 800dc92:	f003 fe39 	bl	8011908 <HAL_RCCEx_PeriphCLKConfig>
 800dc96:	1e03      	subs	r3, r0, #0
 800dc98:	d001      	beq.n	800dc9e <HAL_UART_MspInit+0xea>
      Error_Handler();
 800dc9a:	f7ff fa63 	bl	800d164 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800dc9e:	4ba6      	ldr	r3, [pc, #664]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dca2:	4ba5      	ldr	r3, [pc, #660]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dca4:	2180      	movs	r1, #128	@ 0x80
 800dca6:	01c9      	lsls	r1, r1, #7
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	641a      	str	r2, [r3, #64]	@ 0x40
 800dcac:	4ba2      	ldr	r3, [pc, #648]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dcae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcb0:	2380      	movs	r3, #128	@ 0x80
 800dcb2:	01db      	lsls	r3, r3, #7
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dcba:	4b9f      	ldr	r3, [pc, #636]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dcbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcbe:	4b9e      	ldr	r3, [pc, #632]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dcc0:	2104      	movs	r1, #4
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	635a      	str	r2, [r3, #52]	@ 0x34
 800dcc6:	4b9c      	ldr	r3, [pc, #624]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcca:	2204      	movs	r2, #4
 800dccc:	4013      	ands	r3, r2
 800dcce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800dcd2:	216c      	movs	r1, #108	@ 0x6c
 800dcd4:	187b      	adds	r3, r7, r1
 800dcd6:	2230      	movs	r2, #48	@ 0x30
 800dcd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcda:	187b      	adds	r3, r7, r1
 800dcdc:	2202      	movs	r2, #2
 800dcde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dce0:	187b      	adds	r3, r7, r1
 800dce2:	2200      	movs	r2, #0
 800dce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dce6:	187b      	adds	r3, r7, r1
 800dce8:	2200      	movs	r2, #0
 800dcea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800dcec:	187b      	adds	r3, r7, r1
 800dcee:	2201      	movs	r2, #1
 800dcf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dcf2:	187b      	adds	r3, r7, r1
 800dcf4:	4a91      	ldr	r2, [pc, #580]	@ (800df3c <HAL_UART_MspInit+0x388>)
 800dcf6:	0019      	movs	r1, r3
 800dcf8:	0010      	movs	r0, r2
 800dcfa:	f001 f85f 	bl	800edbc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800dcfe:	4b91      	ldr	r3, [pc, #580]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd00:	4a91      	ldr	r2, [pc, #580]	@ (800df48 <HAL_UART_MspInit+0x394>)
 800dd02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800dd04:	4b8f      	ldr	r3, [pc, #572]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd06:	2232      	movs	r2, #50	@ 0x32
 800dd08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dd0a:	4b8e      	ldr	r3, [pc, #568]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dd10:	4b8c      	ldr	r3, [pc, #560]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800dd16:	4b8b      	ldr	r3, [pc, #556]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd18:	2280      	movs	r2, #128	@ 0x80
 800dd1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dd1c:	4b89      	ldr	r3, [pc, #548]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dd22:	4b88      	ldr	r3, [pc, #544]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800dd28:	4b86      	ldr	r3, [pc, #536]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd2a:	2220      	movs	r2, #32
 800dd2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dd2e:	4b85      	ldr	r3, [pc, #532]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800dd34:	4b83      	ldr	r3, [pc, #524]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd36:	0018      	movs	r0, r3
 800dd38:	f000 fd0c 	bl	800e754 <HAL_DMA_Init>
 800dd3c:	1e03      	subs	r3, r0, #0
 800dd3e:	d001      	beq.n	800dd44 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800dd40:	f7ff fa10 	bl	800d164 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a7f      	ldr	r2, [pc, #508]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd48:	67da      	str	r2, [r3, #124]	@ 0x7c
 800dd4a:	4b7e      	ldr	r3, [pc, #504]	@ (800df44 <HAL_UART_MspInit+0x390>)
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800dd50:	e0ec      	b.n	800df2c <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART2)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a7d      	ldr	r2, [pc, #500]	@ (800df4c <HAL_UART_MspInit+0x398>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d148      	bne.n	800ddee <HAL_UART_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800dd5c:	2138      	movs	r1, #56	@ 0x38
 800dd5e:	187b      	adds	r3, r7, r1
 800dd60:	2202      	movs	r2, #2
 800dd62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800dd64:	187b      	adds	r3, r7, r1
 800dd66:	2200      	movs	r2, #0
 800dd68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dd6a:	187b      	adds	r3, r7, r1
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f003 fdcb 	bl	8011908 <HAL_RCCEx_PeriphCLKConfig>
 800dd72:	1e03      	subs	r3, r0, #0
 800dd74:	d001      	beq.n	800dd7a <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 800dd76:	f7ff f9f5 	bl	800d164 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800dd7a:	4b6f      	ldr	r3, [pc, #444]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dd7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd7e:	4b6e      	ldr	r3, [pc, #440]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dd80:	2180      	movs	r1, #128	@ 0x80
 800dd82:	0289      	lsls	r1, r1, #10
 800dd84:	430a      	orrs	r2, r1
 800dd86:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dd88:	4b6b      	ldr	r3, [pc, #428]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dd8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd8c:	2380      	movs	r3, #128	@ 0x80
 800dd8e:	029b      	lsls	r3, r3, #10
 800dd90:	4013      	ands	r3, r2
 800dd92:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd96:	4b68      	ldr	r3, [pc, #416]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dd98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd9a:	4b67      	ldr	r3, [pc, #412]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	635a      	str	r2, [r3, #52]	@ 0x34
 800dda2:	4b65      	ldr	r3, [pc, #404]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dda6:	2201      	movs	r2, #1
 800dda8:	4013      	ands	r3, r2
 800ddaa:	623b      	str	r3, [r7, #32]
 800ddac:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ddae:	216c      	movs	r1, #108	@ 0x6c
 800ddb0:	187b      	adds	r3, r7, r1
 800ddb2:	220c      	movs	r2, #12
 800ddb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb6:	187b      	adds	r3, r7, r1
 800ddb8:	2202      	movs	r2, #2
 800ddba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddbc:	187b      	adds	r3, r7, r1
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddc2:	187b      	adds	r3, r7, r1
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ddc8:	187b      	adds	r3, r7, r1
 800ddca:	2201      	movs	r2, #1
 800ddcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddce:	187a      	adds	r2, r7, r1
 800ddd0:	23a0      	movs	r3, #160	@ 0xa0
 800ddd2:	05db      	lsls	r3, r3, #23
 800ddd4:	0011      	movs	r1, r2
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f000 fff0 	bl	800edbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800dddc:	2200      	movs	r2, #0
 800ddde:	2102      	movs	r1, #2
 800dde0:	201c      	movs	r0, #28
 800dde2:	f000 fc85 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dde6:	201c      	movs	r0, #28
 800dde8:	f000 fc97 	bl	800e71a <HAL_NVIC_EnableIRQ>
}
 800ddec:	e09e      	b.n	800df2c <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART3)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a57      	ldr	r2, [pc, #348]	@ (800df50 <HAL_UART_MspInit+0x39c>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d15b      	bne.n	800deb0 <HAL_UART_MspInit+0x2fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ddf8:	4b4f      	ldr	r3, [pc, #316]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800ddfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ddfc:	4b4e      	ldr	r3, [pc, #312]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800ddfe:	2180      	movs	r1, #128	@ 0x80
 800de00:	02c9      	lsls	r1, r1, #11
 800de02:	430a      	orrs	r2, r1
 800de04:	63da      	str	r2, [r3, #60]	@ 0x3c
 800de06:	4b4c      	ldr	r3, [pc, #304]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de0a:	2380      	movs	r3, #128	@ 0x80
 800de0c:	02db      	lsls	r3, r3, #11
 800de0e:	4013      	ands	r3, r2
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de14:	4b48      	ldr	r3, [pc, #288]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de18:	4b47      	ldr	r3, [pc, #284]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de1a:	2101      	movs	r1, #1
 800de1c:	430a      	orrs	r2, r1
 800de1e:	635a      	str	r2, [r3, #52]	@ 0x34
 800de20:	4b45      	ldr	r3, [pc, #276]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de24:	2201      	movs	r2, #1
 800de26:	4013      	ands	r3, r2
 800de28:	61bb      	str	r3, [r7, #24]
 800de2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de2c:	4b42      	ldr	r3, [pc, #264]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de30:	4b41      	ldr	r3, [pc, #260]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de32:	2102      	movs	r1, #2
 800de34:	430a      	orrs	r2, r1
 800de36:	635a      	str	r2, [r3, #52]	@ 0x34
 800de38:	4b3f      	ldr	r3, [pc, #252]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800de3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3c:	2202      	movs	r2, #2
 800de3e:	4013      	ands	r3, r2
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800de44:	246c      	movs	r4, #108	@ 0x6c
 800de46:	193b      	adds	r3, r7, r4
 800de48:	2220      	movs	r2, #32
 800de4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de4c:	193b      	adds	r3, r7, r4
 800de4e:	2202      	movs	r2, #2
 800de50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de52:	193b      	adds	r3, r7, r4
 800de54:	2200      	movs	r2, #0
 800de56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de58:	193b      	adds	r3, r7, r4
 800de5a:	2200      	movs	r2, #0
 800de5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800de5e:	193b      	adds	r3, r7, r4
 800de60:	2204      	movs	r2, #4
 800de62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de64:	193a      	adds	r2, r7, r4
 800de66:	23a0      	movs	r3, #160	@ 0xa0
 800de68:	05db      	lsls	r3, r3, #23
 800de6a:	0011      	movs	r1, r2
 800de6c:	0018      	movs	r0, r3
 800de6e:	f000 ffa5 	bl	800edbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800de72:	0021      	movs	r1, r4
 800de74:	187b      	adds	r3, r7, r1
 800de76:	2201      	movs	r2, #1
 800de78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de7a:	187b      	adds	r3, r7, r1
 800de7c:	2202      	movs	r2, #2
 800de7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de80:	187b      	adds	r3, r7, r1
 800de82:	2200      	movs	r2, #0
 800de84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de86:	187b      	adds	r3, r7, r1
 800de88:	2200      	movs	r2, #0
 800de8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800de8c:	187b      	adds	r3, r7, r1
 800de8e:	2204      	movs	r2, #4
 800de90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de92:	187b      	adds	r3, r7, r1
 800de94:	4a2f      	ldr	r2, [pc, #188]	@ (800df54 <HAL_UART_MspInit+0x3a0>)
 800de96:	0019      	movs	r1, r3
 800de98:	0010      	movs	r0, r2
 800de9a:	f000 ff8f 	bl	800edbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800de9e:	2200      	movs	r2, #0
 800dea0:	2102      	movs	r1, #2
 800dea2:	201d      	movs	r0, #29
 800dea4:	f000 fc24 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800dea8:	201d      	movs	r0, #29
 800deaa:	f000 fc36 	bl	800e71a <HAL_NVIC_EnableIRQ>
}
 800deae:	e03d      	b.n	800df2c <HAL_UART_MspInit+0x378>
  else if(huart->Instance==USART4)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a28      	ldr	r2, [pc, #160]	@ (800df58 <HAL_UART_MspInit+0x3a4>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d138      	bne.n	800df2c <HAL_UART_MspInit+0x378>
    __HAL_RCC_USART4_CLK_ENABLE();
 800deba:	4b1f      	ldr	r3, [pc, #124]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800debc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800debe:	4b1e      	ldr	r3, [pc, #120]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dec0:	2180      	movs	r1, #128	@ 0x80
 800dec2:	0309      	lsls	r1, r1, #12
 800dec4:	430a      	orrs	r2, r1
 800dec6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dec8:	4b1b      	ldr	r3, [pc, #108]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800deca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800decc:	2380      	movs	r3, #128	@ 0x80
 800dece:	031b      	lsls	r3, r3, #12
 800ded0:	4013      	ands	r3, r2
 800ded2:	613b      	str	r3, [r7, #16]
 800ded4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ded6:	4b18      	ldr	r3, [pc, #96]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800ded8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800deda:	4b17      	ldr	r3, [pc, #92]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dedc:	2104      	movs	r1, #4
 800dede:	430a      	orrs	r2, r1
 800dee0:	635a      	str	r2, [r3, #52]	@ 0x34
 800dee2:	4b15      	ldr	r3, [pc, #84]	@ (800df38 <HAL_UART_MspInit+0x384>)
 800dee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dee6:	2204      	movs	r2, #4
 800dee8:	4013      	ands	r3, r2
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800deee:	216c      	movs	r1, #108	@ 0x6c
 800def0:	187b      	adds	r3, r7, r1
 800def2:	22c0      	movs	r2, #192	@ 0xc0
 800def4:	0112      	lsls	r2, r2, #4
 800def6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def8:	187b      	adds	r3, r7, r1
 800defa:	2202      	movs	r2, #2
 800defc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800defe:	187b      	adds	r3, r7, r1
 800df00:	2200      	movs	r2, #0
 800df02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df04:	187b      	adds	r3, r7, r1
 800df06:	2200      	movs	r2, #0
 800df08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 800df0a:	187b      	adds	r3, r7, r1
 800df0c:	2201      	movs	r2, #1
 800df0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df10:	187b      	adds	r3, r7, r1
 800df12:	4a0a      	ldr	r2, [pc, #40]	@ (800df3c <HAL_UART_MspInit+0x388>)
 800df14:	0019      	movs	r1, r3
 800df16:	0010      	movs	r0, r2
 800df18:	f000 ff50 	bl	800edbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800df1c:	2200      	movs	r2, #0
 800df1e:	2102      	movs	r1, #2
 800df20:	201d      	movs	r0, #29
 800df22:	f000 fbe5 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 800df26:	201d      	movs	r0, #29
 800df28:	f000 fbf7 	bl	800e71a <HAL_NVIC_EnableIRQ>
}
 800df2c:	46c0      	nop			@ (mov r8, r8)
 800df2e:	46bd      	mov	sp, r7
 800df30:	b021      	add	sp, #132	@ 0x84
 800df32:	bd90      	pop	{r4, r7, pc}
 800df34:	40008000 	.word	0x40008000
 800df38:	40021000 	.word	0x40021000
 800df3c:	50000800 	.word	0x50000800
 800df40:	40013800 	.word	0x40013800
 800df44:	20000940 	.word	0x20000940
 800df48:	40020008 	.word	0x40020008
 800df4c:	40004400 	.word	0x40004400
 800df50:	40004800 	.word	0x40004800
 800df54:	50000400 	.word	0x50000400
 800df58:	40004c00 	.word	0x40004c00

0800df5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b08b      	sub	sp, #44	@ 0x2c
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df64:	2414      	movs	r4, #20
 800df66:	193b      	adds	r3, r7, r4
 800df68:	0018      	movs	r0, r3
 800df6a:	2314      	movs	r3, #20
 800df6c:	001a      	movs	r2, r3
 800df6e:	2100      	movs	r1, #0
 800df70:	f00b f8ae 	bl	80190d0 <memset>
  if(hspi->Instance==SPI1)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a1f      	ldr	r2, [pc, #124]	@ (800dff8 <HAL_SPI_MspInit+0x9c>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d138      	bne.n	800dff0 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800df7e:	4b1f      	ldr	r3, [pc, #124]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800df80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df82:	4b1e      	ldr	r3, [pc, #120]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800df84:	2180      	movs	r1, #128	@ 0x80
 800df86:	0149      	lsls	r1, r1, #5
 800df88:	430a      	orrs	r2, r1
 800df8a:	641a      	str	r2, [r3, #64]	@ 0x40
 800df8c:	4b1b      	ldr	r3, [pc, #108]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800df8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df90:	2380      	movs	r3, #128	@ 0x80
 800df92:	015b      	lsls	r3, r3, #5
 800df94:	4013      	ands	r3, r2
 800df96:	613b      	str	r3, [r7, #16]
 800df98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df9a:	4b18      	ldr	r3, [pc, #96]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800df9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df9e:	4b17      	ldr	r3, [pc, #92]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	430a      	orrs	r2, r1
 800dfa4:	635a      	str	r2, [r3, #52]	@ 0x34
 800dfa6:	4b15      	ldr	r3, [pc, #84]	@ (800dffc <HAL_SPI_MspInit+0xa0>)
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfaa:	2201      	movs	r2, #1
 800dfac:	4013      	ands	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800dfb2:	0021      	movs	r1, r4
 800dfb4:	187b      	adds	r3, r7, r1
 800dfb6:	22c2      	movs	r2, #194	@ 0xc2
 800dfb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfba:	187b      	adds	r3, r7, r1
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfc6:	187b      	adds	r3, r7, r1
 800dfc8:	2200      	movs	r2, #0
 800dfca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800dfcc:	187b      	adds	r3, r7, r1
 800dfce:	2200      	movs	r2, #0
 800dfd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfd2:	187a      	adds	r2, r7, r1
 800dfd4:	23a0      	movs	r3, #160	@ 0xa0
 800dfd6:	05db      	lsls	r3, r3, #23
 800dfd8:	0011      	movs	r1, r2
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f000 feee 	bl	800edbc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	2019      	movs	r0, #25
 800dfe6:	f000 fb83 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800dfea:	2019      	movs	r0, #25
 800dfec:	f000 fb95 	bl	800e71a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b00b      	add	sp, #44	@ 0x2c
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	40013000 	.word	0x40013000
 800dffc:	40021000 	.word	0x40021000

0800e000 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800e000:	b590      	push	{r4, r7, lr}
 800e002:	b099      	sub	sp, #100	@ 0x64
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e008:	234c      	movs	r3, #76	@ 0x4c
 800e00a:	18fb      	adds	r3, r7, r3
 800e00c:	0018      	movs	r0, r3
 800e00e:	2314      	movs	r3, #20
 800e010:	001a      	movs	r2, r3
 800e012:	2100      	movs	r1, #0
 800e014:	f00b f85c 	bl	80190d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e018:	2418      	movs	r4, #24
 800e01a:	193b      	adds	r3, r7, r4
 800e01c:	0018      	movs	r0, r3
 800e01e:	2334      	movs	r3, #52	@ 0x34
 800e020:	001a      	movs	r2, r3
 800e022:	2100      	movs	r1, #0
 800e024:	f00b f854 	bl	80190d0 <memset>
  if(htim_ic->Instance==TIM1)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a46      	ldr	r2, [pc, #280]	@ (800e148 <HAL_TIM_IC_MspInit+0x148>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d148      	bne.n	800e0c4 <HAL_TIM_IC_MspInit+0xc4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800e032:	193b      	adds	r3, r7, r4
 800e034:	2280      	movs	r2, #128	@ 0x80
 800e036:	0392      	lsls	r2, r2, #14
 800e038:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800e03a:	193b      	adds	r3, r7, r4
 800e03c:	2200      	movs	r2, #0
 800e03e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e040:	193b      	adds	r3, r7, r4
 800e042:	0018      	movs	r0, r3
 800e044:	f003 fc60 	bl	8011908 <HAL_RCCEx_PeriphCLKConfig>
 800e048:	1e03      	subs	r3, r0, #0
 800e04a:	d001      	beq.n	800e050 <HAL_TIM_IC_MspInit+0x50>
    {
      Error_Handler();
 800e04c:	f7ff f88a 	bl	800d164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e050:	4b3e      	ldr	r3, [pc, #248]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e054:	4b3d      	ldr	r3, [pc, #244]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e056:	2180      	movs	r1, #128	@ 0x80
 800e058:	0109      	lsls	r1, r1, #4
 800e05a:	430a      	orrs	r2, r1
 800e05c:	641a      	str	r2, [r3, #64]	@ 0x40
 800e05e:	4b3b      	ldr	r3, [pc, #236]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e062:	2380      	movs	r3, #128	@ 0x80
 800e064:	011b      	lsls	r3, r3, #4
 800e066:	4013      	ands	r3, r2
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e06c:	4b37      	ldr	r3, [pc, #220]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e06e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e070:	4b36      	ldr	r3, [pc, #216]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e072:	2104      	movs	r1, #4
 800e074:	430a      	orrs	r2, r1
 800e076:	635a      	str	r2, [r3, #52]	@ 0x34
 800e078:	4b34      	ldr	r3, [pc, #208]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e07c:	2204      	movs	r2, #4
 800e07e:	4013      	ands	r3, r2
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e084:	214c      	movs	r1, #76	@ 0x4c
 800e086:	187b      	adds	r3, r7, r1
 800e088:	2280      	movs	r2, #128	@ 0x80
 800e08a:	0052      	lsls	r2, r2, #1
 800e08c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e08e:	187b      	adds	r3, r7, r1
 800e090:	2202      	movs	r2, #2
 800e092:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e094:	187b      	adds	r3, r7, r1
 800e096:	2200      	movs	r2, #0
 800e098:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e09a:	187b      	adds	r3, r7, r1
 800e09c:	2200      	movs	r2, #0
 800e09e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800e0a0:	187b      	adds	r3, r7, r1
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0a6:	187b      	adds	r3, r7, r1
 800e0a8:	4a29      	ldr	r2, [pc, #164]	@ (800e150 <HAL_TIM_IC_MspInit+0x150>)
 800e0aa:	0019      	movs	r1, r3
 800e0ac:	0010      	movs	r0, r2
 800e0ae:	f000 fe85 	bl	800edbc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	200e      	movs	r0, #14
 800e0b8:	f000 fb1a 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800e0bc:	200e      	movs	r0, #14
 800e0be:	f000 fb2c 	bl	800e71a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800e0c2:	e03d      	b.n	800e140 <HAL_TIM_IC_MspInit+0x140>
  else if(htim_ic->Instance==TIM2)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	2380      	movs	r3, #128	@ 0x80
 800e0ca:	05db      	lsls	r3, r3, #23
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d137      	bne.n	800e140 <HAL_TIM_IC_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e0dc:	4b1b      	ldr	r3, [pc, #108]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	4013      	ands	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0e8:	4b18      	ldr	r3, [pc, #96]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0ec:	4b17      	ldr	r3, [pc, #92]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	635a      	str	r2, [r3, #52]	@ 0x34
 800e0f4:	4b15      	ldr	r3, [pc, #84]	@ (800e14c <HAL_TIM_IC_MspInit+0x14c>)
 800e0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	60bb      	str	r3, [r7, #8]
 800e0fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800e100:	214c      	movs	r1, #76	@ 0x4c
 800e102:	187b      	adds	r3, r7, r1
 800e104:	2280      	movs	r2, #128	@ 0x80
 800e106:	0212      	lsls	r2, r2, #8
 800e108:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e10a:	187b      	adds	r3, r7, r1
 800e10c:	2202      	movs	r2, #2
 800e10e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e110:	187b      	adds	r3, r7, r1
 800e112:	2200      	movs	r2, #0
 800e114:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e116:	187b      	adds	r3, r7, r1
 800e118:	2200      	movs	r2, #0
 800e11a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e11c:	187b      	adds	r3, r7, r1
 800e11e:	2202      	movs	r2, #2
 800e120:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e122:	187a      	adds	r2, r7, r1
 800e124:	23a0      	movs	r3, #160	@ 0xa0
 800e126:	05db      	lsls	r3, r3, #23
 800e128:	0011      	movs	r1, r2
 800e12a:	0018      	movs	r0, r3
 800e12c:	f000 fe46 	bl	800edbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800e130:	2200      	movs	r2, #0
 800e132:	2100      	movs	r1, #0
 800e134:	200f      	movs	r0, #15
 800e136:	f000 fadb 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e13a:	200f      	movs	r0, #15
 800e13c:	f000 faed 	bl	800e71a <HAL_NVIC_EnableIRQ>
}
 800e140:	46c0      	nop			@ (mov r8, r8)
 800e142:	46bd      	mov	sp, r7
 800e144:	b019      	add	sp, #100	@ 0x64
 800e146:	bd90      	pop	{r4, r7, pc}
 800e148:	40012c00 	.word	0x40012c00
 800e14c:	40021000 	.word	0x40021000
 800e150:	50000800 	.word	0x50000800

0800e154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0d      	ldr	r2, [pc, #52]	@ (800e198 <HAL_TIM_Base_MspInit+0x44>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d113      	bne.n	800e18e <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e166:	4b0d      	ldr	r3, [pc, #52]	@ (800e19c <HAL_TIM_Base_MspInit+0x48>)
 800e168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e16a:	4b0c      	ldr	r3, [pc, #48]	@ (800e19c <HAL_TIM_Base_MspInit+0x48>)
 800e16c:	2102      	movs	r1, #2
 800e16e:	430a      	orrs	r2, r1
 800e170:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e172:	4b0a      	ldr	r3, [pc, #40]	@ (800e19c <HAL_TIM_Base_MspInit+0x48>)
 800e174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e176:	2202      	movs	r2, #2
 800e178:	4013      	ands	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]
 800e17c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800e17e:	2200      	movs	r2, #0
 800e180:	2100      	movs	r1, #0
 800e182:	2010      	movs	r0, #16
 800e184:	f000 fab4 	bl	800e6f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e188:	2010      	movs	r0, #16
 800e18a:	f000 fac6 	bl	800e71a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e18e:	46c0      	nop			@ (mov r8, r8)
 800e190:	46bd      	mov	sp, r7
 800e192:	b004      	add	sp, #16
 800e194:	bd80      	pop	{r7, pc}
 800e196:	46c0      	nop			@ (mov r8, r8)
 800e198:	40000400 	.word	0x40000400
 800e19c:	40021000 	.word	0x40021000

0800e1a0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800e1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e1dc <SDTimer_Handler+0x3c>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d006      	beq.n	800e1bc <SDTimer_Handler+0x1c>
    Timer1--;
 800e1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e1dc <SDTimer_Handler+0x3c>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	4b08      	ldr	r3, [pc, #32]	@ (800e1dc <SDTimer_Handler+0x3c>)
 800e1ba:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 800e1bc:	4b08      	ldr	r3, [pc, #32]	@ (800e1e0 <SDTimer_Handler+0x40>)
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <SDTimer_Handler+0x34>
    Timer2--;
 800e1c6:	4b06      	ldr	r3, [pc, #24]	@ (800e1e0 <SDTimer_Handler+0x40>)
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	4b03      	ldr	r3, [pc, #12]	@ (800e1e0 <SDTimer_Handler+0x40>)
 800e1d2:	801a      	strh	r2, [r3, #0]
}
 800e1d4:	46c0      	nop			@ (mov r8, r8)
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	46c0      	nop			@ (mov r8, r8)
 800e1dc:	200035fa 	.word	0x200035fa
 800e1e0:	200035fc 	.word	0x200035fc

0800e1e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e1e8:	46c0      	nop			@ (mov r8, r8)
 800e1ea:	e7fd      	b.n	800e1e8 <NMI_Handler+0x4>

0800e1ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e1f0:	46c0      	nop			@ (mov r8, r8)
 800e1f2:	e7fd      	b.n	800e1f0 <HardFault_Handler+0x4>

0800e1f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800e1f8:	46c0      	nop			@ (mov r8, r8)
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e202:	46c0      	nop			@ (mov r8, r8)
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800e20c:	4b0a      	ldr	r3, [pc, #40]	@ (800e238 <SysTick_Handler+0x30>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	3301      	adds	r3, #1
 800e214:	b2da      	uxtb	r2, r3
 800e216:	4b08      	ldr	r3, [pc, #32]	@ (800e238 <SysTick_Handler+0x30>)
 800e218:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800e21a:	4b07      	ldr	r3, [pc, #28]	@ (800e238 <SysTick_Handler+0x30>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	2b09      	cmp	r3, #9
 800e222:	d904      	bls.n	800e22e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800e224:	4b04      	ldr	r3, [pc, #16]	@ (800e238 <SysTick_Handler+0x30>)
 800e226:	2200      	movs	r2, #0
 800e228:	701a      	strb	r2, [r3, #0]
		  SDTimer_Handler();
 800e22a:	f7ff ffb9 	bl	800e1a0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e22e:	f000 f95d 	bl	800e4ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e232:	46c0      	nop			@ (mov r8, r8)
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	200035f8 	.word	0x200035f8

0800e23c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800e240:	4b03      	ldr	r3, [pc, #12]	@ (800e250 <DMA1_Channel1_IRQHandler+0x14>)
 800e242:	0018      	movs	r0, r3
 800e244:	f000 fc62 	bl	800eb0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800e248:	46c0      	nop			@ (mov r8, r8)
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	46c0      	nop			@ (mov r8, r8)
 800e250:	20000940 	.word	0x20000940

0800e254 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e258:	4b03      	ldr	r3, [pc, #12]	@ (800e268 <TIM1_CC_IRQHandler+0x14>)
 800e25a:	0018      	movs	r0, r3
 800e25c:	f004 fdb0 	bl	8012dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800e260:	46c0      	nop			@ (mov r8, r8)
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	46c0      	nop			@ (mov r8, r8)
 800e268:	20000a00 	.word	0x20000a00

0800e26c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e270:	4b03      	ldr	r3, [pc, #12]	@ (800e280 <TIM2_IRQHandler+0x14>)
 800e272:	0018      	movs	r0, r3
 800e274:	f004 fda4 	bl	8012dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e278:	46c0      	nop			@ (mov r8, r8)
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	46c0      	nop			@ (mov r8, r8)
 800e280:	20000a4c 	.word	0x20000a4c

0800e284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e288:	4b03      	ldr	r3, [pc, #12]	@ (800e298 <TIM3_IRQHandler+0x14>)
 800e28a:	0018      	movs	r0, r3
 800e28c:	f004 fd98 	bl	8012dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e290:	46c0      	nop			@ (mov r8, r8)
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	46c0      	nop			@ (mov r8, r8)
 800e298:	20000a98 	.word	0x20000a98

0800e29c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800e2a0:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <I2C1_IRQHandler+0x2c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	699a      	ldr	r2, [r3, #24]
 800e2a6:	23e0      	movs	r3, #224	@ 0xe0
 800e2a8:	00db      	lsls	r3, r3, #3
 800e2aa:	4013      	ands	r3, r2
 800e2ac:	d004      	beq.n	800e2b8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800e2ae:	4b06      	ldr	r3, [pc, #24]	@ (800e2c8 <I2C1_IRQHandler+0x2c>)
 800e2b0:	0018      	movs	r0, r3
 800e2b2:	f001 fc43 	bl	800fb3c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800e2b6:	e003      	b.n	800e2c0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800e2b8:	4b03      	ldr	r3, [pc, #12]	@ (800e2c8 <I2C1_IRQHandler+0x2c>)
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f001 fc24 	bl	800fb08 <HAL_I2C_EV_IRQHandler>
}
 800e2c0:	46c0      	nop			@ (mov r8, r8)
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	46c0      	nop			@ (mov r8, r8)
 800e2c8:	200005d8 	.word	0x200005d8

0800e2cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800e2d0:	4b03      	ldr	r3, [pc, #12]	@ (800e2e0 <SPI1_IRQHandler+0x14>)
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f004 f8b2 	bl	801243c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800e2d8:	46c0      	nop			@ (mov r8, r8)
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	46c0      	nop			@ (mov r8, r8)
 800e2e0:	2000099c 	.word	0x2000099c

0800e2e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e2e8:	4b05      	ldr	r3, [pc, #20]	@ (800e300 <USART1_IRQHandler+0x1c>)
 800e2ea:	0018      	movs	r0, r3
 800e2ec:	f005 fe62 	bl	8013fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800e2f0:	4b03      	ldr	r3, [pc, #12]	@ (800e300 <USART1_IRQHandler+0x1c>)
 800e2f2:	0018      	movs	r0, r3
 800e2f4:	f7f5 fe6e 	bl	8003fd4 <USER_UART_IRQHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 800e2f8:	46c0      	nop			@ (mov r8, r8)
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	46c0      	nop			@ (mov r8, r8)
 800e300:	20000700 	.word	0x20000700

0800e304 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e308:	4b03      	ldr	r3, [pc, #12]	@ (800e318 <USART2_IRQHandler+0x14>)
 800e30a:	0018      	movs	r0, r3
 800e30c:	f005 fe52 	bl	8013fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e310:	46c0      	nop			@ (mov r8, r8)
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	46c0      	nop			@ (mov r8, r8)
 800e318:	20000790 	.word	0x20000790

0800e31c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e320:	4b07      	ldr	r3, [pc, #28]	@ (800e340 <USART3_4_LPUART1_IRQHandler+0x24>)
 800e322:	0018      	movs	r0, r3
 800e324:	f005 fe46 	bl	8013fb4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <USART3_4_LPUART1_IRQHandler+0x28>)
 800e32a:	0018      	movs	r0, r3
 800e32c:	f005 fe42 	bl	8013fb4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&hlpuart1);
 800e330:	4b05      	ldr	r3, [pc, #20]	@ (800e348 <USART3_4_LPUART1_IRQHandler+0x2c>)
 800e332:	0018      	movs	r0, r3
 800e334:	f005 fe3e 	bl	8013fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800e338:	46c0      	nop			@ (mov r8, r8)
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	46c0      	nop			@ (mov r8, r8)
 800e340:	20000820 	.word	0x20000820
 800e344:	200008b0 	.word	0x200008b0
 800e348:	20000670 	.word	0x20000670

0800e34c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e354:	4a14      	ldr	r2, [pc, #80]	@ (800e3a8 <_sbrk+0x5c>)
 800e356:	4b15      	ldr	r3, [pc, #84]	@ (800e3ac <_sbrk+0x60>)
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e360:	4b13      	ldr	r3, [pc, #76]	@ (800e3b0 <_sbrk+0x64>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e368:	4b11      	ldr	r3, [pc, #68]	@ (800e3b0 <_sbrk+0x64>)
 800e36a:	4a12      	ldr	r2, [pc, #72]	@ (800e3b4 <_sbrk+0x68>)
 800e36c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e36e:	4b10      	ldr	r3, [pc, #64]	@ (800e3b0 <_sbrk+0x64>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	18d3      	adds	r3, r2, r3
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d207      	bcs.n	800e38c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e37c:	f00a feb0 	bl	80190e0 <__errno>
 800e380:	0003      	movs	r3, r0
 800e382:	220c      	movs	r2, #12
 800e384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e386:	2301      	movs	r3, #1
 800e388:	425b      	negs	r3, r3
 800e38a:	e009      	b.n	800e3a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e38c:	4b08      	ldr	r3, [pc, #32]	@ (800e3b0 <_sbrk+0x64>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e392:	4b07      	ldr	r3, [pc, #28]	@ (800e3b0 <_sbrk+0x64>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	18d2      	adds	r2, r2, r3
 800e39a:	4b05      	ldr	r3, [pc, #20]	@ (800e3b0 <_sbrk+0x64>)
 800e39c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e39e:	68fb      	ldr	r3, [r7, #12]
}
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	b006      	add	sp, #24
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20009000 	.word	0x20009000
 800e3ac:	00000400 	.word	0x00000400
 800e3b0:	20003600 	.word	0x20003600
 800e3b4:	20003790 	.word	0x20003790

0800e3b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e3bc:	46c0      	nop			@ (mov r8, r8)
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e3c4:	480d      	ldr	r0, [pc, #52]	@ (800e3fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e3c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800e3c8:	f7ff fff6 	bl	800e3b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e3cc:	480c      	ldr	r0, [pc, #48]	@ (800e400 <LoopForever+0x6>)
  ldr r1, =_edata
 800e3ce:	490d      	ldr	r1, [pc, #52]	@ (800e404 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e3d0:	4a0d      	ldr	r2, [pc, #52]	@ (800e408 <LoopForever+0xe>)
  movs r3, #0
 800e3d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e3d4:	e002      	b.n	800e3dc <LoopCopyDataInit>

0800e3d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e3d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e3d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e3da:	3304      	adds	r3, #4

0800e3dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e3dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e3de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e3e0:	d3f9      	bcc.n	800e3d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e3e2:	4a0a      	ldr	r2, [pc, #40]	@ (800e40c <LoopForever+0x12>)
  ldr r4, =_ebss
 800e3e4:	4c0a      	ldr	r4, [pc, #40]	@ (800e410 <LoopForever+0x16>)
  movs r3, #0
 800e3e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e3e8:	e001      	b.n	800e3ee <LoopFillZerobss>

0800e3ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e3ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e3ec:	3204      	adds	r2, #4

0800e3ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e3ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e3f0:	d3fb      	bcc.n	800e3ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e3f2:	f00a fe7b 	bl	80190ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800e3f6:	f7f5 ff83 	bl	8004300 <main>

0800e3fa <LoopForever>:

LoopForever:
  b LoopForever
 800e3fa:	e7fe      	b.n	800e3fa <LoopForever>
  ldr   r0, =_estack
 800e3fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800e400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e404:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 800e408:	0801a26c 	.word	0x0801a26c
  ldr r2, =_sbss
 800e40c:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 800e410:	2000378c 	.word	0x2000378c

0800e414 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e414:	e7fe      	b.n	800e414 <ADC1_COMP_IRQHandler>
	...

0800e418 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e41e:	1dfb      	adds	r3, r7, #7
 800e420:	2200      	movs	r2, #0
 800e422:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e424:	4b0b      	ldr	r3, [pc, #44]	@ (800e454 <HAL_Init+0x3c>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	4b0a      	ldr	r3, [pc, #40]	@ (800e454 <HAL_Init+0x3c>)
 800e42a:	2180      	movs	r1, #128	@ 0x80
 800e42c:	0049      	lsls	r1, r1, #1
 800e42e:	430a      	orrs	r2, r1
 800e430:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e432:	2000      	movs	r0, #0
 800e434:	f000 f810 	bl	800e458 <HAL_InitTick>
 800e438:	1e03      	subs	r3, r0, #0
 800e43a:	d003      	beq.n	800e444 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800e43c:	1dfb      	adds	r3, r7, #7
 800e43e:	2201      	movs	r2, #1
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	e001      	b.n	800e448 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800e444:	f7ff faea 	bl	800da1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e448:	1dfb      	adds	r3, r7, #7
 800e44a:	781b      	ldrb	r3, [r3, #0]
}
 800e44c:	0018      	movs	r0, r3
 800e44e:	46bd      	mov	sp, r7
 800e450:	b002      	add	sp, #8
 800e452:	bd80      	pop	{r7, pc}
 800e454:	40022000 	.word	0x40022000

0800e458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e460:	230f      	movs	r3, #15
 800e462:	18fb      	adds	r3, r7, r3
 800e464:	2200      	movs	r2, #0
 800e466:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800e468:	4b1d      	ldr	r3, [pc, #116]	@ (800e4e0 <HAL_InitTick+0x88>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d02b      	beq.n	800e4c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800e470:	4b1c      	ldr	r3, [pc, #112]	@ (800e4e4 <HAL_InitTick+0x8c>)
 800e472:	681c      	ldr	r4, [r3, #0]
 800e474:	4b1a      	ldr	r3, [pc, #104]	@ (800e4e0 <HAL_InitTick+0x88>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	0019      	movs	r1, r3
 800e47a:	23fa      	movs	r3, #250	@ 0xfa
 800e47c:	0098      	lsls	r0, r3, #2
 800e47e:	f7f1 fe53 	bl	8000128 <__udivsi3>
 800e482:	0003      	movs	r3, r0
 800e484:	0019      	movs	r1, r3
 800e486:	0020      	movs	r0, r4
 800e488:	f7f1 fe4e 	bl	8000128 <__udivsi3>
 800e48c:	0003      	movs	r3, r0
 800e48e:	0018      	movs	r0, r3
 800e490:	f000 f953 	bl	800e73a <HAL_SYSTICK_Config>
 800e494:	1e03      	subs	r3, r0, #0
 800e496:	d112      	bne.n	800e4be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d80a      	bhi.n	800e4b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e49e:	6879      	ldr	r1, [r7, #4]
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	425b      	negs	r3, r3
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f000 f922 	bl	800e6f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e4e8 <HAL_InitTick+0x90>)
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	e00d      	b.n	800e4d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800e4b4:	230f      	movs	r3, #15
 800e4b6:	18fb      	adds	r3, r7, r3
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	e008      	b.n	800e4d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800e4be:	230f      	movs	r3, #15
 800e4c0:	18fb      	adds	r3, r7, r3
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	701a      	strb	r2, [r3, #0]
 800e4c6:	e003      	b.n	800e4d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800e4c8:	230f      	movs	r3, #15
 800e4ca:	18fb      	adds	r3, r7, r3
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800e4d0:	230f      	movs	r3, #15
 800e4d2:	18fb      	adds	r3, r7, r3
 800e4d4:	781b      	ldrb	r3, [r3, #0]
}
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	b005      	add	sp, #20
 800e4dc:	bd90      	pop	{r4, r7, pc}
 800e4de:	46c0      	nop			@ (mov r8, r8)
 800e4e0:	20000550 	.word	0x20000550
 800e4e4:	20000548 	.word	0x20000548
 800e4e8:	2000054c 	.word	0x2000054c

0800e4ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e4f0:	4b05      	ldr	r3, [pc, #20]	@ (800e508 <HAL_IncTick+0x1c>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	001a      	movs	r2, r3
 800e4f6:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <HAL_IncTick+0x20>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	18d2      	adds	r2, r2, r3
 800e4fc:	4b03      	ldr	r3, [pc, #12]	@ (800e50c <HAL_IncTick+0x20>)
 800e4fe:	601a      	str	r2, [r3, #0]
}
 800e500:	46c0      	nop			@ (mov r8, r8)
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	46c0      	nop			@ (mov r8, r8)
 800e508:	20000550 	.word	0x20000550
 800e50c:	20003604 	.word	0x20003604

0800e510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	af00      	add	r7, sp, #0
  return uwTick;
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <HAL_GetTick+0x10>)
 800e516:	681b      	ldr	r3, [r3, #0]
}
 800e518:	0018      	movs	r0, r3
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	20003604 	.word	0x20003604

0800e524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e52c:	f7ff fff0 	bl	800e510 <HAL_GetTick>
 800e530:	0003      	movs	r3, r0
 800e532:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	d005      	beq.n	800e54a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e53e:	4b0a      	ldr	r3, [pc, #40]	@ (800e568 <HAL_Delay+0x44>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	001a      	movs	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	189b      	adds	r3, r3, r2
 800e548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e54a:	46c0      	nop			@ (mov r8, r8)
 800e54c:	f7ff ffe0 	bl	800e510 <HAL_GetTick>
 800e550:	0002      	movs	r2, r0
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d8f7      	bhi.n	800e54c <HAL_Delay+0x28>
  {
  }
}
 800e55c:	46c0      	nop			@ (mov r8, r8)
 800e55e:	46c0      	nop			@ (mov r8, r8)
 800e560:	46bd      	mov	sp, r7
 800e562:	b004      	add	sp, #16
 800e564:	bd80      	pop	{r7, pc}
 800e566:	46c0      	nop			@ (mov r8, r8)
 800e568:	20000550 	.word	0x20000550

0800e56c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800e574:	4b06      	ldr	r3, [pc, #24]	@ (800e590 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a06      	ldr	r2, [pc, #24]	@ (800e594 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800e57a:	4013      	ands	r3, r2
 800e57c:	0019      	movs	r1, r3
 800e57e:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	430a      	orrs	r2, r1
 800e584:	601a      	str	r2, [r3, #0]
}
 800e586:	46c0      	nop			@ (mov r8, r8)
 800e588:	46bd      	mov	sp, r7
 800e58a:	b002      	add	sp, #8
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	46c0      	nop			@ (mov r8, r8)
 800e590:	40010000 	.word	0x40010000
 800e594:	fffff9ff 	.word	0xfffff9ff

0800e598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	0002      	movs	r2, r0
 800e5a0:	1dfb      	adds	r3, r7, #7
 800e5a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e5a4:	1dfb      	adds	r3, r7, #7
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5aa:	d809      	bhi.n	800e5c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e5ac:	1dfb      	adds	r3, r7, #7
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	001a      	movs	r2, r3
 800e5b2:	231f      	movs	r3, #31
 800e5b4:	401a      	ands	r2, r3
 800e5b6:	4b04      	ldr	r3, [pc, #16]	@ (800e5c8 <__NVIC_EnableIRQ+0x30>)
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	4091      	lsls	r1, r2
 800e5bc:	000a      	movs	r2, r1
 800e5be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800e5c0:	46c0      	nop			@ (mov r8, r8)
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	b002      	add	sp, #8
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	e000e100 	.word	0xe000e100

0800e5cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e5cc:	b590      	push	{r4, r7, lr}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	0002      	movs	r2, r0
 800e5d4:	6039      	str	r1, [r7, #0]
 800e5d6:	1dfb      	adds	r3, r7, #7
 800e5d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e5da:	1dfb      	adds	r3, r7, #7
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5e0:	d828      	bhi.n	800e634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e5e2:	4a2f      	ldr	r2, [pc, #188]	@ (800e6a0 <__NVIC_SetPriority+0xd4>)
 800e5e4:	1dfb      	adds	r3, r7, #7
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	b25b      	sxtb	r3, r3
 800e5ea:	089b      	lsrs	r3, r3, #2
 800e5ec:	33c0      	adds	r3, #192	@ 0xc0
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	589b      	ldr	r3, [r3, r2]
 800e5f2:	1dfa      	adds	r2, r7, #7
 800e5f4:	7812      	ldrb	r2, [r2, #0]
 800e5f6:	0011      	movs	r1, r2
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	400a      	ands	r2, r1
 800e5fc:	00d2      	lsls	r2, r2, #3
 800e5fe:	21ff      	movs	r1, #255	@ 0xff
 800e600:	4091      	lsls	r1, r2
 800e602:	000a      	movs	r2, r1
 800e604:	43d2      	mvns	r2, r2
 800e606:	401a      	ands	r2, r3
 800e608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	019b      	lsls	r3, r3, #6
 800e60e:	22ff      	movs	r2, #255	@ 0xff
 800e610:	401a      	ands	r2, r3
 800e612:	1dfb      	adds	r3, r7, #7
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	0018      	movs	r0, r3
 800e618:	2303      	movs	r3, #3
 800e61a:	4003      	ands	r3, r0
 800e61c:	00db      	lsls	r3, r3, #3
 800e61e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e620:	481f      	ldr	r0, [pc, #124]	@ (800e6a0 <__NVIC_SetPriority+0xd4>)
 800e622:	1dfb      	adds	r3, r7, #7
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	b25b      	sxtb	r3, r3
 800e628:	089b      	lsrs	r3, r3, #2
 800e62a:	430a      	orrs	r2, r1
 800e62c:	33c0      	adds	r3, #192	@ 0xc0
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e632:	e031      	b.n	800e698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e634:	4a1b      	ldr	r2, [pc, #108]	@ (800e6a4 <__NVIC_SetPriority+0xd8>)
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	0019      	movs	r1, r3
 800e63c:	230f      	movs	r3, #15
 800e63e:	400b      	ands	r3, r1
 800e640:	3b08      	subs	r3, #8
 800e642:	089b      	lsrs	r3, r3, #2
 800e644:	3306      	adds	r3, #6
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	18d3      	adds	r3, r2, r3
 800e64a:	3304      	adds	r3, #4
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	1dfa      	adds	r2, r7, #7
 800e650:	7812      	ldrb	r2, [r2, #0]
 800e652:	0011      	movs	r1, r2
 800e654:	2203      	movs	r2, #3
 800e656:	400a      	ands	r2, r1
 800e658:	00d2      	lsls	r2, r2, #3
 800e65a:	21ff      	movs	r1, #255	@ 0xff
 800e65c:	4091      	lsls	r1, r2
 800e65e:	000a      	movs	r2, r1
 800e660:	43d2      	mvns	r2, r2
 800e662:	401a      	ands	r2, r3
 800e664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	019b      	lsls	r3, r3, #6
 800e66a:	22ff      	movs	r2, #255	@ 0xff
 800e66c:	401a      	ands	r2, r3
 800e66e:	1dfb      	adds	r3, r7, #7
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	0018      	movs	r0, r3
 800e674:	2303      	movs	r3, #3
 800e676:	4003      	ands	r3, r0
 800e678:	00db      	lsls	r3, r3, #3
 800e67a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e67c:	4809      	ldr	r0, [pc, #36]	@ (800e6a4 <__NVIC_SetPriority+0xd8>)
 800e67e:	1dfb      	adds	r3, r7, #7
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	001c      	movs	r4, r3
 800e684:	230f      	movs	r3, #15
 800e686:	4023      	ands	r3, r4
 800e688:	3b08      	subs	r3, #8
 800e68a:	089b      	lsrs	r3, r3, #2
 800e68c:	430a      	orrs	r2, r1
 800e68e:	3306      	adds	r3, #6
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	18c3      	adds	r3, r0, r3
 800e694:	3304      	adds	r3, #4
 800e696:	601a      	str	r2, [r3, #0]
}
 800e698:	46c0      	nop			@ (mov r8, r8)
 800e69a:	46bd      	mov	sp, r7
 800e69c:	b003      	add	sp, #12
 800e69e:	bd90      	pop	{r4, r7, pc}
 800e6a0:	e000e100 	.word	0xe000e100
 800e6a4:	e000ed00 	.word	0xe000ed00

0800e6a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	1e5a      	subs	r2, r3, #1
 800e6b4:	2380      	movs	r3, #128	@ 0x80
 800e6b6:	045b      	lsls	r3, r3, #17
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d301      	bcc.n	800e6c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e010      	b.n	800e6e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6ec <SysTick_Config+0x44>)
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	3a01      	subs	r2, #1
 800e6c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	425b      	negs	r3, r3
 800e6cc:	2103      	movs	r1, #3
 800e6ce:	0018      	movs	r0, r3
 800e6d0:	f7ff ff7c 	bl	800e5cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e6d4:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <SysTick_Config+0x44>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e6da:	4b04      	ldr	r3, [pc, #16]	@ (800e6ec <SysTick_Config+0x44>)
 800e6dc:	2207      	movs	r2, #7
 800e6de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	0018      	movs	r0, r3
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	b002      	add	sp, #8
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	46c0      	nop			@ (mov r8, r8)
 800e6ec:	e000e010 	.word	0xe000e010

0800e6f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60b9      	str	r1, [r7, #8]
 800e6f8:	607a      	str	r2, [r7, #4]
 800e6fa:	210f      	movs	r1, #15
 800e6fc:	187b      	adds	r3, r7, r1
 800e6fe:	1c02      	adds	r2, r0, #0
 800e700:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	187b      	adds	r3, r7, r1
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	b25b      	sxtb	r3, r3
 800e70a:	0011      	movs	r1, r2
 800e70c:	0018      	movs	r0, r3
 800e70e:	f7ff ff5d 	bl	800e5cc <__NVIC_SetPriority>
}
 800e712:	46c0      	nop			@ (mov r8, r8)
 800e714:	46bd      	mov	sp, r7
 800e716:	b004      	add	sp, #16
 800e718:	bd80      	pop	{r7, pc}

0800e71a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b082      	sub	sp, #8
 800e71e:	af00      	add	r7, sp, #0
 800e720:	0002      	movs	r2, r0
 800e722:	1dfb      	adds	r3, r7, #7
 800e724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e726:	1dfb      	adds	r3, r7, #7
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	b25b      	sxtb	r3, r3
 800e72c:	0018      	movs	r0, r3
 800e72e:	f7ff ff33 	bl	800e598 <__NVIC_EnableIRQ>
}
 800e732:	46c0      	nop			@ (mov r8, r8)
 800e734:	46bd      	mov	sp, r7
 800e736:	b002      	add	sp, #8
 800e738:	bd80      	pop	{r7, pc}

0800e73a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b082      	sub	sp, #8
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	0018      	movs	r0, r3
 800e746:	f7ff ffaf 	bl	800e6a8 <SysTick_Config>
 800e74a:	0003      	movs	r3, r0
}
 800e74c:	0018      	movs	r0, r3
 800e74e:	46bd      	mov	sp, r7
 800e750:	b002      	add	sp, #8
 800e752:	bd80      	pop	{r7, pc}

0800e754 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e077      	b.n	800e856 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a3d      	ldr	r2, [pc, #244]	@ (800e860 <HAL_DMA_Init+0x10c>)
 800e76c:	4694      	mov	ip, r2
 800e76e:	4463      	add	r3, ip
 800e770:	2114      	movs	r1, #20
 800e772:	0018      	movs	r0, r3
 800e774:	f7f1 fcd8 	bl	8000128 <__udivsi3>
 800e778:	0003      	movs	r3, r0
 800e77a:	009a      	lsls	r2, r3, #2
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2225      	movs	r2, #37	@ 0x25
 800e784:	2102      	movs	r1, #2
 800e786:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4934      	ldr	r1, [pc, #208]	@ (800e864 <HAL_DMA_Init+0x110>)
 800e794:	400a      	ands	r2, r1
 800e796:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6819      	ldr	r1, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	689a      	ldr	r2, [r3, #8]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	431a      	orrs	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	691b      	ldr	r3, [r3, #16]
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	431a      	orrs	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a1b      	ldr	r3, [r3, #32]
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	0018      	movs	r0, r3
 800e7d2:	f000 faa3 	bl	800ed1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	2380      	movs	r3, #128	@ 0x80
 800e7dc:	01db      	lsls	r3, r3, #7
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d102      	bne.n	800e7e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7f0:	213f      	movs	r1, #63	@ 0x3f
 800e7f2:	400a      	ands	r2, r1
 800e7f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800e7fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d011      	beq.n	800e82c <HAL_DMA_Init+0xd8>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2b04      	cmp	r3, #4
 800e80e:	d80d      	bhi.n	800e82c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	0018      	movs	r0, r3
 800e814:	f000 faae 	bl	800ed74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800e828:	605a      	str	r2, [r3, #4]
 800e82a:	e008      	b.n	800e83e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2225      	movs	r2, #37	@ 0x25
 800e848:	2101      	movs	r1, #1
 800e84a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2224      	movs	r2, #36	@ 0x24
 800e850:	2100      	movs	r1, #0
 800e852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	0018      	movs	r0, r3
 800e858:	46bd      	mov	sp, r7
 800e85a:	b002      	add	sp, #8
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	46c0      	nop			@ (mov r8, r8)
 800e860:	bffdfff8 	.word	0xbffdfff8
 800e864:	ffff800f 	.word	0xffff800f

0800e868 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e876:	2317      	movs	r3, #23
 800e878:	18fb      	adds	r3, r7, r3
 800e87a:	2200      	movs	r2, #0
 800e87c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2224      	movs	r2, #36	@ 0x24
 800e882:	5c9b      	ldrb	r3, [r3, r2]
 800e884:	2b01      	cmp	r3, #1
 800e886:	d101      	bne.n	800e88c <HAL_DMA_Start_IT+0x24>
 800e888:	2302      	movs	r3, #2
 800e88a:	e06f      	b.n	800e96c <HAL_DMA_Start_IT+0x104>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2224      	movs	r2, #36	@ 0x24
 800e890:	2101      	movs	r1, #1
 800e892:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2225      	movs	r2, #37	@ 0x25
 800e898:	5c9b      	ldrb	r3, [r3, r2]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d157      	bne.n	800e950 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2225      	movs	r2, #37	@ 0x25
 800e8a4:	2102      	movs	r1, #2
 800e8a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	438a      	bics	r2, r1
 800e8bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f000 f9e9 	bl	800ec9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d008      	beq.n	800e8e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	210e      	movs	r1, #14
 800e8de:	430a      	orrs	r2, r1
 800e8e0:	601a      	str	r2, [r3, #0]
 800e8e2:	e00f      	b.n	800e904 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2104      	movs	r1, #4
 800e8f0:	438a      	bics	r2, r1
 800e8f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	210a      	movs	r1, #10
 800e900:	430a      	orrs	r2, r1
 800e902:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	2380      	movs	r3, #128	@ 0x80
 800e90c:	025b      	lsls	r3, r3, #9
 800e90e:	4013      	ands	r3, r2
 800e910:	d008      	beq.n	800e924 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e91c:	2180      	movs	r1, #128	@ 0x80
 800e91e:	0049      	lsls	r1, r1, #1
 800e920:	430a      	orrs	r2, r1
 800e922:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d008      	beq.n	800e93e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e936:	2180      	movs	r1, #128	@ 0x80
 800e938:	0049      	lsls	r1, r1, #1
 800e93a:	430a      	orrs	r2, r1
 800e93c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2101      	movs	r1, #1
 800e94a:	430a      	orrs	r2, r1
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e00a      	b.n	800e966 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2280      	movs	r2, #128	@ 0x80
 800e954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2224      	movs	r2, #36	@ 0x24
 800e95a:	2100      	movs	r1, #0
 800e95c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800e95e:	2317      	movs	r3, #23
 800e960:	18fb      	adds	r3, r7, r3
 800e962:	2201      	movs	r2, #1
 800e964:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800e966:	2317      	movs	r3, #23
 800e968:	18fb      	adds	r3, r7, r3
 800e96a:	781b      	ldrb	r3, [r3, #0]
}
 800e96c:	0018      	movs	r0, r3
 800e96e:	46bd      	mov	sp, r7
 800e970:	b006      	add	sp, #24
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e050      	b.n	800ea28 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2225      	movs	r2, #37	@ 0x25
 800e98a:	5c9b      	ldrb	r3, [r3, r2]
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d008      	beq.n	800e9a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2204      	movs	r2, #4
 800e996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2224      	movs	r2, #36	@ 0x24
 800e99c:	2100      	movs	r1, #0
 800e99e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e041      	b.n	800ea28 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	210e      	movs	r1, #14
 800e9b0:	438a      	bics	r2, r1
 800e9b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9be:	491c      	ldr	r1, [pc, #112]	@ (800ea30 <HAL_DMA_Abort+0xbc>)
 800e9c0:	400a      	ands	r2, r1
 800e9c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	438a      	bics	r2, r1
 800e9d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800e9d4:	4b17      	ldr	r3, [pc, #92]	@ (800ea34 <HAL_DMA_Abort+0xc0>)
 800e9d6:	6859      	ldr	r1, [r3, #4]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9dc:	221c      	movs	r2, #28
 800e9de:	4013      	ands	r3, r2
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	409a      	lsls	r2, r3
 800e9e4:	4b13      	ldr	r3, [pc, #76]	@ (800ea34 <HAL_DMA_Abort+0xc0>)
 800e9e6:	430a      	orrs	r2, r1
 800e9e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800e9f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00c      	beq.n	800ea16 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea06:	490a      	ldr	r1, [pc, #40]	@ (800ea30 <HAL_DMA_Abort+0xbc>)
 800ea08:	400a      	ands	r2, r1
 800ea0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ea14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2225      	movs	r2, #37	@ 0x25
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2224      	movs	r2, #36	@ 0x24
 800ea22:	2100      	movs	r1, #0
 800ea24:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	0018      	movs	r0, r3
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	b002      	add	sp, #8
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	fffffeff 	.word	0xfffffeff
 800ea34:	40020000 	.word	0x40020000

0800ea38 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea40:	210f      	movs	r1, #15
 800ea42:	187b      	adds	r3, r7, r1
 800ea44:	2200      	movs	r2, #0
 800ea46:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2225      	movs	r2, #37	@ 0x25
 800ea4c:	5c9b      	ldrb	r3, [r3, r2]
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d006      	beq.n	800ea62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2204      	movs	r2, #4
 800ea58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ea5a:	187b      	adds	r3, r7, r1
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	701a      	strb	r2, [r3, #0]
 800ea60:	e049      	b.n	800eaf6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	210e      	movs	r1, #14
 800ea6e:	438a      	bics	r2, r1
 800ea70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	438a      	bics	r2, r1
 800ea80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea8c:	491d      	ldr	r1, [pc, #116]	@ (800eb04 <HAL_DMA_Abort_IT+0xcc>)
 800ea8e:	400a      	ands	r2, r1
 800ea90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800ea92:	4b1d      	ldr	r3, [pc, #116]	@ (800eb08 <HAL_DMA_Abort_IT+0xd0>)
 800ea94:	6859      	ldr	r1, [r3, #4]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea9a:	221c      	movs	r2, #28
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	409a      	lsls	r2, r3
 800eaa2:	4b19      	ldr	r3, [pc, #100]	@ (800eb08 <HAL_DMA_Abort_IT+0xd0>)
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800eab0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00c      	beq.n	800ead4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eac4:	490f      	ldr	r1, [pc, #60]	@ (800eb04 <HAL_DMA_Abort_IT+0xcc>)
 800eac6:	400a      	ands	r2, r1
 800eac8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ead2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2225      	movs	r2, #37	@ 0x25
 800ead8:	2101      	movs	r1, #1
 800eada:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2224      	movs	r2, #36	@ 0x24
 800eae0:	2100      	movs	r1, #0
 800eae2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	0010      	movs	r0, r2
 800eaf4:	4798      	blx	r3
    }
  }
  return status;
 800eaf6:	230f      	movs	r3, #15
 800eaf8:	18fb      	adds	r3, r7, r3
 800eafa:	781b      	ldrb	r3, [r3, #0]
}
 800eafc:	0018      	movs	r0, r3
 800eafe:	46bd      	mov	sp, r7
 800eb00:	b004      	add	sp, #16
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	fffffeff 	.word	0xfffffeff
 800eb08:	40020000 	.word	0x40020000

0800eb0c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800eb14:	4b55      	ldr	r3, [pc, #340]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb26:	221c      	movs	r2, #28
 800eb28:	4013      	ands	r3, r2
 800eb2a:	2204      	movs	r2, #4
 800eb2c:	409a      	lsls	r2, r3
 800eb2e:	0013      	movs	r3, r2
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4013      	ands	r3, r2
 800eb34:	d027      	beq.n	800eb86 <HAL_DMA_IRQHandler+0x7a>
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2204      	movs	r2, #4
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	d023      	beq.n	800eb86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2220      	movs	r2, #32
 800eb46:	4013      	ands	r3, r2
 800eb48:	d107      	bne.n	800eb5a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2104      	movs	r1, #4
 800eb56:	438a      	bics	r2, r1
 800eb58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800eb5a:	4b44      	ldr	r3, [pc, #272]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800eb5c:	6859      	ldr	r1, [r3, #4]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb62:	221c      	movs	r2, #28
 800eb64:	4013      	ands	r3, r2
 800eb66:	2204      	movs	r2, #4
 800eb68:	409a      	lsls	r2, r3
 800eb6a:	4b40      	ldr	r3, [pc, #256]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800eb6c:	430a      	orrs	r2, r1
 800eb6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d100      	bne.n	800eb7a <HAL_DMA_IRQHandler+0x6e>
 800eb78:	e073      	b.n	800ec62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	0010      	movs	r0, r2
 800eb82:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800eb84:	e06d      	b.n	800ec62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb8a:	221c      	movs	r2, #28
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	2202      	movs	r2, #2
 800eb90:	409a      	lsls	r2, r3
 800eb92:	0013      	movs	r3, r2
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4013      	ands	r3, r2
 800eb98:	d02e      	beq.n	800ebf8 <HAL_DMA_IRQHandler+0xec>
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	4013      	ands	r3, r2
 800eba0:	d02a      	beq.n	800ebf8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2220      	movs	r2, #32
 800ebaa:	4013      	ands	r3, r2
 800ebac:	d10b      	bne.n	800ebc6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	210a      	movs	r1, #10
 800ebba:	438a      	bics	r2, r1
 800ebbc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2225      	movs	r2, #37	@ 0x25
 800ebc2:	2101      	movs	r1, #1
 800ebc4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800ebc6:	4b29      	ldr	r3, [pc, #164]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800ebc8:	6859      	ldr	r1, [r3, #4]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebce:	221c      	movs	r2, #28
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	409a      	lsls	r2, r3
 800ebd6:	4b25      	ldr	r3, [pc, #148]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2224      	movs	r2, #36	@ 0x24
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d03a      	beq.n	800ec62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	0010      	movs	r0, r2
 800ebf4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800ebf6:	e034      	b.n	800ec62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebfc:	221c      	movs	r2, #28
 800ebfe:	4013      	ands	r3, r2
 800ec00:	2208      	movs	r2, #8
 800ec02:	409a      	lsls	r2, r3
 800ec04:	0013      	movs	r3, r2
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	d02b      	beq.n	800ec64 <HAL_DMA_IRQHandler+0x158>
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2208      	movs	r2, #8
 800ec10:	4013      	ands	r3, r2
 800ec12:	d027      	beq.n	800ec64 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	210e      	movs	r1, #14
 800ec20:	438a      	bics	r2, r1
 800ec22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800ec24:	4b11      	ldr	r3, [pc, #68]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800ec26:	6859      	ldr	r1, [r3, #4]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec2c:	221c      	movs	r2, #28
 800ec2e:	4013      	ands	r3, r2
 800ec30:	2201      	movs	r2, #1
 800ec32:	409a      	lsls	r2, r3
 800ec34:	4b0d      	ldr	r3, [pc, #52]	@ (800ec6c <HAL_DMA_IRQHandler+0x160>)
 800ec36:	430a      	orrs	r2, r1
 800ec38:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2225      	movs	r2, #37	@ 0x25
 800ec44:	2101      	movs	r1, #1
 800ec46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2224      	movs	r2, #36	@ 0x24
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d005      	beq.n	800ec64 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	0010      	movs	r0, r2
 800ec60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ec62:	46c0      	nop			@ (mov r8, r8)
 800ec64:	46c0      	nop			@ (mov r8, r8)
}
 800ec66:	46bd      	mov	sp, r7
 800ec68:	b004      	add	sp, #16
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	40020000 	.word	0x40020000

0800ec70 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2225      	movs	r2, #37	@ 0x25
 800ec7c:	5c9b      	ldrb	r3, [r3, r2]
 800ec7e:	b2db      	uxtb	r3, r3
}
 800ec80:	0018      	movs	r0, r3
 800ec82:	46bd      	mov	sp, r7
 800ec84:	b002      	add	sp, #8
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800ec94:	0018      	movs	r0, r3
 800ec96:	46bd      	mov	sp, r7
 800ec98:	b002      	add	sp, #8
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ecb2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d004      	beq.n	800ecc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ecc4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800ecc6:	4b14      	ldr	r3, [pc, #80]	@ (800ed18 <DMA_SetConfig+0x7c>)
 800ecc8:	6859      	ldr	r1, [r3, #4]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecce:	221c      	movs	r2, #28
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	409a      	lsls	r2, r3
 800ecd6:	4b10      	ldr	r3, [pc, #64]	@ (800ed18 <DMA_SetConfig+0x7c>)
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	2b10      	cmp	r3, #16
 800ecea:	d108      	bne.n	800ecfe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ecfc:	e007      	b.n	800ed0e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	60da      	str	r2, [r3, #12]
}
 800ed0e:	46c0      	nop			@ (mov r8, r8)
 800ed10:	46bd      	mov	sp, r7
 800ed12:	b004      	add	sp, #16
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	46c0      	nop			@ (mov r8, r8)
 800ed18:	40020000 	.word	0x40020000

0800ed1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed28:	089b      	lsrs	r3, r3, #2
 800ed2a:	4a10      	ldr	r2, [pc, #64]	@ (800ed6c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800ed2c:	4694      	mov	ip, r2
 800ed2e:	4463      	add	r3, ip
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	001a      	movs	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	001a      	movs	r2, r3
 800ed3e:	23ff      	movs	r3, #255	@ 0xff
 800ed40:	4013      	ands	r3, r2
 800ed42:	3b08      	subs	r3, #8
 800ed44:	2114      	movs	r1, #20
 800ed46:	0018      	movs	r0, r3
 800ed48:	f7f1 f9ee 	bl	8000128 <__udivsi3>
 800ed4c:	0003      	movs	r3, r0
 800ed4e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a07      	ldr	r2, [pc, #28]	@ (800ed70 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800ed54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	221f      	movs	r2, #31
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	409a      	lsls	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800ed64:	46c0      	nop			@ (mov r8, r8)
 800ed66:	46bd      	mov	sp, r7
 800ed68:	b004      	add	sp, #16
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	10008200 	.word	0x10008200
 800ed70:	40020880 	.word	0x40020880

0800ed74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	223f      	movs	r2, #63	@ 0x3f
 800ed82:	4013      	ands	r3, r2
 800ed84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	4a0a      	ldr	r2, [pc, #40]	@ (800edb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ed8a:	4694      	mov	ip, r2
 800ed8c:	4463      	add	r3, ip
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	001a      	movs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4a07      	ldr	r2, [pc, #28]	@ (800edb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ed9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	2203      	movs	r2, #3
 800eda2:	4013      	ands	r3, r2
 800eda4:	2201      	movs	r2, #1
 800eda6:	409a      	lsls	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800edac:	46c0      	nop			@ (mov r8, r8)
 800edae:	46bd      	mov	sp, r7
 800edb0:	b004      	add	sp, #16
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	1000823f 	.word	0x1000823f
 800edb8:	40020940 	.word	0x40020940

0800edbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800edca:	e147      	b.n	800f05c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2101      	movs	r1, #1
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	4091      	lsls	r1, r2
 800edd6:	000a      	movs	r2, r1
 800edd8:	4013      	ands	r3, r2
 800edda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d100      	bne.n	800ede4 <HAL_GPIO_Init+0x28>
 800ede2:	e138      	b.n	800f056 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	2203      	movs	r2, #3
 800edea:	4013      	ands	r3, r2
 800edec:	2b01      	cmp	r3, #1
 800edee:	d005      	beq.n	800edfc <HAL_GPIO_Init+0x40>
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	2203      	movs	r2, #3
 800edf6:	4013      	ands	r3, r2
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d130      	bne.n	800ee5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	2203      	movs	r2, #3
 800ee08:	409a      	lsls	r2, r3
 800ee0a:	0013      	movs	r3, r2
 800ee0c:	43da      	mvns	r2, r3
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	4013      	ands	r3, r2
 800ee12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	68da      	ldr	r2, [r3, #12]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	409a      	lsls	r2, r3
 800ee1e:	0013      	movs	r3, r2
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ee32:	2201      	movs	r2, #1
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	409a      	lsls	r2, r3
 800ee38:	0013      	movs	r3, r2
 800ee3a:	43da      	mvns	r2, r3
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	4013      	ands	r3, r2
 800ee40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	091b      	lsrs	r3, r3, #4
 800ee48:	2201      	movs	r2, #1
 800ee4a:	401a      	ands	r2, r3
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	409a      	lsls	r2, r3
 800ee50:	0013      	movs	r3, r2
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	4313      	orrs	r3, r2
 800ee56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	693a      	ldr	r2, [r7, #16]
 800ee5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	2203      	movs	r2, #3
 800ee64:	4013      	ands	r3, r2
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d017      	beq.n	800ee9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	2203      	movs	r2, #3
 800ee76:	409a      	lsls	r2, r3
 800ee78:	0013      	movs	r3, r2
 800ee7a:	43da      	mvns	r2, r3
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	4013      	ands	r3, r2
 800ee80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	689a      	ldr	r2, [r3, #8]
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	409a      	lsls	r2, r3
 800ee8c:	0013      	movs	r3, r2
 800ee8e:	693a      	ldr	r2, [r7, #16]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2203      	movs	r2, #3
 800eea0:	4013      	ands	r3, r2
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	d123      	bne.n	800eeee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	08da      	lsrs	r2, r3, #3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3208      	adds	r2, #8
 800eeae:	0092      	lsls	r2, r2, #2
 800eeb0:	58d3      	ldr	r3, [r2, r3]
 800eeb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2207      	movs	r2, #7
 800eeb8:	4013      	ands	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	220f      	movs	r2, #15
 800eebe:	409a      	lsls	r2, r3
 800eec0:	0013      	movs	r3, r2
 800eec2:	43da      	mvns	r2, r3
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	4013      	ands	r3, r2
 800eec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	691a      	ldr	r2, [r3, #16]
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2107      	movs	r1, #7
 800eed2:	400b      	ands	r3, r1
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	409a      	lsls	r2, r3
 800eed8:	0013      	movs	r3, r2
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	4313      	orrs	r3, r2
 800eede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	08da      	lsrs	r2, r3, #3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3208      	adds	r2, #8
 800eee8:	0092      	lsls	r2, r2, #2
 800eeea:	6939      	ldr	r1, [r7, #16]
 800eeec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	005b      	lsls	r3, r3, #1
 800eef8:	2203      	movs	r2, #3
 800eefa:	409a      	lsls	r2, r3
 800eefc:	0013      	movs	r3, r2
 800eefe:	43da      	mvns	r2, r3
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	4013      	ands	r3, r2
 800ef04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	2203      	movs	r2, #3
 800ef0c:	401a      	ands	r2, r3
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	409a      	lsls	r2, r3
 800ef14:	0013      	movs	r3, r2
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	693a      	ldr	r2, [r7, #16]
 800ef20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	23c0      	movs	r3, #192	@ 0xc0
 800ef28:	029b      	lsls	r3, r3, #10
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	d100      	bne.n	800ef30 <HAL_GPIO_Init+0x174>
 800ef2e:	e092      	b.n	800f056 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800ef30:	4a50      	ldr	r2, [pc, #320]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	089b      	lsrs	r3, r3, #2
 800ef36:	3318      	adds	r3, #24
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	589b      	ldr	r3, [r3, r2]
 800ef3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2203      	movs	r2, #3
 800ef42:	4013      	ands	r3, r2
 800ef44:	00db      	lsls	r3, r3, #3
 800ef46:	220f      	movs	r2, #15
 800ef48:	409a      	lsls	r2, r3
 800ef4a:	0013      	movs	r3, r2
 800ef4c:	43da      	mvns	r2, r3
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	4013      	ands	r3, r2
 800ef52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	23a0      	movs	r3, #160	@ 0xa0
 800ef58:	05db      	lsls	r3, r3, #23
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d013      	beq.n	800ef86 <HAL_GPIO_Init+0x1ca>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a45      	ldr	r2, [pc, #276]	@ (800f078 <HAL_GPIO_Init+0x2bc>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d00d      	beq.n	800ef82 <HAL_GPIO_Init+0x1c6>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a44      	ldr	r2, [pc, #272]	@ (800f07c <HAL_GPIO_Init+0x2c0>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d007      	beq.n	800ef7e <HAL_GPIO_Init+0x1c2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a43      	ldr	r2, [pc, #268]	@ (800f080 <HAL_GPIO_Init+0x2c4>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d101      	bne.n	800ef7a <HAL_GPIO_Init+0x1be>
 800ef76:	2303      	movs	r3, #3
 800ef78:	e006      	b.n	800ef88 <HAL_GPIO_Init+0x1cc>
 800ef7a:	2305      	movs	r3, #5
 800ef7c:	e004      	b.n	800ef88 <HAL_GPIO_Init+0x1cc>
 800ef7e:	2302      	movs	r3, #2
 800ef80:	e002      	b.n	800ef88 <HAL_GPIO_Init+0x1cc>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <HAL_GPIO_Init+0x1cc>
 800ef86:	2300      	movs	r3, #0
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	2103      	movs	r1, #3
 800ef8c:	400a      	ands	r2, r1
 800ef8e:	00d2      	lsls	r2, r2, #3
 800ef90:	4093      	lsls	r3, r2
 800ef92:	693a      	ldr	r2, [r7, #16]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800ef98:	4936      	ldr	r1, [pc, #216]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	089b      	lsrs	r3, r3, #2
 800ef9e:	3318      	adds	r3, #24
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	693a      	ldr	r2, [r7, #16]
 800efa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800efa6:	4b33      	ldr	r3, [pc, #204]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	43da      	mvns	r2, r3
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4013      	ands	r3, r2
 800efb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	2380      	movs	r3, #128	@ 0x80
 800efbc:	035b      	lsls	r3, r3, #13
 800efbe:	4013      	ands	r3, r2
 800efc0:	d003      	beq.n	800efca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800efc2:	693a      	ldr	r2, [r7, #16]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800efca:	4b2a      	ldr	r3, [pc, #168]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800efd0:	4b28      	ldr	r3, [pc, #160]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	43da      	mvns	r2, r3
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	4013      	ands	r3, r2
 800efde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	685a      	ldr	r2, [r3, #4]
 800efe4:	2380      	movs	r3, #128	@ 0x80
 800efe6:	039b      	lsls	r3, r3, #14
 800efe8:	4013      	ands	r3, r2
 800efea:	d003      	beq.n	800eff4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800efec:	693a      	ldr	r2, [r7, #16]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800eff4:	4b1f      	ldr	r3, [pc, #124]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800effa:	4a1e      	ldr	r2, [pc, #120]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800effc:	2384      	movs	r3, #132	@ 0x84
 800effe:	58d3      	ldr	r3, [r2, r3]
 800f000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	43da      	mvns	r2, r3
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	4013      	ands	r3, r2
 800f00a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	685a      	ldr	r2, [r3, #4]
 800f010:	2380      	movs	r3, #128	@ 0x80
 800f012:	029b      	lsls	r3, r3, #10
 800f014:	4013      	ands	r3, r2
 800f016:	d003      	beq.n	800f020 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f020:	4914      	ldr	r1, [pc, #80]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800f022:	2284      	movs	r2, #132	@ 0x84
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800f028:	4a12      	ldr	r2, [pc, #72]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800f02a:	2380      	movs	r3, #128	@ 0x80
 800f02c:	58d3      	ldr	r3, [r2, r3]
 800f02e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	43da      	mvns	r2, r3
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	4013      	ands	r3, r2
 800f038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	2380      	movs	r3, #128	@ 0x80
 800f040:	025b      	lsls	r3, r3, #9
 800f042:	4013      	ands	r3, r2
 800f044:	d003      	beq.n	800f04e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f04e:	4909      	ldr	r1, [pc, #36]	@ (800f074 <HAL_GPIO_Init+0x2b8>)
 800f050:	2280      	movs	r2, #128	@ 0x80
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	3301      	adds	r3, #1
 800f05a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	40da      	lsrs	r2, r3
 800f064:	1e13      	subs	r3, r2, #0
 800f066:	d000      	beq.n	800f06a <HAL_GPIO_Init+0x2ae>
 800f068:	e6b0      	b.n	800edcc <HAL_GPIO_Init+0x10>
  }
}
 800f06a:	46c0      	nop			@ (mov r8, r8)
 800f06c:	46c0      	nop			@ (mov r8, r8)
 800f06e:	46bd      	mov	sp, r7
 800f070:	b006      	add	sp, #24
 800f072:	bd80      	pop	{r7, pc}
 800f074:	40021800 	.word	0x40021800
 800f078:	50000400 	.word	0x50000400
 800f07c:	50000800 	.word	0x50000800
 800f080:	50000c00 	.word	0x50000c00

0800f084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	000a      	movs	r2, r1
 800f08e:	1cbb      	adds	r3, r7, #2
 800f090:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	1cba      	adds	r2, r7, #2
 800f098:	8812      	ldrh	r2, [r2, #0]
 800f09a:	4013      	ands	r3, r2
 800f09c:	d004      	beq.n	800f0a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f09e:	230f      	movs	r3, #15
 800f0a0:	18fb      	adds	r3, r7, r3
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	e003      	b.n	800f0b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f0a8:	230f      	movs	r3, #15
 800f0aa:	18fb      	adds	r3, r7, r3
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f0b0:	230f      	movs	r3, #15
 800f0b2:	18fb      	adds	r3, r7, r3
 800f0b4:	781b      	ldrb	r3, [r3, #0]
}
 800f0b6:	0018      	movs	r0, r3
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	b004      	add	sp, #16
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	0008      	movs	r0, r1
 800f0c8:	0011      	movs	r1, r2
 800f0ca:	1cbb      	adds	r3, r7, #2
 800f0cc:	1c02      	adds	r2, r0, #0
 800f0ce:	801a      	strh	r2, [r3, #0]
 800f0d0:	1c7b      	adds	r3, r7, #1
 800f0d2:	1c0a      	adds	r2, r1, #0
 800f0d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f0d6:	1c7b      	adds	r3, r7, #1
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d004      	beq.n	800f0e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f0de:	1cbb      	adds	r3, r7, #2
 800f0e0:	881a      	ldrh	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f0e6:	e003      	b.n	800f0f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f0e8:	1cbb      	adds	r3, r7, #2
 800f0ea:	881a      	ldrh	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f0f0:	46c0      	nop			@ (mov r8, r8)
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	b002      	add	sp, #8
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d101      	bne.n	800f10a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f106:	2301      	movs	r3, #1
 800f108:	e082      	b.n	800f210 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2241      	movs	r2, #65	@ 0x41
 800f10e:	5c9b      	ldrb	r3, [r3, r2]
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d107      	bne.n	800f126 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2240      	movs	r2, #64	@ 0x40
 800f11a:	2100      	movs	r1, #0
 800f11c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	0018      	movs	r0, r3
 800f122:	f7fe fca3 	bl	800da6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2241      	movs	r2, #65	@ 0x41
 800f12a:	2124      	movs	r1, #36	@ 0x24
 800f12c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2101      	movs	r1, #1
 800f13a:	438a      	bics	r2, r1
 800f13c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685a      	ldr	r2, [r3, #4]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4934      	ldr	r1, [pc, #208]	@ (800f218 <HAL_I2C_Init+0x120>)
 800f148:	400a      	ands	r2, r1
 800f14a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	689a      	ldr	r2, [r3, #8]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4931      	ldr	r1, [pc, #196]	@ (800f21c <HAL_I2C_Init+0x124>)
 800f158:	400a      	ands	r2, r1
 800f15a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d108      	bne.n	800f176 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	689a      	ldr	r2, [r3, #8]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2180      	movs	r1, #128	@ 0x80
 800f16e:	0209      	lsls	r1, r1, #8
 800f170:	430a      	orrs	r2, r1
 800f172:	609a      	str	r2, [r3, #8]
 800f174:	e007      	b.n	800f186 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689a      	ldr	r2, [r3, #8]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2184      	movs	r1, #132	@ 0x84
 800f180:	0209      	lsls	r1, r1, #8
 800f182:	430a      	orrs	r2, r1
 800f184:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d104      	bne.n	800f198 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2280      	movs	r2, #128	@ 0x80
 800f194:	0112      	lsls	r2, r2, #4
 800f196:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	685a      	ldr	r2, [r3, #4]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	491f      	ldr	r1, [pc, #124]	@ (800f220 <HAL_I2C_Init+0x128>)
 800f1a4:	430a      	orrs	r2, r1
 800f1a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68da      	ldr	r2, [r3, #12]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	491a      	ldr	r1, [pc, #104]	@ (800f21c <HAL_I2C_Init+0x124>)
 800f1b4:	400a      	ands	r2, r1
 800f1b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	691a      	ldr	r2, [r3, #16]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	695b      	ldr	r3, [r3, #20]
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	69d9      	ldr	r1, [r3, #28]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1a      	ldr	r2, [r3, #32]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	430a      	orrs	r2, r1
 800f1e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	430a      	orrs	r2, r1
 800f1f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2241      	movs	r2, #65	@ 0x41
 800f1fc:	2120      	movs	r1, #32
 800f1fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2242      	movs	r2, #66	@ 0x42
 800f20a:	2100      	movs	r1, #0
 800f20c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	0018      	movs	r0, r3
 800f212:	46bd      	mov	sp, r7
 800f214:	b002      	add	sp, #8
 800f216:	bd80      	pop	{r7, pc}
 800f218:	f0ffffff 	.word	0xf0ffffff
 800f21c:	ffff7fff 	.word	0xffff7fff
 800f220:	02008000 	.word	0x02008000

0800f224 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f224:	b590      	push	{r4, r7, lr}
 800f226:	b089      	sub	sp, #36	@ 0x24
 800f228:	af02      	add	r7, sp, #8
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	0008      	movs	r0, r1
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	0019      	movs	r1, r3
 800f232:	230a      	movs	r3, #10
 800f234:	18fb      	adds	r3, r7, r3
 800f236:	1c02      	adds	r2, r0, #0
 800f238:	801a      	strh	r2, [r3, #0]
 800f23a:	2308      	movs	r3, #8
 800f23c:	18fb      	adds	r3, r7, r3
 800f23e:	1c0a      	adds	r2, r1, #0
 800f240:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2241      	movs	r2, #65	@ 0x41
 800f246:	5c9b      	ldrb	r3, [r3, r2]
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	d000      	beq.n	800f250 <HAL_I2C_Master_Transmit+0x2c>
 800f24e:	e0e7      	b.n	800f420 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2240      	movs	r2, #64	@ 0x40
 800f254:	5c9b      	ldrb	r3, [r3, r2]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d101      	bne.n	800f25e <HAL_I2C_Master_Transmit+0x3a>
 800f25a:	2302      	movs	r3, #2
 800f25c:	e0e1      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2240      	movs	r2, #64	@ 0x40
 800f262:	2101      	movs	r1, #1
 800f264:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f266:	f7ff f953 	bl	800e510 <HAL_GetTick>
 800f26a:	0003      	movs	r3, r0
 800f26c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f26e:	2380      	movs	r3, #128	@ 0x80
 800f270:	0219      	lsls	r1, r3, #8
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	2319      	movs	r3, #25
 800f27a:	2201      	movs	r2, #1
 800f27c:	f001 fa82 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f280:	1e03      	subs	r3, r0, #0
 800f282:	d001      	beq.n	800f288 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f284:	2301      	movs	r3, #1
 800f286:	e0cc      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2241      	movs	r2, #65	@ 0x41
 800f28c:	2121      	movs	r1, #33	@ 0x21
 800f28e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2242      	movs	r2, #66	@ 0x42
 800f294:	2110      	movs	r1, #16
 800f296:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2208      	movs	r2, #8
 800f2a8:	18ba      	adds	r2, r7, r2
 800f2aa:	8812      	ldrh	r2, [r2, #0]
 800f2ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	2bff      	cmp	r3, #255	@ 0xff
 800f2bc:	d911      	bls.n	800f2e2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	22ff      	movs	r2, #255	@ 0xff
 800f2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	2380      	movs	r3, #128	@ 0x80
 800f2cc:	045c      	lsls	r4, r3, #17
 800f2ce:	230a      	movs	r3, #10
 800f2d0:	18fb      	adds	r3, r7, r3
 800f2d2:	8819      	ldrh	r1, [r3, #0]
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	4b55      	ldr	r3, [pc, #340]	@ (800f42c <HAL_I2C_Master_Transmit+0x208>)
 800f2d8:	9300      	str	r3, [sp, #0]
 800f2da:	0023      	movs	r3, r4
 800f2dc:	f001 fc8e 	bl	8010bfc <I2C_TransferConfig>
 800f2e0:	e075      	b.n	800f3ce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	2380      	movs	r3, #128	@ 0x80
 800f2f4:	049c      	lsls	r4, r3, #18
 800f2f6:	230a      	movs	r3, #10
 800f2f8:	18fb      	adds	r3, r7, r3
 800f2fa:	8819      	ldrh	r1, [r3, #0]
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	4b4b      	ldr	r3, [pc, #300]	@ (800f42c <HAL_I2C_Master_Transmit+0x208>)
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	0023      	movs	r3, r4
 800f304:	f001 fc7a 	bl	8010bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f308:	e061      	b.n	800f3ce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	0018      	movs	r0, r3
 800f312:	f001 fa76 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800f316:	1e03      	subs	r3, r0, #0
 800f318:	d001      	beq.n	800f31e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e081      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32e:	1c5a      	adds	r2, r3, #1
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f338:	b29b      	uxth	r3, r3
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f346:	3b01      	subs	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f352:	b29b      	uxth	r3, r3
 800f354:	2b00      	cmp	r3, #0
 800f356:	d03a      	beq.n	800f3ce <HAL_I2C_Master_Transmit+0x1aa>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d136      	bne.n	800f3ce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	0013      	movs	r3, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	2180      	movs	r1, #128	@ 0x80
 800f36e:	f001 fa09 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f372:	1e03      	subs	r3, r0, #0
 800f374:	d001      	beq.n	800f37a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e053      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f37e:	b29b      	uxth	r3, r3
 800f380:	2bff      	cmp	r3, #255	@ 0xff
 800f382:	d911      	bls.n	800f3a8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	22ff      	movs	r2, #255	@ 0xff
 800f388:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	2380      	movs	r3, #128	@ 0x80
 800f392:	045c      	lsls	r4, r3, #17
 800f394:	230a      	movs	r3, #10
 800f396:	18fb      	adds	r3, r7, r3
 800f398:	8819      	ldrh	r1, [r3, #0]
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	2300      	movs	r3, #0
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	0023      	movs	r3, r4
 800f3a2:	f001 fc2b 	bl	8010bfc <I2C_TransferConfig>
 800f3a6:	e012      	b.n	800f3ce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3b6:	b2da      	uxtb	r2, r3
 800f3b8:	2380      	movs	r3, #128	@ 0x80
 800f3ba:	049c      	lsls	r4, r3, #18
 800f3bc:	230a      	movs	r3, #10
 800f3be:	18fb      	adds	r3, r7, r3
 800f3c0:	8819      	ldrh	r1, [r3, #0]
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	0023      	movs	r3, r4
 800f3ca:	f001 fc17 	bl	8010bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d198      	bne.n	800f30a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	0018      	movs	r0, r3
 800f3e0:	f001 fa4e 	bl	8010880 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f3e4:	1e03      	subs	r3, r0, #0
 800f3e6:	d001      	beq.n	800f3ec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e01a      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2220      	movs	r2, #32
 800f3f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	685a      	ldr	r2, [r3, #4]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	490c      	ldr	r1, [pc, #48]	@ (800f430 <HAL_I2C_Master_Transmit+0x20c>)
 800f400:	400a      	ands	r2, r1
 800f402:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2241      	movs	r2, #65	@ 0x41
 800f408:	2120      	movs	r1, #32
 800f40a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2242      	movs	r2, #66	@ 0x42
 800f410:	2100      	movs	r1, #0
 800f412:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2240      	movs	r2, #64	@ 0x40
 800f418:	2100      	movs	r1, #0
 800f41a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	e000      	b.n	800f422 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f420:	2302      	movs	r3, #2
  }
}
 800f422:	0018      	movs	r0, r3
 800f424:	46bd      	mov	sp, r7
 800f426:	b007      	add	sp, #28
 800f428:	bd90      	pop	{r4, r7, pc}
 800f42a:	46c0      	nop			@ (mov r8, r8)
 800f42c:	80002000 	.word	0x80002000
 800f430:	fe00e800 	.word	0xfe00e800

0800f434 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f434:	b590      	push	{r4, r7, lr}
 800f436:	b089      	sub	sp, #36	@ 0x24
 800f438:	af02      	add	r7, sp, #8
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	0008      	movs	r0, r1
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	0019      	movs	r1, r3
 800f442:	230a      	movs	r3, #10
 800f444:	18fb      	adds	r3, r7, r3
 800f446:	1c02      	adds	r2, r0, #0
 800f448:	801a      	strh	r2, [r3, #0]
 800f44a:	2308      	movs	r3, #8
 800f44c:	18fb      	adds	r3, r7, r3
 800f44e:	1c0a      	adds	r2, r1, #0
 800f450:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2241      	movs	r2, #65	@ 0x41
 800f456:	5c9b      	ldrb	r3, [r3, r2]
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b20      	cmp	r3, #32
 800f45c:	d000      	beq.n	800f460 <HAL_I2C_Master_Receive+0x2c>
 800f45e:	e0e8      	b.n	800f632 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2240      	movs	r2, #64	@ 0x40
 800f464:	5c9b      	ldrb	r3, [r3, r2]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <HAL_I2C_Master_Receive+0x3a>
 800f46a:	2302      	movs	r3, #2
 800f46c:	e0e2      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2240      	movs	r2, #64	@ 0x40
 800f472:	2101      	movs	r1, #1
 800f474:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f476:	f7ff f84b 	bl	800e510 <HAL_GetTick>
 800f47a:	0003      	movs	r3, r0
 800f47c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f47e:	2380      	movs	r3, #128	@ 0x80
 800f480:	0219      	lsls	r1, r3, #8
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	2319      	movs	r3, #25
 800f48a:	2201      	movs	r2, #1
 800f48c:	f001 f97a 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f490:	1e03      	subs	r3, r0, #0
 800f492:	d001      	beq.n	800f498 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	e0cd      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2241      	movs	r2, #65	@ 0x41
 800f49c:	2122      	movs	r1, #34	@ 0x22
 800f49e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2242      	movs	r2, #66	@ 0x42
 800f4a4:	2110      	movs	r1, #16
 800f4a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2208      	movs	r2, #8
 800f4b8:	18ba      	adds	r2, r7, r2
 800f4ba:	8812      	ldrh	r2, [r2, #0]
 800f4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	2bff      	cmp	r3, #255	@ 0xff
 800f4cc:	d911      	bls.n	800f4f2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	22ff      	movs	r2, #255	@ 0xff
 800f4d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	2380      	movs	r3, #128	@ 0x80
 800f4dc:	045c      	lsls	r4, r3, #17
 800f4de:	230a      	movs	r3, #10
 800f4e0:	18fb      	adds	r3, r7, r3
 800f4e2:	8819      	ldrh	r1, [r3, #0]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	4b55      	ldr	r3, [pc, #340]	@ (800f63c <HAL_I2C_Master_Receive+0x208>)
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	0023      	movs	r3, r4
 800f4ec:	f001 fb86 	bl	8010bfc <I2C_TransferConfig>
 800f4f0:	e076      	b.n	800f5e0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f500:	b2da      	uxtb	r2, r3
 800f502:	2380      	movs	r3, #128	@ 0x80
 800f504:	049c      	lsls	r4, r3, #18
 800f506:	230a      	movs	r3, #10
 800f508:	18fb      	adds	r3, r7, r3
 800f50a:	8819      	ldrh	r1, [r3, #0]
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	4b4b      	ldr	r3, [pc, #300]	@ (800f63c <HAL_I2C_Master_Receive+0x208>)
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	0023      	movs	r3, r4
 800f514:	f001 fb72 	bl	8010bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f518:	e062      	b.n	800f5e0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f51a:	697a      	ldr	r2, [r7, #20]
 800f51c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	0018      	movs	r0, r3
 800f522:	f001 f9e9 	bl	80108f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f526:	1e03      	subs	r3, r0, #0
 800f528:	d001      	beq.n	800f52e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	e082      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f538:	b2d2      	uxtb	r2, r2
 800f53a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f556:	b29b      	uxth	r3, r3
 800f558:	3b01      	subs	r3, #1
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f564:	b29b      	uxth	r3, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d03a      	beq.n	800f5e0 <HAL_I2C_Master_Receive+0x1ac>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d136      	bne.n	800f5e0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	0013      	movs	r3, r2
 800f57c:	2200      	movs	r2, #0
 800f57e:	2180      	movs	r1, #128	@ 0x80
 800f580:	f001 f900 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f584:	1e03      	subs	r3, r0, #0
 800f586:	d001      	beq.n	800f58c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800f588:	2301      	movs	r3, #1
 800f58a:	e053      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f590:	b29b      	uxth	r3, r3
 800f592:	2bff      	cmp	r3, #255	@ 0xff
 800f594:	d911      	bls.n	800f5ba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	22ff      	movs	r2, #255	@ 0xff
 800f59a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	2380      	movs	r3, #128	@ 0x80
 800f5a4:	045c      	lsls	r4, r3, #17
 800f5a6:	230a      	movs	r3, #10
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	8819      	ldrh	r1, [r3, #0]
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	0023      	movs	r3, r4
 800f5b4:	f001 fb22 	bl	8010bfc <I2C_TransferConfig>
 800f5b8:	e012      	b.n	800f5e0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5c8:	b2da      	uxtb	r2, r3
 800f5ca:	2380      	movs	r3, #128	@ 0x80
 800f5cc:	049c      	lsls	r4, r3, #18
 800f5ce:	230a      	movs	r3, #10
 800f5d0:	18fb      	adds	r3, r7, r3
 800f5d2:	8819      	ldrh	r1, [r3, #0]
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	0023      	movs	r3, r4
 800f5dc:	f001 fb0e 	bl	8010bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d197      	bne.n	800f51a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	0018      	movs	r0, r3
 800f5f2:	f001 f945 	bl	8010880 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f5f6:	1e03      	subs	r3, r0, #0
 800f5f8:	d001      	beq.n	800f5fe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e01a      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2220      	movs	r2, #32
 800f604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	490b      	ldr	r1, [pc, #44]	@ (800f640 <HAL_I2C_Master_Receive+0x20c>)
 800f612:	400a      	ands	r2, r1
 800f614:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2241      	movs	r2, #65	@ 0x41
 800f61a:	2120      	movs	r1, #32
 800f61c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2242      	movs	r2, #66	@ 0x42
 800f622:	2100      	movs	r1, #0
 800f624:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2240      	movs	r2, #64	@ 0x40
 800f62a:	2100      	movs	r1, #0
 800f62c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	e000      	b.n	800f634 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800f632:	2302      	movs	r3, #2
  }
}
 800f634:	0018      	movs	r0, r3
 800f636:	46bd      	mov	sp, r7
 800f638:	b007      	add	sp, #28
 800f63a:	bd90      	pop	{r4, r7, pc}
 800f63c:	80002400 	.word	0x80002400
 800f640:	fe00e800 	.word	0xfe00e800

0800f644 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f644:	b590      	push	{r4, r7, lr}
 800f646:	b089      	sub	sp, #36	@ 0x24
 800f648:	af02      	add	r7, sp, #8
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	000c      	movs	r4, r1
 800f64e:	0010      	movs	r0, r2
 800f650:	0019      	movs	r1, r3
 800f652:	230a      	movs	r3, #10
 800f654:	18fb      	adds	r3, r7, r3
 800f656:	1c22      	adds	r2, r4, #0
 800f658:	801a      	strh	r2, [r3, #0]
 800f65a:	2308      	movs	r3, #8
 800f65c:	18fb      	adds	r3, r7, r3
 800f65e:	1c02      	adds	r2, r0, #0
 800f660:	801a      	strh	r2, [r3, #0]
 800f662:	1dbb      	adds	r3, r7, #6
 800f664:	1c0a      	adds	r2, r1, #0
 800f666:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2241      	movs	r2, #65	@ 0x41
 800f66c:	5c9b      	ldrb	r3, [r3, r2]
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b20      	cmp	r3, #32
 800f672:	d000      	beq.n	800f676 <HAL_I2C_Mem_Write+0x32>
 800f674:	e10c      	b.n	800f890 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d004      	beq.n	800f686 <HAL_I2C_Mem_Write+0x42>
 800f67c:	232c      	movs	r3, #44	@ 0x2c
 800f67e:	18fb      	adds	r3, r7, r3
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d105      	bne.n	800f692 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2280      	movs	r2, #128	@ 0x80
 800f68a:	0092      	lsls	r2, r2, #2
 800f68c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800f68e:	2301      	movs	r3, #1
 800f690:	e0ff      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2240      	movs	r2, #64	@ 0x40
 800f696:	5c9b      	ldrb	r3, [r3, r2]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d101      	bne.n	800f6a0 <HAL_I2C_Mem_Write+0x5c>
 800f69c:	2302      	movs	r3, #2
 800f69e:	e0f8      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2240      	movs	r2, #64	@ 0x40
 800f6a4:	2101      	movs	r1, #1
 800f6a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f6a8:	f7fe ff32 	bl	800e510 <HAL_GetTick>
 800f6ac:	0003      	movs	r3, r0
 800f6ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f6b0:	2380      	movs	r3, #128	@ 0x80
 800f6b2:	0219      	lsls	r1, r3, #8
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	2319      	movs	r3, #25
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f001 f861 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f6c2:	1e03      	subs	r3, r0, #0
 800f6c4:	d001      	beq.n	800f6ca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e0e3      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2241      	movs	r2, #65	@ 0x41
 800f6ce:	2121      	movs	r1, #33	@ 0x21
 800f6d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2242      	movs	r2, #66	@ 0x42
 800f6d6:	2140      	movs	r1, #64	@ 0x40
 800f6d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	222c      	movs	r2, #44	@ 0x2c
 800f6ea:	18ba      	adds	r2, r7, r2
 800f6ec:	8812      	ldrh	r2, [r2, #0]
 800f6ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f6f6:	1dbb      	adds	r3, r7, #6
 800f6f8:	881c      	ldrh	r4, [r3, #0]
 800f6fa:	2308      	movs	r3, #8
 800f6fc:	18fb      	adds	r3, r7, r3
 800f6fe:	881a      	ldrh	r2, [r3, #0]
 800f700:	230a      	movs	r3, #10
 800f702:	18fb      	adds	r3, r7, r3
 800f704:	8819      	ldrh	r1, [r3, #0]
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	9301      	str	r3, [sp, #4]
 800f70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	0023      	movs	r3, r4
 800f712:	f000 fba5 	bl	800fe60 <I2C_RequestMemoryWrite>
 800f716:	1e03      	subs	r3, r0, #0
 800f718:	d005      	beq.n	800f726 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2240      	movs	r2, #64	@ 0x40
 800f71e:	2100      	movs	r1, #0
 800f720:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	e0b5      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	2bff      	cmp	r3, #255	@ 0xff
 800f72e:	d911      	bls.n	800f754 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	22ff      	movs	r2, #255	@ 0xff
 800f734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f73a:	b2da      	uxtb	r2, r3
 800f73c:	2380      	movs	r3, #128	@ 0x80
 800f73e:	045c      	lsls	r4, r3, #17
 800f740:	230a      	movs	r3, #10
 800f742:	18fb      	adds	r3, r7, r3
 800f744:	8819      	ldrh	r1, [r3, #0]
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	2300      	movs	r3, #0
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	0023      	movs	r3, r4
 800f74e:	f001 fa55 	bl	8010bfc <I2C_TransferConfig>
 800f752:	e012      	b.n	800f77a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f758:	b29a      	uxth	r2, r3
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f762:	b2da      	uxtb	r2, r3
 800f764:	2380      	movs	r3, #128	@ 0x80
 800f766:	049c      	lsls	r4, r3, #18
 800f768:	230a      	movs	r3, #10
 800f76a:	18fb      	adds	r3, r7, r3
 800f76c:	8819      	ldrh	r1, [r3, #0]
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	2300      	movs	r3, #0
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	0023      	movs	r3, r4
 800f776:	f001 fa41 	bl	8010bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	0018      	movs	r0, r3
 800f782:	f001 f83e 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800f786:	1e03      	subs	r3, r0, #0
 800f788:	d001      	beq.n	800f78e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800f78a:	2301      	movs	r3, #1
 800f78c:	e081      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d03a      	beq.n	800f83e <HAL_I2C_Mem_Write+0x1fa>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d136      	bne.n	800f83e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f7d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	0013      	movs	r3, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2180      	movs	r1, #128	@ 0x80
 800f7de:	f000 ffd1 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f7e2:	1e03      	subs	r3, r0, #0
 800f7e4:	d001      	beq.n	800f7ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e053      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	2bff      	cmp	r3, #255	@ 0xff
 800f7f2:	d911      	bls.n	800f818 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	22ff      	movs	r2, #255	@ 0xff
 800f7f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7fe:	b2da      	uxtb	r2, r3
 800f800:	2380      	movs	r3, #128	@ 0x80
 800f802:	045c      	lsls	r4, r3, #17
 800f804:	230a      	movs	r3, #10
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	8819      	ldrh	r1, [r3, #0]
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	2300      	movs	r3, #0
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	0023      	movs	r3, r4
 800f812:	f001 f9f3 	bl	8010bfc <I2C_TransferConfig>
 800f816:	e012      	b.n	800f83e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f826:	b2da      	uxtb	r2, r3
 800f828:	2380      	movs	r3, #128	@ 0x80
 800f82a:	049c      	lsls	r4, r3, #18
 800f82c:	230a      	movs	r3, #10
 800f82e:	18fb      	adds	r3, r7, r3
 800f830:	8819      	ldrh	r1, [r3, #0]
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	2300      	movs	r3, #0
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	0023      	movs	r3, r4
 800f83a:	f001 f9df 	bl	8010bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f842:	b29b      	uxth	r3, r3
 800f844:	2b00      	cmp	r3, #0
 800f846:	d198      	bne.n	800f77a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0018      	movs	r0, r3
 800f850:	f001 f816 	bl	8010880 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f854:	1e03      	subs	r3, r0, #0
 800f856:	d001      	beq.n	800f85c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800f858:	2301      	movs	r3, #1
 800f85a:	e01a      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2220      	movs	r2, #32
 800f862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	685a      	ldr	r2, [r3, #4]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	490b      	ldr	r1, [pc, #44]	@ (800f89c <HAL_I2C_Mem_Write+0x258>)
 800f870:	400a      	ands	r2, r1
 800f872:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2241      	movs	r2, #65	@ 0x41
 800f878:	2120      	movs	r1, #32
 800f87a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2242      	movs	r2, #66	@ 0x42
 800f880:	2100      	movs	r1, #0
 800f882:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2240      	movs	r2, #64	@ 0x40
 800f888:	2100      	movs	r1, #0
 800f88a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f88c:	2300      	movs	r3, #0
 800f88e:	e000      	b.n	800f892 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800f890:	2302      	movs	r3, #2
  }
}
 800f892:	0018      	movs	r0, r3
 800f894:	46bd      	mov	sp, r7
 800f896:	b007      	add	sp, #28
 800f898:	bd90      	pop	{r4, r7, pc}
 800f89a:	46c0      	nop			@ (mov r8, r8)
 800f89c:	fe00e800 	.word	0xfe00e800

0800f8a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8a0:	b590      	push	{r4, r7, lr}
 800f8a2:	b089      	sub	sp, #36	@ 0x24
 800f8a4:	af02      	add	r7, sp, #8
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	000c      	movs	r4, r1
 800f8aa:	0010      	movs	r0, r2
 800f8ac:	0019      	movs	r1, r3
 800f8ae:	230a      	movs	r3, #10
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	1c22      	adds	r2, r4, #0
 800f8b4:	801a      	strh	r2, [r3, #0]
 800f8b6:	2308      	movs	r3, #8
 800f8b8:	18fb      	adds	r3, r7, r3
 800f8ba:	1c02      	adds	r2, r0, #0
 800f8bc:	801a      	strh	r2, [r3, #0]
 800f8be:	1dbb      	adds	r3, r7, #6
 800f8c0:	1c0a      	adds	r2, r1, #0
 800f8c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2241      	movs	r2, #65	@ 0x41
 800f8c8:	5c9b      	ldrb	r3, [r3, r2]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b20      	cmp	r3, #32
 800f8ce:	d000      	beq.n	800f8d2 <HAL_I2C_Mem_Read+0x32>
 800f8d0:	e110      	b.n	800faf4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d004      	beq.n	800f8e2 <HAL_I2C_Mem_Read+0x42>
 800f8d8:	232c      	movs	r3, #44	@ 0x2c
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d105      	bne.n	800f8ee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2280      	movs	r2, #128	@ 0x80
 800f8e6:	0092      	lsls	r2, r2, #2
 800f8e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e103      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2240      	movs	r2, #64	@ 0x40
 800f8f2:	5c9b      	ldrb	r3, [r3, r2]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d101      	bne.n	800f8fc <HAL_I2C_Mem_Read+0x5c>
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	e0fc      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2240      	movs	r2, #64	@ 0x40
 800f900:	2101      	movs	r1, #1
 800f902:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f904:	f7fe fe04 	bl	800e510 <HAL_GetTick>
 800f908:	0003      	movs	r3, r0
 800f90a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f90c:	2380      	movs	r3, #128	@ 0x80
 800f90e:	0219      	lsls	r1, r3, #8
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	2319      	movs	r3, #25
 800f918:	2201      	movs	r2, #1
 800f91a:	f000 ff33 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f91e:	1e03      	subs	r3, r0, #0
 800f920:	d001      	beq.n	800f926 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800f922:	2301      	movs	r3, #1
 800f924:	e0e7      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2241      	movs	r2, #65	@ 0x41
 800f92a:	2122      	movs	r1, #34	@ 0x22
 800f92c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2242      	movs	r2, #66	@ 0x42
 800f932:	2140      	movs	r1, #64	@ 0x40
 800f934:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f940:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	222c      	movs	r2, #44	@ 0x2c
 800f946:	18ba      	adds	r2, r7, r2
 800f948:	8812      	ldrh	r2, [r2, #0]
 800f94a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f952:	1dbb      	adds	r3, r7, #6
 800f954:	881c      	ldrh	r4, [r3, #0]
 800f956:	2308      	movs	r3, #8
 800f958:	18fb      	adds	r3, r7, r3
 800f95a:	881a      	ldrh	r2, [r3, #0]
 800f95c:	230a      	movs	r3, #10
 800f95e:	18fb      	adds	r3, r7, r3
 800f960:	8819      	ldrh	r1, [r3, #0]
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	0023      	movs	r3, r4
 800f96e:	f000 fadb 	bl	800ff28 <I2C_RequestMemoryRead>
 800f972:	1e03      	subs	r3, r0, #0
 800f974:	d005      	beq.n	800f982 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2240      	movs	r2, #64	@ 0x40
 800f97a:	2100      	movs	r1, #0
 800f97c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	e0b9      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f986:	b29b      	uxth	r3, r3
 800f988:	2bff      	cmp	r3, #255	@ 0xff
 800f98a:	d911      	bls.n	800f9b0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	22ff      	movs	r2, #255	@ 0xff
 800f990:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f996:	b2da      	uxtb	r2, r3
 800f998:	2380      	movs	r3, #128	@ 0x80
 800f99a:	045c      	lsls	r4, r3, #17
 800f99c:	230a      	movs	r3, #10
 800f99e:	18fb      	adds	r3, r7, r3
 800f9a0:	8819      	ldrh	r1, [r3, #0]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	4b56      	ldr	r3, [pc, #344]	@ (800fb00 <HAL_I2C_Mem_Read+0x260>)
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	0023      	movs	r3, r4
 800f9aa:	f001 f927 	bl	8010bfc <I2C_TransferConfig>
 800f9ae:	e012      	b.n	800f9d6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	2380      	movs	r3, #128	@ 0x80
 800f9c2:	049c      	lsls	r4, r3, #18
 800f9c4:	230a      	movs	r3, #10
 800f9c6:	18fb      	adds	r3, r7, r3
 800f9c8:	8819      	ldrh	r1, [r3, #0]
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	4b4c      	ldr	r3, [pc, #304]	@ (800fb00 <HAL_I2C_Mem_Read+0x260>)
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	0023      	movs	r3, r4
 800f9d2:	f001 f913 	bl	8010bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	0013      	movs	r3, r2
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	2104      	movs	r1, #4
 800f9e4:	f000 fece 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800f9e8:	1e03      	subs	r3, r0, #0
 800f9ea:	d001      	beq.n	800f9f0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e082      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fa:	b2d2      	uxtb	r2, r2
 800f9fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d03a      	beq.n	800faa2 <HAL_I2C_Mem_Read+0x202>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d136      	bne.n	800faa2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fa34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	0013      	movs	r3, r2
 800fa3e:	2200      	movs	r2, #0
 800fa40:	2180      	movs	r1, #128	@ 0x80
 800fa42:	f000 fe9f 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800fa46:	1e03      	subs	r3, r0, #0
 800fa48:	d001      	beq.n	800fa4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e053      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	2bff      	cmp	r3, #255	@ 0xff
 800fa56:	d911      	bls.n	800fa7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	22ff      	movs	r2, #255	@ 0xff
 800fa5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa62:	b2da      	uxtb	r2, r3
 800fa64:	2380      	movs	r3, #128	@ 0x80
 800fa66:	045c      	lsls	r4, r3, #17
 800fa68:	230a      	movs	r3, #10
 800fa6a:	18fb      	adds	r3, r7, r3
 800fa6c:	8819      	ldrh	r1, [r3, #0]
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	2300      	movs	r3, #0
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	0023      	movs	r3, r4
 800fa76:	f001 f8c1 	bl	8010bfc <I2C_TransferConfig>
 800fa7a:	e012      	b.n	800faa2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	2380      	movs	r3, #128	@ 0x80
 800fa8e:	049c      	lsls	r4, r3, #18
 800fa90:	230a      	movs	r3, #10
 800fa92:	18fb      	adds	r3, r7, r3
 800fa94:	8819      	ldrh	r1, [r3, #0]
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	2300      	movs	r3, #0
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	0023      	movs	r3, r4
 800fa9e:	f001 f8ad 	bl	8010bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d194      	bne.n	800f9d6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	0018      	movs	r0, r3
 800fab4:	f000 fee4 	bl	8010880 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fab8:	1e03      	subs	r3, r0, #0
 800faba:	d001      	beq.n	800fac0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800fabc:	2301      	movs	r3, #1
 800fabe:	e01a      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	2220      	movs	r2, #32
 800fac6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	685a      	ldr	r2, [r3, #4]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	490c      	ldr	r1, [pc, #48]	@ (800fb04 <HAL_I2C_Mem_Read+0x264>)
 800fad4:	400a      	ands	r2, r1
 800fad6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2241      	movs	r2, #65	@ 0x41
 800fadc:	2120      	movs	r1, #32
 800fade:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2242      	movs	r2, #66	@ 0x42
 800fae4:	2100      	movs	r1, #0
 800fae6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2240      	movs	r2, #64	@ 0x40
 800faec:	2100      	movs	r1, #0
 800faee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	e000      	b.n	800faf6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800faf4:	2302      	movs	r3, #2
  }
}
 800faf6:	0018      	movs	r0, r3
 800faf8:	46bd      	mov	sp, r7
 800fafa:	b007      	add	sp, #28
 800fafc:	bd90      	pop	{r4, r7, pc}
 800fafe:	46c0      	nop			@ (mov r8, r8)
 800fb00:	80002400 	.word	0x80002400
 800fb04:	fe00e800 	.word	0xfe00e800

0800fb08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d005      	beq.n	800fb34 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	68f9      	ldr	r1, [r7, #12]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	4798      	blx	r3
  }
}
 800fb34:	46c0      	nop			@ (mov r8, r8)
 800fb36:	46bd      	mov	sp, r7
 800fb38:	b004      	add	sp, #16
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	699b      	ldr	r3, [r3, #24]
 800fb4a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fb54:	697a      	ldr	r2, [r7, #20]
 800fb56:	2380      	movs	r3, #128	@ 0x80
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	d00e      	beq.n	800fb7c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2280      	movs	r2, #128	@ 0x80
 800fb62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fb64:	d00a      	beq.n	800fb7c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	431a      	orrs	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2280      	movs	r2, #128	@ 0x80
 800fb78:	0052      	lsls	r2, r2, #1
 800fb7a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	2380      	movs	r3, #128	@ 0x80
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	4013      	ands	r3, r2
 800fb84:	d00e      	beq.n	800fba4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2280      	movs	r2, #128	@ 0x80
 800fb8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fb8c:	d00a      	beq.n	800fba4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb92:	2208      	movs	r2, #8
 800fb94:	431a      	orrs	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2280      	movs	r2, #128	@ 0x80
 800fba0:	00d2      	lsls	r2, r2, #3
 800fba2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	2380      	movs	r3, #128	@ 0x80
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4013      	ands	r3, r2
 800fbac:	d00e      	beq.n	800fbcc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2280      	movs	r2, #128	@ 0x80
 800fbb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fbb4:	d00a      	beq.n	800fbcc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbba:	2202      	movs	r2, #2
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2280      	movs	r2, #128	@ 0x80
 800fbc8:	0092      	lsls	r2, r2, #2
 800fbca:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	220b      	movs	r2, #11
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	d005      	beq.n	800fbe6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	0011      	movs	r1, r2
 800fbe0:	0018      	movs	r0, r3
 800fbe2:	f000 fc83 	bl	80104ec <I2C_ITError>
  }
}
 800fbe6:	46c0      	nop			@ (mov r8, r8)
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b006      	add	sp, #24
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fbf6:	46c0      	nop			@ (mov r8, r8)
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	b002      	add	sp, #8
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fc06:	46c0      	nop			@ (mov r8, r8)
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	b002      	add	sp, #8
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b082      	sub	sp, #8
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
 800fc16:	0008      	movs	r0, r1
 800fc18:	0011      	movs	r1, r2
 800fc1a:	1cfb      	adds	r3, r7, #3
 800fc1c:	1c02      	adds	r2, r0, #0
 800fc1e:	701a      	strb	r2, [r3, #0]
 800fc20:	003b      	movs	r3, r7
 800fc22:	1c0a      	adds	r2, r1, #0
 800fc24:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fc26:	46c0      	nop			@ (mov r8, r8)
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	b002      	add	sp, #8
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fc36:	46c0      	nop			@ (mov r8, r8)
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	b002      	add	sp, #8
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fc46:	46c0      	nop			@ (mov r8, r8)
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	b002      	add	sp, #8
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b082      	sub	sp, #8
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fc56:	46c0      	nop			@ (mov r8, r8)
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	b002      	add	sp, #8
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2240      	movs	r2, #64	@ 0x40
 800fc7a:	5c9b      	ldrb	r3, [r3, r2]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d101      	bne.n	800fc84 <I2C_Slave_ISR_IT+0x24>
 800fc80:	2302      	movs	r3, #2
 800fc82:	e0e6      	b.n	800fe52 <I2C_Slave_ISR_IT+0x1f2>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2240      	movs	r2, #64	@ 0x40
 800fc88:	2101      	movs	r1, #1
 800fc8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	2220      	movs	r2, #32
 800fc90:	4013      	ands	r3, r2
 800fc92:	d009      	beq.n	800fca8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2220      	movs	r2, #32
 800fc98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fc9a:	d005      	beq.n	800fca8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	0011      	movs	r1, r2
 800fca2:	0018      	movs	r0, r3
 800fca4:	f000 faaa 	bl	80101fc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	2210      	movs	r2, #16
 800fcac:	4013      	ands	r3, r2
 800fcae:	d052      	beq.n	800fd56 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2210      	movs	r2, #16
 800fcb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fcb6:	d04e      	beq.n	800fd56 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d12d      	bne.n	800fd1e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2241      	movs	r2, #65	@ 0x41
 800fcc6:	5c9b      	ldrb	r3, [r3, r2]
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b28      	cmp	r3, #40	@ 0x28
 800fccc:	d10b      	bne.n	800fce6 <I2C_Slave_ISR_IT+0x86>
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	2380      	movs	r3, #128	@ 0x80
 800fcd2:	049b      	lsls	r3, r3, #18
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d106      	bne.n	800fce6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	0011      	movs	r1, r2
 800fcde:	0018      	movs	r0, r3
 800fce0:	f000 fbac 	bl	801043c <I2C_ITListenCplt>
 800fce4:	e036      	b.n	800fd54 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2241      	movs	r2, #65	@ 0x41
 800fcea:	5c9b      	ldrb	r3, [r3, r2]
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b29      	cmp	r3, #41	@ 0x29
 800fcf0:	d110      	bne.n	800fd14 <I2C_Slave_ISR_IT+0xb4>
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	4a59      	ldr	r2, [pc, #356]	@ (800fe5c <I2C_Slave_ISR_IT+0x1fc>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d00c      	beq.n	800fd14 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2210      	movs	r2, #16
 800fd00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	0018      	movs	r0, r3
 800fd06:	f000 fcfc 	bl	8010702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	0018      	movs	r0, r3
 800fd0e:	f000 fa11 	bl	8010134 <I2C_ITSlaveSeqCplt>
 800fd12:	e01f      	b.n	800fd54 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2210      	movs	r2, #16
 800fd1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fd1c:	e091      	b.n	800fe42 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2210      	movs	r2, #16
 800fd24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd2a:	2204      	movs	r2, #4
 800fd2c:	431a      	orrs	r2, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d005      	beq.n	800fd44 <I2C_Slave_ISR_IT+0xe4>
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	2380      	movs	r3, #128	@ 0x80
 800fd3c:	045b      	lsls	r3, r3, #17
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d000      	beq.n	800fd44 <I2C_Slave_ISR_IT+0xe4>
 800fd42:	e07e      	b.n	800fe42 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	0011      	movs	r1, r2
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f000 fbcd 	bl	80104ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fd52:	e076      	b.n	800fe42 <I2C_Slave_ISR_IT+0x1e2>
 800fd54:	e075      	b.n	800fe42 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	2204      	movs	r2, #4
 800fd5a:	4013      	ands	r3, r2
 800fd5c:	d02f      	beq.n	800fdbe <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2204      	movs	r2, #4
 800fd62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fd64:	d02b      	beq.n	800fdbe <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d018      	beq.n	800fda2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7a:	b2d2      	uxtb	r2, r2
 800fd7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	3b01      	subs	r3, #1
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d14c      	bne.n	800fe46 <I2C_Slave_ISR_IT+0x1e6>
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	4a2b      	ldr	r2, [pc, #172]	@ (800fe5c <I2C_Slave_ISR_IT+0x1fc>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d048      	beq.n	800fe46 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	0018      	movs	r0, r3
 800fdb8:	f000 f9bc 	bl	8010134 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fdbc:	e043      	b.n	800fe46 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	2208      	movs	r2, #8
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	d00a      	beq.n	800fddc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fdcc:	d006      	beq.n	800fddc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fdce:	693a      	ldr	r2, [r7, #16]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	0011      	movs	r1, r2
 800fdd4:	0018      	movs	r0, r3
 800fdd6:	f000 f909 	bl	800ffec <I2C_ITAddrCplt>
 800fdda:	e035      	b.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	2202      	movs	r2, #2
 800fde0:	4013      	ands	r3, r2
 800fde2:	d031      	beq.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2202      	movs	r2, #2
 800fde8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fdea:	d02d      	beq.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d018      	beq.n	800fe28 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfa:	781a      	ldrb	r2, [r3, #0]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	3b01      	subs	r3, #1
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fe26:	e00f      	b.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	2380      	movs	r3, #128	@ 0x80
 800fe2c:	045b      	lsls	r3, r3, #17
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d002      	beq.n	800fe38 <I2C_Slave_ISR_IT+0x1d8>
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d107      	bne.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	0018      	movs	r0, r3
 800fe3c:	f000 f97a 	bl	8010134 <I2C_ITSlaveSeqCplt>
 800fe40:	e002      	b.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800fe42:	46c0      	nop			@ (mov r8, r8)
 800fe44:	e000      	b.n	800fe48 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800fe46:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2240      	movs	r2, #64	@ 0x40
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	0018      	movs	r0, r3
 800fe54:	46bd      	mov	sp, r7
 800fe56:	b006      	add	sp, #24
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	46c0      	nop			@ (mov r8, r8)
 800fe5c:	ffff0000 	.word	0xffff0000

0800fe60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fe60:	b5b0      	push	{r4, r5, r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	000c      	movs	r4, r1
 800fe6a:	0010      	movs	r0, r2
 800fe6c:	0019      	movs	r1, r3
 800fe6e:	250a      	movs	r5, #10
 800fe70:	197b      	adds	r3, r7, r5
 800fe72:	1c22      	adds	r2, r4, #0
 800fe74:	801a      	strh	r2, [r3, #0]
 800fe76:	2308      	movs	r3, #8
 800fe78:	18fb      	adds	r3, r7, r3
 800fe7a:	1c02      	adds	r2, r0, #0
 800fe7c:	801a      	strh	r2, [r3, #0]
 800fe7e:	1dbb      	adds	r3, r7, #6
 800fe80:	1c0a      	adds	r2, r1, #0
 800fe82:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fe84:	1dbb      	adds	r3, r7, #6
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	b2da      	uxtb	r2, r3
 800fe8a:	2380      	movs	r3, #128	@ 0x80
 800fe8c:	045c      	lsls	r4, r3, #17
 800fe8e:	197b      	adds	r3, r7, r5
 800fe90:	8819      	ldrh	r1, [r3, #0]
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	4b23      	ldr	r3, [pc, #140]	@ (800ff24 <I2C_RequestMemoryWrite+0xc4>)
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	0023      	movs	r3, r4
 800fe9a:	f000 feaf 	bl	8010bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fea0:	6a39      	ldr	r1, [r7, #32]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	0018      	movs	r0, r3
 800fea6:	f000 fcac 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800feaa:	1e03      	subs	r3, r0, #0
 800feac:	d001      	beq.n	800feb2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800feae:	2301      	movs	r3, #1
 800feb0:	e033      	b.n	800ff1a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800feb2:	1dbb      	adds	r3, r7, #6
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d107      	bne.n	800feca <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800feba:	2308      	movs	r3, #8
 800febc:	18fb      	adds	r3, r7, r3
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	b2da      	uxtb	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	629a      	str	r2, [r3, #40]	@ 0x28
 800fec8:	e019      	b.n	800fefe <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800feca:	2308      	movs	r3, #8
 800fecc:	18fb      	adds	r3, r7, r3
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	0a1b      	lsrs	r3, r3, #8
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fede:	6a39      	ldr	r1, [r7, #32]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	0018      	movs	r0, r3
 800fee4:	f000 fc8d 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800fee8:	1e03      	subs	r3, r0, #0
 800feea:	d001      	beq.n	800fef0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800feec:	2301      	movs	r3, #1
 800feee:	e014      	b.n	800ff1a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fef0:	2308      	movs	r3, #8
 800fef2:	18fb      	adds	r3, r7, r3
 800fef4:	881b      	ldrh	r3, [r3, #0]
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fefe:	6a3a      	ldr	r2, [r7, #32]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	0013      	movs	r3, r2
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2180      	movs	r1, #128	@ 0x80
 800ff0c:	f000 fc3a 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800ff10:	1e03      	subs	r3, r0, #0
 800ff12:	d001      	beq.n	800ff18 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800ff14:	2301      	movs	r3, #1
 800ff16:	e000      	b.n	800ff1a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	0018      	movs	r0, r3
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	b004      	add	sp, #16
 800ff20:	bdb0      	pop	{r4, r5, r7, pc}
 800ff22:	46c0      	nop			@ (mov r8, r8)
 800ff24:	80002000 	.word	0x80002000

0800ff28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ff28:	b5b0      	push	{r4, r5, r7, lr}
 800ff2a:	b086      	sub	sp, #24
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	000c      	movs	r4, r1
 800ff32:	0010      	movs	r0, r2
 800ff34:	0019      	movs	r1, r3
 800ff36:	250a      	movs	r5, #10
 800ff38:	197b      	adds	r3, r7, r5
 800ff3a:	1c22      	adds	r2, r4, #0
 800ff3c:	801a      	strh	r2, [r3, #0]
 800ff3e:	2308      	movs	r3, #8
 800ff40:	18fb      	adds	r3, r7, r3
 800ff42:	1c02      	adds	r2, r0, #0
 800ff44:	801a      	strh	r2, [r3, #0]
 800ff46:	1dbb      	adds	r3, r7, #6
 800ff48:	1c0a      	adds	r2, r1, #0
 800ff4a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ff4c:	1dbb      	adds	r3, r7, #6
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	197b      	adds	r3, r7, r5
 800ff54:	8819      	ldrh	r1, [r3, #0]
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	4b23      	ldr	r3, [pc, #140]	@ (800ffe8 <I2C_RequestMemoryRead+0xc0>)
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f000 fe4d 	bl	8010bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ff62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff64:	6a39      	ldr	r1, [r7, #32]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	0018      	movs	r0, r3
 800ff6a:	f000 fc4a 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800ff6e:	1e03      	subs	r3, r0, #0
 800ff70:	d001      	beq.n	800ff76 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e033      	b.n	800ffde <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ff76:	1dbb      	adds	r3, r7, #6
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d107      	bne.n	800ff8e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ff7e:	2308      	movs	r3, #8
 800ff80:	18fb      	adds	r3, r7, r3
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ff8c:	e019      	b.n	800ffc2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ff8e:	2308      	movs	r3, #8
 800ff90:	18fb      	adds	r3, r7, r3
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	0a1b      	lsrs	r3, r3, #8
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ffa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffa2:	6a39      	ldr	r1, [r7, #32]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	f000 fc2b 	bl	8010802 <I2C_WaitOnTXISFlagUntilTimeout>
 800ffac:	1e03      	subs	r3, r0, #0
 800ffae:	d001      	beq.n	800ffb4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e014      	b.n	800ffde <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ffb4:	2308      	movs	r3, #8
 800ffb6:	18fb      	adds	r3, r7, r3
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ffc2:	6a3a      	ldr	r2, [r7, #32]
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	0013      	movs	r3, r2
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2140      	movs	r1, #64	@ 0x40
 800ffd0:	f000 fbd8 	bl	8010784 <I2C_WaitOnFlagUntilTimeout>
 800ffd4:	1e03      	subs	r3, r0, #0
 800ffd6:	d001      	beq.n	800ffdc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e000      	b.n	800ffde <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	0018      	movs	r0, r3
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	b004      	add	sp, #16
 800ffe4:	bdb0      	pop	{r4, r5, r7, pc}
 800ffe6:	46c0      	nop			@ (mov r8, r8)
 800ffe8:	80002000 	.word	0x80002000

0800ffec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ffec:	b5b0      	push	{r4, r5, r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2241      	movs	r2, #65	@ 0x41
 800fffa:	5c9b      	ldrb	r3, [r3, r2]
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	001a      	movs	r2, r3
 8010000:	2328      	movs	r3, #40	@ 0x28
 8010002:	4013      	ands	r3, r2
 8010004:	2b28      	cmp	r3, #40	@ 0x28
 8010006:	d000      	beq.n	801000a <I2C_ITAddrCplt+0x1e>
 8010008:	e088      	b.n	801011c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	0c1b      	lsrs	r3, r3, #16
 8010012:	b2da      	uxtb	r2, r3
 8010014:	250f      	movs	r5, #15
 8010016:	197b      	adds	r3, r7, r5
 8010018:	2101      	movs	r1, #1
 801001a:	400a      	ands	r2, r1
 801001c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	0c1b      	lsrs	r3, r3, #16
 8010026:	b29a      	uxth	r2, r3
 8010028:	200c      	movs	r0, #12
 801002a:	183b      	adds	r3, r7, r0
 801002c:	21fe      	movs	r1, #254	@ 0xfe
 801002e:	400a      	ands	r2, r1
 8010030:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	b29a      	uxth	r2, r3
 801003a:	240a      	movs	r4, #10
 801003c:	193b      	adds	r3, r7, r4
 801003e:	0592      	lsls	r2, r2, #22
 8010040:	0d92      	lsrs	r2, r2, #22
 8010042:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	b29a      	uxth	r2, r3
 801004c:	2308      	movs	r3, #8
 801004e:	18fb      	adds	r3, r7, r3
 8010050:	21fe      	movs	r1, #254	@ 0xfe
 8010052:	400a      	ands	r2, r1
 8010054:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	2b02      	cmp	r3, #2
 801005c:	d148      	bne.n	80100f0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801005e:	0021      	movs	r1, r4
 8010060:	187b      	adds	r3, r7, r1
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	09db      	lsrs	r3, r3, #7
 8010066:	b29a      	uxth	r2, r3
 8010068:	183b      	adds	r3, r7, r0
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	4053      	eors	r3, r2
 801006e:	b29b      	uxth	r3, r3
 8010070:	001a      	movs	r2, r3
 8010072:	2306      	movs	r3, #6
 8010074:	4013      	ands	r3, r2
 8010076:	d120      	bne.n	80100ba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010078:	183b      	adds	r3, r7, r0
 801007a:	187a      	adds	r2, r7, r1
 801007c:	8812      	ldrh	r2, [r2, #0]
 801007e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010084:	1c5a      	adds	r2, r3, #1
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801008e:	2b02      	cmp	r3, #2
 8010090:	d14c      	bne.n	801012c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2208      	movs	r2, #8
 801009e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2240      	movs	r2, #64	@ 0x40
 80100a4:	2100      	movs	r1, #0
 80100a6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80100a8:	183b      	adds	r3, r7, r0
 80100aa:	881a      	ldrh	r2, [r3, #0]
 80100ac:	197b      	adds	r3, r7, r5
 80100ae:	7819      	ldrb	r1, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	0018      	movs	r0, r3
 80100b4:	f7ff fdab 	bl	800fc0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80100b8:	e038      	b.n	801012c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80100ba:	240c      	movs	r4, #12
 80100bc:	193b      	adds	r3, r7, r4
 80100be:	2208      	movs	r2, #8
 80100c0:	18ba      	adds	r2, r7, r2
 80100c2:	8812      	ldrh	r2, [r2, #0]
 80100c4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80100c6:	2380      	movs	r3, #128	@ 0x80
 80100c8:	021a      	lsls	r2, r3, #8
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	0011      	movs	r1, r2
 80100ce:	0018      	movs	r0, r3
 80100d0:	f000 fdce 	bl	8010c70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2240      	movs	r2, #64	@ 0x40
 80100d8:	2100      	movs	r1, #0
 80100da:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80100dc:	193b      	adds	r3, r7, r4
 80100de:	881a      	ldrh	r2, [r3, #0]
 80100e0:	230f      	movs	r3, #15
 80100e2:	18fb      	adds	r3, r7, r3
 80100e4:	7819      	ldrb	r1, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	0018      	movs	r0, r3
 80100ea:	f7ff fd90 	bl	800fc0e <HAL_I2C_AddrCallback>
}
 80100ee:	e01d      	b.n	801012c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80100f0:	2380      	movs	r3, #128	@ 0x80
 80100f2:	021a      	lsls	r2, r3, #8
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	0011      	movs	r1, r2
 80100f8:	0018      	movs	r0, r3
 80100fa:	f000 fdb9 	bl	8010c70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2240      	movs	r2, #64	@ 0x40
 8010102:	2100      	movs	r1, #0
 8010104:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010106:	230c      	movs	r3, #12
 8010108:	18fb      	adds	r3, r7, r3
 801010a:	881a      	ldrh	r2, [r3, #0]
 801010c:	230f      	movs	r3, #15
 801010e:	18fb      	adds	r3, r7, r3
 8010110:	7819      	ldrb	r1, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	0018      	movs	r0, r3
 8010116:	f7ff fd7a 	bl	800fc0e <HAL_I2C_AddrCallback>
}
 801011a:	e007      	b.n	801012c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2208      	movs	r2, #8
 8010122:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2240      	movs	r2, #64	@ 0x40
 8010128:	2100      	movs	r1, #0
 801012a:	5499      	strb	r1, [r3, r2]
}
 801012c:	46c0      	nop			@ (mov r8, r8)
 801012e:	46bd      	mov	sp, r7
 8010130:	b004      	add	sp, #16
 8010132:	bdb0      	pop	{r4, r5, r7, pc}

08010134 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2242      	movs	r2, #66	@ 0x42
 8010148:	2100      	movs	r1, #0
 801014a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	2380      	movs	r3, #128	@ 0x80
 8010150:	01db      	lsls	r3, r3, #7
 8010152:	4013      	ands	r3, r2
 8010154:	d008      	beq.n	8010168 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4924      	ldr	r1, [pc, #144]	@ (80101f4 <I2C_ITSlaveSeqCplt+0xc0>)
 8010162:	400a      	ands	r2, r1
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	e00c      	b.n	8010182 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	2380      	movs	r3, #128	@ 0x80
 801016c:	021b      	lsls	r3, r3, #8
 801016e:	4013      	ands	r3, r2
 8010170:	d007      	beq.n	8010182 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	491e      	ldr	r1, [pc, #120]	@ (80101f8 <I2C_ITSlaveSeqCplt+0xc4>)
 801017e:	400a      	ands	r2, r1
 8010180:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2241      	movs	r2, #65	@ 0x41
 8010186:	5c9b      	ldrb	r3, [r3, r2]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	2b29      	cmp	r3, #41	@ 0x29
 801018c:	d114      	bne.n	80101b8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2241      	movs	r2, #65	@ 0x41
 8010192:	2128      	movs	r1, #40	@ 0x28
 8010194:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2221      	movs	r2, #33	@ 0x21
 801019a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2101      	movs	r1, #1
 80101a0:	0018      	movs	r0, r3
 80101a2:	f000 fd65 	bl	8010c70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2240      	movs	r2, #64	@ 0x40
 80101aa:	2100      	movs	r1, #0
 80101ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	0018      	movs	r0, r3
 80101b2:	f7ff fd1c 	bl	800fbee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80101b6:	e019      	b.n	80101ec <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2241      	movs	r2, #65	@ 0x41
 80101bc:	5c9b      	ldrb	r3, [r3, r2]
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80101c2:	d113      	bne.n	80101ec <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2241      	movs	r2, #65	@ 0x41
 80101c8:	2128      	movs	r1, #40	@ 0x28
 80101ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2222      	movs	r2, #34	@ 0x22
 80101d0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2102      	movs	r1, #2
 80101d6:	0018      	movs	r0, r3
 80101d8:	f000 fd4a 	bl	8010c70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2240      	movs	r2, #64	@ 0x40
 80101e0:	2100      	movs	r1, #0
 80101e2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	0018      	movs	r0, r3
 80101e8:	f7ff fd09 	bl	800fbfe <HAL_I2C_SlaveRxCpltCallback>
}
 80101ec:	46c0      	nop			@ (mov r8, r8)
 80101ee:	46bd      	mov	sp, r7
 80101f0:	b004      	add	sp, #16
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	ffffbfff 	.word	0xffffbfff
 80101f8:	ffff7fff 	.word	0xffff7fff

080101fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010212:	200f      	movs	r0, #15
 8010214:	183b      	adds	r3, r7, r0
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	2141      	movs	r1, #65	@ 0x41
 801021a:	5c52      	ldrb	r2, [r2, r1]
 801021c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2220      	movs	r2, #32
 8010224:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010226:	183b      	adds	r3, r7, r0
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	2b21      	cmp	r3, #33	@ 0x21
 801022c:	d003      	beq.n	8010236 <I2C_ITSlaveCplt+0x3a>
 801022e:	183b      	adds	r3, r7, r0
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b29      	cmp	r3, #41	@ 0x29
 8010234:	d109      	bne.n	801024a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010236:	4a7b      	ldr	r2, [pc, #492]	@ (8010424 <I2C_ITSlaveCplt+0x228>)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	0011      	movs	r1, r2
 801023c:	0018      	movs	r0, r3
 801023e:	f000 fd17 	bl	8010c70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2221      	movs	r2, #33	@ 0x21
 8010246:	631a      	str	r2, [r3, #48]	@ 0x30
 8010248:	e011      	b.n	801026e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801024a:	220f      	movs	r2, #15
 801024c:	18bb      	adds	r3, r7, r2
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	2b22      	cmp	r3, #34	@ 0x22
 8010252:	d003      	beq.n	801025c <I2C_ITSlaveCplt+0x60>
 8010254:	18bb      	adds	r3, r7, r2
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	2b2a      	cmp	r3, #42	@ 0x2a
 801025a:	d108      	bne.n	801026e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801025c:	4a72      	ldr	r2, [pc, #456]	@ (8010428 <I2C_ITSlaveCplt+0x22c>)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	0011      	movs	r1, r2
 8010262:	0018      	movs	r0, r3
 8010264:	f000 fd04 	bl	8010c70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2222      	movs	r2, #34	@ 0x22
 801026c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	685a      	ldr	r2, [r3, #4]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2180      	movs	r1, #128	@ 0x80
 801027a:	0209      	lsls	r1, r1, #8
 801027c:	430a      	orrs	r2, r1
 801027e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	685a      	ldr	r2, [r3, #4]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4968      	ldr	r1, [pc, #416]	@ (801042c <I2C_ITSlaveCplt+0x230>)
 801028c:	400a      	ands	r2, r1
 801028e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	0018      	movs	r0, r3
 8010294:	f000 fa35 	bl	8010702 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010298:	693a      	ldr	r2, [r7, #16]
 801029a:	2380      	movs	r3, #128	@ 0x80
 801029c:	01db      	lsls	r3, r3, #7
 801029e:	4013      	ands	r3, r2
 80102a0:	d013      	beq.n	80102ca <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4960      	ldr	r1, [pc, #384]	@ (8010430 <I2C_ITSlaveCplt+0x234>)
 80102ae:	400a      	ands	r2, r1
 80102b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d01f      	beq.n	80102fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80102c8:	e017      	b.n	80102fa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80102ca:	693a      	ldr	r2, [r7, #16]
 80102cc:	2380      	movs	r3, #128	@ 0x80
 80102ce:	021b      	lsls	r3, r3, #8
 80102d0:	4013      	ands	r3, r2
 80102d2:	d012      	beq.n	80102fa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4955      	ldr	r1, [pc, #340]	@ (8010434 <I2C_ITSlaveCplt+0x238>)
 80102e0:	400a      	ands	r2, r1
 80102e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d006      	beq.n	80102fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	2204      	movs	r2, #4
 80102fe:	4013      	ands	r3, r2
 8010300:	d020      	beq.n	8010344 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2204      	movs	r2, #4
 8010306:	4393      	bics	r3, r2
 8010308:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010314:	b2d2      	uxtb	r2, r2
 8010316:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031c:	1c5a      	adds	r2, r3, #1
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00c      	beq.n	8010344 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801032e:	3b01      	subs	r3, #1
 8010330:	b29a      	uxth	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801033a:	b29b      	uxth	r3, r3
 801033c:	3b01      	subs	r3, #1
 801033e:	b29a      	uxth	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010348:	b29b      	uxth	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d005      	beq.n	801035a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010352:	2204      	movs	r2, #4
 8010354:	431a      	orrs	r2, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2242      	movs	r2, #66	@ 0x42
 801035e:	2100      	movs	r1, #0
 8010360:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801036c:	2b00      	cmp	r3, #0
 801036e:	d013      	beq.n	8010398 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	0011      	movs	r1, r2
 8010378:	0018      	movs	r0, r3
 801037a:	f000 f8b7 	bl	80104ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2241      	movs	r2, #65	@ 0x41
 8010382:	5c9b      	ldrb	r3, [r3, r2]
 8010384:	b2db      	uxtb	r3, r3
 8010386:	2b28      	cmp	r3, #40	@ 0x28
 8010388:	d147      	bne.n	801041a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	0011      	movs	r1, r2
 8010390:	0018      	movs	r0, r3
 8010392:	f000 f853 	bl	801043c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010396:	e040      	b.n	801041a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801039c:	4a26      	ldr	r2, [pc, #152]	@ (8010438 <I2C_ITSlaveCplt+0x23c>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d016      	beq.n	80103d0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	0018      	movs	r0, r3
 80103a6:	f7ff fec5 	bl	8010134 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4a22      	ldr	r2, [pc, #136]	@ (8010438 <I2C_ITSlaveCplt+0x23c>)
 80103ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2241      	movs	r2, #65	@ 0x41
 80103b4:	2120      	movs	r1, #32
 80103b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2240      	movs	r2, #64	@ 0x40
 80103c2:	2100      	movs	r1, #0
 80103c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	0018      	movs	r0, r3
 80103ca:	f7ff fc30 	bl	800fc2e <HAL_I2C_ListenCpltCallback>
}
 80103ce:	e024      	b.n	801041a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2241      	movs	r2, #65	@ 0x41
 80103d4:	5c9b      	ldrb	r3, [r3, r2]
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	2b22      	cmp	r3, #34	@ 0x22
 80103da:	d10f      	bne.n	80103fc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2241      	movs	r2, #65	@ 0x41
 80103e0:	2120      	movs	r1, #32
 80103e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2240      	movs	r2, #64	@ 0x40
 80103ee:	2100      	movs	r1, #0
 80103f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	0018      	movs	r0, r3
 80103f6:	f7ff fc02 	bl	800fbfe <HAL_I2C_SlaveRxCpltCallback>
}
 80103fa:	e00e      	b.n	801041a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2241      	movs	r2, #65	@ 0x41
 8010400:	2120      	movs	r1, #32
 8010402:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2240      	movs	r2, #64	@ 0x40
 801040e:	2100      	movs	r1, #0
 8010410:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	0018      	movs	r0, r3
 8010416:	f7ff fbea 	bl	800fbee <HAL_I2C_SlaveTxCpltCallback>
}
 801041a:	46c0      	nop			@ (mov r8, r8)
 801041c:	46bd      	mov	sp, r7
 801041e:	b006      	add	sp, #24
 8010420:	bd80      	pop	{r7, pc}
 8010422:	46c0      	nop			@ (mov r8, r8)
 8010424:	00008001 	.word	0x00008001
 8010428:	00008002 	.word	0x00008002
 801042c:	fe00e800 	.word	0xfe00e800
 8010430:	ffffbfff 	.word	0xffffbfff
 8010434:	ffff7fff 	.word	0xffff7fff
 8010438:	ffff0000 	.word	0xffff0000

0801043c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4a26      	ldr	r2, [pc, #152]	@ (80104e4 <I2C_ITListenCplt+0xa8>)
 801044a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2241      	movs	r2, #65	@ 0x41
 8010456:	2120      	movs	r1, #32
 8010458:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2242      	movs	r2, #66	@ 0x42
 801045e:	2100      	movs	r1, #0
 8010460:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	2204      	movs	r2, #4
 801046c:	4013      	ands	r3, r2
 801046e:	d022      	beq.n	80104b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801047a:	b2d2      	uxtb	r2, r2
 801047c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801048c:	2b00      	cmp	r3, #0
 801048e:	d012      	beq.n	80104b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010494:	3b01      	subs	r3, #1
 8010496:	b29a      	uxth	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	3b01      	subs	r3, #1
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ae:	2204      	movs	r2, #4
 80104b0:	431a      	orrs	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80104b6:	4a0c      	ldr	r2, [pc, #48]	@ (80104e8 <I2C_ITListenCplt+0xac>)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	0011      	movs	r1, r2
 80104bc:	0018      	movs	r0, r3
 80104be:	f000 fbd7 	bl	8010c70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2210      	movs	r2, #16
 80104c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2240      	movs	r2, #64	@ 0x40
 80104ce:	2100      	movs	r1, #0
 80104d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	0018      	movs	r0, r3
 80104d6:	f7ff fbaa 	bl	800fc2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80104da:	46c0      	nop			@ (mov r8, r8)
 80104dc:	46bd      	mov	sp, r7
 80104de:	b002      	add	sp, #8
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	46c0      	nop			@ (mov r8, r8)
 80104e4:	ffff0000 	.word	0xffff0000
 80104e8:	00008003 	.word	0x00008003

080104ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80104f6:	200f      	movs	r0, #15
 80104f8:	183b      	adds	r3, r7, r0
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	2141      	movs	r1, #65	@ 0x41
 80104fe:	5c52      	ldrb	r2, [r2, r1]
 8010500:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2242      	movs	r2, #66	@ 0x42
 8010506:	2100      	movs	r1, #0
 8010508:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a62      	ldr	r2, [pc, #392]	@ (8010698 <I2C_ITError+0x1ac>)
 801050e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	431a      	orrs	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010522:	183b      	adds	r3, r7, r0
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	2b28      	cmp	r3, #40	@ 0x28
 8010528:	d007      	beq.n	801053a <I2C_ITError+0x4e>
 801052a:	183b      	adds	r3, r7, r0
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	2b29      	cmp	r3, #41	@ 0x29
 8010530:	d003      	beq.n	801053a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010532:	183b      	adds	r3, r7, r0
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	2b2a      	cmp	r3, #42	@ 0x2a
 8010538:	d10c      	bne.n	8010554 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2103      	movs	r1, #3
 801053e:	0018      	movs	r0, r3
 8010540:	f000 fb96 	bl	8010c70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2241      	movs	r2, #65	@ 0x41
 8010548:	2128      	movs	r1, #40	@ 0x28
 801054a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a53      	ldr	r2, [pc, #332]	@ (801069c <I2C_ITError+0x1b0>)
 8010550:	635a      	str	r2, [r3, #52]	@ 0x34
 8010552:	e012      	b.n	801057a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010554:	4a52      	ldr	r2, [pc, #328]	@ (80106a0 <I2C_ITError+0x1b4>)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	0011      	movs	r1, r2
 801055a:	0018      	movs	r0, r3
 801055c:	f000 fb88 	bl	8010c70 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2241      	movs	r2, #65	@ 0x41
 8010564:	5c9b      	ldrb	r3, [r3, r2]
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b60      	cmp	r3, #96	@ 0x60
 801056a:	d003      	beq.n	8010574 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2241      	movs	r2, #65	@ 0x41
 8010570:	2120      	movs	r1, #32
 8010572:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801057e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010584:	2b00      	cmp	r3, #0
 8010586:	d03b      	beq.n	8010600 <I2C_ITError+0x114>
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2b11      	cmp	r3, #17
 801058c:	d002      	beq.n	8010594 <I2C_ITError+0xa8>
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2b21      	cmp	r3, #33	@ 0x21
 8010592:	d135      	bne.n	8010600 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	2380      	movs	r3, #128	@ 0x80
 801059c:	01db      	lsls	r3, r3, #7
 801059e:	401a      	ands	r2, r3
 80105a0:	2380      	movs	r3, #128	@ 0x80
 80105a2:	01db      	lsls	r3, r3, #7
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d107      	bne.n	80105b8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	493c      	ldr	r1, [pc, #240]	@ (80106a4 <I2C_ITError+0x1b8>)
 80105b4:	400a      	ands	r2, r1
 80105b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105bc:	0018      	movs	r0, r3
 80105be:	f7fe fb57 	bl	800ec70 <HAL_DMA_GetState>
 80105c2:	0003      	movs	r3, r0
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d016      	beq.n	80105f6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105cc:	4a36      	ldr	r2, [pc, #216]	@ (80106a8 <I2C_ITError+0x1bc>)
 80105ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2240      	movs	r2, #64	@ 0x40
 80105d4:	2100      	movs	r1, #0
 80105d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105dc:	0018      	movs	r0, r3
 80105de:	f7fe fa2b 	bl	800ea38 <HAL_DMA_Abort_IT>
 80105e2:	1e03      	subs	r3, r0, #0
 80105e4:	d051      	beq.n	801068a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105f0:	0018      	movs	r0, r3
 80105f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105f4:	e049      	b.n	801068a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	0018      	movs	r0, r3
 80105fa:	f000 f859 	bl	80106b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105fe:	e044      	b.n	801068a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010604:	2b00      	cmp	r3, #0
 8010606:	d03b      	beq.n	8010680 <I2C_ITError+0x194>
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b12      	cmp	r3, #18
 801060c:	d002      	beq.n	8010614 <I2C_ITError+0x128>
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	2b22      	cmp	r3, #34	@ 0x22
 8010612:	d135      	bne.n	8010680 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	2380      	movs	r3, #128	@ 0x80
 801061c:	021b      	lsls	r3, r3, #8
 801061e:	401a      	ands	r2, r3
 8010620:	2380      	movs	r3, #128	@ 0x80
 8010622:	021b      	lsls	r3, r3, #8
 8010624:	429a      	cmp	r2, r3
 8010626:	d107      	bne.n	8010638 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	491e      	ldr	r1, [pc, #120]	@ (80106ac <I2C_ITError+0x1c0>)
 8010634:	400a      	ands	r2, r1
 8010636:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801063c:	0018      	movs	r0, r3
 801063e:	f7fe fb17 	bl	800ec70 <HAL_DMA_GetState>
 8010642:	0003      	movs	r3, r0
 8010644:	2b01      	cmp	r3, #1
 8010646:	d016      	beq.n	8010676 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801064c:	4a16      	ldr	r2, [pc, #88]	@ (80106a8 <I2C_ITError+0x1bc>)
 801064e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2240      	movs	r2, #64	@ 0x40
 8010654:	2100      	movs	r1, #0
 8010656:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801065c:	0018      	movs	r0, r3
 801065e:	f7fe f9eb 	bl	800ea38 <HAL_DMA_Abort_IT>
 8010662:	1e03      	subs	r3, r0, #0
 8010664:	d013      	beq.n	801068e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801066a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010670:	0018      	movs	r0, r3
 8010672:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010674:	e00b      	b.n	801068e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	0018      	movs	r0, r3
 801067a:	f000 f819 	bl	80106b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801067e:	e006      	b.n	801068e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	0018      	movs	r0, r3
 8010684:	f000 f814 	bl	80106b0 <I2C_TreatErrorCallback>
  }
}
 8010688:	e002      	b.n	8010690 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801068a:	46c0      	nop			@ (mov r8, r8)
 801068c:	e000      	b.n	8010690 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801068e:	46c0      	nop			@ (mov r8, r8)
}
 8010690:	46c0      	nop			@ (mov r8, r8)
 8010692:	46bd      	mov	sp, r7
 8010694:	b004      	add	sp, #16
 8010696:	bd80      	pop	{r7, pc}
 8010698:	ffff0000 	.word	0xffff0000
 801069c:	0800fc61 	.word	0x0800fc61
 80106a0:	00008003 	.word	0x00008003
 80106a4:	ffffbfff 	.word	0xffffbfff
 80106a8:	08010747 	.word	0x08010747
 80106ac:	ffff7fff 	.word	0xffff7fff

080106b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2241      	movs	r2, #65	@ 0x41
 80106bc:	5c9b      	ldrb	r3, [r3, r2]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b60      	cmp	r3, #96	@ 0x60
 80106c2:	d10f      	bne.n	80106e4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2241      	movs	r2, #65	@ 0x41
 80106c8:	2120      	movs	r1, #32
 80106ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2240      	movs	r2, #64	@ 0x40
 80106d6:	2100      	movs	r1, #0
 80106d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	0018      	movs	r0, r3
 80106de:	f7ff fab6 	bl	800fc4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106e2:	e00a      	b.n	80106fa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2240      	movs	r2, #64	@ 0x40
 80106ee:	2100      	movs	r1, #0
 80106f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	0018      	movs	r0, r3
 80106f6:	f7ff faa2 	bl	800fc3e <HAL_I2C_ErrorCallback>
}
 80106fa:	46c0      	nop			@ (mov r8, r8)
 80106fc:	46bd      	mov	sp, r7
 80106fe:	b002      	add	sp, #8
 8010700:	bd80      	pop	{r7, pc}

08010702 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	2202      	movs	r2, #2
 8010712:	4013      	ands	r3, r2
 8010714:	2b02      	cmp	r3, #2
 8010716:	d103      	bne.n	8010720 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2200      	movs	r2, #0
 801071e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	699b      	ldr	r3, [r3, #24]
 8010726:	2201      	movs	r2, #1
 8010728:	4013      	ands	r3, r2
 801072a:	2b01      	cmp	r3, #1
 801072c:	d007      	beq.n	801073e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	699a      	ldr	r2, [r3, #24]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2101      	movs	r1, #1
 801073a:	430a      	orrs	r2, r1
 801073c:	619a      	str	r2, [r3, #24]
  }
}
 801073e:	46c0      	nop			@ (mov r8, r8)
 8010740:	46bd      	mov	sp, r7
 8010742:	b002      	add	sp, #8
 8010744:	bd80      	pop	{r7, pc}

08010746 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b084      	sub	sp, #16
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010752:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010758:	2b00      	cmp	r3, #0
 801075a:	d003      	beq.n	8010764 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010760:	2200      	movs	r2, #0
 8010762:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010770:	2200      	movs	r2, #0
 8010772:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	0018      	movs	r0, r3
 8010778:	f7ff ff9a 	bl	80106b0 <I2C_TreatErrorCallback>
}
 801077c:	46c0      	nop			@ (mov r8, r8)
 801077e:	46bd      	mov	sp, r7
 8010780:	b004      	add	sp, #16
 8010782:	bd80      	pop	{r7, pc}

08010784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	603b      	str	r3, [r7, #0]
 8010790:	1dfb      	adds	r3, r7, #7
 8010792:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010794:	e021      	b.n	80107da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	3301      	adds	r3, #1
 801079a:	d01e      	beq.n	80107da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801079c:	f7fd feb8 	bl	800e510 <HAL_GetTick>
 80107a0:	0002      	movs	r2, r0
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d302      	bcc.n	80107b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d113      	bne.n	80107da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107b6:	2220      	movs	r2, #32
 80107b8:	431a      	orrs	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2241      	movs	r2, #65	@ 0x41
 80107c2:	2120      	movs	r1, #32
 80107c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2242      	movs	r2, #66	@ 0x42
 80107ca:	2100      	movs	r1, #0
 80107cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2240      	movs	r2, #64	@ 0x40
 80107d2:	2100      	movs	r1, #0
 80107d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e00f      	b.n	80107fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	4013      	ands	r3, r2
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	425a      	negs	r2, r3
 80107ea:	4153      	adcs	r3, r2
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	001a      	movs	r2, r3
 80107f0:	1dfb      	adds	r3, r7, #7
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d0ce      	beq.n	8010796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	0018      	movs	r0, r3
 80107fc:	46bd      	mov	sp, r7
 80107fe:	b004      	add	sp, #16
 8010800:	bd80      	pop	{r7, pc}

08010802 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	60f8      	str	r0, [r7, #12]
 801080a:	60b9      	str	r1, [r7, #8]
 801080c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801080e:	e02b      	b.n	8010868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	0018      	movs	r0, r3
 8010818:	f000 f8e8 	bl	80109ec <I2C_IsErrorOccurred>
 801081c:	1e03      	subs	r3, r0, #0
 801081e:	d001      	beq.n	8010824 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	e029      	b.n	8010878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	3301      	adds	r3, #1
 8010828:	d01e      	beq.n	8010868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801082a:	f7fd fe71 	bl	800e510 <HAL_GetTick>
 801082e:	0002      	movs	r2, r0
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	429a      	cmp	r2, r3
 8010838:	d302      	bcc.n	8010840 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d113      	bne.n	8010868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010844:	2220      	movs	r2, #32
 8010846:	431a      	orrs	r2, r3
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2241      	movs	r2, #65	@ 0x41
 8010850:	2120      	movs	r1, #32
 8010852:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2242      	movs	r2, #66	@ 0x42
 8010858:	2100      	movs	r1, #0
 801085a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2240      	movs	r2, #64	@ 0x40
 8010860:	2100      	movs	r1, #0
 8010862:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010864:	2301      	movs	r3, #1
 8010866:	e007      	b.n	8010878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	699b      	ldr	r3, [r3, #24]
 801086e:	2202      	movs	r2, #2
 8010870:	4013      	ands	r3, r2
 8010872:	2b02      	cmp	r3, #2
 8010874:	d1cc      	bne.n	8010810 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	0018      	movs	r0, r3
 801087a:	46bd      	mov	sp, r7
 801087c:	b004      	add	sp, #16
 801087e:	bd80      	pop	{r7, pc}

08010880 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801088c:	e028      	b.n	80108e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	0018      	movs	r0, r3
 8010896:	f000 f8a9 	bl	80109ec <I2C_IsErrorOccurred>
 801089a:	1e03      	subs	r3, r0, #0
 801089c:	d001      	beq.n	80108a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801089e:	2301      	movs	r3, #1
 80108a0:	e026      	b.n	80108f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108a2:	f7fd fe35 	bl	800e510 <HAL_GetTick>
 80108a6:	0002      	movs	r2, r0
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d302      	bcc.n	80108b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d113      	bne.n	80108e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108bc:	2220      	movs	r2, #32
 80108be:	431a      	orrs	r2, r3
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2241      	movs	r2, #65	@ 0x41
 80108c8:	2120      	movs	r1, #32
 80108ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2242      	movs	r2, #66	@ 0x42
 80108d0:	2100      	movs	r1, #0
 80108d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2240      	movs	r2, #64	@ 0x40
 80108d8:	2100      	movs	r1, #0
 80108da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80108dc:	2301      	movs	r3, #1
 80108de:	e007      	b.n	80108f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	699b      	ldr	r3, [r3, #24]
 80108e6:	2220      	movs	r2, #32
 80108e8:	4013      	ands	r3, r2
 80108ea:	2b20      	cmp	r3, #32
 80108ec:	d1cf      	bne.n	801088e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	0018      	movs	r0, r3
 80108f2:	46bd      	mov	sp, r7
 80108f4:	b004      	add	sp, #16
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010904:	e064      	b.n	80109d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	68b9      	ldr	r1, [r7, #8]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	0018      	movs	r0, r3
 801090e:	f000 f86d 	bl	80109ec <I2C_IsErrorOccurred>
 8010912:	1e03      	subs	r3, r0, #0
 8010914:	d001      	beq.n	801091a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010916:	2301      	movs	r3, #1
 8010918:	e062      	b.n	80109e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	2220      	movs	r2, #32
 8010922:	4013      	ands	r3, r2
 8010924:	2b20      	cmp	r3, #32
 8010926:	d138      	bne.n	801099a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	2204      	movs	r2, #4
 8010930:	4013      	ands	r3, r2
 8010932:	2b04      	cmp	r3, #4
 8010934:	d105      	bne.n	8010942 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801093e:	2300      	movs	r3, #0
 8010940:	e04e      	b.n	80109e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	2210      	movs	r2, #16
 801094a:	4013      	ands	r3, r2
 801094c:	2b10      	cmp	r3, #16
 801094e:	d107      	bne.n	8010960 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2210      	movs	r2, #16
 8010956:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2204      	movs	r2, #4
 801095c:	645a      	str	r2, [r3, #68]	@ 0x44
 801095e:	e002      	b.n	8010966 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2220      	movs	r2, #32
 801096c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	491b      	ldr	r1, [pc, #108]	@ (80109e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 801097a:	400a      	ands	r2, r1
 801097c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2241      	movs	r2, #65	@ 0x41
 8010982:	2120      	movs	r1, #32
 8010984:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2242      	movs	r2, #66	@ 0x42
 801098a:	2100      	movs	r1, #0
 801098c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2240      	movs	r2, #64	@ 0x40
 8010992:	2100      	movs	r1, #0
 8010994:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010996:	2301      	movs	r3, #1
 8010998:	e022      	b.n	80109e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801099a:	f7fd fdb9 	bl	800e510 <HAL_GetTick>
 801099e:	0002      	movs	r2, r0
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d302      	bcc.n	80109b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10f      	bne.n	80109d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109b4:	2220      	movs	r2, #32
 80109b6:	431a      	orrs	r2, r3
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2241      	movs	r2, #65	@ 0x41
 80109c0:	2120      	movs	r1, #32
 80109c2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2240      	movs	r2, #64	@ 0x40
 80109c8:	2100      	movs	r1, #0
 80109ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80109cc:	2301      	movs	r3, #1
 80109ce:	e007      	b.n	80109e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	699b      	ldr	r3, [r3, #24]
 80109d6:	2204      	movs	r2, #4
 80109d8:	4013      	ands	r3, r2
 80109da:	2b04      	cmp	r3, #4
 80109dc:	d193      	bne.n	8010906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	0018      	movs	r0, r3
 80109e2:	46bd      	mov	sp, r7
 80109e4:	b004      	add	sp, #16
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	fe00e800 	.word	0xfe00e800

080109ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	@ 0x28
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80109f8:	2327      	movs	r3, #39	@ 0x27
 80109fa:	18fb      	adds	r3, r7, r3
 80109fc:	2200      	movs	r2, #0
 80109fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	2210      	movs	r2, #16
 8010a14:	4013      	ands	r3, r2
 8010a16:	d100      	bne.n	8010a1a <I2C_IsErrorOccurred+0x2e>
 8010a18:	e08a      	b.n	8010b30 <I2C_IsErrorOccurred+0x144>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2210      	movs	r2, #16
 8010a20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010a22:	e068      	b.n	8010af6 <I2C_IsErrorOccurred+0x10a>
 8010a24:	2227      	movs	r2, #39	@ 0x27
 8010a26:	18bb      	adds	r3, r7, r2
 8010a28:	18ba      	adds	r2, r7, r2
 8010a2a:	7812      	ldrb	r2, [r2, #0]
 8010a2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	3301      	adds	r3, #1
 8010a32:	d060      	beq.n	8010af6 <I2C_IsErrorOccurred+0x10a>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010a34:	f7fd fd6c 	bl	800e510 <HAL_GetTick>
 8010a38:	0002      	movs	r2, r0
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d302      	bcc.n	8010a4a <I2C_IsErrorOccurred+0x5e>
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d155      	bne.n	8010af6 <I2C_IsErrorOccurred+0x10a>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	685a      	ldr	r2, [r3, #4]
 8010a50:	2380      	movs	r3, #128	@ 0x80
 8010a52:	01db      	lsls	r3, r3, #7
 8010a54:	4013      	ands	r3, r2
 8010a56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010a58:	2013      	movs	r0, #19
 8010a5a:	183b      	adds	r3, r7, r0
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	2142      	movs	r1, #66	@ 0x42
 8010a60:	5c52      	ldrb	r2, [r2, r1]
 8010a62:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	699a      	ldr	r2, [r3, #24]
 8010a6a:	2380      	movs	r3, #128	@ 0x80
 8010a6c:	021b      	lsls	r3, r3, #8
 8010a6e:	401a      	ands	r2, r3
 8010a70:	2380      	movs	r3, #128	@ 0x80
 8010a72:	021b      	lsls	r3, r3, #8
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d137      	bne.n	8010ae8 <I2C_IsErrorOccurred+0xfc>
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	2380      	movs	r3, #128	@ 0x80
 8010a7c:	01db      	lsls	r3, r3, #7
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d032      	beq.n	8010ae8 <I2C_IsErrorOccurred+0xfc>
              (tmp1 != I2C_CR2_STOP) && \
 8010a82:	183b      	adds	r3, r7, r0
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	2b20      	cmp	r3, #32
 8010a88:	d02e      	beq.n	8010ae8 <I2C_IsErrorOccurred+0xfc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	685a      	ldr	r2, [r3, #4]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2180      	movs	r1, #128	@ 0x80
 8010a96:	01c9      	lsls	r1, r1, #7
 8010a98:	430a      	orrs	r2, r1
 8010a9a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010a9c:	f7fd fd38 	bl	800e510 <HAL_GetTick>
 8010aa0:	0003      	movs	r3, r0
 8010aa2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010aa4:	e020      	b.n	8010ae8 <I2C_IsErrorOccurred+0xfc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010aa6:	f7fd fd33 	bl	800e510 <HAL_GetTick>
 8010aaa:	0002      	movs	r2, r0
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	2027      	movs	r0, #39	@ 0x27
 8010ab2:	183a      	adds	r2, r7, r0
 8010ab4:	1839      	adds	r1, r7, r0
 8010ab6:	7809      	ldrb	r1, [r1, #0]
 8010ab8:	7011      	strb	r1, [r2, #0]
 8010aba:	2b19      	cmp	r3, #25
 8010abc:	d914      	bls.n	8010ae8 <I2C_IsErrorOccurred+0xfc>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ac2:	2220      	movs	r2, #32
 8010ac4:	431a      	orrs	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2241      	movs	r2, #65	@ 0x41
 8010ace:	2120      	movs	r1, #32
 8010ad0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2242      	movs	r2, #66	@ 0x42
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2240      	movs	r2, #64	@ 0x40
 8010ade:	2100      	movs	r1, #0
 8010ae0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8010ae2:	183b      	adds	r3, r7, r0
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	2220      	movs	r2, #32
 8010af0:	4013      	ands	r3, r2
 8010af2:	2b20      	cmp	r3, #32
 8010af4:	d1d7      	bne.n	8010aa6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	699b      	ldr	r3, [r3, #24]
 8010afc:	2220      	movs	r2, #32
 8010afe:	4013      	ands	r3, r2
 8010b00:	2b20      	cmp	r3, #32
 8010b02:	d004      	beq.n	8010b0e <I2C_IsErrorOccurred+0x122>
 8010b04:	2327      	movs	r3, #39	@ 0x27
 8010b06:	18fb      	adds	r3, r7, r3
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d08a      	beq.n	8010a24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010b0e:	2327      	movs	r3, #39	@ 0x27
 8010b10:	18fb      	adds	r3, r7, r3
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d103      	bne.n	8010b20 <I2C_IsErrorOccurred+0x134>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2220      	movs	r2, #32
 8010b1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	2204      	movs	r2, #4
 8010b24:	4313      	orrs	r3, r2
 8010b26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010b28:	2327      	movs	r3, #39	@ 0x27
 8010b2a:	18fb      	adds	r3, r7, r3
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	699b      	ldr	r3, [r3, #24]
 8010b36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010b38:	69ba      	ldr	r2, [r7, #24]
 8010b3a:	2380      	movs	r3, #128	@ 0x80
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	4013      	ands	r3, r2
 8010b40:	d00c      	beq.n	8010b5c <I2C_IsErrorOccurred+0x170>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	2201      	movs	r2, #1
 8010b46:	4313      	orrs	r3, r2
 8010b48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2280      	movs	r2, #128	@ 0x80
 8010b50:	0052      	lsls	r2, r2, #1
 8010b52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010b54:	2327      	movs	r3, #39	@ 0x27
 8010b56:	18fb      	adds	r3, r7, r3
 8010b58:	2201      	movs	r2, #1
 8010b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010b5c:	69ba      	ldr	r2, [r7, #24]
 8010b5e:	2380      	movs	r3, #128	@ 0x80
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	4013      	ands	r3, r2
 8010b64:	d00c      	beq.n	8010b80 <I2C_IsErrorOccurred+0x194>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010b66:	6a3b      	ldr	r3, [r7, #32]
 8010b68:	2208      	movs	r2, #8
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2280      	movs	r2, #128	@ 0x80
 8010b74:	00d2      	lsls	r2, r2, #3
 8010b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010b78:	2327      	movs	r3, #39	@ 0x27
 8010b7a:	18fb      	adds	r3, r7, r3
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010b80:	69ba      	ldr	r2, [r7, #24]
 8010b82:	2380      	movs	r3, #128	@ 0x80
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	4013      	ands	r3, r2
 8010b88:	d00c      	beq.n	8010ba4 <I2C_IsErrorOccurred+0x1b8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010b8a:	6a3b      	ldr	r3, [r7, #32]
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2280      	movs	r2, #128	@ 0x80
 8010b98:	0092      	lsls	r2, r2, #2
 8010b9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010b9c:	2327      	movs	r3, #39	@ 0x27
 8010b9e:	18fb      	adds	r3, r7, r3
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8010ba4:	2327      	movs	r3, #39	@ 0x27
 8010ba6:	18fb      	adds	r3, r7, r3
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d01d      	beq.n	8010bea <I2C_IsErrorOccurred+0x1fe>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	0018      	movs	r0, r3
 8010bb2:	f7ff fda6 	bl	8010702 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	685a      	ldr	r2, [r3, #4]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	490d      	ldr	r1, [pc, #52]	@ (8010bf8 <I2C_IsErrorOccurred+0x20c>)
 8010bc2:	400a      	ands	r2, r1
 8010bc4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010bca:	6a3b      	ldr	r3, [r7, #32]
 8010bcc:	431a      	orrs	r2, r3
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2241      	movs	r2, #65	@ 0x41
 8010bd6:	2120      	movs	r1, #32
 8010bd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2242      	movs	r2, #66	@ 0x42
 8010bde:	2100      	movs	r1, #0
 8010be0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2240      	movs	r2, #64	@ 0x40
 8010be6:	2100      	movs	r1, #0
 8010be8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010bea:	2327      	movs	r3, #39	@ 0x27
 8010bec:	18fb      	adds	r3, r7, r3
 8010bee:	781b      	ldrb	r3, [r3, #0]
}
 8010bf0:	0018      	movs	r0, r3
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	b00a      	add	sp, #40	@ 0x28
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	fe00e800 	.word	0xfe00e800

08010bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010bfc:	b590      	push	{r4, r7, lr}
 8010bfe:	b087      	sub	sp, #28
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	0008      	movs	r0, r1
 8010c06:	0011      	movs	r1, r2
 8010c08:	607b      	str	r3, [r7, #4]
 8010c0a:	240a      	movs	r4, #10
 8010c0c:	193b      	adds	r3, r7, r4
 8010c0e:	1c02      	adds	r2, r0, #0
 8010c10:	801a      	strh	r2, [r3, #0]
 8010c12:	2009      	movs	r0, #9
 8010c14:	183b      	adds	r3, r7, r0
 8010c16:	1c0a      	adds	r2, r1, #0
 8010c18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010c1a:	193b      	adds	r3, r7, r4
 8010c1c:	881b      	ldrh	r3, [r3, #0]
 8010c1e:	059b      	lsls	r3, r3, #22
 8010c20:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010c22:	183b      	adds	r3, r7, r0
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	0419      	lsls	r1, r3, #16
 8010c28:	23ff      	movs	r3, #255	@ 0xff
 8010c2a:	041b      	lsls	r3, r3, #16
 8010c2c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010c2e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c36:	4313      	orrs	r3, r2
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	085b      	lsrs	r3, r3, #1
 8010c3c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c46:	0d51      	lsrs	r1, r2, #21
 8010c48:	2280      	movs	r2, #128	@ 0x80
 8010c4a:	00d2      	lsls	r2, r2, #3
 8010c4c:	400a      	ands	r2, r1
 8010c4e:	4907      	ldr	r1, [pc, #28]	@ (8010c6c <I2C_TransferConfig+0x70>)
 8010c50:	430a      	orrs	r2, r1
 8010c52:	43d2      	mvns	r2, r2
 8010c54:	401a      	ands	r2, r3
 8010c56:	0011      	movs	r1, r2
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	697a      	ldr	r2, [r7, #20]
 8010c5e:	430a      	orrs	r2, r1
 8010c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010c62:	46c0      	nop			@ (mov r8, r8)
 8010c64:	46bd      	mov	sp, r7
 8010c66:	b007      	add	sp, #28
 8010c68:	bd90      	pop	{r4, r7, pc}
 8010c6a:	46c0      	nop			@ (mov r8, r8)
 8010c6c:	03ff63ff 	.word	0x03ff63ff

08010c70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	000a      	movs	r2, r1
 8010c7a:	1cbb      	adds	r3, r7, #2
 8010c7c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010c82:	1cbb      	adds	r3, r7, #2
 8010c84:	881b      	ldrh	r3, [r3, #0]
 8010c86:	2201      	movs	r2, #1
 8010c88:	4013      	ands	r3, r2
 8010c8a:	d010      	beq.n	8010cae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2242      	movs	r2, #66	@ 0x42
 8010c90:	4313      	orrs	r3, r2
 8010c92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2241      	movs	r2, #65	@ 0x41
 8010c98:	5c9b      	ldrb	r3, [r3, r2]
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	001a      	movs	r2, r3
 8010c9e:	2328      	movs	r3, #40	@ 0x28
 8010ca0:	4013      	ands	r3, r2
 8010ca2:	2b28      	cmp	r3, #40	@ 0x28
 8010ca4:	d003      	beq.n	8010cae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	22b0      	movs	r2, #176	@ 0xb0
 8010caa:	4313      	orrs	r3, r2
 8010cac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010cae:	1cbb      	adds	r3, r7, #2
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	2202      	movs	r2, #2
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	d010      	beq.n	8010cda <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2244      	movs	r2, #68	@ 0x44
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2241      	movs	r2, #65	@ 0x41
 8010cc4:	5c9b      	ldrb	r3, [r3, r2]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	001a      	movs	r2, r3
 8010cca:	2328      	movs	r3, #40	@ 0x28
 8010ccc:	4013      	ands	r3, r2
 8010cce:	2b28      	cmp	r3, #40	@ 0x28
 8010cd0:	d003      	beq.n	8010cda <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	22b0      	movs	r2, #176	@ 0xb0
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010cda:	1cbb      	adds	r3, r7, #2
 8010cdc:	2200      	movs	r2, #0
 8010cde:	5e9b      	ldrsh	r3, [r3, r2]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	da03      	bge.n	8010cec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	22b8      	movs	r2, #184	@ 0xb8
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010cec:	1cbb      	adds	r3, r7, #2
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	2b10      	cmp	r3, #16
 8010cf2:	d103      	bne.n	8010cfc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2290      	movs	r2, #144	@ 0x90
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010cfc:	1cbb      	adds	r3, r7, #2
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	2b20      	cmp	r3, #32
 8010d02:	d103      	bne.n	8010d0c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2220      	movs	r2, #32
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010d0c:	1cbb      	adds	r3, r7, #2
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	2b40      	cmp	r3, #64	@ 0x40
 8010d12:	d103      	bne.n	8010d1c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2240      	movs	r2, #64	@ 0x40
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	43d9      	mvns	r1, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	400a      	ands	r2, r1
 8010d2c:	601a      	str	r2, [r3, #0]
}
 8010d2e:	46c0      	nop			@ (mov r8, r8)
 8010d30:	46bd      	mov	sp, r7
 8010d32:	b004      	add	sp, #16
 8010d34:	bd80      	pop	{r7, pc}
	...

08010d38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2241      	movs	r2, #65	@ 0x41
 8010d46:	5c9b      	ldrb	r3, [r3, r2]
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2b20      	cmp	r3, #32
 8010d4c:	d138      	bne.n	8010dc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2240      	movs	r2, #64	@ 0x40
 8010d52:	5c9b      	ldrb	r3, [r3, r2]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d101      	bne.n	8010d5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010d58:	2302      	movs	r3, #2
 8010d5a:	e032      	b.n	8010dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2240      	movs	r2, #64	@ 0x40
 8010d60:	2101      	movs	r1, #1
 8010d62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2241      	movs	r2, #65	@ 0x41
 8010d68:	2124      	movs	r1, #36	@ 0x24
 8010d6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2101      	movs	r1, #1
 8010d78:	438a      	bics	r2, r1
 8010d7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4911      	ldr	r1, [pc, #68]	@ (8010dcc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8010d88:	400a      	ands	r2, r1
 8010d8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	6819      	ldr	r1, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2101      	movs	r1, #1
 8010da8:	430a      	orrs	r2, r1
 8010daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2241      	movs	r2, #65	@ 0x41
 8010db0:	2120      	movs	r1, #32
 8010db2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2240      	movs	r2, #64	@ 0x40
 8010db8:	2100      	movs	r1, #0
 8010dba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	e000      	b.n	8010dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010dc0:	2302      	movs	r3, #2
  }
}
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	b002      	add	sp, #8
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	46c0      	nop			@ (mov r8, r8)
 8010dcc:	ffffefff 	.word	0xffffefff

08010dd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2241      	movs	r2, #65	@ 0x41
 8010dde:	5c9b      	ldrb	r3, [r3, r2]
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	2b20      	cmp	r3, #32
 8010de4:	d139      	bne.n	8010e5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2240      	movs	r2, #64	@ 0x40
 8010dea:	5c9b      	ldrb	r3, [r3, r2]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d101      	bne.n	8010df4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010df0:	2302      	movs	r3, #2
 8010df2:	e033      	b.n	8010e5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2240      	movs	r2, #64	@ 0x40
 8010df8:	2101      	movs	r1, #1
 8010dfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2241      	movs	r2, #65	@ 0x41
 8010e00:	2124      	movs	r1, #36	@ 0x24
 8010e02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2101      	movs	r1, #1
 8010e10:	438a      	bics	r2, r1
 8010e12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	4a11      	ldr	r2, [pc, #68]	@ (8010e64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8010e20:	4013      	ands	r3, r2
 8010e22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	021b      	lsls	r3, r3, #8
 8010e28:	68fa      	ldr	r2, [r7, #12]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2101      	movs	r1, #1
 8010e42:	430a      	orrs	r2, r1
 8010e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2241      	movs	r2, #65	@ 0x41
 8010e4a:	2120      	movs	r1, #32
 8010e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2240      	movs	r2, #64	@ 0x40
 8010e52:	2100      	movs	r1, #0
 8010e54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e000      	b.n	8010e5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010e5a:	2302      	movs	r3, #2
  }
}
 8010e5c:	0018      	movs	r0, r3
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	b004      	add	sp, #16
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	fffff0ff 	.word	0xfffff0ff

08010e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8010e70:	4b19      	ldr	r3, [pc, #100]	@ (8010ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a19      	ldr	r2, [pc, #100]	@ (8010edc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8010e76:	4013      	ands	r3, r2
 8010e78:	0019      	movs	r1, r3
 8010e7a:	4b17      	ldr	r3, [pc, #92]	@ (8010ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	430a      	orrs	r2, r1
 8010e80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	2380      	movs	r3, #128	@ 0x80
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d11f      	bne.n	8010ecc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8010e8c:	4b14      	ldr	r3, [pc, #80]	@ (8010ee0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	0013      	movs	r3, r2
 8010e92:	005b      	lsls	r3, r3, #1
 8010e94:	189b      	adds	r3, r3, r2
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	4912      	ldr	r1, [pc, #72]	@ (8010ee4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8010e9a:	0018      	movs	r0, r3
 8010e9c:	f7ef f944 	bl	8000128 <__udivsi3>
 8010ea0:	0003      	movs	r3, r0
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010ea6:	e008      	b.n	8010eba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	60fb      	str	r3, [r7, #12]
 8010eb4:	e001      	b.n	8010eba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e009      	b.n	8010ece <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010eba:	4b07      	ldr	r3, [pc, #28]	@ (8010ed8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010ebc:	695a      	ldr	r2, [r3, #20]
 8010ebe:	2380      	movs	r3, #128	@ 0x80
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	401a      	ands	r2, r3
 8010ec4:	2380      	movs	r3, #128	@ 0x80
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d0ed      	beq.n	8010ea8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	0018      	movs	r0, r3
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	b004      	add	sp, #16
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	46c0      	nop			@ (mov r8, r8)
 8010ed8:	40007000 	.word	0x40007000
 8010edc:	fffff9ff 	.word	0xfffff9ff
 8010ee0:	20000548 	.word	0x20000548
 8010ee4:	000f4240 	.word	0x000f4240

08010ee8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8010eec:	4b03      	ldr	r3, [pc, #12]	@ (8010efc <LL_RCC_GetAPB1Prescaler+0x14>)
 8010eee:	689a      	ldr	r2, [r3, #8]
 8010ef0:	23e0      	movs	r3, #224	@ 0xe0
 8010ef2:	01db      	lsls	r3, r3, #7
 8010ef4:	4013      	ands	r3, r2
}
 8010ef6:	0018      	movs	r0, r3
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	40021000 	.word	0x40021000

08010f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b088      	sub	sp, #32
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e2fe      	b.n	8011510 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2201      	movs	r2, #1
 8010f18:	4013      	ands	r3, r2
 8010f1a:	d100      	bne.n	8010f1e <HAL_RCC_OscConfig+0x1e>
 8010f1c:	e07c      	b.n	8011018 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f1e:	4bc3      	ldr	r3, [pc, #780]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f20:	689b      	ldr	r3, [r3, #8]
 8010f22:	2238      	movs	r2, #56	@ 0x38
 8010f24:	4013      	ands	r3, r2
 8010f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010f28:	4bc0      	ldr	r3, [pc, #768]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	2203      	movs	r2, #3
 8010f2e:	4013      	ands	r3, r2
 8010f30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	2b10      	cmp	r3, #16
 8010f36:	d102      	bne.n	8010f3e <HAL_RCC_OscConfig+0x3e>
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	d002      	beq.n	8010f44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	2b08      	cmp	r3, #8
 8010f42:	d10b      	bne.n	8010f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f44:	4bb9      	ldr	r3, [pc, #740]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	2380      	movs	r3, #128	@ 0x80
 8010f4a:	029b      	lsls	r3, r3, #10
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	d062      	beq.n	8011016 <HAL_RCC_OscConfig+0x116>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d15e      	bne.n	8011016 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	e2d9      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	685a      	ldr	r2, [r3, #4]
 8010f60:	2380      	movs	r3, #128	@ 0x80
 8010f62:	025b      	lsls	r3, r3, #9
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d107      	bne.n	8010f78 <HAL_RCC_OscConfig+0x78>
 8010f68:	4bb0      	ldr	r3, [pc, #704]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	4baf      	ldr	r3, [pc, #700]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f6e:	2180      	movs	r1, #128	@ 0x80
 8010f70:	0249      	lsls	r1, r1, #9
 8010f72:	430a      	orrs	r2, r1
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	e020      	b.n	8010fba <HAL_RCC_OscConfig+0xba>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	23a0      	movs	r3, #160	@ 0xa0
 8010f7e:	02db      	lsls	r3, r3, #11
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d10e      	bne.n	8010fa2 <HAL_RCC_OscConfig+0xa2>
 8010f84:	4ba9      	ldr	r3, [pc, #676]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	4ba8      	ldr	r3, [pc, #672]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f8a:	2180      	movs	r1, #128	@ 0x80
 8010f8c:	02c9      	lsls	r1, r1, #11
 8010f8e:	430a      	orrs	r2, r1
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	4ba6      	ldr	r3, [pc, #664]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	4ba5      	ldr	r3, [pc, #660]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010f98:	2180      	movs	r1, #128	@ 0x80
 8010f9a:	0249      	lsls	r1, r1, #9
 8010f9c:	430a      	orrs	r2, r1
 8010f9e:	601a      	str	r2, [r3, #0]
 8010fa0:	e00b      	b.n	8010fba <HAL_RCC_OscConfig+0xba>
 8010fa2:	4ba2      	ldr	r3, [pc, #648]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	4ba1      	ldr	r3, [pc, #644]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010fa8:	49a1      	ldr	r1, [pc, #644]	@ (8011230 <HAL_RCC_OscConfig+0x330>)
 8010faa:	400a      	ands	r2, r1
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	4b9f      	ldr	r3, [pc, #636]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	4b9e      	ldr	r3, [pc, #632]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010fb4:	499f      	ldr	r1, [pc, #636]	@ (8011234 <HAL_RCC_OscConfig+0x334>)
 8010fb6:	400a      	ands	r2, r1
 8010fb8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d014      	beq.n	8010fec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fc2:	f7fd faa5 	bl	800e510 <HAL_GetTick>
 8010fc6:	0003      	movs	r3, r0
 8010fc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010fca:	e008      	b.n	8010fde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010fcc:	f7fd faa0 	bl	800e510 <HAL_GetTick>
 8010fd0:	0002      	movs	r2, r0
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	2b64      	cmp	r3, #100	@ 0x64
 8010fd8:	d901      	bls.n	8010fde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8010fda:	2303      	movs	r3, #3
 8010fdc:	e298      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010fde:	4b93      	ldr	r3, [pc, #588]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	2380      	movs	r3, #128	@ 0x80
 8010fe4:	029b      	lsls	r3, r3, #10
 8010fe6:	4013      	ands	r3, r2
 8010fe8:	d0f0      	beq.n	8010fcc <HAL_RCC_OscConfig+0xcc>
 8010fea:	e015      	b.n	8011018 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fec:	f7fd fa90 	bl	800e510 <HAL_GetTick>
 8010ff0:	0003      	movs	r3, r0
 8010ff2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010ff4:	e008      	b.n	8011008 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010ff6:	f7fd fa8b 	bl	800e510 <HAL_GetTick>
 8010ffa:	0002      	movs	r2, r0
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	2b64      	cmp	r3, #100	@ 0x64
 8011002:	d901      	bls.n	8011008 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8011004:	2303      	movs	r3, #3
 8011006:	e283      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011008:	4b88      	ldr	r3, [pc, #544]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	2380      	movs	r3, #128	@ 0x80
 801100e:	029b      	lsls	r3, r3, #10
 8011010:	4013      	ands	r3, r2
 8011012:	d1f0      	bne.n	8010ff6 <HAL_RCC_OscConfig+0xf6>
 8011014:	e000      	b.n	8011018 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011016:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2202      	movs	r2, #2
 801101e:	4013      	ands	r3, r2
 8011020:	d100      	bne.n	8011024 <HAL_RCC_OscConfig+0x124>
 8011022:	e099      	b.n	8011158 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011024:	4b81      	ldr	r3, [pc, #516]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	2238      	movs	r2, #56	@ 0x38
 801102a:	4013      	ands	r3, r2
 801102c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801102e:	4b7f      	ldr	r3, [pc, #508]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	2203      	movs	r2, #3
 8011034:	4013      	ands	r3, r2
 8011036:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	2b10      	cmp	r3, #16
 801103c:	d102      	bne.n	8011044 <HAL_RCC_OscConfig+0x144>
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b02      	cmp	r3, #2
 8011042:	d002      	beq.n	801104a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d135      	bne.n	80110b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801104a:	4b78      	ldr	r3, [pc, #480]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	2380      	movs	r3, #128	@ 0x80
 8011050:	00db      	lsls	r3, r3, #3
 8011052:	4013      	ands	r3, r2
 8011054:	d005      	beq.n	8011062 <HAL_RCC_OscConfig+0x162>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 801105e:	2301      	movs	r3, #1
 8011060:	e256      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011062:	4b72      	ldr	r3, [pc, #456]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	4a74      	ldr	r2, [pc, #464]	@ (8011238 <HAL_RCC_OscConfig+0x338>)
 8011068:	4013      	ands	r3, r2
 801106a:	0019      	movs	r1, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	021a      	lsls	r2, r3, #8
 8011072:	4b6e      	ldr	r3, [pc, #440]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011074:	430a      	orrs	r2, r1
 8011076:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d112      	bne.n	80110a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 801107e:	4b6b      	ldr	r3, [pc, #428]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4a6e      	ldr	r2, [pc, #440]	@ (801123c <HAL_RCC_OscConfig+0x33c>)
 8011084:	4013      	ands	r3, r2
 8011086:	0019      	movs	r1, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	691a      	ldr	r2, [r3, #16]
 801108c:	4b67      	ldr	r3, [pc, #412]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801108e:	430a      	orrs	r2, r1
 8011090:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8011092:	4b66      	ldr	r3, [pc, #408]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	0adb      	lsrs	r3, r3, #11
 8011098:	2207      	movs	r2, #7
 801109a:	4013      	ands	r3, r2
 801109c:	4a68      	ldr	r2, [pc, #416]	@ (8011240 <HAL_RCC_OscConfig+0x340>)
 801109e:	40da      	lsrs	r2, r3
 80110a0:	4b68      	ldr	r3, [pc, #416]	@ (8011244 <HAL_RCC_OscConfig+0x344>)
 80110a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80110a4:	4b68      	ldr	r3, [pc, #416]	@ (8011248 <HAL_RCC_OscConfig+0x348>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	0018      	movs	r0, r3
 80110aa:	f7fd f9d5 	bl	800e458 <HAL_InitTick>
 80110ae:	1e03      	subs	r3, r0, #0
 80110b0:	d051      	beq.n	8011156 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e22c      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d030      	beq.n	8011120 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80110be:	4b5b      	ldr	r3, [pc, #364]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a5e      	ldr	r2, [pc, #376]	@ (801123c <HAL_RCC_OscConfig+0x33c>)
 80110c4:	4013      	ands	r3, r2
 80110c6:	0019      	movs	r1, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	691a      	ldr	r2, [r3, #16]
 80110cc:	4b57      	ldr	r3, [pc, #348]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80110ce:	430a      	orrs	r2, r1
 80110d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80110d2:	4b56      	ldr	r3, [pc, #344]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	4b55      	ldr	r3, [pc, #340]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80110d8:	2180      	movs	r1, #128	@ 0x80
 80110da:	0049      	lsls	r1, r1, #1
 80110dc:	430a      	orrs	r2, r1
 80110de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110e0:	f7fd fa16 	bl	800e510 <HAL_GetTick>
 80110e4:	0003      	movs	r3, r0
 80110e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80110e8:	e008      	b.n	80110fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80110ea:	f7fd fa11 	bl	800e510 <HAL_GetTick>
 80110ee:	0002      	movs	r2, r0
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d901      	bls.n	80110fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e209      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80110fc:	4b4b      	ldr	r3, [pc, #300]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	2380      	movs	r3, #128	@ 0x80
 8011102:	00db      	lsls	r3, r3, #3
 8011104:	4013      	ands	r3, r2
 8011106:	d0f0      	beq.n	80110ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011108:	4b48      	ldr	r3, [pc, #288]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	4a4a      	ldr	r2, [pc, #296]	@ (8011238 <HAL_RCC_OscConfig+0x338>)
 801110e:	4013      	ands	r3, r2
 8011110:	0019      	movs	r1, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	695b      	ldr	r3, [r3, #20]
 8011116:	021a      	lsls	r2, r3, #8
 8011118:	4b44      	ldr	r3, [pc, #272]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801111a:	430a      	orrs	r2, r1
 801111c:	605a      	str	r2, [r3, #4]
 801111e:	e01b      	b.n	8011158 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8011120:	4b42      	ldr	r3, [pc, #264]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	4b41      	ldr	r3, [pc, #260]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011126:	4949      	ldr	r1, [pc, #292]	@ (801124c <HAL_RCC_OscConfig+0x34c>)
 8011128:	400a      	ands	r2, r1
 801112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801112c:	f7fd f9f0 	bl	800e510 <HAL_GetTick>
 8011130:	0003      	movs	r3, r0
 8011132:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011134:	e008      	b.n	8011148 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011136:	f7fd f9eb 	bl	800e510 <HAL_GetTick>
 801113a:	0002      	movs	r2, r0
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	2b02      	cmp	r3, #2
 8011142:	d901      	bls.n	8011148 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8011144:	2303      	movs	r3, #3
 8011146:	e1e3      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011148:	4b38      	ldr	r3, [pc, #224]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	2380      	movs	r3, #128	@ 0x80
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	4013      	ands	r3, r2
 8011152:	d1f0      	bne.n	8011136 <HAL_RCC_OscConfig+0x236>
 8011154:	e000      	b.n	8011158 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011156:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2208      	movs	r2, #8
 801115e:	4013      	ands	r3, r2
 8011160:	d047      	beq.n	80111f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8011162:	4b32      	ldr	r3, [pc, #200]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	2238      	movs	r2, #56	@ 0x38
 8011168:	4013      	ands	r3, r2
 801116a:	2b18      	cmp	r3, #24
 801116c:	d10a      	bne.n	8011184 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 801116e:	4b2f      	ldr	r3, [pc, #188]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011172:	2202      	movs	r2, #2
 8011174:	4013      	ands	r3, r2
 8011176:	d03c      	beq.n	80111f2 <HAL_RCC_OscConfig+0x2f2>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d138      	bne.n	80111f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8011180:	2301      	movs	r3, #1
 8011182:	e1c5      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	699b      	ldr	r3, [r3, #24]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d019      	beq.n	80111c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 801118c:	4b27      	ldr	r3, [pc, #156]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 801118e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011190:	4b26      	ldr	r3, [pc, #152]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011192:	2101      	movs	r1, #1
 8011194:	430a      	orrs	r2, r1
 8011196:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011198:	f7fd f9ba 	bl	800e510 <HAL_GetTick>
 801119c:	0003      	movs	r3, r0
 801119e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80111a0:	e008      	b.n	80111b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80111a2:	f7fd f9b5 	bl	800e510 <HAL_GetTick>
 80111a6:	0002      	movs	r2, r0
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d901      	bls.n	80111b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80111b0:	2303      	movs	r3, #3
 80111b2:	e1ad      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80111b4:	4b1d      	ldr	r3, [pc, #116]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80111b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80111b8:	2202      	movs	r2, #2
 80111ba:	4013      	ands	r3, r2
 80111bc:	d0f1      	beq.n	80111a2 <HAL_RCC_OscConfig+0x2a2>
 80111be:	e018      	b.n	80111f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80111c0:	4b1a      	ldr	r3, [pc, #104]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80111c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80111c4:	4b19      	ldr	r3, [pc, #100]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80111c6:	2101      	movs	r1, #1
 80111c8:	438a      	bics	r2, r1
 80111ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111cc:	f7fd f9a0 	bl	800e510 <HAL_GetTick>
 80111d0:	0003      	movs	r3, r0
 80111d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80111d4:	e008      	b.n	80111e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80111d6:	f7fd f99b 	bl	800e510 <HAL_GetTick>
 80111da:	0002      	movs	r2, r0
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d901      	bls.n	80111e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80111e4:	2303      	movs	r3, #3
 80111e6:	e193      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80111e8:	4b10      	ldr	r3, [pc, #64]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 80111ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80111ec:	2202      	movs	r2, #2
 80111ee:	4013      	ands	r3, r2
 80111f0:	d1f1      	bne.n	80111d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2204      	movs	r2, #4
 80111f8:	4013      	ands	r3, r2
 80111fa:	d100      	bne.n	80111fe <HAL_RCC_OscConfig+0x2fe>
 80111fc:	e0c6      	b.n	801138c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80111fe:	231f      	movs	r3, #31
 8011200:	18fb      	adds	r3, r7, r3
 8011202:	2200      	movs	r2, #0
 8011204:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8011206:	4b09      	ldr	r3, [pc, #36]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	2238      	movs	r2, #56	@ 0x38
 801120c:	4013      	ands	r3, r2
 801120e:	2b20      	cmp	r3, #32
 8011210:	d11e      	bne.n	8011250 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8011212:	4b06      	ldr	r3, [pc, #24]	@ (801122c <HAL_RCC_OscConfig+0x32c>)
 8011214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011216:	2202      	movs	r2, #2
 8011218:	4013      	ands	r3, r2
 801121a:	d100      	bne.n	801121e <HAL_RCC_OscConfig+0x31e>
 801121c:	e0b6      	b.n	801138c <HAL_RCC_OscConfig+0x48c>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d000      	beq.n	8011228 <HAL_RCC_OscConfig+0x328>
 8011226:	e0b1      	b.n	801138c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8011228:	2301      	movs	r3, #1
 801122a:	e171      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
 801122c:	40021000 	.word	0x40021000
 8011230:	fffeffff 	.word	0xfffeffff
 8011234:	fffbffff 	.word	0xfffbffff
 8011238:	ffff80ff 	.word	0xffff80ff
 801123c:	ffffc7ff 	.word	0xffffc7ff
 8011240:	00f42400 	.word	0x00f42400
 8011244:	20000548 	.word	0x20000548
 8011248:	2000054c 	.word	0x2000054c
 801124c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011250:	4bb1      	ldr	r3, [pc, #708]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011254:	2380      	movs	r3, #128	@ 0x80
 8011256:	055b      	lsls	r3, r3, #21
 8011258:	4013      	ands	r3, r2
 801125a:	d101      	bne.n	8011260 <HAL_RCC_OscConfig+0x360>
 801125c:	2301      	movs	r3, #1
 801125e:	e000      	b.n	8011262 <HAL_RCC_OscConfig+0x362>
 8011260:	2300      	movs	r3, #0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d011      	beq.n	801128a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8011266:	4bac      	ldr	r3, [pc, #688]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801126a:	4bab      	ldr	r3, [pc, #684]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801126c:	2180      	movs	r1, #128	@ 0x80
 801126e:	0549      	lsls	r1, r1, #21
 8011270:	430a      	orrs	r2, r1
 8011272:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011274:	4ba8      	ldr	r3, [pc, #672]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011278:	2380      	movs	r3, #128	@ 0x80
 801127a:	055b      	lsls	r3, r3, #21
 801127c:	4013      	ands	r3, r2
 801127e:	60fb      	str	r3, [r7, #12]
 8011280:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8011282:	231f      	movs	r3, #31
 8011284:	18fb      	adds	r3, r7, r3
 8011286:	2201      	movs	r2, #1
 8011288:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801128a:	4ba4      	ldr	r3, [pc, #656]	@ (801151c <HAL_RCC_OscConfig+0x61c>)
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	2380      	movs	r3, #128	@ 0x80
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	4013      	ands	r3, r2
 8011294:	d11a      	bne.n	80112cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011296:	4ba1      	ldr	r3, [pc, #644]	@ (801151c <HAL_RCC_OscConfig+0x61c>)
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	4ba0      	ldr	r3, [pc, #640]	@ (801151c <HAL_RCC_OscConfig+0x61c>)
 801129c:	2180      	movs	r1, #128	@ 0x80
 801129e:	0049      	lsls	r1, r1, #1
 80112a0:	430a      	orrs	r2, r1
 80112a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80112a4:	f7fd f934 	bl	800e510 <HAL_GetTick>
 80112a8:	0003      	movs	r3, r0
 80112aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80112ac:	e008      	b.n	80112c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80112ae:	f7fd f92f 	bl	800e510 <HAL_GetTick>
 80112b2:	0002      	movs	r2, r0
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d901      	bls.n	80112c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80112bc:	2303      	movs	r3, #3
 80112be:	e127      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80112c0:	4b96      	ldr	r3, [pc, #600]	@ (801151c <HAL_RCC_OscConfig+0x61c>)
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	2380      	movs	r3, #128	@ 0x80
 80112c6:	005b      	lsls	r3, r3, #1
 80112c8:	4013      	ands	r3, r2
 80112ca:	d0f0      	beq.n	80112ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d106      	bne.n	80112e2 <HAL_RCC_OscConfig+0x3e2>
 80112d4:	4b90      	ldr	r3, [pc, #576]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80112d8:	4b8f      	ldr	r3, [pc, #572]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112da:	2101      	movs	r1, #1
 80112dc:	430a      	orrs	r2, r1
 80112de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80112e0:	e01c      	b.n	801131c <HAL_RCC_OscConfig+0x41c>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	2b05      	cmp	r3, #5
 80112e8:	d10c      	bne.n	8011304 <HAL_RCC_OscConfig+0x404>
 80112ea:	4b8b      	ldr	r3, [pc, #556]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80112ee:	4b8a      	ldr	r3, [pc, #552]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112f0:	2104      	movs	r1, #4
 80112f2:	430a      	orrs	r2, r1
 80112f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80112f6:	4b88      	ldr	r3, [pc, #544]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80112fa:	4b87      	ldr	r3, [pc, #540]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80112fc:	2101      	movs	r1, #1
 80112fe:	430a      	orrs	r2, r1
 8011300:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011302:	e00b      	b.n	801131c <HAL_RCC_OscConfig+0x41c>
 8011304:	4b84      	ldr	r3, [pc, #528]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011308:	4b83      	ldr	r3, [pc, #524]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801130a:	2101      	movs	r1, #1
 801130c:	438a      	bics	r2, r1
 801130e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011310:	4b81      	ldr	r3, [pc, #516]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011314:	4b80      	ldr	r3, [pc, #512]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011316:	2104      	movs	r1, #4
 8011318:	438a      	bics	r2, r1
 801131a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d014      	beq.n	801134e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011324:	f7fd f8f4 	bl	800e510 <HAL_GetTick>
 8011328:	0003      	movs	r3, r0
 801132a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801132c:	e009      	b.n	8011342 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801132e:	f7fd f8ef 	bl	800e510 <HAL_GetTick>
 8011332:	0002      	movs	r2, r0
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	4a79      	ldr	r2, [pc, #484]	@ (8011520 <HAL_RCC_OscConfig+0x620>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d901      	bls.n	8011342 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 801133e:	2303      	movs	r3, #3
 8011340:	e0e6      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011342:	4b75      	ldr	r3, [pc, #468]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011346:	2202      	movs	r2, #2
 8011348:	4013      	ands	r3, r2
 801134a:	d0f0      	beq.n	801132e <HAL_RCC_OscConfig+0x42e>
 801134c:	e013      	b.n	8011376 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801134e:	f7fd f8df 	bl	800e510 <HAL_GetTick>
 8011352:	0003      	movs	r3, r0
 8011354:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011356:	e009      	b.n	801136c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011358:	f7fd f8da 	bl	800e510 <HAL_GetTick>
 801135c:	0002      	movs	r2, r0
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	4a6f      	ldr	r2, [pc, #444]	@ (8011520 <HAL_RCC_OscConfig+0x620>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d901      	bls.n	801136c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8011368:	2303      	movs	r3, #3
 801136a:	e0d1      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801136c:	4b6a      	ldr	r3, [pc, #424]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011370:	2202      	movs	r2, #2
 8011372:	4013      	ands	r3, r2
 8011374:	d1f0      	bne.n	8011358 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8011376:	231f      	movs	r3, #31
 8011378:	18fb      	adds	r3, r7, r3
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	2b01      	cmp	r3, #1
 801137e:	d105      	bne.n	801138c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8011380:	4b65      	ldr	r3, [pc, #404]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011384:	4b64      	ldr	r3, [pc, #400]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011386:	4967      	ldr	r1, [pc, #412]	@ (8011524 <HAL_RCC_OscConfig+0x624>)
 8011388:	400a      	ands	r2, r1
 801138a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d100      	bne.n	8011396 <HAL_RCC_OscConfig+0x496>
 8011394:	e0bb      	b.n	801150e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011396:	4b60      	ldr	r3, [pc, #384]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	2238      	movs	r2, #56	@ 0x38
 801139c:	4013      	ands	r3, r2
 801139e:	2b10      	cmp	r3, #16
 80113a0:	d100      	bne.n	80113a4 <HAL_RCC_OscConfig+0x4a4>
 80113a2:	e07b      	b.n	801149c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	69db      	ldr	r3, [r3, #28]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d156      	bne.n	801145a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80113ac:	4b5a      	ldr	r3, [pc, #360]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	4b59      	ldr	r3, [pc, #356]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80113b2:	495d      	ldr	r1, [pc, #372]	@ (8011528 <HAL_RCC_OscConfig+0x628>)
 80113b4:	400a      	ands	r2, r1
 80113b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113b8:	f7fd f8aa 	bl	800e510 <HAL_GetTick>
 80113bc:	0003      	movs	r3, r0
 80113be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113c0:	e008      	b.n	80113d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113c2:	f7fd f8a5 	bl	800e510 <HAL_GetTick>
 80113c6:	0002      	movs	r2, r0
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	2b02      	cmp	r3, #2
 80113ce:	d901      	bls.n	80113d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80113d0:	2303      	movs	r3, #3
 80113d2:	e09d      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113d4:	4b50      	ldr	r3, [pc, #320]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	2380      	movs	r3, #128	@ 0x80
 80113da:	049b      	lsls	r3, r3, #18
 80113dc:	4013      	ands	r3, r2
 80113de:	d1f0      	bne.n	80113c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80113e0:	4b4d      	ldr	r3, [pc, #308]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	4a51      	ldr	r2, [pc, #324]	@ (801152c <HAL_RCC_OscConfig+0x62c>)
 80113e6:	4013      	ands	r3, r2
 80113e8:	0019      	movs	r1, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6a1a      	ldr	r2, [r3, #32]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113f2:	431a      	orrs	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113f8:	021b      	lsls	r3, r3, #8
 80113fa:	431a      	orrs	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011400:	431a      	orrs	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011406:	431a      	orrs	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801140c:	431a      	orrs	r2, r3
 801140e:	4b42      	ldr	r3, [pc, #264]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011410:	430a      	orrs	r2, r1
 8011412:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011414:	4b40      	ldr	r3, [pc, #256]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	4b3f      	ldr	r3, [pc, #252]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801141a:	2180      	movs	r1, #128	@ 0x80
 801141c:	0449      	lsls	r1, r1, #17
 801141e:	430a      	orrs	r2, r1
 8011420:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8011422:	4b3d      	ldr	r3, [pc, #244]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011424:	68da      	ldr	r2, [r3, #12]
 8011426:	4b3c      	ldr	r3, [pc, #240]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011428:	2180      	movs	r1, #128	@ 0x80
 801142a:	0549      	lsls	r1, r1, #21
 801142c:	430a      	orrs	r2, r1
 801142e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011430:	f7fd f86e 	bl	800e510 <HAL_GetTick>
 8011434:	0003      	movs	r3, r0
 8011436:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011438:	e008      	b.n	801144c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801143a:	f7fd f869 	bl	800e510 <HAL_GetTick>
 801143e:	0002      	movs	r2, r0
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	2b02      	cmp	r3, #2
 8011446:	d901      	bls.n	801144c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8011448:	2303      	movs	r3, #3
 801144a:	e061      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801144c:	4b32      	ldr	r3, [pc, #200]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	2380      	movs	r3, #128	@ 0x80
 8011452:	049b      	lsls	r3, r3, #18
 8011454:	4013      	ands	r3, r2
 8011456:	d0f0      	beq.n	801143a <HAL_RCC_OscConfig+0x53a>
 8011458:	e059      	b.n	801150e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801145a:	4b2f      	ldr	r3, [pc, #188]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	4b2e      	ldr	r3, [pc, #184]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011460:	4931      	ldr	r1, [pc, #196]	@ (8011528 <HAL_RCC_OscConfig+0x628>)
 8011462:	400a      	ands	r2, r1
 8011464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011466:	f7fd f853 	bl	800e510 <HAL_GetTick>
 801146a:	0003      	movs	r3, r0
 801146c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801146e:	e008      	b.n	8011482 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011470:	f7fd f84e 	bl	800e510 <HAL_GetTick>
 8011474:	0002      	movs	r2, r0
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	2b02      	cmp	r3, #2
 801147c:	d901      	bls.n	8011482 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 801147e:	2303      	movs	r3, #3
 8011480:	e046      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011482:	4b25      	ldr	r3, [pc, #148]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	2380      	movs	r3, #128	@ 0x80
 8011488:	049b      	lsls	r3, r3, #18
 801148a:	4013      	ands	r3, r2
 801148c:	d1f0      	bne.n	8011470 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 801148e:	4b22      	ldr	r3, [pc, #136]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011490:	68da      	ldr	r2, [r3, #12]
 8011492:	4b21      	ldr	r3, [pc, #132]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 8011494:	4926      	ldr	r1, [pc, #152]	@ (8011530 <HAL_RCC_OscConfig+0x630>)
 8011496:	400a      	ands	r2, r1
 8011498:	60da      	str	r2, [r3, #12]
 801149a:	e038      	b.n	801150e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	69db      	ldr	r3, [r3, #28]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d101      	bne.n	80114a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80114a4:	2301      	movs	r3, #1
 80114a6:	e033      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80114a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011518 <HAL_RCC_OscConfig+0x618>)
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2203      	movs	r2, #3
 80114b2:	401a      	ands	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6a1b      	ldr	r3, [r3, #32]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d126      	bne.n	801150a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	2270      	movs	r2, #112	@ 0x70
 80114c0:	401a      	ands	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d11f      	bne.n	801150a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80114ca:	697a      	ldr	r2, [r7, #20]
 80114cc:	23fe      	movs	r3, #254	@ 0xfe
 80114ce:	01db      	lsls	r3, r3, #7
 80114d0:	401a      	ands	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80114d8:	429a      	cmp	r2, r3
 80114da:	d116      	bne.n	801150a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	23f8      	movs	r3, #248	@ 0xf8
 80114e0:	039b      	lsls	r3, r3, #14
 80114e2:	401a      	ands	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d10e      	bne.n	801150a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80114ec:	697a      	ldr	r2, [r7, #20]
 80114ee:	23e0      	movs	r3, #224	@ 0xe0
 80114f0:	051b      	lsls	r3, r3, #20
 80114f2:	401a      	ands	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d106      	bne.n	801150a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	0f5b      	lsrs	r3, r3, #29
 8011500:	075a      	lsls	r2, r3, #29
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8011506:	429a      	cmp	r2, r3
 8011508:	d001      	beq.n	801150e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	e000      	b.n	8011510 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 801150e:	2300      	movs	r3, #0
}
 8011510:	0018      	movs	r0, r3
 8011512:	46bd      	mov	sp, r7
 8011514:	b008      	add	sp, #32
 8011516:	bd80      	pop	{r7, pc}
 8011518:	40021000 	.word	0x40021000
 801151c:	40007000 	.word	0x40007000
 8011520:	00001388 	.word	0x00001388
 8011524:	efffffff 	.word	0xefffffff
 8011528:	feffffff 	.word	0xfeffffff
 801152c:	11c1808c 	.word	0x11c1808c
 8011530:	eefefffc 	.word	0xeefefffc

08011534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d101      	bne.n	8011548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011544:	2301      	movs	r3, #1
 8011546:	e0e9      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011548:	4b76      	ldr	r3, [pc, #472]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2207      	movs	r2, #7
 801154e:	4013      	ands	r3, r2
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	429a      	cmp	r2, r3
 8011554:	d91e      	bls.n	8011594 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011556:	4b73      	ldr	r3, [pc, #460]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2207      	movs	r2, #7
 801155c:	4393      	bics	r3, r2
 801155e:	0019      	movs	r1, r3
 8011560:	4b70      	ldr	r3, [pc, #448]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	430a      	orrs	r2, r1
 8011566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011568:	f7fc ffd2 	bl	800e510 <HAL_GetTick>
 801156c:	0003      	movs	r3, r0
 801156e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011570:	e009      	b.n	8011586 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011572:	f7fc ffcd 	bl	800e510 <HAL_GetTick>
 8011576:	0002      	movs	r2, r0
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	4a6a      	ldr	r2, [pc, #424]	@ (8011728 <HAL_RCC_ClockConfig+0x1f4>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d901      	bls.n	8011586 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011582:	2303      	movs	r3, #3
 8011584:	e0ca      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011586:	4b67      	ldr	r3, [pc, #412]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2207      	movs	r2, #7
 801158c:	4013      	ands	r3, r2
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	429a      	cmp	r2, r3
 8011592:	d1ee      	bne.n	8011572 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2202      	movs	r2, #2
 801159a:	4013      	ands	r3, r2
 801159c:	d015      	beq.n	80115ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2204      	movs	r2, #4
 80115a4:	4013      	ands	r3, r2
 80115a6:	d006      	beq.n	80115b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80115a8:	4b60      	ldr	r3, [pc, #384]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115aa:	689a      	ldr	r2, [r3, #8]
 80115ac:	4b5f      	ldr	r3, [pc, #380]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115ae:	21e0      	movs	r1, #224	@ 0xe0
 80115b0:	01c9      	lsls	r1, r1, #7
 80115b2:	430a      	orrs	r2, r1
 80115b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80115b6:	4b5d      	ldr	r3, [pc, #372]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	4a5d      	ldr	r2, [pc, #372]	@ (8011730 <HAL_RCC_ClockConfig+0x1fc>)
 80115bc:	4013      	ands	r3, r2
 80115be:	0019      	movs	r1, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	689a      	ldr	r2, [r3, #8]
 80115c4:	4b59      	ldr	r3, [pc, #356]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115c6:	430a      	orrs	r2, r1
 80115c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2201      	movs	r2, #1
 80115d0:	4013      	ands	r3, r2
 80115d2:	d057      	beq.n	8011684 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d107      	bne.n	80115ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80115dc:	4b53      	ldr	r3, [pc, #332]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	2380      	movs	r3, #128	@ 0x80
 80115e2:	029b      	lsls	r3, r3, #10
 80115e4:	4013      	ands	r3, r2
 80115e6:	d12b      	bne.n	8011640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	e097      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	2b02      	cmp	r3, #2
 80115f2:	d107      	bne.n	8011604 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80115f4:	4b4d      	ldr	r3, [pc, #308]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	2380      	movs	r3, #128	@ 0x80
 80115fa:	049b      	lsls	r3, r3, #18
 80115fc:	4013      	ands	r3, r2
 80115fe:	d11f      	bne.n	8011640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011600:	2301      	movs	r3, #1
 8011602:	e08b      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d107      	bne.n	801161c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801160c:	4b47      	ldr	r3, [pc, #284]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	2380      	movs	r3, #128	@ 0x80
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	4013      	ands	r3, r2
 8011616:	d113      	bne.n	8011640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011618:	2301      	movs	r3, #1
 801161a:	e07f      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	2b03      	cmp	r3, #3
 8011622:	d106      	bne.n	8011632 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011624:	4b41      	ldr	r3, [pc, #260]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 8011626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011628:	2202      	movs	r2, #2
 801162a:	4013      	ands	r3, r2
 801162c:	d108      	bne.n	8011640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	e074      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011632:	4b3e      	ldr	r3, [pc, #248]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 8011634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011636:	2202      	movs	r2, #2
 8011638:	4013      	ands	r3, r2
 801163a:	d101      	bne.n	8011640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	e06d      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011640:	4b3a      	ldr	r3, [pc, #232]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	2207      	movs	r2, #7
 8011646:	4393      	bics	r3, r2
 8011648:	0019      	movs	r1, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	685a      	ldr	r2, [r3, #4]
 801164e:	4b37      	ldr	r3, [pc, #220]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 8011650:	430a      	orrs	r2, r1
 8011652:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011654:	f7fc ff5c 	bl	800e510 <HAL_GetTick>
 8011658:	0003      	movs	r3, r0
 801165a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801165c:	e009      	b.n	8011672 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801165e:	f7fc ff57 	bl	800e510 <HAL_GetTick>
 8011662:	0002      	movs	r2, r0
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	4a2f      	ldr	r2, [pc, #188]	@ (8011728 <HAL_RCC_ClockConfig+0x1f4>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d901      	bls.n	8011672 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 801166e:	2303      	movs	r3, #3
 8011670:	e054      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011672:	4b2e      	ldr	r3, [pc, #184]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	2238      	movs	r2, #56	@ 0x38
 8011678:	401a      	ands	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	00db      	lsls	r3, r3, #3
 8011680:	429a      	cmp	r2, r3
 8011682:	d1ec      	bne.n	801165e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011684:	4b27      	ldr	r3, [pc, #156]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2207      	movs	r2, #7
 801168a:	4013      	ands	r3, r2
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d21e      	bcs.n	80116d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011692:	4b24      	ldr	r3, [pc, #144]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2207      	movs	r2, #7
 8011698:	4393      	bics	r3, r2
 801169a:	0019      	movs	r1, r3
 801169c:	4b21      	ldr	r3, [pc, #132]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	430a      	orrs	r2, r1
 80116a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80116a4:	f7fc ff34 	bl	800e510 <HAL_GetTick>
 80116a8:	0003      	movs	r3, r0
 80116aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80116ac:	e009      	b.n	80116c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116ae:	f7fc ff2f 	bl	800e510 <HAL_GetTick>
 80116b2:	0002      	movs	r2, r0
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011728 <HAL_RCC_ClockConfig+0x1f4>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d901      	bls.n	80116c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80116be:	2303      	movs	r3, #3
 80116c0:	e02c      	b.n	801171c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80116c2:	4b18      	ldr	r3, [pc, #96]	@ (8011724 <HAL_RCC_ClockConfig+0x1f0>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	2207      	movs	r2, #7
 80116c8:	4013      	ands	r3, r2
 80116ca:	683a      	ldr	r2, [r7, #0]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d1ee      	bne.n	80116ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2204      	movs	r2, #4
 80116d6:	4013      	ands	r3, r2
 80116d8:	d009      	beq.n	80116ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80116da:	4b14      	ldr	r3, [pc, #80]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	4a15      	ldr	r2, [pc, #84]	@ (8011734 <HAL_RCC_ClockConfig+0x200>)
 80116e0:	4013      	ands	r3, r2
 80116e2:	0019      	movs	r1, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	68da      	ldr	r2, [r3, #12]
 80116e8:	4b10      	ldr	r3, [pc, #64]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80116ea:	430a      	orrs	r2, r1
 80116ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80116ee:	f000 f869 	bl	80117c4 <HAL_RCC_GetSysClockFreq>
 80116f2:	0001      	movs	r1, r0
 80116f4:	4b0d      	ldr	r3, [pc, #52]	@ (801172c <HAL_RCC_ClockConfig+0x1f8>)
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	0a1b      	lsrs	r3, r3, #8
 80116fa:	220f      	movs	r2, #15
 80116fc:	401a      	ands	r2, r3
 80116fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011738 <HAL_RCC_ClockConfig+0x204>)
 8011700:	0092      	lsls	r2, r2, #2
 8011702:	58d3      	ldr	r3, [r2, r3]
 8011704:	221f      	movs	r2, #31
 8011706:	4013      	ands	r3, r2
 8011708:	000a      	movs	r2, r1
 801170a:	40da      	lsrs	r2, r3
 801170c:	4b0b      	ldr	r3, [pc, #44]	@ (801173c <HAL_RCC_ClockConfig+0x208>)
 801170e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8011710:	4b0b      	ldr	r3, [pc, #44]	@ (8011740 <HAL_RCC_ClockConfig+0x20c>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	0018      	movs	r0, r3
 8011716:	f7fc fe9f 	bl	800e458 <HAL_InitTick>
 801171a:	0003      	movs	r3, r0
}
 801171c:	0018      	movs	r0, r3
 801171e:	46bd      	mov	sp, r7
 8011720:	b004      	add	sp, #16
 8011722:	bd80      	pop	{r7, pc}
 8011724:	40022000 	.word	0x40022000
 8011728:	00001388 	.word	0x00001388
 801172c:	40021000 	.word	0x40021000
 8011730:	fffff0ff 	.word	0xfffff0ff
 8011734:	ffff8fff 	.word	0xffff8fff
 8011738:	0801a120 	.word	0x0801a120
 801173c:	20000548 	.word	0x20000548
 8011740:	2000054c 	.word	0x2000054c

08011744 <HAL_RCC_MCOConfig>:
  *
  * (*) Feature not available on all devices of the family
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b08a      	sub	sp, #40	@ 0x28
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8011750:	2014      	movs	r0, #20
 8011752:	183b      	adds	r3, r7, r0
 8011754:	2202      	movs	r2, #2
 8011756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8011758:	183b      	adds	r3, r7, r0
 801175a:	2203      	movs	r2, #3
 801175c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 801175e:	183b      	adds	r3, r7, r0
 8011760:	2200      	movs	r2, #0
 8011762:	609a      	str	r2, [r3, #8]

  if (RCC_MCOx == RCC_MCO1)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d124      	bne.n	80117b4 <HAL_RCC_MCOConfig+0x70>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 801176a:	4b14      	ldr	r3, [pc, #80]	@ (80117bc <HAL_RCC_MCOConfig+0x78>)
 801176c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801176e:	4b13      	ldr	r3, [pc, #76]	@ (80117bc <HAL_RCC_MCOConfig+0x78>)
 8011770:	2101      	movs	r1, #1
 8011772:	430a      	orrs	r2, r1
 8011774:	635a      	str	r2, [r3, #52]	@ 0x34
 8011776:	4b11      	ldr	r3, [pc, #68]	@ (80117bc <HAL_RCC_MCOConfig+0x78>)
 8011778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801177a:	2201      	movs	r2, #1
 801177c:	4013      	ands	r3, r2
 801177e:	613b      	str	r3, [r7, #16]
 8011780:	693b      	ldr	r3, [r7, #16]
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011782:	183b      	adds	r3, r7, r0
 8011784:	2280      	movs	r2, #128	@ 0x80
 8011786:	0052      	lsls	r2, r2, #1
 8011788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801178a:	183b      	adds	r3, r7, r0
 801178c:	2200      	movs	r2, #0
 801178e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011790:	183a      	adds	r2, r7, r0
 8011792:	23a0      	movs	r3, #160	@ 0xa0
 8011794:	05db      	lsls	r3, r3, #23
 8011796:	0011      	movs	r1, r2
 8011798:	0018      	movs	r0, r3
 801179a:	f7fd fb0f 	bl	800edbc <HAL_GPIO_Init>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 801179e:	4b07      	ldr	r3, [pc, #28]	@ (80117bc <HAL_RCC_MCOConfig+0x78>)
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	4a07      	ldr	r2, [pc, #28]	@ (80117c0 <HAL_RCC_MCOConfig+0x7c>)
 80117a4:	4013      	ands	r3, r2
 80117a6:	0019      	movs	r1, r3
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	431a      	orrs	r2, r3
 80117ae:	4b03      	ldr	r3, [pc, #12]	@ (80117bc <HAL_RCC_MCOConfig+0x78>)
 80117b0:	430a      	orrs	r2, r1
 80117b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
  }
#endif /* RCC_MCO2_SUPPORT */
}
 80117b4:	46c0      	nop			@ (mov r8, r8)
 80117b6:	46bd      	mov	sp, r7
 80117b8:	b00a      	add	sp, #40	@ 0x28
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	40021000 	.word	0x40021000
 80117c0:	88ffffff 	.word	0x88ffffff

080117c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b086      	sub	sp, #24
 80117c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80117ca:	4b3c      	ldr	r3, [pc, #240]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	2238      	movs	r2, #56	@ 0x38
 80117d0:	4013      	ands	r3, r2
 80117d2:	d10f      	bne.n	80117f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80117d4:	4b39      	ldr	r3, [pc, #228]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	0adb      	lsrs	r3, r3, #11
 80117da:	2207      	movs	r2, #7
 80117dc:	4013      	ands	r3, r2
 80117de:	2201      	movs	r2, #1
 80117e0:	409a      	lsls	r2, r3
 80117e2:	0013      	movs	r3, r2
 80117e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	4835      	ldr	r0, [pc, #212]	@ (80118c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80117ea:	f7ee fc9d 	bl	8000128 <__udivsi3>
 80117ee:	0003      	movs	r3, r0
 80117f0:	613b      	str	r3, [r7, #16]
 80117f2:	e05d      	b.n	80118b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80117f4:	4b31      	ldr	r3, [pc, #196]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	2238      	movs	r2, #56	@ 0x38
 80117fa:	4013      	ands	r3, r2
 80117fc:	2b08      	cmp	r3, #8
 80117fe:	d102      	bne.n	8011806 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8011800:	4b30      	ldr	r3, [pc, #192]	@ (80118c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	e054      	b.n	80118b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011806:	4b2d      	ldr	r3, [pc, #180]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	2238      	movs	r2, #56	@ 0x38
 801180c:	4013      	ands	r3, r2
 801180e:	2b10      	cmp	r3, #16
 8011810:	d138      	bne.n	8011884 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011812:	4b2a      	ldr	r3, [pc, #168]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	2203      	movs	r2, #3
 8011818:	4013      	ands	r3, r2
 801181a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801181c:	4b27      	ldr	r3, [pc, #156]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	091b      	lsrs	r3, r3, #4
 8011822:	2207      	movs	r2, #7
 8011824:	4013      	ands	r3, r2
 8011826:	3301      	adds	r3, #1
 8011828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b03      	cmp	r3, #3
 801182e:	d10d      	bne.n	801184c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011830:	68b9      	ldr	r1, [r7, #8]
 8011832:	4824      	ldr	r0, [pc, #144]	@ (80118c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8011834:	f7ee fc78 	bl	8000128 <__udivsi3>
 8011838:	0003      	movs	r3, r0
 801183a:	0019      	movs	r1, r3
 801183c:	4b1f      	ldr	r3, [pc, #124]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	0a1b      	lsrs	r3, r3, #8
 8011842:	227f      	movs	r2, #127	@ 0x7f
 8011844:	4013      	ands	r3, r2
 8011846:	434b      	muls	r3, r1
 8011848:	617b      	str	r3, [r7, #20]
        break;
 801184a:	e00d      	b.n	8011868 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 801184c:	68b9      	ldr	r1, [r7, #8]
 801184e:	481c      	ldr	r0, [pc, #112]	@ (80118c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8011850:	f7ee fc6a 	bl	8000128 <__udivsi3>
 8011854:	0003      	movs	r3, r0
 8011856:	0019      	movs	r1, r3
 8011858:	4b18      	ldr	r3, [pc, #96]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	0a1b      	lsrs	r3, r3, #8
 801185e:	227f      	movs	r2, #127	@ 0x7f
 8011860:	4013      	ands	r3, r2
 8011862:	434b      	muls	r3, r1
 8011864:	617b      	str	r3, [r7, #20]
        break;
 8011866:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8011868:	4b14      	ldr	r3, [pc, #80]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	0f5b      	lsrs	r3, r3, #29
 801186e:	2207      	movs	r2, #7
 8011870:	4013      	ands	r3, r2
 8011872:	3301      	adds	r3, #1
 8011874:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	6978      	ldr	r0, [r7, #20]
 801187a:	f7ee fc55 	bl	8000128 <__udivsi3>
 801187e:	0003      	movs	r3, r0
 8011880:	613b      	str	r3, [r7, #16]
 8011882:	e015      	b.n	80118b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8011884:	4b0d      	ldr	r3, [pc, #52]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	2238      	movs	r2, #56	@ 0x38
 801188a:	4013      	ands	r3, r2
 801188c:	2b20      	cmp	r3, #32
 801188e:	d103      	bne.n	8011898 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8011890:	2380      	movs	r3, #128	@ 0x80
 8011892:	021b      	lsls	r3, r3, #8
 8011894:	613b      	str	r3, [r7, #16]
 8011896:	e00b      	b.n	80118b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8011898:	4b08      	ldr	r3, [pc, #32]	@ (80118bc <HAL_RCC_GetSysClockFreq+0xf8>)
 801189a:	689b      	ldr	r3, [r3, #8]
 801189c:	2238      	movs	r2, #56	@ 0x38
 801189e:	4013      	ands	r3, r2
 80118a0:	2b18      	cmp	r3, #24
 80118a2:	d103      	bne.n	80118ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80118a4:	23fa      	movs	r3, #250	@ 0xfa
 80118a6:	01db      	lsls	r3, r3, #7
 80118a8:	613b      	str	r3, [r7, #16]
 80118aa:	e001      	b.n	80118b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80118ac:	2300      	movs	r3, #0
 80118ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80118b0:	693b      	ldr	r3, [r7, #16]
}
 80118b2:	0018      	movs	r0, r3
 80118b4:	46bd      	mov	sp, r7
 80118b6:	b006      	add	sp, #24
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	46c0      	nop			@ (mov r8, r8)
 80118bc:	40021000 	.word	0x40021000
 80118c0:	00f42400 	.word	0x00f42400
 80118c4:	007a1200 	.word	0x007a1200

080118c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80118cc:	4b02      	ldr	r3, [pc, #8]	@ (80118d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80118ce:	681b      	ldr	r3, [r3, #0]
}
 80118d0:	0018      	movs	r0, r3
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	20000548 	.word	0x20000548

080118dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80118dc:	b5b0      	push	{r4, r5, r7, lr}
 80118de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80118e0:	f7ff fff2 	bl	80118c8 <HAL_RCC_GetHCLKFreq>
 80118e4:	0004      	movs	r4, r0
 80118e6:	f7ff faff 	bl	8010ee8 <LL_RCC_GetAPB1Prescaler>
 80118ea:	0003      	movs	r3, r0
 80118ec:	0b1a      	lsrs	r2, r3, #12
 80118ee:	4b05      	ldr	r3, [pc, #20]	@ (8011904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80118f0:	0092      	lsls	r2, r2, #2
 80118f2:	58d3      	ldr	r3, [r2, r3]
 80118f4:	221f      	movs	r2, #31
 80118f6:	4013      	ands	r3, r2
 80118f8:	40dc      	lsrs	r4, r3
 80118fa:	0023      	movs	r3, r4
}
 80118fc:	0018      	movs	r0, r3
 80118fe:	46bd      	mov	sp, r7
 8011900:	bdb0      	pop	{r4, r5, r7, pc}
 8011902:	46c0      	nop			@ (mov r8, r8)
 8011904:	0801a160 	.word	0x0801a160

08011908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8011910:	2313      	movs	r3, #19
 8011912:	18fb      	adds	r3, r7, r3
 8011914:	2200      	movs	r2, #0
 8011916:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011918:	2312      	movs	r3, #18
 801191a:	18fb      	adds	r3, r7, r3
 801191c:	2200      	movs	r2, #0
 801191e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	2380      	movs	r3, #128	@ 0x80
 8011926:	029b      	lsls	r3, r3, #10
 8011928:	4013      	ands	r3, r2
 801192a:	d100      	bne.n	801192e <HAL_RCCEx_PeriphCLKConfig+0x26>
 801192c:	e0a3      	b.n	8011a76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801192e:	2011      	movs	r0, #17
 8011930:	183b      	adds	r3, r7, r0
 8011932:	2200      	movs	r2, #0
 8011934:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011936:	4bc3      	ldr	r3, [pc, #780]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011938:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801193a:	2380      	movs	r3, #128	@ 0x80
 801193c:	055b      	lsls	r3, r3, #21
 801193e:	4013      	ands	r3, r2
 8011940:	d110      	bne.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011942:	4bc0      	ldr	r3, [pc, #768]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011946:	4bbf      	ldr	r3, [pc, #764]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011948:	2180      	movs	r1, #128	@ 0x80
 801194a:	0549      	lsls	r1, r1, #21
 801194c:	430a      	orrs	r2, r1
 801194e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011950:	4bbc      	ldr	r3, [pc, #752]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011954:	2380      	movs	r3, #128	@ 0x80
 8011956:	055b      	lsls	r3, r3, #21
 8011958:	4013      	ands	r3, r2
 801195a:	60bb      	str	r3, [r7, #8]
 801195c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801195e:	183b      	adds	r3, r7, r0
 8011960:	2201      	movs	r2, #1
 8011962:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011964:	4bb8      	ldr	r3, [pc, #736]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	4bb7      	ldr	r3, [pc, #732]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 801196a:	2180      	movs	r1, #128	@ 0x80
 801196c:	0049      	lsls	r1, r1, #1
 801196e:	430a      	orrs	r2, r1
 8011970:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011972:	f7fc fdcd 	bl	800e510 <HAL_GetTick>
 8011976:	0003      	movs	r3, r0
 8011978:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801197a:	e00b      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801197c:	f7fc fdc8 	bl	800e510 <HAL_GetTick>
 8011980:	0002      	movs	r2, r0
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	2b02      	cmp	r3, #2
 8011988:	d904      	bls.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 801198a:	2313      	movs	r3, #19
 801198c:	18fb      	adds	r3, r7, r3
 801198e:	2203      	movs	r2, #3
 8011990:	701a      	strb	r2, [r3, #0]
        break;
 8011992:	e005      	b.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011994:	4bac      	ldr	r3, [pc, #688]	@ (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	2380      	movs	r3, #128	@ 0x80
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	4013      	ands	r3, r2
 801199e:	d0ed      	beq.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80119a0:	2313      	movs	r3, #19
 80119a2:	18fb      	adds	r3, r7, r3
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d154      	bne.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80119aa:	4ba6      	ldr	r3, [pc, #664]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80119ae:	23c0      	movs	r3, #192	@ 0xc0
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	4013      	ands	r3, r2
 80119b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d019      	beq.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d014      	beq.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80119c6:	4b9f      	ldr	r3, [pc, #636]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119ca:	4aa0      	ldr	r2, [pc, #640]	@ (8011c4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80119cc:	4013      	ands	r3, r2
 80119ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80119d0:	4b9c      	ldr	r3, [pc, #624]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80119d4:	4b9b      	ldr	r3, [pc, #620]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119d6:	2180      	movs	r1, #128	@ 0x80
 80119d8:	0249      	lsls	r1, r1, #9
 80119da:	430a      	orrs	r2, r1
 80119dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80119de:	4b99      	ldr	r3, [pc, #612]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80119e2:	4b98      	ldr	r3, [pc, #608]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119e4:	499a      	ldr	r1, [pc, #616]	@ (8011c50 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80119e6:	400a      	ands	r2, r1
 80119e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80119ea:	4b96      	ldr	r3, [pc, #600]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80119ec:	697a      	ldr	r2, [r7, #20]
 80119ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	2201      	movs	r2, #1
 80119f4:	4013      	ands	r3, r2
 80119f6:	d016      	beq.n	8011a26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119f8:	f7fc fd8a 	bl	800e510 <HAL_GetTick>
 80119fc:	0003      	movs	r3, r0
 80119fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a00:	e00c      	b.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a02:	f7fc fd85 	bl	800e510 <HAL_GetTick>
 8011a06:	0002      	movs	r2, r0
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	4a91      	ldr	r2, [pc, #580]	@ (8011c54 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d904      	bls.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8011a12:	2313      	movs	r3, #19
 8011a14:	18fb      	adds	r3, r7, r3
 8011a16:	2203      	movs	r2, #3
 8011a18:	701a      	strb	r2, [r3, #0]
            break;
 8011a1a:	e004      	b.n	8011a26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a1c:	4b89      	ldr	r3, [pc, #548]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a20:	2202      	movs	r2, #2
 8011a22:	4013      	ands	r3, r2
 8011a24:	d0ed      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8011a26:	2313      	movs	r3, #19
 8011a28:	18fb      	adds	r3, r7, r3
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d10a      	bne.n	8011a46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011a30:	4b84      	ldr	r3, [pc, #528]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a34:	4a85      	ldr	r2, [pc, #532]	@ (8011c4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8011a36:	4013      	ands	r3, r2
 8011a38:	0019      	movs	r1, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a3e:	4b81      	ldr	r3, [pc, #516]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a40:	430a      	orrs	r2, r1
 8011a42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011a44:	e00c      	b.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011a46:	2312      	movs	r3, #18
 8011a48:	18fb      	adds	r3, r7, r3
 8011a4a:	2213      	movs	r2, #19
 8011a4c:	18ba      	adds	r2, r7, r2
 8011a4e:	7812      	ldrb	r2, [r2, #0]
 8011a50:	701a      	strb	r2, [r3, #0]
 8011a52:	e005      	b.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a54:	2312      	movs	r3, #18
 8011a56:	18fb      	adds	r3, r7, r3
 8011a58:	2213      	movs	r2, #19
 8011a5a:	18ba      	adds	r2, r7, r2
 8011a5c:	7812      	ldrb	r2, [r2, #0]
 8011a5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011a60:	2311      	movs	r3, #17
 8011a62:	18fb      	adds	r3, r7, r3
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d105      	bne.n	8011a76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a6a:	4b76      	ldr	r3, [pc, #472]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a6e:	4b75      	ldr	r3, [pc, #468]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a70:	4979      	ldr	r1, [pc, #484]	@ (8011c58 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8011a72:	400a      	ands	r2, r1
 8011a74:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	d009      	beq.n	8011a94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a80:	4b70      	ldr	r3, [pc, #448]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a84:	2203      	movs	r2, #3
 8011a86:	4393      	bics	r3, r2
 8011a88:	0019      	movs	r1, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011a90:	430a      	orrs	r2, r1
 8011a92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2202      	movs	r2, #2
 8011a9a:	4013      	ands	r3, r2
 8011a9c:	d009      	beq.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a9e:	4b69      	ldr	r3, [pc, #420]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aa2:	220c      	movs	r2, #12
 8011aa4:	4393      	bics	r3, r2
 8011aa6:	0019      	movs	r1, r3
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689a      	ldr	r2, [r3, #8]
 8011aac:	4b65      	ldr	r3, [pc, #404]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011aae:	430a      	orrs	r2, r1
 8011ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2210      	movs	r2, #16
 8011ab8:	4013      	ands	r3, r2
 8011aba:	d009      	beq.n	8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011abc:	4b61      	ldr	r3, [pc, #388]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ac0:	4a66      	ldr	r2, [pc, #408]	@ (8011c5c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	0019      	movs	r1, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68da      	ldr	r2, [r3, #12]
 8011aca:	4b5e      	ldr	r3, [pc, #376]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011acc:	430a      	orrs	r2, r1
 8011ace:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	2380      	movs	r3, #128	@ 0x80
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	4013      	ands	r3, r2
 8011ada:	d009      	beq.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011adc:	4b59      	ldr	r3, [pc, #356]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ae0:	4a5f      	ldr	r2, [pc, #380]	@ (8011c60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8011ae2:	4013      	ands	r3, r2
 8011ae4:	0019      	movs	r1, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	699a      	ldr	r2, [r3, #24]
 8011aea:	4b56      	ldr	r3, [pc, #344]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011aec:	430a      	orrs	r2, r1
 8011aee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	2380      	movs	r3, #128	@ 0x80
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	4013      	ands	r3, r2
 8011afa:	d009      	beq.n	8011b10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011afc:	4b51      	ldr	r3, [pc, #324]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b00:	4a58      	ldr	r2, [pc, #352]	@ (8011c64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8011b02:	4013      	ands	r3, r2
 8011b04:	0019      	movs	r1, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	69da      	ldr	r2, [r3, #28]
 8011b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b0c:	430a      	orrs	r2, r1
 8011b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2220      	movs	r2, #32
 8011b16:	4013      	ands	r3, r2
 8011b18:	d009      	beq.n	8011b2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b1e:	4a52      	ldr	r2, [pc, #328]	@ (8011c68 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8011b20:	4013      	ands	r3, r2
 8011b22:	0019      	movs	r1, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691a      	ldr	r2, [r3, #16]
 8011b28:	4b46      	ldr	r3, [pc, #280]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b2a:	430a      	orrs	r2, r1
 8011b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681a      	ldr	r2, [r3, #0]
 8011b32:	2380      	movs	r3, #128	@ 0x80
 8011b34:	01db      	lsls	r3, r3, #7
 8011b36:	4013      	ands	r3, r2
 8011b38:	d015      	beq.n	8011b66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011b3a:	4b42      	ldr	r3, [pc, #264]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	0899      	lsrs	r1, r3, #2
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a1a      	ldr	r2, [r3, #32]
 8011b46:	4b3f      	ldr	r3, [pc, #252]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b48:	430a      	orrs	r2, r1
 8011b4a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a1a      	ldr	r2, [r3, #32]
 8011b50:	2380      	movs	r3, #128	@ 0x80
 8011b52:	05db      	lsls	r3, r3, #23
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d106      	bne.n	8011b66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8011b58:	4b3a      	ldr	r3, [pc, #232]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b5a:	68da      	ldr	r2, [r3, #12]
 8011b5c:	4b39      	ldr	r3, [pc, #228]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b5e:	2180      	movs	r1, #128	@ 0x80
 8011b60:	0249      	lsls	r1, r1, #9
 8011b62:	430a      	orrs	r2, r1
 8011b64:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	2380      	movs	r3, #128	@ 0x80
 8011b6c:	031b      	lsls	r3, r3, #12
 8011b6e:	4013      	ands	r3, r2
 8011b70:	d009      	beq.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011b72:	4b34      	ldr	r3, [pc, #208]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b76:	2240      	movs	r2, #64	@ 0x40
 8011b78:	4393      	bics	r3, r2
 8011b7a:	0019      	movs	r1, r3
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b80:	4b30      	ldr	r3, [pc, #192]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b82:	430a      	orrs	r2, r1
 8011b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	2380      	movs	r3, #128	@ 0x80
 8011b8c:	039b      	lsls	r3, r3, #14
 8011b8e:	4013      	ands	r3, r2
 8011b90:	d016      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8011b92:	4b2c      	ldr	r3, [pc, #176]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b96:	4a35      	ldr	r2, [pc, #212]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8011b98:	4013      	ands	r3, r2
 8011b9a:	0019      	movs	r1, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ba0:	4b28      	ldr	r3, [pc, #160]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011ba2:	430a      	orrs	r2, r1
 8011ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011baa:	2380      	movs	r3, #128	@ 0x80
 8011bac:	03db      	lsls	r3, r3, #15
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d106      	bne.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011bb2:	4b24      	ldr	r3, [pc, #144]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bb4:	68da      	ldr	r2, [r3, #12]
 8011bb6:	4b23      	ldr	r3, [pc, #140]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bb8:	2180      	movs	r1, #128	@ 0x80
 8011bba:	0449      	lsls	r1, r1, #17
 8011bbc:	430a      	orrs	r2, r1
 8011bbe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	2380      	movs	r3, #128	@ 0x80
 8011bc6:	03db      	lsls	r3, r3, #15
 8011bc8:	4013      	ands	r3, r2
 8011bca:	d016      	beq.n	8011bfa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bd0:	4a27      	ldr	r2, [pc, #156]	@ (8011c70 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	0019      	movs	r1, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bda:	4b1a      	ldr	r3, [pc, #104]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bdc:	430a      	orrs	r2, r1
 8011bde:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011be4:	2380      	movs	r3, #128	@ 0x80
 8011be6:	045b      	lsls	r3, r3, #17
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d106      	bne.n	8011bfa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011bec:	4b15      	ldr	r3, [pc, #84]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bee:	68da      	ldr	r2, [r3, #12]
 8011bf0:	4b14      	ldr	r3, [pc, #80]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011bf2:	2180      	movs	r1, #128	@ 0x80
 8011bf4:	0449      	lsls	r1, r1, #17
 8011bf6:	430a      	orrs	r2, r1
 8011bf8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	2380      	movs	r3, #128	@ 0x80
 8011c00:	011b      	lsls	r3, r3, #4
 8011c02:	4013      	ands	r3, r2
 8011c04:	d016      	beq.n	8011c34 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8011c06:	4b0f      	ldr	r3, [pc, #60]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8011c74 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	0019      	movs	r1, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	695a      	ldr	r2, [r3, #20]
 8011c14:	4b0b      	ldr	r3, [pc, #44]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011c16:	430a      	orrs	r2, r1
 8011c18:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	695a      	ldr	r2, [r3, #20]
 8011c1e:	2380      	movs	r3, #128	@ 0x80
 8011c20:	01db      	lsls	r3, r3, #7
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d106      	bne.n	8011c34 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8011c26:	4b07      	ldr	r3, [pc, #28]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011c28:	68da      	ldr	r2, [r3, #12]
 8011c2a:	4b06      	ldr	r3, [pc, #24]	@ (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8011c2c:	2180      	movs	r1, #128	@ 0x80
 8011c2e:	0249      	lsls	r1, r1, #9
 8011c30:	430a      	orrs	r2, r1
 8011c32:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8011c34:	2312      	movs	r3, #18
 8011c36:	18fb      	adds	r3, r7, r3
 8011c38:	781b      	ldrb	r3, [r3, #0]
}
 8011c3a:	0018      	movs	r0, r3
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	b006      	add	sp, #24
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	46c0      	nop			@ (mov r8, r8)
 8011c44:	40021000 	.word	0x40021000
 8011c48:	40007000 	.word	0x40007000
 8011c4c:	fffffcff 	.word	0xfffffcff
 8011c50:	fffeffff 	.word	0xfffeffff
 8011c54:	00001388 	.word	0x00001388
 8011c58:	efffffff 	.word	0xefffffff
 8011c5c:	fffff3ff 	.word	0xfffff3ff
 8011c60:	fff3ffff 	.word	0xfff3ffff
 8011c64:	ffcfffff 	.word	0xffcfffff
 8011c68:	ffffcfff 	.word	0xffffcfff
 8011c6c:	ffbfffff 	.word	0xffbfffff
 8011c70:	feffffff 	.word	0xfeffffff
 8011c74:	ffff3fff 	.word	0xffff3fff

08011c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d101      	bne.n	8011c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011c86:	2301      	movs	r3, #1
 8011c88:	e0a8      	b.n	8011ddc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d109      	bne.n	8011ca6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	685a      	ldr	r2, [r3, #4]
 8011c96:	2382      	movs	r3, #130	@ 0x82
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d009      	beq.n	8011cb2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	61da      	str	r2, [r3, #28]
 8011ca4:	e005      	b.n	8011cb2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	225d      	movs	r2, #93	@ 0x5d
 8011cbc:	5c9b      	ldrb	r3, [r3, r2]
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d107      	bne.n	8011cd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	225c      	movs	r2, #92	@ 0x5c
 8011cc8:	2100      	movs	r1, #0
 8011cca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	0018      	movs	r0, r3
 8011cd0:	f7fc f944 	bl	800df5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	225d      	movs	r2, #93	@ 0x5d
 8011cd8:	2102      	movs	r1, #2
 8011cda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2140      	movs	r1, #64	@ 0x40
 8011ce8:	438a      	bics	r2, r1
 8011cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	68da      	ldr	r2, [r3, #12]
 8011cf0:	23e0      	movs	r3, #224	@ 0xe0
 8011cf2:	00db      	lsls	r3, r3, #3
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d902      	bls.n	8011cfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]
 8011cfc:	e002      	b.n	8011d04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011cfe:	2380      	movs	r3, #128	@ 0x80
 8011d00:	015b      	lsls	r3, r3, #5
 8011d02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	68da      	ldr	r2, [r3, #12]
 8011d08:	23f0      	movs	r3, #240	@ 0xf0
 8011d0a:	011b      	lsls	r3, r3, #4
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d008      	beq.n	8011d22 <HAL_SPI_Init+0xaa>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	68da      	ldr	r2, [r3, #12]
 8011d14:	23e0      	movs	r3, #224	@ 0xe0
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d002      	beq.n	8011d22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	685a      	ldr	r2, [r3, #4]
 8011d26:	2382      	movs	r3, #130	@ 0x82
 8011d28:	005b      	lsls	r3, r3, #1
 8011d2a:	401a      	ands	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6899      	ldr	r1, [r3, #8]
 8011d30:	2384      	movs	r3, #132	@ 0x84
 8011d32:	021b      	lsls	r3, r3, #8
 8011d34:	400b      	ands	r3, r1
 8011d36:	431a      	orrs	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	691b      	ldr	r3, [r3, #16]
 8011d3c:	2102      	movs	r1, #2
 8011d3e:	400b      	ands	r3, r1
 8011d40:	431a      	orrs	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	695b      	ldr	r3, [r3, #20]
 8011d46:	2101      	movs	r1, #1
 8011d48:	400b      	ands	r3, r1
 8011d4a:	431a      	orrs	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6999      	ldr	r1, [r3, #24]
 8011d50:	2380      	movs	r3, #128	@ 0x80
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	400b      	ands	r3, r1
 8011d56:	431a      	orrs	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	69db      	ldr	r3, [r3, #28]
 8011d5c:	2138      	movs	r1, #56	@ 0x38
 8011d5e:	400b      	ands	r3, r1
 8011d60:	431a      	orrs	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a1b      	ldr	r3, [r3, #32]
 8011d66:	2180      	movs	r1, #128	@ 0x80
 8011d68:	400b      	ands	r3, r1
 8011d6a:	431a      	orrs	r2, r3
 8011d6c:	0011      	movs	r1, r2
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011d72:	2380      	movs	r3, #128	@ 0x80
 8011d74:	019b      	lsls	r3, r3, #6
 8011d76:	401a      	ands	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	430a      	orrs	r2, r1
 8011d7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	0c1b      	lsrs	r3, r3, #16
 8011d86:	2204      	movs	r2, #4
 8011d88:	401a      	ands	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d8e:	2110      	movs	r1, #16
 8011d90:	400b      	ands	r3, r1
 8011d92:	431a      	orrs	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d98:	2108      	movs	r1, #8
 8011d9a:	400b      	ands	r3, r1
 8011d9c:	431a      	orrs	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	68d9      	ldr	r1, [r3, #12]
 8011da2:	23f0      	movs	r3, #240	@ 0xf0
 8011da4:	011b      	lsls	r3, r3, #4
 8011da6:	400b      	ands	r3, r1
 8011da8:	431a      	orrs	r2, r3
 8011daa:	0011      	movs	r1, r2
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	2380      	movs	r3, #128	@ 0x80
 8011db0:	015b      	lsls	r3, r3, #5
 8011db2:	401a      	ands	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	430a      	orrs	r2, r1
 8011dba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	69da      	ldr	r2, [r3, #28]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4907      	ldr	r1, [pc, #28]	@ (8011de4 <HAL_SPI_Init+0x16c>)
 8011dc8:	400a      	ands	r2, r1
 8011dca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	225d      	movs	r2, #93	@ 0x5d
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	0018      	movs	r0, r3
 8011dde:	46bd      	mov	sp, r7
 8011de0:	b004      	add	sp, #16
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	fffff7ff 	.word	0xfffff7ff

08011de8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	603b      	str	r3, [r7, #0]
 8011df4:	1dbb      	adds	r3, r7, #6
 8011df6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011df8:	231f      	movs	r3, #31
 8011dfa:	18fb      	adds	r3, r7, r3
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	225c      	movs	r2, #92	@ 0x5c
 8011e04:	5c9b      	ldrb	r3, [r3, r2]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d101      	bne.n	8011e0e <HAL_SPI_Transmit+0x26>
 8011e0a:	2302      	movs	r3, #2
 8011e0c:	e140      	b.n	8012090 <HAL_SPI_Transmit+0x2a8>
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	225c      	movs	r2, #92	@ 0x5c
 8011e12:	2101      	movs	r1, #1
 8011e14:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011e16:	f7fc fb7b 	bl	800e510 <HAL_GetTick>
 8011e1a:	0003      	movs	r3, r0
 8011e1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011e1e:	2316      	movs	r3, #22
 8011e20:	18fb      	adds	r3, r7, r3
 8011e22:	1dba      	adds	r2, r7, #6
 8011e24:	8812      	ldrh	r2, [r2, #0]
 8011e26:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	225d      	movs	r2, #93	@ 0x5d
 8011e2c:	5c9b      	ldrb	r3, [r3, r2]
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d004      	beq.n	8011e3e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8011e34:	231f      	movs	r3, #31
 8011e36:	18fb      	adds	r3, r7, r3
 8011e38:	2202      	movs	r2, #2
 8011e3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8011e3c:	e11d      	b.n	801207a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d003      	beq.n	8011e4c <HAL_SPI_Transmit+0x64>
 8011e44:	1dbb      	adds	r3, r7, #6
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d104      	bne.n	8011e56 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8011e4c:	231f      	movs	r3, #31
 8011e4e:	18fb      	adds	r3, r7, r3
 8011e50:	2201      	movs	r2, #1
 8011e52:	701a      	strb	r2, [r3, #0]
    goto error;
 8011e54:	e111      	b.n	801207a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	225d      	movs	r2, #93	@ 0x5d
 8011e5a:	2103      	movs	r1, #3
 8011e5c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2200      	movs	r2, #0
 8011e62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	1dba      	adds	r2, r7, #6
 8011e6e:	8812      	ldrh	r2, [r2, #0]
 8011e70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	1dba      	adds	r2, r7, #6
 8011e76:	8812      	ldrh	r2, [r2, #0]
 8011e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2244      	movs	r2, #68	@ 0x44
 8011e84:	2100      	movs	r1, #0
 8011e86:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2246      	movs	r2, #70	@ 0x46
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2200      	movs	r2, #0
 8011e94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	689a      	ldr	r2, [r3, #8]
 8011ea0:	2380      	movs	r3, #128	@ 0x80
 8011ea2:	021b      	lsls	r3, r3, #8
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d110      	bne.n	8011eca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2140      	movs	r1, #64	@ 0x40
 8011eb4:	438a      	bics	r2, r1
 8011eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2180      	movs	r1, #128	@ 0x80
 8011ec4:	01c9      	lsls	r1, r1, #7
 8011ec6:	430a      	orrs	r2, r1
 8011ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2240      	movs	r2, #64	@ 0x40
 8011ed2:	4013      	ands	r3, r2
 8011ed4:	2b40      	cmp	r3, #64	@ 0x40
 8011ed6:	d007      	beq.n	8011ee8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2140      	movs	r1, #64	@ 0x40
 8011ee4:	430a      	orrs	r2, r1
 8011ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	68da      	ldr	r2, [r3, #12]
 8011eec:	23e0      	movs	r3, #224	@ 0xe0
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d94e      	bls.n	8011f92 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d004      	beq.n	8011f06 <HAL_SPI_Transmit+0x11e>
 8011efc:	2316      	movs	r3, #22
 8011efe:	18fb      	adds	r3, r7, r3
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d13f      	bne.n	8011f86 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f0a:	881a      	ldrh	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f16:	1c9a      	adds	r2, r3, #2
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	3b01      	subs	r3, #1
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011f2a:	e02c      	b.n	8011f86 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	689b      	ldr	r3, [r3, #8]
 8011f32:	2202      	movs	r2, #2
 8011f34:	4013      	ands	r3, r2
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	d112      	bne.n	8011f60 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f3e:	881a      	ldrh	r2, [r3, #0]
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f4a:	1c9a      	adds	r2, r3, #2
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	3b01      	subs	r3, #1
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011f5e:	e012      	b.n	8011f86 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011f60:	f7fc fad6 	bl	800e510 <HAL_GetTick>
 8011f64:	0002      	movs	r2, r0
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	1ad3      	subs	r3, r2, r3
 8011f6a:	683a      	ldr	r2, [r7, #0]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d802      	bhi.n	8011f76 <HAL_SPI_Transmit+0x18e>
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	3301      	adds	r3, #1
 8011f74:	d102      	bne.n	8011f7c <HAL_SPI_Transmit+0x194>
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d104      	bne.n	8011f86 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8011f7c:	231f      	movs	r3, #31
 8011f7e:	18fb      	adds	r3, r7, r3
 8011f80:	2203      	movs	r2, #3
 8011f82:	701a      	strb	r2, [r3, #0]
          goto error;
 8011f84:	e079      	b.n	801207a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1cd      	bne.n	8011f2c <HAL_SPI_Transmit+0x144>
 8011f90:	e04f      	b.n	8012032 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d004      	beq.n	8011fa4 <HAL_SPI_Transmit+0x1bc>
 8011f9a:	2316      	movs	r3, #22
 8011f9c:	18fb      	adds	r3, r7, r3
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d141      	bne.n	8012028 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	330c      	adds	r3, #12
 8011fae:	7812      	ldrb	r2, [r2, #0]
 8011fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8011fca:	e02d      	b.n	8012028 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	2202      	movs	r2, #2
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	2b02      	cmp	r3, #2
 8011fd8:	d113      	bne.n	8012002 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	330c      	adds	r3, #12
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fec:	1c5a      	adds	r2, r3, #1
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	3b01      	subs	r3, #1
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012000:	e012      	b.n	8012028 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012002:	f7fc fa85 	bl	800e510 <HAL_GetTick>
 8012006:	0002      	movs	r2, r0
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	429a      	cmp	r2, r3
 8012010:	d802      	bhi.n	8012018 <HAL_SPI_Transmit+0x230>
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	3301      	adds	r3, #1
 8012016:	d102      	bne.n	801201e <HAL_SPI_Transmit+0x236>
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d104      	bne.n	8012028 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 801201e:	231f      	movs	r3, #31
 8012020:	18fb      	adds	r3, r7, r3
 8012022:	2203      	movs	r2, #3
 8012024:	701a      	strb	r2, [r3, #0]
          goto error;
 8012026:	e028      	b.n	801207a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801202c:	b29b      	uxth	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d1cc      	bne.n	8011fcc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012032:	69ba      	ldr	r2, [r7, #24]
 8012034:	6839      	ldr	r1, [r7, #0]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	0018      	movs	r0, r3
 801203a:	f000 fc37 	bl	80128ac <SPI_EndRxTxTransaction>
 801203e:	1e03      	subs	r3, r0, #0
 8012040:	d002      	beq.n	8012048 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2220      	movs	r2, #32
 8012046:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	689b      	ldr	r3, [r3, #8]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10a      	bne.n	8012066 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012050:	2300      	movs	r3, #0
 8012052:	613b      	str	r3, [r7, #16]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	613b      	str	r3, [r7, #16]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	613b      	str	r3, [r7, #16]
 8012064:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801206a:	2b00      	cmp	r3, #0
 801206c:	d004      	beq.n	8012078 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 801206e:	231f      	movs	r3, #31
 8012070:	18fb      	adds	r3, r7, r3
 8012072:	2201      	movs	r2, #1
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	e000      	b.n	801207a <HAL_SPI_Transmit+0x292>
  }

error:
 8012078:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	225d      	movs	r2, #93	@ 0x5d
 801207e:	2101      	movs	r1, #1
 8012080:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	225c      	movs	r2, #92	@ 0x5c
 8012086:	2100      	movs	r1, #0
 8012088:	5499      	strb	r1, [r3, r2]
  return errorcode;
 801208a:	231f      	movs	r3, #31
 801208c:	18fb      	adds	r3, r7, r3
 801208e:	781b      	ldrb	r3, [r3, #0]
}
 8012090:	0018      	movs	r0, r3
 8012092:	46bd      	mov	sp, r7
 8012094:	b008      	add	sp, #32
 8012096:	bd80      	pop	{r7, pc}

08012098 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b08a      	sub	sp, #40	@ 0x28
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	001a      	movs	r2, r3
 80120a6:	1cbb      	adds	r3, r7, #2
 80120a8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80120aa:	2301      	movs	r3, #1
 80120ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80120ae:	2323      	movs	r3, #35	@ 0x23
 80120b0:	18fb      	adds	r3, r7, r3
 80120b2:	2200      	movs	r2, #0
 80120b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	225c      	movs	r2, #92	@ 0x5c
 80120ba:	5c9b      	ldrb	r3, [r3, r2]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d101      	bne.n	80120c4 <HAL_SPI_TransmitReceive+0x2c>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e1b5      	b.n	8012430 <HAL_SPI_TransmitReceive+0x398>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	225c      	movs	r2, #92	@ 0x5c
 80120c8:	2101      	movs	r1, #1
 80120ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80120cc:	f7fc fa20 	bl	800e510 <HAL_GetTick>
 80120d0:	0003      	movs	r3, r0
 80120d2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80120d4:	201b      	movs	r0, #27
 80120d6:	183b      	adds	r3, r7, r0
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	215d      	movs	r1, #93	@ 0x5d
 80120dc:	5c52      	ldrb	r2, [r2, r1]
 80120de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80120e6:	2312      	movs	r3, #18
 80120e8:	18fb      	adds	r3, r7, r3
 80120ea:	1cba      	adds	r2, r7, #2
 80120ec:	8812      	ldrh	r2, [r2, #0]
 80120ee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80120f0:	183b      	adds	r3, r7, r0
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d011      	beq.n	801211c <HAL_SPI_TransmitReceive+0x84>
 80120f8:	697a      	ldr	r2, [r7, #20]
 80120fa:	2382      	movs	r3, #130	@ 0x82
 80120fc:	005b      	lsls	r3, r3, #1
 80120fe:	429a      	cmp	r2, r3
 8012100:	d107      	bne.n	8012112 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	689b      	ldr	r3, [r3, #8]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <HAL_SPI_TransmitReceive+0x7a>
 801210a:	183b      	adds	r3, r7, r0
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	2b04      	cmp	r3, #4
 8012110:	d004      	beq.n	801211c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8012112:	2323      	movs	r3, #35	@ 0x23
 8012114:	18fb      	adds	r3, r7, r3
 8012116:	2202      	movs	r2, #2
 8012118:	701a      	strb	r2, [r3, #0]
    goto error;
 801211a:	e17e      	b.n	801241a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d006      	beq.n	8012130 <HAL_SPI_TransmitReceive+0x98>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d003      	beq.n	8012130 <HAL_SPI_TransmitReceive+0x98>
 8012128:	1cbb      	adds	r3, r7, #2
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d104      	bne.n	801213a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8012130:	2323      	movs	r3, #35	@ 0x23
 8012132:	18fb      	adds	r3, r7, r3
 8012134:	2201      	movs	r2, #1
 8012136:	701a      	strb	r2, [r3, #0]
    goto error;
 8012138:	e16f      	b.n	801241a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	225d      	movs	r2, #93	@ 0x5d
 801213e:	5c9b      	ldrb	r3, [r3, r2]
 8012140:	b2db      	uxtb	r3, r3
 8012142:	2b04      	cmp	r3, #4
 8012144:	d003      	beq.n	801214e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	225d      	movs	r2, #93	@ 0x5d
 801214a:	2105      	movs	r1, #5
 801214c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	1cba      	adds	r2, r7, #2
 801215e:	2146      	movs	r1, #70	@ 0x46
 8012160:	8812      	ldrh	r2, [r2, #0]
 8012162:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	1cba      	adds	r2, r7, #2
 8012168:	2144      	movs	r1, #68	@ 0x44
 801216a:	8812      	ldrh	r2, [r2, #0]
 801216c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	1cba      	adds	r2, r7, #2
 8012178:	8812      	ldrh	r2, [r2, #0]
 801217a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	1cba      	adds	r2, r7, #2
 8012180:	8812      	ldrh	r2, [r2, #0]
 8012182:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68da      	ldr	r2, [r3, #12]
 8012194:	23e0      	movs	r3, #224	@ 0xe0
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	429a      	cmp	r2, r3
 801219a:	d908      	bls.n	80121ae <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	685a      	ldr	r2, [r3, #4]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	49a4      	ldr	r1, [pc, #656]	@ (8012438 <HAL_SPI_TransmitReceive+0x3a0>)
 80121a8:	400a      	ands	r2, r1
 80121aa:	605a      	str	r2, [r3, #4]
 80121ac:	e008      	b.n	80121c0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	685a      	ldr	r2, [r3, #4]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2180      	movs	r1, #128	@ 0x80
 80121ba:	0149      	lsls	r1, r1, #5
 80121bc:	430a      	orrs	r2, r1
 80121be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2240      	movs	r2, #64	@ 0x40
 80121c8:	4013      	ands	r3, r2
 80121ca:	2b40      	cmp	r3, #64	@ 0x40
 80121cc:	d007      	beq.n	80121de <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2140      	movs	r1, #64	@ 0x40
 80121da:	430a      	orrs	r2, r1
 80121dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	68da      	ldr	r2, [r3, #12]
 80121e2:	23e0      	movs	r3, #224	@ 0xe0
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d800      	bhi.n	80121ec <HAL_SPI_TransmitReceive+0x154>
 80121ea:	e07f      	b.n	80122ec <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d005      	beq.n	8012200 <HAL_SPI_TransmitReceive+0x168>
 80121f4:	2312      	movs	r3, #18
 80121f6:	18fb      	adds	r3, r7, r3
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d000      	beq.n	8012200 <HAL_SPI_TransmitReceive+0x168>
 80121fe:	e069      	b.n	80122d4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012204:	881a      	ldrh	r2, [r3, #0]
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012210:	1c9a      	adds	r2, r3, #2
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801221a:	b29b      	uxth	r3, r3
 801221c:	3b01      	subs	r3, #1
 801221e:	b29a      	uxth	r2, r3
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012224:	e056      	b.n	80122d4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	2202      	movs	r2, #2
 801222e:	4013      	ands	r3, r2
 8012230:	2b02      	cmp	r3, #2
 8012232:	d11b      	bne.n	801226c <HAL_SPI_TransmitReceive+0x1d4>
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012238:	b29b      	uxth	r3, r3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d016      	beq.n	801226c <HAL_SPI_TransmitReceive+0x1d4>
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	2b01      	cmp	r3, #1
 8012242:	d113      	bne.n	801226c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012248:	881a      	ldrh	r2, [r3, #0]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012254:	1c9a      	adds	r2, r3, #2
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801225e:	b29b      	uxth	r3, r3
 8012260:	3b01      	subs	r3, #1
 8012262:	b29a      	uxth	r2, r3
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012268:	2300      	movs	r3, #0
 801226a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	689b      	ldr	r3, [r3, #8]
 8012272:	2201      	movs	r2, #1
 8012274:	4013      	ands	r3, r2
 8012276:	2b01      	cmp	r3, #1
 8012278:	d11c      	bne.n	80122b4 <HAL_SPI_TransmitReceive+0x21c>
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2246      	movs	r2, #70	@ 0x46
 801227e:	5a9b      	ldrh	r3, [r3, r2]
 8012280:	b29b      	uxth	r3, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d016      	beq.n	80122b4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	68da      	ldr	r2, [r3, #12]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012290:	b292      	uxth	r2, r2
 8012292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012298:	1c9a      	adds	r2, r3, #2
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2246      	movs	r2, #70	@ 0x46
 80122a2:	5a9b      	ldrh	r3, [r3, r2]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	3b01      	subs	r3, #1
 80122a8:	b299      	uxth	r1, r3
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2246      	movs	r2, #70	@ 0x46
 80122ae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80122b0:	2301      	movs	r3, #1
 80122b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80122b4:	f7fc f92c 	bl	800e510 <HAL_GetTick>
 80122b8:	0002      	movs	r2, r0
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	1ad3      	subs	r3, r2, r3
 80122be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d807      	bhi.n	80122d4 <HAL_SPI_TransmitReceive+0x23c>
 80122c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c6:	3301      	adds	r3, #1
 80122c8:	d004      	beq.n	80122d4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80122ca:	2323      	movs	r3, #35	@ 0x23
 80122cc:	18fb      	adds	r3, r7, r3
 80122ce:	2203      	movs	r2, #3
 80122d0:	701a      	strb	r2, [r3, #0]
        goto error;
 80122d2:	e0a2      	b.n	801241a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122d8:	b29b      	uxth	r3, r3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1a3      	bne.n	8012226 <HAL_SPI_TransmitReceive+0x18e>
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2246      	movs	r2, #70	@ 0x46
 80122e2:	5a9b      	ldrh	r3, [r3, r2]
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d19d      	bne.n	8012226 <HAL_SPI_TransmitReceive+0x18e>
 80122ea:	e085      	b.n	80123f8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d005      	beq.n	8012300 <HAL_SPI_TransmitReceive+0x268>
 80122f4:	2312      	movs	r3, #18
 80122f6:	18fb      	adds	r3, r7, r3
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d000      	beq.n	8012300 <HAL_SPI_TransmitReceive+0x268>
 80122fe:	e070      	b.n	80123e2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	330c      	adds	r3, #12
 801230a:	7812      	ldrb	r2, [r2, #0]
 801230c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012312:	1c5a      	adds	r2, r3, #1
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801231c:	b29b      	uxth	r3, r3
 801231e:	3b01      	subs	r3, #1
 8012320:	b29a      	uxth	r2, r3
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012326:	e05c      	b.n	80123e2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	2202      	movs	r2, #2
 8012330:	4013      	ands	r3, r2
 8012332:	2b02      	cmp	r3, #2
 8012334:	d11c      	bne.n	8012370 <HAL_SPI_TransmitReceive+0x2d8>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801233a:	b29b      	uxth	r3, r3
 801233c:	2b00      	cmp	r3, #0
 801233e:	d017      	beq.n	8012370 <HAL_SPI_TransmitReceive+0x2d8>
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	2b01      	cmp	r3, #1
 8012344:	d114      	bne.n	8012370 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	330c      	adds	r3, #12
 8012350:	7812      	ldrb	r2, [r2, #0]
 8012352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012358:	1c5a      	adds	r2, r3, #1
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012362:	b29b      	uxth	r3, r3
 8012364:	3b01      	subs	r3, #1
 8012366:	b29a      	uxth	r2, r3
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801236c:	2300      	movs	r3, #0
 801236e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	2201      	movs	r2, #1
 8012378:	4013      	ands	r3, r2
 801237a:	2b01      	cmp	r3, #1
 801237c:	d11e      	bne.n	80123bc <HAL_SPI_TransmitReceive+0x324>
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2246      	movs	r2, #70	@ 0x46
 8012382:	5a9b      	ldrh	r3, [r3, r2]
 8012384:	b29b      	uxth	r3, r3
 8012386:	2b00      	cmp	r3, #0
 8012388:	d018      	beq.n	80123bc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	330c      	adds	r3, #12
 8012390:	001a      	movs	r2, r3
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012396:	7812      	ldrb	r2, [r2, #0]
 8012398:	b2d2      	uxtb	r2, r2
 801239a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123a0:	1c5a      	adds	r2, r3, #1
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2246      	movs	r2, #70	@ 0x46
 80123aa:	5a9b      	ldrh	r3, [r3, r2]
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	3b01      	subs	r3, #1
 80123b0:	b299      	uxth	r1, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2246      	movs	r2, #70	@ 0x46
 80123b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80123b8:	2301      	movs	r3, #1
 80123ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80123bc:	f7fc f8a8 	bl	800e510 <HAL_GetTick>
 80123c0:	0002      	movs	r2, r0
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d802      	bhi.n	80123d2 <HAL_SPI_TransmitReceive+0x33a>
 80123cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ce:	3301      	adds	r3, #1
 80123d0:	d102      	bne.n	80123d8 <HAL_SPI_TransmitReceive+0x340>
 80123d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d104      	bne.n	80123e2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80123d8:	2323      	movs	r3, #35	@ 0x23
 80123da:	18fb      	adds	r3, r7, r3
 80123dc:	2203      	movs	r2, #3
 80123de:	701a      	strb	r2, [r3, #0]
        goto error;
 80123e0:	e01b      	b.n	801241a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d19d      	bne.n	8012328 <HAL_SPI_TransmitReceive+0x290>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2246      	movs	r2, #70	@ 0x46
 80123f0:	5a9b      	ldrh	r3, [r3, r2]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d197      	bne.n	8012328 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80123f8:	69fa      	ldr	r2, [r7, #28]
 80123fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	0018      	movs	r0, r3
 8012400:	f000 fa54 	bl	80128ac <SPI_EndRxTxTransaction>
 8012404:	1e03      	subs	r3, r0, #0
 8012406:	d007      	beq.n	8012418 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8012408:	2323      	movs	r3, #35	@ 0x23
 801240a:	18fb      	adds	r3, r7, r3
 801240c:	2201      	movs	r2, #1
 801240e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2220      	movs	r2, #32
 8012414:	661a      	str	r2, [r3, #96]	@ 0x60
 8012416:	e000      	b.n	801241a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8012418:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	225d      	movs	r2, #93	@ 0x5d
 801241e:	2101      	movs	r1, #1
 8012420:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	225c      	movs	r2, #92	@ 0x5c
 8012426:	2100      	movs	r1, #0
 8012428:	5499      	strb	r1, [r3, r2]
  return errorcode;
 801242a:	2323      	movs	r3, #35	@ 0x23
 801242c:	18fb      	adds	r3, r7, r3
 801242e:	781b      	ldrb	r3, [r3, #0]
}
 8012430:	0018      	movs	r0, r3
 8012432:	46bd      	mov	sp, r7
 8012434:	b00a      	add	sp, #40	@ 0x28
 8012436:	bd80      	pop	{r7, pc}
 8012438:	ffffefff 	.word	0xffffefff

0801243c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b088      	sub	sp, #32
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	689b      	ldr	r3, [r3, #8]
 8012452:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	2240      	movs	r2, #64	@ 0x40
 8012458:	4013      	ands	r3, r2
 801245a:	d10d      	bne.n	8012478 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	2201      	movs	r2, #1
 8012460:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012462:	d009      	beq.n	8012478 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	2240      	movs	r2, #64	@ 0x40
 8012468:	4013      	ands	r3, r2
 801246a:	d005      	beq.n	8012478 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	0010      	movs	r0, r2
 8012474:	4798      	blx	r3
    return;
 8012476:	e0c5      	b.n	8012604 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	2202      	movs	r2, #2
 801247c:	4013      	ands	r3, r2
 801247e:	d009      	beq.n	8012494 <HAL_SPI_IRQHandler+0x58>
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	2280      	movs	r2, #128	@ 0x80
 8012484:	4013      	ands	r3, r2
 8012486:	d005      	beq.n	8012494 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	0010      	movs	r0, r2
 8012490:	4798      	blx	r3
    return;
 8012492:	e0b7      	b.n	8012604 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	2220      	movs	r2, #32
 8012498:	4013      	ands	r3, r2
 801249a:	d109      	bne.n	80124b0 <HAL_SPI_IRQHandler+0x74>
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	2240      	movs	r2, #64	@ 0x40
 80124a0:	4013      	ands	r3, r2
 80124a2:	d105      	bne.n	80124b0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80124a4:	69ba      	ldr	r2, [r7, #24]
 80124a6:	2380      	movs	r3, #128	@ 0x80
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4013      	ands	r3, r2
 80124ac:	d100      	bne.n	80124b0 <HAL_SPI_IRQHandler+0x74>
 80124ae:	e0a9      	b.n	8012604 <HAL_SPI_IRQHandler+0x1c8>
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	2220      	movs	r2, #32
 80124b4:	4013      	ands	r3, r2
 80124b6:	d100      	bne.n	80124ba <HAL_SPI_IRQHandler+0x7e>
 80124b8:	e0a4      	b.n	8012604 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80124ba:	69bb      	ldr	r3, [r7, #24]
 80124bc:	2240      	movs	r2, #64	@ 0x40
 80124be:	4013      	ands	r3, r2
 80124c0:	d023      	beq.n	801250a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	225d      	movs	r2, #93	@ 0x5d
 80124c6:	5c9b      	ldrb	r3, [r3, r2]
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b03      	cmp	r3, #3
 80124cc:	d011      	beq.n	80124f2 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124d2:	2204      	movs	r2, #4
 80124d4:	431a      	orrs	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80124da:	2300      	movs	r3, #0
 80124dc:	617b      	str	r3, [r7, #20]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	617b      	str	r3, [r7, #20]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	617b      	str	r3, [r7, #20]
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	e00b      	b.n	801250a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80124f2:	2300      	movs	r3, #0
 80124f4:	613b      	str	r3, [r7, #16]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	613b      	str	r3, [r7, #16]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	613b      	str	r3, [r7, #16]
 8012506:	693b      	ldr	r3, [r7, #16]
        return;
 8012508:	e07c      	b.n	8012604 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	2220      	movs	r2, #32
 801250e:	4013      	ands	r3, r2
 8012510:	d014      	beq.n	801253c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012516:	2201      	movs	r2, #1
 8012518:	431a      	orrs	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801251e:	2300      	movs	r3, #0
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	60fb      	str	r3, [r7, #12]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2140      	movs	r1, #64	@ 0x40
 8012536:	438a      	bics	r2, r1
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801253c:	69ba      	ldr	r2, [r7, #24]
 801253e:	2380      	movs	r3, #128	@ 0x80
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	4013      	ands	r3, r2
 8012544:	d00c      	beq.n	8012560 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801254a:	2208      	movs	r2, #8
 801254c:	431a      	orrs	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012552:	2300      	movs	r3, #0
 8012554:	60bb      	str	r3, [r7, #8]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	60bb      	str	r3, [r7, #8]
 801255e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012564:	2b00      	cmp	r3, #0
 8012566:	d04c      	beq.n	8012602 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	685a      	ldr	r2, [r3, #4]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	21e0      	movs	r1, #224	@ 0xe0
 8012574:	438a      	bics	r2, r1
 8012576:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	225d      	movs	r2, #93	@ 0x5d
 801257c:	2101      	movs	r1, #1
 801257e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	2202      	movs	r2, #2
 8012584:	4013      	ands	r3, r2
 8012586:	d103      	bne.n	8012590 <HAL_SPI_IRQHandler+0x154>
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	2201      	movs	r2, #1
 801258c:	4013      	ands	r3, r2
 801258e:	d032      	beq.n	80125f6 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2103      	movs	r1, #3
 801259c:	438a      	bics	r2, r1
 801259e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d010      	beq.n	80125ca <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125ac:	4a17      	ldr	r2, [pc, #92]	@ (801260c <HAL_SPI_IRQHandler+0x1d0>)
 80125ae:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125b4:	0018      	movs	r0, r3
 80125b6:	f7fc fa3f 	bl	800ea38 <HAL_DMA_Abort_IT>
 80125ba:	1e03      	subs	r3, r0, #0
 80125bc:	d005      	beq.n	80125ca <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125c2:	2240      	movs	r2, #64	@ 0x40
 80125c4:	431a      	orrs	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d016      	beq.n	8012600 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125d6:	4a0d      	ldr	r2, [pc, #52]	@ (801260c <HAL_SPI_IRQHandler+0x1d0>)
 80125d8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125de:	0018      	movs	r0, r3
 80125e0:	f7fc fa2a 	bl	800ea38 <HAL_DMA_Abort_IT>
 80125e4:	1e03      	subs	r3, r0, #0
 80125e6:	d00b      	beq.n	8012600 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125ec:	2240      	movs	r2, #64	@ 0x40
 80125ee:	431a      	orrs	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80125f4:	e004      	b.n	8012600 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	0018      	movs	r0, r3
 80125fa:	f000 f809 	bl	8012610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80125fe:	e000      	b.n	8012602 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8012600:	46c0      	nop			@ (mov r8, r8)
    return;
 8012602:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012604:	46bd      	mov	sp, r7
 8012606:	b008      	add	sp, #32
 8012608:	bd80      	pop	{r7, pc}
 801260a:	46c0      	nop			@ (mov r8, r8)
 801260c:	08012621 	.word	0x08012621

08012610 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012618:	46c0      	nop			@ (mov r8, r8)
 801261a:	46bd      	mov	sp, r7
 801261c:	b002      	add	sp, #8
 801261e:	bd80      	pop	{r7, pc}

08012620 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801262c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2246      	movs	r2, #70	@ 0x46
 8012632:	2100      	movs	r1, #0
 8012634:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2200      	movs	r2, #0
 801263a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	0018      	movs	r0, r3
 8012640:	f7ff ffe6 	bl	8012610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012644:	46c0      	nop			@ (mov r8, r8)
 8012646:	46bd      	mov	sp, r7
 8012648:	b004      	add	sp, #16
 801264a:	bd80      	pop	{r7, pc}

0801264c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b088      	sub	sp, #32
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	603b      	str	r3, [r7, #0]
 8012658:	1dfb      	adds	r3, r7, #7
 801265a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801265c:	f7fb ff58 	bl	800e510 <HAL_GetTick>
 8012660:	0002      	movs	r2, r0
 8012662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012664:	1a9b      	subs	r3, r3, r2
 8012666:	683a      	ldr	r2, [r7, #0]
 8012668:	18d3      	adds	r3, r2, r3
 801266a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801266c:	f7fb ff50 	bl	800e510 <HAL_GetTick>
 8012670:	0003      	movs	r3, r0
 8012672:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012674:	4b3a      	ldr	r3, [pc, #232]	@ (8012760 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	015b      	lsls	r3, r3, #5
 801267a:	0d1b      	lsrs	r3, r3, #20
 801267c:	69fa      	ldr	r2, [r7, #28]
 801267e:	4353      	muls	r3, r2
 8012680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012682:	e058      	b.n	8012736 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	3301      	adds	r3, #1
 8012688:	d055      	beq.n	8012736 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801268a:	f7fb ff41 	bl	800e510 <HAL_GetTick>
 801268e:	0002      	movs	r2, r0
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	69fa      	ldr	r2, [r7, #28]
 8012696:	429a      	cmp	r2, r3
 8012698:	d902      	bls.n	80126a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d142      	bne.n	8012726 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	685a      	ldr	r2, [r3, #4]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	21e0      	movs	r1, #224	@ 0xe0
 80126ac:	438a      	bics	r2, r1
 80126ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	2382      	movs	r3, #130	@ 0x82
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d113      	bne.n	80126e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	689a      	ldr	r2, [r3, #8]
 80126c0:	2380      	movs	r3, #128	@ 0x80
 80126c2:	021b      	lsls	r3, r3, #8
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d005      	beq.n	80126d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	689a      	ldr	r2, [r3, #8]
 80126cc:	2380      	movs	r3, #128	@ 0x80
 80126ce:	00db      	lsls	r3, r3, #3
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d107      	bne.n	80126e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2140      	movs	r1, #64	@ 0x40
 80126e0:	438a      	bics	r2, r1
 80126e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126e8:	2380      	movs	r3, #128	@ 0x80
 80126ea:	019b      	lsls	r3, r3, #6
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d110      	bne.n	8012712 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	491a      	ldr	r1, [pc, #104]	@ (8012764 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80126fc:	400a      	ands	r2, r1
 80126fe:	601a      	str	r2, [r3, #0]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2180      	movs	r1, #128	@ 0x80
 801270c:	0189      	lsls	r1, r1, #6
 801270e:	430a      	orrs	r2, r1
 8012710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	225d      	movs	r2, #93	@ 0x5d
 8012716:	2101      	movs	r1, #1
 8012718:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	225c      	movs	r2, #92	@ 0x5c
 801271e:	2100      	movs	r1, #0
 8012720:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012722:	2303      	movs	r3, #3
 8012724:	e017      	b.n	8012756 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d101      	bne.n	8012730 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 801272c:	2300      	movs	r3, #0
 801272e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	3b01      	subs	r3, #1
 8012734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	4013      	ands	r3, r2
 8012740:	68ba      	ldr	r2, [r7, #8]
 8012742:	1ad3      	subs	r3, r2, r3
 8012744:	425a      	negs	r2, r3
 8012746:	4153      	adcs	r3, r2
 8012748:	b2db      	uxtb	r3, r3
 801274a:	001a      	movs	r2, r3
 801274c:	1dfb      	adds	r3, r7, #7
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	429a      	cmp	r2, r3
 8012752:	d197      	bne.n	8012684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012754:	2300      	movs	r3, #0
}
 8012756:	0018      	movs	r0, r3
 8012758:	46bd      	mov	sp, r7
 801275a:	b008      	add	sp, #32
 801275c:	bd80      	pop	{r7, pc}
 801275e:	46c0      	nop			@ (mov r8, r8)
 8012760:	20000548 	.word	0x20000548
 8012764:	ffffdfff 	.word	0xffffdfff

08012768 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b08a      	sub	sp, #40	@ 0x28
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
 8012774:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8012776:	2317      	movs	r3, #23
 8012778:	18fb      	adds	r3, r7, r3
 801277a:	2200      	movs	r2, #0
 801277c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801277e:	f7fb fec7 	bl	800e510 <HAL_GetTick>
 8012782:	0002      	movs	r2, r0
 8012784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012786:	1a9b      	subs	r3, r3, r2
 8012788:	683a      	ldr	r2, [r7, #0]
 801278a:	18d3      	adds	r3, r2, r3
 801278c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801278e:	f7fb febf 	bl	800e510 <HAL_GetTick>
 8012792:	0003      	movs	r3, r0
 8012794:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	330c      	adds	r3, #12
 801279c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801279e:	4b41      	ldr	r3, [pc, #260]	@ (80128a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	0013      	movs	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	189b      	adds	r3, r3, r2
 80127a8:	00da      	lsls	r2, r3, #3
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	0d1b      	lsrs	r3, r3, #20
 80127ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127b0:	4353      	muls	r3, r2
 80127b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80127b4:	e068      	b.n	8012888 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	23c0      	movs	r3, #192	@ 0xc0
 80127ba:	00db      	lsls	r3, r3, #3
 80127bc:	429a      	cmp	r2, r3
 80127be:	d10a      	bne.n	80127d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d107      	bne.n	80127d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	2117      	movs	r1, #23
 80127ce:	187b      	adds	r3, r7, r1
 80127d0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80127d2:	187b      	adds	r3, r7, r1
 80127d4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	3301      	adds	r3, #1
 80127da:	d055      	beq.n	8012888 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80127dc:	f7fb fe98 	bl	800e510 <HAL_GetTick>
 80127e0:	0002      	movs	r2, r0
 80127e2:	6a3b      	ldr	r3, [r7, #32]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d902      	bls.n	80127f2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80127ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d142      	bne.n	8012878 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	685a      	ldr	r2, [r3, #4]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	21e0      	movs	r1, #224	@ 0xe0
 80127fe:	438a      	bics	r2, r1
 8012800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	685a      	ldr	r2, [r3, #4]
 8012806:	2382      	movs	r3, #130	@ 0x82
 8012808:	005b      	lsls	r3, r3, #1
 801280a:	429a      	cmp	r2, r3
 801280c:	d113      	bne.n	8012836 <SPI_WaitFifoStateUntilTimeout+0xce>
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	689a      	ldr	r2, [r3, #8]
 8012812:	2380      	movs	r3, #128	@ 0x80
 8012814:	021b      	lsls	r3, r3, #8
 8012816:	429a      	cmp	r2, r3
 8012818:	d005      	beq.n	8012826 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	689a      	ldr	r2, [r3, #8]
 801281e:	2380      	movs	r3, #128	@ 0x80
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	429a      	cmp	r2, r3
 8012824:	d107      	bne.n	8012836 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2140      	movs	r1, #64	@ 0x40
 8012832:	438a      	bics	r2, r1
 8012834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801283a:	2380      	movs	r3, #128	@ 0x80
 801283c:	019b      	lsls	r3, r3, #6
 801283e:	429a      	cmp	r2, r3
 8012840:	d110      	bne.n	8012864 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4916      	ldr	r1, [pc, #88]	@ (80128a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 801284e:	400a      	ands	r2, r1
 8012850:	601a      	str	r2, [r3, #0]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2180      	movs	r1, #128	@ 0x80
 801285e:	0189      	lsls	r1, r1, #6
 8012860:	430a      	orrs	r2, r1
 8012862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	225d      	movs	r2, #93	@ 0x5d
 8012868:	2101      	movs	r1, #1
 801286a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	225c      	movs	r2, #92	@ 0x5c
 8012870:	2100      	movs	r1, #0
 8012872:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012874:	2303      	movs	r3, #3
 8012876:	e010      	b.n	801289a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 801287e:	2300      	movs	r3, #0
 8012880:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	3b01      	subs	r3, #1
 8012886:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	4013      	ands	r3, r2
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	429a      	cmp	r2, r3
 8012896:	d18e      	bne.n	80127b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	0018      	movs	r0, r3
 801289c:	46bd      	mov	sp, r7
 801289e:	b00a      	add	sp, #40	@ 0x28
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	46c0      	nop			@ (mov r8, r8)
 80128a4:	20000548 	.word	0x20000548
 80128a8:	ffffdfff 	.word	0xffffdfff

080128ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b086      	sub	sp, #24
 80128b0:	af02      	add	r7, sp, #8
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	23c0      	movs	r3, #192	@ 0xc0
 80128bc:	0159      	lsls	r1, r3, #5
 80128be:	68f8      	ldr	r0, [r7, #12]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	0013      	movs	r3, r2
 80128c6:	2200      	movs	r2, #0
 80128c8:	f7ff ff4e 	bl	8012768 <SPI_WaitFifoStateUntilTimeout>
 80128cc:	1e03      	subs	r3, r0, #0
 80128ce:	d007      	beq.n	80128e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128d4:	2220      	movs	r2, #32
 80128d6:	431a      	orrs	r2, r3
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80128dc:	2303      	movs	r3, #3
 80128de:	e027      	b.n	8012930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	9300      	str	r3, [sp, #0]
 80128e8:	0013      	movs	r3, r2
 80128ea:	2200      	movs	r2, #0
 80128ec:	2180      	movs	r1, #128	@ 0x80
 80128ee:	f7ff fead 	bl	801264c <SPI_WaitFlagStateUntilTimeout>
 80128f2:	1e03      	subs	r3, r0, #0
 80128f4:	d007      	beq.n	8012906 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128fa:	2220      	movs	r2, #32
 80128fc:	431a      	orrs	r2, r3
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012902:	2303      	movs	r3, #3
 8012904:	e014      	b.n	8012930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	23c0      	movs	r3, #192	@ 0xc0
 801290a:	00d9      	lsls	r1, r3, #3
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	9300      	str	r3, [sp, #0]
 8012912:	0013      	movs	r3, r2
 8012914:	2200      	movs	r2, #0
 8012916:	f7ff ff27 	bl	8012768 <SPI_WaitFifoStateUntilTimeout>
 801291a:	1e03      	subs	r3, r0, #0
 801291c:	d007      	beq.n	801292e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012922:	2220      	movs	r2, #32
 8012924:	431a      	orrs	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801292a:	2303      	movs	r3, #3
 801292c:	e000      	b.n	8012930 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	0018      	movs	r0, r3
 8012932:	46bd      	mov	sp, r7
 8012934:	b004      	add	sp, #16
 8012936:	bd80      	pop	{r7, pc}

08012938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d101      	bne.n	801294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012946:	2301      	movs	r3, #1
 8012948:	e04a      	b.n	80129e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	223d      	movs	r2, #61	@ 0x3d
 801294e:	5c9b      	ldrb	r3, [r3, r2]
 8012950:	b2db      	uxtb	r3, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	d107      	bne.n	8012966 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	223c      	movs	r2, #60	@ 0x3c
 801295a:	2100      	movs	r1, #0
 801295c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	0018      	movs	r0, r3
 8012962:	f7fb fbf7 	bl	800e154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	223d      	movs	r2, #61	@ 0x3d
 801296a:	2102      	movs	r1, #2
 801296c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	3304      	adds	r3, #4
 8012976:	0019      	movs	r1, r3
 8012978:	0010      	movs	r0, r2
 801297a:	f000 fd19 	bl	80133b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2248      	movs	r2, #72	@ 0x48
 8012982:	2101      	movs	r1, #1
 8012984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	223e      	movs	r2, #62	@ 0x3e
 801298a:	2101      	movs	r1, #1
 801298c:	5499      	strb	r1, [r3, r2]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	223f      	movs	r2, #63	@ 0x3f
 8012992:	2101      	movs	r1, #1
 8012994:	5499      	strb	r1, [r3, r2]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2240      	movs	r2, #64	@ 0x40
 801299a:	2101      	movs	r1, #1
 801299c:	5499      	strb	r1, [r3, r2]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2241      	movs	r2, #65	@ 0x41
 80129a2:	2101      	movs	r1, #1
 80129a4:	5499      	strb	r1, [r3, r2]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2242      	movs	r2, #66	@ 0x42
 80129aa:	2101      	movs	r1, #1
 80129ac:	5499      	strb	r1, [r3, r2]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2243      	movs	r2, #67	@ 0x43
 80129b2:	2101      	movs	r1, #1
 80129b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2244      	movs	r2, #68	@ 0x44
 80129ba:	2101      	movs	r1, #1
 80129bc:	5499      	strb	r1, [r3, r2]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2245      	movs	r2, #69	@ 0x45
 80129c2:	2101      	movs	r1, #1
 80129c4:	5499      	strb	r1, [r3, r2]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2246      	movs	r2, #70	@ 0x46
 80129ca:	2101      	movs	r1, #1
 80129cc:	5499      	strb	r1, [r3, r2]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2247      	movs	r2, #71	@ 0x47
 80129d2:	2101      	movs	r1, #1
 80129d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	223d      	movs	r2, #61	@ 0x3d
 80129da:	2101      	movs	r1, #1
 80129dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80129de:	2300      	movs	r3, #0
}
 80129e0:	0018      	movs	r0, r3
 80129e2:	46bd      	mov	sp, r7
 80129e4:	b002      	add	sp, #8
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	223d      	movs	r2, #61	@ 0x3d
 80129f4:	5c9b      	ldrb	r3, [r3, r2]
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d001      	beq.n	8012a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80129fc:	2301      	movs	r3, #1
 80129fe:	e042      	b.n	8012a86 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	223d      	movs	r2, #61	@ 0x3d
 8012a04:	2102      	movs	r1, #2
 8012a06:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	68da      	ldr	r2, [r3, #12]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2101      	movs	r1, #1
 8012a14:	430a      	orrs	r2, r1
 8012a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8012a90 <HAL_TIM_Base_Start_IT+0xa8>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d00f      	beq.n	8012a42 <HAL_TIM_Base_Start_IT+0x5a>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	2380      	movs	r3, #128	@ 0x80
 8012a28:	05db      	lsls	r3, r3, #23
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d009      	beq.n	8012a42 <HAL_TIM_Base_Start_IT+0x5a>
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	4a18      	ldr	r2, [pc, #96]	@ (8012a94 <HAL_TIM_Base_Start_IT+0xac>)
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d004      	beq.n	8012a42 <HAL_TIM_Base_Start_IT+0x5a>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a16      	ldr	r2, [pc, #88]	@ (8012a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d116      	bne.n	8012a70 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	4a14      	ldr	r2, [pc, #80]	@ (8012a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8012a4a:	4013      	ands	r3, r2
 8012a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2b06      	cmp	r3, #6
 8012a52:	d016      	beq.n	8012a82 <HAL_TIM_Base_Start_IT+0x9a>
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	2380      	movs	r3, #128	@ 0x80
 8012a58:	025b      	lsls	r3, r3, #9
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d011      	beq.n	8012a82 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2101      	movs	r1, #1
 8012a6a:	430a      	orrs	r2, r1
 8012a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a6e:	e008      	b.n	8012a82 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2101      	movs	r1, #1
 8012a7c:	430a      	orrs	r2, r1
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	e000      	b.n	8012a84 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a82:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	0018      	movs	r0, r3
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	b004      	add	sp, #16
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	46c0      	nop			@ (mov r8, r8)
 8012a90:	40012c00 	.word	0x40012c00
 8012a94:	40000400 	.word	0x40000400
 8012a98:	40014000 	.word	0x40014000
 8012a9c:	00010007 	.word	0x00010007

08012aa0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d101      	bne.n	8012ab2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	e04a      	b.n	8012b48 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	223d      	movs	r2, #61	@ 0x3d
 8012ab6:	5c9b      	ldrb	r3, [r3, r2]
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d107      	bne.n	8012ace <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	223c      	movs	r2, #60	@ 0x3c
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	0018      	movs	r0, r3
 8012aca:	f7fb fa99 	bl	800e000 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	223d      	movs	r2, #61	@ 0x3d
 8012ad2:	2102      	movs	r1, #2
 8012ad4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	3304      	adds	r3, #4
 8012ade:	0019      	movs	r1, r3
 8012ae0:	0010      	movs	r0, r2
 8012ae2:	f000 fc65 	bl	80133b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2248      	movs	r2, #72	@ 0x48
 8012aea:	2101      	movs	r1, #1
 8012aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	223e      	movs	r2, #62	@ 0x3e
 8012af2:	2101      	movs	r1, #1
 8012af4:	5499      	strb	r1, [r3, r2]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	223f      	movs	r2, #63	@ 0x3f
 8012afa:	2101      	movs	r1, #1
 8012afc:	5499      	strb	r1, [r3, r2]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2240      	movs	r2, #64	@ 0x40
 8012b02:	2101      	movs	r1, #1
 8012b04:	5499      	strb	r1, [r3, r2]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2241      	movs	r2, #65	@ 0x41
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	5499      	strb	r1, [r3, r2]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2242      	movs	r2, #66	@ 0x42
 8012b12:	2101      	movs	r1, #1
 8012b14:	5499      	strb	r1, [r3, r2]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2243      	movs	r2, #67	@ 0x43
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2244      	movs	r2, #68	@ 0x44
 8012b22:	2101      	movs	r1, #1
 8012b24:	5499      	strb	r1, [r3, r2]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2245      	movs	r2, #69	@ 0x45
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	5499      	strb	r1, [r3, r2]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2246      	movs	r2, #70	@ 0x46
 8012b32:	2101      	movs	r1, #1
 8012b34:	5499      	strb	r1, [r3, r2]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2247      	movs	r2, #71	@ 0x47
 8012b3a:	2101      	movs	r1, #1
 8012b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	223d      	movs	r2, #61	@ 0x3d
 8012b42:	2101      	movs	r1, #1
 8012b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b46:	2300      	movs	r3, #0
}
 8012b48:	0018      	movs	r0, r3
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	b002      	add	sp, #8
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b5a:	230f      	movs	r3, #15
 8012b5c:	18fb      	adds	r3, r7, r3
 8012b5e:	2200      	movs	r2, #0
 8012b60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d104      	bne.n	8012b72 <HAL_TIM_IC_Start_IT+0x22>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	223e      	movs	r2, #62	@ 0x3e
 8012b6c:	5c9b      	ldrb	r3, [r3, r2]
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	e023      	b.n	8012bba <HAL_TIM_IC_Start_IT+0x6a>
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b04      	cmp	r3, #4
 8012b76:	d104      	bne.n	8012b82 <HAL_TIM_IC_Start_IT+0x32>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	223f      	movs	r2, #63	@ 0x3f
 8012b7c:	5c9b      	ldrb	r3, [r3, r2]
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	e01b      	b.n	8012bba <HAL_TIM_IC_Start_IT+0x6a>
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	2b08      	cmp	r3, #8
 8012b86:	d104      	bne.n	8012b92 <HAL_TIM_IC_Start_IT+0x42>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2240      	movs	r2, #64	@ 0x40
 8012b8c:	5c9b      	ldrb	r3, [r3, r2]
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	e013      	b.n	8012bba <HAL_TIM_IC_Start_IT+0x6a>
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	2b0c      	cmp	r3, #12
 8012b96:	d104      	bne.n	8012ba2 <HAL_TIM_IC_Start_IT+0x52>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2241      	movs	r2, #65	@ 0x41
 8012b9c:	5c9b      	ldrb	r3, [r3, r2]
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	e00b      	b.n	8012bba <HAL_TIM_IC_Start_IT+0x6a>
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	2b10      	cmp	r3, #16
 8012ba6:	d104      	bne.n	8012bb2 <HAL_TIM_IC_Start_IT+0x62>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2242      	movs	r2, #66	@ 0x42
 8012bac:	5c9b      	ldrb	r3, [r3, r2]
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	e003      	b.n	8012bba <HAL_TIM_IC_Start_IT+0x6a>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2243      	movs	r2, #67	@ 0x43
 8012bb6:	5c9b      	ldrb	r3, [r3, r2]
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	220e      	movs	r2, #14
 8012bbc:	18ba      	adds	r2, r7, r2
 8012bbe:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d104      	bne.n	8012bd0 <HAL_TIM_IC_Start_IT+0x80>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2244      	movs	r2, #68	@ 0x44
 8012bca:	5c9b      	ldrb	r3, [r3, r2]
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	e013      	b.n	8012bf8 <HAL_TIM_IC_Start_IT+0xa8>
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	d104      	bne.n	8012be0 <HAL_TIM_IC_Start_IT+0x90>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2245      	movs	r2, #69	@ 0x45
 8012bda:	5c9b      	ldrb	r3, [r3, r2]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	e00b      	b.n	8012bf8 <HAL_TIM_IC_Start_IT+0xa8>
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	2b08      	cmp	r3, #8
 8012be4:	d104      	bne.n	8012bf0 <HAL_TIM_IC_Start_IT+0xa0>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2246      	movs	r2, #70	@ 0x46
 8012bea:	5c9b      	ldrb	r3, [r3, r2]
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	e003      	b.n	8012bf8 <HAL_TIM_IC_Start_IT+0xa8>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2247      	movs	r2, #71	@ 0x47
 8012bf4:	5c9b      	ldrb	r3, [r3, r2]
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	210d      	movs	r1, #13
 8012bfa:	187a      	adds	r2, r7, r1
 8012bfc:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012bfe:	230e      	movs	r3, #14
 8012c00:	18fb      	adds	r3, r7, r3
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d103      	bne.n	8012c10 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012c08:	187b      	adds	r3, r7, r1
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d001      	beq.n	8012c14 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8012c10:	2301      	movs	r3, #1
 8012c12:	e0c8      	b.n	8012da6 <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d104      	bne.n	8012c24 <HAL_TIM_IC_Start_IT+0xd4>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	223e      	movs	r2, #62	@ 0x3e
 8012c1e:	2102      	movs	r1, #2
 8012c20:	5499      	strb	r1, [r3, r2]
 8012c22:	e023      	b.n	8012c6c <HAL_TIM_IC_Start_IT+0x11c>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b04      	cmp	r3, #4
 8012c28:	d104      	bne.n	8012c34 <HAL_TIM_IC_Start_IT+0xe4>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	223f      	movs	r2, #63	@ 0x3f
 8012c2e:	2102      	movs	r1, #2
 8012c30:	5499      	strb	r1, [r3, r2]
 8012c32:	e01b      	b.n	8012c6c <HAL_TIM_IC_Start_IT+0x11c>
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	2b08      	cmp	r3, #8
 8012c38:	d104      	bne.n	8012c44 <HAL_TIM_IC_Start_IT+0xf4>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2240      	movs	r2, #64	@ 0x40
 8012c3e:	2102      	movs	r1, #2
 8012c40:	5499      	strb	r1, [r3, r2]
 8012c42:	e013      	b.n	8012c6c <HAL_TIM_IC_Start_IT+0x11c>
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b0c      	cmp	r3, #12
 8012c48:	d104      	bne.n	8012c54 <HAL_TIM_IC_Start_IT+0x104>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2241      	movs	r2, #65	@ 0x41
 8012c4e:	2102      	movs	r1, #2
 8012c50:	5499      	strb	r1, [r3, r2]
 8012c52:	e00b      	b.n	8012c6c <HAL_TIM_IC_Start_IT+0x11c>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b10      	cmp	r3, #16
 8012c58:	d104      	bne.n	8012c64 <HAL_TIM_IC_Start_IT+0x114>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2242      	movs	r2, #66	@ 0x42
 8012c5e:	2102      	movs	r1, #2
 8012c60:	5499      	strb	r1, [r3, r2]
 8012c62:	e003      	b.n	8012c6c <HAL_TIM_IC_Start_IT+0x11c>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2243      	movs	r2, #67	@ 0x43
 8012c68:	2102      	movs	r1, #2
 8012c6a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d104      	bne.n	8012c7c <HAL_TIM_IC_Start_IT+0x12c>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2244      	movs	r2, #68	@ 0x44
 8012c76:	2102      	movs	r1, #2
 8012c78:	5499      	strb	r1, [r3, r2]
 8012c7a:	e013      	b.n	8012ca4 <HAL_TIM_IC_Start_IT+0x154>
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	2b04      	cmp	r3, #4
 8012c80:	d104      	bne.n	8012c8c <HAL_TIM_IC_Start_IT+0x13c>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2245      	movs	r2, #69	@ 0x45
 8012c86:	2102      	movs	r1, #2
 8012c88:	5499      	strb	r1, [r3, r2]
 8012c8a:	e00b      	b.n	8012ca4 <HAL_TIM_IC_Start_IT+0x154>
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	2b08      	cmp	r3, #8
 8012c90:	d104      	bne.n	8012c9c <HAL_TIM_IC_Start_IT+0x14c>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2246      	movs	r2, #70	@ 0x46
 8012c96:	2102      	movs	r1, #2
 8012c98:	5499      	strb	r1, [r3, r2]
 8012c9a:	e003      	b.n	8012ca4 <HAL_TIM_IC_Start_IT+0x154>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2247      	movs	r2, #71	@ 0x47
 8012ca0:	2102      	movs	r1, #2
 8012ca2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b0c      	cmp	r3, #12
 8012ca8:	d02a      	beq.n	8012d00 <HAL_TIM_IC_Start_IT+0x1b0>
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	2b0c      	cmp	r3, #12
 8012cae:	d830      	bhi.n	8012d12 <HAL_TIM_IC_Start_IT+0x1c2>
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	2b08      	cmp	r3, #8
 8012cb4:	d01b      	beq.n	8012cee <HAL_TIM_IC_Start_IT+0x19e>
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	2b08      	cmp	r3, #8
 8012cba:	d82a      	bhi.n	8012d12 <HAL_TIM_IC_Start_IT+0x1c2>
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d003      	beq.n	8012cca <HAL_TIM_IC_Start_IT+0x17a>
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	2b04      	cmp	r3, #4
 8012cc6:	d009      	beq.n	8012cdc <HAL_TIM_IC_Start_IT+0x18c>
 8012cc8:	e023      	b.n	8012d12 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	68da      	ldr	r2, [r3, #12]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2102      	movs	r1, #2
 8012cd6:	430a      	orrs	r2, r1
 8012cd8:	60da      	str	r2, [r3, #12]
      break;
 8012cda:	e01f      	b.n	8012d1c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	68da      	ldr	r2, [r3, #12]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2104      	movs	r1, #4
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	60da      	str	r2, [r3, #12]
      break;
 8012cec:	e016      	b.n	8012d1c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	68da      	ldr	r2, [r3, #12]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2108      	movs	r1, #8
 8012cfa:	430a      	orrs	r2, r1
 8012cfc:	60da      	str	r2, [r3, #12]
      break;
 8012cfe:	e00d      	b.n	8012d1c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	68da      	ldr	r2, [r3, #12]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2110      	movs	r1, #16
 8012d0c:	430a      	orrs	r2, r1
 8012d0e:	60da      	str	r2, [r3, #12]
      break;
 8012d10:	e004      	b.n	8012d1c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8012d12:	230f      	movs	r3, #15
 8012d14:	18fb      	adds	r3, r7, r3
 8012d16:	2201      	movs	r2, #1
 8012d18:	701a      	strb	r2, [r3, #0]
      break;
 8012d1a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8012d1c:	230f      	movs	r3, #15
 8012d1e:	18fb      	adds	r3, r7, r3
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d13c      	bne.n	8012da0 <HAL_TIM_IC_Start_IT+0x250>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	6839      	ldr	r1, [r7, #0]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	0018      	movs	r0, r3
 8012d30:	f000 fd7e 	bl	8013830 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a1d      	ldr	r2, [pc, #116]	@ (8012db0 <HAL_TIM_IC_Start_IT+0x260>)
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d00f      	beq.n	8012d5e <HAL_TIM_IC_Start_IT+0x20e>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	2380      	movs	r3, #128	@ 0x80
 8012d44:	05db      	lsls	r3, r3, #23
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d009      	beq.n	8012d5e <HAL_TIM_IC_Start_IT+0x20e>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	4a19      	ldr	r2, [pc, #100]	@ (8012db4 <HAL_TIM_IC_Start_IT+0x264>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d004      	beq.n	8012d5e <HAL_TIM_IC_Start_IT+0x20e>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4a17      	ldr	r2, [pc, #92]	@ (8012db8 <HAL_TIM_IC_Start_IT+0x268>)
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d116      	bne.n	8012d8c <HAL_TIM_IC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	4a15      	ldr	r2, [pc, #84]	@ (8012dbc <HAL_TIM_IC_Start_IT+0x26c>)
 8012d66:	4013      	ands	r3, r2
 8012d68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	2b06      	cmp	r3, #6
 8012d6e:	d016      	beq.n	8012d9e <HAL_TIM_IC_Start_IT+0x24e>
 8012d70:	68ba      	ldr	r2, [r7, #8]
 8012d72:	2380      	movs	r3, #128	@ 0x80
 8012d74:	025b      	lsls	r3, r3, #9
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d011      	beq.n	8012d9e <HAL_TIM_IC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	2101      	movs	r1, #1
 8012d86:	430a      	orrs	r2, r1
 8012d88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d8a:	e008      	b.n	8012d9e <HAL_TIM_IC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2101      	movs	r1, #1
 8012d98:	430a      	orrs	r2, r1
 8012d9a:	601a      	str	r2, [r3, #0]
 8012d9c:	e000      	b.n	8012da0 <HAL_TIM_IC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d9e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8012da0:	230f      	movs	r3, #15
 8012da2:	18fb      	adds	r3, r7, r3
 8012da4:	781b      	ldrb	r3, [r3, #0]
}
 8012da6:	0018      	movs	r0, r3
 8012da8:	46bd      	mov	sp, r7
 8012daa:	b004      	add	sp, #16
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	46c0      	nop			@ (mov r8, r8)
 8012db0:	40012c00 	.word	0x40012c00
 8012db4:	40000400 	.word	0x40000400
 8012db8:	40014000 	.word	0x40014000
 8012dbc:	00010007 	.word	0x00010007

08012dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	691b      	ldr	r3, [r3, #16]
 8012dce:	2202      	movs	r2, #2
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	2b02      	cmp	r3, #2
 8012dd4:	d124      	bne.n	8012e20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	2202      	movs	r2, #2
 8012dde:	4013      	ands	r3, r2
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	d11d      	bne.n	8012e20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2203      	movs	r2, #3
 8012dea:	4252      	negs	r2, r2
 8012dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2201      	movs	r2, #1
 8012df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	699b      	ldr	r3, [r3, #24]
 8012dfa:	2203      	movs	r2, #3
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	d004      	beq.n	8012e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	0018      	movs	r0, r3
 8012e04:	f7f1 f9a8 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8012e08:	e007      	b.n	8012e1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	0018      	movs	r0, r3
 8012e0e:	f000 fab7 	bl	8013380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	0018      	movs	r0, r3
 8012e16:	f000 fabb 	bl	8013390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	691b      	ldr	r3, [r3, #16]
 8012e26:	2204      	movs	r2, #4
 8012e28:	4013      	ands	r3, r2
 8012e2a:	2b04      	cmp	r3, #4
 8012e2c:	d125      	bne.n	8012e7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	2204      	movs	r2, #4
 8012e36:	4013      	ands	r3, r2
 8012e38:	2b04      	cmp	r3, #4
 8012e3a:	d11e      	bne.n	8012e7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2205      	movs	r2, #5
 8012e42:	4252      	negs	r2, r2
 8012e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2202      	movs	r2, #2
 8012e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	699a      	ldr	r2, [r3, #24]
 8012e52:	23c0      	movs	r3, #192	@ 0xc0
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4013      	ands	r3, r2
 8012e58:	d004      	beq.n	8012e64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f7f1 f97b 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8012e62:	e007      	b.n	8012e74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	0018      	movs	r0, r3
 8012e68:	f000 fa8a 	bl	8013380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	0018      	movs	r0, r3
 8012e70:	f000 fa8e 	bl	8013390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	2208      	movs	r2, #8
 8012e82:	4013      	ands	r3, r2
 8012e84:	2b08      	cmp	r3, #8
 8012e86:	d124      	bne.n	8012ed2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	2208      	movs	r2, #8
 8012e90:	4013      	ands	r3, r2
 8012e92:	2b08      	cmp	r3, #8
 8012e94:	d11d      	bne.n	8012ed2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2209      	movs	r2, #9
 8012e9c:	4252      	negs	r2, r2
 8012e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2204      	movs	r2, #4
 8012ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	69db      	ldr	r3, [r3, #28]
 8012eac:	2203      	movs	r2, #3
 8012eae:	4013      	ands	r3, r2
 8012eb0:	d004      	beq.n	8012ebc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	0018      	movs	r0, r3
 8012eb6:	f7f1 f94f 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8012eba:	e007      	b.n	8012ecc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	f000 fa5e 	bl	8013380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	0018      	movs	r0, r3
 8012ec8:	f000 fa62 	bl	8013390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	2210      	movs	r2, #16
 8012eda:	4013      	ands	r3, r2
 8012edc:	2b10      	cmp	r3, #16
 8012ede:	d125      	bne.n	8012f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	2210      	movs	r2, #16
 8012ee8:	4013      	ands	r3, r2
 8012eea:	2b10      	cmp	r3, #16
 8012eec:	d11e      	bne.n	8012f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2211      	movs	r2, #17
 8012ef4:	4252      	negs	r2, r2
 8012ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2208      	movs	r2, #8
 8012efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	69da      	ldr	r2, [r3, #28]
 8012f04:	23c0      	movs	r3, #192	@ 0xc0
 8012f06:	009b      	lsls	r3, r3, #2
 8012f08:	4013      	ands	r3, r2
 8012f0a:	d004      	beq.n	8012f16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	0018      	movs	r0, r3
 8012f10:	f7f1 f922 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8012f14:	e007      	b.n	8012f26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	0018      	movs	r0, r3
 8012f1a:	f000 fa31 	bl	8013380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	0018      	movs	r0, r3
 8012f22:	f000 fa35 	bl	8013390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	691b      	ldr	r3, [r3, #16]
 8012f32:	2201      	movs	r2, #1
 8012f34:	4013      	ands	r3, r2
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d10f      	bne.n	8012f5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	2201      	movs	r2, #1
 8012f42:	4013      	ands	r3, r2
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d108      	bne.n	8012f5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2202      	movs	r2, #2
 8012f4e:	4252      	negs	r2, r2
 8012f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	0018      	movs	r0, r3
 8012f56:	f7f1 f9bb 	bl	80042d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	691b      	ldr	r3, [r3, #16]
 8012f60:	2280      	movs	r2, #128	@ 0x80
 8012f62:	4013      	ands	r3, r2
 8012f64:	2b80      	cmp	r3, #128	@ 0x80
 8012f66:	d10f      	bne.n	8012f88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	2280      	movs	r2, #128	@ 0x80
 8012f70:	4013      	ands	r3, r2
 8012f72:	2b80      	cmp	r3, #128	@ 0x80
 8012f74:	d108      	bne.n	8012f88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2281      	movs	r2, #129	@ 0x81
 8012f7c:	4252      	negs	r2, r2
 8012f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	0018      	movs	r0, r3
 8012f84:	f000 fcee 	bl	8013964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	691a      	ldr	r2, [r3, #16]
 8012f8e:	2380      	movs	r3, #128	@ 0x80
 8012f90:	005b      	lsls	r3, r3, #1
 8012f92:	401a      	ands	r2, r3
 8012f94:	2380      	movs	r3, #128	@ 0x80
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d10e      	bne.n	8012fba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	2280      	movs	r2, #128	@ 0x80
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	2b80      	cmp	r3, #128	@ 0x80
 8012fa8:	d107      	bne.n	8012fba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4a1c      	ldr	r2, [pc, #112]	@ (8013020 <HAL_TIM_IRQHandler+0x260>)
 8012fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	0018      	movs	r0, r3
 8012fb6:	f000 fcdd 	bl	8013974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	691b      	ldr	r3, [r3, #16]
 8012fc0:	2240      	movs	r2, #64	@ 0x40
 8012fc2:	4013      	ands	r3, r2
 8012fc4:	2b40      	cmp	r3, #64	@ 0x40
 8012fc6:	d10f      	bne.n	8012fe8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	2240      	movs	r2, #64	@ 0x40
 8012fd0:	4013      	ands	r3, r2
 8012fd2:	2b40      	cmp	r3, #64	@ 0x40
 8012fd4:	d108      	bne.n	8012fe8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2241      	movs	r2, #65	@ 0x41
 8012fdc:	4252      	negs	r2, r2
 8012fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	0018      	movs	r0, r3
 8012fe4:	f000 f9dc 	bl	80133a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	691b      	ldr	r3, [r3, #16]
 8012fee:	2220      	movs	r2, #32
 8012ff0:	4013      	ands	r3, r2
 8012ff2:	2b20      	cmp	r3, #32
 8012ff4:	d10f      	bne.n	8013016 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	2220      	movs	r2, #32
 8012ffe:	4013      	ands	r3, r2
 8013000:	2b20      	cmp	r3, #32
 8013002:	d108      	bne.n	8013016 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2221      	movs	r2, #33	@ 0x21
 801300a:	4252      	negs	r2, r2
 801300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	0018      	movs	r0, r3
 8013012:	f000 fc9f 	bl	8013954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013016:	46c0      	nop			@ (mov r8, r8)
 8013018:	46bd      	mov	sp, r7
 801301a:	b002      	add	sp, #8
 801301c:	bd80      	pop	{r7, pc}
 801301e:	46c0      	nop			@ (mov r8, r8)
 8013020:	fffffeff 	.word	0xfffffeff

08013024 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b086      	sub	sp, #24
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013030:	2317      	movs	r3, #23
 8013032:	18fb      	adds	r3, r7, r3
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	223c      	movs	r2, #60	@ 0x3c
 801303c:	5c9b      	ldrb	r3, [r3, r2]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d101      	bne.n	8013046 <HAL_TIM_IC_ConfigChannel+0x22>
 8013042:	2302      	movs	r3, #2
 8013044:	e08c      	b.n	8013160 <HAL_TIM_IC_ConfigChannel+0x13c>
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	223c      	movs	r2, #60	@ 0x3c
 801304a:	2101      	movs	r1, #1
 801304c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d11b      	bne.n	801308c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8013064:	f000 fa24 	bl	80134b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	699a      	ldr	r2, [r3, #24]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	210c      	movs	r1, #12
 8013074:	438a      	bics	r2, r1
 8013076:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	6999      	ldr	r1, [r3, #24]
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	689a      	ldr	r2, [r3, #8]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	430a      	orrs	r2, r1
 8013088:	619a      	str	r2, [r3, #24]
 801308a:	e062      	b.n	8013152 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b04      	cmp	r3, #4
 8013090:	d11c      	bne.n	80130cc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80130a2:	f000 fa8f 	bl	80135c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	699a      	ldr	r2, [r3, #24]
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	492d      	ldr	r1, [pc, #180]	@ (8013168 <HAL_TIM_IC_ConfigChannel+0x144>)
 80130b2:	400a      	ands	r2, r1
 80130b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	6999      	ldr	r1, [r3, #24]
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	689b      	ldr	r3, [r3, #8]
 80130c0:	021a      	lsls	r2, r3, #8
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	430a      	orrs	r2, r1
 80130c8:	619a      	str	r2, [r3, #24]
 80130ca:	e042      	b.n	8013152 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b08      	cmp	r3, #8
 80130d0:	d11b      	bne.n	801310a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80130e2:	f000 fae3 	bl	80136ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	69da      	ldr	r2, [r3, #28]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	210c      	movs	r1, #12
 80130f2:	438a      	bics	r2, r1
 80130f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	69d9      	ldr	r1, [r3, #28]
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	689a      	ldr	r2, [r3, #8]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	430a      	orrs	r2, r1
 8013106:	61da      	str	r2, [r3, #28]
 8013108:	e023      	b.n	8013152 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b0c      	cmp	r3, #12
 801310e:	d11c      	bne.n	801314a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013120:	f000 fb04 	bl	801372c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	69da      	ldr	r2, [r3, #28]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	490e      	ldr	r1, [pc, #56]	@ (8013168 <HAL_TIM_IC_ConfigChannel+0x144>)
 8013130:	400a      	ands	r2, r1
 8013132:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	69d9      	ldr	r1, [r3, #28]
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	689b      	ldr	r3, [r3, #8]
 801313e:	021a      	lsls	r2, r3, #8
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	430a      	orrs	r2, r1
 8013146:	61da      	str	r2, [r3, #28]
 8013148:	e003      	b.n	8013152 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 801314a:	2317      	movs	r3, #23
 801314c:	18fb      	adds	r3, r7, r3
 801314e:	2201      	movs	r2, #1
 8013150:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	223c      	movs	r2, #60	@ 0x3c
 8013156:	2100      	movs	r1, #0
 8013158:	5499      	strb	r1, [r3, r2]

  return status;
 801315a:	2317      	movs	r3, #23
 801315c:	18fb      	adds	r3, r7, r3
 801315e:	781b      	ldrb	r3, [r3, #0]
}
 8013160:	0018      	movs	r0, r3
 8013162:	46bd      	mov	sp, r7
 8013164:	b006      	add	sp, #24
 8013166:	bd80      	pop	{r7, pc}
 8013168:	fffff3ff 	.word	0xfffff3ff

0801316c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013176:	230f      	movs	r3, #15
 8013178:	18fb      	adds	r3, r7, r3
 801317a:	2200      	movs	r2, #0
 801317c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	223c      	movs	r2, #60	@ 0x3c
 8013182:	5c9b      	ldrb	r3, [r3, r2]
 8013184:	2b01      	cmp	r3, #1
 8013186:	d101      	bne.n	801318c <HAL_TIM_ConfigClockSource+0x20>
 8013188:	2302      	movs	r3, #2
 801318a:	e0bc      	b.n	8013306 <HAL_TIM_ConfigClockSource+0x19a>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	223c      	movs	r2, #60	@ 0x3c
 8013190:	2101      	movs	r1, #1
 8013192:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	223d      	movs	r2, #61	@ 0x3d
 8013198:	2102      	movs	r1, #2
 801319a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	4a5a      	ldr	r2, [pc, #360]	@ (8013310 <HAL_TIM_ConfigClockSource+0x1a4>)
 80131a8:	4013      	ands	r3, r2
 80131aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	4a59      	ldr	r2, [pc, #356]	@ (8013314 <HAL_TIM_ConfigClockSource+0x1a8>)
 80131b0:	4013      	ands	r3, r2
 80131b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2280      	movs	r2, #128	@ 0x80
 80131c2:	0192      	lsls	r2, r2, #6
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d040      	beq.n	801324a <HAL_TIM_ConfigClockSource+0xde>
 80131c8:	2280      	movs	r2, #128	@ 0x80
 80131ca:	0192      	lsls	r2, r2, #6
 80131cc:	4293      	cmp	r3, r2
 80131ce:	d900      	bls.n	80131d2 <HAL_TIM_ConfigClockSource+0x66>
 80131d0:	e088      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 80131d2:	2280      	movs	r2, #128	@ 0x80
 80131d4:	0152      	lsls	r2, r2, #5
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d100      	bne.n	80131dc <HAL_TIM_ConfigClockSource+0x70>
 80131da:	e088      	b.n	80132ee <HAL_TIM_ConfigClockSource+0x182>
 80131dc:	2280      	movs	r2, #128	@ 0x80
 80131de:	0152      	lsls	r2, r2, #5
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d900      	bls.n	80131e6 <HAL_TIM_ConfigClockSource+0x7a>
 80131e4:	e07e      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 80131e6:	2b70      	cmp	r3, #112	@ 0x70
 80131e8:	d018      	beq.n	801321c <HAL_TIM_ConfigClockSource+0xb0>
 80131ea:	d900      	bls.n	80131ee <HAL_TIM_ConfigClockSource+0x82>
 80131ec:	e07a      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 80131ee:	2b60      	cmp	r3, #96	@ 0x60
 80131f0:	d04f      	beq.n	8013292 <HAL_TIM_ConfigClockSource+0x126>
 80131f2:	d900      	bls.n	80131f6 <HAL_TIM_ConfigClockSource+0x8a>
 80131f4:	e076      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 80131f6:	2b50      	cmp	r3, #80	@ 0x50
 80131f8:	d03b      	beq.n	8013272 <HAL_TIM_ConfigClockSource+0x106>
 80131fa:	d900      	bls.n	80131fe <HAL_TIM_ConfigClockSource+0x92>
 80131fc:	e072      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 80131fe:	2b40      	cmp	r3, #64	@ 0x40
 8013200:	d057      	beq.n	80132b2 <HAL_TIM_ConfigClockSource+0x146>
 8013202:	d900      	bls.n	8013206 <HAL_TIM_ConfigClockSource+0x9a>
 8013204:	e06e      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 8013206:	2b30      	cmp	r3, #48	@ 0x30
 8013208:	d063      	beq.n	80132d2 <HAL_TIM_ConfigClockSource+0x166>
 801320a:	d86b      	bhi.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 801320c:	2b20      	cmp	r3, #32
 801320e:	d060      	beq.n	80132d2 <HAL_TIM_ConfigClockSource+0x166>
 8013210:	d868      	bhi.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
 8013212:	2b00      	cmp	r3, #0
 8013214:	d05d      	beq.n	80132d2 <HAL_TIM_ConfigClockSource+0x166>
 8013216:	2b10      	cmp	r3, #16
 8013218:	d05b      	beq.n	80132d2 <HAL_TIM_ConfigClockSource+0x166>
 801321a:	e063      	b.n	80132e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801322c:	f000 fae0 	bl	80137f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	2277      	movs	r2, #119	@ 0x77
 801323c:	4313      	orrs	r3, r2
 801323e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	609a      	str	r2, [r3, #8]
      break;
 8013248:	e052      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801325a:	f000 fac9 	bl	80137f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	689a      	ldr	r2, [r3, #8]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2180      	movs	r1, #128	@ 0x80
 801326a:	01c9      	lsls	r1, r1, #7
 801326c:	430a      	orrs	r2, r1
 801326e:	609a      	str	r2, [r3, #8]
      break;
 8013270:	e03e      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801327e:	001a      	movs	r2, r3
 8013280:	f000 f972 	bl	8013568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2150      	movs	r1, #80	@ 0x50
 801328a:	0018      	movs	r0, r3
 801328c:	f000 fa94 	bl	80137b8 <TIM_ITRx_SetConfig>
      break;
 8013290:	e02e      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801329e:	001a      	movs	r2, r3
 80132a0:	f000 f9d2 	bl	8013648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2160      	movs	r1, #96	@ 0x60
 80132aa:	0018      	movs	r0, r3
 80132ac:	f000 fa84 	bl	80137b8 <TIM_ITRx_SetConfig>
      break;
 80132b0:	e01e      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80132be:	001a      	movs	r2, r3
 80132c0:	f000 f952 	bl	8013568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2140      	movs	r1, #64	@ 0x40
 80132ca:	0018      	movs	r0, r3
 80132cc:	f000 fa74 	bl	80137b8 <TIM_ITRx_SetConfig>
      break;
 80132d0:	e00e      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	0019      	movs	r1, r3
 80132dc:	0010      	movs	r0, r2
 80132de:	f000 fa6b 	bl	80137b8 <TIM_ITRx_SetConfig>
      break;
 80132e2:	e005      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80132e4:	230f      	movs	r3, #15
 80132e6:	18fb      	adds	r3, r7, r3
 80132e8:	2201      	movs	r2, #1
 80132ea:	701a      	strb	r2, [r3, #0]
      break;
 80132ec:	e000      	b.n	80132f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80132ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	223d      	movs	r2, #61	@ 0x3d
 80132f4:	2101      	movs	r1, #1
 80132f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	223c      	movs	r2, #60	@ 0x3c
 80132fc:	2100      	movs	r1, #0
 80132fe:	5499      	strb	r1, [r3, r2]

  return status;
 8013300:	230f      	movs	r3, #15
 8013302:	18fb      	adds	r3, r7, r3
 8013304:	781b      	ldrb	r3, [r3, #0]
}
 8013306:	0018      	movs	r0, r3
 8013308:	46bd      	mov	sp, r7
 801330a:	b004      	add	sp, #16
 801330c:	bd80      	pop	{r7, pc}
 801330e:	46c0      	nop			@ (mov r8, r8)
 8013310:	ffceff88 	.word	0xffceff88
 8013314:	ffff00ff 	.word	0xffff00ff

08013318 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8013322:	2300      	movs	r3, #0
 8013324:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	2b0c      	cmp	r3, #12
 801332a:	d01e      	beq.n	801336a <HAL_TIM_ReadCapturedValue+0x52>
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	2b0c      	cmp	r3, #12
 8013330:	d820      	bhi.n	8013374 <HAL_TIM_ReadCapturedValue+0x5c>
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	2b08      	cmp	r3, #8
 8013336:	d013      	beq.n	8013360 <HAL_TIM_ReadCapturedValue+0x48>
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	2b08      	cmp	r3, #8
 801333c:	d81a      	bhi.n	8013374 <HAL_TIM_ReadCapturedValue+0x5c>
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d003      	beq.n	801334c <HAL_TIM_ReadCapturedValue+0x34>
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	2b04      	cmp	r3, #4
 8013348:	d005      	beq.n	8013356 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 801334a:	e013      	b.n	8013374 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013352:	60fb      	str	r3, [r7, #12]
      break;
 8013354:	e00f      	b.n	8013376 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801335c:	60fb      	str	r3, [r7, #12]
      break;
 801335e:	e00a      	b.n	8013376 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013366:	60fb      	str	r3, [r7, #12]
      break;
 8013368:	e005      	b.n	8013376 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013370:	60fb      	str	r3, [r7, #12]
      break;
 8013372:	e000      	b.n	8013376 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8013374:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8013376:	68fb      	ldr	r3, [r7, #12]
}
 8013378:	0018      	movs	r0, r3
 801337a:	46bd      	mov	sp, r7
 801337c:	b004      	add	sp, #16
 801337e:	bd80      	pop	{r7, pc}

08013380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013388:	46c0      	nop			@ (mov r8, r8)
 801338a:	46bd      	mov	sp, r7
 801338c:	b002      	add	sp, #8
 801338e:	bd80      	pop	{r7, pc}

08013390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013398:	46c0      	nop			@ (mov r8, r8)
 801339a:	46bd      	mov	sp, r7
 801339c:	b002      	add	sp, #8
 801339e:	bd80      	pop	{r7, pc}

080133a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80133a8:	46c0      	nop			@ (mov r8, r8)
 80133aa:	46bd      	mov	sp, r7
 80133ac:	b002      	add	sp, #8
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	4a34      	ldr	r2, [pc, #208]	@ (8013494 <TIM_Base_SetConfig+0xe4>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d008      	beq.n	80133da <TIM_Base_SetConfig+0x2a>
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	2380      	movs	r3, #128	@ 0x80
 80133cc:	05db      	lsls	r3, r3, #23
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d003      	beq.n	80133da <TIM_Base_SetConfig+0x2a>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4a30      	ldr	r2, [pc, #192]	@ (8013498 <TIM_Base_SetConfig+0xe8>)
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d108      	bne.n	80133ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2270      	movs	r2, #112	@ 0x70
 80133de:	4393      	bics	r3, r2
 80133e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	4313      	orrs	r3, r2
 80133ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	4a29      	ldr	r2, [pc, #164]	@ (8013494 <TIM_Base_SetConfig+0xe4>)
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d018      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	2380      	movs	r3, #128	@ 0x80
 80133f8:	05db      	lsls	r3, r3, #23
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d013      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4a25      	ldr	r2, [pc, #148]	@ (8013498 <TIM_Base_SetConfig+0xe8>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d00f      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4a24      	ldr	r2, [pc, #144]	@ (801349c <TIM_Base_SetConfig+0xec>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d00b      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4a23      	ldr	r2, [pc, #140]	@ (80134a0 <TIM_Base_SetConfig+0xf0>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d007      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4a22      	ldr	r2, [pc, #136]	@ (80134a4 <TIM_Base_SetConfig+0xf4>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d003      	beq.n	8013426 <TIM_Base_SetConfig+0x76>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4a21      	ldr	r2, [pc, #132]	@ (80134a8 <TIM_Base_SetConfig+0xf8>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d108      	bne.n	8013438 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	4a20      	ldr	r2, [pc, #128]	@ (80134ac <TIM_Base_SetConfig+0xfc>)
 801342a:	4013      	ands	r3, r2
 801342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	68fa      	ldr	r2, [r7, #12]
 8013434:	4313      	orrs	r3, r2
 8013436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2280      	movs	r2, #128	@ 0x80
 801343c:	4393      	bics	r3, r2
 801343e:	001a      	movs	r2, r3
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	695b      	ldr	r3, [r3, #20]
 8013444:	4313      	orrs	r3, r2
 8013446:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	68fa      	ldr	r2, [r7, #12]
 801344c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	689a      	ldr	r2, [r3, #8]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	4a0c      	ldr	r2, [pc, #48]	@ (8013494 <TIM_Base_SetConfig+0xe4>)
 8013462:	4293      	cmp	r3, r2
 8013464:	d00b      	beq.n	801347e <TIM_Base_SetConfig+0xce>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4a0d      	ldr	r2, [pc, #52]	@ (80134a0 <TIM_Base_SetConfig+0xf0>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d007      	beq.n	801347e <TIM_Base_SetConfig+0xce>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4a0c      	ldr	r2, [pc, #48]	@ (80134a4 <TIM_Base_SetConfig+0xf4>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d003      	beq.n	801347e <TIM_Base_SetConfig+0xce>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4a0b      	ldr	r2, [pc, #44]	@ (80134a8 <TIM_Base_SetConfig+0xf8>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d103      	bne.n	8013486 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	691a      	ldr	r2, [r3, #16]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2201      	movs	r2, #1
 801348a:	615a      	str	r2, [r3, #20]
}
 801348c:	46c0      	nop			@ (mov r8, r8)
 801348e:	46bd      	mov	sp, r7
 8013490:	b004      	add	sp, #16
 8013492:	bd80      	pop	{r7, pc}
 8013494:	40012c00 	.word	0x40012c00
 8013498:	40000400 	.word	0x40000400
 801349c:	40002000 	.word	0x40002000
 80134a0:	40014000 	.word	0x40014000
 80134a4:	40014400 	.word	0x40014400
 80134a8:	40014800 	.word	0x40014800
 80134ac:	fffffcff 	.word	0xfffffcff

080134b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b086      	sub	sp, #24
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
 80134bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	2201      	movs	r2, #1
 80134c4:	4393      	bics	r3, r2
 80134c6:	001a      	movs	r2, r3
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	4a20      	ldr	r2, [pc, #128]	@ (801355c <TIM_TI1_SetConfig+0xac>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d00c      	beq.n	80134fa <TIM_TI1_SetConfig+0x4a>
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	2380      	movs	r3, #128	@ 0x80
 80134e4:	05db      	lsls	r3, r3, #23
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d007      	beq.n	80134fa <TIM_TI1_SetConfig+0x4a>
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	4a1c      	ldr	r2, [pc, #112]	@ (8013560 <TIM_TI1_SetConfig+0xb0>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d003      	beq.n	80134fa <TIM_TI1_SetConfig+0x4a>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	4a1b      	ldr	r2, [pc, #108]	@ (8013564 <TIM_TI1_SetConfig+0xb4>)
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d101      	bne.n	80134fe <TIM_TI1_SetConfig+0x4e>
 80134fa:	2301      	movs	r3, #1
 80134fc:	e000      	b.n	8013500 <TIM_TI1_SetConfig+0x50>
 80134fe:	2300      	movs	r3, #0
 8013500:	2b00      	cmp	r3, #0
 8013502:	d008      	beq.n	8013516 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	2203      	movs	r2, #3
 8013508:	4393      	bics	r3, r2
 801350a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801350c:	697a      	ldr	r2, [r7, #20]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4313      	orrs	r3, r2
 8013512:	617b      	str	r3, [r7, #20]
 8013514:	e003      	b.n	801351e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	2201      	movs	r2, #1
 801351a:	4313      	orrs	r3, r2
 801351c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	22f0      	movs	r2, #240	@ 0xf0
 8013522:	4393      	bics	r3, r2
 8013524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	011b      	lsls	r3, r3, #4
 801352a:	22ff      	movs	r2, #255	@ 0xff
 801352c:	4013      	ands	r3, r2
 801352e:	697a      	ldr	r2, [r7, #20]
 8013530:	4313      	orrs	r3, r2
 8013532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	220a      	movs	r2, #10
 8013538:	4393      	bics	r3, r2
 801353a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	220a      	movs	r2, #10
 8013540:	4013      	ands	r3, r2
 8013542:	693a      	ldr	r2, [r7, #16]
 8013544:	4313      	orrs	r3, r2
 8013546:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	693a      	ldr	r2, [r7, #16]
 8013552:	621a      	str	r2, [r3, #32]
}
 8013554:	46c0      	nop			@ (mov r8, r8)
 8013556:	46bd      	mov	sp, r7
 8013558:	b006      	add	sp, #24
 801355a:	bd80      	pop	{r7, pc}
 801355c:	40012c00 	.word	0x40012c00
 8013560:	40000400 	.word	0x40000400
 8013564:	40014000 	.word	0x40014000

08013568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6a1b      	ldr	r3, [r3, #32]
 8013578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6a1b      	ldr	r3, [r3, #32]
 801357e:	2201      	movs	r2, #1
 8013580:	4393      	bics	r3, r2
 8013582:	001a      	movs	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	699b      	ldr	r3, [r3, #24]
 801358c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	22f0      	movs	r2, #240	@ 0xf0
 8013592:	4393      	bics	r3, r2
 8013594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	011b      	lsls	r3, r3, #4
 801359a:	693a      	ldr	r2, [r7, #16]
 801359c:	4313      	orrs	r3, r2
 801359e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	220a      	movs	r2, #10
 80135a4:	4393      	bics	r3, r2
 80135a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80135a8:	697a      	ldr	r2, [r7, #20]
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	4313      	orrs	r3, r2
 80135ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	693a      	ldr	r2, [r7, #16]
 80135b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	697a      	ldr	r2, [r7, #20]
 80135ba:	621a      	str	r2, [r3, #32]
}
 80135bc:	46c0      	nop			@ (mov r8, r8)
 80135be:	46bd      	mov	sp, r7
 80135c0:	b006      	add	sp, #24
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	6a1b      	ldr	r3, [r3, #32]
 80135d6:	2210      	movs	r2, #16
 80135d8:	4393      	bics	r3, r2
 80135da:	001a      	movs	r2, r3
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	699b      	ldr	r3, [r3, #24]
 80135e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	4a14      	ldr	r2, [pc, #80]	@ (8013640 <TIM_TI2_SetConfig+0x7c>)
 80135f0:	4013      	ands	r3, r2
 80135f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	021b      	lsls	r3, r3, #8
 80135f8:	697a      	ldr	r2, [r7, #20]
 80135fa:	4313      	orrs	r3, r2
 80135fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	4a10      	ldr	r2, [pc, #64]	@ (8013644 <TIM_TI2_SetConfig+0x80>)
 8013602:	4013      	ands	r3, r2
 8013604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	031b      	lsls	r3, r3, #12
 801360a:	041b      	lsls	r3, r3, #16
 801360c:	0c1b      	lsrs	r3, r3, #16
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	4313      	orrs	r3, r2
 8013612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	22a0      	movs	r2, #160	@ 0xa0
 8013618:	4393      	bics	r3, r2
 801361a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	011b      	lsls	r3, r3, #4
 8013620:	22a0      	movs	r2, #160	@ 0xa0
 8013622:	4013      	ands	r3, r2
 8013624:	693a      	ldr	r2, [r7, #16]
 8013626:	4313      	orrs	r3, r2
 8013628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	693a      	ldr	r2, [r7, #16]
 8013634:	621a      	str	r2, [r3, #32]
}
 8013636:	46c0      	nop			@ (mov r8, r8)
 8013638:	46bd      	mov	sp, r7
 801363a:	b006      	add	sp, #24
 801363c:	bd80      	pop	{r7, pc}
 801363e:	46c0      	nop			@ (mov r8, r8)
 8013640:	fffffcff 	.word	0xfffffcff
 8013644:	ffff0fff 	.word	0xffff0fff

08013648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b086      	sub	sp, #24
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6a1b      	ldr	r3, [r3, #32]
 8013658:	2210      	movs	r2, #16
 801365a:	4393      	bics	r3, r2
 801365c:	001a      	movs	r2, r3
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	699b      	ldr	r3, [r3, #24]
 8013666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6a1b      	ldr	r3, [r3, #32]
 801366c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	4a0d      	ldr	r2, [pc, #52]	@ (80136a8 <TIM_TI2_ConfigInputStage+0x60>)
 8013672:	4013      	ands	r3, r2
 8013674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	031b      	lsls	r3, r3, #12
 801367a:	697a      	ldr	r2, [r7, #20]
 801367c:	4313      	orrs	r3, r2
 801367e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	22a0      	movs	r2, #160	@ 0xa0
 8013684:	4393      	bics	r3, r2
 8013686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	011b      	lsls	r3, r3, #4
 801368c:	693a      	ldr	r2, [r7, #16]
 801368e:	4313      	orrs	r3, r2
 8013690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	697a      	ldr	r2, [r7, #20]
 8013696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	693a      	ldr	r2, [r7, #16]
 801369c:	621a      	str	r2, [r3, #32]
}
 801369e:	46c0      	nop			@ (mov r8, r8)
 80136a0:	46bd      	mov	sp, r7
 80136a2:	b006      	add	sp, #24
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	46c0      	nop			@ (mov r8, r8)
 80136a8:	ffff0fff 	.word	0xffff0fff

080136ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b086      	sub	sp, #24
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	60f8      	str	r0, [r7, #12]
 80136b4:	60b9      	str	r1, [r7, #8]
 80136b6:	607a      	str	r2, [r7, #4]
 80136b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6a1b      	ldr	r3, [r3, #32]
 80136be:	4a19      	ldr	r2, [pc, #100]	@ (8013724 <TIM_TI3_SetConfig+0x78>)
 80136c0:	401a      	ands	r2, r3
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	69db      	ldr	r3, [r3, #28]
 80136ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6a1b      	ldr	r3, [r3, #32]
 80136d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	2203      	movs	r2, #3
 80136d6:	4393      	bics	r3, r2
 80136d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	4313      	orrs	r3, r2
 80136e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	22f0      	movs	r2, #240	@ 0xf0
 80136e6:	4393      	bics	r3, r2
 80136e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	011b      	lsls	r3, r3, #4
 80136ee:	22ff      	movs	r2, #255	@ 0xff
 80136f0:	4013      	ands	r3, r2
 80136f2:	697a      	ldr	r2, [r7, #20]
 80136f4:	4313      	orrs	r3, r2
 80136f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	4a0b      	ldr	r2, [pc, #44]	@ (8013728 <TIM_TI3_SetConfig+0x7c>)
 80136fc:	4013      	ands	r3, r2
 80136fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	021a      	lsls	r2, r3, #8
 8013704:	23a0      	movs	r3, #160	@ 0xa0
 8013706:	011b      	lsls	r3, r3, #4
 8013708:	4013      	ands	r3, r2
 801370a:	693a      	ldr	r2, [r7, #16]
 801370c:	4313      	orrs	r3, r2
 801370e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	697a      	ldr	r2, [r7, #20]
 8013714:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	693a      	ldr	r2, [r7, #16]
 801371a:	621a      	str	r2, [r3, #32]
}
 801371c:	46c0      	nop			@ (mov r8, r8)
 801371e:	46bd      	mov	sp, r7
 8013720:	b006      	add	sp, #24
 8013722:	bd80      	pop	{r7, pc}
 8013724:	fffffeff 	.word	0xfffffeff
 8013728:	fffff5ff 	.word	0xfffff5ff

0801372c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b086      	sub	sp, #24
 8013730:	af00      	add	r7, sp, #0
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	4a1a      	ldr	r2, [pc, #104]	@ (80137a8 <TIM_TI4_SetConfig+0x7c>)
 8013740:	401a      	ands	r2, r3
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	69db      	ldr	r3, [r3, #28]
 801374a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	6a1b      	ldr	r3, [r3, #32]
 8013750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	4a15      	ldr	r2, [pc, #84]	@ (80137ac <TIM_TI4_SetConfig+0x80>)
 8013756:	4013      	ands	r3, r2
 8013758:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	021b      	lsls	r3, r3, #8
 801375e:	697a      	ldr	r2, [r7, #20]
 8013760:	4313      	orrs	r3, r2
 8013762:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	4a12      	ldr	r2, [pc, #72]	@ (80137b0 <TIM_TI4_SetConfig+0x84>)
 8013768:	4013      	ands	r3, r2
 801376a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	031b      	lsls	r3, r3, #12
 8013770:	041b      	lsls	r3, r3, #16
 8013772:	0c1b      	lsrs	r3, r3, #16
 8013774:	697a      	ldr	r2, [r7, #20]
 8013776:	4313      	orrs	r3, r2
 8013778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	4a0d      	ldr	r2, [pc, #52]	@ (80137b4 <TIM_TI4_SetConfig+0x88>)
 801377e:	4013      	ands	r3, r2
 8013780:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	031a      	lsls	r2, r3, #12
 8013786:	23a0      	movs	r3, #160	@ 0xa0
 8013788:	021b      	lsls	r3, r3, #8
 801378a:	4013      	ands	r3, r2
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	4313      	orrs	r3, r2
 8013790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	697a      	ldr	r2, [r7, #20]
 8013796:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	693a      	ldr	r2, [r7, #16]
 801379c:	621a      	str	r2, [r3, #32]
}
 801379e:	46c0      	nop			@ (mov r8, r8)
 80137a0:	46bd      	mov	sp, r7
 80137a2:	b006      	add	sp, #24
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	46c0      	nop			@ (mov r8, r8)
 80137a8:	ffffefff 	.word	0xffffefff
 80137ac:	fffffcff 	.word	0xfffffcff
 80137b0:	ffff0fff 	.word	0xffff0fff
 80137b4:	ffff5fff 	.word	0xffff5fff

080137b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	4a08      	ldr	r2, [pc, #32]	@ (80137ec <TIM_ITRx_SetConfig+0x34>)
 80137cc:	4013      	ands	r3, r2
 80137ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	4313      	orrs	r3, r2
 80137d6:	2207      	movs	r2, #7
 80137d8:	4313      	orrs	r3, r2
 80137da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	68fa      	ldr	r2, [r7, #12]
 80137e0:	609a      	str	r2, [r3, #8]
}
 80137e2:	46c0      	nop			@ (mov r8, r8)
 80137e4:	46bd      	mov	sp, r7
 80137e6:	b004      	add	sp, #16
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	46c0      	nop			@ (mov r8, r8)
 80137ec:	ffcfff8f 	.word	0xffcfff8f

080137f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	4a09      	ldr	r2, [pc, #36]	@ (801382c <TIM_ETR_SetConfig+0x3c>)
 8013808:	4013      	ands	r3, r2
 801380a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	021a      	lsls	r2, r3, #8
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	431a      	orrs	r2, r3
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	4313      	orrs	r3, r2
 8013818:	697a      	ldr	r2, [r7, #20]
 801381a:	4313      	orrs	r3, r2
 801381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	697a      	ldr	r2, [r7, #20]
 8013822:	609a      	str	r2, [r3, #8]
}
 8013824:	46c0      	nop			@ (mov r8, r8)
 8013826:	46bd      	mov	sp, r7
 8013828:	b006      	add	sp, #24
 801382a:	bd80      	pop	{r7, pc}
 801382c:	ffff00ff 	.word	0xffff00ff

08013830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	221f      	movs	r2, #31
 8013840:	4013      	ands	r3, r2
 8013842:	2201      	movs	r2, #1
 8013844:	409a      	lsls	r2, r3
 8013846:	0013      	movs	r3, r2
 8013848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6a1b      	ldr	r3, [r3, #32]
 801384e:	697a      	ldr	r2, [r7, #20]
 8013850:	43d2      	mvns	r2, r2
 8013852:	401a      	ands	r2, r3
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6a1a      	ldr	r2, [r3, #32]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	211f      	movs	r1, #31
 8013860:	400b      	ands	r3, r1
 8013862:	6879      	ldr	r1, [r7, #4]
 8013864:	4099      	lsls	r1, r3
 8013866:	000b      	movs	r3, r1
 8013868:	431a      	orrs	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	621a      	str	r2, [r3, #32]
}
 801386e:	46c0      	nop			@ (mov r8, r8)
 8013870:	46bd      	mov	sp, r7
 8013872:	b006      	add	sp, #24
 8013874:	bd80      	pop	{r7, pc}
	...

08013878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	223c      	movs	r2, #60	@ 0x3c
 8013886:	5c9b      	ldrb	r3, [r3, r2]
 8013888:	2b01      	cmp	r3, #1
 801388a:	d101      	bne.n	8013890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801388c:	2302      	movs	r3, #2
 801388e:	e055      	b.n	801393c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	223c      	movs	r2, #60	@ 0x3c
 8013894:	2101      	movs	r1, #1
 8013896:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	223d      	movs	r2, #61	@ 0x3d
 801389c:	2102      	movs	r1, #2
 801389e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	4a23      	ldr	r2, [pc, #140]	@ (8013944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d108      	bne.n	80138cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4a22      	ldr	r2, [pc, #136]	@ (8013948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80138be:	4013      	ands	r3, r2
 80138c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	4313      	orrs	r3, r2
 80138ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2270      	movs	r2, #112	@ 0x70
 80138d0:	4393      	bics	r3, r2
 80138d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	4313      	orrs	r3, r2
 80138dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4a16      	ldr	r2, [pc, #88]	@ (8013944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80138ec:	4293      	cmp	r3, r2
 80138ee:	d00f      	beq.n	8013910 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	2380      	movs	r3, #128	@ 0x80
 80138f6:	05db      	lsls	r3, r3, #23
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d009      	beq.n	8013910 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a12      	ldr	r2, [pc, #72]	@ (801394c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8013902:	4293      	cmp	r3, r2
 8013904:	d004      	beq.n	8013910 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a11      	ldr	r2, [pc, #68]	@ (8013950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d10c      	bne.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	2280      	movs	r2, #128	@ 0x80
 8013914:	4393      	bics	r3, r2
 8013916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	689b      	ldr	r3, [r3, #8]
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	4313      	orrs	r3, r2
 8013920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	68ba      	ldr	r2, [r7, #8]
 8013928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	223d      	movs	r2, #61	@ 0x3d
 801392e:	2101      	movs	r1, #1
 8013930:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	223c      	movs	r2, #60	@ 0x3c
 8013936:	2100      	movs	r1, #0
 8013938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	0018      	movs	r0, r3
 801393e:	46bd      	mov	sp, r7
 8013940:	b004      	add	sp, #16
 8013942:	bd80      	pop	{r7, pc}
 8013944:	40012c00 	.word	0x40012c00
 8013948:	ff0fffff 	.word	0xff0fffff
 801394c:	40000400 	.word	0x40000400
 8013950:	40014000 	.word	0x40014000

08013954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801395c:	46c0      	nop			@ (mov r8, r8)
 801395e:	46bd      	mov	sp, r7
 8013960:	b002      	add	sp, #8
 8013962:	bd80      	pop	{r7, pc}

08013964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801396c:	46c0      	nop			@ (mov r8, r8)
 801396e:	46bd      	mov	sp, r7
 8013970:	b002      	add	sp, #8
 8013972:	bd80      	pop	{r7, pc}

08013974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801397c:	46c0      	nop			@ (mov r8, r8)
 801397e:	46bd      	mov	sp, r7
 8013980:	b002      	add	sp, #8
 8013982:	bd80      	pop	{r7, pc}

08013984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d101      	bne.n	8013996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013992:	2301      	movs	r3, #1
 8013994:	e046      	b.n	8013a24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2284      	movs	r2, #132	@ 0x84
 801399a:	589b      	ldr	r3, [r3, r2]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d107      	bne.n	80139b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2280      	movs	r2, #128	@ 0x80
 80139a4:	2100      	movs	r1, #0
 80139a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	0018      	movs	r0, r3
 80139ac:	f7fa f902 	bl	800dbb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2284      	movs	r2, #132	@ 0x84
 80139b4:	2124      	movs	r1, #36	@ 0x24
 80139b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2101      	movs	r1, #1
 80139c4:	438a      	bics	r2, r1
 80139c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	0018      	movs	r0, r3
 80139cc:	f000 fe28 	bl	8014620 <UART_SetConfig>
 80139d0:	0003      	movs	r3, r0
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d101      	bne.n	80139da <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80139d6:	2301      	movs	r3, #1
 80139d8:	e024      	b.n	8013a24 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d003      	beq.n	80139ea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	0018      	movs	r0, r3
 80139e6:	f001 f8d9 	bl	8014b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	685a      	ldr	r2, [r3, #4]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	490d      	ldr	r1, [pc, #52]	@ (8013a2c <HAL_UART_Init+0xa8>)
 80139f6:	400a      	ands	r2, r1
 80139f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	689a      	ldr	r2, [r3, #8]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	212a      	movs	r1, #42	@ 0x2a
 8013a06:	438a      	bics	r2, r1
 8013a08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2101      	movs	r1, #1
 8013a16:	430a      	orrs	r2, r1
 8013a18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	0018      	movs	r0, r3
 8013a1e:	f001 f971 	bl	8014d04 <UART_CheckIdleState>
 8013a22:	0003      	movs	r3, r0
}
 8013a24:	0018      	movs	r0, r3
 8013a26:	46bd      	mov	sp, r7
 8013a28:	b002      	add	sp, #8
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	ffffb7ff 	.word	0xffffb7ff

08013a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b08a      	sub	sp, #40	@ 0x28
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	603b      	str	r3, [r7, #0]
 8013a3c:	1dbb      	adds	r3, r7, #6
 8013a3e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2284      	movs	r2, #132	@ 0x84
 8013a44:	589b      	ldr	r3, [r3, r2]
 8013a46:	2b20      	cmp	r3, #32
 8013a48:	d000      	beq.n	8013a4c <HAL_UART_Transmit+0x1c>
 8013a4a:	e097      	b.n	8013b7c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d003      	beq.n	8013a5a <HAL_UART_Transmit+0x2a>
 8013a52:	1dbb      	adds	r3, r7, #6
 8013a54:	881b      	ldrh	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e08f      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	689a      	ldr	r2, [r3, #8]
 8013a62:	2380      	movs	r3, #128	@ 0x80
 8013a64:	015b      	lsls	r3, r3, #5
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d109      	bne.n	8013a7e <HAL_UART_Transmit+0x4e>
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	691b      	ldr	r3, [r3, #16]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d105      	bne.n	8013a7e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	2201      	movs	r2, #1
 8013a76:	4013      	ands	r3, r2
 8013a78:	d001      	beq.n	8013a7e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e07f      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2280      	movs	r2, #128	@ 0x80
 8013a82:	5c9b      	ldrb	r3, [r3, r2]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d101      	bne.n	8013a8c <HAL_UART_Transmit+0x5c>
 8013a88:	2302      	movs	r3, #2
 8013a8a:	e078      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2280      	movs	r2, #128	@ 0x80
 8013a90:	2101      	movs	r1, #1
 8013a92:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	228c      	movs	r2, #140	@ 0x8c
 8013a98:	2100      	movs	r1, #0
 8013a9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2284      	movs	r2, #132	@ 0x84
 8013aa0:	2121      	movs	r1, #33	@ 0x21
 8013aa2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013aa4:	f7fa fd34 	bl	800e510 <HAL_GetTick>
 8013aa8:	0003      	movs	r3, r0
 8013aaa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	1dba      	adds	r2, r7, #6
 8013ab0:	2154      	movs	r1, #84	@ 0x54
 8013ab2:	8812      	ldrh	r2, [r2, #0]
 8013ab4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	1dba      	adds	r2, r7, #6
 8013aba:	2156      	movs	r1, #86	@ 0x56
 8013abc:	8812      	ldrh	r2, [r2, #0]
 8013abe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	689a      	ldr	r2, [r3, #8]
 8013ac4:	2380      	movs	r3, #128	@ 0x80
 8013ac6:	015b      	lsls	r3, r3, #5
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d108      	bne.n	8013ade <HAL_UART_Transmit+0xae>
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	691b      	ldr	r3, [r3, #16]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d104      	bne.n	8013ade <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	61bb      	str	r3, [r7, #24]
 8013adc:	e003      	b.n	8013ae6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2280      	movs	r2, #128	@ 0x80
 8013aea:	2100      	movs	r1, #0
 8013aec:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8013aee:	e02c      	b.n	8013b4a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013af0:	697a      	ldr	r2, [r7, #20]
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	0013      	movs	r3, r2
 8013afa:	2200      	movs	r2, #0
 8013afc:	2180      	movs	r1, #128	@ 0x80
 8013afe:	f001 f94b 	bl	8014d98 <UART_WaitOnFlagUntilTimeout>
 8013b02:	1e03      	subs	r3, r0, #0
 8013b04:	d001      	beq.n	8013b0a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8013b06:	2303      	movs	r3, #3
 8013b08:	e039      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8013b0a:	69fb      	ldr	r3, [r7, #28]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d10b      	bne.n	8013b28 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	881b      	ldrh	r3, [r3, #0]
 8013b14:	001a      	movs	r2, r3
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	05d2      	lsls	r2, r2, #23
 8013b1c:	0dd2      	lsrs	r2, r2, #23
 8013b1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	3302      	adds	r3, #2
 8013b24:	61bb      	str	r3, [r7, #24]
 8013b26:	e007      	b.n	8013b38 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	781a      	ldrb	r2, [r3, #0]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	3301      	adds	r3, #1
 8013b36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2256      	movs	r2, #86	@ 0x56
 8013b3c:	5a9b      	ldrh	r3, [r3, r2]
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	3b01      	subs	r3, #1
 8013b42:	b299      	uxth	r1, r3
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2256      	movs	r2, #86	@ 0x56
 8013b48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2256      	movs	r2, #86	@ 0x56
 8013b4e:	5a9b      	ldrh	r3, [r3, r2]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1cc      	bne.n	8013af0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	0013      	movs	r3, r2
 8013b60:	2200      	movs	r2, #0
 8013b62:	2140      	movs	r1, #64	@ 0x40
 8013b64:	f001 f918 	bl	8014d98 <UART_WaitOnFlagUntilTimeout>
 8013b68:	1e03      	subs	r3, r0, #0
 8013b6a:	d001      	beq.n	8013b70 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8013b6c:	2303      	movs	r3, #3
 8013b6e:	e006      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2284      	movs	r2, #132	@ 0x84
 8013b74:	2120      	movs	r1, #32
 8013b76:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	e000      	b.n	8013b7e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8013b7c:	2302      	movs	r3, #2
  }
}
 8013b7e:	0018      	movs	r0, r3
 8013b80:	46bd      	mov	sp, r7
 8013b82:	b008      	add	sp, #32
 8013b84:	bd80      	pop	{r7, pc}
	...

08013b88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b088      	sub	sp, #32
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	1dbb      	adds	r3, r7, #6
 8013b94:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2288      	movs	r2, #136	@ 0x88
 8013b9a:	589b      	ldr	r3, [r3, r2]
 8013b9c:	2b20      	cmp	r3, #32
 8013b9e:	d155      	bne.n	8013c4c <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d003      	beq.n	8013bae <HAL_UART_Receive_IT+0x26>
 8013ba6:	1dbb      	adds	r3, r7, #6
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	e04d      	b.n	8013c4e <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	689a      	ldr	r2, [r3, #8]
 8013bb6:	2380      	movs	r3, #128	@ 0x80
 8013bb8:	015b      	lsls	r3, r3, #5
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d109      	bne.n	8013bd2 <HAL_UART_Receive_IT+0x4a>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	691b      	ldr	r3, [r3, #16]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d105      	bne.n	8013bd2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2201      	movs	r2, #1
 8013bca:	4013      	ands	r3, r2
 8013bcc:	d001      	beq.n	8013bd2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8013bce:	2301      	movs	r3, #1
 8013bd0:	e03d      	b.n	8013c4e <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2280      	movs	r2, #128	@ 0x80
 8013bd6:	5c9b      	ldrb	r3, [r3, r2]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d101      	bne.n	8013be0 <HAL_UART_Receive_IT+0x58>
 8013bdc:	2302      	movs	r3, #2
 8013bde:	e036      	b.n	8013c4e <HAL_UART_Receive_IT+0xc6>
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2280      	movs	r2, #128	@ 0x80
 8013be4:	2101      	movs	r1, #1
 8013be6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2200      	movs	r2, #0
 8013bec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4a19      	ldr	r2, [pc, #100]	@ (8013c58 <HAL_UART_Receive_IT+0xd0>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d020      	beq.n	8013c3a <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	2380      	movs	r3, #128	@ 0x80
 8013c00:	041b      	lsls	r3, r3, #16
 8013c02:	4013      	ands	r3, r2
 8013c04:	d019      	beq.n	8013c3a <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c06:	f3ef 8310 	mrs	r3, PRIMASK
 8013c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8013c0c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013c0e:	61fb      	str	r3, [r7, #28]
 8013c10:	2301      	movs	r3, #1
 8013c12:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	f383 8810 	msr	PRIMASK, r3
}
 8013c1a:	46c0      	nop			@ (mov r8, r8)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2180      	movs	r1, #128	@ 0x80
 8013c28:	04c9      	lsls	r1, r1, #19
 8013c2a:	430a      	orrs	r2, r1
 8013c2c:	601a      	str	r2, [r3, #0]
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	f383 8810 	msr	PRIMASK, r3
}
 8013c38:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013c3a:	1dbb      	adds	r3, r7, #6
 8013c3c:	881a      	ldrh	r2, [r3, #0]
 8013c3e:	68b9      	ldr	r1, [r7, #8]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	0018      	movs	r0, r3
 8013c44:	f001 f970 	bl	8014f28 <UART_Start_Receive_IT>
 8013c48:	0003      	movs	r3, r0
 8013c4a:	e000      	b.n	8013c4e <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8013c4c:	2302      	movs	r3, #2
  }
}
 8013c4e:	0018      	movs	r0, r3
 8013c50:	46bd      	mov	sp, r7
 8013c52:	b008      	add	sp, #32
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	46c0      	nop			@ (mov r8, r8)
 8013c58:	40008000 	.word	0x40008000

08013c5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b088      	sub	sp, #32
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	1dbb      	adds	r3, r7, #6
 8013c68:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2288      	movs	r2, #136	@ 0x88
 8013c6e:	589b      	ldr	r3, [r3, r2]
 8013c70:	2b20      	cmp	r3, #32
 8013c72:	d155      	bne.n	8013d20 <HAL_UART_Receive_DMA+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d003      	beq.n	8013c82 <HAL_UART_Receive_DMA+0x26>
 8013c7a:	1dbb      	adds	r3, r7, #6
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8013c82:	2301      	movs	r3, #1
 8013c84:	e04d      	b.n	8013d22 <HAL_UART_Receive_DMA+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	689a      	ldr	r2, [r3, #8]
 8013c8a:	2380      	movs	r3, #128	@ 0x80
 8013c8c:	015b      	lsls	r3, r3, #5
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d109      	bne.n	8013ca6 <HAL_UART_Receive_DMA+0x4a>
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	691b      	ldr	r3, [r3, #16]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d105      	bne.n	8013ca6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	2201      	movs	r2, #1
 8013c9e:	4013      	ands	r3, r2
 8013ca0:	d001      	beq.n	8013ca6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e03d      	b.n	8013d22 <HAL_UART_Receive_DMA+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2280      	movs	r2, #128	@ 0x80
 8013caa:	5c9b      	ldrb	r3, [r3, r2]
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	d101      	bne.n	8013cb4 <HAL_UART_Receive_DMA+0x58>
 8013cb0:	2302      	movs	r3, #2
 8013cb2:	e036      	b.n	8013d22 <HAL_UART_Receive_DMA+0xc6>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2280      	movs	r2, #128	@ 0x80
 8013cb8:	2101      	movs	r1, #1
 8013cba:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	4a19      	ldr	r2, [pc, #100]	@ (8013d2c <HAL_UART_Receive_DMA+0xd0>)
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d020      	beq.n	8013d0e <HAL_UART_Receive_DMA+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	685a      	ldr	r2, [r3, #4]
 8013cd2:	2380      	movs	r3, #128	@ 0x80
 8013cd4:	041b      	lsls	r3, r3, #16
 8013cd6:	4013      	ands	r3, r2
 8013cd8:	d019      	beq.n	8013d0e <HAL_UART_Receive_DMA+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cda:	f3ef 8310 	mrs	r3, PRIMASK
 8013cde:	613b      	str	r3, [r7, #16]
  return(result);
 8013ce0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013ce2:	61fb      	str	r3, [r7, #28]
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	f383 8810 	msr	PRIMASK, r3
}
 8013cee:	46c0      	nop			@ (mov r8, r8)
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2180      	movs	r1, #128	@ 0x80
 8013cfc:	04c9      	lsls	r1, r1, #19
 8013cfe:	430a      	orrs	r2, r1
 8013d00:	601a      	str	r2, [r3, #0]
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	f383 8810 	msr	PRIMASK, r3
}
 8013d0c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013d0e:	1dbb      	adds	r3, r7, #6
 8013d10:	881a      	ldrh	r2, [r3, #0]
 8013d12:	68b9      	ldr	r1, [r7, #8]
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	0018      	movs	r0, r3
 8013d18:	f001 fa32 	bl	8015180 <UART_Start_Receive_DMA>
 8013d1c:	0003      	movs	r3, r0
 8013d1e:	e000      	b.n	8013d22 <HAL_UART_Receive_DMA+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8013d20:	2302      	movs	r3, #2
  }
}
 8013d22:	0018      	movs	r0, r3
 8013d24:	46bd      	mov	sp, r7
 8013d26:	b008      	add	sp, #32
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	46c0      	nop			@ (mov r8, r8)
 8013d2c:	40008000 	.word	0x40008000

08013d30 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08c      	sub	sp, #48	@ 0x30
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2284      	movs	r2, #132	@ 0x84
 8013d3c:	589b      	ldr	r3, [r3, r2]
 8013d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2288      	movs	r2, #136	@ 0x88
 8013d44:	589b      	ldr	r3, [r3, r2]
 8013d46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	689b      	ldr	r3, [r3, #8]
 8013d4e:	2280      	movs	r2, #128	@ 0x80
 8013d50:	4013      	ands	r3, r2
 8013d52:	2b80      	cmp	r3, #128	@ 0x80
 8013d54:	d138      	bne.n	8013dc8 <HAL_UART_DMAStop+0x98>
 8013d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d58:	2b21      	cmp	r3, #33	@ 0x21
 8013d5a:	d135      	bne.n	8013dc8 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d60:	617b      	str	r3, [r7, #20]
  return(result);
 8013d62:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d66:	2301      	movs	r3, #1
 8013d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	f383 8810 	msr	PRIMASK, r3
}
 8013d70:	46c0      	nop			@ (mov r8, r8)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	689a      	ldr	r2, [r3, #8]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2180      	movs	r1, #128	@ 0x80
 8013d7e:	438a      	bics	r2, r1
 8013d80:	609a      	str	r2, [r3, #8]
 8013d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	f383 8810 	msr	PRIMASK, r3
}
 8013d8c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d014      	beq.n	8013dc0 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d9a:	0018      	movs	r0, r3
 8013d9c:	f7fa fdea 	bl	800e974 <HAL_DMA_Abort>
 8013da0:	1e03      	subs	r3, r0, #0
 8013da2:	d00d      	beq.n	8013dc0 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013da8:	0018      	movs	r0, r3
 8013daa:	f7fa ff6d 	bl	800ec88 <HAL_DMA_GetError>
 8013dae:	0003      	movs	r3, r0
 8013db0:	2b20      	cmp	r3, #32
 8013db2:	d105      	bne.n	8013dc0 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	228c      	movs	r2, #140	@ 0x8c
 8013db8:	2110      	movs	r1, #16
 8013dba:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013dbc:	2303      	movs	r3, #3
 8013dbe:	e044      	b.n	8013e4a <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	0018      	movs	r0, r3
 8013dc4:	f001 fa84 	bl	80152d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	2240      	movs	r2, #64	@ 0x40
 8013dd0:	4013      	ands	r3, r2
 8013dd2:	2b40      	cmp	r3, #64	@ 0x40
 8013dd4:	d138      	bne.n	8013e48 <HAL_UART_DMAStop+0x118>
 8013dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dd8:	2b22      	cmp	r3, #34	@ 0x22
 8013dda:	d135      	bne.n	8013e48 <HAL_UART_DMAStop+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8013de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8013de2:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013de4:	623b      	str	r3, [r7, #32]
 8013de6:	2301      	movs	r3, #1
 8013de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f383 8810 	msr	PRIMASK, r3
}
 8013df0:	46c0      	nop			@ (mov r8, r8)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	689a      	ldr	r2, [r3, #8]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2140      	movs	r1, #64	@ 0x40
 8013dfe:	438a      	bics	r2, r1
 8013e00:	609a      	str	r2, [r3, #8]
 8013e02:	6a3b      	ldr	r3, [r7, #32]
 8013e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	f383 8810 	msr	PRIMASK, r3
}
 8013e0c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d014      	beq.n	8013e40 <HAL_UART_DMAStop+0x110>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013e1a:	0018      	movs	r0, r3
 8013e1c:	f7fa fdaa 	bl	800e974 <HAL_DMA_Abort>
 8013e20:	1e03      	subs	r3, r0, #0
 8013e22:	d00d      	beq.n	8013e40 <HAL_UART_DMAStop+0x110>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013e28:	0018      	movs	r0, r3
 8013e2a:	f7fa ff2d 	bl	800ec88 <HAL_DMA_GetError>
 8013e2e:	0003      	movs	r3, r0
 8013e30:	2b20      	cmp	r3, #32
 8013e32:	d105      	bne.n	8013e40 <HAL_UART_DMAStop+0x110>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	228c      	movs	r2, #140	@ 0x8c
 8013e38:	2110      	movs	r1, #16
 8013e3a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013e3c:	2303      	movs	r3, #3
 8013e3e:	e004      	b.n	8013e4a <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	0018      	movs	r0, r3
 8013e44:	f001 fa84 	bl	8015350 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	0018      	movs	r0, r3
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	b00c      	add	sp, #48	@ 0x30
 8013e50:	bd80      	pop	{r7, pc}
	...

08013e54 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b092      	sub	sp, #72	@ 0x48
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e60:	623b      	str	r3, [r7, #32]
  return(result);
 8013e62:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e66:	2301      	movs	r3, #1
 8013e68:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6c:	f383 8810 	msr	PRIMASK, r3
}
 8013e70:	46c0      	nop			@ (mov r8, r8)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	494b      	ldr	r1, [pc, #300]	@ (8013fac <HAL_UART_AbortReceive+0x158>)
 8013e7e:	400a      	ands	r2, r1
 8013e80:	601a      	str	r2, [r3, #0]
 8013e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e88:	f383 8810 	msr	PRIMASK, r3
}
 8013e8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8013e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8013e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e98:	2301      	movs	r3, #1
 8013e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e9e:	f383 8810 	msr	PRIMASK, r3
}
 8013ea2:	46c0      	nop			@ (mov r8, r8)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	689a      	ldr	r2, [r3, #8]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4940      	ldr	r1, [pc, #256]	@ (8013fb0 <HAL_UART_AbortReceive+0x15c>)
 8013eb0:	400a      	ands	r2, r1
 8013eb2:	609a      	str	r2, [r3, #8]
 8013eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eb6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eba:	f383 8810 	msr	PRIMASK, r3
}
 8013ebe:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	d118      	bne.n	8013efa <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8013ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8013ece:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	f383 8810 	msr	PRIMASK, r3
}
 8013edc:	46c0      	nop			@ (mov r8, r8)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2110      	movs	r1, #16
 8013eea:	438a      	bics	r2, r1
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	f383 8810 	msr	PRIMASK, r3
}
 8013ef8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	689b      	ldr	r3, [r3, #8]
 8013f00:	2240      	movs	r2, #64	@ 0x40
 8013f02:	4013      	ands	r3, r2
 8013f04:	2b40      	cmp	r3, #64	@ 0x40
 8013f06:	d135      	bne.n	8013f74 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f08:	f3ef 8310 	mrs	r3, PRIMASK
 8013f0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8013f0e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f12:	2301      	movs	r3, #1
 8013f14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f383 8810 	msr	PRIMASK, r3
}
 8013f1c:	46c0      	nop			@ (mov r8, r8)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	689a      	ldr	r2, [r3, #8]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2140      	movs	r1, #64	@ 0x40
 8013f2a:	438a      	bics	r2, r1
 8013f2c:	609a      	str	r2, [r3, #8]
 8013f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	f383 8810 	msr	PRIMASK, r3
}
 8013f38:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d018      	beq.n	8013f74 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f46:	2200      	movs	r2, #0
 8013f48:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f4e:	0018      	movs	r0, r3
 8013f50:	f7fa fd10 	bl	800e974 <HAL_DMA_Abort>
 8013f54:	1e03      	subs	r3, r0, #0
 8013f56:	d00d      	beq.n	8013f74 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f5c:	0018      	movs	r0, r3
 8013f5e:	f7fa fe93 	bl	800ec88 <HAL_DMA_GetError>
 8013f62:	0003      	movs	r3, r0
 8013f64:	2b20      	cmp	r3, #32
 8013f66:	d105      	bne.n	8013f74 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	228c      	movs	r2, #140	@ 0x8c
 8013f6c:	2110      	movs	r1, #16
 8013f6e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013f70:	2303      	movs	r3, #3
 8013f72:	e017      	b.n	8013fa4 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	225e      	movs	r2, #94	@ 0x5e
 8013f78:	2100      	movs	r1, #0
 8013f7a:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	220f      	movs	r2, #15
 8013f82:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	699a      	ldr	r2, [r3, #24]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2108      	movs	r1, #8
 8013f90:	430a      	orrs	r2, r1
 8013f92:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2288      	movs	r2, #136	@ 0x88
 8013f98:	2120      	movs	r1, #32
 8013f9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8013fa2:	2300      	movs	r3, #0
}
 8013fa4:	0018      	movs	r0, r3
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	b012      	add	sp, #72	@ 0x48
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	fffffedf 	.word	0xfffffedf
 8013fb0:	effffffe 	.word	0xeffffffe

08013fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013fb4:	b5b0      	push	{r4, r5, r7, lr}
 8013fb6:	b0aa      	sub	sp, #168	@ 0xa8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	69db      	ldr	r3, [r3, #28]
 8013fc2:	22a4      	movs	r2, #164	@ 0xa4
 8013fc4:	18b9      	adds	r1, r7, r2
 8013fc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	20a0      	movs	r0, #160	@ 0xa0
 8013fd0:	1839      	adds	r1, r7, r0
 8013fd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	689b      	ldr	r3, [r3, #8]
 8013fda:	249c      	movs	r4, #156	@ 0x9c
 8013fdc:	1939      	adds	r1, r7, r4
 8013fde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013fe0:	0011      	movs	r1, r2
 8013fe2:	18bb      	adds	r3, r7, r2
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	4aa0      	ldr	r2, [pc, #640]	@ (8014268 <HAL_UART_IRQHandler+0x2b4>)
 8013fe8:	4013      	ands	r3, r2
 8013fea:	2298      	movs	r2, #152	@ 0x98
 8013fec:	18bd      	adds	r5, r7, r2
 8013fee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8013ff0:	18bb      	adds	r3, r7, r2
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d11a      	bne.n	801402e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013ff8:	187b      	adds	r3, r7, r1
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2220      	movs	r2, #32
 8013ffe:	4013      	ands	r3, r2
 8014000:	d015      	beq.n	801402e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014002:	183b      	adds	r3, r7, r0
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2220      	movs	r2, #32
 8014008:	4013      	ands	r3, r2
 801400a:	d105      	bne.n	8014018 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801400c:	193b      	adds	r3, r7, r4
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	2380      	movs	r3, #128	@ 0x80
 8014012:	055b      	lsls	r3, r3, #21
 8014014:	4013      	ands	r3, r2
 8014016:	d00a      	beq.n	801402e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801401c:	2b00      	cmp	r3, #0
 801401e:	d100      	bne.n	8014022 <HAL_UART_IRQHandler+0x6e>
 8014020:	e2cf      	b.n	80145c2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	0010      	movs	r0, r2
 801402a:	4798      	blx	r3
      }
      return;
 801402c:	e2c9      	b.n	80145c2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801402e:	2398      	movs	r3, #152	@ 0x98
 8014030:	18fb      	adds	r3, r7, r3
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d100      	bne.n	801403a <HAL_UART_IRQHandler+0x86>
 8014038:	e11e      	b.n	8014278 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801403a:	239c      	movs	r3, #156	@ 0x9c
 801403c:	18fb      	adds	r3, r7, r3
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a8a      	ldr	r2, [pc, #552]	@ (801426c <HAL_UART_IRQHandler+0x2b8>)
 8014042:	4013      	ands	r3, r2
 8014044:	d106      	bne.n	8014054 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014046:	23a0      	movs	r3, #160	@ 0xa0
 8014048:	18fb      	adds	r3, r7, r3
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4a88      	ldr	r2, [pc, #544]	@ (8014270 <HAL_UART_IRQHandler+0x2bc>)
 801404e:	4013      	ands	r3, r2
 8014050:	d100      	bne.n	8014054 <HAL_UART_IRQHandler+0xa0>
 8014052:	e111      	b.n	8014278 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014054:	23a4      	movs	r3, #164	@ 0xa4
 8014056:	18fb      	adds	r3, r7, r3
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	2201      	movs	r2, #1
 801405c:	4013      	ands	r3, r2
 801405e:	d012      	beq.n	8014086 <HAL_UART_IRQHandler+0xd2>
 8014060:	23a0      	movs	r3, #160	@ 0xa0
 8014062:	18fb      	adds	r3, r7, r3
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	2380      	movs	r3, #128	@ 0x80
 8014068:	005b      	lsls	r3, r3, #1
 801406a:	4013      	ands	r3, r2
 801406c:	d00b      	beq.n	8014086 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	2201      	movs	r2, #1
 8014074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	228c      	movs	r2, #140	@ 0x8c
 801407a:	589b      	ldr	r3, [r3, r2]
 801407c:	2201      	movs	r2, #1
 801407e:	431a      	orrs	r2, r3
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	218c      	movs	r1, #140	@ 0x8c
 8014084:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014086:	23a4      	movs	r3, #164	@ 0xa4
 8014088:	18fb      	adds	r3, r7, r3
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	2202      	movs	r2, #2
 801408e:	4013      	ands	r3, r2
 8014090:	d011      	beq.n	80140b6 <HAL_UART_IRQHandler+0x102>
 8014092:	239c      	movs	r3, #156	@ 0x9c
 8014094:	18fb      	adds	r3, r7, r3
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2201      	movs	r2, #1
 801409a:	4013      	ands	r3, r2
 801409c:	d00b      	beq.n	80140b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	2202      	movs	r2, #2
 80140a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	228c      	movs	r2, #140	@ 0x8c
 80140aa:	589b      	ldr	r3, [r3, r2]
 80140ac:	2204      	movs	r2, #4
 80140ae:	431a      	orrs	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	218c      	movs	r1, #140	@ 0x8c
 80140b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80140b6:	23a4      	movs	r3, #164	@ 0xa4
 80140b8:	18fb      	adds	r3, r7, r3
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2204      	movs	r2, #4
 80140be:	4013      	ands	r3, r2
 80140c0:	d011      	beq.n	80140e6 <HAL_UART_IRQHandler+0x132>
 80140c2:	239c      	movs	r3, #156	@ 0x9c
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2201      	movs	r2, #1
 80140ca:	4013      	ands	r3, r2
 80140cc:	d00b      	beq.n	80140e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	2204      	movs	r2, #4
 80140d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	228c      	movs	r2, #140	@ 0x8c
 80140da:	589b      	ldr	r3, [r3, r2]
 80140dc:	2202      	movs	r2, #2
 80140de:	431a      	orrs	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	218c      	movs	r1, #140	@ 0x8c
 80140e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80140e6:	23a4      	movs	r3, #164	@ 0xa4
 80140e8:	18fb      	adds	r3, r7, r3
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2208      	movs	r2, #8
 80140ee:	4013      	ands	r3, r2
 80140f0:	d017      	beq.n	8014122 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80140f2:	23a0      	movs	r3, #160	@ 0xa0
 80140f4:	18fb      	adds	r3, r7, r3
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2220      	movs	r2, #32
 80140fa:	4013      	ands	r3, r2
 80140fc:	d105      	bne.n	801410a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80140fe:	239c      	movs	r3, #156	@ 0x9c
 8014100:	18fb      	adds	r3, r7, r3
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4a59      	ldr	r2, [pc, #356]	@ (801426c <HAL_UART_IRQHandler+0x2b8>)
 8014106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014108:	d00b      	beq.n	8014122 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	2208      	movs	r2, #8
 8014110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	228c      	movs	r2, #140	@ 0x8c
 8014116:	589b      	ldr	r3, [r3, r2]
 8014118:	2208      	movs	r2, #8
 801411a:	431a      	orrs	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	218c      	movs	r1, #140	@ 0x8c
 8014120:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014122:	23a4      	movs	r3, #164	@ 0xa4
 8014124:	18fb      	adds	r3, r7, r3
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	2380      	movs	r3, #128	@ 0x80
 801412a:	011b      	lsls	r3, r3, #4
 801412c:	4013      	ands	r3, r2
 801412e:	d013      	beq.n	8014158 <HAL_UART_IRQHandler+0x1a4>
 8014130:	23a0      	movs	r3, #160	@ 0xa0
 8014132:	18fb      	adds	r3, r7, r3
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	2380      	movs	r3, #128	@ 0x80
 8014138:	04db      	lsls	r3, r3, #19
 801413a:	4013      	ands	r3, r2
 801413c:	d00c      	beq.n	8014158 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2280      	movs	r2, #128	@ 0x80
 8014144:	0112      	lsls	r2, r2, #4
 8014146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	228c      	movs	r2, #140	@ 0x8c
 801414c:	589b      	ldr	r3, [r3, r2]
 801414e:	2220      	movs	r2, #32
 8014150:	431a      	orrs	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	218c      	movs	r1, #140	@ 0x8c
 8014156:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	228c      	movs	r2, #140	@ 0x8c
 801415c:	589b      	ldr	r3, [r3, r2]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d100      	bne.n	8014164 <HAL_UART_IRQHandler+0x1b0>
 8014162:	e230      	b.n	80145c6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014164:	23a4      	movs	r3, #164	@ 0xa4
 8014166:	18fb      	adds	r3, r7, r3
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2220      	movs	r2, #32
 801416c:	4013      	ands	r3, r2
 801416e:	d015      	beq.n	801419c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014170:	23a0      	movs	r3, #160	@ 0xa0
 8014172:	18fb      	adds	r3, r7, r3
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2220      	movs	r2, #32
 8014178:	4013      	ands	r3, r2
 801417a:	d106      	bne.n	801418a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801417c:	239c      	movs	r3, #156	@ 0x9c
 801417e:	18fb      	adds	r3, r7, r3
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	2380      	movs	r3, #128	@ 0x80
 8014184:	055b      	lsls	r3, r3, #21
 8014186:	4013      	ands	r3, r2
 8014188:	d008      	beq.n	801419c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801418e:	2b00      	cmp	r3, #0
 8014190:	d004      	beq.n	801419c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	0010      	movs	r0, r2
 801419a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	228c      	movs	r2, #140	@ 0x8c
 80141a0:	589b      	ldr	r3, [r3, r2]
 80141a2:	2194      	movs	r1, #148	@ 0x94
 80141a4:	187a      	adds	r2, r7, r1
 80141a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	689b      	ldr	r3, [r3, #8]
 80141ae:	2240      	movs	r2, #64	@ 0x40
 80141b0:	4013      	ands	r3, r2
 80141b2:	2b40      	cmp	r3, #64	@ 0x40
 80141b4:	d004      	beq.n	80141c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80141b6:	187b      	adds	r3, r7, r1
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2228      	movs	r2, #40	@ 0x28
 80141bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80141be:	d047      	beq.n	8014250 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	0018      	movs	r0, r3
 80141c4:	f001 f8c4 	bl	8015350 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	2240      	movs	r2, #64	@ 0x40
 80141d0:	4013      	ands	r3, r2
 80141d2:	2b40      	cmp	r3, #64	@ 0x40
 80141d4:	d137      	bne.n	8014246 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141d6:	f3ef 8310 	mrs	r3, PRIMASK
 80141da:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80141dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80141de:	2090      	movs	r0, #144	@ 0x90
 80141e0:	183a      	adds	r2, r7, r0
 80141e2:	6013      	str	r3, [r2, #0]
 80141e4:	2301      	movs	r3, #1
 80141e6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80141ea:	f383 8810 	msr	PRIMASK, r3
}
 80141ee:	46c0      	nop			@ (mov r8, r8)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	689a      	ldr	r2, [r3, #8]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2140      	movs	r1, #64	@ 0x40
 80141fc:	438a      	bics	r2, r1
 80141fe:	609a      	str	r2, [r3, #8]
 8014200:	183b      	adds	r3, r7, r0
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014208:	f383 8810 	msr	PRIMASK, r3
}
 801420c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014212:	2b00      	cmp	r3, #0
 8014214:	d012      	beq.n	801423c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801421a:	4a16      	ldr	r2, [pc, #88]	@ (8014274 <HAL_UART_IRQHandler+0x2c0>)
 801421c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014222:	0018      	movs	r0, r3
 8014224:	f7fa fc08 	bl	800ea38 <HAL_DMA_Abort_IT>
 8014228:	1e03      	subs	r3, r0, #0
 801422a:	d01a      	beq.n	8014262 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014236:	0018      	movs	r0, r3
 8014238:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801423a:	e012      	b.n	8014262 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	0018      	movs	r0, r3
 8014240:	f7ef fee8 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014244:	e00d      	b.n	8014262 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	0018      	movs	r0, r3
 801424a:	f7ef fee3 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801424e:	e008      	b.n	8014262 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	0018      	movs	r0, r3
 8014254:	f7ef fede 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	228c      	movs	r2, #140	@ 0x8c
 801425c:	2100      	movs	r1, #0
 801425e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8014260:	e1b1      	b.n	80145c6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014262:	46c0      	nop			@ (mov r8, r8)
    return;
 8014264:	e1af      	b.n	80145c6 <HAL_UART_IRQHandler+0x612>
 8014266:	46c0      	nop			@ (mov r8, r8)
 8014268:	0000080f 	.word	0x0000080f
 801426c:	10000001 	.word	0x10000001
 8014270:	04000120 	.word	0x04000120
 8014274:	08015607 	.word	0x08015607

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801427c:	2b01      	cmp	r3, #1
 801427e:	d000      	beq.n	8014282 <HAL_UART_IRQHandler+0x2ce>
 8014280:	e135      	b.n	80144ee <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014282:	23a4      	movs	r3, #164	@ 0xa4
 8014284:	18fb      	adds	r3, r7, r3
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2210      	movs	r2, #16
 801428a:	4013      	ands	r3, r2
 801428c:	d100      	bne.n	8014290 <HAL_UART_IRQHandler+0x2dc>
 801428e:	e12e      	b.n	80144ee <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014290:	23a0      	movs	r3, #160	@ 0xa0
 8014292:	18fb      	adds	r3, r7, r3
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	2210      	movs	r2, #16
 8014298:	4013      	ands	r3, r2
 801429a:	d100      	bne.n	801429e <HAL_UART_IRQHandler+0x2ea>
 801429c:	e127      	b.n	80144ee <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	2210      	movs	r2, #16
 80142a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	2240      	movs	r2, #64	@ 0x40
 80142ae:	4013      	ands	r3, r2
 80142b0:	2b40      	cmp	r3, #64	@ 0x40
 80142b2:	d000      	beq.n	80142b6 <HAL_UART_IRQHandler+0x302>
 80142b4:	e09e      	b.n	80143f4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	217e      	movs	r1, #126	@ 0x7e
 80142c0:	187b      	adds	r3, r7, r1
 80142c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d100      	bne.n	80142ce <HAL_UART_IRQHandler+0x31a>
 80142cc:	e17d      	b.n	80145ca <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	225c      	movs	r2, #92	@ 0x5c
 80142d2:	5a9b      	ldrh	r3, [r3, r2]
 80142d4:	187a      	adds	r2, r7, r1
 80142d6:	8812      	ldrh	r2, [r2, #0]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d300      	bcc.n	80142de <HAL_UART_IRQHandler+0x32a>
 80142dc:	e175      	b.n	80145ca <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	187a      	adds	r2, r7, r1
 80142e2:	215e      	movs	r1, #94	@ 0x5e
 80142e4:	8812      	ldrh	r2, [r2, #0]
 80142e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2220      	movs	r2, #32
 80142f2:	4013      	ands	r3, r2
 80142f4:	d16f      	bne.n	80143d6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80142f6:	f3ef 8310 	mrs	r3, PRIMASK
 80142fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80142fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014300:	2301      	movs	r3, #1
 8014302:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014306:	f383 8810 	msr	PRIMASK, r3
}
 801430a:	46c0      	nop			@ (mov r8, r8)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	681a      	ldr	r2, [r3, #0]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	49b1      	ldr	r1, [pc, #708]	@ (80145dc <HAL_UART_IRQHandler+0x628>)
 8014318:	400a      	ands	r2, r1
 801431a:	601a      	str	r2, [r3, #0]
 801431c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801431e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014322:	f383 8810 	msr	PRIMASK, r3
}
 8014326:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014328:	f3ef 8310 	mrs	r3, PRIMASK
 801432c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014330:	677b      	str	r3, [r7, #116]	@ 0x74
 8014332:	2301      	movs	r3, #1
 8014334:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014338:	f383 8810 	msr	PRIMASK, r3
}
 801433c:	46c0      	nop			@ (mov r8, r8)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	689a      	ldr	r2, [r3, #8]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2101      	movs	r1, #1
 801434a:	438a      	bics	r2, r1
 801434c:	609a      	str	r2, [r3, #8]
 801434e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014350:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014354:	f383 8810 	msr	PRIMASK, r3
}
 8014358:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801435a:	f3ef 8310 	mrs	r3, PRIMASK
 801435e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8014360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014362:	673b      	str	r3, [r7, #112]	@ 0x70
 8014364:	2301      	movs	r3, #1
 8014366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801436a:	f383 8810 	msr	PRIMASK, r3
}
 801436e:	46c0      	nop			@ (mov r8, r8)
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	689a      	ldr	r2, [r3, #8]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2140      	movs	r1, #64	@ 0x40
 801437c:	438a      	bics	r2, r1
 801437e:	609a      	str	r2, [r3, #8]
 8014380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014382:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014386:	f383 8810 	msr	PRIMASK, r3
}
 801438a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2288      	movs	r2, #136	@ 0x88
 8014390:	2120      	movs	r1, #32
 8014392:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2200      	movs	r2, #0
 8014398:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801439a:	f3ef 8310 	mrs	r3, PRIMASK
 801439e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80143a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80143a4:	2301      	movs	r3, #1
 80143a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80143aa:	f383 8810 	msr	PRIMASK, r3
}
 80143ae:	46c0      	nop			@ (mov r8, r8)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2110      	movs	r1, #16
 80143bc:	438a      	bics	r2, r1
 80143be:	601a      	str	r2, [r3, #0]
 80143c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143c6:	f383 8810 	msr	PRIMASK, r3
}
 80143ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143d0:	0018      	movs	r0, r3
 80143d2:	f7fa facf 	bl	800e974 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	225c      	movs	r2, #92	@ 0x5c
 80143da:	5a9a      	ldrh	r2, [r3, r2]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	215e      	movs	r1, #94	@ 0x5e
 80143e0:	5a5b      	ldrh	r3, [r3, r1]
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	1ad3      	subs	r3, r2, r3
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	0011      	movs	r1, r2
 80143ec:	0018      	movs	r0, r3
 80143ee:	f000 f90b 	bl	8014608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80143f2:	e0ea      	b.n	80145ca <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	225c      	movs	r2, #92	@ 0x5c
 80143f8:	5a99      	ldrh	r1, [r3, r2]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	225e      	movs	r2, #94	@ 0x5e
 80143fe:	5a9b      	ldrh	r3, [r3, r2]
 8014400:	b29a      	uxth	r2, r3
 8014402:	208e      	movs	r0, #142	@ 0x8e
 8014404:	183b      	adds	r3, r7, r0
 8014406:	1a8a      	subs	r2, r1, r2
 8014408:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	225e      	movs	r2, #94	@ 0x5e
 801440e:	5a9b      	ldrh	r3, [r3, r2]
 8014410:	b29b      	uxth	r3, r3
 8014412:	2b00      	cmp	r3, #0
 8014414:	d100      	bne.n	8014418 <HAL_UART_IRQHandler+0x464>
 8014416:	e0da      	b.n	80145ce <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8014418:	183b      	adds	r3, r7, r0
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d100      	bne.n	8014422 <HAL_UART_IRQHandler+0x46e>
 8014420:	e0d5      	b.n	80145ce <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014422:	f3ef 8310 	mrs	r3, PRIMASK
 8014426:	60fb      	str	r3, [r7, #12]
  return(result);
 8014428:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801442a:	2488      	movs	r4, #136	@ 0x88
 801442c:	193a      	adds	r2, r7, r4
 801442e:	6013      	str	r3, [r2, #0]
 8014430:	2301      	movs	r3, #1
 8014432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	f383 8810 	msr	PRIMASK, r3
}
 801443a:	46c0      	nop			@ (mov r8, r8)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4966      	ldr	r1, [pc, #408]	@ (80145e0 <HAL_UART_IRQHandler+0x62c>)
 8014448:	400a      	ands	r2, r1
 801444a:	601a      	str	r2, [r3, #0]
 801444c:	193b      	adds	r3, r7, r4
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f383 8810 	msr	PRIMASK, r3
}
 8014458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801445a:	f3ef 8310 	mrs	r3, PRIMASK
 801445e:	61bb      	str	r3, [r7, #24]
  return(result);
 8014460:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014462:	2484      	movs	r4, #132	@ 0x84
 8014464:	193a      	adds	r2, r7, r4
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	2301      	movs	r3, #1
 801446a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	f383 8810 	msr	PRIMASK, r3
}
 8014472:	46c0      	nop			@ (mov r8, r8)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	689a      	ldr	r2, [r3, #8]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	4959      	ldr	r1, [pc, #356]	@ (80145e4 <HAL_UART_IRQHandler+0x630>)
 8014480:	400a      	ands	r2, r1
 8014482:	609a      	str	r2, [r3, #8]
 8014484:	193b      	adds	r3, r7, r4
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801448a:	6a3b      	ldr	r3, [r7, #32]
 801448c:	f383 8810 	msr	PRIMASK, r3
}
 8014490:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2288      	movs	r2, #136	@ 0x88
 8014496:	2120      	movs	r1, #32
 8014498:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144a6:	f3ef 8310 	mrs	r3, PRIMASK
 80144aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80144ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80144ae:	2480      	movs	r4, #128	@ 0x80
 80144b0:	193a      	adds	r2, r7, r4
 80144b2:	6013      	str	r3, [r2, #0]
 80144b4:	2301      	movs	r3, #1
 80144b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ba:	f383 8810 	msr	PRIMASK, r3
}
 80144be:	46c0      	nop			@ (mov r8, r8)
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	681a      	ldr	r2, [r3, #0]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2110      	movs	r1, #16
 80144cc:	438a      	bics	r2, r1
 80144ce:	601a      	str	r2, [r3, #0]
 80144d0:	193b      	adds	r3, r7, r4
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144d8:	f383 8810 	msr	PRIMASK, r3
}
 80144dc:	46c0      	nop			@ (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80144de:	183b      	adds	r3, r7, r0
 80144e0:	881a      	ldrh	r2, [r3, #0]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	0011      	movs	r1, r2
 80144e6:	0018      	movs	r0, r3
 80144e8:	f000 f88e 	bl	8014608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80144ec:	e06f      	b.n	80145ce <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80144ee:	23a4      	movs	r3, #164	@ 0xa4
 80144f0:	18fb      	adds	r3, r7, r3
 80144f2:	681a      	ldr	r2, [r3, #0]
 80144f4:	2380      	movs	r3, #128	@ 0x80
 80144f6:	035b      	lsls	r3, r3, #13
 80144f8:	4013      	ands	r3, r2
 80144fa:	d010      	beq.n	801451e <HAL_UART_IRQHandler+0x56a>
 80144fc:	239c      	movs	r3, #156	@ 0x9c
 80144fe:	18fb      	adds	r3, r7, r3
 8014500:	681a      	ldr	r2, [r3, #0]
 8014502:	2380      	movs	r3, #128	@ 0x80
 8014504:	03db      	lsls	r3, r3, #15
 8014506:	4013      	ands	r3, r2
 8014508:	d009      	beq.n	801451e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2280      	movs	r2, #128	@ 0x80
 8014510:	0352      	lsls	r2, r2, #13
 8014512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	0018      	movs	r0, r3
 8014518:	f001 fd08 	bl	8015f2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801451c:	e05a      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801451e:	23a4      	movs	r3, #164	@ 0xa4
 8014520:	18fb      	adds	r3, r7, r3
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2280      	movs	r2, #128	@ 0x80
 8014526:	4013      	ands	r3, r2
 8014528:	d016      	beq.n	8014558 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801452a:	23a0      	movs	r3, #160	@ 0xa0
 801452c:	18fb      	adds	r3, r7, r3
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2280      	movs	r2, #128	@ 0x80
 8014532:	4013      	ands	r3, r2
 8014534:	d106      	bne.n	8014544 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014536:	239c      	movs	r3, #156	@ 0x9c
 8014538:	18fb      	adds	r3, r7, r3
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	2380      	movs	r3, #128	@ 0x80
 801453e:	041b      	lsls	r3, r3, #16
 8014540:	4013      	ands	r3, r2
 8014542:	d009      	beq.n	8014558 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014548:	2b00      	cmp	r3, #0
 801454a:	d042      	beq.n	80145d2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	0010      	movs	r0, r2
 8014554:	4798      	blx	r3
    }
    return;
 8014556:	e03c      	b.n	80145d2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014558:	23a4      	movs	r3, #164	@ 0xa4
 801455a:	18fb      	adds	r3, r7, r3
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	2240      	movs	r2, #64	@ 0x40
 8014560:	4013      	ands	r3, r2
 8014562:	d00a      	beq.n	801457a <HAL_UART_IRQHandler+0x5c6>
 8014564:	23a0      	movs	r3, #160	@ 0xa0
 8014566:	18fb      	adds	r3, r7, r3
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2240      	movs	r2, #64	@ 0x40
 801456c:	4013      	ands	r3, r2
 801456e:	d004      	beq.n	801457a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	0018      	movs	r0, r3
 8014574:	f001 f85e 	bl	8015634 <UART_EndTransmit_IT>
    return;
 8014578:	e02c      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801457a:	23a4      	movs	r3, #164	@ 0xa4
 801457c:	18fb      	adds	r3, r7, r3
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	2380      	movs	r3, #128	@ 0x80
 8014582:	041b      	lsls	r3, r3, #16
 8014584:	4013      	ands	r3, r2
 8014586:	d00b      	beq.n	80145a0 <HAL_UART_IRQHandler+0x5ec>
 8014588:	23a0      	movs	r3, #160	@ 0xa0
 801458a:	18fb      	adds	r3, r7, r3
 801458c:	681a      	ldr	r2, [r3, #0]
 801458e:	2380      	movs	r3, #128	@ 0x80
 8014590:	05db      	lsls	r3, r3, #23
 8014592:	4013      	ands	r3, r2
 8014594:	d004      	beq.n	80145a0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	0018      	movs	r0, r3
 801459a:	f001 fcd7 	bl	8015f4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801459e:	e019      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80145a0:	23a4      	movs	r3, #164	@ 0xa4
 80145a2:	18fb      	adds	r3, r7, r3
 80145a4:	681a      	ldr	r2, [r3, #0]
 80145a6:	2380      	movs	r3, #128	@ 0x80
 80145a8:	045b      	lsls	r3, r3, #17
 80145aa:	4013      	ands	r3, r2
 80145ac:	d012      	beq.n	80145d4 <HAL_UART_IRQHandler+0x620>
 80145ae:	23a0      	movs	r3, #160	@ 0xa0
 80145b0:	18fb      	adds	r3, r7, r3
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	da0d      	bge.n	80145d4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	0018      	movs	r0, r3
 80145bc:	f001 fcbe 	bl	8015f3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80145c0:	e008      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
      return;
 80145c2:	46c0      	nop			@ (mov r8, r8)
 80145c4:	e006      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
    return;
 80145c6:	46c0      	nop			@ (mov r8, r8)
 80145c8:	e004      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
      return;
 80145ca:	46c0      	nop			@ (mov r8, r8)
 80145cc:	e002      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
      return;
 80145ce:	46c0      	nop			@ (mov r8, r8)
 80145d0:	e000      	b.n	80145d4 <HAL_UART_IRQHandler+0x620>
    return;
 80145d2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80145d4:	46bd      	mov	sp, r7
 80145d6:	b02a      	add	sp, #168	@ 0xa8
 80145d8:	bdb0      	pop	{r4, r5, r7, pc}
 80145da:	46c0      	nop			@ (mov r8, r8)
 80145dc:	fffffeff 	.word	0xfffffeff
 80145e0:	fffffedf 	.word	0xfffffedf
 80145e4:	effffffe 	.word	0xeffffffe

080145e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80145f0:	46c0      	nop			@ (mov r8, r8)
 80145f2:	46bd      	mov	sp, r7
 80145f4:	b002      	add	sp, #8
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014600:	46c0      	nop			@ (mov r8, r8)
 8014602:	46bd      	mov	sp, r7
 8014604:	b002      	add	sp, #8
 8014606:	bd80      	pop	{r7, pc}

08014608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	000a      	movs	r2, r1
 8014612:	1cbb      	adds	r3, r7, #2
 8014614:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014616:	46c0      	nop			@ (mov r8, r8)
 8014618:	46bd      	mov	sp, r7
 801461a:	b002      	add	sp, #8
 801461c:	bd80      	pop	{r7, pc}
	...

08014620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014620:	b5b0      	push	{r4, r5, r7, lr}
 8014622:	b090      	sub	sp, #64	@ 0x40
 8014624:	af00      	add	r7, sp, #0
 8014626:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014628:	231a      	movs	r3, #26
 801462a:	2220      	movs	r2, #32
 801462c:	189b      	adds	r3, r3, r2
 801462e:	19db      	adds	r3, r3, r7
 8014630:	2200      	movs	r2, #0
 8014632:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014636:	689a      	ldr	r2, [r3, #8]
 8014638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801463a:	691b      	ldr	r3, [r3, #16]
 801463c:	431a      	orrs	r2, r3
 801463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014640:	695b      	ldr	r3, [r3, #20]
 8014642:	431a      	orrs	r2, r3
 8014644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014646:	69db      	ldr	r3, [r3, #28]
 8014648:	4313      	orrs	r3, r2
 801464a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4aaf      	ldr	r2, [pc, #700]	@ (8014910 <UART_SetConfig+0x2f0>)
 8014654:	4013      	ands	r3, r2
 8014656:	0019      	movs	r1, r3
 8014658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801465e:	430b      	orrs	r3, r1
 8014660:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	4aaa      	ldr	r2, [pc, #680]	@ (8014914 <UART_SetConfig+0x2f4>)
 801466a:	4013      	ands	r3, r2
 801466c:	0018      	movs	r0, r3
 801466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014670:	68d9      	ldr	r1, [r3, #12]
 8014672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	0003      	movs	r3, r0
 8014678:	430b      	orrs	r3, r1
 801467a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4aa4      	ldr	r2, [pc, #656]	@ (8014918 <UART_SetConfig+0x2f8>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d004      	beq.n	8014696 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468e:	6a1b      	ldr	r3, [r3, #32]
 8014690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014692:	4313      	orrs	r3, r2
 8014694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	4a9f      	ldr	r2, [pc, #636]	@ (801491c <UART_SetConfig+0x2fc>)
 801469e:	4013      	ands	r3, r2
 80146a0:	0019      	movs	r1, r3
 80146a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80146a8:	430b      	orrs	r3, r1
 80146aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80146ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b2:	220f      	movs	r2, #15
 80146b4:	4393      	bics	r3, r2
 80146b6:	0018      	movs	r0, r3
 80146b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80146bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	0003      	movs	r3, r0
 80146c2:	430b      	orrs	r3, r1
 80146c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80146c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a95      	ldr	r2, [pc, #596]	@ (8014920 <UART_SetConfig+0x300>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d131      	bne.n	8014734 <UART_SetConfig+0x114>
 80146d0:	4b94      	ldr	r3, [pc, #592]	@ (8014924 <UART_SetConfig+0x304>)
 80146d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146d4:	2203      	movs	r2, #3
 80146d6:	4013      	ands	r3, r2
 80146d8:	2b03      	cmp	r3, #3
 80146da:	d01d      	beq.n	8014718 <UART_SetConfig+0xf8>
 80146dc:	d823      	bhi.n	8014726 <UART_SetConfig+0x106>
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d00c      	beq.n	80146fc <UART_SetConfig+0xdc>
 80146e2:	d820      	bhi.n	8014726 <UART_SetConfig+0x106>
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <UART_SetConfig+0xce>
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d00e      	beq.n	801470a <UART_SetConfig+0xea>
 80146ec:	e01b      	b.n	8014726 <UART_SetConfig+0x106>
 80146ee:	231b      	movs	r3, #27
 80146f0:	2220      	movs	r2, #32
 80146f2:	189b      	adds	r3, r3, r2
 80146f4:	19db      	adds	r3, r3, r7
 80146f6:	2200      	movs	r2, #0
 80146f8:	701a      	strb	r2, [r3, #0]
 80146fa:	e0b4      	b.n	8014866 <UART_SetConfig+0x246>
 80146fc:	231b      	movs	r3, #27
 80146fe:	2220      	movs	r2, #32
 8014700:	189b      	adds	r3, r3, r2
 8014702:	19db      	adds	r3, r3, r7
 8014704:	2202      	movs	r2, #2
 8014706:	701a      	strb	r2, [r3, #0]
 8014708:	e0ad      	b.n	8014866 <UART_SetConfig+0x246>
 801470a:	231b      	movs	r3, #27
 801470c:	2220      	movs	r2, #32
 801470e:	189b      	adds	r3, r3, r2
 8014710:	19db      	adds	r3, r3, r7
 8014712:	2204      	movs	r2, #4
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	e0a6      	b.n	8014866 <UART_SetConfig+0x246>
 8014718:	231b      	movs	r3, #27
 801471a:	2220      	movs	r2, #32
 801471c:	189b      	adds	r3, r3, r2
 801471e:	19db      	adds	r3, r3, r7
 8014720:	2208      	movs	r2, #8
 8014722:	701a      	strb	r2, [r3, #0]
 8014724:	e09f      	b.n	8014866 <UART_SetConfig+0x246>
 8014726:	231b      	movs	r3, #27
 8014728:	2220      	movs	r2, #32
 801472a:	189b      	adds	r3, r3, r2
 801472c:	19db      	adds	r3, r3, r7
 801472e:	2210      	movs	r2, #16
 8014730:	701a      	strb	r2, [r3, #0]
 8014732:	e098      	b.n	8014866 <UART_SetConfig+0x246>
 8014734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4a7b      	ldr	r2, [pc, #492]	@ (8014928 <UART_SetConfig+0x308>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d131      	bne.n	80147a2 <UART_SetConfig+0x182>
 801473e:	4b79      	ldr	r3, [pc, #484]	@ (8014924 <UART_SetConfig+0x304>)
 8014740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014742:	220c      	movs	r2, #12
 8014744:	4013      	ands	r3, r2
 8014746:	2b0c      	cmp	r3, #12
 8014748:	d01d      	beq.n	8014786 <UART_SetConfig+0x166>
 801474a:	d823      	bhi.n	8014794 <UART_SetConfig+0x174>
 801474c:	2b08      	cmp	r3, #8
 801474e:	d00c      	beq.n	801476a <UART_SetConfig+0x14a>
 8014750:	d820      	bhi.n	8014794 <UART_SetConfig+0x174>
 8014752:	2b00      	cmp	r3, #0
 8014754:	d002      	beq.n	801475c <UART_SetConfig+0x13c>
 8014756:	2b04      	cmp	r3, #4
 8014758:	d00e      	beq.n	8014778 <UART_SetConfig+0x158>
 801475a:	e01b      	b.n	8014794 <UART_SetConfig+0x174>
 801475c:	231b      	movs	r3, #27
 801475e:	2220      	movs	r2, #32
 8014760:	189b      	adds	r3, r3, r2
 8014762:	19db      	adds	r3, r3, r7
 8014764:	2200      	movs	r2, #0
 8014766:	701a      	strb	r2, [r3, #0]
 8014768:	e07d      	b.n	8014866 <UART_SetConfig+0x246>
 801476a:	231b      	movs	r3, #27
 801476c:	2220      	movs	r2, #32
 801476e:	189b      	adds	r3, r3, r2
 8014770:	19db      	adds	r3, r3, r7
 8014772:	2202      	movs	r2, #2
 8014774:	701a      	strb	r2, [r3, #0]
 8014776:	e076      	b.n	8014866 <UART_SetConfig+0x246>
 8014778:	231b      	movs	r3, #27
 801477a:	2220      	movs	r2, #32
 801477c:	189b      	adds	r3, r3, r2
 801477e:	19db      	adds	r3, r3, r7
 8014780:	2204      	movs	r2, #4
 8014782:	701a      	strb	r2, [r3, #0]
 8014784:	e06f      	b.n	8014866 <UART_SetConfig+0x246>
 8014786:	231b      	movs	r3, #27
 8014788:	2220      	movs	r2, #32
 801478a:	189b      	adds	r3, r3, r2
 801478c:	19db      	adds	r3, r3, r7
 801478e:	2208      	movs	r2, #8
 8014790:	701a      	strb	r2, [r3, #0]
 8014792:	e068      	b.n	8014866 <UART_SetConfig+0x246>
 8014794:	231b      	movs	r3, #27
 8014796:	2220      	movs	r2, #32
 8014798:	189b      	adds	r3, r3, r2
 801479a:	19db      	adds	r3, r3, r7
 801479c:	2210      	movs	r2, #16
 801479e:	701a      	strb	r2, [r3, #0]
 80147a0:	e061      	b.n	8014866 <UART_SetConfig+0x246>
 80147a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	4a61      	ldr	r2, [pc, #388]	@ (801492c <UART_SetConfig+0x30c>)
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d106      	bne.n	80147ba <UART_SetConfig+0x19a>
 80147ac:	231b      	movs	r3, #27
 80147ae:	2220      	movs	r2, #32
 80147b0:	189b      	adds	r3, r3, r2
 80147b2:	19db      	adds	r3, r3, r7
 80147b4:	2200      	movs	r2, #0
 80147b6:	701a      	strb	r2, [r3, #0]
 80147b8:	e055      	b.n	8014866 <UART_SetConfig+0x246>
 80147ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4a5c      	ldr	r2, [pc, #368]	@ (8014930 <UART_SetConfig+0x310>)
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d106      	bne.n	80147d2 <UART_SetConfig+0x1b2>
 80147c4:	231b      	movs	r3, #27
 80147c6:	2220      	movs	r2, #32
 80147c8:	189b      	adds	r3, r3, r2
 80147ca:	19db      	adds	r3, r3, r7
 80147cc:	2200      	movs	r2, #0
 80147ce:	701a      	strb	r2, [r3, #0]
 80147d0:	e049      	b.n	8014866 <UART_SetConfig+0x246>
 80147d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a50      	ldr	r2, [pc, #320]	@ (8014918 <UART_SetConfig+0x2f8>)
 80147d8:	4293      	cmp	r3, r2
 80147da:	d13e      	bne.n	801485a <UART_SetConfig+0x23a>
 80147dc:	4b51      	ldr	r3, [pc, #324]	@ (8014924 <UART_SetConfig+0x304>)
 80147de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80147e0:	23c0      	movs	r3, #192	@ 0xc0
 80147e2:	011b      	lsls	r3, r3, #4
 80147e4:	4013      	ands	r3, r2
 80147e6:	22c0      	movs	r2, #192	@ 0xc0
 80147e8:	0112      	lsls	r2, r2, #4
 80147ea:	4293      	cmp	r3, r2
 80147ec:	d027      	beq.n	801483e <UART_SetConfig+0x21e>
 80147ee:	22c0      	movs	r2, #192	@ 0xc0
 80147f0:	0112      	lsls	r2, r2, #4
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d82a      	bhi.n	801484c <UART_SetConfig+0x22c>
 80147f6:	2280      	movs	r2, #128	@ 0x80
 80147f8:	0112      	lsls	r2, r2, #4
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d011      	beq.n	8014822 <UART_SetConfig+0x202>
 80147fe:	2280      	movs	r2, #128	@ 0x80
 8014800:	0112      	lsls	r2, r2, #4
 8014802:	4293      	cmp	r3, r2
 8014804:	d822      	bhi.n	801484c <UART_SetConfig+0x22c>
 8014806:	2b00      	cmp	r3, #0
 8014808:	d004      	beq.n	8014814 <UART_SetConfig+0x1f4>
 801480a:	2280      	movs	r2, #128	@ 0x80
 801480c:	00d2      	lsls	r2, r2, #3
 801480e:	4293      	cmp	r3, r2
 8014810:	d00e      	beq.n	8014830 <UART_SetConfig+0x210>
 8014812:	e01b      	b.n	801484c <UART_SetConfig+0x22c>
 8014814:	231b      	movs	r3, #27
 8014816:	2220      	movs	r2, #32
 8014818:	189b      	adds	r3, r3, r2
 801481a:	19db      	adds	r3, r3, r7
 801481c:	2200      	movs	r2, #0
 801481e:	701a      	strb	r2, [r3, #0]
 8014820:	e021      	b.n	8014866 <UART_SetConfig+0x246>
 8014822:	231b      	movs	r3, #27
 8014824:	2220      	movs	r2, #32
 8014826:	189b      	adds	r3, r3, r2
 8014828:	19db      	adds	r3, r3, r7
 801482a:	2202      	movs	r2, #2
 801482c:	701a      	strb	r2, [r3, #0]
 801482e:	e01a      	b.n	8014866 <UART_SetConfig+0x246>
 8014830:	231b      	movs	r3, #27
 8014832:	2220      	movs	r2, #32
 8014834:	189b      	adds	r3, r3, r2
 8014836:	19db      	adds	r3, r3, r7
 8014838:	2204      	movs	r2, #4
 801483a:	701a      	strb	r2, [r3, #0]
 801483c:	e013      	b.n	8014866 <UART_SetConfig+0x246>
 801483e:	231b      	movs	r3, #27
 8014840:	2220      	movs	r2, #32
 8014842:	189b      	adds	r3, r3, r2
 8014844:	19db      	adds	r3, r3, r7
 8014846:	2208      	movs	r2, #8
 8014848:	701a      	strb	r2, [r3, #0]
 801484a:	e00c      	b.n	8014866 <UART_SetConfig+0x246>
 801484c:	231b      	movs	r3, #27
 801484e:	2220      	movs	r2, #32
 8014850:	189b      	adds	r3, r3, r2
 8014852:	19db      	adds	r3, r3, r7
 8014854:	2210      	movs	r2, #16
 8014856:	701a      	strb	r2, [r3, #0]
 8014858:	e005      	b.n	8014866 <UART_SetConfig+0x246>
 801485a:	231b      	movs	r3, #27
 801485c:	2220      	movs	r2, #32
 801485e:	189b      	adds	r3, r3, r2
 8014860:	19db      	adds	r3, r3, r7
 8014862:	2210      	movs	r2, #16
 8014864:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a2b      	ldr	r2, [pc, #172]	@ (8014918 <UART_SetConfig+0x2f8>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d000      	beq.n	8014872 <UART_SetConfig+0x252>
 8014870:	e0a9      	b.n	80149c6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014872:	231b      	movs	r3, #27
 8014874:	2220      	movs	r2, #32
 8014876:	189b      	adds	r3, r3, r2
 8014878:	19db      	adds	r3, r3, r7
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2b08      	cmp	r3, #8
 801487e:	d015      	beq.n	80148ac <UART_SetConfig+0x28c>
 8014880:	dc18      	bgt.n	80148b4 <UART_SetConfig+0x294>
 8014882:	2b04      	cmp	r3, #4
 8014884:	d00d      	beq.n	80148a2 <UART_SetConfig+0x282>
 8014886:	dc15      	bgt.n	80148b4 <UART_SetConfig+0x294>
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <UART_SetConfig+0x272>
 801488c:	2b02      	cmp	r3, #2
 801488e:	d005      	beq.n	801489c <UART_SetConfig+0x27c>
 8014890:	e010      	b.n	80148b4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014892:	f7fd f823 	bl	80118dc <HAL_RCC_GetPCLK1Freq>
 8014896:	0003      	movs	r3, r0
 8014898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801489a:	e014      	b.n	80148c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801489c:	4b25      	ldr	r3, [pc, #148]	@ (8014934 <UART_SetConfig+0x314>)
 801489e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80148a0:	e011      	b.n	80148c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80148a2:	f7fc ff8f 	bl	80117c4 <HAL_RCC_GetSysClockFreq>
 80148a6:	0003      	movs	r3, r0
 80148a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80148aa:	e00c      	b.n	80148c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80148ac:	2380      	movs	r3, #128	@ 0x80
 80148ae:	021b      	lsls	r3, r3, #8
 80148b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80148b2:	e008      	b.n	80148c6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80148b4:	2300      	movs	r3, #0
 80148b6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80148b8:	231a      	movs	r3, #26
 80148ba:	2220      	movs	r2, #32
 80148bc:	189b      	adds	r3, r3, r2
 80148be:	19db      	adds	r3, r3, r7
 80148c0:	2201      	movs	r2, #1
 80148c2:	701a      	strb	r2, [r3, #0]
        break;
 80148c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80148c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d100      	bne.n	80148ce <UART_SetConfig+0x2ae>
 80148cc:	e14b      	b.n	8014b66 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80148ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148d2:	4b19      	ldr	r3, [pc, #100]	@ (8014938 <UART_SetConfig+0x318>)
 80148d4:	0052      	lsls	r2, r2, #1
 80148d6:	5ad3      	ldrh	r3, [r2, r3]
 80148d8:	0019      	movs	r1, r3
 80148da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80148dc:	f7eb fc24 	bl	8000128 <__udivsi3>
 80148e0:	0003      	movs	r3, r0
 80148e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80148e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148e6:	685a      	ldr	r2, [r3, #4]
 80148e8:	0013      	movs	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	189b      	adds	r3, r3, r2
 80148ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d305      	bcc.n	8014900 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80148f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80148fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d91d      	bls.n	801493c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8014900:	231a      	movs	r3, #26
 8014902:	2220      	movs	r2, #32
 8014904:	189b      	adds	r3, r3, r2
 8014906:	19db      	adds	r3, r3, r7
 8014908:	2201      	movs	r2, #1
 801490a:	701a      	strb	r2, [r3, #0]
 801490c:	e12b      	b.n	8014b66 <UART_SetConfig+0x546>
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	cfff69f3 	.word	0xcfff69f3
 8014914:	ffffcfff 	.word	0xffffcfff
 8014918:	40008000 	.word	0x40008000
 801491c:	11fff4ff 	.word	0x11fff4ff
 8014920:	40013800 	.word	0x40013800
 8014924:	40021000 	.word	0x40021000
 8014928:	40004400 	.word	0x40004400
 801492c:	40004800 	.word	0x40004800
 8014930:	40004c00 	.word	0x40004c00
 8014934:	00f42400 	.word	0x00f42400
 8014938:	0801a180 	.word	0x0801a180
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801493e:	61bb      	str	r3, [r7, #24]
 8014940:	2300      	movs	r3, #0
 8014942:	61fb      	str	r3, [r7, #28]
 8014944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014948:	4b92      	ldr	r3, [pc, #584]	@ (8014b94 <UART_SetConfig+0x574>)
 801494a:	0052      	lsls	r2, r2, #1
 801494c:	5ad3      	ldrh	r3, [r2, r3]
 801494e:	613b      	str	r3, [r7, #16]
 8014950:	2300      	movs	r3, #0
 8014952:	617b      	str	r3, [r7, #20]
 8014954:	693a      	ldr	r2, [r7, #16]
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	69b8      	ldr	r0, [r7, #24]
 801495a:	69f9      	ldr	r1, [r7, #28]
 801495c:	f7eb fdd2 	bl	8000504 <__aeabi_uldivmod>
 8014960:	0002      	movs	r2, r0
 8014962:	000b      	movs	r3, r1
 8014964:	0e11      	lsrs	r1, r2, #24
 8014966:	021d      	lsls	r5, r3, #8
 8014968:	430d      	orrs	r5, r1
 801496a:	0214      	lsls	r4, r2, #8
 801496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	085b      	lsrs	r3, r3, #1
 8014972:	60bb      	str	r3, [r7, #8]
 8014974:	2300      	movs	r3, #0
 8014976:	60fb      	str	r3, [r7, #12]
 8014978:	68b8      	ldr	r0, [r7, #8]
 801497a:	68f9      	ldr	r1, [r7, #12]
 801497c:	1900      	adds	r0, r0, r4
 801497e:	4169      	adcs	r1, r5
 8014980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	603b      	str	r3, [r7, #0]
 8014986:	2300      	movs	r3, #0
 8014988:	607b      	str	r3, [r7, #4]
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f7eb fdb9 	bl	8000504 <__aeabi_uldivmod>
 8014992:	0002      	movs	r2, r0
 8014994:	000b      	movs	r3, r1
 8014996:	0013      	movs	r3, r2
 8014998:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801499a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801499c:	23c0      	movs	r3, #192	@ 0xc0
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d309      	bcc.n	80149b8 <UART_SetConfig+0x398>
 80149a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149a6:	2380      	movs	r3, #128	@ 0x80
 80149a8:	035b      	lsls	r3, r3, #13
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d204      	bcs.n	80149b8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80149ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149b4:	60da      	str	r2, [r3, #12]
 80149b6:	e0d6      	b.n	8014b66 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80149b8:	231a      	movs	r3, #26
 80149ba:	2220      	movs	r2, #32
 80149bc:	189b      	adds	r3, r3, r2
 80149be:	19db      	adds	r3, r3, r7
 80149c0:	2201      	movs	r2, #1
 80149c2:	701a      	strb	r2, [r3, #0]
 80149c4:	e0cf      	b.n	8014b66 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c8:	69da      	ldr	r2, [r3, #28]
 80149ca:	2380      	movs	r3, #128	@ 0x80
 80149cc:	021b      	lsls	r3, r3, #8
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d000      	beq.n	80149d4 <UART_SetConfig+0x3b4>
 80149d2:	e070      	b.n	8014ab6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80149d4:	231b      	movs	r3, #27
 80149d6:	2220      	movs	r2, #32
 80149d8:	189b      	adds	r3, r3, r2
 80149da:	19db      	adds	r3, r3, r7
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	2b08      	cmp	r3, #8
 80149e0:	d015      	beq.n	8014a0e <UART_SetConfig+0x3ee>
 80149e2:	dc18      	bgt.n	8014a16 <UART_SetConfig+0x3f6>
 80149e4:	2b04      	cmp	r3, #4
 80149e6:	d00d      	beq.n	8014a04 <UART_SetConfig+0x3e4>
 80149e8:	dc15      	bgt.n	8014a16 <UART_SetConfig+0x3f6>
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d002      	beq.n	80149f4 <UART_SetConfig+0x3d4>
 80149ee:	2b02      	cmp	r3, #2
 80149f0:	d005      	beq.n	80149fe <UART_SetConfig+0x3de>
 80149f2:	e010      	b.n	8014a16 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80149f4:	f7fc ff72 	bl	80118dc <HAL_RCC_GetPCLK1Freq>
 80149f8:	0003      	movs	r3, r0
 80149fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80149fc:	e014      	b.n	8014a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80149fe:	4b66      	ldr	r3, [pc, #408]	@ (8014b98 <UART_SetConfig+0x578>)
 8014a00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014a02:	e011      	b.n	8014a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014a04:	f7fc fede 	bl	80117c4 <HAL_RCC_GetSysClockFreq>
 8014a08:	0003      	movs	r3, r0
 8014a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014a0c:	e00c      	b.n	8014a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a0e:	2380      	movs	r3, #128	@ 0x80
 8014a10:	021b      	lsls	r3, r3, #8
 8014a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014a14:	e008      	b.n	8014a28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8014a16:	2300      	movs	r3, #0
 8014a18:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8014a1a:	231a      	movs	r3, #26
 8014a1c:	2220      	movs	r2, #32
 8014a1e:	189b      	adds	r3, r3, r2
 8014a20:	19db      	adds	r3, r3, r7
 8014a22:	2201      	movs	r2, #1
 8014a24:	701a      	strb	r2, [r3, #0]
        break;
 8014a26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d100      	bne.n	8014a30 <UART_SetConfig+0x410>
 8014a2e:	e09a      	b.n	8014b66 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a34:	4b57      	ldr	r3, [pc, #348]	@ (8014b94 <UART_SetConfig+0x574>)
 8014a36:	0052      	lsls	r2, r2, #1
 8014a38:	5ad3      	ldrh	r3, [r2, r3]
 8014a3a:	0019      	movs	r1, r3
 8014a3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014a3e:	f7eb fb73 	bl	8000128 <__udivsi3>
 8014a42:	0003      	movs	r3, r0
 8014a44:	005a      	lsls	r2, r3, #1
 8014a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	085b      	lsrs	r3, r3, #1
 8014a4c:	18d2      	adds	r2, r2, r3
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	0019      	movs	r1, r3
 8014a54:	0010      	movs	r0, r2
 8014a56:	f7eb fb67 	bl	8000128 <__udivsi3>
 8014a5a:	0003      	movs	r3, r0
 8014a5c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a60:	2b0f      	cmp	r3, #15
 8014a62:	d921      	bls.n	8014aa8 <UART_SetConfig+0x488>
 8014a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a66:	2380      	movs	r3, #128	@ 0x80
 8014a68:	025b      	lsls	r3, r3, #9
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d21c      	bcs.n	8014aa8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	200e      	movs	r0, #14
 8014a74:	2420      	movs	r4, #32
 8014a76:	1903      	adds	r3, r0, r4
 8014a78:	19db      	adds	r3, r3, r7
 8014a7a:	210f      	movs	r1, #15
 8014a7c:	438a      	bics	r2, r1
 8014a7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a82:	085b      	lsrs	r3, r3, #1
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	2207      	movs	r2, #7
 8014a88:	4013      	ands	r3, r2
 8014a8a:	b299      	uxth	r1, r3
 8014a8c:	1903      	adds	r3, r0, r4
 8014a8e:	19db      	adds	r3, r3, r7
 8014a90:	1902      	adds	r2, r0, r4
 8014a92:	19d2      	adds	r2, r2, r7
 8014a94:	8812      	ldrh	r2, [r2, #0]
 8014a96:	430a      	orrs	r2, r1
 8014a98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8014a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	1902      	adds	r2, r0, r4
 8014aa0:	19d2      	adds	r2, r2, r7
 8014aa2:	8812      	ldrh	r2, [r2, #0]
 8014aa4:	60da      	str	r2, [r3, #12]
 8014aa6:	e05e      	b.n	8014b66 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8014aa8:	231a      	movs	r3, #26
 8014aaa:	2220      	movs	r2, #32
 8014aac:	189b      	adds	r3, r3, r2
 8014aae:	19db      	adds	r3, r3, r7
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	701a      	strb	r2, [r3, #0]
 8014ab4:	e057      	b.n	8014b66 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014ab6:	231b      	movs	r3, #27
 8014ab8:	2220      	movs	r2, #32
 8014aba:	189b      	adds	r3, r3, r2
 8014abc:	19db      	adds	r3, r3, r7
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	2b08      	cmp	r3, #8
 8014ac2:	d015      	beq.n	8014af0 <UART_SetConfig+0x4d0>
 8014ac4:	dc18      	bgt.n	8014af8 <UART_SetConfig+0x4d8>
 8014ac6:	2b04      	cmp	r3, #4
 8014ac8:	d00d      	beq.n	8014ae6 <UART_SetConfig+0x4c6>
 8014aca:	dc15      	bgt.n	8014af8 <UART_SetConfig+0x4d8>
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d002      	beq.n	8014ad6 <UART_SetConfig+0x4b6>
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	d005      	beq.n	8014ae0 <UART_SetConfig+0x4c0>
 8014ad4:	e010      	b.n	8014af8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014ad6:	f7fc ff01 	bl	80118dc <HAL_RCC_GetPCLK1Freq>
 8014ada:	0003      	movs	r3, r0
 8014adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014ade:	e014      	b.n	8014b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8014b98 <UART_SetConfig+0x578>)
 8014ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014ae4:	e011      	b.n	8014b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014ae6:	f7fc fe6d 	bl	80117c4 <HAL_RCC_GetSysClockFreq>
 8014aea:	0003      	movs	r3, r0
 8014aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014aee:	e00c      	b.n	8014b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014af0:	2380      	movs	r3, #128	@ 0x80
 8014af2:	021b      	lsls	r3, r3, #8
 8014af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8014af6:	e008      	b.n	8014b0a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8014af8:	2300      	movs	r3, #0
 8014afa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8014afc:	231a      	movs	r3, #26
 8014afe:	2220      	movs	r2, #32
 8014b00:	189b      	adds	r3, r3, r2
 8014b02:	19db      	adds	r3, r3, r7
 8014b04:	2201      	movs	r2, #1
 8014b06:	701a      	strb	r2, [r3, #0]
        break;
 8014b08:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8014b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d02a      	beq.n	8014b66 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b14:	4b1f      	ldr	r3, [pc, #124]	@ (8014b94 <UART_SetConfig+0x574>)
 8014b16:	0052      	lsls	r2, r2, #1
 8014b18:	5ad3      	ldrh	r3, [r2, r3]
 8014b1a:	0019      	movs	r1, r3
 8014b1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014b1e:	f7eb fb03 	bl	8000128 <__udivsi3>
 8014b22:	0003      	movs	r3, r0
 8014b24:	001a      	movs	r2, r3
 8014b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	085b      	lsrs	r3, r3, #1
 8014b2c:	18d2      	adds	r2, r2, r3
 8014b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	0019      	movs	r1, r3
 8014b34:	0010      	movs	r0, r2
 8014b36:	f7eb faf7 	bl	8000128 <__udivsi3>
 8014b3a:	0003      	movs	r3, r0
 8014b3c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b40:	2b0f      	cmp	r3, #15
 8014b42:	d90a      	bls.n	8014b5a <UART_SetConfig+0x53a>
 8014b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b46:	2380      	movs	r3, #128	@ 0x80
 8014b48:	025b      	lsls	r3, r3, #9
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d205      	bcs.n	8014b5a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b50:	b29a      	uxth	r2, r3
 8014b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	60da      	str	r2, [r3, #12]
 8014b58:	e005      	b.n	8014b66 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8014b5a:	231a      	movs	r3, #26
 8014b5c:	2220      	movs	r2, #32
 8014b5e:	189b      	adds	r3, r3, r2
 8014b60:	19db      	adds	r3, r3, r7
 8014b62:	2201      	movs	r2, #1
 8014b64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b68:	226a      	movs	r2, #106	@ 0x6a
 8014b6a:	2101      	movs	r1, #1
 8014b6c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8014b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b70:	2268      	movs	r2, #104	@ 0x68
 8014b72:	2101      	movs	r1, #1
 8014b74:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b78:	2200      	movs	r2, #0
 8014b7a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8014b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b7e:	2200      	movs	r2, #0
 8014b80:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8014b82:	231a      	movs	r3, #26
 8014b84:	2220      	movs	r2, #32
 8014b86:	189b      	adds	r3, r3, r2
 8014b88:	19db      	adds	r3, r3, r7
 8014b8a:	781b      	ldrb	r3, [r3, #0]
}
 8014b8c:	0018      	movs	r0, r3
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	b010      	add	sp, #64	@ 0x40
 8014b92:	bdb0      	pop	{r4, r5, r7, pc}
 8014b94:	0801a180 	.word	0x0801a180
 8014b98:	00f42400 	.word	0x00f42400

08014b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ba8:	2201      	movs	r2, #1
 8014baa:	4013      	ands	r3, r2
 8014bac:	d00b      	beq.n	8014bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8014ce0 <UART_AdvFeatureConfig+0x144>)
 8014bb6:	4013      	ands	r3, r2
 8014bb8:	0019      	movs	r1, r3
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	430a      	orrs	r2, r1
 8014bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bca:	2202      	movs	r2, #2
 8014bcc:	4013      	ands	r3, r2
 8014bce:	d00b      	beq.n	8014be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	4a43      	ldr	r2, [pc, #268]	@ (8014ce4 <UART_AdvFeatureConfig+0x148>)
 8014bd8:	4013      	ands	r3, r2
 8014bda:	0019      	movs	r1, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	430a      	orrs	r2, r1
 8014be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bec:	2204      	movs	r2, #4
 8014bee:	4013      	ands	r3, r2
 8014bf0:	d00b      	beq.n	8014c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8014ce8 <UART_AdvFeatureConfig+0x14c>)
 8014bfa:	4013      	ands	r3, r2
 8014bfc:	0019      	movs	r1, r3
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	430a      	orrs	r2, r1
 8014c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c0e:	2208      	movs	r2, #8
 8014c10:	4013      	ands	r3, r2
 8014c12:	d00b      	beq.n	8014c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	685b      	ldr	r3, [r3, #4]
 8014c1a:	4a34      	ldr	r2, [pc, #208]	@ (8014cec <UART_AdvFeatureConfig+0x150>)
 8014c1c:	4013      	ands	r3, r2
 8014c1e:	0019      	movs	r1, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	430a      	orrs	r2, r1
 8014c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c30:	2210      	movs	r2, #16
 8014c32:	4013      	ands	r3, r2
 8014c34:	d00b      	beq.n	8014c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	689b      	ldr	r3, [r3, #8]
 8014c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8014cf0 <UART_AdvFeatureConfig+0x154>)
 8014c3e:	4013      	ands	r3, r2
 8014c40:	0019      	movs	r1, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	430a      	orrs	r2, r1
 8014c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c52:	2220      	movs	r2, #32
 8014c54:	4013      	ands	r3, r2
 8014c56:	d00b      	beq.n	8014c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	4a25      	ldr	r2, [pc, #148]	@ (8014cf4 <UART_AdvFeatureConfig+0x158>)
 8014c60:	4013      	ands	r3, r2
 8014c62:	0019      	movs	r1, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	430a      	orrs	r2, r1
 8014c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c74:	2240      	movs	r2, #64	@ 0x40
 8014c76:	4013      	ands	r3, r2
 8014c78:	d01d      	beq.n	8014cb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	685b      	ldr	r3, [r3, #4]
 8014c80:	4a1d      	ldr	r2, [pc, #116]	@ (8014cf8 <UART_AdvFeatureConfig+0x15c>)
 8014c82:	4013      	ands	r3, r2
 8014c84:	0019      	movs	r1, r3
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	430a      	orrs	r2, r1
 8014c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014c96:	2380      	movs	r3, #128	@ 0x80
 8014c98:	035b      	lsls	r3, r3, #13
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d10b      	bne.n	8014cb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	4a15      	ldr	r2, [pc, #84]	@ (8014cfc <UART_AdvFeatureConfig+0x160>)
 8014ca6:	4013      	ands	r3, r2
 8014ca8:	0019      	movs	r1, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	430a      	orrs	r2, r1
 8014cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cba:	2280      	movs	r2, #128	@ 0x80
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	d00b      	beq.n	8014cd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8014d00 <UART_AdvFeatureConfig+0x164>)
 8014cc8:	4013      	ands	r3, r2
 8014cca:	0019      	movs	r1, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	430a      	orrs	r2, r1
 8014cd6:	605a      	str	r2, [r3, #4]
  }
}
 8014cd8:	46c0      	nop			@ (mov r8, r8)
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	b002      	add	sp, #8
 8014cde:	bd80      	pop	{r7, pc}
 8014ce0:	fffdffff 	.word	0xfffdffff
 8014ce4:	fffeffff 	.word	0xfffeffff
 8014ce8:	fffbffff 	.word	0xfffbffff
 8014cec:	ffff7fff 	.word	0xffff7fff
 8014cf0:	ffffefff 	.word	0xffffefff
 8014cf4:	ffffdfff 	.word	0xffffdfff
 8014cf8:	ffefffff 	.word	0xffefffff
 8014cfc:	ff9fffff 	.word	0xff9fffff
 8014d00:	fff7ffff 	.word	0xfff7ffff

08014d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af02      	add	r7, sp, #8
 8014d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	228c      	movs	r2, #140	@ 0x8c
 8014d10:	2100      	movs	r1, #0
 8014d12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014d14:	f7f9 fbfc 	bl	800e510 <HAL_GetTick>
 8014d18:	0003      	movs	r3, r0
 8014d1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2208      	movs	r2, #8
 8014d24:	4013      	ands	r3, r2
 8014d26:	2b08      	cmp	r3, #8
 8014d28:	d10c      	bne.n	8014d44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2280      	movs	r2, #128	@ 0x80
 8014d2e:	0391      	lsls	r1, r2, #14
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	4a18      	ldr	r2, [pc, #96]	@ (8014d94 <UART_CheckIdleState+0x90>)
 8014d34:	9200      	str	r2, [sp, #0]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f000 f82e 	bl	8014d98 <UART_WaitOnFlagUntilTimeout>
 8014d3c:	1e03      	subs	r3, r0, #0
 8014d3e:	d001      	beq.n	8014d44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d40:	2303      	movs	r3, #3
 8014d42:	e023      	b.n	8014d8c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2204      	movs	r2, #4
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	2b04      	cmp	r3, #4
 8014d50:	d10c      	bne.n	8014d6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2280      	movs	r2, #128	@ 0x80
 8014d56:	03d1      	lsls	r1, r2, #15
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8014d94 <UART_CheckIdleState+0x90>)
 8014d5c:	9200      	str	r2, [sp, #0]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f000 f81a 	bl	8014d98 <UART_WaitOnFlagUntilTimeout>
 8014d64:	1e03      	subs	r3, r0, #0
 8014d66:	d001      	beq.n	8014d6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d68:	2303      	movs	r3, #3
 8014d6a:	e00f      	b.n	8014d8c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2284      	movs	r2, #132	@ 0x84
 8014d70:	2120      	movs	r1, #32
 8014d72:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2288      	movs	r2, #136	@ 0x88
 8014d78:	2120      	movs	r1, #32
 8014d7a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2280      	movs	r2, #128	@ 0x80
 8014d86:	2100      	movs	r1, #0
 8014d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014d8a:	2300      	movs	r3, #0
}
 8014d8c:	0018      	movs	r0, r3
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	b004      	add	sp, #16
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	01ffffff 	.word	0x01ffffff

08014d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b094      	sub	sp, #80	@ 0x50
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	603b      	str	r3, [r7, #0]
 8014da4:	1dfb      	adds	r3, r7, #7
 8014da6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014da8:	e0a7      	b.n	8014efa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dac:	3301      	adds	r3, #1
 8014dae:	d100      	bne.n	8014db2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8014db0:	e0a3      	b.n	8014efa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014db2:	f7f9 fbad 	bl	800e510 <HAL_GetTick>
 8014db6:	0002      	movs	r2, r0
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	1ad3      	subs	r3, r2, r3
 8014dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d302      	bcc.n	8014dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8014dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d13f      	bne.n	8014e48 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8014dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd8:	f383 8810 	msr	PRIMASK, r3
}
 8014ddc:	46c0      	nop			@ (mov r8, r8)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	681a      	ldr	r2, [r3, #0]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	494e      	ldr	r1, [pc, #312]	@ (8014f24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8014dea:	400a      	ands	r2, r1
 8014dec:	601a      	str	r2, [r3, #0]
 8014dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014df0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df4:	f383 8810 	msr	PRIMASK, r3
}
 8014df8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8014dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8014e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e04:	2301      	movs	r3, #1
 8014e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e0a:	f383 8810 	msr	PRIMASK, r3
}
 8014e0e:	46c0      	nop			@ (mov r8, r8)
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	689a      	ldr	r2, [r3, #8]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	2101      	movs	r1, #1
 8014e1c:	438a      	bics	r2, r1
 8014e1e:	609a      	str	r2, [r3, #8]
 8014e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e26:	f383 8810 	msr	PRIMASK, r3
}
 8014e2a:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2284      	movs	r2, #132	@ 0x84
 8014e30:	2120      	movs	r1, #32
 8014e32:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2288      	movs	r2, #136	@ 0x88
 8014e38:	2120      	movs	r1, #32
 8014e3a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2280      	movs	r2, #128	@ 0x80
 8014e40:	2100      	movs	r1, #0
 8014e42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014e44:	2303      	movs	r3, #3
 8014e46:	e069      	b.n	8014f1c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2204      	movs	r2, #4
 8014e50:	4013      	ands	r3, r2
 8014e52:	d052      	beq.n	8014efa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	69da      	ldr	r2, [r3, #28]
 8014e5a:	2380      	movs	r3, #128	@ 0x80
 8014e5c:	011b      	lsls	r3, r3, #4
 8014e5e:	401a      	ands	r2, r3
 8014e60:	2380      	movs	r3, #128	@ 0x80
 8014e62:	011b      	lsls	r3, r3, #4
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d148      	bne.n	8014efa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2280      	movs	r2, #128	@ 0x80
 8014e6e:	0112      	lsls	r2, r2, #4
 8014e70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e72:	f3ef 8310 	mrs	r3, PRIMASK
 8014e76:	613b      	str	r3, [r7, #16]
  return(result);
 8014e78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	f383 8810 	msr	PRIMASK, r3
}
 8014e86:	46c0      	nop			@ (mov r8, r8)
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	4924      	ldr	r1, [pc, #144]	@ (8014f24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8014e94:	400a      	ands	r2, r1
 8014e96:	601a      	str	r2, [r3, #0]
 8014e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	f383 8810 	msr	PRIMASK, r3
}
 8014ea2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ea8:	61fb      	str	r3, [r7, #28]
  return(result);
 8014eaa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014eae:	2301      	movs	r3, #1
 8014eb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eb2:	6a3b      	ldr	r3, [r7, #32]
 8014eb4:	f383 8810 	msr	PRIMASK, r3
}
 8014eb8:	46c0      	nop			@ (mov r8, r8)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	689a      	ldr	r2, [r3, #8]
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	438a      	bics	r2, r1
 8014ec8:	609a      	str	r2, [r3, #8]
 8014eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed0:	f383 8810 	msr	PRIMASK, r3
}
 8014ed4:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2284      	movs	r2, #132	@ 0x84
 8014eda:	2120      	movs	r1, #32
 8014edc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2288      	movs	r2, #136	@ 0x88
 8014ee2:	2120      	movs	r1, #32
 8014ee4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	228c      	movs	r2, #140	@ 0x8c
 8014eea:	2120      	movs	r1, #32
 8014eec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2280      	movs	r2, #128	@ 0x80
 8014ef2:	2100      	movs	r1, #0
 8014ef4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	e010      	b.n	8014f1c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	69db      	ldr	r3, [r3, #28]
 8014f00:	68ba      	ldr	r2, [r7, #8]
 8014f02:	4013      	ands	r3, r2
 8014f04:	68ba      	ldr	r2, [r7, #8]
 8014f06:	1ad3      	subs	r3, r2, r3
 8014f08:	425a      	negs	r2, r3
 8014f0a:	4153      	adcs	r3, r2
 8014f0c:	b2db      	uxtb	r3, r3
 8014f0e:	001a      	movs	r2, r3
 8014f10:	1dfb      	adds	r3, r7, #7
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d100      	bne.n	8014f1a <UART_WaitOnFlagUntilTimeout+0x182>
 8014f18:	e747      	b.n	8014daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	0018      	movs	r0, r3
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	b014      	add	sp, #80	@ 0x50
 8014f22:	bd80      	pop	{r7, pc}
 8014f24:	fffffe5f 	.word	0xfffffe5f

08014f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b098      	sub	sp, #96	@ 0x60
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	60f8      	str	r0, [r7, #12]
 8014f30:	60b9      	str	r1, [r7, #8]
 8014f32:	1dbb      	adds	r3, r7, #6
 8014f34:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	1dba      	adds	r2, r7, #6
 8014f40:	215c      	movs	r1, #92	@ 0x5c
 8014f42:	8812      	ldrh	r2, [r2, #0]
 8014f44:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	1dba      	adds	r2, r7, #6
 8014f4a:	215e      	movs	r1, #94	@ 0x5e
 8014f4c:	8812      	ldrh	r2, [r2, #0]
 8014f4e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	689a      	ldr	r2, [r3, #8]
 8014f5a:	2380      	movs	r3, #128	@ 0x80
 8014f5c:	015b      	lsls	r3, r3, #5
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d10d      	bne.n	8014f7e <UART_Start_Receive_IT+0x56>
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	691b      	ldr	r3, [r3, #16]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d104      	bne.n	8014f74 <UART_Start_Receive_IT+0x4c>
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2260      	movs	r2, #96	@ 0x60
 8014f6e:	497f      	ldr	r1, [pc, #508]	@ (801516c <UART_Start_Receive_IT+0x244>)
 8014f70:	5299      	strh	r1, [r3, r2]
 8014f72:	e02e      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2260      	movs	r2, #96	@ 0x60
 8014f78:	21ff      	movs	r1, #255	@ 0xff
 8014f7a:	5299      	strh	r1, [r3, r2]
 8014f7c:	e029      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	689b      	ldr	r3, [r3, #8]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d10d      	bne.n	8014fa2 <UART_Start_Receive_IT+0x7a>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	691b      	ldr	r3, [r3, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d104      	bne.n	8014f98 <UART_Start_Receive_IT+0x70>
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	2260      	movs	r2, #96	@ 0x60
 8014f92:	21ff      	movs	r1, #255	@ 0xff
 8014f94:	5299      	strh	r1, [r3, r2]
 8014f96:	e01c      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2260      	movs	r2, #96	@ 0x60
 8014f9c:	217f      	movs	r1, #127	@ 0x7f
 8014f9e:	5299      	strh	r1, [r3, r2]
 8014fa0:	e017      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	689a      	ldr	r2, [r3, #8]
 8014fa6:	2380      	movs	r3, #128	@ 0x80
 8014fa8:	055b      	lsls	r3, r3, #21
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d10d      	bne.n	8014fca <UART_Start_Receive_IT+0xa2>
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	691b      	ldr	r3, [r3, #16]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d104      	bne.n	8014fc0 <UART_Start_Receive_IT+0x98>
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2260      	movs	r2, #96	@ 0x60
 8014fba:	217f      	movs	r1, #127	@ 0x7f
 8014fbc:	5299      	strh	r1, [r3, r2]
 8014fbe:	e008      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2260      	movs	r2, #96	@ 0x60
 8014fc4:	213f      	movs	r1, #63	@ 0x3f
 8014fc6:	5299      	strh	r1, [r3, r2]
 8014fc8:	e003      	b.n	8014fd2 <UART_Start_Receive_IT+0xaa>
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2260      	movs	r2, #96	@ 0x60
 8014fce:	2100      	movs	r1, #0
 8014fd0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	228c      	movs	r2, #140	@ 0x8c
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2288      	movs	r2, #136	@ 0x88
 8014fde:	2122      	movs	r1, #34	@ 0x22
 8014fe0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8014fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8014fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014fec:	2301      	movs	r3, #1
 8014fee:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ff2:	f383 8810 	msr	PRIMASK, r3
}
 8014ff6:	46c0      	nop			@ (mov r8, r8)
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	689a      	ldr	r2, [r3, #8]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	2101      	movs	r1, #1
 8015004:	430a      	orrs	r2, r1
 8015006:	609a      	str	r2, [r3, #8]
 8015008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801500a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801500c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801500e:	f383 8810 	msr	PRIMASK, r3
}
 8015012:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8015018:	2380      	movs	r3, #128	@ 0x80
 801501a:	059b      	lsls	r3, r3, #22
 801501c:	429a      	cmp	r2, r3
 801501e:	d154      	bne.n	80150ca <UART_Start_Receive_IT+0x1a2>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2268      	movs	r2, #104	@ 0x68
 8015024:	5a9b      	ldrh	r3, [r3, r2]
 8015026:	1dba      	adds	r2, r7, #6
 8015028:	8812      	ldrh	r2, [r2, #0]
 801502a:	429a      	cmp	r2, r3
 801502c:	d34d      	bcc.n	80150ca <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	689a      	ldr	r2, [r3, #8]
 8015032:	2380      	movs	r3, #128	@ 0x80
 8015034:	015b      	lsls	r3, r3, #5
 8015036:	429a      	cmp	r2, r3
 8015038:	d107      	bne.n	801504a <UART_Start_Receive_IT+0x122>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d103      	bne.n	801504a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4a4a      	ldr	r2, [pc, #296]	@ (8015170 <UART_Start_Receive_IT+0x248>)
 8015046:	671a      	str	r2, [r3, #112]	@ 0x70
 8015048:	e002      	b.n	8015050 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4a49      	ldr	r2, [pc, #292]	@ (8015174 <UART_Start_Receive_IT+0x24c>)
 801504e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2280      	movs	r2, #128	@ 0x80
 8015054:	2100      	movs	r1, #0
 8015056:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	691b      	ldr	r3, [r3, #16]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d019      	beq.n	8015094 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015060:	f3ef 8310 	mrs	r3, PRIMASK
 8015064:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8015066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015068:	65bb      	str	r3, [r7, #88]	@ 0x58
 801506a:	2301      	movs	r3, #1
 801506c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015070:	f383 8810 	msr	PRIMASK, r3
}
 8015074:	46c0      	nop			@ (mov r8, r8)
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	681a      	ldr	r2, [r3, #0]
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2180      	movs	r1, #128	@ 0x80
 8015082:	0049      	lsls	r1, r1, #1
 8015084:	430a      	orrs	r2, r1
 8015086:	601a      	str	r2, [r3, #0]
 8015088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801508e:	f383 8810 	msr	PRIMASK, r3
}
 8015092:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015094:	f3ef 8310 	mrs	r3, PRIMASK
 8015098:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801509c:	657b      	str	r3, [r7, #84]	@ 0x54
 801509e:	2301      	movs	r3, #1
 80150a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a4:	f383 8810 	msr	PRIMASK, r3
}
 80150a8:	46c0      	nop			@ (mov r8, r8)
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	689a      	ldr	r2, [r3, #8]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2180      	movs	r1, #128	@ 0x80
 80150b6:	0549      	lsls	r1, r1, #21
 80150b8:	430a      	orrs	r2, r1
 80150ba:	609a      	str	r2, [r3, #8]
 80150bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150c2:	f383 8810 	msr	PRIMASK, r3
}
 80150c6:	46c0      	nop			@ (mov r8, r8)
 80150c8:	e04b      	b.n	8015162 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	689a      	ldr	r2, [r3, #8]
 80150ce:	2380      	movs	r3, #128	@ 0x80
 80150d0:	015b      	lsls	r3, r3, #5
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d107      	bne.n	80150e6 <UART_Start_Receive_IT+0x1be>
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	691b      	ldr	r3, [r3, #16]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d103      	bne.n	80150e6 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	4a25      	ldr	r2, [pc, #148]	@ (8015178 <UART_Start_Receive_IT+0x250>)
 80150e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80150e4:	e002      	b.n	80150ec <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	4a24      	ldr	r2, [pc, #144]	@ (801517c <UART_Start_Receive_IT+0x254>)
 80150ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2280      	movs	r2, #128	@ 0x80
 80150f0:	2100      	movs	r1, #0
 80150f2:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	691b      	ldr	r3, [r3, #16]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d019      	beq.n	8015130 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150fc:	f3ef 8310 	mrs	r3, PRIMASK
 8015100:	61fb      	str	r3, [r7, #28]
  return(result);
 8015102:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015106:	2301      	movs	r3, #1
 8015108:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	f383 8810 	msr	PRIMASK, r3
}
 8015110:	46c0      	nop			@ (mov r8, r8)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2190      	movs	r1, #144	@ 0x90
 801511e:	0049      	lsls	r1, r1, #1
 8015120:	430a      	orrs	r2, r1
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015126:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801512a:	f383 8810 	msr	PRIMASK, r3
}
 801512e:	e018      	b.n	8015162 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015130:	f3ef 8310 	mrs	r3, PRIMASK
 8015134:	613b      	str	r3, [r7, #16]
  return(result);
 8015136:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015138:	653b      	str	r3, [r7, #80]	@ 0x50
 801513a:	2301      	movs	r3, #1
 801513c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	f383 8810 	msr	PRIMASK, r3
}
 8015144:	46c0      	nop			@ (mov r8, r8)
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2120      	movs	r1, #32
 8015152:	430a      	orrs	r2, r1
 8015154:	601a      	str	r2, [r3, #0]
 8015156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015158:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801515a:	69bb      	ldr	r3, [r7, #24]
 801515c:	f383 8810 	msr	PRIMASK, r3
}
 8015160:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8015162:	2300      	movs	r3, #0
}
 8015164:	0018      	movs	r0, r3
 8015166:	46bd      	mov	sp, r7
 8015168:	b018      	add	sp, #96	@ 0x60
 801516a:	bd80      	pop	{r7, pc}
 801516c:	000001ff 	.word	0x000001ff
 8015170:	08015c49 	.word	0x08015c49
 8015174:	08015965 	.word	0x08015965
 8015178:	080157f9 	.word	0x080157f9
 801517c:	0801568d 	.word	0x0801568d

08015180 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b090      	sub	sp, #64	@ 0x40
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	1dbb      	adds	r3, r7, #6
 801518c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	1dba      	adds	r2, r7, #6
 8015198:	215c      	movs	r1, #92	@ 0x5c
 801519a:	8812      	ldrh	r2, [r2, #0]
 801519c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	228c      	movs	r2, #140	@ 0x8c
 80151a2:	2100      	movs	r1, #0
 80151a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2288      	movs	r2, #136	@ 0x88
 80151aa:	2122      	movs	r1, #34	@ 0x22
 80151ac:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d02c      	beq.n	8015210 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151ba:	4a42      	ldr	r2, [pc, #264]	@ (80152c4 <UART_Start_Receive_DMA+0x144>)
 80151bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151c2:	4a41      	ldr	r2, [pc, #260]	@ (80152c8 <UART_Start_Receive_DMA+0x148>)
 80151c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151ca:	4a40      	ldr	r2, [pc, #256]	@ (80152cc <UART_Start_Receive_DMA+0x14c>)
 80151cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151d2:	2200      	movs	r2, #0
 80151d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	3324      	adds	r3, #36	@ 0x24
 80151e0:	0019      	movs	r1, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151e6:	001a      	movs	r2, r3
 80151e8:	1dbb      	adds	r3, r7, #6
 80151ea:	881b      	ldrh	r3, [r3, #0]
 80151ec:	f7f9 fb3c 	bl	800e868 <HAL_DMA_Start_IT>
 80151f0:	1e03      	subs	r3, r0, #0
 80151f2:	d00d      	beq.n	8015210 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	228c      	movs	r2, #140	@ 0x8c
 80151f8:	2110      	movs	r1, #16
 80151fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2280      	movs	r2, #128	@ 0x80
 8015200:	2100      	movs	r1, #0
 8015202:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2288      	movs	r2, #136	@ 0x88
 8015208:	2120      	movs	r1, #32
 801520a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801520c:	2301      	movs	r3, #1
 801520e:	e054      	b.n	80152ba <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2280      	movs	r2, #128	@ 0x80
 8015214:	2100      	movs	r1, #0
 8015216:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	691b      	ldr	r3, [r3, #16]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d019      	beq.n	8015254 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015220:	f3ef 8310 	mrs	r3, PRIMASK
 8015224:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8015226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801522a:	2301      	movs	r3, #1
 801522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	f383 8810 	msr	PRIMASK, r3
}
 8015234:	46c0      	nop			@ (mov r8, r8)
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2180      	movs	r1, #128	@ 0x80
 8015242:	0049      	lsls	r1, r1, #1
 8015244:	430a      	orrs	r2, r1
 8015246:	601a      	str	r2, [r3, #0]
 8015248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801524a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524e:	f383 8810 	msr	PRIMASK, r3
}
 8015252:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015254:	f3ef 8310 	mrs	r3, PRIMASK
 8015258:	613b      	str	r3, [r7, #16]
  return(result);
 801525a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801525c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801525e:	2301      	movs	r3, #1
 8015260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	f383 8810 	msr	PRIMASK, r3
}
 8015268:	46c0      	nop			@ (mov r8, r8)
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	689a      	ldr	r2, [r3, #8]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2101      	movs	r1, #1
 8015276:	430a      	orrs	r2, r1
 8015278:	609a      	str	r2, [r3, #8]
 801527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801527c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	f383 8810 	msr	PRIMASK, r3
}
 8015284:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015286:	f3ef 8310 	mrs	r3, PRIMASK
 801528a:	61fb      	str	r3, [r7, #28]
  return(result);
 801528c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801528e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015290:	2301      	movs	r3, #1
 8015292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015294:	6a3b      	ldr	r3, [r7, #32]
 8015296:	f383 8810 	msr	PRIMASK, r3
}
 801529a:	46c0      	nop			@ (mov r8, r8)
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	689a      	ldr	r2, [r3, #8]
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2140      	movs	r1, #64	@ 0x40
 80152a8:	430a      	orrs	r2, r1
 80152aa:	609a      	str	r2, [r3, #8]
 80152ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b2:	f383 8810 	msr	PRIMASK, r3
}
 80152b6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80152b8:	2300      	movs	r3, #0
}
 80152ba:	0018      	movs	r0, r3
 80152bc:	46bd      	mov	sp, r7
 80152be:	b010      	add	sp, #64	@ 0x40
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	46c0      	nop			@ (mov r8, r8)
 80152c4:	0801541d 	.word	0x0801541d
 80152c8:	08015545 	.word	0x08015545
 80152cc:	08015581 	.word	0x08015581

080152d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b08a      	sub	sp, #40	@ 0x28
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152d8:	f3ef 8310 	mrs	r3, PRIMASK
 80152dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80152de:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80152e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80152e2:	2301      	movs	r3, #1
 80152e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	f383 8810 	msr	PRIMASK, r3
}
 80152ec:	46c0      	nop			@ (mov r8, r8)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	21c0      	movs	r1, #192	@ 0xc0
 80152fa:	438a      	bics	r2, r1
 80152fc:	601a      	str	r2, [r3, #0]
 80152fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	f383 8810 	msr	PRIMASK, r3
}
 8015308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801530a:	f3ef 8310 	mrs	r3, PRIMASK
 801530e:	617b      	str	r3, [r7, #20]
  return(result);
 8015310:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015312:	623b      	str	r3, [r7, #32]
 8015314:	2301      	movs	r3, #1
 8015316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015318:	69bb      	ldr	r3, [r7, #24]
 801531a:	f383 8810 	msr	PRIMASK, r3
}
 801531e:	46c0      	nop			@ (mov r8, r8)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	689a      	ldr	r2, [r3, #8]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4908      	ldr	r1, [pc, #32]	@ (801534c <UART_EndTxTransfer+0x7c>)
 801532c:	400a      	ands	r2, r1
 801532e:	609a      	str	r2, [r3, #8]
 8015330:	6a3b      	ldr	r3, [r7, #32]
 8015332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	f383 8810 	msr	PRIMASK, r3
}
 801533a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2284      	movs	r2, #132	@ 0x84
 8015340:	2120      	movs	r1, #32
 8015342:	5099      	str	r1, [r3, r2]
}
 8015344:	46c0      	nop			@ (mov r8, r8)
 8015346:	46bd      	mov	sp, r7
 8015348:	b00a      	add	sp, #40	@ 0x28
 801534a:	bd80      	pop	{r7, pc}
 801534c:	ff7fffff 	.word	0xff7fffff

08015350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b08e      	sub	sp, #56	@ 0x38
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015358:	f3ef 8310 	mrs	r3, PRIMASK
 801535c:	617b      	str	r3, [r7, #20]
  return(result);
 801535e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015360:	637b      	str	r3, [r7, #52]	@ 0x34
 8015362:	2301      	movs	r3, #1
 8015364:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	f383 8810 	msr	PRIMASK, r3
}
 801536c:	46c0      	nop			@ (mov r8, r8)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	4926      	ldr	r1, [pc, #152]	@ (8015414 <UART_EndRxTransfer+0xc4>)
 801537a:	400a      	ands	r2, r1
 801537c:	601a      	str	r2, [r3, #0]
 801537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	f383 8810 	msr	PRIMASK, r3
}
 8015388:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801538a:	f3ef 8310 	mrs	r3, PRIMASK
 801538e:	623b      	str	r3, [r7, #32]
  return(result);
 8015390:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015392:	633b      	str	r3, [r7, #48]	@ 0x30
 8015394:	2301      	movs	r3, #1
 8015396:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801539a:	f383 8810 	msr	PRIMASK, r3
}
 801539e:	46c0      	nop			@ (mov r8, r8)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	689a      	ldr	r2, [r3, #8]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	491b      	ldr	r1, [pc, #108]	@ (8015418 <UART_EndRxTransfer+0xc8>)
 80153ac:	400a      	ands	r2, r1
 80153ae:	609a      	str	r2, [r3, #8]
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b6:	f383 8810 	msr	PRIMASK, r3
}
 80153ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d118      	bne.n	80153f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153c4:	f3ef 8310 	mrs	r3, PRIMASK
 80153c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80153ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80153cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80153ce:	2301      	movs	r3, #1
 80153d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f383 8810 	msr	PRIMASK, r3
}
 80153d8:	46c0      	nop			@ (mov r8, r8)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	2110      	movs	r1, #16
 80153e6:	438a      	bics	r2, r1
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153ee:	693b      	ldr	r3, [r7, #16]
 80153f0:	f383 8810 	msr	PRIMASK, r3
}
 80153f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2288      	movs	r2, #136	@ 0x88
 80153fa:	2120      	movs	r1, #32
 80153fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2200      	movs	r2, #0
 8015402:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	671a      	str	r2, [r3, #112]	@ 0x70
}
 801540a:	46c0      	nop			@ (mov r8, r8)
 801540c:	46bd      	mov	sp, r7
 801540e:	b00e      	add	sp, #56	@ 0x38
 8015410:	bd80      	pop	{r7, pc}
 8015412:	46c0      	nop			@ (mov r8, r8)
 8015414:	fffffedf 	.word	0xfffffedf
 8015418:	effffffe 	.word	0xeffffffe

0801541c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b094      	sub	sp, #80	@ 0x50
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015428:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2220      	movs	r2, #32
 8015432:	4013      	ands	r3, r2
 8015434:	d16f      	bne.n	8015516 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8015436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015438:	225e      	movs	r2, #94	@ 0x5e
 801543a:	2100      	movs	r1, #0
 801543c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801543e:	f3ef 8310 	mrs	r3, PRIMASK
 8015442:	61bb      	str	r3, [r7, #24]
  return(result);
 8015444:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015448:	2301      	movs	r3, #1
 801544a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	f383 8810 	msr	PRIMASK, r3
}
 8015452:	46c0      	nop			@ (mov r8, r8)
 8015454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4938      	ldr	r1, [pc, #224]	@ (8015540 <UART_DMAReceiveCplt+0x124>)
 8015460:	400a      	ands	r2, r1
 8015462:	601a      	str	r2, [r3, #0]
 8015464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015468:	6a3b      	ldr	r3, [r7, #32]
 801546a:	f383 8810 	msr	PRIMASK, r3
}
 801546e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015470:	f3ef 8310 	mrs	r3, PRIMASK
 8015474:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015478:	647b      	str	r3, [r7, #68]	@ 0x44
 801547a:	2301      	movs	r3, #1
 801547c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015480:	f383 8810 	msr	PRIMASK, r3
}
 8015484:	46c0      	nop			@ (mov r8, r8)
 8015486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	689a      	ldr	r2, [r3, #8]
 801548c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2101      	movs	r1, #1
 8015492:	438a      	bics	r2, r1
 8015494:	609a      	str	r2, [r3, #8]
 8015496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801549c:	f383 8810 	msr	PRIMASK, r3
}
 80154a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154a2:	f3ef 8310 	mrs	r3, PRIMASK
 80154a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80154a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80154aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80154ac:	2301      	movs	r3, #1
 80154ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154b2:	f383 8810 	msr	PRIMASK, r3
}
 80154b6:	46c0      	nop			@ (mov r8, r8)
 80154b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	689a      	ldr	r2, [r3, #8]
 80154be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	2140      	movs	r1, #64	@ 0x40
 80154c4:	438a      	bics	r2, r1
 80154c6:	609a      	str	r2, [r3, #8]
 80154c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80154ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ce:	f383 8810 	msr	PRIMASK, r3
}
 80154d2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80154d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154d6:	2288      	movs	r2, #136	@ 0x88
 80154d8:	2120      	movs	r1, #32
 80154da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80154dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d118      	bne.n	8015516 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154e4:	f3ef 8310 	mrs	r3, PRIMASK
 80154e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80154ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80154ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154ee:	2301      	movs	r3, #1
 80154f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	f383 8810 	msr	PRIMASK, r3
}
 80154f8:	46c0      	nop			@ (mov r8, r8)
 80154fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	681a      	ldr	r2, [r3, #0]
 8015500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2110      	movs	r1, #16
 8015506:	438a      	bics	r2, r1
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801550c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	f383 8810 	msr	PRIMASK, r3
}
 8015514:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801551a:	2b01      	cmp	r3, #1
 801551c:	d108      	bne.n	8015530 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801551e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015520:	225c      	movs	r2, #92	@ 0x5c
 8015522:	5a9a      	ldrh	r2, [r3, r2]
 8015524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015526:	0011      	movs	r1, r2
 8015528:	0018      	movs	r0, r3
 801552a:	f7ff f86d 	bl	8014608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801552e:	e003      	b.n	8015538 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8015530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015532:	0018      	movs	r0, r3
 8015534:	f7ee fd84 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 8015538:	46c0      	nop			@ (mov r8, r8)
 801553a:	46bd      	mov	sp, r7
 801553c:	b014      	add	sp, #80	@ 0x50
 801553e:	bd80      	pop	{r7, pc}
 8015540:	fffffeff 	.word	0xfffffeff

08015544 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015550:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015556:	2b01      	cmp	r3, #1
 8015558:	d10a      	bne.n	8015570 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	225c      	movs	r2, #92	@ 0x5c
 801555e:	5a9b      	ldrh	r3, [r3, r2]
 8015560:	085b      	lsrs	r3, r3, #1
 8015562:	b29a      	uxth	r2, r3
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	0011      	movs	r1, r2
 8015568:	0018      	movs	r0, r3
 801556a:	f7ff f84d 	bl	8014608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801556e:	e003      	b.n	8015578 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	0018      	movs	r0, r3
 8015574:	f7ff f840 	bl	80145f8 <HAL_UART_RxHalfCpltCallback>
}
 8015578:	46c0      	nop			@ (mov r8, r8)
 801557a:	46bd      	mov	sp, r7
 801557c:	b004      	add	sp, #16
 801557e:	bd80      	pop	{r7, pc}

08015580 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b086      	sub	sp, #24
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801558c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	2284      	movs	r2, #132	@ 0x84
 8015592:	589b      	ldr	r3, [r3, r2]
 8015594:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2288      	movs	r2, #136	@ 0x88
 801559a:	589b      	ldr	r3, [r3, r2]
 801559c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	2280      	movs	r2, #128	@ 0x80
 80155a6:	4013      	ands	r3, r2
 80155a8:	2b80      	cmp	r3, #128	@ 0x80
 80155aa:	d10a      	bne.n	80155c2 <UART_DMAError+0x42>
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	2b21      	cmp	r3, #33	@ 0x21
 80155b0:	d107      	bne.n	80155c2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2256      	movs	r2, #86	@ 0x56
 80155b6:	2100      	movs	r1, #0
 80155b8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	0018      	movs	r0, r3
 80155be:	f7ff fe87 	bl	80152d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	689b      	ldr	r3, [r3, #8]
 80155c8:	2240      	movs	r2, #64	@ 0x40
 80155ca:	4013      	ands	r3, r2
 80155cc:	2b40      	cmp	r3, #64	@ 0x40
 80155ce:	d10a      	bne.n	80155e6 <UART_DMAError+0x66>
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2b22      	cmp	r3, #34	@ 0x22
 80155d4:	d107      	bne.n	80155e6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	225e      	movs	r2, #94	@ 0x5e
 80155da:	2100      	movs	r1, #0
 80155dc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	0018      	movs	r0, r3
 80155e2:	f7ff feb5 	bl	8015350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	228c      	movs	r2, #140	@ 0x8c
 80155ea:	589b      	ldr	r3, [r3, r2]
 80155ec:	2210      	movs	r2, #16
 80155ee:	431a      	orrs	r2, r3
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	218c      	movs	r1, #140	@ 0x8c
 80155f4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	0018      	movs	r0, r3
 80155fa:	f7ee fd0b 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80155fe:	46c0      	nop			@ (mov r8, r8)
 8015600:	46bd      	mov	sp, r7
 8015602:	b006      	add	sp, #24
 8015604:	bd80      	pop	{r7, pc}

08015606 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b084      	sub	sp, #16
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	225e      	movs	r2, #94	@ 0x5e
 8015618:	2100      	movs	r1, #0
 801561a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	2256      	movs	r2, #86	@ 0x56
 8015620:	2100      	movs	r1, #0
 8015622:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	0018      	movs	r0, r3
 8015628:	f7ee fcf4 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801562c:	46c0      	nop			@ (mov r8, r8)
 801562e:	46bd      	mov	sp, r7
 8015630:	b004      	add	sp, #16
 8015632:	bd80      	pop	{r7, pc}

08015634 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b086      	sub	sp, #24
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801563c:	f3ef 8310 	mrs	r3, PRIMASK
 8015640:	60bb      	str	r3, [r7, #8]
  return(result);
 8015642:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015644:	617b      	str	r3, [r7, #20]
 8015646:	2301      	movs	r3, #1
 8015648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	f383 8810 	msr	PRIMASK, r3
}
 8015650:	46c0      	nop			@ (mov r8, r8)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2140      	movs	r1, #64	@ 0x40
 801565e:	438a      	bics	r2, r1
 8015660:	601a      	str	r2, [r3, #0]
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	f383 8810 	msr	PRIMASK, r3
}
 801566c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2284      	movs	r2, #132	@ 0x84
 8015672:	2120      	movs	r1, #32
 8015674:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	0018      	movs	r0, r3
 8015680:	f7fe ffb2 	bl	80145e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015684:	46c0      	nop			@ (mov r8, r8)
 8015686:	46bd      	mov	sp, r7
 8015688:	b006      	add	sp, #24
 801568a:	bd80      	pop	{r7, pc}

0801568c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b090      	sub	sp, #64	@ 0x40
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015694:	203e      	movs	r0, #62	@ 0x3e
 8015696:	183b      	adds	r3, r7, r0
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	2160      	movs	r1, #96	@ 0x60
 801569c:	5a52      	ldrh	r2, [r2, r1]
 801569e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2288      	movs	r2, #136	@ 0x88
 80156a4:	589b      	ldr	r3, [r3, r2]
 80156a6:	2b22      	cmp	r3, #34	@ 0x22
 80156a8:	d000      	beq.n	80156ac <UART_RxISR_8BIT+0x20>
 80156aa:	e097      	b.n	80157dc <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156b2:	213c      	movs	r1, #60	@ 0x3c
 80156b4:	187b      	adds	r3, r7, r1
 80156b6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80156b8:	187b      	adds	r3, r7, r1
 80156ba:	881b      	ldrh	r3, [r3, #0]
 80156bc:	b2da      	uxtb	r2, r3
 80156be:	183b      	adds	r3, r7, r0
 80156c0:	881b      	ldrh	r3, [r3, #0]
 80156c2:	b2d9      	uxtb	r1, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80156c8:	400a      	ands	r2, r1
 80156ca:	b2d2      	uxtb	r2, r2
 80156cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80156d2:	1c5a      	adds	r2, r3, #1
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	225e      	movs	r2, #94	@ 0x5e
 80156dc:	5a9b      	ldrh	r3, [r3, r2]
 80156de:	b29b      	uxth	r3, r3
 80156e0:	3b01      	subs	r3, #1
 80156e2:	b299      	uxth	r1, r3
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	225e      	movs	r2, #94	@ 0x5e
 80156e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	225e      	movs	r2, #94	@ 0x5e
 80156ee:	5a9b      	ldrh	r3, [r3, r2]
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d000      	beq.n	80156f8 <UART_RxISR_8BIT+0x6c>
 80156f6:	e079      	b.n	80157ec <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156f8:	f3ef 8310 	mrs	r3, PRIMASK
 80156fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80156fe:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015702:	2301      	movs	r3, #1
 8015704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	f383 8810 	msr	PRIMASK, r3
}
 801570c:	46c0      	nop			@ (mov r8, r8)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	681a      	ldr	r2, [r3, #0]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	4936      	ldr	r1, [pc, #216]	@ (80157f4 <UART_RxISR_8BIT+0x168>)
 801571a:	400a      	ands	r2, r1
 801571c:	601a      	str	r2, [r3, #0]
 801571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015722:	6a3b      	ldr	r3, [r7, #32]
 8015724:	f383 8810 	msr	PRIMASK, r3
}
 8015728:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801572a:	f3ef 8310 	mrs	r3, PRIMASK
 801572e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015732:	637b      	str	r3, [r7, #52]	@ 0x34
 8015734:	2301      	movs	r3, #1
 8015736:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801573a:	f383 8810 	msr	PRIMASK, r3
}
 801573e:	46c0      	nop			@ (mov r8, r8)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	689a      	ldr	r2, [r3, #8]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2101      	movs	r1, #1
 801574c:	438a      	bics	r2, r1
 801574e:	609a      	str	r2, [r3, #8]
 8015750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	f383 8810 	msr	PRIMASK, r3
}
 801575a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2288      	movs	r2, #136	@ 0x88
 8015760:	2120      	movs	r1, #32
 8015762:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801576e:	2b01      	cmp	r3, #1
 8015770:	d12f      	bne.n	80157d2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2200      	movs	r2, #0
 8015776:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015778:	f3ef 8310 	mrs	r3, PRIMASK
 801577c:	60fb      	str	r3, [r7, #12]
  return(result);
 801577e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015780:	633b      	str	r3, [r7, #48]	@ 0x30
 8015782:	2301      	movs	r3, #1
 8015784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	f383 8810 	msr	PRIMASK, r3
}
 801578c:	46c0      	nop			@ (mov r8, r8)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	681a      	ldr	r2, [r3, #0]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2110      	movs	r1, #16
 801579a:	438a      	bics	r2, r1
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	f383 8810 	msr	PRIMASK, r3
}
 80157a8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	69db      	ldr	r3, [r3, #28]
 80157b0:	2210      	movs	r2, #16
 80157b2:	4013      	ands	r3, r2
 80157b4:	2b10      	cmp	r3, #16
 80157b6:	d103      	bne.n	80157c0 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	2210      	movs	r2, #16
 80157be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	225c      	movs	r2, #92	@ 0x5c
 80157c4:	5a9a      	ldrh	r2, [r3, r2]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	0011      	movs	r1, r2
 80157ca:	0018      	movs	r0, r3
 80157cc:	f7fe ff1c 	bl	8014608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80157d0:	e00c      	b.n	80157ec <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	0018      	movs	r0, r3
 80157d6:	f7ee fc33 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 80157da:	e007      	b.n	80157ec <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	699a      	ldr	r2, [r3, #24]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2108      	movs	r1, #8
 80157e8:	430a      	orrs	r2, r1
 80157ea:	619a      	str	r2, [r3, #24]
}
 80157ec:	46c0      	nop			@ (mov r8, r8)
 80157ee:	46bd      	mov	sp, r7
 80157f0:	b010      	add	sp, #64	@ 0x40
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	fffffedf 	.word	0xfffffedf

080157f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b090      	sub	sp, #64	@ 0x40
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015800:	203e      	movs	r0, #62	@ 0x3e
 8015802:	183b      	adds	r3, r7, r0
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	2160      	movs	r1, #96	@ 0x60
 8015808:	5a52      	ldrh	r2, [r2, r1]
 801580a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2288      	movs	r2, #136	@ 0x88
 8015810:	589b      	ldr	r3, [r3, r2]
 8015812:	2b22      	cmp	r3, #34	@ 0x22
 8015814:	d000      	beq.n	8015818 <UART_RxISR_16BIT+0x20>
 8015816:	e097      	b.n	8015948 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801581e:	213c      	movs	r1, #60	@ 0x3c
 8015820:	187b      	adds	r3, r7, r1
 8015822:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015828:	63bb      	str	r3, [r7, #56]	@ 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 801582a:	187b      	adds	r3, r7, r1
 801582c:	183a      	adds	r2, r7, r0
 801582e:	881b      	ldrh	r3, [r3, #0]
 8015830:	8812      	ldrh	r2, [r2, #0]
 8015832:	4013      	ands	r3, r2
 8015834:	b29a      	uxth	r2, r3
 8015836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015838:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801583e:	1c9a      	adds	r2, r3, #2
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	225e      	movs	r2, #94	@ 0x5e
 8015848:	5a9b      	ldrh	r3, [r3, r2]
 801584a:	b29b      	uxth	r3, r3
 801584c:	3b01      	subs	r3, #1
 801584e:	b299      	uxth	r1, r3
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	225e      	movs	r2, #94	@ 0x5e
 8015854:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	225e      	movs	r2, #94	@ 0x5e
 801585a:	5a9b      	ldrh	r3, [r3, r2]
 801585c:	b29b      	uxth	r3, r3
 801585e:	2b00      	cmp	r3, #0
 8015860:	d000      	beq.n	8015864 <UART_RxISR_16BIT+0x6c>
 8015862:	e079      	b.n	8015958 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015864:	f3ef 8310 	mrs	r3, PRIMASK
 8015868:	617b      	str	r3, [r7, #20]
  return(result);
 801586a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801586c:	637b      	str	r3, [r7, #52]	@ 0x34
 801586e:	2301      	movs	r3, #1
 8015870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015872:	69bb      	ldr	r3, [r7, #24]
 8015874:	f383 8810 	msr	PRIMASK, r3
}
 8015878:	46c0      	nop			@ (mov r8, r8)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	4936      	ldr	r1, [pc, #216]	@ (8015960 <UART_RxISR_16BIT+0x168>)
 8015886:	400a      	ands	r2, r1
 8015888:	601a      	str	r2, [r3, #0]
 801588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801588c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	f383 8810 	msr	PRIMASK, r3
}
 8015894:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015896:	f3ef 8310 	mrs	r3, PRIMASK
 801589a:	623b      	str	r3, [r7, #32]
  return(result);
 801589c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801589e:	633b      	str	r3, [r7, #48]	@ 0x30
 80158a0:	2301      	movs	r3, #1
 80158a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158a6:	f383 8810 	msr	PRIMASK, r3
}
 80158aa:	46c0      	nop			@ (mov r8, r8)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	689a      	ldr	r2, [r3, #8]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	2101      	movs	r1, #1
 80158b8:	438a      	bics	r2, r1
 80158ba:	609a      	str	r2, [r3, #8]
 80158bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c2:	f383 8810 	msr	PRIMASK, r3
}
 80158c6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2288      	movs	r2, #136	@ 0x88
 80158cc:	2120      	movs	r1, #32
 80158ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2200      	movs	r2, #0
 80158d4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d12f      	bne.n	801593e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2200      	movs	r2, #0
 80158e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158e4:	f3ef 8310 	mrs	r3, PRIMASK
 80158e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80158ea:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80158ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80158ee:	2301      	movs	r3, #1
 80158f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	f383 8810 	msr	PRIMASK, r3
}
 80158f8:	46c0      	nop			@ (mov r8, r8)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	681a      	ldr	r2, [r3, #0]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2110      	movs	r1, #16
 8015906:	438a      	bics	r2, r1
 8015908:	601a      	str	r2, [r3, #0]
 801590a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801590c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	f383 8810 	msr	PRIMASK, r3
}
 8015914:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	69db      	ldr	r3, [r3, #28]
 801591c:	2210      	movs	r2, #16
 801591e:	4013      	ands	r3, r2
 8015920:	2b10      	cmp	r3, #16
 8015922:	d103      	bne.n	801592c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2210      	movs	r2, #16
 801592a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	225c      	movs	r2, #92	@ 0x5c
 8015930:	5a9a      	ldrh	r2, [r3, r2]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	0011      	movs	r1, r2
 8015936:	0018      	movs	r0, r3
 8015938:	f7fe fe66 	bl	8014608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801593c:	e00c      	b.n	8015958 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	0018      	movs	r0, r3
 8015942:	f7ee fb7d 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 8015946:	e007      	b.n	8015958 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	699a      	ldr	r2, [r3, #24]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2108      	movs	r1, #8
 8015954:	430a      	orrs	r2, r1
 8015956:	619a      	str	r2, [r3, #24]
}
 8015958:	46c0      	nop			@ (mov r8, r8)
 801595a:	46bd      	mov	sp, r7
 801595c:	b010      	add	sp, #64	@ 0x40
 801595e:	bd80      	pop	{r7, pc}
 8015960:	fffffedf 	.word	0xfffffedf

08015964 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b09c      	sub	sp, #112	@ 0x70
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801596c:	236a      	movs	r3, #106	@ 0x6a
 801596e:	18fb      	adds	r3, r7, r3
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	2160      	movs	r1, #96	@ 0x60
 8015974:	5a52      	ldrh	r2, [r2, r1]
 8015976:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	69db      	ldr	r3, [r3, #28]
 801597e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2288      	movs	r2, #136	@ 0x88
 8015994:	589b      	ldr	r3, [r3, r2]
 8015996:	2b22      	cmp	r3, #34	@ 0x22
 8015998:	d000      	beq.n	801599c <UART_RxISR_8BIT_FIFOEN+0x38>
 801599a:	e141      	b.n	8015c20 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801599c:	235e      	movs	r3, #94	@ 0x5e
 801599e:	18fb      	adds	r3, r7, r3
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	2168      	movs	r1, #104	@ 0x68
 80159a4:	5a52      	ldrh	r2, [r2, r1]
 80159a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80159a8:	e0e8      	b.n	8015b7c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159b0:	215c      	movs	r1, #92	@ 0x5c
 80159b2:	187b      	adds	r3, r7, r1
 80159b4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80159b6:	187b      	adds	r3, r7, r1
 80159b8:	881b      	ldrh	r3, [r3, #0]
 80159ba:	b2da      	uxtb	r2, r3
 80159bc:	236a      	movs	r3, #106	@ 0x6a
 80159be:	18fb      	adds	r3, r7, r3
 80159c0:	881b      	ldrh	r3, [r3, #0]
 80159c2:	b2d9      	uxtb	r1, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159c8:	400a      	ands	r2, r1
 80159ca:	b2d2      	uxtb	r2, r2
 80159cc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159d2:	1c5a      	adds	r2, r3, #1
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	225e      	movs	r2, #94	@ 0x5e
 80159dc:	5a9b      	ldrh	r3, [r3, r2]
 80159de:	b29b      	uxth	r3, r3
 80159e0:	3b01      	subs	r3, #1
 80159e2:	b299      	uxth	r1, r3
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	225e      	movs	r2, #94	@ 0x5e
 80159e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	69db      	ldr	r3, [r3, #28]
 80159f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80159f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159f4:	2207      	movs	r2, #7
 80159f6:	4013      	ands	r3, r2
 80159f8:	d049      	beq.n	8015a8e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80159fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80159fc:	2201      	movs	r2, #1
 80159fe:	4013      	ands	r3, r2
 8015a00:	d010      	beq.n	8015a24 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8015a02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015a04:	2380      	movs	r3, #128	@ 0x80
 8015a06:	005b      	lsls	r3, r3, #1
 8015a08:	4013      	ands	r3, r2
 8015a0a:	d00b      	beq.n	8015a24 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	2201      	movs	r2, #1
 8015a12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	228c      	movs	r2, #140	@ 0x8c
 8015a18:	589b      	ldr	r3, [r3, r2]
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	431a      	orrs	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	218c      	movs	r1, #140	@ 0x8c
 8015a22:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a26:	2202      	movs	r2, #2
 8015a28:	4013      	ands	r3, r2
 8015a2a:	d00f      	beq.n	8015a4c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8015a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015a2e:	2201      	movs	r2, #1
 8015a30:	4013      	ands	r3, r2
 8015a32:	d00b      	beq.n	8015a4c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	2202      	movs	r2, #2
 8015a3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	228c      	movs	r2, #140	@ 0x8c
 8015a40:	589b      	ldr	r3, [r3, r2]
 8015a42:	2204      	movs	r2, #4
 8015a44:	431a      	orrs	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	218c      	movs	r1, #140	@ 0x8c
 8015a4a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015a4e:	2204      	movs	r2, #4
 8015a50:	4013      	ands	r3, r2
 8015a52:	d00f      	beq.n	8015a74 <UART_RxISR_8BIT_FIFOEN+0x110>
 8015a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015a56:	2201      	movs	r2, #1
 8015a58:	4013      	ands	r3, r2
 8015a5a:	d00b      	beq.n	8015a74 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	2204      	movs	r2, #4
 8015a62:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	228c      	movs	r2, #140	@ 0x8c
 8015a68:	589b      	ldr	r3, [r3, r2]
 8015a6a:	2202      	movs	r2, #2
 8015a6c:	431a      	orrs	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	218c      	movs	r1, #140	@ 0x8c
 8015a72:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	228c      	movs	r2, #140	@ 0x8c
 8015a78:	589b      	ldr	r3, [r3, r2]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d007      	beq.n	8015a8e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	0018      	movs	r0, r3
 8015a82:	f7ee fac7 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	228c      	movs	r2, #140	@ 0x8c
 8015a8a:	2100      	movs	r1, #0
 8015a8c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	225e      	movs	r2, #94	@ 0x5e
 8015a92:	5a9b      	ldrh	r3, [r3, r2]
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d170      	bne.n	8015b7c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8015a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8015aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aaa:	f383 8810 	msr	PRIMASK, r3
}
 8015aae:	46c0      	nop			@ (mov r8, r8)
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	681a      	ldr	r2, [r3, #0]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	495f      	ldr	r1, [pc, #380]	@ (8015c38 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8015abc:	400a      	ands	r2, r1
 8015abe:	601a      	str	r2, [r3, #0]
 8015ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ac6:	f383 8810 	msr	PRIMASK, r3
}
 8015aca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015acc:	f3ef 8310 	mrs	r3, PRIMASK
 8015ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8015ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015adc:	f383 8810 	msr	PRIMASK, r3
}
 8015ae0:	46c0      	nop			@ (mov r8, r8)
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	689a      	ldr	r2, [r3, #8]
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4953      	ldr	r1, [pc, #332]	@ (8015c3c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8015aee:	400a      	ands	r2, r1
 8015af0:	609a      	str	r2, [r3, #8]
 8015af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015af4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015af8:	f383 8810 	msr	PRIMASK, r3
}
 8015afc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2288      	movs	r2, #136	@ 0x88
 8015b02:	2120      	movs	r1, #32
 8015b04:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b10:	2b01      	cmp	r3, #1
 8015b12:	d12f      	bne.n	8015b74 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2200      	movs	r2, #0
 8015b18:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8015b1e:	623b      	str	r3, [r7, #32]
  return(result);
 8015b20:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8015b24:	2301      	movs	r3, #1
 8015b26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b2a:	f383 8810 	msr	PRIMASK, r3
}
 8015b2e:	46c0      	nop			@ (mov r8, r8)
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2110      	movs	r1, #16
 8015b3c:	438a      	bics	r2, r1
 8015b3e:	601a      	str	r2, [r3, #0]
 8015b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b46:	f383 8810 	msr	PRIMASK, r3
}
 8015b4a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	69db      	ldr	r3, [r3, #28]
 8015b52:	2210      	movs	r2, #16
 8015b54:	4013      	ands	r3, r2
 8015b56:	2b10      	cmp	r3, #16
 8015b58:	d103      	bne.n	8015b62 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2210      	movs	r2, #16
 8015b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	225c      	movs	r2, #92	@ 0x5c
 8015b66:	5a9a      	ldrh	r2, [r3, r2]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	0011      	movs	r1, r2
 8015b6c:	0018      	movs	r0, r3
 8015b6e:	f7fe fd4b 	bl	8014608 <HAL_UARTEx_RxEventCallback>
 8015b72:	e003      	b.n	8015b7c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	0018      	movs	r0, r3
 8015b78:	f7ee fa62 	bl	8004040 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015b7c:	235e      	movs	r3, #94	@ 0x5e
 8015b7e:	18fb      	adds	r3, r7, r3
 8015b80:	881b      	ldrh	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d004      	beq.n	8015b90 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8015b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b88:	2220      	movs	r2, #32
 8015b8a:	4013      	ands	r3, r2
 8015b8c:	d000      	beq.n	8015b90 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8015b8e:	e70c      	b.n	80159aa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015b90:	204e      	movs	r0, #78	@ 0x4e
 8015b92:	183b      	adds	r3, r7, r0
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	215e      	movs	r1, #94	@ 0x5e
 8015b98:	5a52      	ldrh	r2, [r2, r1]
 8015b9a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015b9c:	0001      	movs	r1, r0
 8015b9e:	187b      	adds	r3, r7, r1
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d044      	beq.n	8015c30 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2268      	movs	r2, #104	@ 0x68
 8015baa:	5a9b      	ldrh	r3, [r3, r2]
 8015bac:	187a      	adds	r2, r7, r1
 8015bae:	8812      	ldrh	r2, [r2, #0]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d23d      	bcs.n	8015c30 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8015bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8015bba:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	f383 8810 	msr	PRIMASK, r3
}
 8015bc8:	46c0      	nop			@ (mov r8, r8)
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	689a      	ldr	r2, [r3, #8]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	491a      	ldr	r1, [pc, #104]	@ (8015c40 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8015bd6:	400a      	ands	r2, r1
 8015bd8:	609a      	str	r2, [r3, #8]
 8015bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	f383 8810 	msr	PRIMASK, r3
}
 8015be4:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	4a16      	ldr	r2, [pc, #88]	@ (8015c44 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8015bea:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bec:	f3ef 8310 	mrs	r3, PRIMASK
 8015bf0:	617b      	str	r3, [r7, #20]
  return(result);
 8015bf2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	f383 8810 	msr	PRIMASK, r3
}
 8015c00:	46c0      	nop			@ (mov r8, r8)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2120      	movs	r1, #32
 8015c0e:	430a      	orrs	r2, r1
 8015c10:	601a      	str	r2, [r3, #0]
 8015c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c16:	69fb      	ldr	r3, [r7, #28]
 8015c18:	f383 8810 	msr	PRIMASK, r3
}
 8015c1c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015c1e:	e007      	b.n	8015c30 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	699a      	ldr	r2, [r3, #24]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2108      	movs	r1, #8
 8015c2c:	430a      	orrs	r2, r1
 8015c2e:	619a      	str	r2, [r3, #24]
}
 8015c30:	46c0      	nop			@ (mov r8, r8)
 8015c32:	46bd      	mov	sp, r7
 8015c34:	b01c      	add	sp, #112	@ 0x70
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	fffffeff 	.word	0xfffffeff
 8015c3c:	effffffe 	.word	0xeffffffe
 8015c40:	efffffff 	.word	0xefffffff
 8015c44:	0801568d 	.word	0x0801568d

08015c48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b09e      	sub	sp, #120	@ 0x78
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015c50:	2372      	movs	r3, #114	@ 0x72
 8015c52:	18fb      	adds	r3, r7, r3
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	2160      	movs	r1, #96	@ 0x60
 8015c58:	5a52      	ldrh	r2, [r2, r1]
 8015c5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	69db      	ldr	r3, [r3, #28]
 8015c62:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2288      	movs	r2, #136	@ 0x88
 8015c78:	589b      	ldr	r3, [r3, r2]
 8015c7a:	2b22      	cmp	r3, #34	@ 0x22
 8015c7c:	d000      	beq.n	8015c80 <UART_RxISR_16BIT_FIFOEN+0x38>
 8015c7e:	e141      	b.n	8015f04 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015c80:	2366      	movs	r3, #102	@ 0x66
 8015c82:	18fb      	adds	r3, r7, r3
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	2168      	movs	r1, #104	@ 0x68
 8015c88:	5a52      	ldrh	r2, [r2, r1]
 8015c8a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015c8c:	e0e8      	b.n	8015e60 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c94:	2164      	movs	r1, #100	@ 0x64
 8015c96:	187b      	adds	r3, r7, r1
 8015c98:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c9e:	663b      	str	r3, [r7, #96]	@ 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8015ca0:	187b      	adds	r3, r7, r1
 8015ca2:	2272      	movs	r2, #114	@ 0x72
 8015ca4:	18ba      	adds	r2, r7, r2
 8015ca6:	881b      	ldrh	r3, [r3, #0]
 8015ca8:	8812      	ldrh	r2, [r2, #0]
 8015caa:	4013      	ands	r3, r2
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015cb6:	1c9a      	adds	r2, r3, #2
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	225e      	movs	r2, #94	@ 0x5e
 8015cc0:	5a9b      	ldrh	r3, [r3, r2]
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	3b01      	subs	r3, #1
 8015cc6:	b299      	uxth	r1, r3
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	225e      	movs	r2, #94	@ 0x5e
 8015ccc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	69db      	ldr	r3, [r3, #28]
 8015cd4:	677b      	str	r3, [r7, #116]	@ 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015cd8:	2207      	movs	r2, #7
 8015cda:	4013      	ands	r3, r2
 8015cdc:	d049      	beq.n	8015d72 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	4013      	ands	r3, r2
 8015ce4:	d010      	beq.n	8015d08 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8015ce6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015ce8:	2380      	movs	r3, #128	@ 0x80
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	4013      	ands	r3, r2
 8015cee:	d00b      	beq.n	8015d08 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2201      	movs	r2, #1
 8015cf6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	228c      	movs	r2, #140	@ 0x8c
 8015cfc:	589b      	ldr	r3, [r3, r2]
 8015cfe:	2201      	movs	r2, #1
 8015d00:	431a      	orrs	r2, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	218c      	movs	r1, #140	@ 0x8c
 8015d06:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015d0a:	2202      	movs	r2, #2
 8015d0c:	4013      	ands	r3, r2
 8015d0e:	d00f      	beq.n	8015d30 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8015d10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d12:	2201      	movs	r2, #1
 8015d14:	4013      	ands	r3, r2
 8015d16:	d00b      	beq.n	8015d30 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2202      	movs	r2, #2
 8015d1e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	228c      	movs	r2, #140	@ 0x8c
 8015d24:	589b      	ldr	r3, [r3, r2]
 8015d26:	2204      	movs	r2, #4
 8015d28:	431a      	orrs	r2, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	218c      	movs	r1, #140	@ 0x8c
 8015d2e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015d32:	2204      	movs	r2, #4
 8015d34:	4013      	ands	r3, r2
 8015d36:	d00f      	beq.n	8015d58 <UART_RxISR_16BIT_FIFOEN+0x110>
 8015d38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	d00b      	beq.n	8015d58 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2204      	movs	r2, #4
 8015d46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	228c      	movs	r2, #140	@ 0x8c
 8015d4c:	589b      	ldr	r3, [r3, r2]
 8015d4e:	2202      	movs	r2, #2
 8015d50:	431a      	orrs	r2, r3
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	218c      	movs	r1, #140	@ 0x8c
 8015d56:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	228c      	movs	r2, #140	@ 0x8c
 8015d5c:	589b      	ldr	r3, [r3, r2]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d007      	beq.n	8015d72 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	0018      	movs	r0, r3
 8015d66:	f7ee f955 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	228c      	movs	r2, #140	@ 0x8c
 8015d6e:	2100      	movs	r1, #0
 8015d70:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	225e      	movs	r2, #94	@ 0x5e
 8015d76:	5a9b      	ldrh	r3, [r3, r2]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d170      	bne.n	8015e60 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8015d82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015d88:	2301      	movs	r3, #1
 8015d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d8e:	f383 8810 	msr	PRIMASK, r3
}
 8015d92:	46c0      	nop			@ (mov r8, r8)
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	495f      	ldr	r1, [pc, #380]	@ (8015f1c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8015da0:	400a      	ands	r2, r1
 8015da2:	601a      	str	r2, [r3, #0]
 8015da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015daa:	f383 8810 	msr	PRIMASK, r3
}
 8015dae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015db0:	f3ef 8310 	mrs	r3, PRIMASK
 8015db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8015db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015dba:	2301      	movs	r3, #1
 8015dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015dc0:	f383 8810 	msr	PRIMASK, r3
}
 8015dc4:	46c0      	nop			@ (mov r8, r8)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	689a      	ldr	r2, [r3, #8]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4953      	ldr	r1, [pc, #332]	@ (8015f20 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8015dd2:	400a      	ands	r2, r1
 8015dd4:	609a      	str	r2, [r3, #8]
 8015dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ddc:	f383 8810 	msr	PRIMASK, r3
}
 8015de0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2288      	movs	r2, #136	@ 0x88
 8015de6:	2120      	movs	r1, #32
 8015de8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2200      	movs	r2, #0
 8015dee:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d12f      	bne.n	8015e58 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8015e02:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e06:	657b      	str	r3, [r7, #84]	@ 0x54
 8015e08:	2301      	movs	r3, #1
 8015e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e0e:	f383 8810 	msr	PRIMASK, r3
}
 8015e12:	46c0      	nop			@ (mov r8, r8)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	2110      	movs	r1, #16
 8015e20:	438a      	bics	r2, r1
 8015e22:	601a      	str	r2, [r3, #0]
 8015e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2a:	f383 8810 	msr	PRIMASK, r3
}
 8015e2e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	69db      	ldr	r3, [r3, #28]
 8015e36:	2210      	movs	r2, #16
 8015e38:	4013      	ands	r3, r2
 8015e3a:	2b10      	cmp	r3, #16
 8015e3c:	d103      	bne.n	8015e46 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2210      	movs	r2, #16
 8015e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	225c      	movs	r2, #92	@ 0x5c
 8015e4a:	5a9a      	ldrh	r2, [r3, r2]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	0011      	movs	r1, r2
 8015e50:	0018      	movs	r0, r3
 8015e52:	f7fe fbd9 	bl	8014608 <HAL_UARTEx_RxEventCallback>
 8015e56:	e003      	b.n	8015e60 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	0018      	movs	r0, r3
 8015e5c:	f7ee f8f0 	bl	8004040 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015e60:	2366      	movs	r3, #102	@ 0x66
 8015e62:	18fb      	adds	r3, r7, r3
 8015e64:	881b      	ldrh	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d004      	beq.n	8015e74 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8015e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015e6c:	2220      	movs	r2, #32
 8015e6e:	4013      	ands	r3, r2
 8015e70:	d000      	beq.n	8015e74 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8015e72:	e70c      	b.n	8015c8e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015e74:	2052      	movs	r0, #82	@ 0x52
 8015e76:	183b      	adds	r3, r7, r0
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	215e      	movs	r1, #94	@ 0x5e
 8015e7c:	5a52      	ldrh	r2, [r2, r1]
 8015e7e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015e80:	0001      	movs	r1, r0
 8015e82:	187b      	adds	r3, r7, r1
 8015e84:	881b      	ldrh	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d044      	beq.n	8015f14 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2268      	movs	r2, #104	@ 0x68
 8015e8e:	5a9b      	ldrh	r3, [r3, r2]
 8015e90:	187a      	adds	r2, r7, r1
 8015e92:	8812      	ldrh	r2, [r2, #0]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d23d      	bcs.n	8015f14 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e98:	f3ef 8310 	mrs	r3, PRIMASK
 8015e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	f383 8810 	msr	PRIMASK, r3
}
 8015eac:	46c0      	nop			@ (mov r8, r8)
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	689a      	ldr	r2, [r3, #8]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	491a      	ldr	r1, [pc, #104]	@ (8015f24 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8015eba:	400a      	ands	r2, r1
 8015ebc:	609a      	str	r2, [r3, #8]
 8015ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ec0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	f383 8810 	msr	PRIMASK, r3
}
 8015ec8:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	4a16      	ldr	r2, [pc, #88]	@ (8015f28 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8015ece:	671a      	str	r2, [r3, #112]	@ 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8015ed4:	61bb      	str	r3, [r7, #24]
  return(result);
 8015ed6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015eda:	2301      	movs	r3, #1
 8015edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	f383 8810 	msr	PRIMASK, r3
}
 8015ee4:	46c0      	nop			@ (mov r8, r8)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	2120      	movs	r1, #32
 8015ef2:	430a      	orrs	r2, r1
 8015ef4:	601a      	str	r2, [r3, #0]
 8015ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015efa:	6a3b      	ldr	r3, [r7, #32]
 8015efc:	f383 8810 	msr	PRIMASK, r3
}
 8015f00:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015f02:	e007      	b.n	8015f14 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	699a      	ldr	r2, [r3, #24]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	2108      	movs	r1, #8
 8015f10:	430a      	orrs	r2, r1
 8015f12:	619a      	str	r2, [r3, #24]
}
 8015f14:	46c0      	nop			@ (mov r8, r8)
 8015f16:	46bd      	mov	sp, r7
 8015f18:	b01e      	add	sp, #120	@ 0x78
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	fffffeff 	.word	0xfffffeff
 8015f20:	effffffe 	.word	0xeffffffe
 8015f24:	efffffff 	.word	0xefffffff
 8015f28:	080157f9 	.word	0x080157f9

08015f2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015f34:	46c0      	nop			@ (mov r8, r8)
 8015f36:	46bd      	mov	sp, r7
 8015f38:	b002      	add	sp, #8
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015f44:	46c0      	nop			@ (mov r8, r8)
 8015f46:	46bd      	mov	sp, r7
 8015f48:	b002      	add	sp, #8
 8015f4a:	bd80      	pop	{r7, pc}

08015f4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b082      	sub	sp, #8
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015f54:	46c0      	nop			@ (mov r8, r8)
 8015f56:	46bd      	mov	sp, r7
 8015f58:	b002      	add	sp, #8
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2280      	movs	r2, #128	@ 0x80
 8015f68:	5c9b      	ldrb	r3, [r3, r2]
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d101      	bne.n	8015f72 <HAL_UARTEx_DisableFifoMode+0x16>
 8015f6e:	2302      	movs	r3, #2
 8015f70:	e027      	b.n	8015fc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2280      	movs	r2, #128	@ 0x80
 8015f76:	2101      	movs	r1, #1
 8015f78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2284      	movs	r2, #132	@ 0x84
 8015f7e:	2124      	movs	r1, #36	@ 0x24
 8015f80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	681a      	ldr	r2, [r3, #0]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2101      	movs	r1, #1
 8015f96:	438a      	bics	r2, r1
 8015f98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8015fcc <HAL_UARTEx_DisableFifoMode+0x70>)
 8015f9e:	4013      	ands	r3, r2
 8015fa0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	68fa      	ldr	r2, [r7, #12]
 8015fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2284      	movs	r2, #132	@ 0x84
 8015fb4:	2120      	movs	r1, #32
 8015fb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2280      	movs	r2, #128	@ 0x80
 8015fbc:	2100      	movs	r1, #0
 8015fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015fc0:	2300      	movs	r3, #0
}
 8015fc2:	0018      	movs	r0, r3
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	b004      	add	sp, #16
 8015fc8:	bd80      	pop	{r7, pc}
 8015fca:	46c0      	nop			@ (mov r8, r8)
 8015fcc:	dfffffff 	.word	0xdfffffff

08015fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b084      	sub	sp, #16
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2280      	movs	r2, #128	@ 0x80
 8015fde:	5c9b      	ldrb	r3, [r3, r2]
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	d101      	bne.n	8015fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015fe4:	2302      	movs	r3, #2
 8015fe6:	e02e      	b.n	8016046 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2280      	movs	r2, #128	@ 0x80
 8015fec:	2101      	movs	r1, #1
 8015fee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2284      	movs	r2, #132	@ 0x84
 8015ff4:	2124      	movs	r1, #36	@ 0x24
 8015ff6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	681a      	ldr	r2, [r3, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2101      	movs	r1, #1
 801600c:	438a      	bics	r2, r1
 801600e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	00db      	lsls	r3, r3, #3
 8016018:	08d9      	lsrs	r1, r3, #3
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	430a      	orrs	r2, r1
 8016022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	0018      	movs	r0, r3
 8016028:	f000 f854 	bl	80160d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2284      	movs	r2, #132	@ 0x84
 8016038:	2120      	movs	r1, #32
 801603a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2280      	movs	r2, #128	@ 0x80
 8016040:	2100      	movs	r1, #0
 8016042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016044:	2300      	movs	r3, #0
}
 8016046:	0018      	movs	r0, r3
 8016048:	46bd      	mov	sp, r7
 801604a:	b004      	add	sp, #16
 801604c:	bd80      	pop	{r7, pc}
	...

08016050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b084      	sub	sp, #16
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2280      	movs	r2, #128	@ 0x80
 801605e:	5c9b      	ldrb	r3, [r3, r2]
 8016060:	2b01      	cmp	r3, #1
 8016062:	d101      	bne.n	8016068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016064:	2302      	movs	r3, #2
 8016066:	e02f      	b.n	80160c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2280      	movs	r2, #128	@ 0x80
 801606c:	2101      	movs	r1, #1
 801606e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2284      	movs	r2, #132	@ 0x84
 8016074:	2124      	movs	r1, #36	@ 0x24
 8016076:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2101      	movs	r1, #1
 801608c:	438a      	bics	r2, r1
 801608e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	689b      	ldr	r3, [r3, #8]
 8016096:	4a0e      	ldr	r2, [pc, #56]	@ (80160d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8016098:	4013      	ands	r3, r2
 801609a:	0019      	movs	r1, r3
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	683a      	ldr	r2, [r7, #0]
 80160a2:	430a      	orrs	r2, r1
 80160a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	0018      	movs	r0, r3
 80160aa:	f000 f813 	bl	80160d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	68fa      	ldr	r2, [r7, #12]
 80160b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2284      	movs	r2, #132	@ 0x84
 80160ba:	2120      	movs	r1, #32
 80160bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2280      	movs	r2, #128	@ 0x80
 80160c2:	2100      	movs	r1, #0
 80160c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80160c6:	2300      	movs	r3, #0
}
 80160c8:	0018      	movs	r0, r3
 80160ca:	46bd      	mov	sp, r7
 80160cc:	b004      	add	sp, #16
 80160ce:	bd80      	pop	{r7, pc}
 80160d0:	f1ffffff 	.word	0xf1ffffff

080160d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80160d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d108      	bne.n	80160f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	226a      	movs	r2, #106	@ 0x6a
 80160e8:	2101      	movs	r1, #1
 80160ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2268      	movs	r2, #104	@ 0x68
 80160f0:	2101      	movs	r1, #1
 80160f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80160f4:	e043      	b.n	801617e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80160f6:	260f      	movs	r6, #15
 80160f8:	19bb      	adds	r3, r7, r6
 80160fa:	2208      	movs	r2, #8
 80160fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80160fe:	200e      	movs	r0, #14
 8016100:	183b      	adds	r3, r7, r0
 8016102:	2208      	movs	r2, #8
 8016104:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	0e5b      	lsrs	r3, r3, #25
 801610e:	b2da      	uxtb	r2, r3
 8016110:	240d      	movs	r4, #13
 8016112:	193b      	adds	r3, r7, r4
 8016114:	2107      	movs	r1, #7
 8016116:	400a      	ands	r2, r1
 8016118:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	689b      	ldr	r3, [r3, #8]
 8016120:	0f5b      	lsrs	r3, r3, #29
 8016122:	b2da      	uxtb	r2, r3
 8016124:	250c      	movs	r5, #12
 8016126:	197b      	adds	r3, r7, r5
 8016128:	2107      	movs	r1, #7
 801612a:	400a      	ands	r2, r1
 801612c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801612e:	183b      	adds	r3, r7, r0
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	197a      	adds	r2, r7, r5
 8016134:	7812      	ldrb	r2, [r2, #0]
 8016136:	4914      	ldr	r1, [pc, #80]	@ (8016188 <UARTEx_SetNbDataToProcess+0xb4>)
 8016138:	5c8a      	ldrb	r2, [r1, r2]
 801613a:	435a      	muls	r2, r3
 801613c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801613e:	197b      	adds	r3, r7, r5
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	4a12      	ldr	r2, [pc, #72]	@ (801618c <UARTEx_SetNbDataToProcess+0xb8>)
 8016144:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016146:	0019      	movs	r1, r3
 8016148:	f7ea f878 	bl	800023c <__divsi3>
 801614c:	0003      	movs	r3, r0
 801614e:	b299      	uxth	r1, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	226a      	movs	r2, #106	@ 0x6a
 8016154:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016156:	19bb      	adds	r3, r7, r6
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	193a      	adds	r2, r7, r4
 801615c:	7812      	ldrb	r2, [r2, #0]
 801615e:	490a      	ldr	r1, [pc, #40]	@ (8016188 <UARTEx_SetNbDataToProcess+0xb4>)
 8016160:	5c8a      	ldrb	r2, [r1, r2]
 8016162:	435a      	muls	r2, r3
 8016164:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8016166:	193b      	adds	r3, r7, r4
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	4a08      	ldr	r2, [pc, #32]	@ (801618c <UARTEx_SetNbDataToProcess+0xb8>)
 801616c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801616e:	0019      	movs	r1, r3
 8016170:	f7ea f864 	bl	800023c <__divsi3>
 8016174:	0003      	movs	r3, r0
 8016176:	b299      	uxth	r1, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2268      	movs	r2, #104	@ 0x68
 801617c:	5299      	strh	r1, [r3, r2]
}
 801617e:	46c0      	nop			@ (mov r8, r8)
 8016180:	46bd      	mov	sp, r7
 8016182:	b005      	add	sp, #20
 8016184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016186:	46c0      	nop			@ (mov r8, r8)
 8016188:	0801a198 	.word	0x0801a198
 801618c:	0801a1a0 	.word	0x0801a1a0

08016190 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8016194:	4a08      	ldr	r2, [pc, #32]	@ (80161b8 <MX_FATFS_Init+0x28>)
 8016196:	4b09      	ldr	r3, [pc, #36]	@ (80161bc <MX_FATFS_Init+0x2c>)
 8016198:	0011      	movs	r1, r2
 801619a:	0018      	movs	r0, r3
 801619c:	f002 ff46 	bl	801902c <FATFS_LinkDriver>
 80161a0:	1e03      	subs	r3, r0, #0
 80161a2:	d002      	beq.n	80161aa <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80161a4:	2301      	movs	r3, #1
 80161a6:	425b      	negs	r3, r3
 80161a8:	e003      	b.n	80161b2 <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80161aa:	4b05      	ldr	r3, [pc, #20]	@ (80161c0 <MX_FATFS_Init+0x30>)
 80161ac:	2201      	movs	r2, #1
 80161ae:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80161b0:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80161b2:	0018      	movs	r0, r3
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd80      	pop	{r7, pc}
 80161b8:	20003608 	.word	0x20003608
 80161bc:	20000554 	.word	0x20000554
 80161c0:	2000360c 	.word	0x2000360c

080161c4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80161c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80161ca:	0018      	movs	r0, r3
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	0002      	movs	r2, r0
 80161d8:	1dfb      	adds	r3, r7, #7
 80161da:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80161dc:	1dfb      	adds	r3, r7, #7
 80161de:	781b      	ldrb	r3, [r3, #0]
 80161e0:	0018      	movs	r0, r3
 80161e2:	f7ed fb2f 	bl	8003844 <SD_disk_initialize>
 80161e6:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80161e8:	0018      	movs	r0, r3
 80161ea:	46bd      	mov	sp, r7
 80161ec:	b002      	add	sp, #8
 80161ee:	bd80      	pop	{r7, pc}

080161f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	0002      	movs	r2, r0
 80161f8:	1dfb      	adds	r3, r7, #7
 80161fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80161fc:	1dfb      	adds	r3, r7, #7
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	0018      	movs	r0, r3
 8016202:	f7ed fc2d 	bl	8003a60 <SD_disk_status>
 8016206:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8016208:	0018      	movs	r0, r3
 801620a:	46bd      	mov	sp, r7
 801620c:	b002      	add	sp, #8
 801620e:	bd80      	pop	{r7, pc}

08016210 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8016210:	b5b0      	push	{r4, r5, r7, lr}
 8016212:	b084      	sub	sp, #16
 8016214:	af00      	add	r7, sp, #0
 8016216:	60b9      	str	r1, [r7, #8]
 8016218:	607a      	str	r2, [r7, #4]
 801621a:	603b      	str	r3, [r7, #0]
 801621c:	250f      	movs	r5, #15
 801621e:	197b      	adds	r3, r7, r5
 8016220:	1c02      	adds	r2, r0, #0
 8016222:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8016224:	683c      	ldr	r4, [r7, #0]
 8016226:	687a      	ldr	r2, [r7, #4]
 8016228:	68b9      	ldr	r1, [r7, #8]
 801622a:	197b      	adds	r3, r7, r5
 801622c:	7818      	ldrb	r0, [r3, #0]
 801622e:	0023      	movs	r3, r4
 8016230:	f7ed fc2c 	bl	8003a8c <SD_disk_read>
 8016234:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8016236:	0018      	movs	r0, r3
 8016238:	46bd      	mov	sp, r7
 801623a:	b004      	add	sp, #16
 801623c:	bdb0      	pop	{r4, r5, r7, pc}

0801623e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801623e:	b5b0      	push	{r4, r5, r7, lr}
 8016240:	b084      	sub	sp, #16
 8016242:	af00      	add	r7, sp, #0
 8016244:	60b9      	str	r1, [r7, #8]
 8016246:	607a      	str	r2, [r7, #4]
 8016248:	603b      	str	r3, [r7, #0]
 801624a:	250f      	movs	r5, #15
 801624c:	197b      	adds	r3, r7, r5
 801624e:	1c02      	adds	r2, r0, #0
 8016250:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8016252:	683c      	ldr	r4, [r7, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	68b9      	ldr	r1, [r7, #8]
 8016258:	197b      	adds	r3, r7, r5
 801625a:	7818      	ldrb	r0, [r3, #0]
 801625c:	0023      	movs	r3, r4
 801625e:	f7ed fc85 	bl	8003b6c <SD_disk_write>
 8016262:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8016264:	0018      	movs	r0, r3
 8016266:	46bd      	mov	sp, r7
 8016268:	b004      	add	sp, #16
 801626a:	bdb0      	pop	{r4, r5, r7, pc}

0801626c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
 8016272:	603a      	str	r2, [r7, #0]
 8016274:	1dfb      	adds	r3, r7, #7
 8016276:	1c02      	adds	r2, r0, #0
 8016278:	701a      	strb	r2, [r3, #0]
 801627a:	1dbb      	adds	r3, r7, #6
 801627c:	1c0a      	adds	r2, r1, #0
 801627e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	1dbb      	adds	r3, r7, #6
 8016284:	7819      	ldrb	r1, [r3, #0]
 8016286:	1dfb      	adds	r3, r7, #7
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	0018      	movs	r0, r3
 801628c:	f7ed fcf6 	bl	8003c7c <SD_disk_ioctl>
 8016290:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8016292:	0018      	movs	r0, r3
 8016294:	46bd      	mov	sp, r7
 8016296:	b002      	add	sp, #8
 8016298:	bd80      	pop	{r7, pc}
	...

0801629c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801629c:	b5b0      	push	{r4, r5, r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	0002      	movs	r2, r0
 80162a4:	1dfb      	adds	r3, r7, #7
 80162a6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80162a8:	1dfb      	adds	r3, r7, #7
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	4a0b      	ldr	r2, [pc, #44]	@ (80162dc <disk_status+0x40>)
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	18d3      	adds	r3, r2, r3
 80162b2:	3304      	adds	r3, #4
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	1dfa      	adds	r2, r7, #7
 80162ba:	7812      	ldrb	r2, [r2, #0]
 80162bc:	4907      	ldr	r1, [pc, #28]	@ (80162dc <disk_status+0x40>)
 80162be:	188a      	adds	r2, r1, r2
 80162c0:	7a12      	ldrb	r2, [r2, #8]
 80162c2:	250f      	movs	r5, #15
 80162c4:	197c      	adds	r4, r7, r5
 80162c6:	0010      	movs	r0, r2
 80162c8:	4798      	blx	r3
 80162ca:	0003      	movs	r3, r0
 80162cc:	7023      	strb	r3, [r4, #0]
  return stat;
 80162ce:	197b      	adds	r3, r7, r5
 80162d0:	781b      	ldrb	r3, [r3, #0]
}
 80162d2:	0018      	movs	r0, r3
 80162d4:	46bd      	mov	sp, r7
 80162d6:	b004      	add	sp, #16
 80162d8:	bdb0      	pop	{r4, r5, r7, pc}
 80162da:	46c0      	nop			@ (mov r8, r8)
 80162dc:	20003638 	.word	0x20003638

080162e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80162e0:	b590      	push	{r4, r7, lr}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	0002      	movs	r2, r0
 80162e8:	1dfb      	adds	r3, r7, #7
 80162ea:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80162ec:	200f      	movs	r0, #15
 80162ee:	183b      	adds	r3, r7, r0
 80162f0:	2200      	movs	r2, #0
 80162f2:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80162f4:	1dfb      	adds	r3, r7, #7
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	4a10      	ldr	r2, [pc, #64]	@ (801633c <disk_initialize+0x5c>)
 80162fa:	5cd3      	ldrb	r3, [r2, r3]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d116      	bne.n	801632e <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8016300:	1dfb      	adds	r3, r7, #7
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	4a0d      	ldr	r2, [pc, #52]	@ (801633c <disk_initialize+0x5c>)
 8016306:	2101      	movs	r1, #1
 8016308:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801630a:	1dfb      	adds	r3, r7, #7
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	4a0b      	ldr	r2, [pc, #44]	@ (801633c <disk_initialize+0x5c>)
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	18d3      	adds	r3, r2, r3
 8016314:	3304      	adds	r3, #4
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	1dfa      	adds	r2, r7, #7
 801631c:	7812      	ldrb	r2, [r2, #0]
 801631e:	4907      	ldr	r1, [pc, #28]	@ (801633c <disk_initialize+0x5c>)
 8016320:	188a      	adds	r2, r1, r2
 8016322:	7a12      	ldrb	r2, [r2, #8]
 8016324:	183c      	adds	r4, r7, r0
 8016326:	0010      	movs	r0, r2
 8016328:	4798      	blx	r3
 801632a:	0003      	movs	r3, r0
 801632c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 801632e:	230f      	movs	r3, #15
 8016330:	18fb      	adds	r3, r7, r3
 8016332:	781b      	ldrb	r3, [r3, #0]
}
 8016334:	0018      	movs	r0, r3
 8016336:	46bd      	mov	sp, r7
 8016338:	b005      	add	sp, #20
 801633a:	bd90      	pop	{r4, r7, pc}
 801633c:	20003638 	.word	0x20003638

08016340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016342:	b087      	sub	sp, #28
 8016344:	af00      	add	r7, sp, #0
 8016346:	60b9      	str	r1, [r7, #8]
 8016348:	607a      	str	r2, [r7, #4]
 801634a:	603b      	str	r3, [r7, #0]
 801634c:	210f      	movs	r1, #15
 801634e:	187b      	adds	r3, r7, r1
 8016350:	1c02      	adds	r2, r0, #0
 8016352:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016354:	187b      	adds	r3, r7, r1
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	4a0c      	ldr	r2, [pc, #48]	@ (801638c <disk_read+0x4c>)
 801635a:	009b      	lsls	r3, r3, #2
 801635c:	18d3      	adds	r3, r2, r3
 801635e:	3304      	adds	r3, #4
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	689d      	ldr	r5, [r3, #8]
 8016364:	187b      	adds	r3, r7, r1
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	4a08      	ldr	r2, [pc, #32]	@ (801638c <disk_read+0x4c>)
 801636a:	18d3      	adds	r3, r2, r3
 801636c:	7a18      	ldrb	r0, [r3, #8]
 801636e:	2617      	movs	r6, #23
 8016370:	19bc      	adds	r4, r7, r6
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	68b9      	ldr	r1, [r7, #8]
 8016378:	47a8      	blx	r5
 801637a:	0003      	movs	r3, r0
 801637c:	7023      	strb	r3, [r4, #0]
  return res;
 801637e:	19bb      	adds	r3, r7, r6
 8016380:	781b      	ldrb	r3, [r3, #0]
}
 8016382:	0018      	movs	r0, r3
 8016384:	46bd      	mov	sp, r7
 8016386:	b007      	add	sp, #28
 8016388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801638a:	46c0      	nop			@ (mov r8, r8)
 801638c:	20003638 	.word	0x20003638

08016390 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016392:	b087      	sub	sp, #28
 8016394:	af00      	add	r7, sp, #0
 8016396:	60b9      	str	r1, [r7, #8]
 8016398:	607a      	str	r2, [r7, #4]
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	210f      	movs	r1, #15
 801639e:	187b      	adds	r3, r7, r1
 80163a0:	1c02      	adds	r2, r0, #0
 80163a2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80163a4:	187b      	adds	r3, r7, r1
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	4a0c      	ldr	r2, [pc, #48]	@ (80163dc <disk_write+0x4c>)
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	18d3      	adds	r3, r2, r3
 80163ae:	3304      	adds	r3, #4
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	68dd      	ldr	r5, [r3, #12]
 80163b4:	187b      	adds	r3, r7, r1
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	4a08      	ldr	r2, [pc, #32]	@ (80163dc <disk_write+0x4c>)
 80163ba:	18d3      	adds	r3, r2, r3
 80163bc:	7a18      	ldrb	r0, [r3, #8]
 80163be:	2617      	movs	r6, #23
 80163c0:	19bc      	adds	r4, r7, r6
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	68b9      	ldr	r1, [r7, #8]
 80163c8:	47a8      	blx	r5
 80163ca:	0003      	movs	r3, r0
 80163cc:	7023      	strb	r3, [r4, #0]
  return res;
 80163ce:	19bb      	adds	r3, r7, r6
 80163d0:	781b      	ldrb	r3, [r3, #0]
}
 80163d2:	0018      	movs	r0, r3
 80163d4:	46bd      	mov	sp, r7
 80163d6:	b007      	add	sp, #28
 80163d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163da:	46c0      	nop			@ (mov r8, r8)
 80163dc:	20003638 	.word	0x20003638

080163e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80163e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	603a      	str	r2, [r7, #0]
 80163e8:	1dfb      	adds	r3, r7, #7
 80163ea:	1c02      	adds	r2, r0, #0
 80163ec:	701a      	strb	r2, [r3, #0]
 80163ee:	1dbb      	adds	r3, r7, #6
 80163f0:	1c0a      	adds	r2, r1, #0
 80163f2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80163f4:	1dfb      	adds	r3, r7, #7
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	4a0c      	ldr	r2, [pc, #48]	@ (801642c <disk_ioctl+0x4c>)
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	18d3      	adds	r3, r2, r3
 80163fe:	3304      	adds	r3, #4
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	691b      	ldr	r3, [r3, #16]
 8016404:	1dfa      	adds	r2, r7, #7
 8016406:	7812      	ldrb	r2, [r2, #0]
 8016408:	4908      	ldr	r1, [pc, #32]	@ (801642c <disk_ioctl+0x4c>)
 801640a:	188a      	adds	r2, r1, r2
 801640c:	7a10      	ldrb	r0, [r2, #8]
 801640e:	260f      	movs	r6, #15
 8016410:	19bc      	adds	r4, r7, r6
 8016412:	683d      	ldr	r5, [r7, #0]
 8016414:	1dba      	adds	r2, r7, #6
 8016416:	7811      	ldrb	r1, [r2, #0]
 8016418:	002a      	movs	r2, r5
 801641a:	4798      	blx	r3
 801641c:	0003      	movs	r3, r0
 801641e:	7023      	strb	r3, [r4, #0]
  return res;
 8016420:	19bb      	adds	r3, r7, r6
 8016422:	781b      	ldrb	r3, [r3, #0]
}
 8016424:	0018      	movs	r0, r3
 8016426:	46bd      	mov	sp, r7
 8016428:	b005      	add	sp, #20
 801642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801642c:	20003638 	.word	0x20003638

08016430 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	3301      	adds	r3, #1
 801643c:	781a      	ldrb	r2, [r3, #0]
 801643e:	210e      	movs	r1, #14
 8016440:	187b      	adds	r3, r7, r1
 8016442:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8016444:	187b      	adds	r3, r7, r1
 8016446:	881b      	ldrh	r3, [r3, #0]
 8016448:	021b      	lsls	r3, r3, #8
 801644a:	b21a      	sxth	r2, r3
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	b21b      	sxth	r3, r3
 8016452:	4313      	orrs	r3, r2
 8016454:	b21a      	sxth	r2, r3
 8016456:	187b      	adds	r3, r7, r1
 8016458:	801a      	strh	r2, [r3, #0]
	return rv;
 801645a:	187b      	adds	r3, r7, r1
 801645c:	881b      	ldrh	r3, [r3, #0]
}
 801645e:	0018      	movs	r0, r3
 8016460:	46bd      	mov	sp, r7
 8016462:	b004      	add	sp, #16
 8016464:	bd80      	pop	{r7, pc}

08016466 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016466:	b580      	push	{r7, lr}
 8016468:	b084      	sub	sp, #16
 801646a:	af00      	add	r7, sp, #0
 801646c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	3303      	adds	r3, #3
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	021b      	lsls	r3, r3, #8
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	3202      	adds	r2, #2
 801647e:	7812      	ldrb	r2, [r2, #0]
 8016480:	4313      	orrs	r3, r2
 8016482:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	021b      	lsls	r3, r3, #8
 8016488:	687a      	ldr	r2, [r7, #4]
 801648a:	3201      	adds	r2, #1
 801648c:	7812      	ldrb	r2, [r2, #0]
 801648e:	4313      	orrs	r3, r2
 8016490:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	021b      	lsls	r3, r3, #8
 8016496:	687a      	ldr	r2, [r7, #4]
 8016498:	7812      	ldrb	r2, [r2, #0]
 801649a:	4313      	orrs	r3, r2
 801649c:	60fb      	str	r3, [r7, #12]
	return rv;
 801649e:	68fb      	ldr	r3, [r7, #12]
}
 80164a0:	0018      	movs	r0, r3
 80164a2:	46bd      	mov	sp, r7
 80164a4:	b004      	add	sp, #16
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	000a      	movs	r2, r1
 80164b2:	1cbb      	adds	r3, r7, #2
 80164b4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	1c5a      	adds	r2, r3, #1
 80164ba:	607a      	str	r2, [r7, #4]
 80164bc:	1cba      	adds	r2, r7, #2
 80164be:	8812      	ldrh	r2, [r2, #0]
 80164c0:	b2d2      	uxtb	r2, r2
 80164c2:	701a      	strb	r2, [r3, #0]
 80164c4:	1cbb      	adds	r3, r7, #2
 80164c6:	1cba      	adds	r2, r7, #2
 80164c8:	8812      	ldrh	r2, [r2, #0]
 80164ca:	0a12      	lsrs	r2, r2, #8
 80164cc:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	1c5a      	adds	r2, r3, #1
 80164d2:	607a      	str	r2, [r7, #4]
 80164d4:	1cba      	adds	r2, r7, #2
 80164d6:	8812      	ldrh	r2, [r2, #0]
 80164d8:	b2d2      	uxtb	r2, r2
 80164da:	701a      	strb	r2, [r3, #0]
}
 80164dc:	46c0      	nop			@ (mov r8, r8)
 80164de:	46bd      	mov	sp, r7
 80164e0:	b002      	add	sp, #8
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	1c5a      	adds	r2, r3, #1
 80164f2:	607a      	str	r2, [r7, #4]
 80164f4:	683a      	ldr	r2, [r7, #0]
 80164f6:	b2d2      	uxtb	r2, r2
 80164f8:	701a      	strb	r2, [r3, #0]
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	0a1b      	lsrs	r3, r3, #8
 80164fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	1c5a      	adds	r2, r3, #1
 8016504:	607a      	str	r2, [r7, #4]
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	b2d2      	uxtb	r2, r2
 801650a:	701a      	strb	r2, [r3, #0]
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	0a1b      	lsrs	r3, r3, #8
 8016510:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	1c5a      	adds	r2, r3, #1
 8016516:	607a      	str	r2, [r7, #4]
 8016518:	683a      	ldr	r2, [r7, #0]
 801651a:	b2d2      	uxtb	r2, r2
 801651c:	701a      	strb	r2, [r3, #0]
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	0a1b      	lsrs	r3, r3, #8
 8016522:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	607a      	str	r2, [r7, #4]
 801652a:	683a      	ldr	r2, [r7, #0]
 801652c:	b2d2      	uxtb	r2, r2
 801652e:	701a      	strb	r2, [r3, #0]
}
 8016530:	46c0      	nop			@ (mov r8, r8)
 8016532:	46bd      	mov	sp, r7
 8016534:	b002      	add	sp, #8
 8016536:	bd80      	pop	{r7, pc}

08016538 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016538:	b580      	push	{r7, lr}
 801653a:	b086      	sub	sp, #24
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00d      	beq.n	801656e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016552:	693a      	ldr	r2, [r7, #16]
 8016554:	1c53      	adds	r3, r2, #1
 8016556:	613b      	str	r3, [r7, #16]
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	1c59      	adds	r1, r3, #1
 801655c:	6179      	str	r1, [r7, #20]
 801655e:	7812      	ldrb	r2, [r2, #0]
 8016560:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	3b01      	subs	r3, #1
 8016566:	607b      	str	r3, [r7, #4]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d1f1      	bne.n	8016552 <mem_cpy+0x1a>
	}
}
 801656e:	46c0      	nop			@ (mov r8, r8)
 8016570:	46bd      	mov	sp, r7
 8016572:	b006      	add	sp, #24
 8016574:	bd80      	pop	{r7, pc}

08016576 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016576:	b580      	push	{r7, lr}
 8016578:	b086      	sub	sp, #24
 801657a:	af00      	add	r7, sp, #0
 801657c:	60f8      	str	r0, [r7, #12]
 801657e:	60b9      	str	r1, [r7, #8]
 8016580:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	1c5a      	adds	r2, r3, #1
 801658a:	617a      	str	r2, [r7, #20]
 801658c:	68ba      	ldr	r2, [r7, #8]
 801658e:	b2d2      	uxtb	r2, r2
 8016590:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	3b01      	subs	r3, #1
 8016596:	607b      	str	r3, [r7, #4]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d1f3      	bne.n	8016586 <mem_set+0x10>
}
 801659e:	46c0      	nop			@ (mov r8, r8)
 80165a0:	46c0      	nop			@ (mov r8, r8)
 80165a2:	46bd      	mov	sp, r7
 80165a4:	b006      	add	sp, #24
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b088      	sub	sp, #32
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	60f8      	str	r0, [r7, #12]
 80165b0:	60b9      	str	r1, [r7, #8]
 80165b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	61fb      	str	r3, [r7, #28]
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80165bc:	2300      	movs	r3, #0
 80165be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	1c5a      	adds	r2, r3, #1
 80165c4:	61fa      	str	r2, [r7, #28]
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	0019      	movs	r1, r3
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	1c5a      	adds	r2, r3, #1
 80165ce:	61ba      	str	r2, [r7, #24]
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	1acb      	subs	r3, r1, r3
 80165d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	3b01      	subs	r3, #1
 80165da:	607b      	str	r3, [r7, #4]
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d002      	beq.n	80165e8 <mem_cmp+0x40>
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d0eb      	beq.n	80165c0 <mem_cmp+0x18>

	return r;
 80165e8:	697b      	ldr	r3, [r7, #20]
}
 80165ea:	0018      	movs	r0, r3
 80165ec:	46bd      	mov	sp, r7
 80165ee:	b008      	add	sp, #32
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80165fc:	e002      	b.n	8016604 <chk_chr+0x12>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	3301      	adds	r3, #1
 8016602:	607b      	str	r3, [r7, #4]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d005      	beq.n	8016618 <chk_chr+0x26>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	001a      	movs	r2, r3
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	4293      	cmp	r3, r2
 8016616:	d1f2      	bne.n	80165fe <chk_chr+0xc>
	return *str;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	781b      	ldrb	r3, [r3, #0]
}
 801661c:	0018      	movs	r0, r3
 801661e:	46bd      	mov	sp, r7
 8016620:	b002      	add	sp, #8
 8016622:	bd80      	pop	{r7, pc}

08016624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801662e:	2300      	movs	r3, #0
 8016630:	60bb      	str	r3, [r7, #8]
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	60fb      	str	r3, [r7, #12]
 8016636:	e027      	b.n	8016688 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8016638:	4b25      	ldr	r3, [pc, #148]	@ (80166d0 <chk_lock+0xac>)
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	0112      	lsls	r2, r2, #4
 801663e:	58d3      	ldr	r3, [r2, r3]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d01c      	beq.n	801667e <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016644:	4b22      	ldr	r3, [pc, #136]	@ (80166d0 <chk_lock+0xac>)
 8016646:	68fa      	ldr	r2, [r7, #12]
 8016648:	0112      	lsls	r2, r2, #4
 801664a:	58d2      	ldr	r2, [r2, r3]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d116      	bne.n	8016682 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8016654:	4a1e      	ldr	r2, [pc, #120]	@ (80166d0 <chk_lock+0xac>)
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	011b      	lsls	r3, r3, #4
 801665a:	18d3      	adds	r3, r2, r3
 801665c:	3304      	adds	r3, #4
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016664:	429a      	cmp	r2, r3
 8016666:	d10c      	bne.n	8016682 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8016668:	4a19      	ldr	r2, [pc, #100]	@ (80166d0 <chk_lock+0xac>)
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	011b      	lsls	r3, r3, #4
 801666e:	18d3      	adds	r3, r2, r3
 8016670:	3308      	adds	r3, #8
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016678:	429a      	cmp	r2, r3
 801667a:	d102      	bne.n	8016682 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 801667c:	e007      	b.n	801668e <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 801667e:	2301      	movs	r3, #1
 8016680:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	3301      	adds	r3, #1
 8016686:	60fb      	str	r3, [r7, #12]
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d9d4      	bls.n	8016638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2b02      	cmp	r3, #2
 8016692:	d109      	bne.n	80166a8 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d102      	bne.n	80166a0 <chk_lock+0x7c>
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	2b02      	cmp	r3, #2
 801669e:	d101      	bne.n	80166a4 <chk_lock+0x80>
 80166a0:	2300      	movs	r3, #0
 80166a2:	e011      	b.n	80166c8 <chk_lock+0xa4>
 80166a4:	2312      	movs	r3, #18
 80166a6:	e00f      	b.n	80166c8 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80166a8:	683b      	ldr	r3, [r7, #0]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d109      	bne.n	80166c2 <chk_lock+0x9e>
 80166ae:	4a08      	ldr	r2, [pc, #32]	@ (80166d0 <chk_lock+0xac>)
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	011b      	lsls	r3, r3, #4
 80166b4:	18d3      	adds	r3, r2, r3
 80166b6:	330c      	adds	r3, #12
 80166b8:	881a      	ldrh	r2, [r3, #0]
 80166ba:	2380      	movs	r3, #128	@ 0x80
 80166bc:	005b      	lsls	r3, r3, #1
 80166be:	429a      	cmp	r2, r3
 80166c0:	d101      	bne.n	80166c6 <chk_lock+0xa2>
 80166c2:	2310      	movs	r3, #16
 80166c4:	e000      	b.n	80166c8 <chk_lock+0xa4>
 80166c6:	2300      	movs	r3, #0
}
 80166c8:	0018      	movs	r0, r3
 80166ca:	46bd      	mov	sp, r7
 80166cc:	b004      	add	sp, #16
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	20003618 	.word	0x20003618

080166d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80166da:	2300      	movs	r3, #0
 80166dc:	607b      	str	r3, [r7, #4]
 80166de:	e002      	b.n	80166e6 <enq_lock+0x12>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	3301      	adds	r3, #1
 80166e4:	607b      	str	r3, [r7, #4]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2b01      	cmp	r3, #1
 80166ea:	d805      	bhi.n	80166f8 <enq_lock+0x24>
 80166ec:	4b07      	ldr	r3, [pc, #28]	@ (801670c <enq_lock+0x38>)
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	0112      	lsls	r2, r2, #4
 80166f2:	58d3      	ldr	r3, [r2, r3]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d1f3      	bne.n	80166e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	3b02      	subs	r3, #2
 80166fc:	1e5a      	subs	r2, r3, #1
 80166fe:	4193      	sbcs	r3, r2
 8016700:	b2db      	uxtb	r3, r3
}
 8016702:	0018      	movs	r0, r3
 8016704:	46bd      	mov	sp, r7
 8016706:	b002      	add	sp, #8
 8016708:	bd80      	pop	{r7, pc}
 801670a:	46c0      	nop			@ (mov r8, r8)
 801670c:	20003618 	.word	0x20003618

08016710 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801671a:	2300      	movs	r3, #0
 801671c:	60fb      	str	r3, [r7, #12]
 801671e:	e01e      	b.n	801675e <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8016720:	4b3f      	ldr	r3, [pc, #252]	@ (8016820 <inc_lock+0x110>)
 8016722:	68fa      	ldr	r2, [r7, #12]
 8016724:	0112      	lsls	r2, r2, #4
 8016726:	58d2      	ldr	r2, [r2, r3]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	429a      	cmp	r2, r3
 801672e:	d113      	bne.n	8016758 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8016730:	4a3b      	ldr	r2, [pc, #236]	@ (8016820 <inc_lock+0x110>)
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	011b      	lsls	r3, r3, #4
 8016736:	18d3      	adds	r3, r2, r3
 8016738:	3304      	adds	r3, #4
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016740:	429a      	cmp	r2, r3
 8016742:	d109      	bne.n	8016758 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8016744:	4a36      	ldr	r2, [pc, #216]	@ (8016820 <inc_lock+0x110>)
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	011b      	lsls	r3, r3, #4
 801674a:	18d3      	adds	r3, r2, r3
 801674c:	3308      	adds	r3, #8
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016754:	429a      	cmp	r2, r3
 8016756:	d006      	beq.n	8016766 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	3301      	adds	r3, #1
 801675c:	60fb      	str	r3, [r7, #12]
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2b01      	cmp	r3, #1
 8016762:	d9dd      	bls.n	8016720 <inc_lock+0x10>
 8016764:	e000      	b.n	8016768 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8016766:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	2b02      	cmp	r3, #2
 801676c:	d130      	bne.n	80167d0 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801676e:	2300      	movs	r3, #0
 8016770:	60fb      	str	r3, [r7, #12]
 8016772:	e002      	b.n	801677a <inc_lock+0x6a>
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	3301      	adds	r3, #1
 8016778:	60fb      	str	r3, [r7, #12]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d805      	bhi.n	801678c <inc_lock+0x7c>
 8016780:	4b27      	ldr	r3, [pc, #156]	@ (8016820 <inc_lock+0x110>)
 8016782:	68fa      	ldr	r2, [r7, #12]
 8016784:	0112      	lsls	r2, r2, #4
 8016786:	58d3      	ldr	r3, [r2, r3]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1f3      	bne.n	8016774 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2b02      	cmp	r3, #2
 8016790:	d101      	bne.n	8016796 <inc_lock+0x86>
 8016792:	2300      	movs	r3, #0
 8016794:	e03f      	b.n	8016816 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	6819      	ldr	r1, [r3, #0]
 801679a:	4b21      	ldr	r3, [pc, #132]	@ (8016820 <inc_lock+0x110>)
 801679c:	68fa      	ldr	r2, [r7, #12]
 801679e:	0112      	lsls	r2, r2, #4
 80167a0:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	689a      	ldr	r2, [r3, #8]
 80167a6:	491e      	ldr	r1, [pc, #120]	@ (8016820 <inc_lock+0x110>)
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	011b      	lsls	r3, r3, #4
 80167ac:	18cb      	adds	r3, r1, r3
 80167ae:	3304      	adds	r3, #4
 80167b0:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	695a      	ldr	r2, [r3, #20]
 80167b6:	491a      	ldr	r1, [pc, #104]	@ (8016820 <inc_lock+0x110>)
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	011b      	lsls	r3, r3, #4
 80167bc:	18cb      	adds	r3, r1, r3
 80167be:	3308      	adds	r3, #8
 80167c0:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80167c2:	4a17      	ldr	r2, [pc, #92]	@ (8016820 <inc_lock+0x110>)
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	011b      	lsls	r3, r3, #4
 80167c8:	18d3      	adds	r3, r2, r3
 80167ca:	330c      	adds	r3, #12
 80167cc:	2200      	movs	r2, #0
 80167ce:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d009      	beq.n	80167ea <inc_lock+0xda>
 80167d6:	4a12      	ldr	r2, [pc, #72]	@ (8016820 <inc_lock+0x110>)
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	011b      	lsls	r3, r3, #4
 80167dc:	18d3      	adds	r3, r2, r3
 80167de:	330c      	adds	r3, #12
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d001      	beq.n	80167ea <inc_lock+0xda>
 80167e6:	2300      	movs	r3, #0
 80167e8:	e015      	b.n	8016816 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d108      	bne.n	8016802 <inc_lock+0xf2>
 80167f0:	4a0b      	ldr	r2, [pc, #44]	@ (8016820 <inc_lock+0x110>)
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	011b      	lsls	r3, r3, #4
 80167f6:	18d3      	adds	r3, r2, r3
 80167f8:	330c      	adds	r3, #12
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	3301      	adds	r3, #1
 80167fe:	b29b      	uxth	r3, r3
 8016800:	e001      	b.n	8016806 <inc_lock+0xf6>
 8016802:	2380      	movs	r3, #128	@ 0x80
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4906      	ldr	r1, [pc, #24]	@ (8016820 <inc_lock+0x110>)
 8016808:	68fa      	ldr	r2, [r7, #12]
 801680a:	0112      	lsls	r2, r2, #4
 801680c:	188a      	adds	r2, r1, r2
 801680e:	320c      	adds	r2, #12
 8016810:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	3301      	adds	r3, #1
}
 8016816:	0018      	movs	r0, r3
 8016818:	46bd      	mov	sp, r7
 801681a:	b004      	add	sp, #16
 801681c:	bd80      	pop	{r7, pc}
 801681e:	46c0      	nop			@ (mov r8, r8)
 8016820:	20003618 	.word	0x20003618

08016824 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	3b01      	subs	r3, #1
 8016830:	607b      	str	r3, [r7, #4]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2b01      	cmp	r3, #1
 8016836:	d832      	bhi.n	801689e <dec_lock+0x7a>
		n = Files[i].ctr;
 8016838:	200e      	movs	r0, #14
 801683a:	183b      	adds	r3, r7, r0
 801683c:	491d      	ldr	r1, [pc, #116]	@ (80168b4 <dec_lock+0x90>)
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	0112      	lsls	r2, r2, #4
 8016842:	188a      	adds	r2, r1, r2
 8016844:	320c      	adds	r2, #12
 8016846:	8812      	ldrh	r2, [r2, #0]
 8016848:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801684a:	183b      	adds	r3, r7, r0
 801684c:	881a      	ldrh	r2, [r3, #0]
 801684e:	2380      	movs	r3, #128	@ 0x80
 8016850:	005b      	lsls	r3, r3, #1
 8016852:	429a      	cmp	r2, r3
 8016854:	d102      	bne.n	801685c <dec_lock+0x38>
 8016856:	183b      	adds	r3, r7, r0
 8016858:	2200      	movs	r2, #0
 801685a:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 801685c:	210e      	movs	r1, #14
 801685e:	187b      	adds	r3, r7, r1
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d004      	beq.n	8016870 <dec_lock+0x4c>
 8016866:	187b      	adds	r3, r7, r1
 8016868:	881a      	ldrh	r2, [r3, #0]
 801686a:	187b      	adds	r3, r7, r1
 801686c:	3a01      	subs	r2, #1
 801686e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8016870:	4a10      	ldr	r2, [pc, #64]	@ (80168b4 <dec_lock+0x90>)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	011b      	lsls	r3, r3, #4
 8016876:	18d3      	adds	r3, r2, r3
 8016878:	330c      	adds	r3, #12
 801687a:	210e      	movs	r1, #14
 801687c:	187a      	adds	r2, r7, r1
 801687e:	8812      	ldrh	r2, [r2, #0]
 8016880:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016882:	187b      	adds	r3, r7, r1
 8016884:	881b      	ldrh	r3, [r3, #0]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d104      	bne.n	8016894 <dec_lock+0x70>
 801688a:	4b0a      	ldr	r3, [pc, #40]	@ (80168b4 <dec_lock+0x90>)
 801688c:	687a      	ldr	r2, [r7, #4]
 801688e:	0112      	lsls	r2, r2, #4
 8016890:	2100      	movs	r1, #0
 8016892:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8016894:	230d      	movs	r3, #13
 8016896:	18fb      	adds	r3, r7, r3
 8016898:	2200      	movs	r2, #0
 801689a:	701a      	strb	r2, [r3, #0]
 801689c:	e003      	b.n	80168a6 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801689e:	230d      	movs	r3, #13
 80168a0:	18fb      	adds	r3, r7, r3
 80168a2:	2202      	movs	r2, #2
 80168a4:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80168a6:	230d      	movs	r3, #13
 80168a8:	18fb      	adds	r3, r7, r3
 80168aa:	781b      	ldrb	r3, [r3, #0]
}
 80168ac:	0018      	movs	r0, r3
 80168ae:	46bd      	mov	sp, r7
 80168b0:	b004      	add	sp, #16
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	20003618 	.word	0x20003618

080168b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80168c0:	2300      	movs	r3, #0
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	e00e      	b.n	80168e4 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80168c6:	4b0b      	ldr	r3, [pc, #44]	@ (80168f4 <clear_lock+0x3c>)
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	0112      	lsls	r2, r2, #4
 80168cc:	58d3      	ldr	r3, [r2, r3]
 80168ce:	687a      	ldr	r2, [r7, #4]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d104      	bne.n	80168de <clear_lock+0x26>
 80168d4:	4b07      	ldr	r3, [pc, #28]	@ (80168f4 <clear_lock+0x3c>)
 80168d6:	68fa      	ldr	r2, [r7, #12]
 80168d8:	0112      	lsls	r2, r2, #4
 80168da:	2100      	movs	r1, #0
 80168dc:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	3301      	adds	r3, #1
 80168e2:	60fb      	str	r3, [r7, #12]
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2b01      	cmp	r3, #1
 80168e8:	d9ed      	bls.n	80168c6 <clear_lock+0xe>
	}
}
 80168ea:	46c0      	nop			@ (mov r8, r8)
 80168ec:	46c0      	nop			@ (mov r8, r8)
 80168ee:	46bd      	mov	sp, r7
 80168f0:	b004      	add	sp, #16
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	20003618 	.word	0x20003618

080168f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80168f8:	b590      	push	{r4, r7, lr}
 80168fa:	b087      	sub	sp, #28
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016900:	240f      	movs	r4, #15
 8016902:	193b      	adds	r3, r7, r4
 8016904:	2200      	movs	r2, #0
 8016906:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	78db      	ldrb	r3, [r3, #3]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d034      	beq.n	801697a <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	7858      	ldrb	r0, [r3, #1]
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	3334      	adds	r3, #52	@ 0x34
 801691e:	0019      	movs	r1, r3
 8016920:	697a      	ldr	r2, [r7, #20]
 8016922:	2301      	movs	r3, #1
 8016924:	f7ff fd34 	bl	8016390 <disk_write>
 8016928:	1e03      	subs	r3, r0, #0
 801692a:	d003      	beq.n	8016934 <sync_window+0x3c>
			res = FR_DISK_ERR;
 801692c:	193b      	adds	r3, r7, r4
 801692e:	2201      	movs	r2, #1
 8016930:	701a      	strb	r2, [r3, #0]
 8016932:	e022      	b.n	801697a <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2200      	movs	r2, #0
 8016938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801693e:	697a      	ldr	r2, [r7, #20]
 8016940:	1ad2      	subs	r2, r2, r3
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	69db      	ldr	r3, [r3, #28]
 8016946:	429a      	cmp	r2, r3
 8016948:	d217      	bcs.n	801697a <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	789b      	ldrb	r3, [r3, #2]
 801694e:	613b      	str	r3, [r7, #16]
 8016950:	e010      	b.n	8016974 <sync_window+0x7c>
					wsect += fs->fsize;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	69db      	ldr	r3, [r3, #28]
 8016956:	697a      	ldr	r2, [r7, #20]
 8016958:	18d3      	adds	r3, r2, r3
 801695a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	7858      	ldrb	r0, [r3, #1]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	3334      	adds	r3, #52	@ 0x34
 8016964:	0019      	movs	r1, r3
 8016966:	697a      	ldr	r2, [r7, #20]
 8016968:	2301      	movs	r3, #1
 801696a:	f7ff fd11 	bl	8016390 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	3b01      	subs	r3, #1
 8016972:	613b      	str	r3, [r7, #16]
 8016974:	693b      	ldr	r3, [r7, #16]
 8016976:	2b01      	cmp	r3, #1
 8016978:	d8eb      	bhi.n	8016952 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 801697a:	230f      	movs	r3, #15
 801697c:	18fb      	adds	r3, r7, r3
 801697e:	781b      	ldrb	r3, [r3, #0]
}
 8016980:	0018      	movs	r0, r3
 8016982:	46bd      	mov	sp, r7
 8016984:	b007      	add	sp, #28
 8016986:	bd90      	pop	{r4, r7, pc}

08016988 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016988:	b5b0      	push	{r4, r5, r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016992:	250f      	movs	r5, #15
 8016994:	197b      	adds	r3, r7, r5
 8016996:	2200      	movs	r2, #0
 8016998:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801699e:	683a      	ldr	r2, [r7, #0]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d01f      	beq.n	80169e4 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80169a4:	197c      	adds	r4, r7, r5
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	0018      	movs	r0, r3
 80169aa:	f7ff ffa5 	bl	80168f8 <sync_window>
 80169ae:	0003      	movs	r3, r0
 80169b0:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80169b2:	002c      	movs	r4, r5
 80169b4:	193b      	adds	r3, r7, r4
 80169b6:	781b      	ldrb	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d113      	bne.n	80169e4 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	7858      	ldrb	r0, [r3, #1]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	3334      	adds	r3, #52	@ 0x34
 80169c4:	0019      	movs	r1, r3
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	2301      	movs	r3, #1
 80169ca:	f7ff fcb9 	bl	8016340 <disk_read>
 80169ce:	1e03      	subs	r3, r0, #0
 80169d0:	d005      	beq.n	80169de <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80169d2:	2301      	movs	r3, #1
 80169d4:	425b      	negs	r3, r3
 80169d6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80169d8:	193b      	adds	r3, r7, r4
 80169da:	2201      	movs	r2, #1
 80169dc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	683a      	ldr	r2, [r7, #0]
 80169e2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80169e4:	230f      	movs	r3, #15
 80169e6:	18fb      	adds	r3, r7, r3
 80169e8:	781b      	ldrb	r3, [r3, #0]
}
 80169ea:	0018      	movs	r0, r3
 80169ec:	46bd      	mov	sp, r7
 80169ee:	b004      	add	sp, #16
 80169f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080169f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80169f4:	b5b0      	push	{r4, r5, r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80169fc:	250f      	movs	r5, #15
 80169fe:	197c      	adds	r4, r7, r5
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	0018      	movs	r0, r3
 8016a04:	f7ff ff78 	bl	80168f8 <sync_window>
 8016a08:	0003      	movs	r3, r0
 8016a0a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8016a0c:	197b      	adds	r3, r7, r5
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d15e      	bne.n	8016ad2 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	2b03      	cmp	r3, #3
 8016a1a:	d14d      	bne.n	8016ab8 <sync_fs+0xc4>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	791b      	ldrb	r3, [r3, #4]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d149      	bne.n	8016ab8 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	3334      	adds	r3, #52	@ 0x34
 8016a28:	0018      	movs	r0, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	899b      	ldrh	r3, [r3, #12]
 8016a2e:	001a      	movs	r2, r3
 8016a30:	2100      	movs	r1, #0
 8016a32:	f7ff fda0 	bl	8016576 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	3334      	adds	r3, #52	@ 0x34
 8016a3a:	33ff      	adds	r3, #255	@ 0xff
 8016a3c:	33ff      	adds	r3, #255	@ 0xff
 8016a3e:	4a28      	ldr	r2, [pc, #160]	@ (8016ae0 <sync_fs+0xec>)
 8016a40:	0011      	movs	r1, r2
 8016a42:	0018      	movs	r0, r3
 8016a44:	f7ff fd30 	bl	80164a8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	3334      	adds	r3, #52	@ 0x34
 8016a4c:	4a25      	ldr	r2, [pc, #148]	@ (8016ae4 <sync_fs+0xf0>)
 8016a4e:	0011      	movs	r1, r2
 8016a50:	0018      	movs	r0, r3
 8016a52:	f7ff fd47 	bl	80164e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	3334      	adds	r3, #52	@ 0x34
 8016a5a:	33e5      	adds	r3, #229	@ 0xe5
 8016a5c:	33ff      	adds	r3, #255	@ 0xff
 8016a5e:	4a22      	ldr	r2, [pc, #136]	@ (8016ae8 <sync_fs+0xf4>)
 8016a60:	0011      	movs	r1, r2
 8016a62:	0018      	movs	r0, r3
 8016a64:	f7ff fd3e 	bl	80164e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	3334      	adds	r3, #52	@ 0x34
 8016a6c:	33e9      	adds	r3, #233	@ 0xe9
 8016a6e:	33ff      	adds	r3, #255	@ 0xff
 8016a70:	001a      	movs	r2, r3
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	695b      	ldr	r3, [r3, #20]
 8016a76:	0019      	movs	r1, r3
 8016a78:	0010      	movs	r0, r2
 8016a7a:	f7ff fd33 	bl	80164e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	3334      	adds	r3, #52	@ 0x34
 8016a82:	33ed      	adds	r3, #237	@ 0xed
 8016a84:	33ff      	adds	r3, #255	@ 0xff
 8016a86:	001a      	movs	r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	691b      	ldr	r3, [r3, #16]
 8016a8c:	0019      	movs	r1, r3
 8016a8e:	0010      	movs	r0, r2
 8016a90:	f7ff fd28 	bl	80164e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6a1b      	ldr	r3, [r3, #32]
 8016a98:	1c5a      	adds	r2, r3, #1
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	7858      	ldrb	r0, [r3, #1]
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	3334      	adds	r3, #52	@ 0x34
 8016aa6:	0019      	movs	r1, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016aac:	2301      	movs	r3, #1
 8016aae:	f7ff fc6f 	bl	8016390 <disk_write>
			fs->fsi_flag = 0;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	785b      	ldrb	r3, [r3, #1]
 8016abc:	2200      	movs	r2, #0
 8016abe:	2100      	movs	r1, #0
 8016ac0:	0018      	movs	r0, r3
 8016ac2:	f7ff fc8d 	bl	80163e0 <disk_ioctl>
 8016ac6:	1e03      	subs	r3, r0, #0
 8016ac8:	d003      	beq.n	8016ad2 <sync_fs+0xde>
 8016aca:	230f      	movs	r3, #15
 8016acc:	18fb      	adds	r3, r7, r3
 8016ace:	2201      	movs	r2, #1
 8016ad0:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8016ad2:	230f      	movs	r3, #15
 8016ad4:	18fb      	adds	r3, r7, r3
 8016ad6:	781b      	ldrb	r3, [r3, #0]
}
 8016ad8:	0018      	movs	r0, r3
 8016ada:	46bd      	mov	sp, r7
 8016adc:	b004      	add	sp, #16
 8016ade:	bdb0      	pop	{r4, r5, r7, pc}
 8016ae0:	0000aa55 	.word	0x0000aa55
 8016ae4:	41615252 	.word	0x41615252
 8016ae8:	61417272 	.word	0x61417272

08016aec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	3b02      	subs	r3, #2
 8016afa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	699b      	ldr	r3, [r3, #24]
 8016b00:	3b02      	subs	r3, #2
 8016b02:	683a      	ldr	r2, [r7, #0]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d301      	bcc.n	8016b0c <clust2sect+0x20>
 8016b08:	2300      	movs	r3, #0
 8016b0a:	e007      	b.n	8016b1c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	895b      	ldrh	r3, [r3, #10]
 8016b10:	001a      	movs	r2, r3
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	435a      	muls	r2, r3
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b1a:	18d3      	adds	r3, r2, r3
}
 8016b1c:	0018      	movs	r0, r3
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	b002      	add	sp, #8
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016b24:	b590      	push	{r4, r7, lr}
 8016b26:	b087      	sub	sp, #28
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
 8016b2c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	2b01      	cmp	r3, #1
 8016b38:	d904      	bls.n	8016b44 <get_fat+0x20>
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	699b      	ldr	r3, [r3, #24]
 8016b3e:	683a      	ldr	r2, [r7, #0]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d302      	bcc.n	8016b4a <get_fat+0x26>
		val = 1;	/* Internal error */
 8016b44:	2301      	movs	r3, #1
 8016b46:	617b      	str	r3, [r7, #20]
 8016b48:	e0c1      	b.n	8016cce <get_fat+0x1aa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	425b      	negs	r3, r3
 8016b4e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	2b03      	cmp	r3, #3
 8016b56:	d100      	bne.n	8016b5a <get_fat+0x36>
 8016b58:	e087      	b.n	8016c6a <get_fat+0x146>
 8016b5a:	dd00      	ble.n	8016b5e <get_fat+0x3a>
 8016b5c:	e0ad      	b.n	8016cba <get_fat+0x196>
 8016b5e:	2b01      	cmp	r3, #1
 8016b60:	d002      	beq.n	8016b68 <get_fat+0x44>
 8016b62:	2b02      	cmp	r3, #2
 8016b64:	d05b      	beq.n	8016c1e <get_fat+0xfa>
 8016b66:	e0a8      	b.n	8016cba <get_fat+0x196>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	60fb      	str	r3, [r7, #12]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	085b      	lsrs	r3, r3, #1
 8016b70:	68fa      	ldr	r2, [r7, #12]
 8016b72:	18d3      	adds	r3, r2, r3
 8016b74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	899b      	ldrh	r3, [r3, #12]
 8016b7e:	0019      	movs	r1, r3
 8016b80:	68f8      	ldr	r0, [r7, #12]
 8016b82:	f7e9 fad1 	bl	8000128 <__udivsi3>
 8016b86:	0003      	movs	r3, r0
 8016b88:	18e2      	adds	r2, r4, r3
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	0011      	movs	r1, r2
 8016b8e:	0018      	movs	r0, r3
 8016b90:	f7ff fefa 	bl	8016988 <move_window>
 8016b94:	1e03      	subs	r3, r0, #0
 8016b96:	d000      	beq.n	8016b9a <get_fat+0x76>
 8016b98:	e092      	b.n	8016cc0 <get_fat+0x19c>
			wc = fs->win[bc++ % SS(fs)];
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	1c5a      	adds	r2, r3, #1
 8016b9e:	60fa      	str	r2, [r7, #12]
 8016ba0:	693a      	ldr	r2, [r7, #16]
 8016ba2:	8992      	ldrh	r2, [r2, #12]
 8016ba4:	0011      	movs	r1, r2
 8016ba6:	0018      	movs	r0, r3
 8016ba8:	f7e9 fb44 	bl	8000234 <__aeabi_uidivmod>
 8016bac:	000b      	movs	r3, r1
 8016bae:	0019      	movs	r1, r3
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	2234      	movs	r2, #52	@ 0x34
 8016bb4:	185b      	adds	r3, r3, r1
 8016bb6:	189b      	adds	r3, r3, r2
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	899b      	ldrh	r3, [r3, #12]
 8016bc4:	0019      	movs	r1, r3
 8016bc6:	68f8      	ldr	r0, [r7, #12]
 8016bc8:	f7e9 faae 	bl	8000128 <__udivsi3>
 8016bcc:	0003      	movs	r3, r0
 8016bce:	18e2      	adds	r2, r4, r3
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	0011      	movs	r1, r2
 8016bd4:	0018      	movs	r0, r3
 8016bd6:	f7ff fed7 	bl	8016988 <move_window>
 8016bda:	1e03      	subs	r3, r0, #0
 8016bdc:	d000      	beq.n	8016be0 <get_fat+0xbc>
 8016bde:	e071      	b.n	8016cc4 <get_fat+0x1a0>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	899b      	ldrh	r3, [r3, #12]
 8016be4:	001a      	movs	r2, r3
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	0011      	movs	r1, r2
 8016bea:	0018      	movs	r0, r3
 8016bec:	f7e9 fb22 	bl	8000234 <__aeabi_uidivmod>
 8016bf0:	000b      	movs	r3, r1
 8016bf2:	0019      	movs	r1, r3
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	2234      	movs	r2, #52	@ 0x34
 8016bf8:	185b      	adds	r3, r3, r1
 8016bfa:	189b      	adds	r3, r3, r2
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	021b      	lsls	r3, r3, #8
 8016c00:	68ba      	ldr	r2, [r7, #8]
 8016c02:	4313      	orrs	r3, r2
 8016c04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	2201      	movs	r2, #1
 8016c0a:	4013      	ands	r3, r2
 8016c0c:	d002      	beq.n	8016c14 <get_fat+0xf0>
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	091b      	lsrs	r3, r3, #4
 8016c12:	e002      	b.n	8016c1a <get_fat+0xf6>
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	051b      	lsls	r3, r3, #20
 8016c18:	0d1b      	lsrs	r3, r3, #20
 8016c1a:	617b      	str	r3, [r7, #20]
			break;
 8016c1c:	e057      	b.n	8016cce <get_fat+0x1aa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	899b      	ldrh	r3, [r3, #12]
 8016c26:	085b      	lsrs	r3, r3, #1
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	0019      	movs	r1, r3
 8016c2c:	6838      	ldr	r0, [r7, #0]
 8016c2e:	f7e9 fa7b 	bl	8000128 <__udivsi3>
 8016c32:	0003      	movs	r3, r0
 8016c34:	18e2      	adds	r2, r4, r3
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	0011      	movs	r1, r2
 8016c3a:	0018      	movs	r0, r3
 8016c3c:	f7ff fea4 	bl	8016988 <move_window>
 8016c40:	1e03      	subs	r3, r0, #0
 8016c42:	d141      	bne.n	8016cc8 <get_fat+0x1a4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	3334      	adds	r3, #52	@ 0x34
 8016c48:	001c      	movs	r4, r3
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	005a      	lsls	r2, r3, #1
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	899b      	ldrh	r3, [r3, #12]
 8016c52:	0019      	movs	r1, r3
 8016c54:	0010      	movs	r0, r2
 8016c56:	f7e9 faed 	bl	8000234 <__aeabi_uidivmod>
 8016c5a:	000b      	movs	r3, r1
 8016c5c:	18e3      	adds	r3, r4, r3
 8016c5e:	0018      	movs	r0, r3
 8016c60:	f7ff fbe6 	bl	8016430 <ld_word>
 8016c64:	0003      	movs	r3, r0
 8016c66:	617b      	str	r3, [r7, #20]
			break;
 8016c68:	e031      	b.n	8016cce <get_fat+0x1aa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016c6e:	693b      	ldr	r3, [r7, #16]
 8016c70:	899b      	ldrh	r3, [r3, #12]
 8016c72:	089b      	lsrs	r3, r3, #2
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	0019      	movs	r1, r3
 8016c78:	6838      	ldr	r0, [r7, #0]
 8016c7a:	f7e9 fa55 	bl	8000128 <__udivsi3>
 8016c7e:	0003      	movs	r3, r0
 8016c80:	18e2      	adds	r2, r4, r3
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	0011      	movs	r1, r2
 8016c86:	0018      	movs	r0, r3
 8016c88:	f7ff fe7e 	bl	8016988 <move_window>
 8016c8c:	1e03      	subs	r3, r0, #0
 8016c8e:	d11d      	bne.n	8016ccc <get_fat+0x1a8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	3334      	adds	r3, #52	@ 0x34
 8016c94:	001c      	movs	r4, r3
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	009a      	lsls	r2, r3, #2
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	899b      	ldrh	r3, [r3, #12]
 8016c9e:	0019      	movs	r1, r3
 8016ca0:	0010      	movs	r0, r2
 8016ca2:	f7e9 fac7 	bl	8000234 <__aeabi_uidivmod>
 8016ca6:	000b      	movs	r3, r1
 8016ca8:	18e3      	adds	r3, r4, r3
 8016caa:	0018      	movs	r0, r3
 8016cac:	f7ff fbdb 	bl	8016466 <ld_dword>
 8016cb0:	0003      	movs	r3, r0
 8016cb2:	011b      	lsls	r3, r3, #4
 8016cb4:	091b      	lsrs	r3, r3, #4
 8016cb6:	617b      	str	r3, [r7, #20]
			break;
 8016cb8:	e009      	b.n	8016cce <get_fat+0x1aa>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016cba:	2301      	movs	r3, #1
 8016cbc:	617b      	str	r3, [r7, #20]
 8016cbe:	e006      	b.n	8016cce <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cc0:	46c0      	nop			@ (mov r8, r8)
 8016cc2:	e004      	b.n	8016cce <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cc4:	46c0      	nop			@ (mov r8, r8)
 8016cc6:	e002      	b.n	8016cce <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016cc8:	46c0      	nop			@ (mov r8, r8)
 8016cca:	e000      	b.n	8016cce <get_fat+0x1aa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016ccc:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8016cce:	697b      	ldr	r3, [r7, #20]
}
 8016cd0:	0018      	movs	r0, r3
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	b007      	add	sp, #28
 8016cd6:	bd90      	pop	{r4, r7, pc}

08016cd8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016cd8:	b5b0      	push	{r4, r5, r7, lr}
 8016cda:	b088      	sub	sp, #32
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016ce4:	231f      	movs	r3, #31
 8016ce6:	18fb      	adds	r3, r7, r3
 8016ce8:	2202      	movs	r2, #2
 8016cea:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	2b01      	cmp	r3, #1
 8016cf0:	d800      	bhi.n	8016cf4 <put_fat+0x1c>
 8016cf2:	e11a      	b.n	8016f2a <put_fat+0x252>
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	699b      	ldr	r3, [r3, #24]
 8016cf8:	68ba      	ldr	r2, [r7, #8]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d300      	bcc.n	8016d00 <put_fat+0x28>
 8016cfe:	e114      	b.n	8016f2a <put_fat+0x252>
		switch (fs->fs_type) {
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	d100      	bne.n	8016d0a <put_fat+0x32>
 8016d08:	e0c1      	b.n	8016e8e <put_fat+0x1b6>
 8016d0a:	dd00      	ble.n	8016d0e <put_fat+0x36>
 8016d0c:	e10d      	b.n	8016f2a <put_fat+0x252>
 8016d0e:	2b01      	cmp	r3, #1
 8016d10:	d003      	beq.n	8016d1a <put_fat+0x42>
 8016d12:	2b02      	cmp	r3, #2
 8016d14:	d100      	bne.n	8016d18 <put_fat+0x40>
 8016d16:	e08a      	b.n	8016e2e <put_fat+0x156>
 8016d18:	e107      	b.n	8016f2a <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	61bb      	str	r3, [r7, #24]
 8016d1e:	69bb      	ldr	r3, [r7, #24]
 8016d20:	085b      	lsrs	r3, r3, #1
 8016d22:	69ba      	ldr	r2, [r7, #24]
 8016d24:	18d3      	adds	r3, r2, r3
 8016d26:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	899b      	ldrh	r3, [r3, #12]
 8016d30:	0019      	movs	r1, r3
 8016d32:	69b8      	ldr	r0, [r7, #24]
 8016d34:	f7e9 f9f8 	bl	8000128 <__udivsi3>
 8016d38:	0003      	movs	r3, r0
 8016d3a:	18e2      	adds	r2, r4, r3
 8016d3c:	251f      	movs	r5, #31
 8016d3e:	197c      	adds	r4, r7, r5
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	0011      	movs	r1, r2
 8016d44:	0018      	movs	r0, r3
 8016d46:	f7ff fe1f 	bl	8016988 <move_window>
 8016d4a:	0003      	movs	r3, r0
 8016d4c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016d4e:	197b      	adds	r3, r7, r5
 8016d50:	781b      	ldrb	r3, [r3, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d000      	beq.n	8016d58 <put_fat+0x80>
 8016d56:	e0e1      	b.n	8016f1c <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	3334      	adds	r3, #52	@ 0x34
 8016d5c:	001c      	movs	r4, r3
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	1c5a      	adds	r2, r3, #1
 8016d62:	61ba      	str	r2, [r7, #24]
 8016d64:	68fa      	ldr	r2, [r7, #12]
 8016d66:	8992      	ldrh	r2, [r2, #12]
 8016d68:	0011      	movs	r1, r2
 8016d6a:	0018      	movs	r0, r3
 8016d6c:	f7e9 fa62 	bl	8000234 <__aeabi_uidivmod>
 8016d70:	000b      	movs	r3, r1
 8016d72:	18e3      	adds	r3, r4, r3
 8016d74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	2201      	movs	r2, #1
 8016d7a:	4013      	ands	r3, r2
 8016d7c:	d00d      	beq.n	8016d9a <put_fat+0xc2>
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	b25b      	sxtb	r3, r3
 8016d84:	220f      	movs	r2, #15
 8016d86:	4013      	ands	r3, r2
 8016d88:	b25a      	sxtb	r2, r3
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	011b      	lsls	r3, r3, #4
 8016d90:	b25b      	sxtb	r3, r3
 8016d92:	4313      	orrs	r3, r2
 8016d94:	b25b      	sxtb	r3, r3
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	e001      	b.n	8016d9e <put_fat+0xc6>
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	b2db      	uxtb	r3, r3
 8016d9e:	697a      	ldr	r2, [r7, #20]
 8016da0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	2201      	movs	r2, #1
 8016da6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	899b      	ldrh	r3, [r3, #12]
 8016db0:	0019      	movs	r1, r3
 8016db2:	69b8      	ldr	r0, [r7, #24]
 8016db4:	f7e9 f9b8 	bl	8000128 <__udivsi3>
 8016db8:	0003      	movs	r3, r0
 8016dba:	18e2      	adds	r2, r4, r3
 8016dbc:	251f      	movs	r5, #31
 8016dbe:	197c      	adds	r4, r7, r5
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	0011      	movs	r1, r2
 8016dc4:	0018      	movs	r0, r3
 8016dc6:	f7ff fddf 	bl	8016988 <move_window>
 8016dca:	0003      	movs	r3, r0
 8016dcc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016dce:	197b      	adds	r3, r7, r5
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d000      	beq.n	8016dd8 <put_fat+0x100>
 8016dd6:	e0a3      	b.n	8016f20 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	3334      	adds	r3, #52	@ 0x34
 8016ddc:	001c      	movs	r4, r3
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	899b      	ldrh	r3, [r3, #12]
 8016de2:	001a      	movs	r2, r3
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	0011      	movs	r1, r2
 8016de8:	0018      	movs	r0, r3
 8016dea:	f7e9 fa23 	bl	8000234 <__aeabi_uidivmod>
 8016dee:	000b      	movs	r3, r1
 8016df0:	18e3      	adds	r3, r4, r3
 8016df2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	2201      	movs	r2, #1
 8016df8:	4013      	ands	r3, r2
 8016dfa:	d003      	beq.n	8016e04 <put_fat+0x12c>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	091b      	lsrs	r3, r3, #4
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	e00e      	b.n	8016e22 <put_fat+0x14a>
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	b25b      	sxtb	r3, r3
 8016e0a:	220f      	movs	r2, #15
 8016e0c:	4393      	bics	r3, r2
 8016e0e:	b25a      	sxtb	r2, r3
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	0a1b      	lsrs	r3, r3, #8
 8016e14:	b25b      	sxtb	r3, r3
 8016e16:	210f      	movs	r1, #15
 8016e18:	400b      	ands	r3, r1
 8016e1a:	b25b      	sxtb	r3, r3
 8016e1c:	4313      	orrs	r3, r2
 8016e1e:	b25b      	sxtb	r3, r3
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	697a      	ldr	r2, [r7, #20]
 8016e24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2201      	movs	r2, #1
 8016e2a:	70da      	strb	r2, [r3, #3]
			break;
 8016e2c:	e07d      	b.n	8016f2a <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	899b      	ldrh	r3, [r3, #12]
 8016e36:	085b      	lsrs	r3, r3, #1
 8016e38:	b29b      	uxth	r3, r3
 8016e3a:	0019      	movs	r1, r3
 8016e3c:	68b8      	ldr	r0, [r7, #8]
 8016e3e:	f7e9 f973 	bl	8000128 <__udivsi3>
 8016e42:	0003      	movs	r3, r0
 8016e44:	18e2      	adds	r2, r4, r3
 8016e46:	251f      	movs	r5, #31
 8016e48:	197c      	adds	r4, r7, r5
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	0011      	movs	r1, r2
 8016e4e:	0018      	movs	r0, r3
 8016e50:	f7ff fd9a 	bl	8016988 <move_window>
 8016e54:	0003      	movs	r3, r0
 8016e56:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016e58:	197b      	adds	r3, r7, r5
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d161      	bne.n	8016f24 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	3334      	adds	r3, #52	@ 0x34
 8016e64:	001c      	movs	r4, r3
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	005a      	lsls	r2, r3, #1
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	899b      	ldrh	r3, [r3, #12]
 8016e6e:	0019      	movs	r1, r3
 8016e70:	0010      	movs	r0, r2
 8016e72:	f7e9 f9df 	bl	8000234 <__aeabi_uidivmod>
 8016e76:	000b      	movs	r3, r1
 8016e78:	18e3      	adds	r3, r4, r3
 8016e7a:	687a      	ldr	r2, [r7, #4]
 8016e7c:	b292      	uxth	r2, r2
 8016e7e:	0011      	movs	r1, r2
 8016e80:	0018      	movs	r0, r3
 8016e82:	f7ff fb11 	bl	80164a8 <st_word>
			fs->wflag = 1;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	70da      	strb	r2, [r3, #3]
			break;
 8016e8c:	e04d      	b.n	8016f2a <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	899b      	ldrh	r3, [r3, #12]
 8016e96:	089b      	lsrs	r3, r3, #2
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	0019      	movs	r1, r3
 8016e9c:	68b8      	ldr	r0, [r7, #8]
 8016e9e:	f7e9 f943 	bl	8000128 <__udivsi3>
 8016ea2:	0003      	movs	r3, r0
 8016ea4:	18e2      	adds	r2, r4, r3
 8016ea6:	251f      	movs	r5, #31
 8016ea8:	197c      	adds	r4, r7, r5
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	0011      	movs	r1, r2
 8016eae:	0018      	movs	r0, r3
 8016eb0:	f7ff fd6a 	bl	8016988 <move_window>
 8016eb4:	0003      	movs	r3, r0
 8016eb6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8016eb8:	197b      	adds	r3, r7, r5
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d133      	bne.n	8016f28 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	011b      	lsls	r3, r3, #4
 8016ec4:	091c      	lsrs	r4, r3, #4
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	3334      	adds	r3, #52	@ 0x34
 8016eca:	001d      	movs	r5, r3
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	009a      	lsls	r2, r3, #2
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	899b      	ldrh	r3, [r3, #12]
 8016ed4:	0019      	movs	r1, r3
 8016ed6:	0010      	movs	r0, r2
 8016ed8:	f7e9 f9ac 	bl	8000234 <__aeabi_uidivmod>
 8016edc:	000b      	movs	r3, r1
 8016ede:	18eb      	adds	r3, r5, r3
 8016ee0:	0018      	movs	r0, r3
 8016ee2:	f7ff fac0 	bl	8016466 <ld_dword>
 8016ee6:	0003      	movs	r3, r0
 8016ee8:	0f1b      	lsrs	r3, r3, #28
 8016eea:	071b      	lsls	r3, r3, #28
 8016eec:	4323      	orrs	r3, r4
 8016eee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	3334      	adds	r3, #52	@ 0x34
 8016ef4:	001c      	movs	r4, r3
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	009a      	lsls	r2, r3, #2
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	899b      	ldrh	r3, [r3, #12]
 8016efe:	0019      	movs	r1, r3
 8016f00:	0010      	movs	r0, r2
 8016f02:	f7e9 f997 	bl	8000234 <__aeabi_uidivmod>
 8016f06:	000b      	movs	r3, r1
 8016f08:	18e3      	adds	r3, r4, r3
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	0011      	movs	r1, r2
 8016f0e:	0018      	movs	r0, r3
 8016f10:	f7ff fae8 	bl	80164e4 <st_dword>
			fs->wflag = 1;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2201      	movs	r2, #1
 8016f18:	70da      	strb	r2, [r3, #3]
			break;
 8016f1a:	e006      	b.n	8016f2a <put_fat+0x252>
			if (res != FR_OK) break;
 8016f1c:	46c0      	nop			@ (mov r8, r8)
 8016f1e:	e004      	b.n	8016f2a <put_fat+0x252>
			if (res != FR_OK) break;
 8016f20:	46c0      	nop			@ (mov r8, r8)
 8016f22:	e002      	b.n	8016f2a <put_fat+0x252>
			if (res != FR_OK) break;
 8016f24:	46c0      	nop			@ (mov r8, r8)
 8016f26:	e000      	b.n	8016f2a <put_fat+0x252>
			if (res != FR_OK) break;
 8016f28:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8016f2a:	231f      	movs	r3, #31
 8016f2c:	18fb      	adds	r3, r7, r3
 8016f2e:	781b      	ldrb	r3, [r3, #0]
}
 8016f30:	0018      	movs	r0, r3
 8016f32:	46bd      	mov	sp, r7
 8016f34:	b008      	add	sp, #32
 8016f36:	bdb0      	pop	{r4, r5, r7, pc}

08016f38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016f38:	b5b0      	push	{r4, r5, r7, lr}
 8016f3a:	b088      	sub	sp, #32
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016f44:	231f      	movs	r3, #31
 8016f46:	18fb      	adds	r3, r7, r3
 8016f48:	2200      	movs	r2, #0
 8016f4a:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	2b01      	cmp	r3, #1
 8016f56:	d904      	bls.n	8016f62 <remove_chain+0x2a>
 8016f58:	69bb      	ldr	r3, [r7, #24]
 8016f5a:	699b      	ldr	r3, [r3, #24]
 8016f5c:	68ba      	ldr	r2, [r7, #8]
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d301      	bcc.n	8016f66 <remove_chain+0x2e>
 8016f62:	2302      	movs	r3, #2
 8016f64:	e057      	b.n	8017016 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d011      	beq.n	8016f90 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f6c:	251f      	movs	r5, #31
 8016f6e:	197c      	adds	r4, r7, r5
 8016f70:	2301      	movs	r3, #1
 8016f72:	425a      	negs	r2, r3
 8016f74:	6879      	ldr	r1, [r7, #4]
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	0018      	movs	r0, r3
 8016f7a:	f7ff fead 	bl	8016cd8 <put_fat>
 8016f7e:	0003      	movs	r3, r0
 8016f80:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8016f82:	197b      	adds	r3, r7, r5
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d002      	beq.n	8016f90 <remove_chain+0x58>
 8016f8a:	197b      	adds	r3, r7, r5
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	e042      	b.n	8017016 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016f90:	68ba      	ldr	r2, [r7, #8]
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	0011      	movs	r1, r2
 8016f96:	0018      	movs	r0, r3
 8016f98:	f7ff fdc4 	bl	8016b24 <get_fat>
 8016f9c:	0003      	movs	r3, r0
 8016f9e:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d035      	beq.n	8017012 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	d101      	bne.n	8016fb0 <remove_chain+0x78>
 8016fac:	2302      	movs	r3, #2
 8016fae:	e032      	b.n	8017016 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	d101      	bne.n	8016fba <remove_chain+0x82>
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	e02d      	b.n	8017016 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016fba:	251f      	movs	r5, #31
 8016fbc:	197c      	adds	r4, r7, r5
 8016fbe:	68b9      	ldr	r1, [r7, #8]
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	0018      	movs	r0, r3
 8016fc6:	f7ff fe87 	bl	8016cd8 <put_fat>
 8016fca:	0003      	movs	r3, r0
 8016fcc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8016fce:	197b      	adds	r3, r7, r5
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d002      	beq.n	8016fdc <remove_chain+0xa4>
 8016fd6:	197b      	adds	r3, r7, r5
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	e01c      	b.n	8017016 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	695a      	ldr	r2, [r3, #20]
 8016fe0:	69bb      	ldr	r3, [r7, #24]
 8016fe2:	699b      	ldr	r3, [r3, #24]
 8016fe4:	3b02      	subs	r3, #2
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d20b      	bcs.n	8017002 <remove_chain+0xca>
			fs->free_clst++;
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	695b      	ldr	r3, [r3, #20]
 8016fee:	1c5a      	adds	r2, r3, #1
 8016ff0:	69bb      	ldr	r3, [r7, #24]
 8016ff2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8016ff4:	69bb      	ldr	r3, [r7, #24]
 8016ff6:	791b      	ldrb	r3, [r3, #4]
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	4313      	orrs	r3, r2
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017006:	69bb      	ldr	r3, [r7, #24]
 8017008:	699b      	ldr	r3, [r3, #24]
 801700a:	68ba      	ldr	r2, [r7, #8]
 801700c:	429a      	cmp	r2, r3
 801700e:	d3bf      	bcc.n	8016f90 <remove_chain+0x58>
 8017010:	e000      	b.n	8017014 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8017012:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017014:	2300      	movs	r3, #0
}
 8017016:	0018      	movs	r0, r3
 8017018:	46bd      	mov	sp, r7
 801701a:	b008      	add	sp, #32
 801701c:	bdb0      	pop	{r4, r5, r7, pc}

0801701e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801701e:	b5b0      	push	{r4, r5, r7, lr}
 8017020:	b088      	sub	sp, #32
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
 8017026:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d10d      	bne.n	8017050 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	691b      	ldr	r3, [r3, #16]
 8017038:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801703a:	69bb      	ldr	r3, [r7, #24]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d004      	beq.n	801704a <create_chain+0x2c>
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	699b      	ldr	r3, [r3, #24]
 8017044:	69ba      	ldr	r2, [r7, #24]
 8017046:	429a      	cmp	r2, r3
 8017048:	d31d      	bcc.n	8017086 <create_chain+0x68>
 801704a:	2301      	movs	r3, #1
 801704c:	61bb      	str	r3, [r7, #24]
 801704e:	e01a      	b.n	8017086 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017050:	683a      	ldr	r2, [r7, #0]
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	0011      	movs	r1, r2
 8017056:	0018      	movs	r0, r3
 8017058:	f7ff fd64 	bl	8016b24 <get_fat>
 801705c:	0003      	movs	r3, r0
 801705e:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	2b01      	cmp	r3, #1
 8017064:	d801      	bhi.n	801706a <create_chain+0x4c>
 8017066:	2301      	movs	r3, #1
 8017068:	e07b      	b.n	8017162 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	3301      	adds	r3, #1
 801706e:	d101      	bne.n	8017074 <create_chain+0x56>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	e076      	b.n	8017162 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017074:	693b      	ldr	r3, [r7, #16]
 8017076:	699b      	ldr	r3, [r3, #24]
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	429a      	cmp	r2, r3
 801707c:	d201      	bcs.n	8017082 <create_chain+0x64>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	e06f      	b.n	8017162 <create_chain+0x144>
		scl = clst;
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017086:	69bb      	ldr	r3, [r7, #24]
 8017088:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	3301      	adds	r3, #1
 801708e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	699b      	ldr	r3, [r3, #24]
 8017094:	69fa      	ldr	r2, [r7, #28]
 8017096:	429a      	cmp	r2, r3
 8017098:	d307      	bcc.n	80170aa <create_chain+0x8c>
				ncl = 2;
 801709a:	2302      	movs	r3, #2
 801709c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801709e:	69fa      	ldr	r2, [r7, #28]
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	429a      	cmp	r2, r3
 80170a4:	d901      	bls.n	80170aa <create_chain+0x8c>
 80170a6:	2300      	movs	r3, #0
 80170a8:	e05b      	b.n	8017162 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80170aa:	69fa      	ldr	r2, [r7, #28]
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	0011      	movs	r1, r2
 80170b0:	0018      	movs	r0, r3
 80170b2:	f7ff fd37 	bl	8016b24 <get_fat>
 80170b6:	0003      	movs	r3, r0
 80170b8:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00d      	beq.n	80170dc <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d002      	beq.n	80170cc <create_chain+0xae>
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	3301      	adds	r3, #1
 80170ca:	d101      	bne.n	80170d0 <create_chain+0xb2>
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	e048      	b.n	8017162 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80170d0:	69fa      	ldr	r2, [r7, #28]
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d1d8      	bne.n	801708a <create_chain+0x6c>
 80170d8:	2300      	movs	r3, #0
 80170da:	e042      	b.n	8017162 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80170dc:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80170de:	2517      	movs	r5, #23
 80170e0:	197c      	adds	r4, r7, r5
 80170e2:	2301      	movs	r3, #1
 80170e4:	425a      	negs	r2, r3
 80170e6:	69f9      	ldr	r1, [r7, #28]
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	0018      	movs	r0, r3
 80170ec:	f7ff fdf4 	bl	8016cd8 <put_fat>
 80170f0:	0003      	movs	r3, r0
 80170f2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80170f4:	197b      	adds	r3, r7, r5
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d10b      	bne.n	8017114 <create_chain+0xf6>
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d008      	beq.n	8017114 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017102:	197c      	adds	r4, r7, r5
 8017104:	69fa      	ldr	r2, [r7, #28]
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	0018      	movs	r0, r3
 801710c:	f7ff fde4 	bl	8016cd8 <put_fat>
 8017110:	0003      	movs	r3, r0
 8017112:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017114:	2317      	movs	r3, #23
 8017116:	18fb      	adds	r3, r7, r3
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d116      	bne.n	801714c <create_chain+0x12e>
		fs->last_clst = ncl;
 801711e:	693b      	ldr	r3, [r7, #16]
 8017120:	69fa      	ldr	r2, [r7, #28]
 8017122:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	695a      	ldr	r2, [r3, #20]
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	699b      	ldr	r3, [r3, #24]
 801712c:	3b02      	subs	r3, #2
 801712e:	429a      	cmp	r2, r3
 8017130:	d804      	bhi.n	801713c <create_chain+0x11e>
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	695b      	ldr	r3, [r3, #20]
 8017136:	1e5a      	subs	r2, r3, #1
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	791b      	ldrb	r3, [r3, #4]
 8017140:	2201      	movs	r2, #1
 8017142:	4313      	orrs	r3, r2
 8017144:	b2da      	uxtb	r2, r3
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	711a      	strb	r2, [r3, #4]
 801714a:	e009      	b.n	8017160 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801714c:	2317      	movs	r3, #23
 801714e:	18fb      	adds	r3, r7, r3
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	2b01      	cmp	r3, #1
 8017154:	d102      	bne.n	801715c <create_chain+0x13e>
 8017156:	2301      	movs	r3, #1
 8017158:	425b      	negs	r3, r3
 801715a:	e000      	b.n	801715e <create_chain+0x140>
 801715c:	2301      	movs	r3, #1
 801715e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017160:	69fb      	ldr	r3, [r7, #28]
}
 8017162:	0018      	movs	r0, r3
 8017164:	46bd      	mov	sp, r7
 8017166:	b008      	add	sp, #32
 8017168:	bdb0      	pop	{r4, r5, r7, pc}

0801716a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801716a:	b580      	push	{r7, lr}
 801716c:	b086      	sub	sp, #24
 801716e:	af00      	add	r7, sp, #0
 8017170:	6078      	str	r0, [r7, #4]
 8017172:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801717e:	3304      	adds	r3, #4
 8017180:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	899b      	ldrh	r3, [r3, #12]
 8017186:	0019      	movs	r1, r3
 8017188:	6838      	ldr	r0, [r7, #0]
 801718a:	f7e8 ffcd 	bl	8000128 <__udivsi3>
 801718e:	0003      	movs	r3, r0
 8017190:	001a      	movs	r2, r3
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	895b      	ldrh	r3, [r3, #10]
 8017196:	0019      	movs	r1, r3
 8017198:	0010      	movs	r0, r2
 801719a:	f7e8 ffc5 	bl	8000128 <__udivsi3>
 801719e:	0003      	movs	r3, r0
 80171a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	1d1a      	adds	r2, r3, #4
 80171a6:	613a      	str	r2, [r7, #16]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d101      	bne.n	80171b6 <clmt_clust+0x4c>
 80171b2:	2300      	movs	r3, #0
 80171b4:	e010      	b.n	80171d8 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 80171b6:	697a      	ldr	r2, [r7, #20]
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d307      	bcc.n	80171ce <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 80171be:	697a      	ldr	r2, [r7, #20]
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	1ad3      	subs	r3, r2, r3
 80171c4:	617b      	str	r3, [r7, #20]
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	3304      	adds	r3, #4
 80171ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80171cc:	e7e9      	b.n	80171a2 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 80171ce:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	697b      	ldr	r3, [r7, #20]
 80171d6:	18d3      	adds	r3, r2, r3
}
 80171d8:	0018      	movs	r0, r3
 80171da:	46bd      	mov	sp, r7
 80171dc:	b006      	add	sp, #24
 80171de:	bd80      	pop	{r7, pc}

080171e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80171e0:	b590      	push	{r4, r7, lr}
 80171e2:	b087      	sub	sp, #28
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80171f0:	683a      	ldr	r2, [r7, #0]
 80171f2:	2380      	movs	r3, #128	@ 0x80
 80171f4:	039b      	lsls	r3, r3, #14
 80171f6:	429a      	cmp	r2, r3
 80171f8:	d203      	bcs.n	8017202 <dir_sdi+0x22>
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	221f      	movs	r2, #31
 80171fe:	4013      	ands	r3, r2
 8017200:	d001      	beq.n	8017206 <dir_sdi+0x26>
		return FR_INT_ERR;
 8017202:	2302      	movs	r3, #2
 8017204:	e074      	b.n	80172f0 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	683a      	ldr	r2, [r7, #0]
 801720a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	689b      	ldr	r3, [r3, #8]
 8017210:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017212:	697b      	ldr	r3, [r7, #20]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d106      	bne.n	8017226 <dir_sdi+0x46>
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	2b02      	cmp	r3, #2
 801721e:	d902      	bls.n	8017226 <dir_sdi+0x46>
		clst = fs->dirbase;
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017224:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10c      	bne.n	8017246 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	095b      	lsrs	r3, r3, #5
 8017230:	693a      	ldr	r2, [r7, #16]
 8017232:	8912      	ldrh	r2, [r2, #8]
 8017234:	4293      	cmp	r3, r2
 8017236:	d301      	bcc.n	801723c <dir_sdi+0x5c>
 8017238:	2302      	movs	r3, #2
 801723a:	e059      	b.n	80172f0 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	61da      	str	r2, [r3, #28]
 8017244:	e02f      	b.n	80172a6 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	895b      	ldrh	r3, [r3, #10]
 801724a:	001a      	movs	r2, r3
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	899b      	ldrh	r3, [r3, #12]
 8017250:	4353      	muls	r3, r2
 8017252:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017254:	e01a      	b.n	801728c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	697a      	ldr	r2, [r7, #20]
 801725a:	0011      	movs	r1, r2
 801725c:	0018      	movs	r0, r3
 801725e:	f7ff fc61 	bl	8016b24 <get_fat>
 8017262:	0003      	movs	r3, r0
 8017264:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	3301      	adds	r3, #1
 801726a:	d101      	bne.n	8017270 <dir_sdi+0x90>
 801726c:	2301      	movs	r3, #1
 801726e:	e03f      	b.n	80172f0 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	2b01      	cmp	r3, #1
 8017274:	d904      	bls.n	8017280 <dir_sdi+0xa0>
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	699b      	ldr	r3, [r3, #24]
 801727a:	697a      	ldr	r2, [r7, #20]
 801727c:	429a      	cmp	r2, r3
 801727e:	d301      	bcc.n	8017284 <dir_sdi+0xa4>
 8017280:	2302      	movs	r3, #2
 8017282:	e035      	b.n	80172f0 <dir_sdi+0x110>
			ofs -= csz;
 8017284:	683a      	ldr	r2, [r7, #0]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	1ad3      	subs	r3, r2, r3
 801728a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801728c:	683a      	ldr	r2, [r7, #0]
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	429a      	cmp	r2, r3
 8017292:	d2e0      	bcs.n	8017256 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8017294:	697a      	ldr	r2, [r7, #20]
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	0011      	movs	r1, r2
 801729a:	0018      	movs	r0, r3
 801729c:	f7ff fc26 	bl	8016aec <clust2sect>
 80172a0:	0002      	movs	r2, r0
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	697a      	ldr	r2, [r7, #20]
 80172aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	69db      	ldr	r3, [r3, #28]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d101      	bne.n	80172b8 <dir_sdi+0xd8>
 80172b4:	2302      	movs	r3, #2
 80172b6:	e01b      	b.n	80172f0 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	69dc      	ldr	r4, [r3, #28]
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	899b      	ldrh	r3, [r3, #12]
 80172c0:	0019      	movs	r1, r3
 80172c2:	6838      	ldr	r0, [r7, #0]
 80172c4:	f7e8 ff30 	bl	8000128 <__udivsi3>
 80172c8:	0003      	movs	r3, r0
 80172ca:	18e2      	adds	r2, r4, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	3334      	adds	r3, #52	@ 0x34
 80172d4:	001c      	movs	r4, r3
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	899b      	ldrh	r3, [r3, #12]
 80172da:	001a      	movs	r2, r3
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	0011      	movs	r1, r2
 80172e0:	0018      	movs	r0, r3
 80172e2:	f7e8 ffa7 	bl	8000234 <__aeabi_uidivmod>
 80172e6:	000b      	movs	r3, r1
 80172e8:	18e2      	adds	r2, r4, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80172ee:	2300      	movs	r3, #0
}
 80172f0:	0018      	movs	r0, r3
 80172f2:	46bd      	mov	sp, r7
 80172f4:	b007      	add	sp, #28
 80172f6:	bd90      	pop	{r4, r7, pc}

080172f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80172f8:	b590      	push	{r4, r7, lr}
 80172fa:	b087      	sub	sp, #28
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	695b      	ldr	r3, [r3, #20]
 801730c:	3320      	adds	r3, #32
 801730e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	69db      	ldr	r3, [r3, #28]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d004      	beq.n	8017322 <dir_next+0x2a>
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	2380      	movs	r3, #128	@ 0x80
 801731c:	039b      	lsls	r3, r3, #14
 801731e:	429a      	cmp	r2, r3
 8017320:	d301      	bcc.n	8017326 <dir_next+0x2e>
 8017322:	2304      	movs	r3, #4
 8017324:	e0c0      	b.n	80174a8 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	899b      	ldrh	r3, [r3, #12]
 801732a:	001a      	movs	r2, r3
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	0011      	movs	r1, r2
 8017330:	0018      	movs	r0, r3
 8017332:	f7e8 ff7f 	bl	8000234 <__aeabi_uidivmod>
 8017336:	1e0b      	subs	r3, r1, #0
 8017338:	d000      	beq.n	801733c <dir_next+0x44>
 801733a:	e0a2      	b.n	8017482 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	69db      	ldr	r3, [r3, #28]
 8017340:	1c5a      	adds	r2, r3, #1
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	699b      	ldr	r3, [r3, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10b      	bne.n	8017366 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	095b      	lsrs	r3, r3, #5
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	8912      	ldrh	r2, [r2, #8]
 8017356:	4293      	cmp	r3, r2
 8017358:	d200      	bcs.n	801735c <dir_next+0x64>
 801735a:	e092      	b.n	8017482 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2200      	movs	r2, #0
 8017360:	61da      	str	r2, [r3, #28]
 8017362:	2304      	movs	r3, #4
 8017364:	e0a0      	b.n	80174a8 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	899b      	ldrh	r3, [r3, #12]
 801736a:	0019      	movs	r1, r3
 801736c:	68b8      	ldr	r0, [r7, #8]
 801736e:	f7e8 fedb 	bl	8000128 <__udivsi3>
 8017372:	0003      	movs	r3, r0
 8017374:	001a      	movs	r2, r3
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	895b      	ldrh	r3, [r3, #10]
 801737a:	3b01      	subs	r3, #1
 801737c:	4013      	ands	r3, r2
 801737e:	d000      	beq.n	8017382 <dir_next+0x8a>
 8017380:	e07f      	b.n	8017482 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	699b      	ldr	r3, [r3, #24]
 8017388:	0019      	movs	r1, r3
 801738a:	0010      	movs	r0, r2
 801738c:	f7ff fbca 	bl	8016b24 <get_fat>
 8017390:	0003      	movs	r3, r0
 8017392:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	2b01      	cmp	r3, #1
 8017398:	d801      	bhi.n	801739e <dir_next+0xa6>
 801739a:	2302      	movs	r3, #2
 801739c:	e084      	b.n	80174a8 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	3301      	adds	r3, #1
 80173a2:	d101      	bne.n	80173a8 <dir_next+0xb0>
 80173a4:	2301      	movs	r3, #1
 80173a6:	e07f      	b.n	80174a8 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	699b      	ldr	r3, [r3, #24]
 80173ac:	697a      	ldr	r2, [r7, #20]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d35b      	bcc.n	801746a <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d104      	bne.n	80173c2 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2200      	movs	r2, #0
 80173bc:	61da      	str	r2, [r3, #28]
 80173be:	2304      	movs	r3, #4
 80173c0:	e072      	b.n	80174a8 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80173c2:	687a      	ldr	r2, [r7, #4]
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	699b      	ldr	r3, [r3, #24]
 80173c8:	0019      	movs	r1, r3
 80173ca:	0010      	movs	r0, r2
 80173cc:	f7ff fe27 	bl	801701e <create_chain>
 80173d0:	0003      	movs	r3, r0
 80173d2:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d101      	bne.n	80173de <dir_next+0xe6>
 80173da:	2307      	movs	r3, #7
 80173dc:	e064      	b.n	80174a8 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80173de:	697b      	ldr	r3, [r7, #20]
 80173e0:	2b01      	cmp	r3, #1
 80173e2:	d101      	bne.n	80173e8 <dir_next+0xf0>
 80173e4:	2302      	movs	r3, #2
 80173e6:	e05f      	b.n	80174a8 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80173e8:	697b      	ldr	r3, [r7, #20]
 80173ea:	3301      	adds	r3, #1
 80173ec:	d101      	bne.n	80173f2 <dir_next+0xfa>
 80173ee:	2301      	movs	r3, #1
 80173f0:	e05a      	b.n	80174a8 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	0018      	movs	r0, r3
 80173f6:	f7ff fa7f 	bl	80168f8 <sync_window>
 80173fa:	1e03      	subs	r3, r0, #0
 80173fc:	d001      	beq.n	8017402 <dir_next+0x10a>
 80173fe:	2301      	movs	r3, #1
 8017400:	e052      	b.n	80174a8 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	3334      	adds	r3, #52	@ 0x34
 8017406:	0018      	movs	r0, r3
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	899b      	ldrh	r3, [r3, #12]
 801740c:	001a      	movs	r2, r3
 801740e:	2100      	movs	r1, #0
 8017410:	f7ff f8b1 	bl	8016576 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017414:	2300      	movs	r3, #0
 8017416:	613b      	str	r3, [r7, #16]
 8017418:	697a      	ldr	r2, [r7, #20]
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	0011      	movs	r1, r2
 801741e:	0018      	movs	r0, r3
 8017420:	f7ff fb64 	bl	8016aec <clust2sect>
 8017424:	0002      	movs	r2, r0
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	631a      	str	r2, [r3, #48]	@ 0x30
 801742a:	e012      	b.n	8017452 <dir_next+0x15a>
						fs->wflag = 1;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	2201      	movs	r2, #1
 8017430:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	0018      	movs	r0, r3
 8017436:	f7ff fa5f 	bl	80168f8 <sync_window>
 801743a:	1e03      	subs	r3, r0, #0
 801743c:	d001      	beq.n	8017442 <dir_next+0x14a>
 801743e:	2301      	movs	r3, #1
 8017440:	e032      	b.n	80174a8 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	3301      	adds	r3, #1
 8017446:	613b      	str	r3, [r7, #16]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801744c:	1c5a      	adds	r2, r3, #1
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	631a      	str	r2, [r3, #48]	@ 0x30
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	895b      	ldrh	r3, [r3, #10]
 8017456:	001a      	movs	r2, r3
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	4293      	cmp	r3, r2
 801745c:	d3e6      	bcc.n	801742c <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	1ad2      	subs	r2, r2, r3
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	697a      	ldr	r2, [r7, #20]
 801746e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017470:	697a      	ldr	r2, [r7, #20]
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	0011      	movs	r1, r2
 8017476:	0018      	movs	r0, r3
 8017478:	f7ff fb38 	bl	8016aec <clust2sect>
 801747c:	0002      	movs	r2, r0
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	68ba      	ldr	r2, [r7, #8]
 8017486:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	3334      	adds	r3, #52	@ 0x34
 801748c:	001c      	movs	r4, r3
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	899b      	ldrh	r3, [r3, #12]
 8017492:	001a      	movs	r2, r3
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	0011      	movs	r1, r2
 8017498:	0018      	movs	r0, r3
 801749a:	f7e8 fecb 	bl	8000234 <__aeabi_uidivmod>
 801749e:	000b      	movs	r3, r1
 80174a0:	18e2      	adds	r2, r4, r3
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80174a6:	2300      	movs	r3, #0
}
 80174a8:	0018      	movs	r0, r3
 80174aa:	46bd      	mov	sp, r7
 80174ac:	b007      	add	sp, #28
 80174ae:	bd90      	pop	{r4, r7, pc}

080174b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80174b0:	b5b0      	push	{r4, r5, r7, lr}
 80174b2:	b086      	sub	sp, #24
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80174c0:	2517      	movs	r5, #23
 80174c2:	197c      	adds	r4, r7, r5
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2100      	movs	r1, #0
 80174c8:	0018      	movs	r0, r3
 80174ca:	f7ff fe89 	bl	80171e0 <dir_sdi>
 80174ce:	0003      	movs	r3, r0
 80174d0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80174d2:	197b      	adds	r3, r7, r5
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d133      	bne.n	8017542 <dir_alloc+0x92>
		n = 0;
 80174da:	2300      	movs	r3, #0
 80174dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	69da      	ldr	r2, [r3, #28]
 80174e2:	2517      	movs	r5, #23
 80174e4:	197c      	adds	r4, r7, r5
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	0011      	movs	r1, r2
 80174ea:	0018      	movs	r0, r3
 80174ec:	f7ff fa4c 	bl	8016988 <move_window>
 80174f0:	0003      	movs	r3, r0
 80174f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80174f4:	197b      	adds	r3, r7, r5
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d121      	bne.n	8017540 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	6a1b      	ldr	r3, [r3, #32]
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	2be5      	cmp	r3, #229	@ 0xe5
 8017504:	d004      	beq.n	8017510 <dir_alloc+0x60>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6a1b      	ldr	r3, [r3, #32]
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d107      	bne.n	8017520 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	3301      	adds	r3, #1
 8017514:	613b      	str	r3, [r7, #16]
 8017516:	693a      	ldr	r2, [r7, #16]
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	429a      	cmp	r2, r3
 801751c:	d102      	bne.n	8017524 <dir_alloc+0x74>
 801751e:	e010      	b.n	8017542 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017520:	2300      	movs	r3, #0
 8017522:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017524:	2517      	movs	r5, #23
 8017526:	197c      	adds	r4, r7, r5
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2101      	movs	r1, #1
 801752c:	0018      	movs	r0, r3
 801752e:	f7ff fee3 	bl	80172f8 <dir_next>
 8017532:	0003      	movs	r3, r0
 8017534:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017536:	197b      	adds	r3, r7, r5
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d0cf      	beq.n	80174de <dir_alloc+0x2e>
 801753e:	e000      	b.n	8017542 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8017540:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017542:	2217      	movs	r2, #23
 8017544:	18bb      	adds	r3, r7, r2
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	2b04      	cmp	r3, #4
 801754a:	d102      	bne.n	8017552 <dir_alloc+0xa2>
 801754c:	18bb      	adds	r3, r7, r2
 801754e:	2207      	movs	r2, #7
 8017550:	701a      	strb	r2, [r3, #0]
	return res;
 8017552:	2317      	movs	r3, #23
 8017554:	18fb      	adds	r3, r7, r3
 8017556:	781b      	ldrb	r3, [r3, #0]
}
 8017558:	0018      	movs	r0, r3
 801755a:	46bd      	mov	sp, r7
 801755c:	b006      	add	sp, #24
 801755e:	bdb0      	pop	{r4, r5, r7, pc}

08017560 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	331a      	adds	r3, #26
 801756e:	0018      	movs	r0, r3
 8017570:	f7fe ff5e 	bl	8016430 <ld_word>
 8017574:	0003      	movs	r3, r0
 8017576:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	2b03      	cmp	r3, #3
 801757e:	d109      	bne.n	8017594 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	3314      	adds	r3, #20
 8017584:	0018      	movs	r0, r3
 8017586:	f7fe ff53 	bl	8016430 <ld_word>
 801758a:	0003      	movs	r3, r0
 801758c:	041b      	lsls	r3, r3, #16
 801758e:	68fa      	ldr	r2, [r7, #12]
 8017590:	4313      	orrs	r3, r2
 8017592:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017594:	68fb      	ldr	r3, [r7, #12]
}
 8017596:	0018      	movs	r0, r3
 8017598:	46bd      	mov	sp, r7
 801759a:	b004      	add	sp, #16
 801759c:	bd80      	pop	{r7, pc}

0801759e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801759e:	b580      	push	{r7, lr}
 80175a0:	b084      	sub	sp, #16
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	60f8      	str	r0, [r7, #12]
 80175a6:	60b9      	str	r1, [r7, #8]
 80175a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	331a      	adds	r3, #26
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	b292      	uxth	r2, r2
 80175b2:	0011      	movs	r1, r2
 80175b4:	0018      	movs	r0, r3
 80175b6:	f7fe ff77 	bl	80164a8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d109      	bne.n	80175d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	3314      	adds	r3, #20
 80175c6:	001a      	movs	r2, r3
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	0c1b      	lsrs	r3, r3, #16
 80175cc:	b29b      	uxth	r3, r3
 80175ce:	0019      	movs	r1, r3
 80175d0:	0010      	movs	r0, r2
 80175d2:	f7fe ff69 	bl	80164a8 <st_word>
	}
}
 80175d6:	46c0      	nop			@ (mov r8, r8)
 80175d8:	46bd      	mov	sp, r7
 80175da:	b004      	add	sp, #16
 80175dc:	bd80      	pop	{r7, pc}

080175de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80175de:	b5b0      	push	{r4, r5, r7, lr}
 80175e0:	b086      	sub	sp, #24
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80175ec:	2517      	movs	r5, #23
 80175ee:	197c      	adds	r4, r7, r5
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2100      	movs	r1, #0
 80175f4:	0018      	movs	r0, r3
 80175f6:	f7ff fdf3 	bl	80171e0 <dir_sdi>
 80175fa:	0003      	movs	r3, r0
 80175fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80175fe:	197b      	adds	r3, r7, r5
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d002      	beq.n	801760c <dir_find+0x2e>
 8017606:	197b      	adds	r3, r7, r5
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	e04c      	b.n	80176a6 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	69da      	ldr	r2, [r3, #28]
 8017610:	2517      	movs	r5, #23
 8017612:	197c      	adds	r4, r7, r5
 8017614:	693b      	ldr	r3, [r7, #16]
 8017616:	0011      	movs	r1, r2
 8017618:	0018      	movs	r0, r3
 801761a:	f7ff f9b5 	bl	8016988 <move_window>
 801761e:	0003      	movs	r3, r0
 8017620:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8017622:	0029      	movs	r1, r5
 8017624:	187b      	adds	r3, r7, r1
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d136      	bne.n	801769a <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6a1a      	ldr	r2, [r3, #32]
 8017630:	200f      	movs	r0, #15
 8017632:	183b      	adds	r3, r7, r0
 8017634:	7812      	ldrb	r2, [r2, #0]
 8017636:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017638:	183b      	adds	r3, r7, r0
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d103      	bne.n	8017648 <dir_find+0x6a>
 8017640:	187b      	adds	r3, r7, r1
 8017642:	2204      	movs	r2, #4
 8017644:	701a      	strb	r2, [r3, #0]
 8017646:	e02b      	b.n	80176a0 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6a1b      	ldr	r3, [r3, #32]
 801764c:	330b      	adds	r3, #11
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	223f      	movs	r2, #63	@ 0x3f
 8017652:	4013      	ands	r3, r2
 8017654:	b2da      	uxtb	r2, r3
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6a1b      	ldr	r3, [r3, #32]
 801765e:	330b      	adds	r3, #11
 8017660:	781b      	ldrb	r3, [r3, #0]
 8017662:	001a      	movs	r2, r3
 8017664:	2308      	movs	r3, #8
 8017666:	4013      	ands	r3, r2
 8017668:	d109      	bne.n	801767e <dir_find+0xa0>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	6a18      	ldr	r0, [r3, #32]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	3324      	adds	r3, #36	@ 0x24
 8017672:	220b      	movs	r2, #11
 8017674:	0019      	movs	r1, r3
 8017676:	f7fe ff97 	bl	80165a8 <mem_cmp>
 801767a:	1e03      	subs	r3, r0, #0
 801767c:	d00f      	beq.n	801769e <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801767e:	2517      	movs	r5, #23
 8017680:	197c      	adds	r4, r7, r5
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2100      	movs	r1, #0
 8017686:	0018      	movs	r0, r3
 8017688:	f7ff fe36 	bl	80172f8 <dir_next>
 801768c:	0003      	movs	r3, r0
 801768e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8017690:	197b      	adds	r3, r7, r5
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d0b9      	beq.n	801760c <dir_find+0x2e>
 8017698:	e002      	b.n	80176a0 <dir_find+0xc2>
		if (res != FR_OK) break;
 801769a:	46c0      	nop			@ (mov r8, r8)
 801769c:	e000      	b.n	80176a0 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801769e:	46c0      	nop			@ (mov r8, r8)

	return res;
 80176a0:	2317      	movs	r3, #23
 80176a2:	18fb      	adds	r3, r7, r3
 80176a4:	781b      	ldrb	r3, [r3, #0]
}
 80176a6:	0018      	movs	r0, r3
 80176a8:	46bd      	mov	sp, r7
 80176aa:	b006      	add	sp, #24
 80176ac:	bdb0      	pop	{r4, r5, r7, pc}

080176ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80176ae:	b5b0      	push	{r4, r5, r7, lr}
 80176b0:	b084      	sub	sp, #16
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80176bc:	250f      	movs	r5, #15
 80176be:	197c      	adds	r4, r7, r5
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2101      	movs	r1, #1
 80176c4:	0018      	movs	r0, r3
 80176c6:	f7ff fef3 	bl	80174b0 <dir_alloc>
 80176ca:	0003      	movs	r3, r0
 80176cc:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80176ce:	197b      	adds	r3, r7, r5
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d11f      	bne.n	8017716 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	69da      	ldr	r2, [r3, #28]
 80176da:	197c      	adds	r4, r7, r5
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	0011      	movs	r1, r2
 80176e0:	0018      	movs	r0, r3
 80176e2:	f7ff f951 	bl	8016988 <move_window>
 80176e6:	0003      	movs	r3, r0
 80176e8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80176ea:	197b      	adds	r3, r7, r5
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d111      	bne.n	8017716 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6a1b      	ldr	r3, [r3, #32]
 80176f6:	2220      	movs	r2, #32
 80176f8:	2100      	movs	r1, #0
 80176fa:	0018      	movs	r0, r3
 80176fc:	f7fe ff3b 	bl	8016576 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6a18      	ldr	r0, [r3, #32]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	3324      	adds	r3, #36	@ 0x24
 8017708:	220b      	movs	r2, #11
 801770a:	0019      	movs	r1, r3
 801770c:	f7fe ff14 	bl	8016538 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	2201      	movs	r2, #1
 8017714:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017716:	230f      	movs	r3, #15
 8017718:	18fb      	adds	r3, r7, r3
 801771a:	781b      	ldrb	r3, [r3, #0]
}
 801771c:	0018      	movs	r0, r3
 801771e:	46bd      	mov	sp, r7
 8017720:	b004      	add	sp, #16
 8017722:	bdb0      	pop	{r4, r5, r7, pc}

08017724 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b088      	sub	sp, #32
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	60fb      	str	r3, [r7, #12]
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	3324      	adds	r3, #36	@ 0x24
 8017738:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	220b      	movs	r2, #11
 801773e:	2120      	movs	r1, #32
 8017740:	0018      	movs	r0, r3
 8017742:	f7fe ff18 	bl	8016576 <mem_set>
	si = i = 0; ni = 8;
 8017746:	2300      	movs	r3, #0
 8017748:	613b      	str	r3, [r7, #16]
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	61fb      	str	r3, [r7, #28]
 801774e:	2308      	movs	r3, #8
 8017750:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017752:	69fb      	ldr	r3, [r7, #28]
 8017754:	1c5a      	adds	r2, r3, #1
 8017756:	61fa      	str	r2, [r7, #28]
 8017758:	68fa      	ldr	r2, [r7, #12]
 801775a:	18d2      	adds	r2, r2, r3
 801775c:	211b      	movs	r1, #27
 801775e:	187b      	adds	r3, r7, r1
 8017760:	7812      	ldrb	r2, [r2, #0]
 8017762:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017764:	000a      	movs	r2, r1
 8017766:	18bb      	adds	r3, r7, r2
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	2b20      	cmp	r3, #32
 801776c:	d800      	bhi.n	8017770 <create_name+0x4c>
 801776e:	e062      	b.n	8017836 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017770:	18bb      	adds	r3, r7, r2
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	2b2f      	cmp	r3, #47	@ 0x2f
 8017776:	d007      	beq.n	8017788 <create_name+0x64>
 8017778:	18bb      	adds	r3, r7, r2
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	2b5c      	cmp	r3, #92	@ 0x5c
 801777e:	d110      	bne.n	80177a2 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017780:	e002      	b.n	8017788 <create_name+0x64>
 8017782:	69fb      	ldr	r3, [r7, #28]
 8017784:	3301      	adds	r3, #1
 8017786:	61fb      	str	r3, [r7, #28]
 8017788:	68fa      	ldr	r2, [r7, #12]
 801778a:	69fb      	ldr	r3, [r7, #28]
 801778c:	18d3      	adds	r3, r2, r3
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	2b2f      	cmp	r3, #47	@ 0x2f
 8017792:	d0f6      	beq.n	8017782 <create_name+0x5e>
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	69fb      	ldr	r3, [r7, #28]
 8017798:	18d3      	adds	r3, r2, r3
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	2b5c      	cmp	r3, #92	@ 0x5c
 801779e:	d0f0      	beq.n	8017782 <create_name+0x5e>
			break;
 80177a0:	e04a      	b.n	8017838 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80177a2:	231b      	movs	r3, #27
 80177a4:	18fb      	adds	r3, r7, r3
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80177aa:	d003      	beq.n	80177b4 <create_name+0x90>
 80177ac:	693a      	ldr	r2, [r7, #16]
 80177ae:	697b      	ldr	r3, [r7, #20]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d30e      	bcc.n	80177d2 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	2b0b      	cmp	r3, #11
 80177b8:	d004      	beq.n	80177c4 <create_name+0xa0>
 80177ba:	231b      	movs	r3, #27
 80177bc:	18fb      	adds	r3, r7, r3
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80177c2:	d001      	beq.n	80177c8 <create_name+0xa4>
 80177c4:	2306      	movs	r3, #6
 80177c6:	e054      	b.n	8017872 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80177c8:	2308      	movs	r3, #8
 80177ca:	613b      	str	r3, [r7, #16]
 80177cc:	230b      	movs	r3, #11
 80177ce:	617b      	str	r3, [r7, #20]
			continue;
 80177d0:	e030      	b.n	8017834 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80177d2:	211b      	movs	r1, #27
 80177d4:	187b      	adds	r3, r7, r1
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	b25b      	sxtb	r3, r3
 80177da:	2b00      	cmp	r3, #0
 80177dc:	da07      	bge.n	80177ee <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80177de:	187b      	adds	r3, r7, r1
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	3b80      	subs	r3, #128	@ 0x80
 80177e4:	001a      	movs	r2, r3
 80177e6:	187b      	adds	r3, r7, r1
 80177e8:	4924      	ldr	r1, [pc, #144]	@ (801787c <create_name+0x158>)
 80177ea:	5c8a      	ldrb	r2, [r1, r2]
 80177ec:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80177ee:	231b      	movs	r3, #27
 80177f0:	18fb      	adds	r3, r7, r3
 80177f2:	781a      	ldrb	r2, [r3, #0]
 80177f4:	4b22      	ldr	r3, [pc, #136]	@ (8017880 <create_name+0x15c>)
 80177f6:	0011      	movs	r1, r2
 80177f8:	0018      	movs	r0, r3
 80177fa:	f7fe fefa 	bl	80165f2 <chk_chr>
 80177fe:	1e03      	subs	r3, r0, #0
 8017800:	d001      	beq.n	8017806 <create_name+0xe2>
 8017802:	2306      	movs	r3, #6
 8017804:	e035      	b.n	8017872 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017806:	221b      	movs	r2, #27
 8017808:	18bb      	adds	r3, r7, r2
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	2b60      	cmp	r3, #96	@ 0x60
 801780e:	d908      	bls.n	8017822 <create_name+0xfe>
 8017810:	18bb      	adds	r3, r7, r2
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	2b7a      	cmp	r3, #122	@ 0x7a
 8017816:	d804      	bhi.n	8017822 <create_name+0xfe>
 8017818:	18bb      	adds	r3, r7, r2
 801781a:	18ba      	adds	r2, r7, r2
 801781c:	7812      	ldrb	r2, [r2, #0]
 801781e:	3a20      	subs	r2, #32
 8017820:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	1c5a      	adds	r2, r3, #1
 8017826:	613a      	str	r2, [r7, #16]
 8017828:	68ba      	ldr	r2, [r7, #8]
 801782a:	18d3      	adds	r3, r2, r3
 801782c:	221b      	movs	r2, #27
 801782e:	18ba      	adds	r2, r7, r2
 8017830:	7812      	ldrb	r2, [r2, #0]
 8017832:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017834:	e78d      	b.n	8017752 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017836:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017838:	68fa      	ldr	r2, [r7, #12]
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	18d2      	adds	r2, r2, r3
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d101      	bne.n	801784c <create_name+0x128>
 8017848:	2306      	movs	r3, #6
 801784a:	e012      	b.n	8017872 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2be5      	cmp	r3, #229	@ 0xe5
 8017852:	d102      	bne.n	801785a <create_name+0x136>
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	2205      	movs	r2, #5
 8017858:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801785a:	231b      	movs	r3, #27
 801785c:	18fb      	adds	r3, r7, r3
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	2b20      	cmp	r3, #32
 8017862:	d801      	bhi.n	8017868 <create_name+0x144>
 8017864:	2204      	movs	r2, #4
 8017866:	e000      	b.n	801786a <create_name+0x146>
 8017868:	2200      	movs	r2, #0
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	330b      	adds	r3, #11
 801786e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017870:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017872:	0018      	movs	r0, r3
 8017874:	46bd      	mov	sp, r7
 8017876:	b008      	add	sp, #32
 8017878:	bd80      	pop	{r7, pc}
 801787a:	46c0      	nop			@ (mov r8, r8)
 801787c:	0801a1a8 	.word	0x0801a1a8
 8017880:	08019ee8 	.word	0x08019ee8

08017884 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017884:	b5b0      	push	{r4, r5, r7, lr}
 8017886:	b086      	sub	sp, #24
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017898:	e002      	b.n	80178a0 <follow_path+0x1c>
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	3301      	adds	r3, #1
 801789e:	603b      	str	r3, [r7, #0]
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80178a6:	d0f8      	beq.n	801789a <follow_path+0x16>
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80178ae:	d0f4      	beq.n	801789a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	2200      	movs	r2, #0
 80178b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	781b      	ldrb	r3, [r3, #0]
 80178ba:	2b1f      	cmp	r3, #31
 80178bc:	d80d      	bhi.n	80178da <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	222f      	movs	r2, #47	@ 0x2f
 80178c2:	2180      	movs	r1, #128	@ 0x80
 80178c4:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80178c6:	2317      	movs	r3, #23
 80178c8:	18fc      	adds	r4, r7, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2100      	movs	r1, #0
 80178ce:	0018      	movs	r0, r3
 80178d0:	f7ff fc86 	bl	80171e0 <dir_sdi>
 80178d4:	0003      	movs	r3, r0
 80178d6:	7023      	strb	r3, [r4, #0]
 80178d8:	e057      	b.n	801798a <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80178da:	2517      	movs	r5, #23
 80178dc:	197c      	adds	r4, r7, r5
 80178de:	003a      	movs	r2, r7
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	0011      	movs	r1, r2
 80178e4:	0018      	movs	r0, r3
 80178e6:	f7ff ff1d 	bl	8017724 <create_name>
 80178ea:	0003      	movs	r3, r0
 80178ec:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80178ee:	197b      	adds	r3, r7, r5
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d144      	bne.n	8017980 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 80178f6:	197c      	adds	r4, r7, r5
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	0018      	movs	r0, r3
 80178fc:	f7ff fe6f 	bl	80175de <dir_find>
 8017900:	0003      	movs	r3, r0
 8017902:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8017904:	200b      	movs	r0, #11
 8017906:	183b      	adds	r3, r7, r0
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	212f      	movs	r1, #47	@ 0x2f
 801790c:	5c52      	ldrb	r2, [r2, r1]
 801790e:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8017910:	197b      	adds	r3, r7, r5
 8017912:	781b      	ldrb	r3, [r3, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d00c      	beq.n	8017932 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017918:	197b      	adds	r3, r7, r5
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b04      	cmp	r3, #4
 801791e:	d131      	bne.n	8017984 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017920:	183b      	adds	r3, r7, r0
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	2204      	movs	r2, #4
 8017926:	4013      	ands	r3, r2
 8017928:	d12c      	bne.n	8017984 <follow_path+0x100>
 801792a:	197b      	adds	r3, r7, r5
 801792c:	2205      	movs	r2, #5
 801792e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8017930:	e028      	b.n	8017984 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017932:	230b      	movs	r3, #11
 8017934:	18fb      	adds	r3, r7, r3
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	2204      	movs	r2, #4
 801793a:	4013      	ands	r3, r2
 801793c:	d124      	bne.n	8017988 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	799b      	ldrb	r3, [r3, #6]
 8017942:	001a      	movs	r2, r3
 8017944:	2310      	movs	r3, #16
 8017946:	4013      	ands	r3, r2
 8017948:	d104      	bne.n	8017954 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 801794a:	2317      	movs	r3, #23
 801794c:	18fb      	adds	r3, r7, r3
 801794e:	2205      	movs	r2, #5
 8017950:	701a      	strb	r2, [r3, #0]
 8017952:	e01a      	b.n	801798a <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	3334      	adds	r3, #52	@ 0x34
 8017958:	001c      	movs	r4, r3
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	695a      	ldr	r2, [r3, #20]
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	899b      	ldrh	r3, [r3, #12]
 8017962:	0019      	movs	r1, r3
 8017964:	0010      	movs	r0, r2
 8017966:	f7e8 fc65 	bl	8000234 <__aeabi_uidivmod>
 801796a:	000b      	movs	r3, r1
 801796c:	18e2      	adds	r2, r4, r3
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	0011      	movs	r1, r2
 8017972:	0018      	movs	r0, r3
 8017974:	f7ff fdf4 	bl	8017560 <ld_clust>
 8017978:	0002      	movs	r2, r0
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801797e:	e7ac      	b.n	80178da <follow_path+0x56>
			if (res != FR_OK) break;
 8017980:	46c0      	nop			@ (mov r8, r8)
 8017982:	e002      	b.n	801798a <follow_path+0x106>
				break;
 8017984:	46c0      	nop			@ (mov r8, r8)
 8017986:	e000      	b.n	801798a <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017988:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 801798a:	2317      	movs	r3, #23
 801798c:	18fb      	adds	r3, r7, r3
 801798e:	781b      	ldrb	r3, [r3, #0]
}
 8017990:	0018      	movs	r0, r3
 8017992:	46bd      	mov	sp, r7
 8017994:	b006      	add	sp, #24
 8017996:	bdb0      	pop	{r4, r5, r7, pc}

08017998 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80179a0:	2301      	movs	r3, #1
 80179a2:	425b      	negs	r3, r3
 80179a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d031      	beq.n	8017a12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	617b      	str	r3, [r7, #20]
 80179b4:	e002      	b.n	80179bc <get_ldnumber+0x24>
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	3301      	adds	r3, #1
 80179ba:	617b      	str	r3, [r7, #20]
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	2b20      	cmp	r3, #32
 80179c2:	d903      	bls.n	80179cc <get_ldnumber+0x34>
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	781b      	ldrb	r3, [r3, #0]
 80179c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80179ca:	d1f4      	bne.n	80179b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80179d2:	d11c      	bne.n	8017a0e <get_ldnumber+0x76>
			tp = *path;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	1c5a      	adds	r2, r3, #1
 80179de:	60fa      	str	r2, [r7, #12]
 80179e0:	781b      	ldrb	r3, [r3, #0]
 80179e2:	3b30      	subs	r3, #48	@ 0x30
 80179e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	2b09      	cmp	r3, #9
 80179ea:	d80e      	bhi.n	8017a0a <get_ldnumber+0x72>
 80179ec:	68fa      	ldr	r2, [r7, #12]
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d10a      	bne.n	8017a0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d107      	bne.n	8017a0a <get_ldnumber+0x72>
					vol = (int)i;
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	3301      	adds	r3, #1
 8017a02:	617b      	str	r3, [r7, #20]
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	697a      	ldr	r2, [r7, #20]
 8017a08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017a0a:	693b      	ldr	r3, [r7, #16]
 8017a0c:	e002      	b.n	8017a14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017a0e:	2300      	movs	r3, #0
 8017a10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017a12:	693b      	ldr	r3, [r7, #16]
}
 8017a14:	0018      	movs	r0, r3
 8017a16:	46bd      	mov	sp, r7
 8017a18:	b006      	add	sp, #24
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2200      	movs	r2, #0
 8017a2a:	70da      	strb	r2, [r3, #3]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2201      	movs	r2, #1
 8017a30:	4252      	negs	r2, r2
 8017a32:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017a34:	683a      	ldr	r2, [r7, #0]
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	0011      	movs	r1, r2
 8017a3a:	0018      	movs	r0, r3
 8017a3c:	f7fe ffa4 	bl	8016988 <move_window>
 8017a40:	1e03      	subs	r3, r0, #0
 8017a42:	d001      	beq.n	8017a48 <check_fs+0x2c>
 8017a44:	2304      	movs	r3, #4
 8017a46:	e037      	b.n	8017ab8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	3334      	adds	r3, #52	@ 0x34
 8017a4c:	33ff      	adds	r3, #255	@ 0xff
 8017a4e:	33ff      	adds	r3, #255	@ 0xff
 8017a50:	0018      	movs	r0, r3
 8017a52:	f7fe fced 	bl	8016430 <ld_word>
 8017a56:	0003      	movs	r3, r0
 8017a58:	001a      	movs	r2, r3
 8017a5a:	4b19      	ldr	r3, [pc, #100]	@ (8017ac0 <check_fs+0xa4>)
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d001      	beq.n	8017a64 <check_fs+0x48>
 8017a60:	2303      	movs	r3, #3
 8017a62:	e029      	b.n	8017ab8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2234      	movs	r2, #52	@ 0x34
 8017a68:	5c9b      	ldrb	r3, [r3, r2]
 8017a6a:	2be9      	cmp	r3, #233	@ 0xe9
 8017a6c:	d009      	beq.n	8017a82 <check_fs+0x66>
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2234      	movs	r2, #52	@ 0x34
 8017a72:	5c9b      	ldrb	r3, [r3, r2]
 8017a74:	2beb      	cmp	r3, #235	@ 0xeb
 8017a76:	d11e      	bne.n	8017ab6 <check_fs+0x9a>
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2236      	movs	r2, #54	@ 0x36
 8017a7c:	5c9b      	ldrb	r3, [r3, r2]
 8017a7e:	2b90      	cmp	r3, #144	@ 0x90
 8017a80:	d119      	bne.n	8017ab6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	3334      	adds	r3, #52	@ 0x34
 8017a86:	3336      	adds	r3, #54	@ 0x36
 8017a88:	0018      	movs	r0, r3
 8017a8a:	f7fe fcec 	bl	8016466 <ld_dword>
 8017a8e:	0003      	movs	r3, r0
 8017a90:	021b      	lsls	r3, r3, #8
 8017a92:	0a1b      	lsrs	r3, r3, #8
 8017a94:	4a0b      	ldr	r2, [pc, #44]	@ (8017ac4 <check_fs+0xa8>)
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d101      	bne.n	8017a9e <check_fs+0x82>
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	e00c      	b.n	8017ab8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	3334      	adds	r3, #52	@ 0x34
 8017aa2:	3352      	adds	r3, #82	@ 0x52
 8017aa4:	0018      	movs	r0, r3
 8017aa6:	f7fe fcde 	bl	8016466 <ld_dword>
 8017aaa:	0003      	movs	r3, r0
 8017aac:	4a06      	ldr	r2, [pc, #24]	@ (8017ac8 <check_fs+0xac>)
 8017aae:	4293      	cmp	r3, r2
 8017ab0:	d101      	bne.n	8017ab6 <check_fs+0x9a>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	e000      	b.n	8017ab8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017ab6:	2302      	movs	r3, #2
}
 8017ab8:	0018      	movs	r0, r3
 8017aba:	46bd      	mov	sp, r7
 8017abc:	b002      	add	sp, #8
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	0000aa55 	.word	0x0000aa55
 8017ac4:	00544146 	.word	0x00544146
 8017ac8:	33544146 	.word	0x33544146

08017acc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017acc:	b5b0      	push	{r4, r5, r7, lr}
 8017ace:	b096      	sub	sp, #88	@ 0x58
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	60b9      	str	r1, [r7, #8]
 8017ad6:	1dfb      	adds	r3, r7, #7
 8017ad8:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	2200      	movs	r2, #0
 8017ade:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	0018      	movs	r0, r3
 8017ae4:	f7ff ff58 	bl	8017998 <get_ldnumber>
 8017ae8:	0003      	movs	r3, r0
 8017aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	da01      	bge.n	8017af6 <find_volume+0x2a>
 8017af2:	230b      	movs	r3, #11
 8017af4:	e280      	b.n	8017ff8 <find_volume+0x52c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017af6:	4bc2      	ldr	r3, [pc, #776]	@ (8017e00 <find_volume+0x334>)
 8017af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017afa:	0092      	lsls	r2, r2, #2
 8017afc:	58d3      	ldr	r3, [r2, r3]
 8017afe:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d101      	bne.n	8017b0a <find_volume+0x3e>
 8017b06:	230c      	movs	r3, #12
 8017b08:	e276      	b.n	8017ff8 <find_volume+0x52c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017b0a:	68bb      	ldr	r3, [r7, #8]
 8017b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017b0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017b10:	1dfb      	adds	r3, r7, #7
 8017b12:	1dfa      	adds	r2, r7, #7
 8017b14:	7812      	ldrb	r2, [r2, #0]
 8017b16:	2101      	movs	r1, #1
 8017b18:	438a      	bics	r2, r1
 8017b1a:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d01b      	beq.n	8017b5c <find_volume+0x90>
		stat = disk_status(fs->drv);
 8017b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b26:	785b      	ldrb	r3, [r3, #1]
 8017b28:	2537      	movs	r5, #55	@ 0x37
 8017b2a:	197c      	adds	r4, r7, r5
 8017b2c:	0018      	movs	r0, r3
 8017b2e:	f7fe fbb5 	bl	801629c <disk_status>
 8017b32:	0003      	movs	r3, r0
 8017b34:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017b36:	0029      	movs	r1, r5
 8017b38:	187b      	adds	r3, r7, r1
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2201      	movs	r2, #1
 8017b3e:	4013      	ands	r3, r2
 8017b40:	d10c      	bne.n	8017b5c <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017b42:	1dfb      	adds	r3, r7, #7
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d006      	beq.n	8017b58 <find_volume+0x8c>
 8017b4a:	187b      	adds	r3, r7, r1
 8017b4c:	781b      	ldrb	r3, [r3, #0]
 8017b4e:	2204      	movs	r2, #4
 8017b50:	4013      	ands	r3, r2
 8017b52:	d001      	beq.n	8017b58 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8017b54:	230a      	movs	r3, #10
 8017b56:	e24f      	b.n	8017ff8 <find_volume+0x52c>
			}
			return FR_OK;				/* The file system object is valid */
 8017b58:	2300      	movs	r3, #0
 8017b5a:	e24d      	b.n	8017ff8 <find_volume+0x52c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b5e:	2200      	movs	r2, #0
 8017b60:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b64:	b2da      	uxtb	r2, r3
 8017b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b68:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b6c:	785b      	ldrb	r3, [r3, #1]
 8017b6e:	2537      	movs	r5, #55	@ 0x37
 8017b70:	197c      	adds	r4, r7, r5
 8017b72:	0018      	movs	r0, r3
 8017b74:	f7fe fbb4 	bl	80162e0 <disk_initialize>
 8017b78:	0003      	movs	r3, r0
 8017b7a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017b7c:	197b      	adds	r3, r7, r5
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	2201      	movs	r2, #1
 8017b82:	4013      	ands	r3, r2
 8017b84:	d001      	beq.n	8017b8a <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017b86:	2303      	movs	r3, #3
 8017b88:	e236      	b.n	8017ff8 <find_volume+0x52c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017b8a:	1dfb      	adds	r3, r7, #7
 8017b8c:	781b      	ldrb	r3, [r3, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d007      	beq.n	8017ba2 <find_volume+0xd6>
 8017b92:	2337      	movs	r3, #55	@ 0x37
 8017b94:	18fb      	adds	r3, r7, r3
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	2204      	movs	r2, #4
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	d001      	beq.n	8017ba2 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8017b9e:	230a      	movs	r3, #10
 8017ba0:	e22a      	b.n	8017ff8 <find_volume+0x52c>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ba4:	7858      	ldrb	r0, [r3, #1]
 8017ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ba8:	330c      	adds	r3, #12
 8017baa:	001a      	movs	r2, r3
 8017bac:	2102      	movs	r1, #2
 8017bae:	f7fe fc17 	bl	80163e0 <disk_ioctl>
 8017bb2:	1e03      	subs	r3, r0, #0
 8017bb4:	d001      	beq.n	8017bba <find_volume+0xee>
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	e21e      	b.n	8017ff8 <find_volume+0x52c>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8017bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bbc:	899a      	ldrh	r2, [r3, #12]
 8017bbe:	2380      	movs	r3, #128	@ 0x80
 8017bc0:	015b      	lsls	r3, r3, #5
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d80d      	bhi.n	8017be2 <find_volume+0x116>
 8017bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bc8:	899a      	ldrh	r2, [r3, #12]
 8017bca:	2380      	movs	r3, #128	@ 0x80
 8017bcc:	009b      	lsls	r3, r3, #2
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	d307      	bcc.n	8017be2 <find_volume+0x116>
 8017bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bd4:	899b      	ldrh	r3, [r3, #12]
 8017bd6:	001a      	movs	r2, r3
 8017bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bda:	899b      	ldrh	r3, [r3, #12]
 8017bdc:	3b01      	subs	r3, #1
 8017bde:	4013      	ands	r3, r2
 8017be0:	d001      	beq.n	8017be6 <find_volume+0x11a>
 8017be2:	2301      	movs	r3, #1
 8017be4:	e208      	b.n	8017ff8 <find_volume+0x52c>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017bea:	2557      	movs	r5, #87	@ 0x57
 8017bec:	197c      	adds	r4, r7, r5
 8017bee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bf2:	0011      	movs	r1, r2
 8017bf4:	0018      	movs	r0, r3
 8017bf6:	f7ff ff11 	bl	8017a1c <check_fs>
 8017bfa:	0003      	movs	r3, r0
 8017bfc:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017bfe:	197b      	adds	r3, r7, r5
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	2b02      	cmp	r3, #2
 8017c04:	d14b      	bne.n	8017c9e <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017c06:	2300      	movs	r3, #0
 8017c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8017c0a:	e01d      	b.n	8017c48 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c0e:	3334      	adds	r3, #52	@ 0x34
 8017c10:	001a      	movs	r2, r3
 8017c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c14:	011b      	lsls	r3, r3, #4
 8017c16:	33bf      	adds	r3, #191	@ 0xbf
 8017c18:	33ff      	adds	r3, #255	@ 0xff
 8017c1a:	18d3      	adds	r3, r2, r3
 8017c1c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c20:	3304      	adds	r3, #4
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d006      	beq.n	8017c36 <find_volume+0x16a>
 8017c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c2a:	3308      	adds	r3, #8
 8017c2c:	0018      	movs	r0, r3
 8017c2e:	f7fe fc1a 	bl	8016466 <ld_dword>
 8017c32:	0003      	movs	r3, r0
 8017c34:	e000      	b.n	8017c38 <find_volume+0x16c>
 8017c36:	2300      	movs	r3, #0
 8017c38:	2214      	movs	r2, #20
 8017c3a:	18ba      	adds	r2, r7, r2
 8017c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017c3e:	0089      	lsls	r1, r1, #2
 8017c40:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c44:	3301      	adds	r3, #1
 8017c46:	643b      	str	r3, [r7, #64]	@ 0x40
 8017c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c4a:	2b03      	cmp	r3, #3
 8017c4c:	d9de      	bls.n	8017c0c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017c4e:	2300      	movs	r3, #0
 8017c50:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8017c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d002      	beq.n	8017c5e <find_volume+0x192>
 8017c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c5a:	3b01      	subs	r3, #1
 8017c5c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017c5e:	2314      	movs	r3, #20
 8017c60:	18fb      	adds	r3, r7, r3
 8017c62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017c64:	0092      	lsls	r2, r2, #2
 8017c66:	58d3      	ldr	r3, [r2, r3]
 8017c68:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d008      	beq.n	8017c82 <find_volume+0x1b6>
 8017c70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c74:	0011      	movs	r1, r2
 8017c76:	0018      	movs	r0, r3
 8017c78:	f7ff fed0 	bl	8017a1c <check_fs>
 8017c7c:	0003      	movs	r3, r0
 8017c7e:	001a      	movs	r2, r3
 8017c80:	e000      	b.n	8017c84 <find_volume+0x1b8>
 8017c82:	2203      	movs	r2, #3
 8017c84:	2157      	movs	r1, #87	@ 0x57
 8017c86:	187b      	adds	r3, r7, r1
 8017c88:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017c8a:	187b      	adds	r3, r7, r1
 8017c8c:	781b      	ldrb	r3, [r3, #0]
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	d905      	bls.n	8017c9e <find_volume+0x1d2>
 8017c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c94:	3301      	adds	r3, #1
 8017c96:	643b      	str	r3, [r7, #64]	@ 0x40
 8017c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c9a:	2b03      	cmp	r3, #3
 8017c9c:	d9df      	bls.n	8017c5e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017c9e:	2357      	movs	r3, #87	@ 0x57
 8017ca0:	18fb      	adds	r3, r7, r3
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	2b04      	cmp	r3, #4
 8017ca6:	d101      	bne.n	8017cac <find_volume+0x1e0>
 8017ca8:	2301      	movs	r3, #1
 8017caa:	e1a5      	b.n	8017ff8 <find_volume+0x52c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017cac:	2357      	movs	r3, #87	@ 0x57
 8017cae:	18fb      	adds	r3, r7, r3
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2b01      	cmp	r3, #1
 8017cb4:	d901      	bls.n	8017cba <find_volume+0x1ee>
 8017cb6:	230d      	movs	r3, #13
 8017cb8:	e19e      	b.n	8017ff8 <find_volume+0x52c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cbc:	3334      	adds	r3, #52	@ 0x34
 8017cbe:	330b      	adds	r3, #11
 8017cc0:	0018      	movs	r0, r3
 8017cc2:	f7fe fbb5 	bl	8016430 <ld_word>
 8017cc6:	0003      	movs	r3, r0
 8017cc8:	001a      	movs	r2, r3
 8017cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ccc:	899b      	ldrh	r3, [r3, #12]
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d001      	beq.n	8017cd6 <find_volume+0x20a>
 8017cd2:	230d      	movs	r3, #13
 8017cd4:	e190      	b.n	8017ff8 <find_volume+0x52c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cd8:	3334      	adds	r3, #52	@ 0x34
 8017cda:	3316      	adds	r3, #22
 8017cdc:	0018      	movs	r0, r3
 8017cde:	f7fe fba7 	bl	8016430 <ld_word>
 8017ce2:	0003      	movs	r3, r0
 8017ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d107      	bne.n	8017cfc <find_volume+0x230>
 8017cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cee:	3334      	adds	r3, #52	@ 0x34
 8017cf0:	3324      	adds	r3, #36	@ 0x24
 8017cf2:	0018      	movs	r0, r3
 8017cf4:	f7fe fbb7 	bl	8016466 <ld_dword>
 8017cf8:	0003      	movs	r3, r0
 8017cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8017cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d00:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d04:	2244      	movs	r2, #68	@ 0x44
 8017d06:	5c9a      	ldrb	r2, [r3, r2]
 8017d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d0e:	789b      	ldrb	r3, [r3, #2]
 8017d10:	2b01      	cmp	r3, #1
 8017d12:	d005      	beq.n	8017d20 <find_volume+0x254>
 8017d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d16:	789b      	ldrb	r3, [r3, #2]
 8017d18:	2b02      	cmp	r3, #2
 8017d1a:	d001      	beq.n	8017d20 <find_volume+0x254>
 8017d1c:	230d      	movs	r3, #13
 8017d1e:	e16b      	b.n	8017ff8 <find_volume+0x52c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d22:	789b      	ldrb	r3, [r3, #2]
 8017d24:	001a      	movs	r2, r3
 8017d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d28:	4353      	muls	r3, r2
 8017d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d2e:	2241      	movs	r2, #65	@ 0x41
 8017d30:	5c9b      	ldrb	r3, [r3, r2]
 8017d32:	001a      	movs	r2, r3
 8017d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d36:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d3a:	895b      	ldrh	r3, [r3, #10]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d007      	beq.n	8017d50 <find_volume+0x284>
 8017d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d42:	895b      	ldrh	r3, [r3, #10]
 8017d44:	001a      	movs	r2, r3
 8017d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d48:	895b      	ldrh	r3, [r3, #10]
 8017d4a:	3b01      	subs	r3, #1
 8017d4c:	4013      	ands	r3, r2
 8017d4e:	d001      	beq.n	8017d54 <find_volume+0x288>
 8017d50:	230d      	movs	r3, #13
 8017d52:	e151      	b.n	8017ff8 <find_volume+0x52c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d56:	3334      	adds	r3, #52	@ 0x34
 8017d58:	3311      	adds	r3, #17
 8017d5a:	0018      	movs	r0, r3
 8017d5c:	f7fe fb68 	bl	8016430 <ld_word>
 8017d60:	0003      	movs	r3, r0
 8017d62:	001a      	movs	r2, r3
 8017d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d6a:	891a      	ldrh	r2, [r3, #8]
 8017d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d6e:	899b      	ldrh	r3, [r3, #12]
 8017d70:	095b      	lsrs	r3, r3, #5
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	0019      	movs	r1, r3
 8017d76:	0010      	movs	r0, r2
 8017d78:	f7e8 fa5c 	bl	8000234 <__aeabi_uidivmod>
 8017d7c:	000b      	movs	r3, r1
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d001      	beq.n	8017d88 <find_volume+0x2bc>
 8017d84:	230d      	movs	r3, #13
 8017d86:	e137      	b.n	8017ff8 <find_volume+0x52c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d8a:	3334      	adds	r3, #52	@ 0x34
 8017d8c:	3313      	adds	r3, #19
 8017d8e:	0018      	movs	r0, r3
 8017d90:	f7fe fb4e 	bl	8016430 <ld_word>
 8017d94:	0003      	movs	r3, r0
 8017d96:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d107      	bne.n	8017dae <find_volume+0x2e2>
 8017d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017da0:	3334      	adds	r3, #52	@ 0x34
 8017da2:	3320      	adds	r3, #32
 8017da4:	0018      	movs	r0, r3
 8017da6:	f7fe fb5e 	bl	8016466 <ld_dword>
 8017daa:	0003      	movs	r3, r0
 8017dac:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db0:	3334      	adds	r3, #52	@ 0x34
 8017db2:	330e      	adds	r3, #14
 8017db4:	252e      	movs	r5, #46	@ 0x2e
 8017db6:	197c      	adds	r4, r7, r5
 8017db8:	0018      	movs	r0, r3
 8017dba:	f7fe fb39 	bl	8016430 <ld_word>
 8017dbe:	0003      	movs	r3, r0
 8017dc0:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017dc2:	197b      	adds	r3, r7, r5
 8017dc4:	881b      	ldrh	r3, [r3, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d101      	bne.n	8017dce <find_volume+0x302>
 8017dca:	230d      	movs	r3, #13
 8017dcc:	e114      	b.n	8017ff8 <find_volume+0x52c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017dce:	232e      	movs	r3, #46	@ 0x2e
 8017dd0:	18fb      	adds	r3, r7, r3
 8017dd2:	881a      	ldrh	r2, [r3, #0]
 8017dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dd6:	18d4      	adds	r4, r2, r3
 8017dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dda:	891a      	ldrh	r2, [r3, #8]
 8017ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dde:	899b      	ldrh	r3, [r3, #12]
 8017de0:	095b      	lsrs	r3, r3, #5
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	0019      	movs	r1, r3
 8017de6:	0010      	movs	r0, r2
 8017de8:	f7e8 f99e 	bl	8000128 <__udivsi3>
 8017dec:	0003      	movs	r3, r0
 8017dee:	b29b      	uxth	r3, r3
 8017df0:	18e3      	adds	r3, r4, r3
 8017df2:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	d203      	bcs.n	8017e04 <find_volume+0x338>
 8017dfc:	230d      	movs	r3, #13
 8017dfe:	e0fb      	b.n	8017ff8 <find_volume+0x52c>
 8017e00:	20003610 	.word	0x20003610
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e08:	1ad2      	subs	r2, r2, r3
 8017e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e0c:	895b      	ldrh	r3, [r3, #10]
 8017e0e:	0019      	movs	r1, r3
 8017e10:	0010      	movs	r0, r2
 8017e12:	f7e8 f989 	bl	8000128 <__udivsi3>
 8017e16:	0003      	movs	r3, r0
 8017e18:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d101      	bne.n	8017e24 <find_volume+0x358>
 8017e20:	230d      	movs	r3, #13
 8017e22:	e0e9      	b.n	8017ff8 <find_volume+0x52c>
		fmt = FS_FAT32;
 8017e24:	2157      	movs	r1, #87	@ 0x57
 8017e26:	187b      	adds	r3, r7, r1
 8017e28:	2203      	movs	r2, #3
 8017e2a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e2e:	4a74      	ldr	r2, [pc, #464]	@ (8018000 <find_volume+0x534>)
 8017e30:	4293      	cmp	r3, r2
 8017e32:	d802      	bhi.n	8017e3a <find_volume+0x36e>
 8017e34:	187b      	adds	r3, r7, r1
 8017e36:	2202      	movs	r2, #2
 8017e38:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e3c:	4a71      	ldr	r2, [pc, #452]	@ (8018004 <find_volume+0x538>)
 8017e3e:	4293      	cmp	r3, r2
 8017e40:	d803      	bhi.n	8017e4a <find_volume+0x37e>
 8017e42:	2357      	movs	r3, #87	@ 0x57
 8017e44:	18fb      	adds	r3, r7, r3
 8017e46:	2201      	movs	r2, #1
 8017e48:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e4c:	1c9a      	adds	r2, r3, #2
 8017e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e50:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8017e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017e56:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017e58:	232e      	movs	r3, #46	@ 0x2e
 8017e5a:	18fb      	adds	r3, r7, r3
 8017e5c:	881a      	ldrh	r2, [r3, #0]
 8017e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e60:	18d2      	adds	r2, r2, r3
 8017e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e64:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8017e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e6a:	18d2      	adds	r2, r2, r3
 8017e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8017e70:	2357      	movs	r3, #87	@ 0x57
 8017e72:	18fb      	adds	r3, r7, r3
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	2b03      	cmp	r3, #3
 8017e78:	d11d      	bne.n	8017eb6 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e7c:	3334      	adds	r3, #52	@ 0x34
 8017e7e:	332a      	adds	r3, #42	@ 0x2a
 8017e80:	0018      	movs	r0, r3
 8017e82:	f7fe fad5 	bl	8016430 <ld_word>
 8017e86:	1e03      	subs	r3, r0, #0
 8017e88:	d001      	beq.n	8017e8e <find_volume+0x3c2>
 8017e8a:	230d      	movs	r3, #13
 8017e8c:	e0b4      	b.n	8017ff8 <find_volume+0x52c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e90:	891b      	ldrh	r3, [r3, #8]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d001      	beq.n	8017e9a <find_volume+0x3ce>
 8017e96:	230d      	movs	r3, #13
 8017e98:	e0ae      	b.n	8017ff8 <find_volume+0x52c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e9c:	3334      	adds	r3, #52	@ 0x34
 8017e9e:	332c      	adds	r3, #44	@ 0x2c
 8017ea0:	0018      	movs	r0, r3
 8017ea2:	f7fe fae0 	bl	8016466 <ld_dword>
 8017ea6:	0002      	movs	r2, r0
 8017ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eaa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eae:	699b      	ldr	r3, [r3, #24]
 8017eb0:	009b      	lsls	r3, r3, #2
 8017eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8017eb4:	e020      	b.n	8017ef8 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eb8:	891b      	ldrh	r3, [r3, #8]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d101      	bne.n	8017ec2 <find_volume+0x3f6>
 8017ebe:	230d      	movs	r3, #13
 8017ec0:	e09a      	b.n	8017ff8 <find_volume+0x52c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ec8:	18d2      	adds	r2, r2, r3
 8017eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ecc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017ece:	2357      	movs	r3, #87	@ 0x57
 8017ed0:	18fb      	adds	r3, r7, r3
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	2b02      	cmp	r3, #2
 8017ed6:	d103      	bne.n	8017ee0 <find_volume+0x414>
 8017ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eda:	699b      	ldr	r3, [r3, #24]
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	e00a      	b.n	8017ef6 <find_volume+0x42a>
 8017ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ee2:	699a      	ldr	r2, [r3, #24]
 8017ee4:	0013      	movs	r3, r2
 8017ee6:	005b      	lsls	r3, r3, #1
 8017ee8:	189b      	adds	r3, r3, r2
 8017eea:	085a      	lsrs	r2, r3, #1
 8017eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eee:	699b      	ldr	r3, [r3, #24]
 8017ef0:	2101      	movs	r1, #1
 8017ef2:	400b      	ands	r3, r1
 8017ef4:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017ef6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017efa:	69dc      	ldr	r4, [r3, #28]
 8017efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017efe:	899b      	ldrh	r3, [r3, #12]
 8017f00:	001a      	movs	r2, r3
 8017f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f04:	18d3      	adds	r3, r2, r3
 8017f06:	1e5a      	subs	r2, r3, #1
 8017f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f0a:	899b      	ldrh	r3, [r3, #12]
 8017f0c:	0019      	movs	r1, r3
 8017f0e:	0010      	movs	r0, r2
 8017f10:	f7e8 f90a 	bl	8000128 <__udivsi3>
 8017f14:	0003      	movs	r3, r0
 8017f16:	429c      	cmp	r4, r3
 8017f18:	d201      	bcs.n	8017f1e <find_volume+0x452>
 8017f1a:	230d      	movs	r3, #13
 8017f1c:	e06c      	b.n	8017ff8 <find_volume+0x52c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f20:	2201      	movs	r2, #1
 8017f22:	4252      	negs	r2, r2
 8017f24:	615a      	str	r2, [r3, #20]
 8017f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f28:	695a      	ldr	r2, [r3, #20]
 8017f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f2c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8017f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f30:	2280      	movs	r2, #128	@ 0x80
 8017f32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017f34:	2357      	movs	r3, #87	@ 0x57
 8017f36:	18fb      	adds	r3, r7, r3
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b03      	cmp	r3, #3
 8017f3c:	d148      	bne.n	8017fd0 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f40:	3334      	adds	r3, #52	@ 0x34
 8017f42:	3330      	adds	r3, #48	@ 0x30
 8017f44:	0018      	movs	r0, r3
 8017f46:	f7fe fa73 	bl	8016430 <ld_word>
 8017f4a:	0003      	movs	r3, r0
 8017f4c:	2b01      	cmp	r3, #1
 8017f4e:	d13f      	bne.n	8017fd0 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f52:	1c5a      	adds	r2, r3, #1
 8017f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f56:	0011      	movs	r1, r2
 8017f58:	0018      	movs	r0, r3
 8017f5a:	f7fe fd15 	bl	8016988 <move_window>
 8017f5e:	1e03      	subs	r3, r0, #0
 8017f60:	d136      	bne.n	8017fd0 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 8017f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f64:	2200      	movs	r2, #0
 8017f66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f6a:	3334      	adds	r3, #52	@ 0x34
 8017f6c:	33ff      	adds	r3, #255	@ 0xff
 8017f6e:	33ff      	adds	r3, #255	@ 0xff
 8017f70:	0018      	movs	r0, r3
 8017f72:	f7fe fa5d 	bl	8016430 <ld_word>
 8017f76:	0003      	movs	r3, r0
 8017f78:	001a      	movs	r2, r3
 8017f7a:	4b23      	ldr	r3, [pc, #140]	@ (8018008 <find_volume+0x53c>)
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d127      	bne.n	8017fd0 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f82:	3334      	adds	r3, #52	@ 0x34
 8017f84:	0018      	movs	r0, r3
 8017f86:	f7fe fa6e 	bl	8016466 <ld_dword>
 8017f8a:	0003      	movs	r3, r0
 8017f8c:	4a1f      	ldr	r2, [pc, #124]	@ (801800c <find_volume+0x540>)
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	d11e      	bne.n	8017fd0 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f94:	3334      	adds	r3, #52	@ 0x34
 8017f96:	33e5      	adds	r3, #229	@ 0xe5
 8017f98:	33ff      	adds	r3, #255	@ 0xff
 8017f9a:	0018      	movs	r0, r3
 8017f9c:	f7fe fa63 	bl	8016466 <ld_dword>
 8017fa0:	0003      	movs	r3, r0
 8017fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8018010 <find_volume+0x544>)
 8017fa4:	4293      	cmp	r3, r2
 8017fa6:	d113      	bne.n	8017fd0 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017faa:	3334      	adds	r3, #52	@ 0x34
 8017fac:	33e9      	adds	r3, #233	@ 0xe9
 8017fae:	33ff      	adds	r3, #255	@ 0xff
 8017fb0:	0018      	movs	r0, r3
 8017fb2:	f7fe fa58 	bl	8016466 <ld_dword>
 8017fb6:	0002      	movs	r2, r0
 8017fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fbe:	3334      	adds	r3, #52	@ 0x34
 8017fc0:	33ed      	adds	r3, #237	@ 0xed
 8017fc2:	33ff      	adds	r3, #255	@ 0xff
 8017fc4:	0018      	movs	r0, r3
 8017fc6:	f7fe fa4e 	bl	8016466 <ld_dword>
 8017fca:	0002      	movs	r2, r0
 8017fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fd2:	2257      	movs	r2, #87	@ 0x57
 8017fd4:	18ba      	adds	r2, r7, r2
 8017fd6:	7812      	ldrb	r2, [r2, #0]
 8017fd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017fda:	4b0e      	ldr	r3, [pc, #56]	@ (8018014 <find_volume+0x548>)
 8017fdc:	881b      	ldrh	r3, [r3, #0]
 8017fde:	3301      	adds	r3, #1
 8017fe0:	b29a      	uxth	r2, r3
 8017fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8018014 <find_volume+0x548>)
 8017fe4:	801a      	strh	r2, [r3, #0]
 8017fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8018014 <find_volume+0x548>)
 8017fe8:	881a      	ldrh	r2, [r3, #0]
 8017fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ff0:	0018      	movs	r0, r3
 8017ff2:	f7fe fc61 	bl	80168b8 <clear_lock>
#endif
	return FR_OK;
 8017ff6:	2300      	movs	r3, #0
}
 8017ff8:	0018      	movs	r0, r3
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	b016      	add	sp, #88	@ 0x58
 8017ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8018000:	0000fff5 	.word	0x0000fff5
 8018004:	00000ff5 	.word	0x00000ff5
 8018008:	0000aa55 	.word	0x0000aa55
 801800c:	41615252 	.word	0x41615252
 8018010:	61417272 	.word	0x61417272
 8018014:	20003614 	.word	0x20003614

08018018 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018018:	b590      	push	{r4, r7, lr}
 801801a:	b085      	sub	sp, #20
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018022:	240f      	movs	r4, #15
 8018024:	193b      	adds	r3, r7, r4
 8018026:	2209      	movs	r2, #9
 8018028:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d01d      	beq.n	801806c <validate+0x54>
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d019      	beq.n	801806c <validate+0x54>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	781b      	ldrb	r3, [r3, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d014      	beq.n	801806c <validate+0x54>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	889a      	ldrh	r2, [r3, #4]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	88db      	ldrh	r3, [r3, #6]
 801804c:	429a      	cmp	r2, r3
 801804e:	d10d      	bne.n	801806c <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	785b      	ldrb	r3, [r3, #1]
 8018056:	0018      	movs	r0, r3
 8018058:	f7fe f920 	bl	801629c <disk_status>
 801805c:	0003      	movs	r3, r0
 801805e:	001a      	movs	r2, r3
 8018060:	2301      	movs	r3, #1
 8018062:	4013      	ands	r3, r2
 8018064:	d102      	bne.n	801806c <validate+0x54>
			res = FR_OK;
 8018066:	193b      	adds	r3, r7, r4
 8018068:	2200      	movs	r2, #0
 801806a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801806c:	230f      	movs	r3, #15
 801806e:	18fb      	adds	r3, r7, r3
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d102      	bne.n	801807c <validate+0x64>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681a      	ldr	r2, [r3, #0]
 801807a:	e000      	b.n	801807e <validate+0x66>
 801807c:	2200      	movs	r2, #0
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	601a      	str	r2, [r3, #0]
	return res;
 8018082:	230f      	movs	r3, #15
 8018084:	18fb      	adds	r3, r7, r3
 8018086:	781b      	ldrb	r3, [r3, #0]
}
 8018088:	0018      	movs	r0, r3
 801808a:	46bd      	mov	sp, r7
 801808c:	b005      	add	sp, #20
 801808e:	bd90      	pop	{r4, r7, pc}

08018090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018090:	b5b0      	push	{r4, r5, r7, lr}
 8018092:	b088      	sub	sp, #32
 8018094:	af00      	add	r7, sp, #0
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	1dfb      	adds	r3, r7, #7
 801809c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80180a2:	2310      	movs	r3, #16
 80180a4:	18fb      	adds	r3, r7, r3
 80180a6:	0018      	movs	r0, r3
 80180a8:	f7ff fc76 	bl	8017998 <get_ldnumber>
 80180ac:	0003      	movs	r3, r0
 80180ae:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	da01      	bge.n	80180ba <f_mount+0x2a>
 80180b6:	230b      	movs	r3, #11
 80180b8:	e030      	b.n	801811c <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80180ba:	4b1a      	ldr	r3, [pc, #104]	@ (8018124 <f_mount+0x94>)
 80180bc:	69fa      	ldr	r2, [r7, #28]
 80180be:	0092      	lsls	r2, r2, #2
 80180c0:	58d3      	ldr	r3, [r2, r3]
 80180c2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80180c4:	69bb      	ldr	r3, [r7, #24]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d006      	beq.n	80180d8 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80180ca:	69bb      	ldr	r3, [r7, #24]
 80180cc:	0018      	movs	r0, r3
 80180ce:	f7fe fbf3 	bl	80168b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80180d2:	69bb      	ldr	r3, [r7, #24]
 80180d4:	2200      	movs	r2, #0
 80180d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d002      	beq.n	80180e4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	2200      	movs	r2, #0
 80180e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80180e4:	68f9      	ldr	r1, [r7, #12]
 80180e6:	4b0f      	ldr	r3, [pc, #60]	@ (8018124 <f_mount+0x94>)
 80180e8:	69fa      	ldr	r2, [r7, #28]
 80180ea:	0092      	lsls	r2, r2, #2
 80180ec:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d003      	beq.n	80180fc <f_mount+0x6c>
 80180f4:	1dfb      	adds	r3, r7, #7
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	d001      	beq.n	8018100 <f_mount+0x70>
 80180fc:	2300      	movs	r3, #0
 80180fe:	e00d      	b.n	801811c <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018100:	2517      	movs	r5, #23
 8018102:	197c      	adds	r4, r7, r5
 8018104:	230c      	movs	r3, #12
 8018106:	18f9      	adds	r1, r7, r3
 8018108:	2308      	movs	r3, #8
 801810a:	18fb      	adds	r3, r7, r3
 801810c:	2200      	movs	r2, #0
 801810e:	0018      	movs	r0, r3
 8018110:	f7ff fcdc 	bl	8017acc <find_volume>
 8018114:	0003      	movs	r3, r0
 8018116:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8018118:	197b      	adds	r3, r7, r5
 801811a:	781b      	ldrb	r3, [r3, #0]
}
 801811c:	0018      	movs	r0, r3
 801811e:	46bd      	mov	sp, r7
 8018120:	b008      	add	sp, #32
 8018122:	bdb0      	pop	{r4, r5, r7, pc}
 8018124:	20003610 	.word	0x20003610

08018128 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801812a:	b099      	sub	sp, #100	@ 0x64
 801812c:	af00      	add	r7, sp, #0
 801812e:	60f8      	str	r0, [r7, #12]
 8018130:	60b9      	str	r1, [r7, #8]
 8018132:	1dfb      	adds	r3, r7, #7
 8018134:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d101      	bne.n	8018140 <f_open+0x18>
 801813c:	2309      	movs	r3, #9
 801813e:	e1f4      	b.n	801852a <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018140:	1dfb      	adds	r3, r7, #7
 8018142:	1dfa      	adds	r2, r7, #7
 8018144:	7812      	ldrb	r2, [r2, #0]
 8018146:	213f      	movs	r1, #63	@ 0x3f
 8018148:	400a      	ands	r2, r1
 801814a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 801814c:	255f      	movs	r5, #95	@ 0x5f
 801814e:	197c      	adds	r4, r7, r5
 8018150:	1dfb      	adds	r3, r7, #7
 8018152:	781a      	ldrb	r2, [r3, #0]
 8018154:	2310      	movs	r3, #16
 8018156:	18f9      	adds	r1, r7, r3
 8018158:	2308      	movs	r3, #8
 801815a:	18fb      	adds	r3, r7, r3
 801815c:	0018      	movs	r0, r3
 801815e:	f7ff fcb5 	bl	8017acc <find_volume>
 8018162:	0003      	movs	r3, r0
 8018164:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8018166:	197b      	adds	r3, r7, r5
 8018168:	781b      	ldrb	r3, [r3, #0]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d000      	beq.n	8018170 <f_open+0x48>
 801816e:	e1d1      	b.n	8018514 <f_open+0x3ec>
		dj.obj.fs = fs;
 8018170:	693a      	ldr	r2, [r7, #16]
 8018172:	2614      	movs	r6, #20
 8018174:	19bb      	adds	r3, r7, r6
 8018176:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018178:	68ba      	ldr	r2, [r7, #8]
 801817a:	197c      	adds	r4, r7, r5
 801817c:	19bb      	adds	r3, r7, r6
 801817e:	0011      	movs	r1, r2
 8018180:	0018      	movs	r0, r3
 8018182:	f7ff fb7f 	bl	8017884 <follow_path>
 8018186:	0003      	movs	r3, r0
 8018188:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801818a:	0029      	movs	r1, r5
 801818c:	197b      	adds	r3, r7, r5
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d11b      	bne.n	80181cc <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018194:	19bb      	adds	r3, r7, r6
 8018196:	222f      	movs	r2, #47	@ 0x2f
 8018198:	5c9b      	ldrb	r3, [r3, r2]
 801819a:	b25b      	sxtb	r3, r3
 801819c:	2b00      	cmp	r3, #0
 801819e:	da03      	bge.n	80181a8 <f_open+0x80>
				res = FR_INVALID_NAME;
 80181a0:	187b      	adds	r3, r7, r1
 80181a2:	2206      	movs	r2, #6
 80181a4:	701a      	strb	r2, [r3, #0]
 80181a6:	e011      	b.n	80181cc <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80181a8:	1dfb      	adds	r3, r7, #7
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	2201      	movs	r2, #1
 80181ae:	429a      	cmp	r2, r3
 80181b0:	419b      	sbcs	r3, r3
 80181b2:	425b      	negs	r3, r3
 80181b4:	b2db      	uxtb	r3, r3
 80181b6:	001a      	movs	r2, r3
 80181b8:	235f      	movs	r3, #95	@ 0x5f
 80181ba:	18fc      	adds	r4, r7, r3
 80181bc:	2314      	movs	r3, #20
 80181be:	18fb      	adds	r3, r7, r3
 80181c0:	0011      	movs	r1, r2
 80181c2:	0018      	movs	r0, r3
 80181c4:	f7fe fa2e 	bl	8016624 <chk_lock>
 80181c8:	0003      	movs	r3, r0
 80181ca:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80181cc:	1dfb      	adds	r3, r7, #7
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	221c      	movs	r2, #28
 80181d2:	4013      	ands	r3, r2
 80181d4:	d100      	bne.n	80181d8 <f_open+0xb0>
 80181d6:	e096      	b.n	8018306 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80181d8:	225f      	movs	r2, #95	@ 0x5f
 80181da:	18bb      	adds	r3, r7, r2
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d01a      	beq.n	8018218 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80181e2:	18bb      	adds	r3, r7, r2
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	2b04      	cmp	r3, #4
 80181e8:	d10f      	bne.n	801820a <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80181ea:	f7fe fa73 	bl	80166d4 <enq_lock>
 80181ee:	1e03      	subs	r3, r0, #0
 80181f0:	d007      	beq.n	8018202 <f_open+0xda>
 80181f2:	2314      	movs	r3, #20
 80181f4:	18fb      	adds	r3, r7, r3
 80181f6:	0018      	movs	r0, r3
 80181f8:	f7ff fa59 	bl	80176ae <dir_register>
 80181fc:	0003      	movs	r3, r0
 80181fe:	001a      	movs	r2, r3
 8018200:	e000      	b.n	8018204 <f_open+0xdc>
 8018202:	2212      	movs	r2, #18
 8018204:	235f      	movs	r3, #95	@ 0x5f
 8018206:	18fb      	adds	r3, r7, r3
 8018208:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801820a:	1dfb      	adds	r3, r7, #7
 801820c:	1dfa      	adds	r2, r7, #7
 801820e:	7812      	ldrb	r2, [r2, #0]
 8018210:	2108      	movs	r1, #8
 8018212:	430a      	orrs	r2, r1
 8018214:	701a      	strb	r2, [r3, #0]
 8018216:	e014      	b.n	8018242 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018218:	2314      	movs	r3, #20
 801821a:	18fb      	adds	r3, r7, r3
 801821c:	799b      	ldrb	r3, [r3, #6]
 801821e:	001a      	movs	r2, r3
 8018220:	2311      	movs	r3, #17
 8018222:	4013      	ands	r3, r2
 8018224:	d004      	beq.n	8018230 <f_open+0x108>
					res = FR_DENIED;
 8018226:	235f      	movs	r3, #95	@ 0x5f
 8018228:	18fb      	adds	r3, r7, r3
 801822a:	2207      	movs	r2, #7
 801822c:	701a      	strb	r2, [r3, #0]
 801822e:	e008      	b.n	8018242 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018230:	1dfb      	adds	r3, r7, #7
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	2204      	movs	r2, #4
 8018236:	4013      	ands	r3, r2
 8018238:	d003      	beq.n	8018242 <f_open+0x11a>
 801823a:	235f      	movs	r3, #95	@ 0x5f
 801823c:	18fb      	adds	r3, r7, r3
 801823e:	2208      	movs	r2, #8
 8018240:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018242:	245f      	movs	r4, #95	@ 0x5f
 8018244:	193b      	adds	r3, r7, r4
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d000      	beq.n	801824e <f_open+0x126>
 801824c:	e07b      	b.n	8018346 <f_open+0x21e>
 801824e:	1dfb      	adds	r3, r7, #7
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	2208      	movs	r2, #8
 8018254:	4013      	ands	r3, r2
 8018256:	d100      	bne.n	801825a <f_open+0x132>
 8018258:	e075      	b.n	8018346 <f_open+0x21e>
				dw = GET_FATTIME();
 801825a:	f7fd ffb3 	bl	80161c4 <get_fattime>
 801825e:	0003      	movs	r3, r0
 8018260:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018262:	2514      	movs	r5, #20
 8018264:	197b      	adds	r3, r7, r5
 8018266:	6a1b      	ldr	r3, [r3, #32]
 8018268:	330e      	adds	r3, #14
 801826a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801826c:	0011      	movs	r1, r2
 801826e:	0018      	movs	r0, r3
 8018270:	f7fe f938 	bl	80164e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018274:	197b      	adds	r3, r7, r5
 8018276:	6a1b      	ldr	r3, [r3, #32]
 8018278:	3316      	adds	r3, #22
 801827a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801827c:	0011      	movs	r1, r2
 801827e:	0018      	movs	r0, r3
 8018280:	f7fe f930 	bl	80164e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018284:	197b      	adds	r3, r7, r5
 8018286:	6a1b      	ldr	r3, [r3, #32]
 8018288:	330b      	adds	r3, #11
 801828a:	2220      	movs	r2, #32
 801828c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801828e:	693a      	ldr	r2, [r7, #16]
 8018290:	197b      	adds	r3, r7, r5
 8018292:	6a1b      	ldr	r3, [r3, #32]
 8018294:	0019      	movs	r1, r3
 8018296:	0010      	movs	r0, r2
 8018298:	f7ff f962 	bl	8017560 <ld_clust>
 801829c:	0003      	movs	r3, r0
 801829e:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80182a0:	6938      	ldr	r0, [r7, #16]
 80182a2:	197b      	adds	r3, r7, r5
 80182a4:	6a1b      	ldr	r3, [r3, #32]
 80182a6:	2200      	movs	r2, #0
 80182a8:	0019      	movs	r1, r3
 80182aa:	f7ff f978 	bl	801759e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80182ae:	197b      	adds	r3, r7, r5
 80182b0:	6a1b      	ldr	r3, [r3, #32]
 80182b2:	331c      	adds	r3, #28
 80182b4:	2100      	movs	r1, #0
 80182b6:	0018      	movs	r0, r3
 80182b8:	f7fe f914 	bl	80164e4 <st_dword>
					fs->wflag = 1;
 80182bc:	693b      	ldr	r3, [r7, #16]
 80182be:	2201      	movs	r2, #1
 80182c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80182c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d03e      	beq.n	8018346 <f_open+0x21e>
						dw = fs->winsect;
 80182c8:	693b      	ldr	r3, [r7, #16]
 80182ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182cc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80182ce:	0026      	movs	r6, r4
 80182d0:	193c      	adds	r4, r7, r4
 80182d2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80182d4:	197b      	adds	r3, r7, r5
 80182d6:	2200      	movs	r2, #0
 80182d8:	0018      	movs	r0, r3
 80182da:	f7fe fe2d 	bl	8016f38 <remove_chain>
 80182de:	0003      	movs	r3, r0
 80182e0:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80182e2:	19bb      	adds	r3, r7, r6
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d12d      	bne.n	8018346 <f_open+0x21e>
							res = move_window(fs, dw);
 80182ea:	693b      	ldr	r3, [r7, #16]
 80182ec:	19bc      	adds	r4, r7, r6
 80182ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80182f0:	0011      	movs	r1, r2
 80182f2:	0018      	movs	r0, r3
 80182f4:	f7fe fb48 	bl	8016988 <move_window>
 80182f8:	0003      	movs	r3, r0
 80182fa:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018300:	3a01      	subs	r2, #1
 8018302:	611a      	str	r2, [r3, #16]
 8018304:	e01f      	b.n	8018346 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018306:	215f      	movs	r1, #95	@ 0x5f
 8018308:	187b      	adds	r3, r7, r1
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d11a      	bne.n	8018346 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018310:	2314      	movs	r3, #20
 8018312:	18fb      	adds	r3, r7, r3
 8018314:	799b      	ldrb	r3, [r3, #6]
 8018316:	001a      	movs	r2, r3
 8018318:	2310      	movs	r3, #16
 801831a:	4013      	ands	r3, r2
 801831c:	d003      	beq.n	8018326 <f_open+0x1fe>
					res = FR_NO_FILE;
 801831e:	187b      	adds	r3, r7, r1
 8018320:	2204      	movs	r2, #4
 8018322:	701a      	strb	r2, [r3, #0]
 8018324:	e00f      	b.n	8018346 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018326:	1dfb      	adds	r3, r7, #7
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	2202      	movs	r2, #2
 801832c:	4013      	ands	r3, r2
 801832e:	d00a      	beq.n	8018346 <f_open+0x21e>
 8018330:	2314      	movs	r3, #20
 8018332:	18fb      	adds	r3, r7, r3
 8018334:	799b      	ldrb	r3, [r3, #6]
 8018336:	001a      	movs	r2, r3
 8018338:	2301      	movs	r3, #1
 801833a:	4013      	ands	r3, r2
 801833c:	d003      	beq.n	8018346 <f_open+0x21e>
						res = FR_DENIED;
 801833e:	235f      	movs	r3, #95	@ 0x5f
 8018340:	18fb      	adds	r3, r7, r3
 8018342:	2207      	movs	r2, #7
 8018344:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8018346:	235f      	movs	r3, #95	@ 0x5f
 8018348:	18fb      	adds	r3, r7, r3
 801834a:	781b      	ldrb	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d12b      	bne.n	80183a8 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018350:	1dfb      	adds	r3, r7, #7
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	2208      	movs	r2, #8
 8018356:	4013      	ands	r3, r2
 8018358:	d005      	beq.n	8018366 <f_open+0x23e>
				mode |= FA_MODIFIED;
 801835a:	1dfb      	adds	r3, r7, #7
 801835c:	1dfa      	adds	r2, r7, #7
 801835e:	7812      	ldrb	r2, [r2, #0]
 8018360:	2140      	movs	r1, #64	@ 0x40
 8018362:	430a      	orrs	r2, r1
 8018364:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018366:	693b      	ldr	r3, [r7, #16]
 8018368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801836e:	2114      	movs	r1, #20
 8018370:	187b      	adds	r3, r7, r1
 8018372:	6a1a      	ldr	r2, [r3, #32]
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018378:	1dfb      	adds	r3, r7, #7
 801837a:	781b      	ldrb	r3, [r3, #0]
 801837c:	2201      	movs	r2, #1
 801837e:	429a      	cmp	r2, r3
 8018380:	419b      	sbcs	r3, r3
 8018382:	425b      	negs	r3, r3
 8018384:	b2db      	uxtb	r3, r3
 8018386:	001a      	movs	r2, r3
 8018388:	187b      	adds	r3, r7, r1
 801838a:	0011      	movs	r1, r2
 801838c:	0018      	movs	r0, r3
 801838e:	f7fe f9bf 	bl	8016710 <inc_lock>
 8018392:	0002      	movs	r2, r0
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	691b      	ldr	r3, [r3, #16]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d103      	bne.n	80183a8 <f_open+0x280>
 80183a0:	235f      	movs	r3, #95	@ 0x5f
 80183a2:	18fb      	adds	r3, r7, r3
 80183a4:	2202      	movs	r2, #2
 80183a6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 80183a8:	235f      	movs	r3, #95	@ 0x5f
 80183aa:	18fb      	adds	r3, r7, r3
 80183ac:	781b      	ldrb	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d000      	beq.n	80183b4 <f_open+0x28c>
 80183b2:	e0af      	b.n	8018514 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80183b4:	693a      	ldr	r2, [r7, #16]
 80183b6:	2414      	movs	r4, #20
 80183b8:	193b      	adds	r3, r7, r4
 80183ba:	6a1b      	ldr	r3, [r3, #32]
 80183bc:	0019      	movs	r1, r3
 80183be:	0010      	movs	r0, r2
 80183c0:	f7ff f8ce 	bl	8017560 <ld_clust>
 80183c4:	0002      	movs	r2, r0
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80183ca:	193b      	adds	r3, r7, r4
 80183cc:	6a1b      	ldr	r3, [r3, #32]
 80183ce:	331c      	adds	r3, #28
 80183d0:	0018      	movs	r0, r3
 80183d2:	f7fe f848 	bl	8016466 <ld_dword>
 80183d6:	0002      	movs	r2, r0
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2200      	movs	r2, #0
 80183e0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80183e2:	693a      	ldr	r2, [r7, #16]
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80183e8:	693b      	ldr	r3, [r7, #16]
 80183ea:	88da      	ldrh	r2, [r3, #6]
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	1dfa      	adds	r2, r7, #7
 80183f4:	7812      	ldrb	r2, [r2, #0]
 80183f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	2200      	movs	r2, #0
 80183fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	2200      	movs	r2, #0
 8018402:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	2200      	movs	r2, #0
 8018408:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	3330      	adds	r3, #48	@ 0x30
 801840e:	2280      	movs	r2, #128	@ 0x80
 8018410:	0152      	lsls	r2, r2, #5
 8018412:	2100      	movs	r1, #0
 8018414:	0018      	movs	r0, r3
 8018416:	f7fe f8ae 	bl	8016576 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801841a:	1dfb      	adds	r3, r7, #7
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	2220      	movs	r2, #32
 8018420:	4013      	ands	r3, r2
 8018422:	d100      	bne.n	8018426 <f_open+0x2fe>
 8018424:	e076      	b.n	8018514 <f_open+0x3ec>
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d100      	bne.n	8018430 <f_open+0x308>
 801842e:	e071      	b.n	8018514 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	68da      	ldr	r2, [r3, #12]
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018438:	693b      	ldr	r3, [r7, #16]
 801843a:	895b      	ldrh	r3, [r3, #10]
 801843c:	001a      	movs	r2, r3
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	899b      	ldrh	r3, [r3, #12]
 8018442:	4353      	muls	r3, r2
 8018444:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	689b      	ldr	r3, [r3, #8]
 801844a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	657b      	str	r3, [r7, #84]	@ 0x54
 8018452:	e019      	b.n	8018488 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018458:	0011      	movs	r1, r2
 801845a:	0018      	movs	r0, r3
 801845c:	f7fe fb62 	bl	8016b24 <get_fat>
 8018460:	0003      	movs	r3, r0
 8018462:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018464:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018466:	2b01      	cmp	r3, #1
 8018468:	d803      	bhi.n	8018472 <f_open+0x34a>
 801846a:	235f      	movs	r3, #95	@ 0x5f
 801846c:	18fb      	adds	r3, r7, r3
 801846e:	2202      	movs	r2, #2
 8018470:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018474:	3301      	adds	r3, #1
 8018476:	d103      	bne.n	8018480 <f_open+0x358>
 8018478:	235f      	movs	r3, #95	@ 0x5f
 801847a:	18fb      	adds	r3, r7, r3
 801847c:	2201      	movs	r2, #1
 801847e:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018484:	1ad3      	subs	r3, r2, r3
 8018486:	657b      	str	r3, [r7, #84]	@ 0x54
 8018488:	235f      	movs	r3, #95	@ 0x5f
 801848a:	18fb      	adds	r3, r7, r3
 801848c:	781b      	ldrb	r3, [r3, #0]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d103      	bne.n	801849a <f_open+0x372>
 8018492:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018496:	429a      	cmp	r2, r3
 8018498:	d8dc      	bhi.n	8018454 <f_open+0x32c>
				}
				fp->clust = clst;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801849e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80184a0:	245f      	movs	r4, #95	@ 0x5f
 80184a2:	193b      	adds	r3, r7, r4
 80184a4:	781b      	ldrb	r3, [r3, #0]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d134      	bne.n	8018514 <f_open+0x3ec>
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	899b      	ldrh	r3, [r3, #12]
 80184ae:	001a      	movs	r2, r3
 80184b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184b2:	0011      	movs	r1, r2
 80184b4:	0018      	movs	r0, r3
 80184b6:	f7e7 febd 	bl	8000234 <__aeabi_uidivmod>
 80184ba:	1e0b      	subs	r3, r1, #0
 80184bc:	d02a      	beq.n	8018514 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80184be:	693b      	ldr	r3, [r7, #16]
 80184c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80184c2:	0011      	movs	r1, r2
 80184c4:	0018      	movs	r0, r3
 80184c6:	f7fe fb11 	bl	8016aec <clust2sect>
 80184ca:	0003      	movs	r3, r0
 80184cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80184ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d103      	bne.n	80184dc <f_open+0x3b4>
						res = FR_INT_ERR;
 80184d4:	193b      	adds	r3, r7, r4
 80184d6:	2202      	movs	r2, #2
 80184d8:	701a      	strb	r2, [r3, #0]
 80184da:	e01b      	b.n	8018514 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80184dc:	693b      	ldr	r3, [r7, #16]
 80184de:	899b      	ldrh	r3, [r3, #12]
 80184e0:	0019      	movs	r1, r3
 80184e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80184e4:	f7e7 fe20 	bl	8000128 <__udivsi3>
 80184e8:	0003      	movs	r3, r0
 80184ea:	001a      	movs	r2, r3
 80184ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184ee:	18d2      	adds	r2, r2, r3
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	7858      	ldrb	r0, [r3, #1]
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	3330      	adds	r3, #48	@ 0x30
 80184fc:	0019      	movs	r1, r3
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	6a1a      	ldr	r2, [r3, #32]
 8018502:	2301      	movs	r3, #1
 8018504:	f7fd ff1c 	bl	8016340 <disk_read>
 8018508:	1e03      	subs	r3, r0, #0
 801850a:	d003      	beq.n	8018514 <f_open+0x3ec>
 801850c:	235f      	movs	r3, #95	@ 0x5f
 801850e:	18fb      	adds	r3, r7, r3
 8018510:	2201      	movs	r2, #1
 8018512:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018514:	235f      	movs	r3, #95	@ 0x5f
 8018516:	18fb      	adds	r3, r7, r3
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d002      	beq.n	8018524 <f_open+0x3fc>
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	2200      	movs	r2, #0
 8018522:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018524:	235f      	movs	r3, #95	@ 0x5f
 8018526:	18fb      	adds	r3, r7, r3
 8018528:	781b      	ldrb	r3, [r3, #0]
}
 801852a:	0018      	movs	r0, r3
 801852c:	46bd      	mov	sp, r7
 801852e:	b019      	add	sp, #100	@ 0x64
 8018530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018532 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018532:	b5b0      	push	{r4, r5, r7, lr}
 8018534:	b08c      	sub	sp, #48	@ 0x30
 8018536:	af00      	add	r7, sp, #0
 8018538:	60f8      	str	r0, [r7, #12]
 801853a:	60b9      	str	r1, [r7, #8]
 801853c:	607a      	str	r2, [r7, #4]
 801853e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	2200      	movs	r2, #0
 8018548:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	252f      	movs	r5, #47	@ 0x2f
 801854e:	197c      	adds	r4, r7, r5
 8018550:	2210      	movs	r2, #16
 8018552:	18ba      	adds	r2, r7, r2
 8018554:	0011      	movs	r1, r2
 8018556:	0018      	movs	r0, r3
 8018558:	f7ff fd5e 	bl	8018018 <validate>
 801855c:	0003      	movs	r3, r0
 801855e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018560:	197b      	adds	r3, r7, r5
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d107      	bne.n	8018578 <f_write+0x46>
 8018568:	197b      	adds	r3, r7, r5
 801856a:	68fa      	ldr	r2, [r7, #12]
 801856c:	7d52      	ldrb	r2, [r2, #21]
 801856e:	701a      	strb	r2, [r3, #0]
 8018570:	197b      	adds	r3, r7, r5
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d003      	beq.n	8018580 <f_write+0x4e>
 8018578:	232f      	movs	r3, #47	@ 0x2f
 801857a:	18fb      	adds	r3, r7, r3
 801857c:	781b      	ldrb	r3, [r3, #0]
 801857e:	e16f      	b.n	8018860 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	7d1b      	ldrb	r3, [r3, #20]
 8018584:	001a      	movs	r2, r3
 8018586:	2302      	movs	r3, #2
 8018588:	4013      	ands	r3, r2
 801858a:	d101      	bne.n	8018590 <f_write+0x5e>
 801858c:	2307      	movs	r3, #7
 801858e:	e167      	b.n	8018860 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	699a      	ldr	r2, [r3, #24]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	18d2      	adds	r2, r2, r3
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	699b      	ldr	r3, [r3, #24]
 801859c:	429a      	cmp	r2, r3
 801859e:	d300      	bcc.n	80185a2 <f_write+0x70>
 80185a0:	e150      	b.n	8018844 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	699b      	ldr	r3, [r3, #24]
 80185a6:	43db      	mvns	r3, r3
 80185a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80185aa:	e14b      	b.n	8018844 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	699a      	ldr	r2, [r3, #24]
 80185b0:	693b      	ldr	r3, [r7, #16]
 80185b2:	899b      	ldrh	r3, [r3, #12]
 80185b4:	0019      	movs	r1, r3
 80185b6:	0010      	movs	r0, r2
 80185b8:	f7e7 fe3c 	bl	8000234 <__aeabi_uidivmod>
 80185bc:	1e0b      	subs	r3, r1, #0
 80185be:	d000      	beq.n	80185c2 <f_write+0x90>
 80185c0:	e0f4      	b.n	80187ac <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	699a      	ldr	r2, [r3, #24]
 80185c6:	693b      	ldr	r3, [r7, #16]
 80185c8:	899b      	ldrh	r3, [r3, #12]
 80185ca:	0019      	movs	r1, r3
 80185cc:	0010      	movs	r0, r2
 80185ce:	f7e7 fdab 	bl	8000128 <__udivsi3>
 80185d2:	0003      	movs	r3, r0
 80185d4:	001a      	movs	r2, r3
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	895b      	ldrh	r3, [r3, #10]
 80185da:	3b01      	subs	r3, #1
 80185dc:	4013      	ands	r3, r2
 80185de:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80185e0:	69bb      	ldr	r3, [r7, #24]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d146      	bne.n	8018674 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	699b      	ldr	r3, [r3, #24]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d10d      	bne.n	801860a <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	689b      	ldr	r3, [r3, #8]
 80185f2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d11e      	bne.n	8018638 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2100      	movs	r1, #0
 80185fe:	0018      	movs	r0, r3
 8018600:	f7fe fd0d 	bl	801701e <create_chain>
 8018604:	0003      	movs	r3, r0
 8018606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018608:	e016      	b.n	8018638 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801860e:	2b00      	cmp	r3, #0
 8018610:	d009      	beq.n	8018626 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	699a      	ldr	r2, [r3, #24]
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	0011      	movs	r1, r2
 801861a:	0018      	movs	r0, r3
 801861c:	f7fe fda5 	bl	801716a <clmt_clust>
 8018620:	0003      	movs	r3, r0
 8018622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018624:	e008      	b.n	8018638 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018626:	68fa      	ldr	r2, [r7, #12]
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	69db      	ldr	r3, [r3, #28]
 801862c:	0019      	movs	r1, r3
 801862e:	0010      	movs	r0, r2
 8018630:	f7fe fcf5 	bl	801701e <create_chain>
 8018634:	0003      	movs	r3, r0
 8018636:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801863a:	2b00      	cmp	r3, #0
 801863c:	d100      	bne.n	8018640 <f_write+0x10e>
 801863e:	e106      	b.n	801884e <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018642:	2b01      	cmp	r3, #1
 8018644:	d104      	bne.n	8018650 <f_write+0x11e>
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	2202      	movs	r2, #2
 801864a:	755a      	strb	r2, [r3, #21]
 801864c:	2302      	movs	r3, #2
 801864e:	e107      	b.n	8018860 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018652:	3301      	adds	r3, #1
 8018654:	d104      	bne.n	8018660 <f_write+0x12e>
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	2201      	movs	r2, #1
 801865a:	755a      	strb	r2, [r3, #21]
 801865c:	2301      	movs	r3, #1
 801865e:	e0ff      	b.n	8018860 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018664:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	689b      	ldr	r3, [r3, #8]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d102      	bne.n	8018674 <f_write+0x142>
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018672:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	7d1b      	ldrb	r3, [r3, #20]
 8018678:	b25b      	sxtb	r3, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	da17      	bge.n	80186ae <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	7858      	ldrb	r0, [r3, #1]
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	3330      	adds	r3, #48	@ 0x30
 8018686:	0019      	movs	r1, r3
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	6a1a      	ldr	r2, [r3, #32]
 801868c:	2301      	movs	r3, #1
 801868e:	f7fd fe7f 	bl	8016390 <disk_write>
 8018692:	1e03      	subs	r3, r0, #0
 8018694:	d004      	beq.n	80186a0 <f_write+0x16e>
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	2201      	movs	r2, #1
 801869a:	755a      	strb	r2, [r3, #21]
 801869c:	2301      	movs	r3, #1
 801869e:	e0df      	b.n	8018860 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	7d1b      	ldrb	r3, [r3, #20]
 80186a4:	227f      	movs	r2, #127	@ 0x7f
 80186a6:	4013      	ands	r3, r2
 80186a8:	b2da      	uxtb	r2, r3
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80186ae:	693a      	ldr	r2, [r7, #16]
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	69db      	ldr	r3, [r3, #28]
 80186b4:	0019      	movs	r1, r3
 80186b6:	0010      	movs	r0, r2
 80186b8:	f7fe fa18 	bl	8016aec <clust2sect>
 80186bc:	0003      	movs	r3, r0
 80186be:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80186c0:	697b      	ldr	r3, [r7, #20]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d104      	bne.n	80186d0 <f_write+0x19e>
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	2202      	movs	r2, #2
 80186ca:	755a      	strb	r2, [r3, #21]
 80186cc:	2302      	movs	r3, #2
 80186ce:	e0c7      	b.n	8018860 <f_write+0x32e>
			sect += csect;
 80186d0:	697a      	ldr	r2, [r7, #20]
 80186d2:	69bb      	ldr	r3, [r7, #24]
 80186d4:	18d3      	adds	r3, r2, r3
 80186d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	899b      	ldrh	r3, [r3, #12]
 80186dc:	0019      	movs	r1, r3
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f7e7 fd22 	bl	8000128 <__udivsi3>
 80186e4:	0003      	movs	r3, r0
 80186e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80186e8:	6a3b      	ldr	r3, [r7, #32]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d040      	beq.n	8018770 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80186ee:	69ba      	ldr	r2, [r7, #24]
 80186f0:	6a3b      	ldr	r3, [r7, #32]
 80186f2:	18d3      	adds	r3, r2, r3
 80186f4:	693a      	ldr	r2, [r7, #16]
 80186f6:	8952      	ldrh	r2, [r2, #10]
 80186f8:	4293      	cmp	r3, r2
 80186fa:	d905      	bls.n	8018708 <f_write+0x1d6>
					cc = fs->csize - csect;
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	895b      	ldrh	r3, [r3, #10]
 8018700:	001a      	movs	r2, r3
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	1ad3      	subs	r3, r2, r3
 8018706:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018708:	693b      	ldr	r3, [r7, #16]
 801870a:	7858      	ldrb	r0, [r3, #1]
 801870c:	6a3b      	ldr	r3, [r7, #32]
 801870e:	697a      	ldr	r2, [r7, #20]
 8018710:	69f9      	ldr	r1, [r7, #28]
 8018712:	f7fd fe3d 	bl	8016390 <disk_write>
 8018716:	1e03      	subs	r3, r0, #0
 8018718:	d004      	beq.n	8018724 <f_write+0x1f2>
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2201      	movs	r2, #1
 801871e:	755a      	strb	r2, [r3, #21]
 8018720:	2301      	movs	r3, #1
 8018722:	e09d      	b.n	8018860 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	6a1a      	ldr	r2, [r3, #32]
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	1ad3      	subs	r3, r2, r3
 801872c:	6a3a      	ldr	r2, [r7, #32]
 801872e:	429a      	cmp	r2, r3
 8018730:	d917      	bls.n	8018762 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	3330      	adds	r3, #48	@ 0x30
 8018736:	0018      	movs	r0, r3
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	6a1a      	ldr	r2, [r3, #32]
 801873c:	697b      	ldr	r3, [r7, #20]
 801873e:	1ad3      	subs	r3, r2, r3
 8018740:	693a      	ldr	r2, [r7, #16]
 8018742:	8992      	ldrh	r2, [r2, #12]
 8018744:	4353      	muls	r3, r2
 8018746:	69fa      	ldr	r2, [r7, #28]
 8018748:	18d1      	adds	r1, r2, r3
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	899b      	ldrh	r3, [r3, #12]
 801874e:	001a      	movs	r2, r3
 8018750:	f7fd fef2 	bl	8016538 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	7d1b      	ldrb	r3, [r3, #20]
 8018758:	227f      	movs	r2, #127	@ 0x7f
 801875a:	4013      	ands	r3, r2
 801875c:	b2da      	uxtb	r2, r3
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	899b      	ldrh	r3, [r3, #12]
 8018766:	001a      	movs	r2, r3
 8018768:	6a3b      	ldr	r3, [r7, #32]
 801876a:	4353      	muls	r3, r2
 801876c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801876e:	e04b      	b.n	8018808 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	6a1b      	ldr	r3, [r3, #32]
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	429a      	cmp	r2, r3
 8018778:	d015      	beq.n	80187a6 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	699a      	ldr	r2, [r3, #24]
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018782:	429a      	cmp	r2, r3
 8018784:	d20f      	bcs.n	80187a6 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	7858      	ldrb	r0, [r3, #1]
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	3330      	adds	r3, #48	@ 0x30
 801878e:	0019      	movs	r1, r3
 8018790:	697a      	ldr	r2, [r7, #20]
 8018792:	2301      	movs	r3, #1
 8018794:	f7fd fdd4 	bl	8016340 <disk_read>
 8018798:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 801879a:	d004      	beq.n	80187a6 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	2201      	movs	r2, #1
 80187a0:	755a      	strb	r2, [r3, #21]
 80187a2:	2301      	movs	r3, #1
 80187a4:	e05c      	b.n	8018860 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	697a      	ldr	r2, [r7, #20]
 80187aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	899b      	ldrh	r3, [r3, #12]
 80187b0:	001c      	movs	r4, r3
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	699a      	ldr	r2, [r3, #24]
 80187b6:	693b      	ldr	r3, [r7, #16]
 80187b8:	899b      	ldrh	r3, [r3, #12]
 80187ba:	0019      	movs	r1, r3
 80187bc:	0010      	movs	r0, r2
 80187be:	f7e7 fd39 	bl	8000234 <__aeabi_uidivmod>
 80187c2:	000b      	movs	r3, r1
 80187c4:	1ae3      	subs	r3, r4, r3
 80187c6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80187c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d901      	bls.n	80187d4 <f_write+0x2a2>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	3330      	adds	r3, #48	@ 0x30
 80187d8:	001c      	movs	r4, r3
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	699a      	ldr	r2, [r3, #24]
 80187de:	693b      	ldr	r3, [r7, #16]
 80187e0:	899b      	ldrh	r3, [r3, #12]
 80187e2:	0019      	movs	r1, r3
 80187e4:	0010      	movs	r0, r2
 80187e6:	f7e7 fd25 	bl	8000234 <__aeabi_uidivmod>
 80187ea:	000b      	movs	r3, r1
 80187ec:	18e3      	adds	r3, r4, r3
 80187ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187f0:	69f9      	ldr	r1, [r7, #28]
 80187f2:	0018      	movs	r0, r3
 80187f4:	f7fd fea0 	bl	8016538 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	2280      	movs	r2, #128	@ 0x80
 80187fe:	4252      	negs	r2, r2
 8018800:	4313      	orrs	r3, r2
 8018802:	b2da      	uxtb	r2, r3
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018808:	69fa      	ldr	r2, [r7, #28]
 801880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801880c:	18d3      	adds	r3, r2, r3
 801880e:	61fb      	str	r3, [r7, #28]
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	699a      	ldr	r2, [r3, #24]
 8018814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018816:	18d2      	adds	r2, r2, r3
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	619a      	str	r2, [r3, #24]
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	68d9      	ldr	r1, [r3, #12]
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	699a      	ldr	r2, [r3, #24]
 8018824:	000b      	movs	r3, r1
 8018826:	4293      	cmp	r3, r2
 8018828:	d200      	bcs.n	801882c <f_write+0x2fa>
 801882a:	0013      	movs	r3, r2
 801882c:	68fa      	ldr	r2, [r7, #12]
 801882e:	60d3      	str	r3, [r2, #12]
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018836:	18d2      	adds	r2, r2, r3
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	601a      	str	r2, [r3, #0]
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018840:	1ad3      	subs	r3, r2, r3
 8018842:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d000      	beq.n	801884c <f_write+0x31a>
 801884a:	e6af      	b.n	80185ac <f_write+0x7a>
 801884c:	e000      	b.n	8018850 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801884e:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	7d1b      	ldrb	r3, [r3, #20]
 8018854:	2240      	movs	r2, #64	@ 0x40
 8018856:	4313      	orrs	r3, r2
 8018858:	b2da      	uxtb	r2, r3
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801885e:	2300      	movs	r3, #0
}
 8018860:	0018      	movs	r0, r3
 8018862:	46bd      	mov	sp, r7
 8018864:	b00c      	add	sp, #48	@ 0x30
 8018866:	bdb0      	pop	{r4, r5, r7, pc}

08018868 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018868:	b5b0      	push	{r4, r5, r7, lr}
 801886a:	b086      	sub	sp, #24
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2517      	movs	r5, #23
 8018874:	197c      	adds	r4, r7, r5
 8018876:	2208      	movs	r2, #8
 8018878:	18ba      	adds	r2, r7, r2
 801887a:	0011      	movs	r1, r2
 801887c:	0018      	movs	r0, r3
 801887e:	f7ff fbcb 	bl	8018018 <validate>
 8018882:	0003      	movs	r3, r0
 8018884:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8018886:	197b      	adds	r3, r7, r5
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d16e      	bne.n	801896c <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	7d1b      	ldrb	r3, [r3, #20]
 8018892:	001a      	movs	r2, r3
 8018894:	2340      	movs	r3, #64	@ 0x40
 8018896:	4013      	ands	r3, r2
 8018898:	d068      	beq.n	801896c <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	7d1b      	ldrb	r3, [r3, #20]
 801889e:	b25b      	sxtb	r3, r3
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	da14      	bge.n	80188ce <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	7858      	ldrb	r0, [r3, #1]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	3330      	adds	r3, #48	@ 0x30
 80188ac:	0019      	movs	r1, r3
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6a1a      	ldr	r2, [r3, #32]
 80188b2:	2301      	movs	r3, #1
 80188b4:	f7fd fd6c 	bl	8016390 <disk_write>
 80188b8:	1e03      	subs	r3, r0, #0
 80188ba:	d001      	beq.n	80188c0 <f_sync+0x58>
 80188bc:	2301      	movs	r3, #1
 80188be:	e058      	b.n	8018972 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	7d1b      	ldrb	r3, [r3, #20]
 80188c4:	227f      	movs	r2, #127	@ 0x7f
 80188c6:	4013      	ands	r3, r2
 80188c8:	b2da      	uxtb	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80188ce:	f7fd fc79 	bl	80161c4 <get_fattime>
 80188d2:	0003      	movs	r3, r0
 80188d4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80188d6:	68ba      	ldr	r2, [r7, #8]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188dc:	2517      	movs	r5, #23
 80188de:	197c      	adds	r4, r7, r5
 80188e0:	0019      	movs	r1, r3
 80188e2:	0010      	movs	r0, r2
 80188e4:	f7fe f850 	bl	8016988 <move_window>
 80188e8:	0003      	movs	r3, r0
 80188ea:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80188ec:	002c      	movs	r4, r5
 80188ee:	193b      	adds	r3, r7, r4
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d13a      	bne.n	801896c <f_sync+0x104>
					dir = fp->dir_ptr;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	330b      	adds	r3, #11
 8018900:	781a      	ldrb	r2, [r3, #0]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	330b      	adds	r3, #11
 8018906:	2120      	movs	r1, #32
 8018908:	430a      	orrs	r2, r1
 801890a:	b2d2      	uxtb	r2, r2
 801890c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6818      	ldr	r0, [r3, #0]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	689a      	ldr	r2, [r3, #8]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	0019      	movs	r1, r3
 801891a:	f7fe fe40 	bl	801759e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	331c      	adds	r3, #28
 8018922:	001a      	movs	r2, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	68db      	ldr	r3, [r3, #12]
 8018928:	0019      	movs	r1, r3
 801892a:	0010      	movs	r0, r2
 801892c:	f7fd fdda 	bl	80164e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	3316      	adds	r3, #22
 8018934:	693a      	ldr	r2, [r7, #16]
 8018936:	0011      	movs	r1, r2
 8018938:	0018      	movs	r0, r3
 801893a:	f7fd fdd3 	bl	80164e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	3312      	adds	r3, #18
 8018942:	2100      	movs	r1, #0
 8018944:	0018      	movs	r0, r3
 8018946:	f7fd fdaf 	bl	80164a8 <st_word>
					fs->wflag = 1;
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	2201      	movs	r2, #1
 801894e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	193c      	adds	r4, r7, r4
 8018954:	0018      	movs	r0, r3
 8018956:	f7fe f84d 	bl	80169f4 <sync_fs>
 801895a:	0003      	movs	r3, r0
 801895c:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	7d1b      	ldrb	r3, [r3, #20]
 8018962:	2240      	movs	r2, #64	@ 0x40
 8018964:	4393      	bics	r3, r2
 8018966:	b2da      	uxtb	r2, r3
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801896c:	2317      	movs	r3, #23
 801896e:	18fb      	adds	r3, r7, r3
 8018970:	781b      	ldrb	r3, [r3, #0]
}
 8018972:	0018      	movs	r0, r3
 8018974:	46bd      	mov	sp, r7
 8018976:	b006      	add	sp, #24
 8018978:	bdb0      	pop	{r4, r5, r7, pc}

0801897a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801897a:	b5b0      	push	{r4, r5, r7, lr}
 801897c:	b084      	sub	sp, #16
 801897e:	af00      	add	r7, sp, #0
 8018980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018982:	250f      	movs	r5, #15
 8018984:	197c      	adds	r4, r7, r5
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	0018      	movs	r0, r3
 801898a:	f7ff ff6d 	bl	8018868 <f_sync>
 801898e:	0003      	movs	r3, r0
 8018990:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8018992:	197b      	adds	r3, r7, r5
 8018994:	781b      	ldrb	r3, [r3, #0]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d11c      	bne.n	80189d4 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	197c      	adds	r4, r7, r5
 801899e:	2208      	movs	r2, #8
 80189a0:	18ba      	adds	r2, r7, r2
 80189a2:	0011      	movs	r1, r2
 80189a4:	0018      	movs	r0, r3
 80189a6:	f7ff fb37 	bl	8018018 <validate>
 80189aa:	0003      	movs	r3, r0
 80189ac:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80189ae:	197b      	adds	r3, r7, r5
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d10e      	bne.n	80189d4 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	691b      	ldr	r3, [r3, #16]
 80189ba:	197c      	adds	r4, r7, r5
 80189bc:	0018      	movs	r0, r3
 80189be:	f7fd ff31 	bl	8016824 <dec_lock>
 80189c2:	0003      	movs	r3, r0
 80189c4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80189c6:	197b      	adds	r3, r7, r5
 80189c8:	781b      	ldrb	r3, [r3, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d102      	bne.n	80189d4 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2200      	movs	r2, #0
 80189d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80189d4:	230f      	movs	r3, #15
 80189d6:	18fb      	adds	r3, r7, r3
 80189d8:	781b      	ldrb	r3, [r3, #0]
}
 80189da:	0018      	movs	r0, r3
 80189dc:	46bd      	mov	sp, r7
 80189de:	b004      	add	sp, #16
 80189e0:	bdb0      	pop	{r4, r5, r7, pc}

080189e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80189e2:	b5b0      	push	{r4, r5, r7, lr}
 80189e4:	b090      	sub	sp, #64	@ 0x40
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	6078      	str	r0, [r7, #4]
 80189ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	253f      	movs	r5, #63	@ 0x3f
 80189f0:	197c      	adds	r4, r7, r5
 80189f2:	2208      	movs	r2, #8
 80189f4:	18ba      	adds	r2, r7, r2
 80189f6:	0011      	movs	r1, r2
 80189f8:	0018      	movs	r0, r3
 80189fa:	f7ff fb0d 	bl	8018018 <validate>
 80189fe:	0003      	movs	r3, r0
 8018a00:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8018a02:	197b      	adds	r3, r7, r5
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d103      	bne.n	8018a12 <f_lseek+0x30>
 8018a0a:	197b      	adds	r3, r7, r5
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	7d52      	ldrb	r2, [r2, #21]
 8018a10:	701a      	strb	r2, [r3, #0]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8018a12:	223f      	movs	r2, #63	@ 0x3f
 8018a14:	18bb      	adds	r3, r7, r2
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d002      	beq.n	8018a22 <f_lseek+0x40>
 8018a1c:	18bb      	adds	r3, r7, r2
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	e20e      	b.n	8018e40 <f_lseek+0x45e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d100      	bne.n	8018a2c <f_lseek+0x4a>
 8018a2a:	e0dc      	b.n	8018be6 <f_lseek+0x204>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8018a2c:	683b      	ldr	r3, [r7, #0]
 8018a2e:	3301      	adds	r3, #1
 8018a30:	d15c      	bne.n	8018aec <f_lseek+0x10a>
			tbl = fp->cltbl;
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a36:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8018a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a3a:	1d1a      	adds	r2, r3, #4
 8018a3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	617b      	str	r3, [r7, #20]
 8018a42:	2302      	movs	r3, #2
 8018a44:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	689b      	ldr	r3, [r3, #8]
 8018a4a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8018a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d03b      	beq.n	8018aca <f_lseek+0xe8>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8018a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a54:	613b      	str	r3, [r7, #16]
 8018a56:	2300      	movs	r3, #0
 8018a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a5c:	3302      	adds	r3, #2
 8018a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8018a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a62:	60fb      	str	r3, [r7, #12]
 8018a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a66:	3301      	adds	r3, #1
 8018a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a6e:	0011      	movs	r1, r2
 8018a70:	0018      	movs	r0, r3
 8018a72:	f7fe f857 	bl	8016b24 <get_fat>
 8018a76:	0003      	movs	r3, r0
 8018a78:	633b      	str	r3, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8018a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d804      	bhi.n	8018a8a <f_lseek+0xa8>
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2202      	movs	r2, #2
 8018a84:	755a      	strb	r2, [r3, #21]
 8018a86:	2302      	movs	r3, #2
 8018a88:	e1da      	b.n	8018e40 <f_lseek+0x45e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	d104      	bne.n	8018a9a <f_lseek+0xb8>
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	2201      	movs	r2, #1
 8018a94:	755a      	strb	r2, [r3, #21]
 8018a96:	2301      	movs	r3, #1
 8018a98:	e1d2      	b.n	8018e40 <f_lseek+0x45e>
					} while (cl == pcl + 1);
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	3301      	adds	r3, #1
 8018a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	d0dd      	beq.n	8018a60 <f_lseek+0x7e>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8018aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d809      	bhi.n	8018ac0 <f_lseek+0xde>
						*tbl++ = ncl; *tbl++ = tcl;
 8018aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aae:	1d1a      	adds	r2, r3, #4
 8018ab0:	627a      	str	r2, [r7, #36]	@ 0x24
 8018ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018ab4:	601a      	str	r2, [r3, #0]
 8018ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ab8:	1d1a      	adds	r2, r3, #4
 8018aba:	627a      	str	r2, [r7, #36]	@ 0x24
 8018abc:	693a      	ldr	r2, [r7, #16]
 8018abe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	699b      	ldr	r3, [r3, #24]
 8018ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d3c3      	bcc.n	8018a52 <f_lseek+0x70>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ad0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8018ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d803      	bhi.n	8018ae2 <f_lseek+0x100>
				*tbl = 0;		/* Terminate table */
 8018ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018adc:	2200      	movs	r2, #0
 8018ade:	601a      	str	r2, [r3, #0]
 8018ae0:	e1ab      	b.n	8018e3a <f_lseek+0x458>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8018ae2:	233f      	movs	r3, #63	@ 0x3f
 8018ae4:	18fb      	adds	r3, r7, r3
 8018ae6:	2211      	movs	r2, #17
 8018ae8:	701a      	strb	r2, [r3, #0]
 8018aea:	e1a6      	b.n	8018e3a <f_lseek+0x458>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	683a      	ldr	r2, [r7, #0]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d902      	bls.n	8018afc <f_lseek+0x11a>
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	683a      	ldr	r2, [r7, #0]
 8018b00:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d100      	bne.n	8018b0a <f_lseek+0x128>
 8018b08:	e197      	b.n	8018e3a <f_lseek+0x458>
				fp->clust = clmt_clust(fp, ofs - 1);
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	1e5a      	subs	r2, r3, #1
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	0011      	movs	r1, r2
 8018b12:	0018      	movs	r0, r3
 8018b14:	f7fe fb29 	bl	801716a <clmt_clust>
 8018b18:	0002      	movs	r2, r0
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8018b1e:	68ba      	ldr	r2, [r7, #8]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	69db      	ldr	r3, [r3, #28]
 8018b24:	0019      	movs	r1, r3
 8018b26:	0010      	movs	r0, r2
 8018b28:	f7fd ffe0 	bl	8016aec <clust2sect>
 8018b2c:	0003      	movs	r3, r0
 8018b2e:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8018b30:	69bb      	ldr	r3, [r7, #24]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d104      	bne.n	8018b40 <f_lseek+0x15e>
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	2202      	movs	r2, #2
 8018b3a:	755a      	strb	r2, [r3, #21]
 8018b3c:	2302      	movs	r3, #2
 8018b3e:	e17f      	b.n	8018e40 <f_lseek+0x45e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	1e5a      	subs	r2, r3, #1
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	899b      	ldrh	r3, [r3, #12]
 8018b48:	0019      	movs	r1, r3
 8018b4a:	0010      	movs	r0, r2
 8018b4c:	f7e7 faec 	bl	8000128 <__udivsi3>
 8018b50:	0003      	movs	r3, r0
 8018b52:	001a      	movs	r2, r3
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	895b      	ldrh	r3, [r3, #10]
 8018b58:	3b01      	subs	r3, #1
 8018b5a:	4013      	ands	r3, r2
 8018b5c:	69ba      	ldr	r2, [r7, #24]
 8018b5e:	18d3      	adds	r3, r2, r3
 8018b60:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	699a      	ldr	r2, [r3, #24]
 8018b66:	68bb      	ldr	r3, [r7, #8]
 8018b68:	899b      	ldrh	r3, [r3, #12]
 8018b6a:	0019      	movs	r1, r3
 8018b6c:	0010      	movs	r0, r2
 8018b6e:	f7e7 fb61 	bl	8000234 <__aeabi_uidivmod>
 8018b72:	1e0b      	subs	r3, r1, #0
 8018b74:	d100      	bne.n	8018b78 <f_lseek+0x196>
 8018b76:	e160      	b.n	8018e3a <f_lseek+0x458>
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6a1b      	ldr	r3, [r3, #32]
 8018b7c:	69ba      	ldr	r2, [r7, #24]
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d100      	bne.n	8018b84 <f_lseek+0x1a2>
 8018b82:	e15a      	b.n	8018e3a <f_lseek+0x458>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	7d1b      	ldrb	r3, [r3, #20]
 8018b88:	b25b      	sxtb	r3, r3
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	da17      	bge.n	8018bbe <f_lseek+0x1dc>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	7858      	ldrb	r0, [r3, #1]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	3330      	adds	r3, #48	@ 0x30
 8018b96:	0019      	movs	r1, r3
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6a1a      	ldr	r2, [r3, #32]
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	f7fd fbf7 	bl	8016390 <disk_write>
 8018ba2:	1e03      	subs	r3, r0, #0
 8018ba4:	d004      	beq.n	8018bb0 <f_lseek+0x1ce>
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2201      	movs	r2, #1
 8018baa:	755a      	strb	r2, [r3, #21]
 8018bac:	2301      	movs	r3, #1
 8018bae:	e147      	b.n	8018e40 <f_lseek+0x45e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	7d1b      	ldrb	r3, [r3, #20]
 8018bb4:	227f      	movs	r2, #127	@ 0x7f
 8018bb6:	4013      	ands	r3, r2
 8018bb8:	b2da      	uxtb	r2, r3
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	7858      	ldrb	r0, [r3, #1]
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	3330      	adds	r3, #48	@ 0x30
 8018bc6:	0019      	movs	r1, r3
 8018bc8:	69ba      	ldr	r2, [r7, #24]
 8018bca:	2301      	movs	r3, #1
 8018bcc:	f7fd fbb8 	bl	8016340 <disk_read>
 8018bd0:	1e03      	subs	r3, r0, #0
 8018bd2:	d004      	beq.n	8018bde <f_lseek+0x1fc>
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2201      	movs	r2, #1
 8018bd8:	755a      	strb	r2, [r3, #21]
 8018bda:	2301      	movs	r3, #1
 8018bdc:	e130      	b.n	8018e40 <f_lseek+0x45e>
#endif
					fp->sect = dsc;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	69ba      	ldr	r2, [r7, #24]
 8018be2:	621a      	str	r2, [r3, #32]
 8018be4:	e129      	b.n	8018e3a <f_lseek+0x458>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	683a      	ldr	r2, [r7, #0]
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d908      	bls.n	8018c02 <f_lseek+0x220>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	7d1b      	ldrb	r3, [r3, #20]
 8018bf4:	001a      	movs	r2, r3
 8018bf6:	2302      	movs	r3, #2
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	d102      	bne.n	8018c02 <f_lseek+0x220>
			ofs = fp->obj.objsize;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	68db      	ldr	r3, [r3, #12]
 8018c00:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	699b      	ldr	r3, [r3, #24]
 8018c06:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018c10:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d100      	bne.n	8018c1a <f_lseek+0x238>
 8018c18:	e0bf      	b.n	8018d9a <f_lseek+0x3b8>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	895b      	ldrh	r3, [r3, #10]
 8018c1e:	001a      	movs	r2, r3
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	899b      	ldrh	r3, [r3, #12]
 8018c24:	4353      	muls	r3, r2
 8018c26:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8018c28:	6a3b      	ldr	r3, [r7, #32]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d020      	beq.n	8018c70 <f_lseek+0x28e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8018c2e:	683b      	ldr	r3, [r7, #0]
 8018c30:	3b01      	subs	r3, #1
 8018c32:	69f9      	ldr	r1, [r7, #28]
 8018c34:	0018      	movs	r0, r3
 8018c36:	f7e7 fa77 	bl	8000128 <__udivsi3>
 8018c3a:	0003      	movs	r3, r0
 8018c3c:	001c      	movs	r4, r3
 8018c3e:	6a3b      	ldr	r3, [r7, #32]
 8018c40:	3b01      	subs	r3, #1
 8018c42:	69f9      	ldr	r1, [r7, #28]
 8018c44:	0018      	movs	r0, r3
 8018c46:	f7e7 fa6f 	bl	8000128 <__udivsi3>
 8018c4a:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 8018c4c:	429c      	cmp	r4, r3
 8018c4e:	d30f      	bcc.n	8018c70 <f_lseek+0x28e>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8018c50:	6a3b      	ldr	r3, [r7, #32]
 8018c52:	3b01      	subs	r3, #1
 8018c54:	69fa      	ldr	r2, [r7, #28]
 8018c56:	4252      	negs	r2, r2
 8018c58:	401a      	ands	r2, r3
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	699b      	ldr	r3, [r3, #24]
 8018c62:	683a      	ldr	r2, [r7, #0]
 8018c64:	1ad3      	subs	r3, r2, r3
 8018c66:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	69db      	ldr	r3, [r3, #28]
 8018c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018c6e:	e022      	b.n	8018cb6 <f_lseek+0x2d4>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	689b      	ldr	r3, [r3, #8]
 8018c74:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8018c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d119      	bne.n	8018cb0 <f_lseek+0x2ce>
					clst = create_chain(&fp->obj, 0);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2100      	movs	r1, #0
 8018c80:	0018      	movs	r0, r3
 8018c82:	f7fe f9cc 	bl	801701e <create_chain>
 8018c86:	0003      	movs	r3, r0
 8018c88:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d104      	bne.n	8018c9a <f_lseek+0x2b8>
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2202      	movs	r2, #2
 8018c94:	755a      	strb	r2, [r3, #21]
 8018c96:	2302      	movs	r3, #2
 8018c98:	e0d2      	b.n	8018e40 <f_lseek+0x45e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	d104      	bne.n	8018caa <f_lseek+0x2c8>
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2201      	movs	r2, #1
 8018ca4:	755a      	strb	r2, [r3, #21]
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	e0ca      	b.n	8018e40 <f_lseek+0x45e>
					fp->obj.sclust = clst;
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018cae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018cb4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8018cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d100      	bne.n	8018cbe <f_lseek+0x2dc>
 8018cbc:	e06d      	b.n	8018d9a <f_lseek+0x3b8>
				while (ofs > bcs) {						/* Cluster following loop */
 8018cbe:	e03d      	b.n	8018d3c <f_lseek+0x35a>
					ofs -= bcs; fp->fptr += bcs;
 8018cc0:	683a      	ldr	r2, [r7, #0]
 8018cc2:	69fb      	ldr	r3, [r7, #28]
 8018cc4:	1ad3      	subs	r3, r2, r3
 8018cc6:	603b      	str	r3, [r7, #0]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	699a      	ldr	r2, [r3, #24]
 8018ccc:	69fb      	ldr	r3, [r7, #28]
 8018cce:	18d2      	adds	r2, r2, r3
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	7d1b      	ldrb	r3, [r3, #20]
 8018cd8:	001a      	movs	r2, r3
 8018cda:	2302      	movs	r3, #2
 8018cdc:	4013      	ands	r3, r2
 8018cde:	d00d      	beq.n	8018cfc <f_lseek+0x31a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018ce4:	0011      	movs	r1, r2
 8018ce6:	0018      	movs	r0, r3
 8018ce8:	f7fe f999 	bl	801701e <create_chain>
 8018cec:	0003      	movs	r3, r0
 8018cee:	63bb      	str	r3, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8018cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d10a      	bne.n	8018d0c <f_lseek+0x32a>
							ofs = 0; break;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	603b      	str	r3, [r7, #0]
 8018cfa:	e023      	b.n	8018d44 <f_lseek+0x362>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d00:	0011      	movs	r1, r2
 8018d02:	0018      	movs	r0, r3
 8018d04:	f7fd ff0e 	bl	8016b24 <get_fat>
 8018d08:	0003      	movs	r3, r0
 8018d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d0e:	3301      	adds	r3, #1
 8018d10:	d104      	bne.n	8018d1c <f_lseek+0x33a>
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	2201      	movs	r2, #1
 8018d16:	755a      	strb	r2, [r3, #21]
 8018d18:	2301      	movs	r3, #1
 8018d1a:	e091      	b.n	8018e40 <f_lseek+0x45e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8018d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d1e:	2b01      	cmp	r3, #1
 8018d20:	d904      	bls.n	8018d2c <f_lseek+0x34a>
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	699b      	ldr	r3, [r3, #24]
 8018d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	d304      	bcc.n	8018d36 <f_lseek+0x354>
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2202      	movs	r2, #2
 8018d30:	755a      	strb	r2, [r3, #21]
 8018d32:	2302      	movs	r3, #2
 8018d34:	e084      	b.n	8018e40 <f_lseek+0x45e>
					fp->clust = clst;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d3a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8018d3c:	683a      	ldr	r2, [r7, #0]
 8018d3e:	69fb      	ldr	r3, [r7, #28]
 8018d40:	429a      	cmp	r2, r3
 8018d42:	d8bd      	bhi.n	8018cc0 <f_lseek+0x2de>
				}
				fp->fptr += ofs;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	699a      	ldr	r2, [r3, #24]
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	18d2      	adds	r2, r2, r3
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	899b      	ldrh	r3, [r3, #12]
 8018d54:	001a      	movs	r2, r3
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	0011      	movs	r1, r2
 8018d5a:	0018      	movs	r0, r3
 8018d5c:	f7e7 fa6a 	bl	8000234 <__aeabi_uidivmod>
 8018d60:	1e0b      	subs	r3, r1, #0
 8018d62:	d01a      	beq.n	8018d9a <f_lseek+0x3b8>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018d68:	0011      	movs	r1, r2
 8018d6a:	0018      	movs	r0, r3
 8018d6c:	f7fd febe 	bl	8016aec <clust2sect>
 8018d70:	0003      	movs	r3, r0
 8018d72:	637b      	str	r3, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8018d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d104      	bne.n	8018d84 <f_lseek+0x3a2>
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2202      	movs	r2, #2
 8018d7e:	755a      	strb	r2, [r3, #21]
 8018d80:	2302      	movs	r3, #2
 8018d82:	e05d      	b.n	8018e40 <f_lseek+0x45e>
					nsect += (DWORD)(ofs / SS(fs));
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	899b      	ldrh	r3, [r3, #12]
 8018d88:	0019      	movs	r1, r3
 8018d8a:	6838      	ldr	r0, [r7, #0]
 8018d8c:	f7e7 f9cc 	bl	8000128 <__udivsi3>
 8018d90:	0003      	movs	r3, r0
 8018d92:	001a      	movs	r2, r3
 8018d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d96:	189b      	adds	r3, r3, r2
 8018d98:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	699a      	ldr	r2, [r3, #24]
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	68db      	ldr	r3, [r3, #12]
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d90a      	bls.n	8018dbc <f_lseek+0x3da>
			fp->obj.objsize = fp->fptr;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	699a      	ldr	r2, [r3, #24]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	7d1b      	ldrb	r3, [r3, #20]
 8018db2:	2240      	movs	r2, #64	@ 0x40
 8018db4:	4313      	orrs	r3, r2
 8018db6:	b2da      	uxtb	r2, r3
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	699a      	ldr	r2, [r3, #24]
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	899b      	ldrh	r3, [r3, #12]
 8018dc4:	0019      	movs	r1, r3
 8018dc6:	0010      	movs	r0, r2
 8018dc8:	f7e7 fa34 	bl	8000234 <__aeabi_uidivmod>
 8018dcc:	1e0b      	subs	r3, r1, #0
 8018dce:	d034      	beq.n	8018e3a <f_lseek+0x458>
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6a1b      	ldr	r3, [r3, #32]
 8018dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d02f      	beq.n	8018e3a <f_lseek+0x458>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	7d1b      	ldrb	r3, [r3, #20]
 8018dde:	b25b      	sxtb	r3, r3
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	da17      	bge.n	8018e14 <f_lseek+0x432>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	7858      	ldrb	r0, [r3, #1]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	3330      	adds	r3, #48	@ 0x30
 8018dec:	0019      	movs	r1, r3
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6a1a      	ldr	r2, [r3, #32]
 8018df2:	2301      	movs	r3, #1
 8018df4:	f7fd facc 	bl	8016390 <disk_write>
 8018df8:	1e03      	subs	r3, r0, #0
 8018dfa:	d004      	beq.n	8018e06 <f_lseek+0x424>
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2201      	movs	r2, #1
 8018e00:	755a      	strb	r2, [r3, #21]
 8018e02:	2301      	movs	r3, #1
 8018e04:	e01c      	b.n	8018e40 <f_lseek+0x45e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	7d1b      	ldrb	r3, [r3, #20]
 8018e0a:	227f      	movs	r2, #127	@ 0x7f
 8018e0c:	4013      	ands	r3, r2
 8018e0e:	b2da      	uxtb	r2, r3
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	7858      	ldrb	r0, [r3, #1]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	3330      	adds	r3, #48	@ 0x30
 8018e1c:	0019      	movs	r1, r3
 8018e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018e20:	2301      	movs	r3, #1
 8018e22:	f7fd fa8d 	bl	8016340 <disk_read>
 8018e26:	1e03      	subs	r3, r0, #0
 8018e28:	d004      	beq.n	8018e34 <f_lseek+0x452>
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	755a      	strb	r2, [r3, #21]
 8018e30:	2301      	movs	r3, #1
 8018e32:	e005      	b.n	8018e40 <f_lseek+0x45e>
#endif
			fp->sect = nsect;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018e38:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8018e3a:	233f      	movs	r3, #63	@ 0x3f
 8018e3c:	18fb      	adds	r3, r7, r3
 8018e3e:	781b      	ldrb	r3, [r3, #0]
}
 8018e40:	0018      	movs	r0, r3
 8018e42:	46bd      	mov	sp, r7
 8018e44:	b010      	add	sp, #64	@ 0x40
 8018e46:	bdb0      	pop	{r4, r5, r7, pc}

08018e48 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b084      	sub	sp, #16
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	000a      	movs	r2, r1
 8018e52:	1cfb      	adds	r3, r7, #3
 8018e54:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8018e56:	1cfb      	adds	r3, r7, #3
 8018e58:	781b      	ldrb	r3, [r3, #0]
 8018e5a:	2b0a      	cmp	r3, #10
 8018e5c:	d104      	bne.n	8018e68 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	210d      	movs	r1, #13
 8018e62:	0018      	movs	r0, r3
 8018e64:	f7ff fff0 	bl	8018e48 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	685b      	ldr	r3, [r3, #4]
 8018e6c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	db26      	blt.n	8018ec2 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	1c5a      	adds	r2, r3, #1
 8018e78:	60fa      	str	r2, [r7, #12]
 8018e7a:	687a      	ldr	r2, [r7, #4]
 8018e7c:	18d3      	adds	r3, r2, r3
 8018e7e:	1cfa      	adds	r2, r7, #3
 8018e80:	7812      	ldrb	r2, [r2, #0]
 8018e82:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	2b3c      	cmp	r3, #60	@ 0x3c
 8018e88:	dd12      	ble.n	8018eb0 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6818      	ldr	r0, [r3, #0]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	330c      	adds	r3, #12
 8018e92:	0019      	movs	r1, r3
 8018e94:	68fa      	ldr	r2, [r7, #12]
 8018e96:	2308      	movs	r3, #8
 8018e98:	18fb      	adds	r3, r7, r3
 8018e9a:	f7ff fb4a 	bl	8018532 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018e9e:	68ba      	ldr	r2, [r7, #8]
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d101      	bne.n	8018eaa <putc_bfd+0x62>
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	e001      	b.n	8018eae <putc_bfd+0x66>
 8018eaa:	2301      	movs	r3, #1
 8018eac:	425b      	negs	r3, r3
 8018eae:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	68fa      	ldr	r2, [r7, #12]
 8018eb4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	689b      	ldr	r3, [r3, #8]
 8018eba:	1c5a      	adds	r2, r3, #1
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	609a      	str	r2, [r3, #8]
 8018ec0:	e000      	b.n	8018ec4 <putc_bfd+0x7c>
	if (i < 0) return;
 8018ec2:	46c0      	nop			@ (mov r8, r8)
}
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	b004      	add	sp, #16
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8018eca:	b580      	push	{r7, lr}
 8018ecc:	b084      	sub	sp, #16
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	685b      	ldr	r3, [r3, #4]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	db15      	blt.n	8018f06 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	6818      	ldr	r0, [r3, #0]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	330c      	adds	r3, #12
 8018ee2:	0019      	movs	r1, r3
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	685b      	ldr	r3, [r3, #4]
 8018ee8:	001a      	movs	r2, r3
 8018eea:	230c      	movs	r3, #12
 8018eec:	18fb      	adds	r3, r7, r3
 8018eee:	f7ff fb20 	bl	8018532 <f_write>
 8018ef2:	1e03      	subs	r3, r0, #0
 8018ef4:	d107      	bne.n	8018f06 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	68fa      	ldr	r2, [r7, #12]
 8018efc:	4293      	cmp	r3, r2
 8018efe:	d102      	bne.n	8018f06 <putc_flush+0x3c>
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	689b      	ldr	r3, [r3, #8]
 8018f04:	e001      	b.n	8018f0a <putc_flush+0x40>
	return EOF;
 8018f06:	2301      	movs	r3, #1
 8018f08:	425b      	negs	r3, r3
}
 8018f0a:	0018      	movs	r0, r3
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	b004      	add	sp, #16
 8018f10:	bd80      	pop	{r7, pc}

08018f12 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b082      	sub	sp, #8
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	6078      	str	r0, [r7, #4]
 8018f1a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	683a      	ldr	r2, [r7, #0]
 8018f20:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2200      	movs	r2, #0
 8018f26:	605a      	str	r2, [r3, #4]
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	685a      	ldr	r2, [r3, #4]
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	609a      	str	r2, [r3, #8]
}
 8018f30:	46c0      	nop			@ (mov r8, r8)
 8018f32:	46bd      	mov	sp, r7
 8018f34:	b002      	add	sp, #8
 8018f36:	bd80      	pop	{r7, pc}

08018f38 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b096      	sub	sp, #88	@ 0x58
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8018f42:	683a      	ldr	r2, [r7, #0]
 8018f44:	230c      	movs	r3, #12
 8018f46:	18fb      	adds	r3, r7, r3
 8018f48:	0011      	movs	r1, r2
 8018f4a:	0018      	movs	r0, r3
 8018f4c:	f7ff ffe1 	bl	8018f12 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8018f50:	e009      	b.n	8018f66 <f_puts+0x2e>
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	1c5a      	adds	r2, r3, #1
 8018f56:	607a      	str	r2, [r7, #4]
 8018f58:	781a      	ldrb	r2, [r3, #0]
 8018f5a:	230c      	movs	r3, #12
 8018f5c:	18fb      	adds	r3, r7, r3
 8018f5e:	0011      	movs	r1, r2
 8018f60:	0018      	movs	r0, r3
 8018f62:	f7ff ff71 	bl	8018e48 <putc_bfd>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d1f1      	bne.n	8018f52 <f_puts+0x1a>
	return putc_flush(&pb);
 8018f6e:	230c      	movs	r3, #12
 8018f70:	18fb      	adds	r3, r7, r3
 8018f72:	0018      	movs	r0, r3
 8018f74:	f7ff ffa9 	bl	8018eca <putc_flush>
 8018f78:	0003      	movs	r3, r0
}
 8018f7a:	0018      	movs	r0, r3
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	b016      	add	sp, #88	@ 0x58
 8018f80:	bd80      	pop	{r7, pc}
	...

08018f84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018f84:	b590      	push	{r4, r7, lr}
 8018f86:	b087      	sub	sp, #28
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	60f8      	str	r0, [r7, #12]
 8018f8c:	60b9      	str	r1, [r7, #8]
 8018f8e:	1dfb      	adds	r3, r7, #7
 8018f90:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8018f92:	2417      	movs	r4, #23
 8018f94:	193b      	adds	r3, r7, r4
 8018f96:	2201      	movs	r2, #1
 8018f98:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8018f9a:	2016      	movs	r0, #22
 8018f9c:	183b      	adds	r3, r7, r0
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8018fa2:	4b21      	ldr	r3, [pc, #132]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fa4:	7a5b      	ldrb	r3, [r3, #9]
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d136      	bne.n	801901a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018fac:	4b1e      	ldr	r3, [pc, #120]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fae:	7a5b      	ldrb	r3, [r3, #9]
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	001a      	movs	r2, r3
 8018fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fb6:	2100      	movs	r1, #0
 8018fb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018fba:	4b1b      	ldr	r3, [pc, #108]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fbc:	7a5b      	ldrb	r3, [r3, #9]
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	4a19      	ldr	r2, [pc, #100]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	18d3      	adds	r3, r2, r3
 8018fc6:	3304      	adds	r3, #4
 8018fc8:	68fa      	ldr	r2, [r7, #12]
 8018fca:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8018fcc:	4b16      	ldr	r3, [pc, #88]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fce:	7a5b      	ldrb	r3, [r3, #9]
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	001a      	movs	r2, r3
 8018fd4:	4b14      	ldr	r3, [pc, #80]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fd6:	189b      	adds	r3, r3, r2
 8018fd8:	1dfa      	adds	r2, r7, #7
 8018fda:	7812      	ldrb	r2, [r2, #0]
 8018fdc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018fde:	4b12      	ldr	r3, [pc, #72]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fe0:	7a5b      	ldrb	r3, [r3, #9]
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	1c5a      	adds	r2, r3, #1
 8018fe6:	b2d1      	uxtb	r1, r2
 8018fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8019028 <FATFS_LinkDriverEx+0xa4>)
 8018fea:	7251      	strb	r1, [r2, #9]
 8018fec:	183a      	adds	r2, r7, r0
 8018fee:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8018ff0:	183b      	adds	r3, r7, r0
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	3330      	adds	r3, #48	@ 0x30
 8018ff6:	b2da      	uxtb	r2, r3
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	3301      	adds	r3, #1
 8019000:	223a      	movs	r2, #58	@ 0x3a
 8019002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	3302      	adds	r3, #2
 8019008:	222f      	movs	r2, #47	@ 0x2f
 801900a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	3303      	adds	r3, #3
 8019010:	2200      	movs	r2, #0
 8019012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019014:	193b      	adds	r3, r7, r4
 8019016:	2200      	movs	r2, #0
 8019018:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801901a:	2317      	movs	r3, #23
 801901c:	18fb      	adds	r3, r7, r3
 801901e:	781b      	ldrb	r3, [r3, #0]
}
 8019020:	0018      	movs	r0, r3
 8019022:	46bd      	mov	sp, r7
 8019024:	b007      	add	sp, #28
 8019026:	bd90      	pop	{r4, r7, pc}
 8019028:	20003638 	.word	0x20003638

0801902c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019036:	6839      	ldr	r1, [r7, #0]
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2200      	movs	r2, #0
 801903c:	0018      	movs	r0, r3
 801903e:	f7ff ffa1 	bl	8018f84 <FATFS_LinkDriverEx>
 8019042:	0003      	movs	r3, r0
}
 8019044:	0018      	movs	r0, r3
 8019046:	46bd      	mov	sp, r7
 8019048:	b002      	add	sp, #8
 801904a:	bd80      	pop	{r7, pc}

0801904c <sniprintf>:
 801904c:	b40c      	push	{r2, r3}
 801904e:	b530      	push	{r4, r5, lr}
 8019050:	4b17      	ldr	r3, [pc, #92]	@ (80190b0 <sniprintf+0x64>)
 8019052:	000c      	movs	r4, r1
 8019054:	681d      	ldr	r5, [r3, #0]
 8019056:	b09d      	sub	sp, #116	@ 0x74
 8019058:	2900      	cmp	r1, #0
 801905a:	da08      	bge.n	801906e <sniprintf+0x22>
 801905c:	238b      	movs	r3, #139	@ 0x8b
 801905e:	2001      	movs	r0, #1
 8019060:	602b      	str	r3, [r5, #0]
 8019062:	4240      	negs	r0, r0
 8019064:	b01d      	add	sp, #116	@ 0x74
 8019066:	bc30      	pop	{r4, r5}
 8019068:	bc08      	pop	{r3}
 801906a:	b002      	add	sp, #8
 801906c:	4718      	bx	r3
 801906e:	2382      	movs	r3, #130	@ 0x82
 8019070:	466a      	mov	r2, sp
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	8293      	strh	r3, [r2, #20]
 8019076:	2300      	movs	r3, #0
 8019078:	9002      	str	r0, [sp, #8]
 801907a:	9006      	str	r0, [sp, #24]
 801907c:	4299      	cmp	r1, r3
 801907e:	d000      	beq.n	8019082 <sniprintf+0x36>
 8019080:	1e4b      	subs	r3, r1, #1
 8019082:	9304      	str	r3, [sp, #16]
 8019084:	9307      	str	r3, [sp, #28]
 8019086:	2301      	movs	r3, #1
 8019088:	466a      	mov	r2, sp
 801908a:	425b      	negs	r3, r3
 801908c:	82d3      	strh	r3, [r2, #22]
 801908e:	0028      	movs	r0, r5
 8019090:	ab21      	add	r3, sp, #132	@ 0x84
 8019092:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019094:	a902      	add	r1, sp, #8
 8019096:	9301      	str	r3, [sp, #4]
 8019098:	f000 f9b4 	bl	8019404 <_svfiprintf_r>
 801909c:	1c43      	adds	r3, r0, #1
 801909e:	da01      	bge.n	80190a4 <sniprintf+0x58>
 80190a0:	238b      	movs	r3, #139	@ 0x8b
 80190a2:	602b      	str	r3, [r5, #0]
 80190a4:	2c00      	cmp	r4, #0
 80190a6:	d0dd      	beq.n	8019064 <sniprintf+0x18>
 80190a8:	2200      	movs	r2, #0
 80190aa:	9b02      	ldr	r3, [sp, #8]
 80190ac:	701a      	strb	r2, [r3, #0]
 80190ae:	e7d9      	b.n	8019064 <sniprintf+0x18>
 80190b0:	20000568 	.word	0x20000568

080190b4 <memcmp>:
 80190b4:	b530      	push	{r4, r5, lr}
 80190b6:	2400      	movs	r4, #0
 80190b8:	3901      	subs	r1, #1
 80190ba:	42a2      	cmp	r2, r4
 80190bc:	d101      	bne.n	80190c2 <memcmp+0xe>
 80190be:	2000      	movs	r0, #0
 80190c0:	e005      	b.n	80190ce <memcmp+0x1a>
 80190c2:	5d03      	ldrb	r3, [r0, r4]
 80190c4:	3401      	adds	r4, #1
 80190c6:	5d0d      	ldrb	r5, [r1, r4]
 80190c8:	42ab      	cmp	r3, r5
 80190ca:	d0f6      	beq.n	80190ba <memcmp+0x6>
 80190cc:	1b58      	subs	r0, r3, r5
 80190ce:	bd30      	pop	{r4, r5, pc}

080190d0 <memset>:
 80190d0:	0003      	movs	r3, r0
 80190d2:	1882      	adds	r2, r0, r2
 80190d4:	4293      	cmp	r3, r2
 80190d6:	d100      	bne.n	80190da <memset+0xa>
 80190d8:	4770      	bx	lr
 80190da:	7019      	strb	r1, [r3, #0]
 80190dc:	3301      	adds	r3, #1
 80190de:	e7f9      	b.n	80190d4 <memset+0x4>

080190e0 <__errno>:
 80190e0:	4b01      	ldr	r3, [pc, #4]	@ (80190e8 <__errno+0x8>)
 80190e2:	6818      	ldr	r0, [r3, #0]
 80190e4:	4770      	bx	lr
 80190e6:	46c0      	nop			@ (mov r8, r8)
 80190e8:	20000568 	.word	0x20000568

080190ec <__libc_init_array>:
 80190ec:	b570      	push	{r4, r5, r6, lr}
 80190ee:	2600      	movs	r6, #0
 80190f0:	4c0c      	ldr	r4, [pc, #48]	@ (8019124 <__libc_init_array+0x38>)
 80190f2:	4d0d      	ldr	r5, [pc, #52]	@ (8019128 <__libc_init_array+0x3c>)
 80190f4:	1b64      	subs	r4, r4, r5
 80190f6:	10a4      	asrs	r4, r4, #2
 80190f8:	42a6      	cmp	r6, r4
 80190fa:	d109      	bne.n	8019110 <__libc_init_array+0x24>
 80190fc:	2600      	movs	r6, #0
 80190fe:	f000 fc65 	bl	80199cc <_init>
 8019102:	4c0a      	ldr	r4, [pc, #40]	@ (801912c <__libc_init_array+0x40>)
 8019104:	4d0a      	ldr	r5, [pc, #40]	@ (8019130 <__libc_init_array+0x44>)
 8019106:	1b64      	subs	r4, r4, r5
 8019108:	10a4      	asrs	r4, r4, #2
 801910a:	42a6      	cmp	r6, r4
 801910c:	d105      	bne.n	801911a <__libc_init_array+0x2e>
 801910e:	bd70      	pop	{r4, r5, r6, pc}
 8019110:	00b3      	lsls	r3, r6, #2
 8019112:	58eb      	ldr	r3, [r5, r3]
 8019114:	4798      	blx	r3
 8019116:	3601      	adds	r6, #1
 8019118:	e7ee      	b.n	80190f8 <__libc_init_array+0xc>
 801911a:	00b3      	lsls	r3, r6, #2
 801911c:	58eb      	ldr	r3, [r5, r3]
 801911e:	4798      	blx	r3
 8019120:	3601      	adds	r6, #1
 8019122:	e7f2      	b.n	801910a <__libc_init_array+0x1e>
 8019124:	0801a264 	.word	0x0801a264
 8019128:	0801a264 	.word	0x0801a264
 801912c:	0801a268 	.word	0x0801a268
 8019130:	0801a264 	.word	0x0801a264

08019134 <__retarget_lock_acquire_recursive>:
 8019134:	4770      	bx	lr

08019136 <__retarget_lock_release_recursive>:
 8019136:	4770      	bx	lr

08019138 <memcpy>:
 8019138:	2300      	movs	r3, #0
 801913a:	b510      	push	{r4, lr}
 801913c:	429a      	cmp	r2, r3
 801913e:	d100      	bne.n	8019142 <memcpy+0xa>
 8019140:	bd10      	pop	{r4, pc}
 8019142:	5ccc      	ldrb	r4, [r1, r3]
 8019144:	54c4      	strb	r4, [r0, r3]
 8019146:	3301      	adds	r3, #1
 8019148:	e7f8      	b.n	801913c <memcpy+0x4>
	...

0801914c <_free_r>:
 801914c:	b570      	push	{r4, r5, r6, lr}
 801914e:	0005      	movs	r5, r0
 8019150:	1e0c      	subs	r4, r1, #0
 8019152:	d010      	beq.n	8019176 <_free_r+0x2a>
 8019154:	3c04      	subs	r4, #4
 8019156:	6823      	ldr	r3, [r4, #0]
 8019158:	2b00      	cmp	r3, #0
 801915a:	da00      	bge.n	801915e <_free_r+0x12>
 801915c:	18e4      	adds	r4, r4, r3
 801915e:	0028      	movs	r0, r5
 8019160:	f000 f8e0 	bl	8019324 <__malloc_lock>
 8019164:	4a1d      	ldr	r2, [pc, #116]	@ (80191dc <_free_r+0x90>)
 8019166:	6813      	ldr	r3, [r2, #0]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d105      	bne.n	8019178 <_free_r+0x2c>
 801916c:	6063      	str	r3, [r4, #4]
 801916e:	6014      	str	r4, [r2, #0]
 8019170:	0028      	movs	r0, r5
 8019172:	f000 f8df 	bl	8019334 <__malloc_unlock>
 8019176:	bd70      	pop	{r4, r5, r6, pc}
 8019178:	42a3      	cmp	r3, r4
 801917a:	d908      	bls.n	801918e <_free_r+0x42>
 801917c:	6820      	ldr	r0, [r4, #0]
 801917e:	1821      	adds	r1, r4, r0
 8019180:	428b      	cmp	r3, r1
 8019182:	d1f3      	bne.n	801916c <_free_r+0x20>
 8019184:	6819      	ldr	r1, [r3, #0]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	1809      	adds	r1, r1, r0
 801918a:	6021      	str	r1, [r4, #0]
 801918c:	e7ee      	b.n	801916c <_free_r+0x20>
 801918e:	001a      	movs	r2, r3
 8019190:	685b      	ldr	r3, [r3, #4]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d001      	beq.n	801919a <_free_r+0x4e>
 8019196:	42a3      	cmp	r3, r4
 8019198:	d9f9      	bls.n	801918e <_free_r+0x42>
 801919a:	6811      	ldr	r1, [r2, #0]
 801919c:	1850      	adds	r0, r2, r1
 801919e:	42a0      	cmp	r0, r4
 80191a0:	d10b      	bne.n	80191ba <_free_r+0x6e>
 80191a2:	6820      	ldr	r0, [r4, #0]
 80191a4:	1809      	adds	r1, r1, r0
 80191a6:	1850      	adds	r0, r2, r1
 80191a8:	6011      	str	r1, [r2, #0]
 80191aa:	4283      	cmp	r3, r0
 80191ac:	d1e0      	bne.n	8019170 <_free_r+0x24>
 80191ae:	6818      	ldr	r0, [r3, #0]
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	1841      	adds	r1, r0, r1
 80191b4:	6011      	str	r1, [r2, #0]
 80191b6:	6053      	str	r3, [r2, #4]
 80191b8:	e7da      	b.n	8019170 <_free_r+0x24>
 80191ba:	42a0      	cmp	r0, r4
 80191bc:	d902      	bls.n	80191c4 <_free_r+0x78>
 80191be:	230c      	movs	r3, #12
 80191c0:	602b      	str	r3, [r5, #0]
 80191c2:	e7d5      	b.n	8019170 <_free_r+0x24>
 80191c4:	6820      	ldr	r0, [r4, #0]
 80191c6:	1821      	adds	r1, r4, r0
 80191c8:	428b      	cmp	r3, r1
 80191ca:	d103      	bne.n	80191d4 <_free_r+0x88>
 80191cc:	6819      	ldr	r1, [r3, #0]
 80191ce:	685b      	ldr	r3, [r3, #4]
 80191d0:	1809      	adds	r1, r1, r0
 80191d2:	6021      	str	r1, [r4, #0]
 80191d4:	6063      	str	r3, [r4, #4]
 80191d6:	6054      	str	r4, [r2, #4]
 80191d8:	e7ca      	b.n	8019170 <_free_r+0x24>
 80191da:	46c0      	nop			@ (mov r8, r8)
 80191dc:	20003788 	.word	0x20003788

080191e0 <sbrk_aligned>:
 80191e0:	b570      	push	{r4, r5, r6, lr}
 80191e2:	4e0f      	ldr	r6, [pc, #60]	@ (8019220 <sbrk_aligned+0x40>)
 80191e4:	000d      	movs	r5, r1
 80191e6:	6831      	ldr	r1, [r6, #0]
 80191e8:	0004      	movs	r4, r0
 80191ea:	2900      	cmp	r1, #0
 80191ec:	d102      	bne.n	80191f4 <sbrk_aligned+0x14>
 80191ee:	f000 fb99 	bl	8019924 <_sbrk_r>
 80191f2:	6030      	str	r0, [r6, #0]
 80191f4:	0029      	movs	r1, r5
 80191f6:	0020      	movs	r0, r4
 80191f8:	f000 fb94 	bl	8019924 <_sbrk_r>
 80191fc:	1c43      	adds	r3, r0, #1
 80191fe:	d103      	bne.n	8019208 <sbrk_aligned+0x28>
 8019200:	2501      	movs	r5, #1
 8019202:	426d      	negs	r5, r5
 8019204:	0028      	movs	r0, r5
 8019206:	bd70      	pop	{r4, r5, r6, pc}
 8019208:	2303      	movs	r3, #3
 801920a:	1cc5      	adds	r5, r0, #3
 801920c:	439d      	bics	r5, r3
 801920e:	42a8      	cmp	r0, r5
 8019210:	d0f8      	beq.n	8019204 <sbrk_aligned+0x24>
 8019212:	1a29      	subs	r1, r5, r0
 8019214:	0020      	movs	r0, r4
 8019216:	f000 fb85 	bl	8019924 <_sbrk_r>
 801921a:	3001      	adds	r0, #1
 801921c:	d1f2      	bne.n	8019204 <sbrk_aligned+0x24>
 801921e:	e7ef      	b.n	8019200 <sbrk_aligned+0x20>
 8019220:	20003784 	.word	0x20003784

08019224 <_malloc_r>:
 8019224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019226:	2203      	movs	r2, #3
 8019228:	1ccb      	adds	r3, r1, #3
 801922a:	4393      	bics	r3, r2
 801922c:	3308      	adds	r3, #8
 801922e:	0005      	movs	r5, r0
 8019230:	001f      	movs	r7, r3
 8019232:	2b0c      	cmp	r3, #12
 8019234:	d234      	bcs.n	80192a0 <_malloc_r+0x7c>
 8019236:	270c      	movs	r7, #12
 8019238:	42b9      	cmp	r1, r7
 801923a:	d833      	bhi.n	80192a4 <_malloc_r+0x80>
 801923c:	0028      	movs	r0, r5
 801923e:	f000 f871 	bl	8019324 <__malloc_lock>
 8019242:	4e37      	ldr	r6, [pc, #220]	@ (8019320 <_malloc_r+0xfc>)
 8019244:	6833      	ldr	r3, [r6, #0]
 8019246:	001c      	movs	r4, r3
 8019248:	2c00      	cmp	r4, #0
 801924a:	d12f      	bne.n	80192ac <_malloc_r+0x88>
 801924c:	0039      	movs	r1, r7
 801924e:	0028      	movs	r0, r5
 8019250:	f7ff ffc6 	bl	80191e0 <sbrk_aligned>
 8019254:	0004      	movs	r4, r0
 8019256:	1c43      	adds	r3, r0, #1
 8019258:	d15f      	bne.n	801931a <_malloc_r+0xf6>
 801925a:	6834      	ldr	r4, [r6, #0]
 801925c:	9400      	str	r4, [sp, #0]
 801925e:	9b00      	ldr	r3, [sp, #0]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d14a      	bne.n	80192fa <_malloc_r+0xd6>
 8019264:	2c00      	cmp	r4, #0
 8019266:	d052      	beq.n	801930e <_malloc_r+0xea>
 8019268:	6823      	ldr	r3, [r4, #0]
 801926a:	0028      	movs	r0, r5
 801926c:	18e3      	adds	r3, r4, r3
 801926e:	9900      	ldr	r1, [sp, #0]
 8019270:	9301      	str	r3, [sp, #4]
 8019272:	f000 fb57 	bl	8019924 <_sbrk_r>
 8019276:	9b01      	ldr	r3, [sp, #4]
 8019278:	4283      	cmp	r3, r0
 801927a:	d148      	bne.n	801930e <_malloc_r+0xea>
 801927c:	6823      	ldr	r3, [r4, #0]
 801927e:	0028      	movs	r0, r5
 8019280:	1aff      	subs	r7, r7, r3
 8019282:	0039      	movs	r1, r7
 8019284:	f7ff ffac 	bl	80191e0 <sbrk_aligned>
 8019288:	3001      	adds	r0, #1
 801928a:	d040      	beq.n	801930e <_malloc_r+0xea>
 801928c:	6823      	ldr	r3, [r4, #0]
 801928e:	19db      	adds	r3, r3, r7
 8019290:	6023      	str	r3, [r4, #0]
 8019292:	6833      	ldr	r3, [r6, #0]
 8019294:	685a      	ldr	r2, [r3, #4]
 8019296:	2a00      	cmp	r2, #0
 8019298:	d133      	bne.n	8019302 <_malloc_r+0xde>
 801929a:	9b00      	ldr	r3, [sp, #0]
 801929c:	6033      	str	r3, [r6, #0]
 801929e:	e019      	b.n	80192d4 <_malloc_r+0xb0>
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	dac9      	bge.n	8019238 <_malloc_r+0x14>
 80192a4:	230c      	movs	r3, #12
 80192a6:	602b      	str	r3, [r5, #0]
 80192a8:	2000      	movs	r0, #0
 80192aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192ac:	6821      	ldr	r1, [r4, #0]
 80192ae:	1bc9      	subs	r1, r1, r7
 80192b0:	d420      	bmi.n	80192f4 <_malloc_r+0xd0>
 80192b2:	290b      	cmp	r1, #11
 80192b4:	d90a      	bls.n	80192cc <_malloc_r+0xa8>
 80192b6:	19e2      	adds	r2, r4, r7
 80192b8:	6027      	str	r7, [r4, #0]
 80192ba:	42a3      	cmp	r3, r4
 80192bc:	d104      	bne.n	80192c8 <_malloc_r+0xa4>
 80192be:	6032      	str	r2, [r6, #0]
 80192c0:	6863      	ldr	r3, [r4, #4]
 80192c2:	6011      	str	r1, [r2, #0]
 80192c4:	6053      	str	r3, [r2, #4]
 80192c6:	e005      	b.n	80192d4 <_malloc_r+0xb0>
 80192c8:	605a      	str	r2, [r3, #4]
 80192ca:	e7f9      	b.n	80192c0 <_malloc_r+0x9c>
 80192cc:	6862      	ldr	r2, [r4, #4]
 80192ce:	42a3      	cmp	r3, r4
 80192d0:	d10e      	bne.n	80192f0 <_malloc_r+0xcc>
 80192d2:	6032      	str	r2, [r6, #0]
 80192d4:	0028      	movs	r0, r5
 80192d6:	f000 f82d 	bl	8019334 <__malloc_unlock>
 80192da:	0020      	movs	r0, r4
 80192dc:	2207      	movs	r2, #7
 80192de:	300b      	adds	r0, #11
 80192e0:	1d23      	adds	r3, r4, #4
 80192e2:	4390      	bics	r0, r2
 80192e4:	1ac2      	subs	r2, r0, r3
 80192e6:	4298      	cmp	r0, r3
 80192e8:	d0df      	beq.n	80192aa <_malloc_r+0x86>
 80192ea:	1a1b      	subs	r3, r3, r0
 80192ec:	50a3      	str	r3, [r4, r2]
 80192ee:	e7dc      	b.n	80192aa <_malloc_r+0x86>
 80192f0:	605a      	str	r2, [r3, #4]
 80192f2:	e7ef      	b.n	80192d4 <_malloc_r+0xb0>
 80192f4:	0023      	movs	r3, r4
 80192f6:	6864      	ldr	r4, [r4, #4]
 80192f8:	e7a6      	b.n	8019248 <_malloc_r+0x24>
 80192fa:	9c00      	ldr	r4, [sp, #0]
 80192fc:	6863      	ldr	r3, [r4, #4]
 80192fe:	9300      	str	r3, [sp, #0]
 8019300:	e7ad      	b.n	801925e <_malloc_r+0x3a>
 8019302:	001a      	movs	r2, r3
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	42a3      	cmp	r3, r4
 8019308:	d1fb      	bne.n	8019302 <_malloc_r+0xde>
 801930a:	2300      	movs	r3, #0
 801930c:	e7da      	b.n	80192c4 <_malloc_r+0xa0>
 801930e:	230c      	movs	r3, #12
 8019310:	0028      	movs	r0, r5
 8019312:	602b      	str	r3, [r5, #0]
 8019314:	f000 f80e 	bl	8019334 <__malloc_unlock>
 8019318:	e7c6      	b.n	80192a8 <_malloc_r+0x84>
 801931a:	6007      	str	r7, [r0, #0]
 801931c:	e7da      	b.n	80192d4 <_malloc_r+0xb0>
 801931e:	46c0      	nop			@ (mov r8, r8)
 8019320:	20003788 	.word	0x20003788

08019324 <__malloc_lock>:
 8019324:	b510      	push	{r4, lr}
 8019326:	4802      	ldr	r0, [pc, #8]	@ (8019330 <__malloc_lock+0xc>)
 8019328:	f7ff ff04 	bl	8019134 <__retarget_lock_acquire_recursive>
 801932c:	bd10      	pop	{r4, pc}
 801932e:	46c0      	nop			@ (mov r8, r8)
 8019330:	20003780 	.word	0x20003780

08019334 <__malloc_unlock>:
 8019334:	b510      	push	{r4, lr}
 8019336:	4802      	ldr	r0, [pc, #8]	@ (8019340 <__malloc_unlock+0xc>)
 8019338:	f7ff fefd 	bl	8019136 <__retarget_lock_release_recursive>
 801933c:	bd10      	pop	{r4, pc}
 801933e:	46c0      	nop			@ (mov r8, r8)
 8019340:	20003780 	.word	0x20003780

08019344 <__ssputs_r>:
 8019344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019346:	688e      	ldr	r6, [r1, #8]
 8019348:	b085      	sub	sp, #20
 801934a:	001f      	movs	r7, r3
 801934c:	000c      	movs	r4, r1
 801934e:	680b      	ldr	r3, [r1, #0]
 8019350:	9002      	str	r0, [sp, #8]
 8019352:	9203      	str	r2, [sp, #12]
 8019354:	42be      	cmp	r6, r7
 8019356:	d830      	bhi.n	80193ba <__ssputs_r+0x76>
 8019358:	210c      	movs	r1, #12
 801935a:	5e62      	ldrsh	r2, [r4, r1]
 801935c:	2190      	movs	r1, #144	@ 0x90
 801935e:	00c9      	lsls	r1, r1, #3
 8019360:	420a      	tst	r2, r1
 8019362:	d028      	beq.n	80193b6 <__ssputs_r+0x72>
 8019364:	2003      	movs	r0, #3
 8019366:	6921      	ldr	r1, [r4, #16]
 8019368:	1a5b      	subs	r3, r3, r1
 801936a:	9301      	str	r3, [sp, #4]
 801936c:	6963      	ldr	r3, [r4, #20]
 801936e:	4343      	muls	r3, r0
 8019370:	9801      	ldr	r0, [sp, #4]
 8019372:	0fdd      	lsrs	r5, r3, #31
 8019374:	18ed      	adds	r5, r5, r3
 8019376:	1c7b      	adds	r3, r7, #1
 8019378:	181b      	adds	r3, r3, r0
 801937a:	106d      	asrs	r5, r5, #1
 801937c:	42ab      	cmp	r3, r5
 801937e:	d900      	bls.n	8019382 <__ssputs_r+0x3e>
 8019380:	001d      	movs	r5, r3
 8019382:	0552      	lsls	r2, r2, #21
 8019384:	d528      	bpl.n	80193d8 <__ssputs_r+0x94>
 8019386:	0029      	movs	r1, r5
 8019388:	9802      	ldr	r0, [sp, #8]
 801938a:	f7ff ff4b 	bl	8019224 <_malloc_r>
 801938e:	1e06      	subs	r6, r0, #0
 8019390:	d02c      	beq.n	80193ec <__ssputs_r+0xa8>
 8019392:	9a01      	ldr	r2, [sp, #4]
 8019394:	6921      	ldr	r1, [r4, #16]
 8019396:	f7ff fecf 	bl	8019138 <memcpy>
 801939a:	89a2      	ldrh	r2, [r4, #12]
 801939c:	4b18      	ldr	r3, [pc, #96]	@ (8019400 <__ssputs_r+0xbc>)
 801939e:	401a      	ands	r2, r3
 80193a0:	2380      	movs	r3, #128	@ 0x80
 80193a2:	4313      	orrs	r3, r2
 80193a4:	81a3      	strh	r3, [r4, #12]
 80193a6:	9b01      	ldr	r3, [sp, #4]
 80193a8:	6126      	str	r6, [r4, #16]
 80193aa:	18f6      	adds	r6, r6, r3
 80193ac:	6026      	str	r6, [r4, #0]
 80193ae:	003e      	movs	r6, r7
 80193b0:	6165      	str	r5, [r4, #20]
 80193b2:	1aed      	subs	r5, r5, r3
 80193b4:	60a5      	str	r5, [r4, #8]
 80193b6:	42be      	cmp	r6, r7
 80193b8:	d900      	bls.n	80193bc <__ssputs_r+0x78>
 80193ba:	003e      	movs	r6, r7
 80193bc:	0032      	movs	r2, r6
 80193be:	9903      	ldr	r1, [sp, #12]
 80193c0:	6820      	ldr	r0, [r4, #0]
 80193c2:	f000 fa9b 	bl	80198fc <memmove>
 80193c6:	2000      	movs	r0, #0
 80193c8:	68a3      	ldr	r3, [r4, #8]
 80193ca:	1b9b      	subs	r3, r3, r6
 80193cc:	60a3      	str	r3, [r4, #8]
 80193ce:	6823      	ldr	r3, [r4, #0]
 80193d0:	199b      	adds	r3, r3, r6
 80193d2:	6023      	str	r3, [r4, #0]
 80193d4:	b005      	add	sp, #20
 80193d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193d8:	002a      	movs	r2, r5
 80193da:	9802      	ldr	r0, [sp, #8]
 80193dc:	f000 fabf 	bl	801995e <_realloc_r>
 80193e0:	1e06      	subs	r6, r0, #0
 80193e2:	d1e0      	bne.n	80193a6 <__ssputs_r+0x62>
 80193e4:	6921      	ldr	r1, [r4, #16]
 80193e6:	9802      	ldr	r0, [sp, #8]
 80193e8:	f7ff feb0 	bl	801914c <_free_r>
 80193ec:	230c      	movs	r3, #12
 80193ee:	2001      	movs	r0, #1
 80193f0:	9a02      	ldr	r2, [sp, #8]
 80193f2:	4240      	negs	r0, r0
 80193f4:	6013      	str	r3, [r2, #0]
 80193f6:	89a2      	ldrh	r2, [r4, #12]
 80193f8:	3334      	adds	r3, #52	@ 0x34
 80193fa:	4313      	orrs	r3, r2
 80193fc:	81a3      	strh	r3, [r4, #12]
 80193fe:	e7e9      	b.n	80193d4 <__ssputs_r+0x90>
 8019400:	fffffb7f 	.word	0xfffffb7f

08019404 <_svfiprintf_r>:
 8019404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019406:	b0a1      	sub	sp, #132	@ 0x84
 8019408:	9003      	str	r0, [sp, #12]
 801940a:	001d      	movs	r5, r3
 801940c:	898b      	ldrh	r3, [r1, #12]
 801940e:	000f      	movs	r7, r1
 8019410:	0016      	movs	r6, r2
 8019412:	061b      	lsls	r3, r3, #24
 8019414:	d511      	bpl.n	801943a <_svfiprintf_r+0x36>
 8019416:	690b      	ldr	r3, [r1, #16]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d10e      	bne.n	801943a <_svfiprintf_r+0x36>
 801941c:	2140      	movs	r1, #64	@ 0x40
 801941e:	f7ff ff01 	bl	8019224 <_malloc_r>
 8019422:	6038      	str	r0, [r7, #0]
 8019424:	6138      	str	r0, [r7, #16]
 8019426:	2800      	cmp	r0, #0
 8019428:	d105      	bne.n	8019436 <_svfiprintf_r+0x32>
 801942a:	230c      	movs	r3, #12
 801942c:	9a03      	ldr	r2, [sp, #12]
 801942e:	6013      	str	r3, [r2, #0]
 8019430:	2001      	movs	r0, #1
 8019432:	4240      	negs	r0, r0
 8019434:	e0cf      	b.n	80195d6 <_svfiprintf_r+0x1d2>
 8019436:	2340      	movs	r3, #64	@ 0x40
 8019438:	617b      	str	r3, [r7, #20]
 801943a:	2300      	movs	r3, #0
 801943c:	ac08      	add	r4, sp, #32
 801943e:	6163      	str	r3, [r4, #20]
 8019440:	3320      	adds	r3, #32
 8019442:	7663      	strb	r3, [r4, #25]
 8019444:	3310      	adds	r3, #16
 8019446:	76a3      	strb	r3, [r4, #26]
 8019448:	9507      	str	r5, [sp, #28]
 801944a:	0035      	movs	r5, r6
 801944c:	782b      	ldrb	r3, [r5, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d001      	beq.n	8019456 <_svfiprintf_r+0x52>
 8019452:	2b25      	cmp	r3, #37	@ 0x25
 8019454:	d148      	bne.n	80194e8 <_svfiprintf_r+0xe4>
 8019456:	1bab      	subs	r3, r5, r6
 8019458:	9305      	str	r3, [sp, #20]
 801945a:	42b5      	cmp	r5, r6
 801945c:	d00b      	beq.n	8019476 <_svfiprintf_r+0x72>
 801945e:	0032      	movs	r2, r6
 8019460:	0039      	movs	r1, r7
 8019462:	9803      	ldr	r0, [sp, #12]
 8019464:	f7ff ff6e 	bl	8019344 <__ssputs_r>
 8019468:	3001      	adds	r0, #1
 801946a:	d100      	bne.n	801946e <_svfiprintf_r+0x6a>
 801946c:	e0ae      	b.n	80195cc <_svfiprintf_r+0x1c8>
 801946e:	6963      	ldr	r3, [r4, #20]
 8019470:	9a05      	ldr	r2, [sp, #20]
 8019472:	189b      	adds	r3, r3, r2
 8019474:	6163      	str	r3, [r4, #20]
 8019476:	782b      	ldrb	r3, [r5, #0]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d100      	bne.n	801947e <_svfiprintf_r+0x7a>
 801947c:	e0a6      	b.n	80195cc <_svfiprintf_r+0x1c8>
 801947e:	2201      	movs	r2, #1
 8019480:	2300      	movs	r3, #0
 8019482:	4252      	negs	r2, r2
 8019484:	6062      	str	r2, [r4, #4]
 8019486:	a904      	add	r1, sp, #16
 8019488:	3254      	adds	r2, #84	@ 0x54
 801948a:	1852      	adds	r2, r2, r1
 801948c:	1c6e      	adds	r6, r5, #1
 801948e:	6023      	str	r3, [r4, #0]
 8019490:	60e3      	str	r3, [r4, #12]
 8019492:	60a3      	str	r3, [r4, #8]
 8019494:	7013      	strb	r3, [r2, #0]
 8019496:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019498:	4b54      	ldr	r3, [pc, #336]	@ (80195ec <_svfiprintf_r+0x1e8>)
 801949a:	2205      	movs	r2, #5
 801949c:	0018      	movs	r0, r3
 801949e:	7831      	ldrb	r1, [r6, #0]
 80194a0:	9305      	str	r3, [sp, #20]
 80194a2:	f000 fa51 	bl	8019948 <memchr>
 80194a6:	1c75      	adds	r5, r6, #1
 80194a8:	2800      	cmp	r0, #0
 80194aa:	d11f      	bne.n	80194ec <_svfiprintf_r+0xe8>
 80194ac:	6822      	ldr	r2, [r4, #0]
 80194ae:	06d3      	lsls	r3, r2, #27
 80194b0:	d504      	bpl.n	80194bc <_svfiprintf_r+0xb8>
 80194b2:	2353      	movs	r3, #83	@ 0x53
 80194b4:	a904      	add	r1, sp, #16
 80194b6:	185b      	adds	r3, r3, r1
 80194b8:	2120      	movs	r1, #32
 80194ba:	7019      	strb	r1, [r3, #0]
 80194bc:	0713      	lsls	r3, r2, #28
 80194be:	d504      	bpl.n	80194ca <_svfiprintf_r+0xc6>
 80194c0:	2353      	movs	r3, #83	@ 0x53
 80194c2:	a904      	add	r1, sp, #16
 80194c4:	185b      	adds	r3, r3, r1
 80194c6:	212b      	movs	r1, #43	@ 0x2b
 80194c8:	7019      	strb	r1, [r3, #0]
 80194ca:	7833      	ldrb	r3, [r6, #0]
 80194cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80194ce:	d016      	beq.n	80194fe <_svfiprintf_r+0xfa>
 80194d0:	0035      	movs	r5, r6
 80194d2:	2100      	movs	r1, #0
 80194d4:	200a      	movs	r0, #10
 80194d6:	68e3      	ldr	r3, [r4, #12]
 80194d8:	782a      	ldrb	r2, [r5, #0]
 80194da:	1c6e      	adds	r6, r5, #1
 80194dc:	3a30      	subs	r2, #48	@ 0x30
 80194de:	2a09      	cmp	r2, #9
 80194e0:	d950      	bls.n	8019584 <_svfiprintf_r+0x180>
 80194e2:	2900      	cmp	r1, #0
 80194e4:	d111      	bne.n	801950a <_svfiprintf_r+0x106>
 80194e6:	e017      	b.n	8019518 <_svfiprintf_r+0x114>
 80194e8:	3501      	adds	r5, #1
 80194ea:	e7af      	b.n	801944c <_svfiprintf_r+0x48>
 80194ec:	9b05      	ldr	r3, [sp, #20]
 80194ee:	6822      	ldr	r2, [r4, #0]
 80194f0:	1ac0      	subs	r0, r0, r3
 80194f2:	2301      	movs	r3, #1
 80194f4:	4083      	lsls	r3, r0
 80194f6:	4313      	orrs	r3, r2
 80194f8:	002e      	movs	r6, r5
 80194fa:	6023      	str	r3, [r4, #0]
 80194fc:	e7cc      	b.n	8019498 <_svfiprintf_r+0x94>
 80194fe:	9b07      	ldr	r3, [sp, #28]
 8019500:	1d19      	adds	r1, r3, #4
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	9107      	str	r1, [sp, #28]
 8019506:	2b00      	cmp	r3, #0
 8019508:	db01      	blt.n	801950e <_svfiprintf_r+0x10a>
 801950a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801950c:	e004      	b.n	8019518 <_svfiprintf_r+0x114>
 801950e:	425b      	negs	r3, r3
 8019510:	60e3      	str	r3, [r4, #12]
 8019512:	2302      	movs	r3, #2
 8019514:	4313      	orrs	r3, r2
 8019516:	6023      	str	r3, [r4, #0]
 8019518:	782b      	ldrb	r3, [r5, #0]
 801951a:	2b2e      	cmp	r3, #46	@ 0x2e
 801951c:	d10c      	bne.n	8019538 <_svfiprintf_r+0x134>
 801951e:	786b      	ldrb	r3, [r5, #1]
 8019520:	2b2a      	cmp	r3, #42	@ 0x2a
 8019522:	d134      	bne.n	801958e <_svfiprintf_r+0x18a>
 8019524:	9b07      	ldr	r3, [sp, #28]
 8019526:	3502      	adds	r5, #2
 8019528:	1d1a      	adds	r2, r3, #4
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	9207      	str	r2, [sp, #28]
 801952e:	2b00      	cmp	r3, #0
 8019530:	da01      	bge.n	8019536 <_svfiprintf_r+0x132>
 8019532:	2301      	movs	r3, #1
 8019534:	425b      	negs	r3, r3
 8019536:	9309      	str	r3, [sp, #36]	@ 0x24
 8019538:	4e2d      	ldr	r6, [pc, #180]	@ (80195f0 <_svfiprintf_r+0x1ec>)
 801953a:	2203      	movs	r2, #3
 801953c:	0030      	movs	r0, r6
 801953e:	7829      	ldrb	r1, [r5, #0]
 8019540:	f000 fa02 	bl	8019948 <memchr>
 8019544:	2800      	cmp	r0, #0
 8019546:	d006      	beq.n	8019556 <_svfiprintf_r+0x152>
 8019548:	2340      	movs	r3, #64	@ 0x40
 801954a:	1b80      	subs	r0, r0, r6
 801954c:	4083      	lsls	r3, r0
 801954e:	6822      	ldr	r2, [r4, #0]
 8019550:	3501      	adds	r5, #1
 8019552:	4313      	orrs	r3, r2
 8019554:	6023      	str	r3, [r4, #0]
 8019556:	7829      	ldrb	r1, [r5, #0]
 8019558:	2206      	movs	r2, #6
 801955a:	4826      	ldr	r0, [pc, #152]	@ (80195f4 <_svfiprintf_r+0x1f0>)
 801955c:	1c6e      	adds	r6, r5, #1
 801955e:	7621      	strb	r1, [r4, #24]
 8019560:	f000 f9f2 	bl	8019948 <memchr>
 8019564:	2800      	cmp	r0, #0
 8019566:	d038      	beq.n	80195da <_svfiprintf_r+0x1d6>
 8019568:	4b23      	ldr	r3, [pc, #140]	@ (80195f8 <_svfiprintf_r+0x1f4>)
 801956a:	2b00      	cmp	r3, #0
 801956c:	d122      	bne.n	80195b4 <_svfiprintf_r+0x1b0>
 801956e:	2207      	movs	r2, #7
 8019570:	9b07      	ldr	r3, [sp, #28]
 8019572:	3307      	adds	r3, #7
 8019574:	4393      	bics	r3, r2
 8019576:	3308      	adds	r3, #8
 8019578:	9307      	str	r3, [sp, #28]
 801957a:	6963      	ldr	r3, [r4, #20]
 801957c:	9a04      	ldr	r2, [sp, #16]
 801957e:	189b      	adds	r3, r3, r2
 8019580:	6163      	str	r3, [r4, #20]
 8019582:	e762      	b.n	801944a <_svfiprintf_r+0x46>
 8019584:	4343      	muls	r3, r0
 8019586:	0035      	movs	r5, r6
 8019588:	2101      	movs	r1, #1
 801958a:	189b      	adds	r3, r3, r2
 801958c:	e7a4      	b.n	80194d8 <_svfiprintf_r+0xd4>
 801958e:	2300      	movs	r3, #0
 8019590:	200a      	movs	r0, #10
 8019592:	0019      	movs	r1, r3
 8019594:	3501      	adds	r5, #1
 8019596:	6063      	str	r3, [r4, #4]
 8019598:	782a      	ldrb	r2, [r5, #0]
 801959a:	1c6e      	adds	r6, r5, #1
 801959c:	3a30      	subs	r2, #48	@ 0x30
 801959e:	2a09      	cmp	r2, #9
 80195a0:	d903      	bls.n	80195aa <_svfiprintf_r+0x1a6>
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d0c8      	beq.n	8019538 <_svfiprintf_r+0x134>
 80195a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80195a8:	e7c6      	b.n	8019538 <_svfiprintf_r+0x134>
 80195aa:	4341      	muls	r1, r0
 80195ac:	0035      	movs	r5, r6
 80195ae:	2301      	movs	r3, #1
 80195b0:	1889      	adds	r1, r1, r2
 80195b2:	e7f1      	b.n	8019598 <_svfiprintf_r+0x194>
 80195b4:	aa07      	add	r2, sp, #28
 80195b6:	9200      	str	r2, [sp, #0]
 80195b8:	0021      	movs	r1, r4
 80195ba:	003a      	movs	r2, r7
 80195bc:	4b0f      	ldr	r3, [pc, #60]	@ (80195fc <_svfiprintf_r+0x1f8>)
 80195be:	9803      	ldr	r0, [sp, #12]
 80195c0:	e000      	b.n	80195c4 <_svfiprintf_r+0x1c0>
 80195c2:	bf00      	nop
 80195c4:	9004      	str	r0, [sp, #16]
 80195c6:	9b04      	ldr	r3, [sp, #16]
 80195c8:	3301      	adds	r3, #1
 80195ca:	d1d6      	bne.n	801957a <_svfiprintf_r+0x176>
 80195cc:	89bb      	ldrh	r3, [r7, #12]
 80195ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80195d0:	065b      	lsls	r3, r3, #25
 80195d2:	d500      	bpl.n	80195d6 <_svfiprintf_r+0x1d2>
 80195d4:	e72c      	b.n	8019430 <_svfiprintf_r+0x2c>
 80195d6:	b021      	add	sp, #132	@ 0x84
 80195d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195da:	aa07      	add	r2, sp, #28
 80195dc:	9200      	str	r2, [sp, #0]
 80195de:	0021      	movs	r1, r4
 80195e0:	003a      	movs	r2, r7
 80195e2:	4b06      	ldr	r3, [pc, #24]	@ (80195fc <_svfiprintf_r+0x1f8>)
 80195e4:	9803      	ldr	r0, [sp, #12]
 80195e6:	f000 f87b 	bl	80196e0 <_printf_i>
 80195ea:	e7eb      	b.n	80195c4 <_svfiprintf_r+0x1c0>
 80195ec:	0801a228 	.word	0x0801a228
 80195f0:	0801a22e 	.word	0x0801a22e
 80195f4:	0801a232 	.word	0x0801a232
 80195f8:	00000000 	.word	0x00000000
 80195fc:	08019345 	.word	0x08019345

08019600 <_printf_common>:
 8019600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019602:	0016      	movs	r6, r2
 8019604:	9301      	str	r3, [sp, #4]
 8019606:	688a      	ldr	r2, [r1, #8]
 8019608:	690b      	ldr	r3, [r1, #16]
 801960a:	000c      	movs	r4, r1
 801960c:	9000      	str	r0, [sp, #0]
 801960e:	4293      	cmp	r3, r2
 8019610:	da00      	bge.n	8019614 <_printf_common+0x14>
 8019612:	0013      	movs	r3, r2
 8019614:	0022      	movs	r2, r4
 8019616:	6033      	str	r3, [r6, #0]
 8019618:	3243      	adds	r2, #67	@ 0x43
 801961a:	7812      	ldrb	r2, [r2, #0]
 801961c:	2a00      	cmp	r2, #0
 801961e:	d001      	beq.n	8019624 <_printf_common+0x24>
 8019620:	3301      	adds	r3, #1
 8019622:	6033      	str	r3, [r6, #0]
 8019624:	6823      	ldr	r3, [r4, #0]
 8019626:	069b      	lsls	r3, r3, #26
 8019628:	d502      	bpl.n	8019630 <_printf_common+0x30>
 801962a:	6833      	ldr	r3, [r6, #0]
 801962c:	3302      	adds	r3, #2
 801962e:	6033      	str	r3, [r6, #0]
 8019630:	6822      	ldr	r2, [r4, #0]
 8019632:	2306      	movs	r3, #6
 8019634:	0015      	movs	r5, r2
 8019636:	401d      	ands	r5, r3
 8019638:	421a      	tst	r2, r3
 801963a:	d027      	beq.n	801968c <_printf_common+0x8c>
 801963c:	0023      	movs	r3, r4
 801963e:	3343      	adds	r3, #67	@ 0x43
 8019640:	781b      	ldrb	r3, [r3, #0]
 8019642:	1e5a      	subs	r2, r3, #1
 8019644:	4193      	sbcs	r3, r2
 8019646:	6822      	ldr	r2, [r4, #0]
 8019648:	0692      	lsls	r2, r2, #26
 801964a:	d430      	bmi.n	80196ae <_printf_common+0xae>
 801964c:	0022      	movs	r2, r4
 801964e:	9901      	ldr	r1, [sp, #4]
 8019650:	9800      	ldr	r0, [sp, #0]
 8019652:	9d08      	ldr	r5, [sp, #32]
 8019654:	3243      	adds	r2, #67	@ 0x43
 8019656:	47a8      	blx	r5
 8019658:	3001      	adds	r0, #1
 801965a:	d025      	beq.n	80196a8 <_printf_common+0xa8>
 801965c:	2206      	movs	r2, #6
 801965e:	6823      	ldr	r3, [r4, #0]
 8019660:	2500      	movs	r5, #0
 8019662:	4013      	ands	r3, r2
 8019664:	2b04      	cmp	r3, #4
 8019666:	d105      	bne.n	8019674 <_printf_common+0x74>
 8019668:	6833      	ldr	r3, [r6, #0]
 801966a:	68e5      	ldr	r5, [r4, #12]
 801966c:	1aed      	subs	r5, r5, r3
 801966e:	43eb      	mvns	r3, r5
 8019670:	17db      	asrs	r3, r3, #31
 8019672:	401d      	ands	r5, r3
 8019674:	68a3      	ldr	r3, [r4, #8]
 8019676:	6922      	ldr	r2, [r4, #16]
 8019678:	4293      	cmp	r3, r2
 801967a:	dd01      	ble.n	8019680 <_printf_common+0x80>
 801967c:	1a9b      	subs	r3, r3, r2
 801967e:	18ed      	adds	r5, r5, r3
 8019680:	2600      	movs	r6, #0
 8019682:	42b5      	cmp	r5, r6
 8019684:	d120      	bne.n	80196c8 <_printf_common+0xc8>
 8019686:	2000      	movs	r0, #0
 8019688:	e010      	b.n	80196ac <_printf_common+0xac>
 801968a:	3501      	adds	r5, #1
 801968c:	68e3      	ldr	r3, [r4, #12]
 801968e:	6832      	ldr	r2, [r6, #0]
 8019690:	1a9b      	subs	r3, r3, r2
 8019692:	42ab      	cmp	r3, r5
 8019694:	ddd2      	ble.n	801963c <_printf_common+0x3c>
 8019696:	0022      	movs	r2, r4
 8019698:	2301      	movs	r3, #1
 801969a:	9901      	ldr	r1, [sp, #4]
 801969c:	9800      	ldr	r0, [sp, #0]
 801969e:	9f08      	ldr	r7, [sp, #32]
 80196a0:	3219      	adds	r2, #25
 80196a2:	47b8      	blx	r7
 80196a4:	3001      	adds	r0, #1
 80196a6:	d1f0      	bne.n	801968a <_printf_common+0x8a>
 80196a8:	2001      	movs	r0, #1
 80196aa:	4240      	negs	r0, r0
 80196ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80196ae:	2030      	movs	r0, #48	@ 0x30
 80196b0:	18e1      	adds	r1, r4, r3
 80196b2:	3143      	adds	r1, #67	@ 0x43
 80196b4:	7008      	strb	r0, [r1, #0]
 80196b6:	0021      	movs	r1, r4
 80196b8:	1c5a      	adds	r2, r3, #1
 80196ba:	3145      	adds	r1, #69	@ 0x45
 80196bc:	7809      	ldrb	r1, [r1, #0]
 80196be:	18a2      	adds	r2, r4, r2
 80196c0:	3243      	adds	r2, #67	@ 0x43
 80196c2:	3302      	adds	r3, #2
 80196c4:	7011      	strb	r1, [r2, #0]
 80196c6:	e7c1      	b.n	801964c <_printf_common+0x4c>
 80196c8:	0022      	movs	r2, r4
 80196ca:	2301      	movs	r3, #1
 80196cc:	9901      	ldr	r1, [sp, #4]
 80196ce:	9800      	ldr	r0, [sp, #0]
 80196d0:	9f08      	ldr	r7, [sp, #32]
 80196d2:	321a      	adds	r2, #26
 80196d4:	47b8      	blx	r7
 80196d6:	3001      	adds	r0, #1
 80196d8:	d0e6      	beq.n	80196a8 <_printf_common+0xa8>
 80196da:	3601      	adds	r6, #1
 80196dc:	e7d1      	b.n	8019682 <_printf_common+0x82>
	...

080196e0 <_printf_i>:
 80196e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196e2:	b08b      	sub	sp, #44	@ 0x2c
 80196e4:	9206      	str	r2, [sp, #24]
 80196e6:	000a      	movs	r2, r1
 80196e8:	3243      	adds	r2, #67	@ 0x43
 80196ea:	9307      	str	r3, [sp, #28]
 80196ec:	9005      	str	r0, [sp, #20]
 80196ee:	9203      	str	r2, [sp, #12]
 80196f0:	7e0a      	ldrb	r2, [r1, #24]
 80196f2:	000c      	movs	r4, r1
 80196f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196f6:	2a78      	cmp	r2, #120	@ 0x78
 80196f8:	d809      	bhi.n	801970e <_printf_i+0x2e>
 80196fa:	2a62      	cmp	r2, #98	@ 0x62
 80196fc:	d80b      	bhi.n	8019716 <_printf_i+0x36>
 80196fe:	2a00      	cmp	r2, #0
 8019700:	d100      	bne.n	8019704 <_printf_i+0x24>
 8019702:	e0bc      	b.n	801987e <_printf_i+0x19e>
 8019704:	497b      	ldr	r1, [pc, #492]	@ (80198f4 <_printf_i+0x214>)
 8019706:	9104      	str	r1, [sp, #16]
 8019708:	2a58      	cmp	r2, #88	@ 0x58
 801970a:	d100      	bne.n	801970e <_printf_i+0x2e>
 801970c:	e090      	b.n	8019830 <_printf_i+0x150>
 801970e:	0025      	movs	r5, r4
 8019710:	3542      	adds	r5, #66	@ 0x42
 8019712:	702a      	strb	r2, [r5, #0]
 8019714:	e022      	b.n	801975c <_printf_i+0x7c>
 8019716:	0010      	movs	r0, r2
 8019718:	3863      	subs	r0, #99	@ 0x63
 801971a:	2815      	cmp	r0, #21
 801971c:	d8f7      	bhi.n	801970e <_printf_i+0x2e>
 801971e:	f7e6 fcf9 	bl	8000114 <__gnu_thumb1_case_shi>
 8019722:	0016      	.short	0x0016
 8019724:	fff6001f 	.word	0xfff6001f
 8019728:	fff6fff6 	.word	0xfff6fff6
 801972c:	001ffff6 	.word	0x001ffff6
 8019730:	fff6fff6 	.word	0xfff6fff6
 8019734:	fff6fff6 	.word	0xfff6fff6
 8019738:	003600a1 	.word	0x003600a1
 801973c:	fff60080 	.word	0xfff60080
 8019740:	00b2fff6 	.word	0x00b2fff6
 8019744:	0036fff6 	.word	0x0036fff6
 8019748:	fff6fff6 	.word	0xfff6fff6
 801974c:	0084      	.short	0x0084
 801974e:	0025      	movs	r5, r4
 8019750:	681a      	ldr	r2, [r3, #0]
 8019752:	3542      	adds	r5, #66	@ 0x42
 8019754:	1d11      	adds	r1, r2, #4
 8019756:	6019      	str	r1, [r3, #0]
 8019758:	6813      	ldr	r3, [r2, #0]
 801975a:	702b      	strb	r3, [r5, #0]
 801975c:	2301      	movs	r3, #1
 801975e:	e0a0      	b.n	80198a2 <_printf_i+0x1c2>
 8019760:	6818      	ldr	r0, [r3, #0]
 8019762:	6809      	ldr	r1, [r1, #0]
 8019764:	1d02      	adds	r2, r0, #4
 8019766:	060d      	lsls	r5, r1, #24
 8019768:	d50b      	bpl.n	8019782 <_printf_i+0xa2>
 801976a:	6806      	ldr	r6, [r0, #0]
 801976c:	601a      	str	r2, [r3, #0]
 801976e:	2e00      	cmp	r6, #0
 8019770:	da03      	bge.n	801977a <_printf_i+0x9a>
 8019772:	232d      	movs	r3, #45	@ 0x2d
 8019774:	9a03      	ldr	r2, [sp, #12]
 8019776:	4276      	negs	r6, r6
 8019778:	7013      	strb	r3, [r2, #0]
 801977a:	4b5e      	ldr	r3, [pc, #376]	@ (80198f4 <_printf_i+0x214>)
 801977c:	270a      	movs	r7, #10
 801977e:	9304      	str	r3, [sp, #16]
 8019780:	e018      	b.n	80197b4 <_printf_i+0xd4>
 8019782:	6806      	ldr	r6, [r0, #0]
 8019784:	601a      	str	r2, [r3, #0]
 8019786:	0649      	lsls	r1, r1, #25
 8019788:	d5f1      	bpl.n	801976e <_printf_i+0x8e>
 801978a:	b236      	sxth	r6, r6
 801978c:	e7ef      	b.n	801976e <_printf_i+0x8e>
 801978e:	6808      	ldr	r0, [r1, #0]
 8019790:	6819      	ldr	r1, [r3, #0]
 8019792:	c940      	ldmia	r1!, {r6}
 8019794:	0605      	lsls	r5, r0, #24
 8019796:	d402      	bmi.n	801979e <_printf_i+0xbe>
 8019798:	0640      	lsls	r0, r0, #25
 801979a:	d500      	bpl.n	801979e <_printf_i+0xbe>
 801979c:	b2b6      	uxth	r6, r6
 801979e:	6019      	str	r1, [r3, #0]
 80197a0:	4b54      	ldr	r3, [pc, #336]	@ (80198f4 <_printf_i+0x214>)
 80197a2:	270a      	movs	r7, #10
 80197a4:	9304      	str	r3, [sp, #16]
 80197a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80197a8:	d100      	bne.n	80197ac <_printf_i+0xcc>
 80197aa:	3f02      	subs	r7, #2
 80197ac:	0023      	movs	r3, r4
 80197ae:	2200      	movs	r2, #0
 80197b0:	3343      	adds	r3, #67	@ 0x43
 80197b2:	701a      	strb	r2, [r3, #0]
 80197b4:	6863      	ldr	r3, [r4, #4]
 80197b6:	60a3      	str	r3, [r4, #8]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	db03      	blt.n	80197c4 <_printf_i+0xe4>
 80197bc:	2104      	movs	r1, #4
 80197be:	6822      	ldr	r2, [r4, #0]
 80197c0:	438a      	bics	r2, r1
 80197c2:	6022      	str	r2, [r4, #0]
 80197c4:	2e00      	cmp	r6, #0
 80197c6:	d102      	bne.n	80197ce <_printf_i+0xee>
 80197c8:	9d03      	ldr	r5, [sp, #12]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d00c      	beq.n	80197e8 <_printf_i+0x108>
 80197ce:	9d03      	ldr	r5, [sp, #12]
 80197d0:	0030      	movs	r0, r6
 80197d2:	0039      	movs	r1, r7
 80197d4:	f7e6 fd2e 	bl	8000234 <__aeabi_uidivmod>
 80197d8:	9b04      	ldr	r3, [sp, #16]
 80197da:	3d01      	subs	r5, #1
 80197dc:	5c5b      	ldrb	r3, [r3, r1]
 80197de:	702b      	strb	r3, [r5, #0]
 80197e0:	0033      	movs	r3, r6
 80197e2:	0006      	movs	r6, r0
 80197e4:	429f      	cmp	r7, r3
 80197e6:	d9f3      	bls.n	80197d0 <_printf_i+0xf0>
 80197e8:	2f08      	cmp	r7, #8
 80197ea:	d109      	bne.n	8019800 <_printf_i+0x120>
 80197ec:	6823      	ldr	r3, [r4, #0]
 80197ee:	07db      	lsls	r3, r3, #31
 80197f0:	d506      	bpl.n	8019800 <_printf_i+0x120>
 80197f2:	6862      	ldr	r2, [r4, #4]
 80197f4:	6923      	ldr	r3, [r4, #16]
 80197f6:	429a      	cmp	r2, r3
 80197f8:	dc02      	bgt.n	8019800 <_printf_i+0x120>
 80197fa:	2330      	movs	r3, #48	@ 0x30
 80197fc:	3d01      	subs	r5, #1
 80197fe:	702b      	strb	r3, [r5, #0]
 8019800:	9b03      	ldr	r3, [sp, #12]
 8019802:	1b5b      	subs	r3, r3, r5
 8019804:	6123      	str	r3, [r4, #16]
 8019806:	9b07      	ldr	r3, [sp, #28]
 8019808:	0021      	movs	r1, r4
 801980a:	9300      	str	r3, [sp, #0]
 801980c:	9805      	ldr	r0, [sp, #20]
 801980e:	9b06      	ldr	r3, [sp, #24]
 8019810:	aa09      	add	r2, sp, #36	@ 0x24
 8019812:	f7ff fef5 	bl	8019600 <_printf_common>
 8019816:	3001      	adds	r0, #1
 8019818:	d148      	bne.n	80198ac <_printf_i+0x1cc>
 801981a:	2001      	movs	r0, #1
 801981c:	4240      	negs	r0, r0
 801981e:	b00b      	add	sp, #44	@ 0x2c
 8019820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019822:	2220      	movs	r2, #32
 8019824:	6809      	ldr	r1, [r1, #0]
 8019826:	430a      	orrs	r2, r1
 8019828:	6022      	str	r2, [r4, #0]
 801982a:	2278      	movs	r2, #120	@ 0x78
 801982c:	4932      	ldr	r1, [pc, #200]	@ (80198f8 <_printf_i+0x218>)
 801982e:	9104      	str	r1, [sp, #16]
 8019830:	0021      	movs	r1, r4
 8019832:	3145      	adds	r1, #69	@ 0x45
 8019834:	700a      	strb	r2, [r1, #0]
 8019836:	6819      	ldr	r1, [r3, #0]
 8019838:	6822      	ldr	r2, [r4, #0]
 801983a:	c940      	ldmia	r1!, {r6}
 801983c:	0610      	lsls	r0, r2, #24
 801983e:	d402      	bmi.n	8019846 <_printf_i+0x166>
 8019840:	0650      	lsls	r0, r2, #25
 8019842:	d500      	bpl.n	8019846 <_printf_i+0x166>
 8019844:	b2b6      	uxth	r6, r6
 8019846:	6019      	str	r1, [r3, #0]
 8019848:	07d3      	lsls	r3, r2, #31
 801984a:	d502      	bpl.n	8019852 <_printf_i+0x172>
 801984c:	2320      	movs	r3, #32
 801984e:	4313      	orrs	r3, r2
 8019850:	6023      	str	r3, [r4, #0]
 8019852:	2e00      	cmp	r6, #0
 8019854:	d001      	beq.n	801985a <_printf_i+0x17a>
 8019856:	2710      	movs	r7, #16
 8019858:	e7a8      	b.n	80197ac <_printf_i+0xcc>
 801985a:	2220      	movs	r2, #32
 801985c:	6823      	ldr	r3, [r4, #0]
 801985e:	4393      	bics	r3, r2
 8019860:	6023      	str	r3, [r4, #0]
 8019862:	e7f8      	b.n	8019856 <_printf_i+0x176>
 8019864:	681a      	ldr	r2, [r3, #0]
 8019866:	680d      	ldr	r5, [r1, #0]
 8019868:	1d10      	adds	r0, r2, #4
 801986a:	6949      	ldr	r1, [r1, #20]
 801986c:	6018      	str	r0, [r3, #0]
 801986e:	6813      	ldr	r3, [r2, #0]
 8019870:	062e      	lsls	r6, r5, #24
 8019872:	d501      	bpl.n	8019878 <_printf_i+0x198>
 8019874:	6019      	str	r1, [r3, #0]
 8019876:	e002      	b.n	801987e <_printf_i+0x19e>
 8019878:	066d      	lsls	r5, r5, #25
 801987a:	d5fb      	bpl.n	8019874 <_printf_i+0x194>
 801987c:	8019      	strh	r1, [r3, #0]
 801987e:	2300      	movs	r3, #0
 8019880:	9d03      	ldr	r5, [sp, #12]
 8019882:	6123      	str	r3, [r4, #16]
 8019884:	e7bf      	b.n	8019806 <_printf_i+0x126>
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	1d11      	adds	r1, r2, #4
 801988a:	6019      	str	r1, [r3, #0]
 801988c:	6815      	ldr	r5, [r2, #0]
 801988e:	2100      	movs	r1, #0
 8019890:	0028      	movs	r0, r5
 8019892:	6862      	ldr	r2, [r4, #4]
 8019894:	f000 f858 	bl	8019948 <memchr>
 8019898:	2800      	cmp	r0, #0
 801989a:	d001      	beq.n	80198a0 <_printf_i+0x1c0>
 801989c:	1b40      	subs	r0, r0, r5
 801989e:	6060      	str	r0, [r4, #4]
 80198a0:	6863      	ldr	r3, [r4, #4]
 80198a2:	6123      	str	r3, [r4, #16]
 80198a4:	2300      	movs	r3, #0
 80198a6:	9a03      	ldr	r2, [sp, #12]
 80198a8:	7013      	strb	r3, [r2, #0]
 80198aa:	e7ac      	b.n	8019806 <_printf_i+0x126>
 80198ac:	002a      	movs	r2, r5
 80198ae:	6923      	ldr	r3, [r4, #16]
 80198b0:	9906      	ldr	r1, [sp, #24]
 80198b2:	9805      	ldr	r0, [sp, #20]
 80198b4:	9d07      	ldr	r5, [sp, #28]
 80198b6:	47a8      	blx	r5
 80198b8:	3001      	adds	r0, #1
 80198ba:	d0ae      	beq.n	801981a <_printf_i+0x13a>
 80198bc:	6823      	ldr	r3, [r4, #0]
 80198be:	079b      	lsls	r3, r3, #30
 80198c0:	d415      	bmi.n	80198ee <_printf_i+0x20e>
 80198c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198c4:	68e0      	ldr	r0, [r4, #12]
 80198c6:	4298      	cmp	r0, r3
 80198c8:	daa9      	bge.n	801981e <_printf_i+0x13e>
 80198ca:	0018      	movs	r0, r3
 80198cc:	e7a7      	b.n	801981e <_printf_i+0x13e>
 80198ce:	0022      	movs	r2, r4
 80198d0:	2301      	movs	r3, #1
 80198d2:	9906      	ldr	r1, [sp, #24]
 80198d4:	9805      	ldr	r0, [sp, #20]
 80198d6:	9e07      	ldr	r6, [sp, #28]
 80198d8:	3219      	adds	r2, #25
 80198da:	47b0      	blx	r6
 80198dc:	3001      	adds	r0, #1
 80198de:	d09c      	beq.n	801981a <_printf_i+0x13a>
 80198e0:	3501      	adds	r5, #1
 80198e2:	68e3      	ldr	r3, [r4, #12]
 80198e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198e6:	1a9b      	subs	r3, r3, r2
 80198e8:	42ab      	cmp	r3, r5
 80198ea:	dcf0      	bgt.n	80198ce <_printf_i+0x1ee>
 80198ec:	e7e9      	b.n	80198c2 <_printf_i+0x1e2>
 80198ee:	2500      	movs	r5, #0
 80198f0:	e7f7      	b.n	80198e2 <_printf_i+0x202>
 80198f2:	46c0      	nop			@ (mov r8, r8)
 80198f4:	0801a239 	.word	0x0801a239
 80198f8:	0801a24a 	.word	0x0801a24a

080198fc <memmove>:
 80198fc:	b510      	push	{r4, lr}
 80198fe:	4288      	cmp	r0, r1
 8019900:	d806      	bhi.n	8019910 <memmove+0x14>
 8019902:	2300      	movs	r3, #0
 8019904:	429a      	cmp	r2, r3
 8019906:	d008      	beq.n	801991a <memmove+0x1e>
 8019908:	5ccc      	ldrb	r4, [r1, r3]
 801990a:	54c4      	strb	r4, [r0, r3]
 801990c:	3301      	adds	r3, #1
 801990e:	e7f9      	b.n	8019904 <memmove+0x8>
 8019910:	188b      	adds	r3, r1, r2
 8019912:	4298      	cmp	r0, r3
 8019914:	d2f5      	bcs.n	8019902 <memmove+0x6>
 8019916:	3a01      	subs	r2, #1
 8019918:	d200      	bcs.n	801991c <memmove+0x20>
 801991a:	bd10      	pop	{r4, pc}
 801991c:	5c8b      	ldrb	r3, [r1, r2]
 801991e:	5483      	strb	r3, [r0, r2]
 8019920:	e7f9      	b.n	8019916 <memmove+0x1a>
	...

08019924 <_sbrk_r>:
 8019924:	2300      	movs	r3, #0
 8019926:	b570      	push	{r4, r5, r6, lr}
 8019928:	4d06      	ldr	r5, [pc, #24]	@ (8019944 <_sbrk_r+0x20>)
 801992a:	0004      	movs	r4, r0
 801992c:	0008      	movs	r0, r1
 801992e:	602b      	str	r3, [r5, #0]
 8019930:	f7f4 fd0c 	bl	800e34c <_sbrk>
 8019934:	1c43      	adds	r3, r0, #1
 8019936:	d103      	bne.n	8019940 <_sbrk_r+0x1c>
 8019938:	682b      	ldr	r3, [r5, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d000      	beq.n	8019940 <_sbrk_r+0x1c>
 801993e:	6023      	str	r3, [r4, #0]
 8019940:	bd70      	pop	{r4, r5, r6, pc}
 8019942:	46c0      	nop			@ (mov r8, r8)
 8019944:	2000377c 	.word	0x2000377c

08019948 <memchr>:
 8019948:	b2c9      	uxtb	r1, r1
 801994a:	1882      	adds	r2, r0, r2
 801994c:	4290      	cmp	r0, r2
 801994e:	d101      	bne.n	8019954 <memchr+0xc>
 8019950:	2000      	movs	r0, #0
 8019952:	4770      	bx	lr
 8019954:	7803      	ldrb	r3, [r0, #0]
 8019956:	428b      	cmp	r3, r1
 8019958:	d0fb      	beq.n	8019952 <memchr+0xa>
 801995a:	3001      	adds	r0, #1
 801995c:	e7f6      	b.n	801994c <memchr+0x4>

0801995e <_realloc_r>:
 801995e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019960:	0006      	movs	r6, r0
 8019962:	000c      	movs	r4, r1
 8019964:	0015      	movs	r5, r2
 8019966:	2900      	cmp	r1, #0
 8019968:	d105      	bne.n	8019976 <_realloc_r+0x18>
 801996a:	0011      	movs	r1, r2
 801996c:	f7ff fc5a 	bl	8019224 <_malloc_r>
 8019970:	0004      	movs	r4, r0
 8019972:	0020      	movs	r0, r4
 8019974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019976:	2a00      	cmp	r2, #0
 8019978:	d103      	bne.n	8019982 <_realloc_r+0x24>
 801997a:	f7ff fbe7 	bl	801914c <_free_r>
 801997e:	2400      	movs	r4, #0
 8019980:	e7f7      	b.n	8019972 <_realloc_r+0x14>
 8019982:	f000 f81b 	bl	80199bc <_malloc_usable_size_r>
 8019986:	0007      	movs	r7, r0
 8019988:	4285      	cmp	r5, r0
 801998a:	d802      	bhi.n	8019992 <_realloc_r+0x34>
 801998c:	0843      	lsrs	r3, r0, #1
 801998e:	42ab      	cmp	r3, r5
 8019990:	d3ef      	bcc.n	8019972 <_realloc_r+0x14>
 8019992:	0029      	movs	r1, r5
 8019994:	0030      	movs	r0, r6
 8019996:	f7ff fc45 	bl	8019224 <_malloc_r>
 801999a:	9001      	str	r0, [sp, #4]
 801999c:	2800      	cmp	r0, #0
 801999e:	d0ee      	beq.n	801997e <_realloc_r+0x20>
 80199a0:	002a      	movs	r2, r5
 80199a2:	42bd      	cmp	r5, r7
 80199a4:	d900      	bls.n	80199a8 <_realloc_r+0x4a>
 80199a6:	003a      	movs	r2, r7
 80199a8:	0021      	movs	r1, r4
 80199aa:	9801      	ldr	r0, [sp, #4]
 80199ac:	f7ff fbc4 	bl	8019138 <memcpy>
 80199b0:	0021      	movs	r1, r4
 80199b2:	0030      	movs	r0, r6
 80199b4:	f7ff fbca 	bl	801914c <_free_r>
 80199b8:	9c01      	ldr	r4, [sp, #4]
 80199ba:	e7da      	b.n	8019972 <_realloc_r+0x14>

080199bc <_malloc_usable_size_r>:
 80199bc:	1f0b      	subs	r3, r1, #4
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	1f18      	subs	r0, r3, #4
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	da01      	bge.n	80199ca <_malloc_usable_size_r+0xe>
 80199c6:	580b      	ldr	r3, [r1, r0]
 80199c8:	18c0      	adds	r0, r0, r3
 80199ca:	4770      	bx	lr

080199cc <_init>:
 80199cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ce:	46c0      	nop			@ (mov r8, r8)
 80199d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199d2:	bc08      	pop	{r3}
 80199d4:	469e      	mov	lr, r3
 80199d6:	4770      	bx	lr

080199d8 <_fini>:
 80199d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199da:	46c0      	nop			@ (mov r8, r8)
 80199dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199de:	bc08      	pop	{r3}
 80199e0:	469e      	mov	lr, r3
 80199e2:	4770      	bx	lr
